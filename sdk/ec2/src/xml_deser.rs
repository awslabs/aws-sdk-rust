// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_http_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<aws_smithy_types::Error, aws_smithy_xml::decode::XmlError> {
    crate::ec2_query_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_reserved_instances_exchange_quote(
    inp: &[u8],
    mut builder: crate::output::accept_reserved_instances_exchange_quote_output::Builder,
) -> Result<
    crate::output::accept_reserved_instances_exchange_quote_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptReservedInstancesExchangeQuoteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AcceptReservedInstancesExchangeQuoteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("exchangeId") /* ExchangeId com.amazonaws.ec2.synthetic#AcceptReservedInstancesExchangeQuoteOutput$ExchangeId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_exchange_id(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    inp: &[u8],
    mut builder: crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder,
) -> Result<
    crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptTransitGatewayMulticastDomainAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected AcceptTransitGatewayMulticastDomainAssociationsResponse got {:?}", start_el)));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associations") /* Associations com.amazonaws.ec2.synthetic#AcceptTransitGatewayMulticastDomainAssociationsOutput$Associations */ =>  {
                let var_2 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_associations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_transit_gateway_peering_attachment(
    inp: &[u8],
    mut builder: crate::output::accept_transit_gateway_peering_attachment_output::Builder,
) -> Result<
    crate::output::accept_transit_gateway_peering_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptTransitGatewayPeeringAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AcceptTransitGatewayPeeringAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPeeringAttachment") /* TransitGatewayPeeringAttachment com.amazonaws.ec2.synthetic#AcceptTransitGatewayPeeringAttachmentOutput$TransitGatewayPeeringAttachment */ =>  {
                let var_3 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_peering_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_peering_attachment(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    inp: &[u8],
    mut builder: crate::output::accept_transit_gateway_vpc_attachment_output::Builder,
) -> Result<
    crate::output::accept_transit_gateway_vpc_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptTransitGatewayVpcAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AcceptTransitGatewayVpcAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachment") /* TransitGatewayVpcAttachment com.amazonaws.ec2.synthetic#AcceptTransitGatewayVpcAttachmentOutput$TransitGatewayVpcAttachment */ =>  {
                let var_4 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachment(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_vpc_endpoint_connections(
    inp: &[u8],
    mut builder: crate::output::accept_vpc_endpoint_connections_output::Builder,
) -> Result<
    crate::output::accept_vpc_endpoint_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptVpcEndpointConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AcceptVpcEndpointConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#AcceptVpcEndpointConnectionsOutput$Unsuccessful */ =>  {
                let var_5 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_accept_vpc_peering_connection(
    inp: &[u8],
    mut builder: crate::output::accept_vpc_peering_connection_output::Builder,
) -> Result<
    crate::output::accept_vpc_peering_connection_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AcceptVpcPeeringConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AcceptVpcPeeringConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcPeeringConnection") /* VpcPeeringConnection com.amazonaws.ec2.synthetic#AcceptVpcPeeringConnectionOutput$VpcPeeringConnection */ =>  {
                let var_6 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_advertise_byoip_cidr(
    inp: &[u8],
    mut builder: crate::output::advertise_byoip_cidr_output::Builder,
) -> Result<crate::output::advertise_byoip_cidr_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AdvertiseByoipCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AdvertiseByoipCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidr") /* ByoipCidr com.amazonaws.ec2.synthetic#AdvertiseByoipCidrOutput$ByoipCidr */ =>  {
                let var_7 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidr(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_allocate_address(
    inp: &[u8],
    mut builder: crate::output::allocate_address_output::Builder,
) -> Result<crate::output::allocate_address_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AllocateAddressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AllocateAddressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2.synthetic#AllocateAddressOutput$PublicIp */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_8);
            }
            ,
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2.synthetic#AllocateAddressOutput$AllocationId */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_9);
            }
            ,
            s if s.matches("publicIpv4Pool") /* PublicIpv4Pool com.amazonaws.ec2.synthetic#AllocateAddressOutput$PublicIpv4Pool */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ipv4_pool(var_10);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2.synthetic#AllocateAddressOutput$NetworkBorderGroup */ =>  {
                let var_11 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_11);
            }
            ,
            s if s.matches("domain") /* Domain com.amazonaws.ec2.synthetic#AllocateAddressOutput$Domain */ =>  {
                let var_12 =
                    Some(
                        Result::<crate::model::DomainType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DomainType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_domain(var_12);
            }
            ,
            s if s.matches("customerOwnedIp") /* CustomerOwnedIp com.amazonaws.ec2.synthetic#AllocateAddressOutput$CustomerOwnedIp */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ip(var_13);
            }
            ,
            s if s.matches("customerOwnedIpv4Pool") /* CustomerOwnedIpv4Pool com.amazonaws.ec2.synthetic#AllocateAddressOutput$CustomerOwnedIpv4Pool */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ipv4_pool(var_14);
            }
            ,
            s if s.matches("carrierIp") /* CarrierIp com.amazonaws.ec2.synthetic#AllocateAddressOutput$CarrierIp */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_ip(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_allocate_hosts(
    inp: &[u8],
    mut builder: crate::output::allocate_hosts_output::Builder,
) -> Result<crate::output::allocate_hosts_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AllocateHostsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AllocateHostsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostIdSet") /* HostIds com.amazonaws.ec2.synthetic#AllocateHostsOutput$HostIds */ =>  {
                let var_16 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_response_host_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_ids(var_16);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_allocate_ipam_pool_cidr(
    inp: &[u8],
    mut builder: crate::output::allocate_ipam_pool_cidr_output::Builder,
) -> Result<crate::output::allocate_ipam_pool_cidr_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AllocateIpamPoolCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AllocateIpamPoolCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPoolAllocation") /* IpamPoolAllocation com.amazonaws.ec2.synthetic#AllocateIpamPoolCidrOutput$IpamPoolAllocation */ =>  {
                let var_17 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool_allocation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_allocation(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    inp: &[u8],
    mut builder: crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder,
) -> Result<
    crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ApplySecurityGroupsToClientVpnTargetNetworkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ApplySecurityGroupsToClientVpnTargetNetworkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("securityGroupIds") /* SecurityGroupIds com.amazonaws.ec2.synthetic#ApplySecurityGroupsToClientVpnTargetNetworkOutput$SecurityGroupIds */ =>  {
                let var_18 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_client_vpn_security_group_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_assign_ipv6_addresses(
    inp: &[u8],
    mut builder: crate::output::assign_ipv6_addresses_output::Builder,
) -> Result<crate::output::assign_ipv6_addresses_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssignIpv6AddressesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssignIpv6AddressesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("assignedIpv6Addresses") /* AssignedIpv6Addresses com.amazonaws.ec2.synthetic#AssignIpv6AddressesOutput$AssignedIpv6Addresses */ =>  {
                let var_19 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assigned_ipv6_addresses(var_19);
            }
            ,
            s if s.matches("assignedIpv6PrefixSet") /* AssignedIpv6Prefixes com.amazonaws.ec2.synthetic#AssignIpv6AddressesOutput$AssignedIpv6Prefixes */ =>  {
                let var_20 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assigned_ipv6_prefixes(var_20);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2.synthetic#AssignIpv6AddressesOutput$NetworkInterfaceId */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_21);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_assign_private_ip_addresses(
    inp: &[u8],
    mut builder: crate::output::assign_private_ip_addresses_output::Builder,
) -> Result<
    crate::output::assign_private_ip_addresses_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssignPrivateIpAddressesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssignPrivateIpAddressesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2.synthetic#AssignPrivateIpAddressesOutput$NetworkInterfaceId */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_22);
            }
            ,
            s if s.matches("assignedPrivateIpAddressesSet") /* AssignedPrivateIpAddresses com.amazonaws.ec2.synthetic#AssignPrivateIpAddressesOutput$AssignedPrivateIpAddresses */ =>  {
                let var_23 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_assigned_private_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assigned_private_ip_addresses(var_23);
            }
            ,
            s if s.matches("assignedIpv4PrefixSet") /* AssignedIpv4Prefixes com.amazonaws.ec2.synthetic#AssignPrivateIpAddressesOutput$AssignedIpv4Prefixes */ =>  {
                let var_24 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv4_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assigned_ipv4_prefixes(var_24);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_address(
    inp: &[u8],
    mut builder: crate::output::associate_address_output::Builder,
) -> Result<crate::output::associate_address_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateAddressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateAddressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2.synthetic#AssociateAddressOutput$AssociationId */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_25);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_client_vpn_target_network(
    inp: &[u8],
    mut builder: crate::output::associate_client_vpn_target_network_output::Builder,
) -> Result<
    crate::output::associate_client_vpn_target_network_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateClientVpnTargetNetworkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateClientVpnTargetNetworkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2.synthetic#AssociateClientVpnTargetNetworkOutput$AssociationId */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_26);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#AssociateClientVpnTargetNetworkOutput$Status */ =>  {
                let var_27 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_association_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_27);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_enclave_certificate_iam_role(
    inp: &[u8],
    mut builder: crate::output::associate_enclave_certificate_iam_role_output::Builder,
) -> Result<
    crate::output::associate_enclave_certificate_iam_role_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateEnclaveCertificateIamRoleResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateEnclaveCertificateIamRoleResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("certificateS3BucketName") /* CertificateS3BucketName com.amazonaws.ec2.synthetic#AssociateEnclaveCertificateIamRoleOutput$CertificateS3BucketName */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_s3_bucket_name(var_28);
            }
            ,
            s if s.matches("certificateS3ObjectKey") /* CertificateS3ObjectKey com.amazonaws.ec2.synthetic#AssociateEnclaveCertificateIamRoleOutput$CertificateS3ObjectKey */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_s3_object_key(var_29);
            }
            ,
            s if s.matches("encryptionKmsKeyId") /* EncryptionKmsKeyId com.amazonaws.ec2.synthetic#AssociateEnclaveCertificateIamRoleOutput$EncryptionKmsKeyId */ =>  {
                let var_30 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_encryption_kms_key_id(var_30);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_iam_instance_profile(
    inp: &[u8],
    mut builder: crate::output::associate_iam_instance_profile_output::Builder,
) -> Result<
    crate::output::associate_iam_instance_profile_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateIamInstanceProfileResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateIamInstanceProfileResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("iamInstanceProfileAssociation") /* IamInstanceProfileAssociation com.amazonaws.ec2.synthetic#AssociateIamInstanceProfileOutput$IamInstanceProfileAssociation */ =>  {
                let var_31 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile_association(var_31);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_instance_event_window(
    inp: &[u8],
    mut builder: crate::output::associate_instance_event_window_output::Builder,
) -> Result<
    crate::output::associate_instance_event_window_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateInstanceEventWindowResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateInstanceEventWindowResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindow") /* InstanceEventWindow com.amazonaws.ec2.synthetic#AssociateInstanceEventWindowOutput$InstanceEventWindow */ =>  {
                let var_32 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_window(var_32);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_route_table(
    inp: &[u8],
    mut builder: crate::output::associate_route_table_output::Builder,
) -> Result<crate::output::associate_route_table_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2.synthetic#AssociateRouteTableOutput$AssociationId */ =>  {
                let var_33 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_33);
            }
            ,
            s if s.matches("associationState") /* AssociationState com.amazonaws.ec2.synthetic#AssociateRouteTableOutput$AssociationState */ =>  {
                let var_34 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_route_table_association_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association_state(var_34);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_subnet_cidr_block(
    inp: &[u8],
    mut builder: crate::output::associate_subnet_cidr_block_output::Builder,
) -> Result<
    crate::output::associate_subnet_cidr_block_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateSubnetCidrBlockResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateSubnetCidrBlockResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrBlockAssociation") /* Ipv6CidrBlockAssociation com.amazonaws.ec2.synthetic#AssociateSubnetCidrBlockOutput$Ipv6CidrBlockAssociation */ =>  {
                let var_35 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_ipv6_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association(var_35);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2.synthetic#AssociateSubnetCidrBlockOutput$SubnetId */ =>  {
                let var_36 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_36);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_transit_gateway_multicast_domain(
    inp: &[u8],
    mut builder: crate::output::associate_transit_gateway_multicast_domain_output::Builder,
) -> Result<
    crate::output::associate_transit_gateway_multicast_domain_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateTransitGatewayMulticastDomainResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateTransitGatewayMulticastDomainResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associations") /* Associations com.amazonaws.ec2.synthetic#AssociateTransitGatewayMulticastDomainOutput$Associations */ =>  {
                let var_37 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_associations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_37);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_transit_gateway_route_table(
    inp: &[u8],
    mut builder: crate::output::associate_transit_gateway_route_table_output::Builder,
) -> Result<
    crate::output::associate_transit_gateway_route_table_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateTransitGatewayRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateTransitGatewayRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2.synthetic#AssociateTransitGatewayRouteTableOutput$Association */ =>  {
                let var_38 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_38);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_trunk_interface(
    inp: &[u8],
    mut builder: crate::output::associate_trunk_interface_output::Builder,
) -> Result<
    crate::output::associate_trunk_interface_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateTrunkInterfaceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateTrunkInterfaceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("interfaceAssociation") /* InterfaceAssociation com.amazonaws.ec2.synthetic#AssociateTrunkInterfaceOutput$InterfaceAssociation */ =>  {
                let var_39 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_trunk_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_interface_association(var_39);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#AssociateTrunkInterfaceOutput$ClientToken */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_40);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_associate_vpc_cidr_block(
    inp: &[u8],
    mut builder: crate::output::associate_vpc_cidr_block_output::Builder,
) -> Result<crate::output::associate_vpc_cidr_block_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssociateVpcCidrBlockResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssociateVpcCidrBlockResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrBlockAssociation") /* Ipv6CidrBlockAssociation com.amazonaws.ec2.synthetic#AssociateVpcCidrBlockOutput$Ipv6CidrBlockAssociation */ =>  {
                let var_41 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_ipv6_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association(var_41);
            }
            ,
            s if s.matches("cidrBlockAssociation") /* CidrBlockAssociation com.amazonaws.ec2.synthetic#AssociateVpcCidrBlockOutput$CidrBlockAssociation */ =>  {
                let var_42 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_association(var_42);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2.synthetic#AssociateVpcCidrBlockOutput$VpcId */ =>  {
                let var_43 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_43);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_attach_classic_link_vpc(
    inp: &[u8],
    mut builder: crate::output::attach_classic_link_vpc_output::Builder,
) -> Result<crate::output::attach_classic_link_vpc_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AttachClassicLinkVpcResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AttachClassicLinkVpcResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#AttachClassicLinkVpcOutput$Return */ =>  {
                let var_44 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_44);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_attach_network_interface(
    inp: &[u8],
    mut builder: crate::output::attach_network_interface_output::Builder,
) -> Result<crate::output::attach_network_interface_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AttachNetworkInterfaceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AttachNetworkInterfaceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachmentId") /* AttachmentId com.amazonaws.ec2.synthetic#AttachNetworkInterfaceOutput$AttachmentId */ =>  {
                let var_45 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attachment_id(var_45);
            }
            ,
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2.synthetic#AttachNetworkInterfaceOutput$NetworkCardIndex */ =>  {
                let var_46 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_46);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_attach_volume(
    inp: &[u8],
    mut builder: crate::output::attach_volume_output::Builder,
) -> Result<crate::output::attach_volume_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AttachVolumeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AttachVolumeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2.synthetic#AttachVolumeOutput$AttachTime */ =>  {
                let var_47 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_47);
            }
            ,
            s if s.matches("device") /* Device com.amazonaws.ec2.synthetic#AttachVolumeOutput$Device */ =>  {
                let var_48 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device(var_48);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#AttachVolumeOutput$InstanceId */ =>  {
                let var_49 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_49);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2.synthetic#AttachVolumeOutput$State */ =>  {
                let var_50 =
                    Some(
                        Result::<crate::model::VolumeAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_50);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#AttachVolumeOutput$VolumeId */ =>  {
                let var_51 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_51);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2.synthetic#AttachVolumeOutput$DeleteOnTermination */ =>  {
                let var_52 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_52);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_attach_vpn_gateway(
    inp: &[u8],
    mut builder: crate::output::attach_vpn_gateway_output::Builder,
) -> Result<crate::output::attach_vpn_gateway_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AttachVpnGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AttachVpnGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachment") /* VpcAttachment com.amazonaws.ec2.synthetic#AttachVpnGatewayOutput$VpcAttachment */ =>  {
                let var_53 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_attachment(var_53);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_authorize_client_vpn_ingress(
    inp: &[u8],
    mut builder: crate::output::authorize_client_vpn_ingress_output::Builder,
) -> Result<
    crate::output::authorize_client_vpn_ingress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AuthorizeClientVpnIngressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AuthorizeClientVpnIngressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#AuthorizeClientVpnIngressOutput$Status */ =>  {
                let var_54 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_authorization_rule_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_54);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_authorize_security_group_egress(
    inp: &[u8],
    mut builder: crate::output::authorize_security_group_egress_output::Builder,
) -> Result<
    crate::output::authorize_security_group_egress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AuthorizeSecurityGroupEgressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AuthorizeSecurityGroupEgressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#AuthorizeSecurityGroupEgressOutput$Return */ =>  {
                let var_55 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_55);
            }
            ,
            s if s.matches("securityGroupRuleSet") /* SecurityGroupRules com.amazonaws.ec2.synthetic#AuthorizeSecurityGroupEgressOutput$SecurityGroupRules */ =>  {
                let var_56 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_rule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rules(var_56);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_authorize_security_group_ingress(
    inp: &[u8],
    mut builder: crate::output::authorize_security_group_ingress_output::Builder,
) -> Result<
    crate::output::authorize_security_group_ingress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AuthorizeSecurityGroupIngressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AuthorizeSecurityGroupIngressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#AuthorizeSecurityGroupIngressOutput$Return */ =>  {
                let var_57 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_57);
            }
            ,
            s if s.matches("securityGroupRuleSet") /* SecurityGroupRules com.amazonaws.ec2.synthetic#AuthorizeSecurityGroupIngressOutput$SecurityGroupRules */ =>  {
                let var_58 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_rule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rules(var_58);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_bundle_instance(
    inp: &[u8],
    mut builder: crate::output::bundle_instance_output::Builder,
) -> Result<crate::output::bundle_instance_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("BundleInstanceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected BundleInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bundleInstanceTask") /* BundleTask com.amazonaws.ec2.synthetic#BundleInstanceOutput$BundleTask */ =>  {
                let var_59 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_bundle_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bundle_task(var_59);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_bundle_task(
    inp: &[u8],
    mut builder: crate::output::cancel_bundle_task_output::Builder,
) -> Result<crate::output::cancel_bundle_task_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelBundleTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelBundleTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bundleInstanceTask") /* BundleTask com.amazonaws.ec2.synthetic#CancelBundleTaskOutput$BundleTask */ =>  {
                let var_60 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_bundle_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bundle_task(var_60);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_capacity_reservation(
    inp: &[u8],
    mut builder: crate::output::cancel_capacity_reservation_output::Builder,
) -> Result<
    crate::output::cancel_capacity_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelCapacityReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelCapacityReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#CancelCapacityReservationOutput$Return */ =>  {
                let var_61 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_61);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_capacity_reservation_fleets(
    inp: &[u8],
    mut builder: crate::output::cancel_capacity_reservation_fleets_output::Builder,
) -> Result<
    crate::output::cancel_capacity_reservation_fleets_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelCapacityReservationFleetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelCapacityReservationFleetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfulFleetCancellationSet") /* SuccessfulFleetCancellations com.amazonaws.ec2.synthetic#CancelCapacityReservationFleetsOutput$SuccessfulFleetCancellations */ =>  {
                let var_62 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_capacity_reservation_fleet_cancellation_state_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful_fleet_cancellations(var_62);
            }
            ,
            s if s.matches("failedFleetCancellationSet") /* FailedFleetCancellations com.amazonaws.ec2.synthetic#CancelCapacityReservationFleetsOutput$FailedFleetCancellations */ =>  {
                let var_63 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_failed_capacity_reservation_fleet_cancellation_result_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_failed_fleet_cancellations(var_63);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_import_task(
    inp: &[u8],
    mut builder: crate::output::cancel_import_task_output::Builder,
) -> Result<crate::output::cancel_import_task_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelImportTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelImportTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("importTaskId") /* ImportTaskId com.amazonaws.ec2.synthetic#CancelImportTaskOutput$ImportTaskId */ =>  {
                let var_64 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_task_id(var_64);
            }
            ,
            s if s.matches("previousState") /* PreviousState com.amazonaws.ec2.synthetic#CancelImportTaskOutput$PreviousState */ =>  {
                let var_65 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_previous_state(var_65);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2.synthetic#CancelImportTaskOutput$State */ =>  {
                let var_66 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_66);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_reserved_instances_listing(
    inp: &[u8],
    mut builder: crate::output::cancel_reserved_instances_listing_output::Builder,
) -> Result<
    crate::output::cancel_reserved_instances_listing_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelReservedInstancesListingResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelReservedInstancesListingResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesListingsSet") /* ReservedInstancesListings com.amazonaws.ec2.synthetic#CancelReservedInstancesListingOutput$ReservedInstancesListings */ =>  {
                let var_67 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_listing_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_listings(var_67);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_spot_fleet_requests(
    inp: &[u8],
    mut builder: crate::output::cancel_spot_fleet_requests_output::Builder,
) -> Result<
    crate::output::cancel_spot_fleet_requests_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelSpotFleetRequestsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelSpotFleetRequestsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfulFleetRequestSet") /* SuccessfulFleetRequests com.amazonaws.ec2.synthetic#CancelSpotFleetRequestsOutput$SuccessfulFleetRequests */ =>  {
                let var_68 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_cancel_spot_fleet_requests_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful_fleet_requests(var_68);
            }
            ,
            s if s.matches("unsuccessfulFleetRequestSet") /* UnsuccessfulFleetRequests com.amazonaws.ec2.synthetic#CancelSpotFleetRequestsOutput$UnsuccessfulFleetRequests */ =>  {
                let var_69 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_cancel_spot_fleet_requests_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful_fleet_requests(var_69);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_cancel_spot_instance_requests(
    inp: &[u8],
    mut builder: crate::output::cancel_spot_instance_requests_output::Builder,
) -> Result<
    crate::output::cancel_spot_instance_requests_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CancelSpotInstanceRequestsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CancelSpotInstanceRequestsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotInstanceRequestSet") /* CancelledSpotInstanceRequests com.amazonaws.ec2.synthetic#CancelSpotInstanceRequestsOutput$CancelledSpotInstanceRequests */ =>  {
                let var_70 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_cancelled_spot_instance_request_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cancelled_spot_instance_requests(var_70);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_confirm_product_instance(
    inp: &[u8],
    mut builder: crate::output::confirm_product_instance_output::Builder,
) -> Result<crate::output::confirm_product_instance_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ConfirmProductInstanceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ConfirmProductInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#ConfirmProductInstanceOutput$OwnerId */ =>  {
                let var_71 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_71);
            }
            ,
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ConfirmProductInstanceOutput$Return */ =>  {
                let var_72 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_72);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_fpga_image(
    inp: &[u8],
    mut builder: crate::output::copy_fpga_image_output::Builder,
) -> Result<crate::output::copy_fpga_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopyFpgaImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopyFpgaImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageId") /* FpgaImageId com.amazonaws.ec2.synthetic#CopyFpgaImageOutput$FpgaImageId */ =>  {
                let var_73 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_id(var_73);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_image(
    inp: &[u8],
    mut builder: crate::output::copy_image_output::Builder,
) -> Result<crate::output::copy_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopyImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopyImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#CopyImageOutput$ImageId */ =>  {
                let var_74 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_74);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_copy_snapshot(
    inp: &[u8],
    mut builder: crate::output::copy_snapshot_output::Builder,
) -> Result<crate::output::copy_snapshot_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CopySnapshotResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CopySnapshotResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#CopySnapshotOutput$SnapshotId */ =>  {
                let var_75 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_75);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CopySnapshotOutput$Tags */ =>  {
                let var_76 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_76);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_capacity_reservation(
    inp: &[u8],
    mut builder: crate::output::create_capacity_reservation_output::Builder,
) -> Result<
    crate::output::create_capacity_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateCapacityReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateCapacityReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservation") /* CapacityReservation com.amazonaws.ec2.synthetic#CreateCapacityReservationOutput$CapacityReservation */ =>  {
                let var_77 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation(var_77);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_capacity_reservation_fleet(
    inp: &[u8],
    mut builder: crate::output::create_capacity_reservation_fleet_output::Builder,
) -> Result<
    crate::output::create_capacity_reservation_fleet_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateCapacityReservationFleetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateCapacityReservationFleetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationFleetId") /* CapacityReservationFleetId com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$CapacityReservationFleetId */ =>  {
                let var_78 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_id(var_78);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$State */ =>  {
                let var_79 =
                    Some(
                        Result::<crate::model::CapacityReservationFleetState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationFleetState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_79);
            }
            ,
            s if s.matches("totalTargetCapacity") /* TotalTargetCapacity com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$TotalTargetCapacity */ =>  {
                let var_80 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_target_capacity(var_80);
            }
            ,
            s if s.matches("totalFulfilledCapacity") /* TotalFulfilledCapacity com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$TotalFulfilledCapacity */ =>  {
                let var_81 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_fulfilled_capacity(var_81);
            }
            ,
            s if s.matches("instanceMatchCriteria") /* InstanceMatchCriteria com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$InstanceMatchCriteria */ =>  {
                let var_82 =
                    Some(
                        Result::<crate::model::FleetInstanceMatchCriteria, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetInstanceMatchCriteria::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_match_criteria(var_82);
            }
            ,
            s if s.matches("allocationStrategy") /* AllocationStrategy com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$AllocationStrategy */ =>  {
                let var_83 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_strategy(var_83);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$CreateTime */ =>  {
                let var_84 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_84);
            }
            ,
            s if s.matches("endDate") /* EndDate com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$EndDate */ =>  {
                let var_85 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end_date(var_85);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$Tenancy */ =>  {
                let var_86 =
                    Some(
                        Result::<crate::model::FleetCapacityReservationTenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetCapacityReservationTenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_86);
            }
            ,
            s if s.matches("fleetCapacityReservationSet") /* FleetCapacityReservations com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$FleetCapacityReservations */ =>  {
                let var_87 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fleet_capacity_reservation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fleet_capacity_reservations(var_87);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CreateCapacityReservationFleetOutput$Tags */ =>  {
                let var_88 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_88);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_carrier_gateway(
    inp: &[u8],
    mut builder: crate::output::create_carrier_gateway_output::Builder,
) -> Result<crate::output::create_carrier_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateCarrierGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateCarrierGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierGateway") /* CarrierGateway com.amazonaws.ec2.synthetic#CreateCarrierGatewayOutput$CarrierGateway */ =>  {
                let var_89 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_carrier_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_carrier_gateway(var_89);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_client_vpn_endpoint(
    inp: &[u8],
    mut builder: crate::output::create_client_vpn_endpoint_output::Builder,
) -> Result<
    crate::output::create_client_vpn_endpoint_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateClientVpnEndpointResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateClientVpnEndpointResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2.synthetic#CreateClientVpnEndpointOutput$ClientVpnEndpointId */ =>  {
                let var_90 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_90);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#CreateClientVpnEndpointOutput$Status */ =>  {
                let var_91 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_endpoint_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_91);
            }
            ,
            s if s.matches("dnsName") /* DnsName com.amazonaws.ec2.synthetic#CreateClientVpnEndpointOutput$DnsName */ =>  {
                let var_92 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_92);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_client_vpn_route(
    inp: &[u8],
    mut builder: crate::output::create_client_vpn_route_output::Builder,
) -> Result<crate::output::create_client_vpn_route_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateClientVpnRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateClientVpnRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#CreateClientVpnRouteOutput$Status */ =>  {
                let var_93 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_route_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_93);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_customer_gateway(
    inp: &[u8],
    mut builder: crate::output::create_customer_gateway_output::Builder,
) -> Result<crate::output::create_customer_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateCustomerGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateCustomerGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("customerGateway") /* CustomerGateway com.amazonaws.ec2.synthetic#CreateCustomerGatewayOutput$CustomerGateway */ =>  {
                let var_94 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_customer_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_customer_gateway(var_94);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_default_subnet(
    inp: &[u8],
    mut builder: crate::output::create_default_subnet_output::Builder,
) -> Result<crate::output::create_default_subnet_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDefaultSubnetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDefaultSubnetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2.synthetic#CreateDefaultSubnetOutput$Subnet */ =>  {
                let var_95 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_95);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_default_vpc(
    inp: &[u8],
    mut builder: crate::output::create_default_vpc_output::Builder,
) -> Result<crate::output::create_default_vpc_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDefaultVpcResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDefaultVpcResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpc") /* Vpc com.amazonaws.ec2.synthetic#CreateDefaultVpcOutput$Vpc */ =>  {
                let var_96 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_96);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_dhcp_options(
    inp: &[u8],
    mut builder: crate::output::create_dhcp_options_output::Builder,
) -> Result<crate::output::create_dhcp_options_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateDhcpOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateDhcpOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dhcpOptions") /* DhcpOptions com.amazonaws.ec2.synthetic#CreateDhcpOptionsOutput$DhcpOptions */ =>  {
                let var_97 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_dhcp_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dhcp_options(var_97);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_egress_only_internet_gateway(
    inp: &[u8],
    mut builder: crate::output::create_egress_only_internet_gateway_output::Builder,
) -> Result<
    crate::output::create_egress_only_internet_gateway_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateEgressOnlyInternetGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateEgressOnlyInternetGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateEgressOnlyInternetGatewayOutput$ClientToken */ =>  {
                let var_98 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_98);
            }
            ,
            s if s.matches("egressOnlyInternetGateway") /* EgressOnlyInternetGateway com.amazonaws.ec2.synthetic#CreateEgressOnlyInternetGatewayOutput$EgressOnlyInternetGateway */ =>  {
                let var_99 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_egress_only_internet_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_egress_only_internet_gateway(var_99);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_fleet(
    inp: &[u8],
    mut builder: crate::output::create_fleet_output::Builder,
) -> Result<crate::output::create_fleet_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateFleetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateFleetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2.synthetic#CreateFleetOutput$FleetId */ =>  {
                let var_100 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_100);
            }
            ,
            s if s.matches("errorSet") /* Errors com.amazonaws.ec2.synthetic#CreateFleetOutput$Errors */ =>  {
                let var_101 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_create_fleet_errors_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_errors(var_101);
            }
            ,
            s if s.matches("fleetInstanceSet") /* Instances com.amazonaws.ec2.synthetic#CreateFleetOutput$Instances */ =>  {
                let var_102 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_create_fleet_instances_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_102);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_flow_logs(
    inp: &[u8],
    mut builder: crate::output::create_flow_logs_output::Builder,
) -> Result<crate::output::create_flow_logs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateFlowLogsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateFlowLogsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateFlowLogsOutput$ClientToken */ =>  {
                let var_103 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_103);
            }
            ,
            s if s.matches("flowLogIdSet") /* FlowLogIds com.amazonaws.ec2.synthetic#CreateFlowLogsOutput$FlowLogIds */ =>  {
                let var_104 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_flow_log_ids(var_104);
            }
            ,
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#CreateFlowLogsOutput$Unsuccessful */ =>  {
                let var_105 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_105);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_fpga_image(
    inp: &[u8],
    mut builder: crate::output::create_fpga_image_output::Builder,
) -> Result<crate::output::create_fpga_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateFpgaImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateFpgaImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageId") /* FpgaImageId com.amazonaws.ec2.synthetic#CreateFpgaImageOutput$FpgaImageId */ =>  {
                let var_106 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_id(var_106);
            }
            ,
            s if s.matches("fpgaImageGlobalId") /* FpgaImageGlobalId com.amazonaws.ec2.synthetic#CreateFpgaImageOutput$FpgaImageGlobalId */ =>  {
                let var_107 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_global_id(var_107);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_image(
    inp: &[u8],
    mut builder: crate::output::create_image_output::Builder,
) -> Result<crate::output::create_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#CreateImageOutput$ImageId */ =>  {
                let var_108 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_108);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_instance_event_window(
    inp: &[u8],
    mut builder: crate::output::create_instance_event_window_output::Builder,
) -> Result<
    crate::output::create_instance_event_window_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateInstanceEventWindowResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateInstanceEventWindowResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindow") /* InstanceEventWindow com.amazonaws.ec2.synthetic#CreateInstanceEventWindowOutput$InstanceEventWindow */ =>  {
                let var_109 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_window(var_109);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_instance_export_task(
    inp: &[u8],
    mut builder: crate::output::create_instance_export_task_output::Builder,
) -> Result<
    crate::output::create_instance_export_task_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateInstanceExportTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateInstanceExportTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("exportTask") /* ExportTask com.amazonaws.ec2.synthetic#CreateInstanceExportTaskOutput$ExportTask */ =>  {
                let var_110 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_export_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_export_task(var_110);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_internet_gateway(
    inp: &[u8],
    mut builder: crate::output::create_internet_gateway_output::Builder,
) -> Result<crate::output::create_internet_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateInternetGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateInternetGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("internetGateway") /* InternetGateway com.amazonaws.ec2.synthetic#CreateInternetGatewayOutput$InternetGateway */ =>  {
                let var_111 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_internet_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_internet_gateway(var_111);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_ipam(
    inp: &[u8],
    mut builder: crate::output::create_ipam_output::Builder,
) -> Result<crate::output::create_ipam_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateIpamResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateIpamResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipam") /* Ipam com.amazonaws.ec2.synthetic#CreateIpamOutput$Ipam */ =>  {
                let var_112 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam(var_112);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_ipam_pool(
    inp: &[u8],
    mut builder: crate::output::create_ipam_pool_output::Builder,
) -> Result<crate::output::create_ipam_pool_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateIpamPoolResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateIpamPoolResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPool") /* IpamPool com.amazonaws.ec2.synthetic#CreateIpamPoolOutput$IpamPool */ =>  {
                let var_113 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool(var_113);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_ipam_scope(
    inp: &[u8],
    mut builder: crate::output::create_ipam_scope_output::Builder,
) -> Result<crate::output::create_ipam_scope_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateIpamScopeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateIpamScopeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamScope") /* IpamScope com.amazonaws.ec2.synthetic#CreateIpamScopeOutput$IpamScope */ =>  {
                let var_114 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_scope(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_scope(var_114);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_key_pair(
    inp: &[u8],
    mut builder: crate::output::create_key_pair_output::Builder,
) -> Result<crate::output::create_key_pair_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateKeyPairResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateKeyPairResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("keyFingerprint") /* KeyFingerprint com.amazonaws.ec2.synthetic#CreateKeyPairOutput$KeyFingerprint */ =>  {
                let var_115 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_fingerprint(var_115);
            }
            ,
            s if s.matches("keyMaterial") /* KeyMaterial com.amazonaws.ec2.synthetic#CreateKeyPairOutput$KeyMaterial */ =>  {
                let var_116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_material(var_116);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2.synthetic#CreateKeyPairOutput$KeyName */ =>  {
                let var_117 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_117);
            }
            ,
            s if s.matches("keyPairId") /* KeyPairId com.amazonaws.ec2.synthetic#CreateKeyPairOutput$KeyPairId */ =>  {
                let var_118 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_pair_id(var_118);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CreateKeyPairOutput$Tags */ =>  {
                let var_119 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_119);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_launch_template(
    inp: &[u8],
    mut builder: crate::output::create_launch_template_output::Builder,
) -> Result<crate::output::create_launch_template_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateLaunchTemplateResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateLaunchTemplateResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2.synthetic#CreateLaunchTemplateOutput$LaunchTemplate */ =>  {
                let var_120 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_120);
            }
            ,
            s if s.matches("warning") /* Warning com.amazonaws.ec2.synthetic#CreateLaunchTemplateOutput$Warning */ =>  {
                let var_121 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_validation_warning(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_warning(var_121);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_launch_template_version(
    inp: &[u8],
    mut builder: crate::output::create_launch_template_version_output::Builder,
) -> Result<
    crate::output::create_launch_template_version_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateLaunchTemplateVersionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateLaunchTemplateVersionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateVersion") /* LaunchTemplateVersion com.amazonaws.ec2.synthetic#CreateLaunchTemplateVersionOutput$LaunchTemplateVersion */ =>  {
                let var_122 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_version(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_version(var_122);
            }
            ,
            s if s.matches("warning") /* Warning com.amazonaws.ec2.synthetic#CreateLaunchTemplateVersionOutput$Warning */ =>  {
                let var_123 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_validation_warning(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_warning(var_123);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_local_gateway_route(
    inp: &[u8],
    mut builder: crate::output::create_local_gateway_route_output::Builder,
) -> Result<
    crate::output::create_local_gateway_route_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateLocalGatewayRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateLocalGatewayRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("route") /* Route com.amazonaws.ec2.synthetic#CreateLocalGatewayRouteOutput$Route */ =>  {
                let var_124 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_local_gateway_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route(var_124);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    inp: &[u8],
    mut builder: crate::output::create_local_gateway_route_table_vpc_association_output::Builder,
) -> Result<
    crate::output::create_local_gateway_route_table_vpc_association_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateLocalGatewayRouteTableVpcAssociationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateLocalGatewayRouteTableVpcAssociationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVpcAssociation") /* LocalGatewayRouteTableVpcAssociation com.amazonaws.ec2.synthetic#CreateLocalGatewayRouteTableVpcAssociationOutput$LocalGatewayRouteTableVpcAssociation */ =>  {
                let var_125 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_local_gateway_route_table_vpc_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_vpc_association(var_125);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_managed_prefix_list(
    inp: &[u8],
    mut builder: crate::output::create_managed_prefix_list_output::Builder,
) -> Result<
    crate::output::create_managed_prefix_list_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateManagedPrefixListResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateManagedPrefixListResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixList") /* PrefixList com.amazonaws.ec2.synthetic#CreateManagedPrefixListOutput$PrefixList */ =>  {
                let var_126 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_managed_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list(var_126);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_nat_gateway(
    inp: &[u8],
    mut builder: crate::output::create_nat_gateway_output::Builder,
) -> Result<crate::output::create_nat_gateway_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNatGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNatGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateNatGatewayOutput$ClientToken */ =>  {
                let var_127 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_127);
            }
            ,
            s if s.matches("natGateway") /* NatGateway com.amazonaws.ec2.synthetic#CreateNatGatewayOutput$NatGateway */ =>  {
                let var_128 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_nat_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_nat_gateway(var_128);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_network_acl(
    inp: &[u8],
    mut builder: crate::output::create_network_acl_output::Builder,
) -> Result<crate::output::create_network_acl_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNetworkAclResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNetworkAclResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkAcl") /* NetworkAcl com.amazonaws.ec2.synthetic#CreateNetworkAclOutput$NetworkAcl */ =>  {
                let var_129 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_acl(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_acl(var_129);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_network_insights_access_scope(
    inp: &[u8],
    mut builder: crate::output::create_network_insights_access_scope_output::Builder,
) -> Result<
    crate::output::create_network_insights_access_scope_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNetworkInsightsAccessScopeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNetworkInsightsAccessScopeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScope") /* NetworkInsightsAccessScope com.amazonaws.ec2.synthetic#CreateNetworkInsightsAccessScopeOutput$NetworkInsightsAccessScope */ =>  {
                let var_130 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_access_scope(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope(var_130);
            }
            ,
            s if s.matches("networkInsightsAccessScopeContent") /* NetworkInsightsAccessScopeContent com.amazonaws.ec2.synthetic#CreateNetworkInsightsAccessScopeOutput$NetworkInsightsAccessScopeContent */ =>  {
                let var_131 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_access_scope_content(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_content(var_131);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_network_insights_path(
    inp: &[u8],
    mut builder: crate::output::create_network_insights_path_output::Builder,
) -> Result<
    crate::output::create_network_insights_path_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNetworkInsightsPathResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNetworkInsightsPathResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsPath") /* NetworkInsightsPath com.amazonaws.ec2.synthetic#CreateNetworkInsightsPathOutput$NetworkInsightsPath */ =>  {
                let var_132 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_path(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_path(var_132);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_network_interface(
    inp: &[u8],
    mut builder: crate::output::create_network_interface_output::Builder,
) -> Result<crate::output::create_network_interface_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNetworkInterfaceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNetworkInterfaceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterface") /* NetworkInterface com.amazonaws.ec2.synthetic#CreateNetworkInterfaceOutput$NetworkInterface */ =>  {
                let var_133 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface(var_133);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateNetworkInterfaceOutput$ClientToken */ =>  {
                let var_134 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_134);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_network_interface_permission(
    inp: &[u8],
    mut builder: crate::output::create_network_interface_permission_output::Builder,
) -> Result<
    crate::output::create_network_interface_permission_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateNetworkInterfacePermissionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateNetworkInterfacePermissionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("interfacePermission") /* InterfacePermission com.amazonaws.ec2.synthetic#CreateNetworkInterfacePermissionOutput$InterfacePermission */ =>  {
                let var_135 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_permission(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_interface_permission(var_135);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_placement_group(
    inp: &[u8],
    mut builder: crate::output::create_placement_group_output::Builder,
) -> Result<crate::output::create_placement_group_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreatePlacementGroupResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreatePlacementGroupResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("placementGroup") /* PlacementGroup com.amazonaws.ec2.synthetic#CreatePlacementGroupOutput$PlacementGroup */ =>  {
                let var_136 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_placement_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement_group(var_136);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_public_ipv4_pool(
    inp: &[u8],
    mut builder: crate::output::create_public_ipv4_pool_output::Builder,
) -> Result<crate::output::create_public_ipv4_pool_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreatePublicIpv4PoolResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreatePublicIpv4PoolResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2.synthetic#CreatePublicIpv4PoolOutput$PoolId */ =>  {
                let var_137 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_137);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_replace_root_volume_task(
    inp: &[u8],
    mut builder: crate::output::create_replace_root_volume_task_output::Builder,
) -> Result<
    crate::output::create_replace_root_volume_task_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateReplaceRootVolumeTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateReplaceRootVolumeTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replaceRootVolumeTask") /* ReplaceRootVolumeTask com.amazonaws.ec2.synthetic#CreateReplaceRootVolumeTaskOutput$ReplaceRootVolumeTask */ =>  {
                let var_138 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_replace_root_volume_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_replace_root_volume_task(var_138);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_reserved_instances_listing(
    inp: &[u8],
    mut builder: crate::output::create_reserved_instances_listing_output::Builder,
) -> Result<
    crate::output::create_reserved_instances_listing_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateReservedInstancesListingResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateReservedInstancesListingResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesListingsSet") /* ReservedInstancesListings com.amazonaws.ec2.synthetic#CreateReservedInstancesListingOutput$ReservedInstancesListings */ =>  {
                let var_139 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_listing_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_listings(var_139);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_restore_image_task(
    inp: &[u8],
    mut builder: crate::output::create_restore_image_task_output::Builder,
) -> Result<
    crate::output::create_restore_image_task_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateRestoreImageTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateRestoreImageTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#CreateRestoreImageTaskOutput$ImageId */ =>  {
                let var_140 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_140);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_route(
    inp: &[u8],
    mut builder: crate::output::create_route_output::Builder,
) -> Result<crate::output::create_route_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#CreateRouteOutput$Return */ =>  {
                let var_141 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_141);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_route_table(
    inp: &[u8],
    mut builder: crate::output::create_route_table_output::Builder,
) -> Result<crate::output::create_route_table_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeTable") /* RouteTable com.amazonaws.ec2.synthetic#CreateRouteTableOutput$RouteTable */ =>  {
                let var_142 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_route_table(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table(var_142);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_security_group(
    inp: &[u8],
    mut builder: crate::output::create_security_group_output::Builder,
) -> Result<crate::output::create_security_group_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSecurityGroupResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSecurityGroupResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2.synthetic#CreateSecurityGroupOutput$GroupId */ =>  {
                let var_143 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_143);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CreateSecurityGroupOutput$Tags */ =>  {
                let var_144 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_144);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_snapshot(
    inp: &[u8],
    mut builder: crate::output::create_snapshot_output::Builder,
) -> Result<crate::output::create_snapshot_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSnapshotResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSnapshotResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dataEncryptionKeyId") /* DataEncryptionKeyId com.amazonaws.ec2.synthetic#CreateSnapshotOutput$DataEncryptionKeyId */ =>  {
                let var_145 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_encryption_key_id(var_145);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#CreateSnapshotOutput$Description */ =>  {
                let var_146 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_146);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2.synthetic#CreateSnapshotOutput$Encrypted */ =>  {
                let var_147 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_147);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#CreateSnapshotOutput$KmsKeyId */ =>  {
                let var_148 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_148);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#CreateSnapshotOutput$OwnerId */ =>  {
                let var_149 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_149);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2.synthetic#CreateSnapshotOutput$Progress */ =>  {
                let var_150 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_150);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#CreateSnapshotOutput$SnapshotId */ =>  {
                let var_151 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_151);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2.synthetic#CreateSnapshotOutput$StartTime */ =>  {
                let var_152 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_152);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2.synthetic#CreateSnapshotOutput$State */ =>  {
                let var_153 =
                    Some(
                        Result::<crate::model::SnapshotState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SnapshotState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_153);
            }
            ,
            s if s.matches("statusMessage") /* StateMessage com.amazonaws.ec2.synthetic#CreateSnapshotOutput$StateMessage */ =>  {
                let var_154 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_154);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#CreateSnapshotOutput$VolumeId */ =>  {
                let var_155 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_155);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2.synthetic#CreateSnapshotOutput$VolumeSize */ =>  {
                let var_156 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_156);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2.synthetic#CreateSnapshotOutput$OwnerAlias */ =>  {
                let var_157 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_157);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2.synthetic#CreateSnapshotOutput$OutpostArn */ =>  {
                let var_158 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_158);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CreateSnapshotOutput$Tags */ =>  {
                let var_159 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_159);
            }
            ,
            s if s.matches("storageTier") /* StorageTier com.amazonaws.ec2.synthetic#CreateSnapshotOutput$StorageTier */ =>  {
                let var_160 =
                    Some(
                        Result::<crate::model::StorageTier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageTier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_tier(var_160);
            }
            ,
            s if s.matches("restoreExpiryTime") /* RestoreExpiryTime com.amazonaws.ec2.synthetic#CreateSnapshotOutput$RestoreExpiryTime */ =>  {
                let var_161 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_restore_expiry_time(var_161);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_snapshots(
    inp: &[u8],
    mut builder: crate::output::create_snapshots_output::Builder,
) -> Result<crate::output::create_snapshots_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSnapshotsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSnapshotsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotSet") /* Snapshots com.amazonaws.ec2.synthetic#CreateSnapshotsOutput$Snapshots */ =>  {
                let var_162 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshots(var_162);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_spot_datafeed_subscription(
    inp: &[u8],
    mut builder: crate::output::create_spot_datafeed_subscription_output::Builder,
) -> Result<
    crate::output::create_spot_datafeed_subscription_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSpotDatafeedSubscriptionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSpotDatafeedSubscriptionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotDatafeedSubscription") /* SpotDatafeedSubscription com.amazonaws.ec2.synthetic#CreateSpotDatafeedSubscriptionOutput$SpotDatafeedSubscription */ =>  {
                let var_163 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_datafeed_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_datafeed_subscription(var_163);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_store_image_task(
    inp: &[u8],
    mut builder: crate::output::create_store_image_task_output::Builder,
) -> Result<crate::output::create_store_image_task_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateStoreImageTaskResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateStoreImageTaskResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("objectKey") /* ObjectKey com.amazonaws.ec2.synthetic#CreateStoreImageTaskOutput$ObjectKey */ =>  {
                let var_164 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_object_key(var_164);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_subnet(
    inp: &[u8],
    mut builder: crate::output::create_subnet_output::Builder,
) -> Result<crate::output::create_subnet_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSubnetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSubnetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2.synthetic#CreateSubnetOutput$Subnet */ =>  {
                let var_165 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_165);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_subnet_cidr_reservation(
    inp: &[u8],
    mut builder: crate::output::create_subnet_cidr_reservation_output::Builder,
) -> Result<
    crate::output::create_subnet_cidr_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateSubnetCidrReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateSubnetCidrReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnetCidrReservation") /* SubnetCidrReservation com.amazonaws.ec2.synthetic#CreateSubnetCidrReservationOutput$SubnetCidrReservation */ =>  {
                let var_166 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_cidr_reservation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_cidr_reservation(var_166);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_traffic_mirror_filter(
    inp: &[u8],
    mut builder: crate::output::create_traffic_mirror_filter_output::Builder,
) -> Result<
    crate::output::create_traffic_mirror_filter_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficMirrorFilterResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficMirrorFilterResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilter") /* TrafficMirrorFilter com.amazonaws.ec2.synthetic#CreateTrafficMirrorFilterOutput$TrafficMirrorFilter */ =>  {
                let var_167 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter(var_167);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateTrafficMirrorFilterOutput$ClientToken */ =>  {
                let var_168 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_168);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_traffic_mirror_filter_rule(
    inp: &[u8],
    mut builder: crate::output::create_traffic_mirror_filter_rule_output::Builder,
) -> Result<
    crate::output::create_traffic_mirror_filter_rule_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficMirrorFilterRuleResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficMirrorFilterRuleResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterRule") /* TrafficMirrorFilterRule com.amazonaws.ec2.synthetic#CreateTrafficMirrorFilterRuleOutput$TrafficMirrorFilterRule */ =>  {
                let var_169 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_rule(var_169);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateTrafficMirrorFilterRuleOutput$ClientToken */ =>  {
                let var_170 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_170);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_traffic_mirror_session(
    inp: &[u8],
    mut builder: crate::output::create_traffic_mirror_session_output::Builder,
) -> Result<
    crate::output::create_traffic_mirror_session_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficMirrorSessionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficMirrorSessionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorSession") /* TrafficMirrorSession com.amazonaws.ec2.synthetic#CreateTrafficMirrorSessionOutput$TrafficMirrorSession */ =>  {
                let var_171 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_session(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_session(var_171);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateTrafficMirrorSessionOutput$ClientToken */ =>  {
                let var_172 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_172);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_traffic_mirror_target(
    inp: &[u8],
    mut builder: crate::output::create_traffic_mirror_target_output::Builder,
) -> Result<
    crate::output::create_traffic_mirror_target_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTrafficMirrorTargetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTrafficMirrorTargetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorTarget") /* TrafficMirrorTarget com.amazonaws.ec2.synthetic#CreateTrafficMirrorTargetOutput$TrafficMirrorTarget */ =>  {
                let var_173 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_target(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_target(var_173);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateTrafficMirrorTargetOutput$ClientToken */ =>  {
                let var_174 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_174);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_output::Builder,
) -> Result<crate::output::create_transit_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGateway") /* TransitGateway com.amazonaws.ec2.synthetic#CreateTransitGatewayOutput$TransitGateway */ =>  {
                let var_175 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway(var_175);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_connect(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_connect_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_connect_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayConnectResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayConnectResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnect") /* TransitGatewayConnect com.amazonaws.ec2.synthetic#CreateTransitGatewayConnectOutput$TransitGatewayConnect */ =>  {
                let var_176 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect(var_176);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_connect_peer(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_connect_peer_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_connect_peer_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayConnectPeerResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayConnectPeerResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnectPeer") /* TransitGatewayConnectPeer com.amazonaws.ec2.synthetic#CreateTransitGatewayConnectPeerOutput$TransitGatewayConnectPeer */ =>  {
                let var_177 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect_peer(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect_peer(var_177);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_multicast_domain(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_multicast_domain_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_multicast_domain_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayMulticastDomainResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayMulticastDomainResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomain") /* TransitGatewayMulticastDomain com.amazonaws.ec2.synthetic#CreateTransitGatewayMulticastDomainOutput$TransitGatewayMulticastDomain */ =>  {
                let var_178 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain(var_178);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_peering_attachment(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_peering_attachment_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_peering_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayPeeringAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayPeeringAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPeeringAttachment") /* TransitGatewayPeeringAttachment com.amazonaws.ec2.synthetic#CreateTransitGatewayPeeringAttachmentOutput$TransitGatewayPeeringAttachment */ =>  {
                let var_179 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_peering_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_peering_attachment(var_179);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_prefix_list_reference_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_prefix_list_reference_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayPrefixListReferenceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayPrefixListReferenceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPrefixListReference") /* TransitGatewayPrefixListReference com.amazonaws.ec2.synthetic#CreateTransitGatewayPrefixListReferenceOutput$TransitGatewayPrefixListReference */ =>  {
                let var_180 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_prefix_list_reference(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_prefix_list_reference(var_180);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_route(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_route_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_route_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("route") /* Route com.amazonaws.ec2.synthetic#CreateTransitGatewayRouteOutput$Route */ =>  {
                let var_181 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route(var_181);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_route_table(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_route_table_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_route_table_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTable") /* TransitGatewayRouteTable com.amazonaws.ec2.synthetic#CreateTransitGatewayRouteTableOutput$TransitGatewayRouteTable */ =>  {
                let var_182 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_route_table(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table(var_182);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_transit_gateway_vpc_attachment(
    inp: &[u8],
    mut builder: crate::output::create_transit_gateway_vpc_attachment_output::Builder,
) -> Result<
    crate::output::create_transit_gateway_vpc_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateTransitGatewayVpcAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateTransitGatewayVpcAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachment") /* TransitGatewayVpcAttachment com.amazonaws.ec2.synthetic#CreateTransitGatewayVpcAttachmentOutput$TransitGatewayVpcAttachment */ =>  {
                let var_183 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachment(var_183);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_volume(
    inp: &[u8],
    mut builder: crate::output::create_volume_output::Builder,
) -> Result<crate::output::create_volume_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVolumeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVolumeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachmentSet") /* Attachments com.amazonaws.ec2.synthetic#CreateVolumeOutput$Attachments */ =>  {
                let var_184 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachments(var_184);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2.synthetic#CreateVolumeOutput$AvailabilityZone */ =>  {
                let var_185 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_185);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2.synthetic#CreateVolumeOutput$CreateTime */ =>  {
                let var_186 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_186);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2.synthetic#CreateVolumeOutput$Encrypted */ =>  {
                let var_187 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_187);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#CreateVolumeOutput$KmsKeyId */ =>  {
                let var_188 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_188);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2.synthetic#CreateVolumeOutput$OutpostArn */ =>  {
                let var_189 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_189);
            }
            ,
            s if s.matches("size") /* Size com.amazonaws.ec2.synthetic#CreateVolumeOutput$Size */ =>  {
                let var_190 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size(var_190);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#CreateVolumeOutput$SnapshotId */ =>  {
                let var_191 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_191);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2.synthetic#CreateVolumeOutput$State */ =>  {
                let var_192 =
                    Some(
                        Result::<crate::model::VolumeState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_192);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#CreateVolumeOutput$VolumeId */ =>  {
                let var_193 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_193);
            }
            ,
            s if s.matches("iops") /* Iops com.amazonaws.ec2.synthetic#CreateVolumeOutput$Iops */ =>  {
                let var_194 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_194);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#CreateVolumeOutput$Tags */ =>  {
                let var_195 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_195);
            }
            ,
            s if s.matches("volumeType") /* VolumeType com.amazonaws.ec2.synthetic#CreateVolumeOutput$VolumeType */ =>  {
                let var_196 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_type(var_196);
            }
            ,
            s if s.matches("fastRestored") /* FastRestored com.amazonaws.ec2.synthetic#CreateVolumeOutput$FastRestored */ =>  {
                let var_197 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fast_restored(var_197);
            }
            ,
            s if s.matches("multiAttachEnabled") /* MultiAttachEnabled com.amazonaws.ec2.synthetic#CreateVolumeOutput$MultiAttachEnabled */ =>  {
                let var_198 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_attach_enabled(var_198);
            }
            ,
            s if s.matches("throughput") /* Throughput com.amazonaws.ec2.synthetic#CreateVolumeOutput$Throughput */ =>  {
                let var_199 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_throughput(var_199);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpc(
    inp: &[u8],
    mut builder: crate::output::create_vpc_output::Builder,
) -> Result<crate::output::create_vpc_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpcResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpcResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpc") /* Vpc com.amazonaws.ec2.synthetic#CreateVpcOutput$Vpc */ =>  {
                let var_200 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_200);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpc_endpoint(
    inp: &[u8],
    mut builder: crate::output::create_vpc_endpoint_output::Builder,
) -> Result<crate::output::create_vpc_endpoint_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpcEndpointResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpcEndpointResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcEndpoint") /* VpcEndpoint com.amazonaws.ec2.synthetic#CreateVpcEndpointOutput$VpcEndpoint */ =>  {
                let var_201 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_endpoint(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint(var_201);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateVpcEndpointOutput$ClientToken */ =>  {
                let var_202 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_202);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpc_endpoint_connection_notification(
    inp: &[u8],
    mut builder: crate::output::create_vpc_endpoint_connection_notification_output::Builder,
) -> Result<
    crate::output::create_vpc_endpoint_connection_notification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpcEndpointConnectionNotificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpcEndpointConnectionNotificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("connectionNotification") /* ConnectionNotification com.amazonaws.ec2.synthetic#CreateVpcEndpointConnectionNotificationOutput$ConnectionNotification */ =>  {
                let var_203 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_connection_notification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_notification(var_203);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateVpcEndpointConnectionNotificationOutput$ClientToken */ =>  {
                let var_204 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_204);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpc_endpoint_service_configuration(
    inp: &[u8],
    mut builder: crate::output::create_vpc_endpoint_service_configuration_output::Builder,
) -> Result<
    crate::output::create_vpc_endpoint_service_configuration_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpcEndpointServiceConfigurationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpcEndpointServiceConfigurationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceConfiguration") /* ServiceConfiguration com.amazonaws.ec2.synthetic#CreateVpcEndpointServiceConfigurationOutput$ServiceConfiguration */ =>  {
                let var_205 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_service_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_configuration(var_205);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#CreateVpcEndpointServiceConfigurationOutput$ClientToken */ =>  {
                let var_206 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_206);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpc_peering_connection(
    inp: &[u8],
    mut builder: crate::output::create_vpc_peering_connection_output::Builder,
) -> Result<
    crate::output::create_vpc_peering_connection_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpcPeeringConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpcPeeringConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcPeeringConnection") /* VpcPeeringConnection com.amazonaws.ec2.synthetic#CreateVpcPeeringConnectionOutput$VpcPeeringConnection */ =>  {
                let var_207 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection(var_207);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpn_connection(
    inp: &[u8],
    mut builder: crate::output::create_vpn_connection_output::Builder,
) -> Result<crate::output::create_vpn_connection_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpnConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpnConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2.synthetic#CreateVpnConnectionOutput$VpnConnection */ =>  {
                let var_208 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_208);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_create_vpn_gateway(
    inp: &[u8],
    mut builder: crate::output::create_vpn_gateway_output::Builder,
) -> Result<crate::output::create_vpn_gateway_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateVpnGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateVpnGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnGateway") /* VpnGateway com.amazonaws.ec2.synthetic#CreateVpnGatewayOutput$VpnGateway */ =>  {
                let var_209 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_gateway(var_209);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_carrier_gateway(
    inp: &[u8],
    mut builder: crate::output::delete_carrier_gateway_output::Builder,
) -> Result<crate::output::delete_carrier_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteCarrierGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteCarrierGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierGateway") /* CarrierGateway com.amazonaws.ec2.synthetic#DeleteCarrierGatewayOutput$CarrierGateway */ =>  {
                let var_210 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_carrier_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_carrier_gateway(var_210);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_client_vpn_endpoint(
    inp: &[u8],
    mut builder: crate::output::delete_client_vpn_endpoint_output::Builder,
) -> Result<
    crate::output::delete_client_vpn_endpoint_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteClientVpnEndpointResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteClientVpnEndpointResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#DeleteClientVpnEndpointOutput$Status */ =>  {
                let var_211 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_endpoint_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_211);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_client_vpn_route(
    inp: &[u8],
    mut builder: crate::output::delete_client_vpn_route_output::Builder,
) -> Result<crate::output::delete_client_vpn_route_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteClientVpnRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteClientVpnRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#DeleteClientVpnRouteOutput$Status */ =>  {
                let var_212 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_route_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_212);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_egress_only_internet_gateway(
    inp: &[u8],
    mut builder: crate::output::delete_egress_only_internet_gateway_output::Builder,
) -> Result<
    crate::output::delete_egress_only_internet_gateway_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteEgressOnlyInternetGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteEgressOnlyInternetGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("returnCode") /* ReturnCode com.amazonaws.ec2.synthetic#DeleteEgressOnlyInternetGatewayOutput$ReturnCode */ =>  {
                let var_213 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_code(var_213);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_fleets(
    inp: &[u8],
    mut builder: crate::output::delete_fleets_output::Builder,
) -> Result<crate::output::delete_fleets_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteFleetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteFleetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfulFleetDeletionSet") /* SuccessfulFleetDeletions com.amazonaws.ec2.synthetic#DeleteFleetsOutput$SuccessfulFleetDeletions */ =>  {
                let var_214 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_delete_fleet_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful_fleet_deletions(var_214);
            }
            ,
            s if s.matches("unsuccessfulFleetDeletionSet") /* UnsuccessfulFleetDeletions com.amazonaws.ec2.synthetic#DeleteFleetsOutput$UnsuccessfulFleetDeletions */ =>  {
                let var_215 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_delete_fleet_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful_fleet_deletions(var_215);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_flow_logs(
    inp: &[u8],
    mut builder: crate::output::delete_flow_logs_output::Builder,
) -> Result<crate::output::delete_flow_logs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteFlowLogsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteFlowLogsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#DeleteFlowLogsOutput$Unsuccessful */ =>  {
                let var_216 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_216);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_fpga_image(
    inp: &[u8],
    mut builder: crate::output::delete_fpga_image_output::Builder,
) -> Result<crate::output::delete_fpga_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteFpgaImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteFpgaImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DeleteFpgaImageOutput$Return */ =>  {
                let var_217 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_217);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_instance_event_window(
    inp: &[u8],
    mut builder: crate::output::delete_instance_event_window_output::Builder,
) -> Result<
    crate::output::delete_instance_event_window_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteInstanceEventWindowResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteInstanceEventWindowResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindowState") /* InstanceEventWindowState com.amazonaws.ec2.synthetic#DeleteInstanceEventWindowOutput$InstanceEventWindowState */ =>  {
                let var_218 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window_state_change(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_window_state(var_218);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_ipam(
    inp: &[u8],
    mut builder: crate::output::delete_ipam_output::Builder,
) -> Result<crate::output::delete_ipam_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteIpamResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteIpamResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipam") /* Ipam com.amazonaws.ec2.synthetic#DeleteIpamOutput$Ipam */ =>  {
                let var_219 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam(var_219);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_ipam_pool(
    inp: &[u8],
    mut builder: crate::output::delete_ipam_pool_output::Builder,
) -> Result<crate::output::delete_ipam_pool_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteIpamPoolResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteIpamPoolResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPool") /* IpamPool com.amazonaws.ec2.synthetic#DeleteIpamPoolOutput$IpamPool */ =>  {
                let var_220 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool(var_220);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_ipam_scope(
    inp: &[u8],
    mut builder: crate::output::delete_ipam_scope_output::Builder,
) -> Result<crate::output::delete_ipam_scope_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteIpamScopeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteIpamScopeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamScope") /* IpamScope com.amazonaws.ec2.synthetic#DeleteIpamScopeOutput$IpamScope */ =>  {
                let var_221 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_scope(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_scope(var_221);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_launch_template(
    inp: &[u8],
    mut builder: crate::output::delete_launch_template_output::Builder,
) -> Result<crate::output::delete_launch_template_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteLaunchTemplateResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteLaunchTemplateResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2.synthetic#DeleteLaunchTemplateOutput$LaunchTemplate */ =>  {
                let var_222 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_222);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_launch_template_versions(
    inp: &[u8],
    mut builder: crate::output::delete_launch_template_versions_output::Builder,
) -> Result<
    crate::output::delete_launch_template_versions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteLaunchTemplateVersionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteLaunchTemplateVersionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfullyDeletedLaunchTemplateVersionSet") /* SuccessfullyDeletedLaunchTemplateVersions com.amazonaws.ec2.synthetic#DeleteLaunchTemplateVersionsOutput$SuccessfullyDeletedLaunchTemplateVersions */ =>  {
                let var_223 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_delete_launch_template_versions_response_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successfully_deleted_launch_template_versions(var_223);
            }
            ,
            s if s.matches("unsuccessfullyDeletedLaunchTemplateVersionSet") /* UnsuccessfullyDeletedLaunchTemplateVersions com.amazonaws.ec2.synthetic#DeleteLaunchTemplateVersionsOutput$UnsuccessfullyDeletedLaunchTemplateVersions */ =>  {
                let var_224 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_delete_launch_template_versions_response_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessfully_deleted_launch_template_versions(var_224);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_local_gateway_route(
    inp: &[u8],
    mut builder: crate::output::delete_local_gateway_route_output::Builder,
) -> Result<
    crate::output::delete_local_gateway_route_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteLocalGatewayRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteLocalGatewayRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("route") /* Route com.amazonaws.ec2.synthetic#DeleteLocalGatewayRouteOutput$Route */ =>  {
                let var_225 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_local_gateway_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route(var_225);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    inp: &[u8],
    mut builder: crate::output::delete_local_gateway_route_table_vpc_association_output::Builder,
) -> Result<
    crate::output::delete_local_gateway_route_table_vpc_association_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteLocalGatewayRouteTableVpcAssociationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteLocalGatewayRouteTableVpcAssociationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVpcAssociation") /* LocalGatewayRouteTableVpcAssociation com.amazonaws.ec2.synthetic#DeleteLocalGatewayRouteTableVpcAssociationOutput$LocalGatewayRouteTableVpcAssociation */ =>  {
                let var_226 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_local_gateway_route_table_vpc_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_vpc_association(var_226);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_managed_prefix_list(
    inp: &[u8],
    mut builder: crate::output::delete_managed_prefix_list_output::Builder,
) -> Result<
    crate::output::delete_managed_prefix_list_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteManagedPrefixListResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteManagedPrefixListResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixList") /* PrefixList com.amazonaws.ec2.synthetic#DeleteManagedPrefixListOutput$PrefixList */ =>  {
                let var_227 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_managed_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list(var_227);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_nat_gateway(
    inp: &[u8],
    mut builder: crate::output::delete_nat_gateway_output::Builder,
) -> Result<crate::output::delete_nat_gateway_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNatGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNatGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("natGatewayId") /* NatGatewayId com.amazonaws.ec2.synthetic#DeleteNatGatewayOutput$NatGatewayId */ =>  {
                let var_228 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nat_gateway_id(var_228);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_network_insights_access_scope(
    inp: &[u8],
    mut builder: crate::output::delete_network_insights_access_scope_output::Builder,
) -> Result<
    crate::output::delete_network_insights_access_scope_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNetworkInsightsAccessScopeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNetworkInsightsAccessScopeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeId") /* NetworkInsightsAccessScopeId com.amazonaws.ec2.synthetic#DeleteNetworkInsightsAccessScopeOutput$NetworkInsightsAccessScopeId */ =>  {
                let var_229 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_id(var_229);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_network_insights_access_scope_analysis(
    inp: &[u8],
    mut builder: crate::output::delete_network_insights_access_scope_analysis_output::Builder,
) -> Result<
    crate::output::delete_network_insights_access_scope_analysis_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNetworkInsightsAccessScopeAnalysisResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNetworkInsightsAccessScopeAnalysisResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysisId") /* NetworkInsightsAccessScopeAnalysisId com.amazonaws.ec2.synthetic#DeleteNetworkInsightsAccessScopeAnalysisOutput$NetworkInsightsAccessScopeAnalysisId */ =>  {
                let var_230 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis_id(var_230);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_network_insights_analysis(
    inp: &[u8],
    mut builder: crate::output::delete_network_insights_analysis_output::Builder,
) -> Result<
    crate::output::delete_network_insights_analysis_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNetworkInsightsAnalysisResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNetworkInsightsAnalysisResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAnalysisId") /* NetworkInsightsAnalysisId com.amazonaws.ec2.synthetic#DeleteNetworkInsightsAnalysisOutput$NetworkInsightsAnalysisId */ =>  {
                let var_231 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_analysis_id(var_231);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_network_insights_path(
    inp: &[u8],
    mut builder: crate::output::delete_network_insights_path_output::Builder,
) -> Result<
    crate::output::delete_network_insights_path_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNetworkInsightsPathResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNetworkInsightsPathResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsPathId") /* NetworkInsightsPathId com.amazonaws.ec2.synthetic#DeleteNetworkInsightsPathOutput$NetworkInsightsPathId */ =>  {
                let var_232 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_path_id(var_232);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_network_interface_permission(
    inp: &[u8],
    mut builder: crate::output::delete_network_interface_permission_output::Builder,
) -> Result<
    crate::output::delete_network_interface_permission_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteNetworkInterfacePermissionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteNetworkInterfacePermissionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DeleteNetworkInterfacePermissionOutput$Return */ =>  {
                let var_233 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_233);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_public_ipv4_pool(
    inp: &[u8],
    mut builder: crate::output::delete_public_ipv4_pool_output::Builder,
) -> Result<crate::output::delete_public_ipv4_pool_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeletePublicIpv4PoolResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeletePublicIpv4PoolResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("returnValue") /* ReturnValue com.amazonaws.ec2.synthetic#DeletePublicIpv4PoolOutput$ReturnValue */ =>  {
                let var_234 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_234);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_queued_reserved_instances(
    inp: &[u8],
    mut builder: crate::output::delete_queued_reserved_instances_output::Builder,
) -> Result<
    crate::output::delete_queued_reserved_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteQueuedReservedInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteQueuedReservedInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfulQueuedPurchaseDeletionSet") /* SuccessfulQueuedPurchaseDeletions com.amazonaws.ec2.synthetic#DeleteQueuedReservedInstancesOutput$SuccessfulQueuedPurchaseDeletions */ =>  {
                let var_235 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_successful_queued_purchase_deletion_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful_queued_purchase_deletions(var_235);
            }
            ,
            s if s.matches("failedQueuedPurchaseDeletionSet") /* FailedQueuedPurchaseDeletions com.amazonaws.ec2.synthetic#DeleteQueuedReservedInstancesOutput$FailedQueuedPurchaseDeletions */ =>  {
                let var_236 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_failed_queued_purchase_deletion_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_failed_queued_purchase_deletions(var_236);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_subnet_cidr_reservation(
    inp: &[u8],
    mut builder: crate::output::delete_subnet_cidr_reservation_output::Builder,
) -> Result<
    crate::output::delete_subnet_cidr_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteSubnetCidrReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteSubnetCidrReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deletedSubnetCidrReservation") /* DeletedSubnetCidrReservation com.amazonaws.ec2.synthetic#DeleteSubnetCidrReservationOutput$DeletedSubnetCidrReservation */ =>  {
                let var_237 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_cidr_reservation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deleted_subnet_cidr_reservation(var_237);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_traffic_mirror_filter(
    inp: &[u8],
    mut builder: crate::output::delete_traffic_mirror_filter_output::Builder,
) -> Result<
    crate::output::delete_traffic_mirror_filter_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTrafficMirrorFilterResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTrafficMirrorFilterResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterId") /* TrafficMirrorFilterId com.amazonaws.ec2.synthetic#DeleteTrafficMirrorFilterOutput$TrafficMirrorFilterId */ =>  {
                let var_238 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_id(var_238);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_traffic_mirror_filter_rule(
    inp: &[u8],
    mut builder: crate::output::delete_traffic_mirror_filter_rule_output::Builder,
) -> Result<
    crate::output::delete_traffic_mirror_filter_rule_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTrafficMirrorFilterRuleResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTrafficMirrorFilterRuleResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterRuleId") /* TrafficMirrorFilterRuleId com.amazonaws.ec2.synthetic#DeleteTrafficMirrorFilterRuleOutput$TrafficMirrorFilterRuleId */ =>  {
                let var_239 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_rule_id(var_239);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_traffic_mirror_session(
    inp: &[u8],
    mut builder: crate::output::delete_traffic_mirror_session_output::Builder,
) -> Result<
    crate::output::delete_traffic_mirror_session_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTrafficMirrorSessionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTrafficMirrorSessionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorSessionId") /* TrafficMirrorSessionId com.amazonaws.ec2.synthetic#DeleteTrafficMirrorSessionOutput$TrafficMirrorSessionId */ =>  {
                let var_240 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_session_id(var_240);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_traffic_mirror_target(
    inp: &[u8],
    mut builder: crate::output::delete_traffic_mirror_target_output::Builder,
) -> Result<
    crate::output::delete_traffic_mirror_target_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTrafficMirrorTargetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTrafficMirrorTargetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorTargetId") /* TrafficMirrorTargetId com.amazonaws.ec2.synthetic#DeleteTrafficMirrorTargetOutput$TrafficMirrorTargetId */ =>  {
                let var_241 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_target_id(var_241);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_output::Builder,
) -> Result<crate::output::delete_transit_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGateway") /* TransitGateway com.amazonaws.ec2.synthetic#DeleteTransitGatewayOutput$TransitGateway */ =>  {
                let var_242 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway(var_242);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_connect(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_connect_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_connect_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayConnectResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayConnectResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnect") /* TransitGatewayConnect com.amazonaws.ec2.synthetic#DeleteTransitGatewayConnectOutput$TransitGatewayConnect */ =>  {
                let var_243 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect(var_243);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_connect_peer(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_connect_peer_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_connect_peer_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayConnectPeerResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayConnectPeerResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnectPeer") /* TransitGatewayConnectPeer com.amazonaws.ec2.synthetic#DeleteTransitGatewayConnectPeerOutput$TransitGatewayConnectPeer */ =>  {
                let var_244 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect_peer(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect_peer(var_244);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_multicast_domain(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_multicast_domain_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_multicast_domain_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayMulticastDomainResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayMulticastDomainResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomain") /* TransitGatewayMulticastDomain com.amazonaws.ec2.synthetic#DeleteTransitGatewayMulticastDomainOutput$TransitGatewayMulticastDomain */ =>  {
                let var_245 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain(var_245);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_peering_attachment(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_peering_attachment_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_peering_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayPeeringAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayPeeringAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPeeringAttachment") /* TransitGatewayPeeringAttachment com.amazonaws.ec2.synthetic#DeleteTransitGatewayPeeringAttachmentOutput$TransitGatewayPeeringAttachment */ =>  {
                let var_246 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_peering_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_peering_attachment(var_246);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_prefix_list_reference_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_prefix_list_reference_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayPrefixListReferenceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayPrefixListReferenceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPrefixListReference") /* TransitGatewayPrefixListReference com.amazonaws.ec2.synthetic#DeleteTransitGatewayPrefixListReferenceOutput$TransitGatewayPrefixListReference */ =>  {
                let var_247 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_prefix_list_reference(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_prefix_list_reference(var_247);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_route(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_route_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_route_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("route") /* Route com.amazonaws.ec2.synthetic#DeleteTransitGatewayRouteOutput$Route */ =>  {
                let var_248 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route(var_248);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_route_table(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_route_table_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_route_table_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTable") /* TransitGatewayRouteTable com.amazonaws.ec2.synthetic#DeleteTransitGatewayRouteTableOutput$TransitGatewayRouteTable */ =>  {
                let var_249 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_route_table(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table(var_249);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    inp: &[u8],
    mut builder: crate::output::delete_transit_gateway_vpc_attachment_output::Builder,
) -> Result<
    crate::output::delete_transit_gateway_vpc_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteTransitGatewayVpcAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteTransitGatewayVpcAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachment") /* TransitGatewayVpcAttachment com.amazonaws.ec2.synthetic#DeleteTransitGatewayVpcAttachmentOutput$TransitGatewayVpcAttachment */ =>  {
                let var_250 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachment(var_250);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    inp: &[u8],
    mut builder: crate::output::delete_vpc_endpoint_connection_notifications_output::Builder,
) -> Result<
    crate::output::delete_vpc_endpoint_connection_notifications_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteVpcEndpointConnectionNotificationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteVpcEndpointConnectionNotificationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#DeleteVpcEndpointConnectionNotificationsOutput$Unsuccessful */ =>  {
                let var_251 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_251);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_vpc_endpoints(
    inp: &[u8],
    mut builder: crate::output::delete_vpc_endpoints_output::Builder,
) -> Result<crate::output::delete_vpc_endpoints_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteVpcEndpointsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteVpcEndpointsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#DeleteVpcEndpointsOutput$Unsuccessful */ =>  {
                let var_252 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_252);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    inp: &[u8],
    mut builder: crate::output::delete_vpc_endpoint_service_configurations_output::Builder,
) -> Result<
    crate::output::delete_vpc_endpoint_service_configurations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteVpcEndpointServiceConfigurationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteVpcEndpointServiceConfigurationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#DeleteVpcEndpointServiceConfigurationsOutput$Unsuccessful */ =>  {
                let var_253 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_253);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_delete_vpc_peering_connection(
    inp: &[u8],
    mut builder: crate::output::delete_vpc_peering_connection_output::Builder,
) -> Result<
    crate::output::delete_vpc_peering_connection_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteVpcPeeringConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteVpcPeeringConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DeleteVpcPeeringConnectionOutput$Return */ =>  {
                let var_254 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_254);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deprovision_byoip_cidr(
    inp: &[u8],
    mut builder: crate::output::deprovision_byoip_cidr_output::Builder,
) -> Result<crate::output::deprovision_byoip_cidr_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeprovisionByoipCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeprovisionByoipCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidr") /* ByoipCidr com.amazonaws.ec2.synthetic#DeprovisionByoipCidrOutput$ByoipCidr */ =>  {
                let var_255 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidr(var_255);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deprovision_ipam_pool_cidr(
    inp: &[u8],
    mut builder: crate::output::deprovision_ipam_pool_cidr_output::Builder,
) -> Result<
    crate::output::deprovision_ipam_pool_cidr_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeprovisionIpamPoolCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeprovisionIpamPoolCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPoolCidr") /* IpamPoolCidr com.amazonaws.ec2.synthetic#DeprovisionIpamPoolCidrOutput$IpamPoolCidr */ =>  {
                let var_256 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_cidr(var_256);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    inp: &[u8],
    mut builder: crate::output::deprovision_public_ipv4_pool_cidr_output::Builder,
) -> Result<
    crate::output::deprovision_public_ipv4_pool_cidr_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeprovisionPublicIpv4PoolCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeprovisionPublicIpv4PoolCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2.synthetic#DeprovisionPublicIpv4PoolCidrOutput$PoolId */ =>  {
                let var_257 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_257);
            }
            ,
            s if s.matches("deprovisionedAddressSet") /* DeprovisionedAddresses com.amazonaws.ec2.synthetic#DeprovisionPublicIpv4PoolCidrOutput$DeprovisionedAddresses */ =>  {
                let var_258 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_deprovisioned_address_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deprovisioned_addresses(var_258);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deregister_instance_event_notification_attributes(
    inp: &[u8],
    mut builder: crate::output::deregister_instance_event_notification_attributes_output::Builder,
) -> Result<
    crate::output::deregister_instance_event_notification_attributes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeregisterInstanceEventNotificationAttributesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeregisterInstanceEventNotificationAttributesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTagAttribute") /* InstanceTagAttribute com.amazonaws.ec2.synthetic#DeregisterInstanceEventNotificationAttributesOutput$InstanceTagAttribute */ =>  {
                let var_259 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_tag_notification_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_tag_attribute(var_259);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    inp: &[u8],
    mut builder: crate::output::deregister_transit_gateway_multicast_group_members_output::Builder,
) -> Result<
    crate::output::deregister_transit_gateway_multicast_group_members_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeregisterTransitGatewayMulticastGroupMembersResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeregisterTransitGatewayMulticastGroupMembersResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deregisteredMulticastGroupMembers") /* DeregisteredMulticastGroupMembers com.amazonaws.ec2.synthetic#DeregisterTransitGatewayMulticastGroupMembersOutput$DeregisteredMulticastGroupMembers */ =>  {
                let var_260 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_deregistered_group_members(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deregistered_multicast_group_members(var_260);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    inp: &[u8],
    mut builder: crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder,
) -> Result<
    crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeregisterTransitGatewayMulticastGroupSourcesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeregisterTransitGatewayMulticastGroupSourcesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deregisteredMulticastGroupSources") /* DeregisteredMulticastGroupSources com.amazonaws.ec2.synthetic#DeregisterTransitGatewayMulticastGroupSourcesOutput$DeregisteredMulticastGroupSources */ =>  {
                let var_261 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_deregistered_group_sources(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deregistered_multicast_group_sources(var_261);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_account_attributes(
    inp: &[u8],
    mut builder: crate::output::describe_account_attributes_output::Builder,
) -> Result<
    crate::output::describe_account_attributes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAccountAttributesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAccountAttributesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accountAttributeSet") /* AccountAttributes com.amazonaws.ec2.synthetic#DescribeAccountAttributesOutput$AccountAttributes */ =>  {
                let var_262 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_account_attribute_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_account_attributes(var_262);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_addresses(
    inp: &[u8],
    mut builder: crate::output::describe_addresses_output::Builder,
) -> Result<crate::output::describe_addresses_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAddressesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAddressesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("addressesSet") /* Addresses com.amazonaws.ec2.synthetic#DescribeAddressesOutput$Addresses */ =>  {
                let var_263 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_addresses(var_263);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_addresses_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_addresses_attribute_output::Builder,
) -> Result<
    crate::output::describe_addresses_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAddressesAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAddressesAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("addressSet") /* Addresses com.amazonaws.ec2.synthetic#DescribeAddressesAttributeOutput$Addresses */ =>  {
                let var_264 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_address_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_addresses(var_264);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeAddressesAttributeOutput$NextToken */ =>  {
                let var_265 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_265);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_aggregate_id_format(
    inp: &[u8],
    mut builder: crate::output::describe_aggregate_id_format_output::Builder,
) -> Result<
    crate::output::describe_aggregate_id_format_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAggregateIdFormatResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAggregateIdFormatResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("useLongIdsAggregated") /* UseLongIdsAggregated com.amazonaws.ec2.synthetic#DescribeAggregateIdFormatOutput$UseLongIdsAggregated */ =>  {
                let var_266 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_use_long_ids_aggregated(var_266);
            }
            ,
            s if s.matches("statusSet") /* Statuses com.amazonaws.ec2.synthetic#DescribeAggregateIdFormatOutput$Statuses */ =>  {
                let var_267 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_id_format_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_statuses(var_267);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_availability_zones(
    inp: &[u8],
    mut builder: crate::output::describe_availability_zones_output::Builder,
) -> Result<
    crate::output::describe_availability_zones_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeAvailabilityZonesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeAvailabilityZonesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZoneInfo") /* AvailabilityZones com.amazonaws.ec2.synthetic#DescribeAvailabilityZonesOutput$AvailabilityZones */ =>  {
                let var_268 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_availability_zone_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_268);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_bundle_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_bundle_tasks_output::Builder,
) -> Result<crate::output::describe_bundle_tasks_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeBundleTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeBundleTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bundleInstanceTasksSet") /* BundleTasks com.amazonaws.ec2.synthetic#DescribeBundleTasksOutput$BundleTasks */ =>  {
                let var_269 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_bundle_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bundle_tasks(var_269);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_byoip_cidrs(
    inp: &[u8],
    mut builder: crate::output::describe_byoip_cidrs_output::Builder,
) -> Result<crate::output::describe_byoip_cidrs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeByoipCidrsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeByoipCidrsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidrSet") /* ByoipCidrs com.amazonaws.ec2.synthetic#DescribeByoipCidrsOutput$ByoipCidrs */ =>  {
                let var_270 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_byoip_cidr_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidrs(var_270);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeByoipCidrsOutput$NextToken */ =>  {
                let var_271 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_271);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_capacity_reservation_fleets(
    inp: &[u8],
    mut builder: crate::output::describe_capacity_reservation_fleets_output::Builder,
) -> Result<
    crate::output::describe_capacity_reservation_fleets_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeCapacityReservationFleetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeCapacityReservationFleetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationFleetSet") /* CapacityReservationFleets com.amazonaws.ec2.synthetic#DescribeCapacityReservationFleetsOutput$CapacityReservationFleets */ =>  {
                let var_272 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_capacity_reservation_fleet_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleets(var_272);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeCapacityReservationFleetsOutput$NextToken */ =>  {
                let var_273 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_273);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_capacity_reservations(
    inp: &[u8],
    mut builder: crate::output::describe_capacity_reservations_output::Builder,
) -> Result<
    crate::output::describe_capacity_reservations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeCapacityReservationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeCapacityReservationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeCapacityReservationsOutput$NextToken */ =>  {
                let var_274 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_274);
            }
            ,
            s if s.matches("capacityReservationSet") /* CapacityReservations com.amazonaws.ec2.synthetic#DescribeCapacityReservationsOutput$CapacityReservations */ =>  {
                let var_275 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_capacity_reservation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservations(var_275);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_carrier_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_carrier_gateways_output::Builder,
) -> Result<
    crate::output::describe_carrier_gateways_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeCarrierGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeCarrierGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierGatewaySet") /* CarrierGateways com.amazonaws.ec2.synthetic#DescribeCarrierGatewaysOutput$CarrierGateways */ =>  {
                let var_276 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_carrier_gateway_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_carrier_gateways(var_276);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeCarrierGatewaysOutput$NextToken */ =>  {
                let var_277 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_277);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_classic_link_instances(
    inp: &[u8],
    mut builder: crate::output::describe_classic_link_instances_output::Builder,
) -> Result<
    crate::output::describe_classic_link_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClassicLinkInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClassicLinkInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* Instances com.amazonaws.ec2.synthetic#DescribeClassicLinkInstancesOutput$Instances */ =>  {
                let var_278 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_classic_link_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_278);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClassicLinkInstancesOutput$NextToken */ =>  {
                let var_279 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_279);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_client_vpn_authorization_rules(
    inp: &[u8],
    mut builder: crate::output::describe_client_vpn_authorization_rules_output::Builder,
) -> Result<
    crate::output::describe_client_vpn_authorization_rules_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClientVpnAuthorizationRulesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClientVpnAuthorizationRulesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("authorizationRule") /* AuthorizationRules com.amazonaws.ec2.synthetic#DescribeClientVpnAuthorizationRulesOutput$AuthorizationRules */ =>  {
                let var_280 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_authorization_rule_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_authorization_rules(var_280);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClientVpnAuthorizationRulesOutput$NextToken */ =>  {
                let var_281 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_281);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_client_vpn_connections(
    inp: &[u8],
    mut builder: crate::output::describe_client_vpn_connections_output::Builder,
) -> Result<
    crate::output::describe_client_vpn_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClientVpnConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClientVpnConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("connections") /* Connections com.amazonaws.ec2.synthetic#DescribeClientVpnConnectionsOutput$Connections */ =>  {
                let var_282 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_client_vpn_connection_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connections(var_282);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClientVpnConnectionsOutput$NextToken */ =>  {
                let var_283 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_283);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_client_vpn_endpoints(
    inp: &[u8],
    mut builder: crate::output::describe_client_vpn_endpoints_output::Builder,
) -> Result<
    crate::output::describe_client_vpn_endpoints_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClientVpnEndpointsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClientVpnEndpointsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpoint") /* ClientVpnEndpoints com.amazonaws.ec2.synthetic#DescribeClientVpnEndpointsOutput$ClientVpnEndpoints */ =>  {
                let var_284 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_endpoint_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoints(var_284);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClientVpnEndpointsOutput$NextToken */ =>  {
                let var_285 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_285);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_client_vpn_routes(
    inp: &[u8],
    mut builder: crate::output::describe_client_vpn_routes_output::Builder,
) -> Result<
    crate::output::describe_client_vpn_routes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClientVpnRoutesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClientVpnRoutesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routes") /* Routes com.amazonaws.ec2.synthetic#DescribeClientVpnRoutesOutput$Routes */ =>  {
                let var_286 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_client_vpn_route_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_286);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClientVpnRoutesOutput$NextToken */ =>  {
                let var_287 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_287);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_client_vpn_target_networks(
    inp: &[u8],
    mut builder: crate::output::describe_client_vpn_target_networks_output::Builder,
) -> Result<
    crate::output::describe_client_vpn_target_networks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeClientVpnTargetNetworksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeClientVpnTargetNetworksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnTargetNetworks") /* ClientVpnTargetNetworks com.amazonaws.ec2.synthetic#DescribeClientVpnTargetNetworksOutput$ClientVpnTargetNetworks */ =>  {
                let var_288 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_target_network_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_vpn_target_networks(var_288);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeClientVpnTargetNetworksOutput$NextToken */ =>  {
                let var_289 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_289);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_coip_pools(
    inp: &[u8],
    mut builder: crate::output::describe_coip_pools_output::Builder,
) -> Result<crate::output::describe_coip_pools_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeCoipPoolsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeCoipPoolsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("coipPoolSet") /* CoipPools com.amazonaws.ec2.synthetic#DescribeCoipPoolsOutput$CoipPools */ =>  {
                let var_290 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_coip_pool_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_coip_pools(var_290);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeCoipPoolsOutput$NextToken */ =>  {
                let var_291 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_291);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_conversion_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_conversion_tasks_output::Builder,
) -> Result<
    crate::output::describe_conversion_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeConversionTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeConversionTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("conversionTasks") /* ConversionTasks com.amazonaws.ec2.synthetic#DescribeConversionTasksOutput$ConversionTasks */ =>  {
                let var_292 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_describe_conversion_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_conversion_tasks(var_292);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_customer_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_customer_gateways_output::Builder,
) -> Result<
    crate::output::describe_customer_gateways_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeCustomerGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeCustomerGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("customerGatewaySet") /* CustomerGateways com.amazonaws.ec2.synthetic#DescribeCustomerGatewaysOutput$CustomerGateways */ =>  {
                let var_293 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_customer_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_customer_gateways(var_293);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_dhcp_options(
    inp: &[u8],
    mut builder: crate::output::describe_dhcp_options_output::Builder,
) -> Result<crate::output::describe_dhcp_options_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeDhcpOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeDhcpOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dhcpOptionsSet") /* DhcpOptions com.amazonaws.ec2.synthetic#DescribeDhcpOptionsOutput$DhcpOptions */ =>  {
                let var_294 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dhcp_options_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dhcp_options(var_294);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeDhcpOptionsOutput$NextToken */ =>  {
                let var_295 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_295);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_egress_only_internet_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_egress_only_internet_gateways_output::Builder,
) -> Result<
    crate::output::describe_egress_only_internet_gateways_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeEgressOnlyInternetGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeEgressOnlyInternetGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("egressOnlyInternetGatewaySet") /* EgressOnlyInternetGateways com.amazonaws.ec2.synthetic#DescribeEgressOnlyInternetGatewaysOutput$EgressOnlyInternetGateways */ =>  {
                let var_296 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_egress_only_internet_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_egress_only_internet_gateways(var_296);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeEgressOnlyInternetGatewaysOutput$NextToken */ =>  {
                let var_297 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_297);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_elastic_gpus(
    inp: &[u8],
    mut builder: crate::output::describe_elastic_gpus_output::Builder,
) -> Result<crate::output::describe_elastic_gpus_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeElasticGpusResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeElasticGpusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticGpuSet") /* ElasticGpuSet com.amazonaws.ec2.synthetic#DescribeElasticGpusOutput$ElasticGpuSet */ =>  {
                let var_298 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_gpu_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_set(var_298);
            }
            ,
            s if s.matches("maxResults") /* MaxResults com.amazonaws.ec2.synthetic#DescribeElasticGpusOutput$MaxResults */ =>  {
                let var_299 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_results(var_299);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeElasticGpusOutput$NextToken */ =>  {
                let var_300 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_300);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_export_image_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_export_image_tasks_output::Builder,
) -> Result<
    crate::output::describe_export_image_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeExportImageTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeExportImageTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("exportImageTaskSet") /* ExportImageTasks com.amazonaws.ec2.synthetic#DescribeExportImageTasksOutput$ExportImageTasks */ =>  {
                let var_301 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_export_image_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_export_image_tasks(var_301);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeExportImageTasksOutput$NextToken */ =>  {
                let var_302 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_302);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_export_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_export_tasks_output::Builder,
) -> Result<crate::output::describe_export_tasks_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeExportTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeExportTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("exportTaskSet") /* ExportTasks com.amazonaws.ec2.synthetic#DescribeExportTasksOutput$ExportTasks */ =>  {
                let var_303 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_export_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_export_tasks(var_303);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fast_launch_images(
    inp: &[u8],
    mut builder: crate::output::describe_fast_launch_images_output::Builder,
) -> Result<
    crate::output::describe_fast_launch_images_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFastLaunchImagesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFastLaunchImagesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fastLaunchImageSet") /* FastLaunchImages com.amazonaws.ec2.synthetic#DescribeFastLaunchImagesOutput$FastLaunchImages */ =>  {
                let var_304 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_describe_fast_launch_images_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fast_launch_images(var_304);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFastLaunchImagesOutput$NextToken */ =>  {
                let var_305 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_305);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fast_snapshot_restores(
    inp: &[u8],
    mut builder: crate::output::describe_fast_snapshot_restores_output::Builder,
) -> Result<
    crate::output::describe_fast_snapshot_restores_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFastSnapshotRestoresResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFastSnapshotRestoresResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fastSnapshotRestoreSet") /* FastSnapshotRestores com.amazonaws.ec2.synthetic#DescribeFastSnapshotRestoresOutput$FastSnapshotRestores */ =>  {
                let var_306 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_describe_fast_snapshot_restore_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fast_snapshot_restores(var_306);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFastSnapshotRestoresOutput$NextToken */ =>  {
                let var_307 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_307);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fleet_history(
    inp: &[u8],
    mut builder: crate::output::describe_fleet_history_output::Builder,
) -> Result<crate::output::describe_fleet_history_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFleetHistoryResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFleetHistoryResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("historyRecordSet") /* HistoryRecords com.amazonaws.ec2.synthetic#DescribeFleetHistoryOutput$HistoryRecords */ =>  {
                let var_308 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_history_record_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_history_records(var_308);
            }
            ,
            s if s.matches("lastEvaluatedTime") /* LastEvaluatedTime com.amazonaws.ec2.synthetic#DescribeFleetHistoryOutput$LastEvaluatedTime */ =>  {
                let var_309 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_evaluated_time(var_309);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFleetHistoryOutput$NextToken */ =>  {
                let var_310 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_310);
            }
            ,
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2.synthetic#DescribeFleetHistoryOutput$FleetId */ =>  {
                let var_311 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_311);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2.synthetic#DescribeFleetHistoryOutput$StartTime */ =>  {
                let var_312 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_312);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fleet_instances(
    inp: &[u8],
    mut builder: crate::output::describe_fleet_instances_output::Builder,
) -> Result<crate::output::describe_fleet_instances_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFleetInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFleetInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("activeInstanceSet") /* ActiveInstances com.amazonaws.ec2.synthetic#DescribeFleetInstancesOutput$ActiveInstances */ =>  {
                let var_313 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_active_instance_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_active_instances(var_313);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFleetInstancesOutput$NextToken */ =>  {
                let var_314 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_314);
            }
            ,
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2.synthetic#DescribeFleetInstancesOutput$FleetId */ =>  {
                let var_315 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_315);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fleets(
    inp: &[u8],
    mut builder: crate::output::describe_fleets_output::Builder,
) -> Result<crate::output::describe_fleets_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFleetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFleetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFleetsOutput$NextToken */ =>  {
                let var_316 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_316);
            }
            ,
            s if s.matches("fleetSet") /* Fleets com.amazonaws.ec2.synthetic#DescribeFleetsOutput$Fleets */ =>  {
                let var_317 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fleet_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fleets(var_317);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_flow_logs(
    inp: &[u8],
    mut builder: crate::output::describe_flow_logs_output::Builder,
) -> Result<crate::output::describe_flow_logs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFlowLogsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFlowLogsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("flowLogSet") /* FlowLogs com.amazonaws.ec2.synthetic#DescribeFlowLogsOutput$FlowLogs */ =>  {
                let var_318 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_flow_log_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_flow_logs(var_318);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFlowLogsOutput$NextToken */ =>  {
                let var_319 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_319);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fpga_image_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_fpga_image_attribute_output::Builder,
) -> Result<
    crate::output::describe_fpga_image_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFpgaImageAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFpgaImageAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageAttribute") /* FpgaImageAttribute com.amazonaws.ec2.synthetic#DescribeFpgaImageAttributeOutput$FpgaImageAttribute */ =>  {
                let var_320 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fpga_image_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpga_image_attribute(var_320);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_fpga_images(
    inp: &[u8],
    mut builder: crate::output::describe_fpga_images_output::Builder,
) -> Result<crate::output::describe_fpga_images_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeFpgaImagesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeFpgaImagesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageSet") /* FpgaImages com.amazonaws.ec2.synthetic#DescribeFpgaImagesOutput$FpgaImages */ =>  {
                let var_321 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fpga_image_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpga_images(var_321);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeFpgaImagesOutput$NextToken */ =>  {
                let var_322 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_322);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_host_reservation_offerings(
    inp: &[u8],
    mut builder: crate::output::describe_host_reservation_offerings_output::Builder,
) -> Result<
    crate::output::describe_host_reservation_offerings_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeHostReservationOfferingsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeHostReservationOfferingsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeHostReservationOfferingsOutput$NextToken */ =>  {
                let var_323 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_323);
            }
            ,
            s if s.matches("offeringSet") /* OfferingSet com.amazonaws.ec2.synthetic#DescribeHostReservationOfferingsOutput$OfferingSet */ =>  {
                let var_324 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_host_offering_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_offering_set(var_324);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_host_reservations(
    inp: &[u8],
    mut builder: crate::output::describe_host_reservations_output::Builder,
) -> Result<
    crate::output::describe_host_reservations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeHostReservationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeHostReservationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostReservationSet") /* HostReservationSet com.amazonaws.ec2.synthetic#DescribeHostReservationsOutput$HostReservationSet */ =>  {
                let var_325 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_host_reservation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_reservation_set(var_325);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeHostReservationsOutput$NextToken */ =>  {
                let var_326 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_326);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_hosts(
    inp: &[u8],
    mut builder: crate::output::describe_hosts_output::Builder,
) -> Result<crate::output::describe_hosts_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeHostsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeHostsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostSet") /* Hosts com.amazonaws.ec2.synthetic#DescribeHostsOutput$Hosts */ =>  {
                let var_327 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_host_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosts(var_327);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeHostsOutput$NextToken */ =>  {
                let var_328 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_328);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_iam_instance_profile_associations(
    inp: &[u8],
    mut builder: crate::output::describe_iam_instance_profile_associations_output::Builder,
) -> Result<
    crate::output::describe_iam_instance_profile_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIamInstanceProfileAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIamInstanceProfileAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("iamInstanceProfileAssociationSet") /* IamInstanceProfileAssociations com.amazonaws.ec2.synthetic#DescribeIamInstanceProfileAssociationsOutput$IamInstanceProfileAssociations */ =>  {
                let var_329 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_iam_instance_profile_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile_associations(var_329);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeIamInstanceProfileAssociationsOutput$NextToken */ =>  {
                let var_330 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_330);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_identity_id_format(
    inp: &[u8],
    mut builder: crate::output::describe_identity_id_format_output::Builder,
) -> Result<
    crate::output::describe_identity_id_format_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIdentityIdFormatResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIdentityIdFormatResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("statusSet") /* Statuses com.amazonaws.ec2.synthetic#DescribeIdentityIdFormatOutput$Statuses */ =>  {
                let var_331 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_id_format_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_statuses(var_331);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_id_format(
    inp: &[u8],
    mut builder: crate::output::describe_id_format_output::Builder,
) -> Result<crate::output::describe_id_format_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIdFormatResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIdFormatResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("statusSet") /* Statuses com.amazonaws.ec2.synthetic#DescribeIdFormatOutput$Statuses */ =>  {
                let var_332 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_id_format_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_statuses(var_332);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_image_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_image_attribute_output::Builder,
) -> Result<crate::output::describe_image_attribute_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeImageAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeImageAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$BlockDeviceMappings */ =>  {
                let var_333 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_333);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$ImageId */ =>  {
                let var_334 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_334);
            }
            ,
            s if s.matches("launchPermission") /* LaunchPermissions com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$LaunchPermissions */ =>  {
                let var_335 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_permissions(var_335);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$ProductCodes */ =>  {
                let var_336 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_336);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$Description */ =>  {
                let var_337 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_description(var_337);
            }
            ,
            s if s.matches("kernel") /* KernelId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$KernelId */ =>  {
                let var_338 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_338);
            }
            ,
            s if s.matches("ramdisk") /* RamdiskId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$RamdiskId */ =>  {
                let var_339 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_339);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$SriovNetSupport */ =>  {
                let var_340 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_340);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$BootMode */ =>  {
                let var_341 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_341);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_images(
    inp: &[u8],
    mut builder: crate::output::describe_images_output::Builder,
) -> Result<crate::output::describe_images_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeImagesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeImagesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imagesSet") /* Images com.amazonaws.ec2.synthetic#DescribeImagesOutput$Images */ =>  {
                let var_342 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_image_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_images(var_342);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_import_image_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_import_image_tasks_output::Builder,
) -> Result<
    crate::output::describe_import_image_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeImportImageTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeImportImageTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("importImageTaskSet") /* ImportImageTasks com.amazonaws.ec2.synthetic#DescribeImportImageTasksOutput$ImportImageTasks */ =>  {
                let var_343 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_import_image_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_import_image_tasks(var_343);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeImportImageTasksOutput$NextToken */ =>  {
                let var_344 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_344);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_import_snapshot_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_import_snapshot_tasks_output::Builder,
) -> Result<
    crate::output::describe_import_snapshot_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeImportSnapshotTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeImportSnapshotTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("importSnapshotTaskSet") /* ImportSnapshotTasks com.amazonaws.ec2.synthetic#DescribeImportSnapshotTasksOutput$ImportSnapshotTasks */ =>  {
                let var_345 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_import_snapshot_task_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_import_snapshot_tasks(var_345);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeImportSnapshotTasksOutput$NextToken */ =>  {
                let var_346 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_346);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_instance_attribute_output::Builder,
) -> Result<
    crate::output::describe_instance_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$Groups */ =>  {
                let var_347 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_347);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$BlockDeviceMappings */ =>  {
                let var_348 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_348);
            }
            ,
            s if s.matches("disableApiTermination") /* DisableApiTermination com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$DisableApiTermination */ =>  {
                let var_349 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_disable_api_termination(var_349);
            }
            ,
            s if s.matches("enaSupport") /* EnaSupport com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$EnaSupport */ =>  {
                let var_350 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ena_support(var_350);
            }
            ,
            s if s.matches("enclaveOptions") /* EnclaveOptions com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$EnclaveOptions */ =>  {
                let var_351 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_enclave_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enclave_options(var_351);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$EbsOptimized */ =>  {
                let var_352 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_352);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$InstanceId */ =>  {
                let var_353 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_353);
            }
            ,
            s if s.matches("instanceInitiatedShutdownBehavior") /* InstanceInitiatedShutdownBehavior com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$InstanceInitiatedShutdownBehavior */ =>  {
                let var_354 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_initiated_shutdown_behavior(var_354);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$InstanceType */ =>  {
                let var_355 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_355);
            }
            ,
            s if s.matches("kernel") /* KernelId com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$KernelId */ =>  {
                let var_356 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_356);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$ProductCodes */ =>  {
                let var_357 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_357);
            }
            ,
            s if s.matches("ramdisk") /* RamdiskId com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$RamdiskId */ =>  {
                let var_358 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_358);
            }
            ,
            s if s.matches("rootDeviceName") /* RootDeviceName com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$RootDeviceName */ =>  {
                let var_359 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_root_device_name(var_359);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$SourceDestCheck */ =>  {
                let var_360 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_360);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$SriovNetSupport */ =>  {
                let var_361 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_361);
            }
            ,
            s if s.matches("userData") /* UserData com.amazonaws.ec2.synthetic#DescribeInstanceAttributeOutput$UserData */ =>  {
                let var_362 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_data(var_362);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_credit_specifications(
    inp: &[u8],
    mut builder: crate::output::describe_instance_credit_specifications_output::Builder,
) -> Result<
    crate::output::describe_instance_credit_specifications_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceCreditSpecificationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceCreditSpecificationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceCreditSpecificationSet") /* InstanceCreditSpecifications com.amazonaws.ec2.synthetic#DescribeInstanceCreditSpecificationsOutput$InstanceCreditSpecifications */ =>  {
                let var_363 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_credit_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_credit_specifications(var_363);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstanceCreditSpecificationsOutput$NextToken */ =>  {
                let var_364 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_364);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_event_notification_attributes(
    inp: &[u8],
    mut builder: crate::output::describe_instance_event_notification_attributes_output::Builder,
) -> Result<
    crate::output::describe_instance_event_notification_attributes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceEventNotificationAttributesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceEventNotificationAttributesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTagAttribute") /* InstanceTagAttribute com.amazonaws.ec2.synthetic#DescribeInstanceEventNotificationAttributesOutput$InstanceTagAttribute */ =>  {
                let var_365 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_tag_notification_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_tag_attribute(var_365);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_event_windows(
    inp: &[u8],
    mut builder: crate::output::describe_instance_event_windows_output::Builder,
) -> Result<
    crate::output::describe_instance_event_windows_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceEventWindowsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceEventWindowsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindowSet") /* InstanceEventWindows com.amazonaws.ec2.synthetic#DescribeInstanceEventWindowsOutput$InstanceEventWindows */ =>  {
                let var_366 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_event_window_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_windows(var_366);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstanceEventWindowsOutput$NextToken */ =>  {
                let var_367 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_367);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instances(
    inp: &[u8],
    mut builder: crate::output::describe_instances_output::Builder,
) -> Result<crate::output::describe_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservationSet") /* Reservations com.amazonaws.ec2.synthetic#DescribeInstancesOutput$Reservations */ =>  {
                let var_368 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reservation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reservations(var_368);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstancesOutput$NextToken */ =>  {
                let var_369 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_369);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_status(
    inp: &[u8],
    mut builder: crate::output::describe_instance_status_output::Builder,
) -> Result<crate::output::describe_instance_status_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceStatusResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceStatusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceStatusSet") /* InstanceStatuses com.amazonaws.ec2.synthetic#DescribeInstanceStatusOutput$InstanceStatuses */ =>  {
                let var_370 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_status_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_statuses(var_370);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstanceStatusOutput$NextToken */ =>  {
                let var_371 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_371);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_type_offerings(
    inp: &[u8],
    mut builder: crate::output::describe_instance_type_offerings_output::Builder,
) -> Result<
    crate::output::describe_instance_type_offerings_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceTypeOfferingsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceTypeOfferingsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTypeOfferingSet") /* InstanceTypeOfferings com.amazonaws.ec2.synthetic#DescribeInstanceTypeOfferingsOutput$InstanceTypeOfferings */ =>  {
                let var_372 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_type_offerings_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_type_offerings(var_372);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstanceTypeOfferingsOutput$NextToken */ =>  {
                let var_373 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_373);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_instance_types(
    inp: &[u8],
    mut builder: crate::output::describe_instance_types_output::Builder,
) -> Result<crate::output::describe_instance_types_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInstanceTypesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInstanceTypesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTypeSet") /* InstanceTypes com.amazonaws.ec2.synthetic#DescribeInstanceTypesOutput$InstanceTypes */ =>  {
                let var_374 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_type_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_types(var_374);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInstanceTypesOutput$NextToken */ =>  {
                let var_375 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_375);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_internet_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_internet_gateways_output::Builder,
) -> Result<
    crate::output::describe_internet_gateways_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInternetGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeInternetGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("internetGatewaySet") /* InternetGateways com.amazonaws.ec2.synthetic#DescribeInternetGatewaysOutput$InternetGateways */ =>  {
                let var_376 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_internet_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_internet_gateways(var_376);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeInternetGatewaysOutput$NextToken */ =>  {
                let var_377 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_377);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_ipam_pools(
    inp: &[u8],
    mut builder: crate::output::describe_ipam_pools_output::Builder,
) -> Result<crate::output::describe_ipam_pools_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIpamPoolsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIpamPoolsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeIpamPoolsOutput$NextToken */ =>  {
                let var_378 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_378);
            }
            ,
            s if s.matches("ipamPoolSet") /* IpamPools com.amazonaws.ec2.synthetic#DescribeIpamPoolsOutput$IpamPools */ =>  {
                let var_379 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_pool_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pools(var_379);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_ipams(
    inp: &[u8],
    mut builder: crate::output::describe_ipams_output::Builder,
) -> Result<crate::output::describe_ipams_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIpamsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIpamsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeIpamsOutput$NextToken */ =>  {
                let var_380 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_380);
            }
            ,
            s if s.matches("ipamSet") /* Ipams com.amazonaws.ec2.synthetic#DescribeIpamsOutput$Ipams */ =>  {
                let var_381 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipams(var_381);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_ipam_scopes(
    inp: &[u8],
    mut builder: crate::output::describe_ipam_scopes_output::Builder,
) -> Result<crate::output::describe_ipam_scopes_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIpamScopesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIpamScopesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeIpamScopesOutput$NextToken */ =>  {
                let var_382 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_382);
            }
            ,
            s if s.matches("ipamScopeSet") /* IpamScopes com.amazonaws.ec2.synthetic#DescribeIpamScopesOutput$IpamScopes */ =>  {
                let var_383 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_scope_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_scopes(var_383);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_ipv6_pools(
    inp: &[u8],
    mut builder: crate::output::describe_ipv6_pools_output::Builder,
) -> Result<crate::output::describe_ipv6_pools_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeIpv6PoolsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeIpv6PoolsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6PoolSet") /* Ipv6Pools com.amazonaws.ec2.synthetic#DescribeIpv6PoolsOutput$Ipv6Pools */ =>  {
                let var_384 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_pool_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_pools(var_384);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeIpv6PoolsOutput$NextToken */ =>  {
                let var_385 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_385);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_key_pairs(
    inp: &[u8],
    mut builder: crate::output::describe_key_pairs_output::Builder,
) -> Result<crate::output::describe_key_pairs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeKeyPairsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeKeyPairsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("keySet") /* KeyPairs com.amazonaws.ec2.synthetic#DescribeKeyPairsOutput$KeyPairs */ =>  {
                let var_386 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_key_pair_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_key_pairs(var_386);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_launch_templates(
    inp: &[u8],
    mut builder: crate::output::describe_launch_templates_output::Builder,
) -> Result<
    crate::output::describe_launch_templates_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLaunchTemplatesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLaunchTemplatesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplates") /* LaunchTemplates com.amazonaws.ec2.synthetic#DescribeLaunchTemplatesOutput$LaunchTemplates */ =>  {
                let var_387 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_templates(var_387);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLaunchTemplatesOutput$NextToken */ =>  {
                let var_388 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_388);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_launch_template_versions(
    inp: &[u8],
    mut builder: crate::output::describe_launch_template_versions_output::Builder,
) -> Result<
    crate::output::describe_launch_template_versions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLaunchTemplateVersionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLaunchTemplateVersionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateVersionSet") /* LaunchTemplateVersions com.amazonaws.ec2.synthetic#DescribeLaunchTemplateVersionsOutput$LaunchTemplateVersions */ =>  {
                let var_389 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_version_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_versions(var_389);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLaunchTemplateVersionsOutput$NextToken */ =>  {
                let var_390 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_390);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_local_gateway_route_tables(
    inp: &[u8],
    mut builder: crate::output::describe_local_gateway_route_tables_output::Builder,
) -> Result<
    crate::output::describe_local_gateway_route_tables_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLocalGatewayRouteTablesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLocalGatewayRouteTablesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableSet") /* LocalGatewayRouteTables com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTablesOutput$LocalGatewayRouteTables */ =>  {
                let var_391 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_route_table_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_tables(var_391);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTablesOutput$NextToken */ =>  {
                let var_392 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_392);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]pub fn deser_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(inp: &[u8], mut builder: crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder) -> Result<crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder, aws_smithy_xml::decode::XmlError>{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el
        .matches("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse"))
    {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse got {:?}", start_el)));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVirtualInterfaceGroupAssociationSet") /* LocalGatewayRouteTableVirtualInterfaceGroupAssociations com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput$LocalGatewayRouteTableVirtualInterfaceGroupAssociations */ =>  {
                let var_393 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_route_table_virtual_interface_group_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_virtual_interface_group_associations(var_393);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput$NextToken */ =>  {
                let var_394 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_394);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    inp: &[u8],
    mut builder: crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder,
) -> Result<
    crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLocalGatewayRouteTableVpcAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLocalGatewayRouteTableVpcAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVpcAssociationSet") /* LocalGatewayRouteTableVpcAssociations com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTableVpcAssociationsOutput$LocalGatewayRouteTableVpcAssociations */ =>  {
                let var_395 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_route_table_vpc_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_vpc_associations(var_395);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewayRouteTableVpcAssociationsOutput$NextToken */ =>  {
                let var_396 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_396);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_local_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_local_gateways_output::Builder,
) -> Result<crate::output::describe_local_gateways_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLocalGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLocalGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewaySet") /* LocalGateways com.amazonaws.ec2.synthetic#DescribeLocalGatewaysOutput$LocalGateways */ =>  {
                let var_397 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateways(var_397);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewaysOutput$NextToken */ =>  {
                let var_398 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_398);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    inp: &[u8],
    mut builder: crate::output::describe_local_gateway_virtual_interface_groups_output::Builder,
) -> Result<
    crate::output::describe_local_gateway_virtual_interface_groups_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLocalGatewayVirtualInterfaceGroupsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLocalGatewayVirtualInterfaceGroupsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayVirtualInterfaceGroupSet") /* LocalGatewayVirtualInterfaceGroups com.amazonaws.ec2.synthetic#DescribeLocalGatewayVirtualInterfaceGroupsOutput$LocalGatewayVirtualInterfaceGroups */ =>  {
                let var_399 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_group_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_groups(var_399);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewayVirtualInterfaceGroupsOutput$NextToken */ =>  {
                let var_400 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_400);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    inp: &[u8],
    mut builder: crate::output::describe_local_gateway_virtual_interfaces_output::Builder,
) -> Result<
    crate::output::describe_local_gateway_virtual_interfaces_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeLocalGatewayVirtualInterfacesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeLocalGatewayVirtualInterfacesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayVirtualInterfaceSet") /* LocalGatewayVirtualInterfaces com.amazonaws.ec2.synthetic#DescribeLocalGatewayVirtualInterfacesOutput$LocalGatewayVirtualInterfaces */ =>  {
                let var_401 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interfaces(var_401);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeLocalGatewayVirtualInterfacesOutput$NextToken */ =>  {
                let var_402 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_402);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_managed_prefix_lists(
    inp: &[u8],
    mut builder: crate::output::describe_managed_prefix_lists_output::Builder,
) -> Result<
    crate::output::describe_managed_prefix_lists_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeManagedPrefixListsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeManagedPrefixListsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeManagedPrefixListsOutput$NextToken */ =>  {
                let var_403 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_403);
            }
            ,
            s if s.matches("prefixListSet") /* PrefixLists com.amazonaws.ec2.synthetic#DescribeManagedPrefixListsOutput$PrefixLists */ =>  {
                let var_404 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_managed_prefix_list_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_lists(var_404);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_moving_addresses(
    inp: &[u8],
    mut builder: crate::output::describe_moving_addresses_output::Builder,
) -> Result<
    crate::output::describe_moving_addresses_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeMovingAddressesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeMovingAddressesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("movingAddressStatusSet") /* MovingAddressStatuses com.amazonaws.ec2.synthetic#DescribeMovingAddressesOutput$MovingAddressStatuses */ =>  {
                let var_405 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_moving_address_status_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_moving_address_statuses(var_405);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeMovingAddressesOutput$NextToken */ =>  {
                let var_406 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_406);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_nat_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_nat_gateways_output::Builder,
) -> Result<crate::output::describe_nat_gateways_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNatGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNatGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("natGatewaySet") /* NatGateways com.amazonaws.ec2.synthetic#DescribeNatGatewaysOutput$NatGateways */ =>  {
                let var_407 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_nat_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_nat_gateways(var_407);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNatGatewaysOutput$NextToken */ =>  {
                let var_408 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_408);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_acls(
    inp: &[u8],
    mut builder: crate::output::describe_network_acls_output::Builder,
) -> Result<crate::output::describe_network_acls_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkAclsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkAclsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkAclSet") /* NetworkAcls com.amazonaws.ec2.synthetic#DescribeNetworkAclsOutput$NetworkAcls */ =>  {
                let var_409 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_acl_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_acls(var_409);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkAclsOutput$NextToken */ =>  {
                let var_410 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_410);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_insights_access_scope_analyses(
    inp: &[u8],
    mut builder: crate::output::describe_network_insights_access_scope_analyses_output::Builder,
) -> Result<
    crate::output::describe_network_insights_access_scope_analyses_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInsightsAccessScopeAnalysesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInsightsAccessScopeAnalysesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysisSet") /* NetworkInsightsAccessScopeAnalyses com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAccessScopeAnalysesOutput$NetworkInsightsAccessScopeAnalyses */ =>  {
                let var_411 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_insights_access_scope_analysis_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analyses(var_411);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAccessScopeAnalysesOutput$NextToken */ =>  {
                let var_412 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_412);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_insights_access_scopes(
    inp: &[u8],
    mut builder: crate::output::describe_network_insights_access_scopes_output::Builder,
) -> Result<
    crate::output::describe_network_insights_access_scopes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInsightsAccessScopesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInsightsAccessScopesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeSet") /* NetworkInsightsAccessScopes com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAccessScopesOutput$NetworkInsightsAccessScopes */ =>  {
                let var_413 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_insights_access_scope_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scopes(var_413);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAccessScopesOutput$NextToken */ =>  {
                let var_414 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_414);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_insights_analyses(
    inp: &[u8],
    mut builder: crate::output::describe_network_insights_analyses_output::Builder,
) -> Result<
    crate::output::describe_network_insights_analyses_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInsightsAnalysesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInsightsAnalysesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAnalysisSet") /* NetworkInsightsAnalyses com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAnalysesOutput$NetworkInsightsAnalyses */ =>  {
                let var_415 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_insights_analysis_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_analyses(var_415);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInsightsAnalysesOutput$NextToken */ =>  {
                let var_416 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_416);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_insights_paths(
    inp: &[u8],
    mut builder: crate::output::describe_network_insights_paths_output::Builder,
) -> Result<
    crate::output::describe_network_insights_paths_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInsightsPathsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInsightsPathsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsPathSet") /* NetworkInsightsPaths com.amazonaws.ec2.synthetic#DescribeNetworkInsightsPathsOutput$NetworkInsightsPaths */ =>  {
                let var_417 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_insights_path_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_paths(var_417);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInsightsPathsOutput$NextToken */ =>  {
                let var_418 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_418);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_interface_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_network_interface_attribute_output::Builder,
) -> Result<
    crate::output::describe_network_interface_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInterfaceAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInterfaceAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachment") /* Attachment com.amazonaws.ec2.synthetic#DescribeNetworkInterfaceAttributeOutput$Attachment */ =>  {
                let var_419 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment(var_419);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#DescribeNetworkInterfaceAttributeOutput$Description */ =>  {
                let var_420 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_description(var_420);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2.synthetic#DescribeNetworkInterfaceAttributeOutput$Groups */ =>  {
                let var_421 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_421);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2.synthetic#DescribeNetworkInterfaceAttributeOutput$NetworkInterfaceId */ =>  {
                let var_422 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_422);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2.synthetic#DescribeNetworkInterfaceAttributeOutput$SourceDestCheck */ =>  {
                let var_423 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_423);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_interface_permissions(
    inp: &[u8],
    mut builder: crate::output::describe_network_interface_permissions_output::Builder,
) -> Result<
    crate::output::describe_network_interface_permissions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInterfacePermissionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInterfacePermissionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfacePermissions") /* NetworkInterfacePermissions com.amazonaws.ec2.synthetic#DescribeNetworkInterfacePermissionsOutput$NetworkInterfacePermissions */ =>  {
                let var_424 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_interface_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_permissions(var_424);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInterfacePermissionsOutput$NextToken */ =>  {
                let var_425 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_425);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_network_interfaces(
    inp: &[u8],
    mut builder: crate::output::describe_network_interfaces_output::Builder,
) -> Result<
    crate::output::describe_network_interfaces_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeNetworkInterfacesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeNetworkInterfacesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2.synthetic#DescribeNetworkInterfacesOutput$NetworkInterfaces */ =>  {
                let var_426 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_interface_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_426);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeNetworkInterfacesOutput$NextToken */ =>  {
                let var_427 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_427);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_placement_groups(
    inp: &[u8],
    mut builder: crate::output::describe_placement_groups_output::Builder,
) -> Result<
    crate::output::describe_placement_groups_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribePlacementGroupsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribePlacementGroupsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("placementGroupSet") /* PlacementGroups com.amazonaws.ec2.synthetic#DescribePlacementGroupsOutput$PlacementGroups */ =>  {
                let var_428 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_placement_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement_groups(var_428);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_prefix_lists(
    inp: &[u8],
    mut builder: crate::output::describe_prefix_lists_output::Builder,
) -> Result<crate::output::describe_prefix_lists_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribePrefixListsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribePrefixListsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribePrefixListsOutput$NextToken */ =>  {
                let var_429 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_429);
            }
            ,
            s if s.matches("prefixListSet") /* PrefixLists com.amazonaws.ec2.synthetic#DescribePrefixListsOutput$PrefixLists */ =>  {
                let var_430 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_prefix_list_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_lists(var_430);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_principal_id_format(
    inp: &[u8],
    mut builder: crate::output::describe_principal_id_format_output::Builder,
) -> Result<
    crate::output::describe_principal_id_format_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribePrincipalIdFormatResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribePrincipalIdFormatResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("principalSet") /* Principals com.amazonaws.ec2.synthetic#DescribePrincipalIdFormatOutput$Principals */ =>  {
                let var_431 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_principal_id_format_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_principals(var_431);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribePrincipalIdFormatOutput$NextToken */ =>  {
                let var_432 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_432);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_public_ipv4_pools(
    inp: &[u8],
    mut builder: crate::output::describe_public_ipv4_pools_output::Builder,
) -> Result<
    crate::output::describe_public_ipv4_pools_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribePublicIpv4PoolsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribePublicIpv4PoolsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("publicIpv4PoolSet") /* PublicIpv4Pools com.amazonaws.ec2.synthetic#DescribePublicIpv4PoolsOutput$PublicIpv4Pools */ =>  {
                let var_433 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_public_ipv4_pool_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_public_ipv4_pools(var_433);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribePublicIpv4PoolsOutput$NextToken */ =>  {
                let var_434 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_434);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_regions(
    inp: &[u8],
    mut builder: crate::output::describe_regions_output::Builder,
) -> Result<crate::output::describe_regions_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeRegionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeRegionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("regionInfo") /* Regions com.amazonaws.ec2.synthetic#DescribeRegionsOutput$Regions */ =>  {
                let var_435 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_region_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_regions(var_435);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_replace_root_volume_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_replace_root_volume_tasks_output::Builder,
) -> Result<
    crate::output::describe_replace_root_volume_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeReplaceRootVolumeTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeReplaceRootVolumeTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replaceRootVolumeTaskSet") /* ReplaceRootVolumeTasks com.amazonaws.ec2.synthetic#DescribeReplaceRootVolumeTasksOutput$ReplaceRootVolumeTasks */ =>  {
                let var_436 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_replace_root_volume_tasks(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_replace_root_volume_tasks(var_436);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeReplaceRootVolumeTasksOutput$NextToken */ =>  {
                let var_437 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_437);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_reserved_instances(
    inp: &[u8],
    mut builder: crate::output::describe_reserved_instances_output::Builder,
) -> Result<
    crate::output::describe_reserved_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeReservedInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeReservedInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesSet") /* ReservedInstances com.amazonaws.ec2.synthetic#DescribeReservedInstancesOutput$ReservedInstances */ =>  {
                let var_438 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances(var_438);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_reserved_instances_listings(
    inp: &[u8],
    mut builder: crate::output::describe_reserved_instances_listings_output::Builder,
) -> Result<
    crate::output::describe_reserved_instances_listings_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeReservedInstancesListingsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeReservedInstancesListingsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesListingsSet") /* ReservedInstancesListings com.amazonaws.ec2.synthetic#DescribeReservedInstancesListingsOutput$ReservedInstancesListings */ =>  {
                let var_439 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_listing_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_listings(var_439);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_reserved_instances_modifications(
    inp: &[u8],
    mut builder: crate::output::describe_reserved_instances_modifications_output::Builder,
) -> Result<
    crate::output::describe_reserved_instances_modifications_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeReservedInstancesModificationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeReservedInstancesModificationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeReservedInstancesModificationsOutput$NextToken */ =>  {
                let var_440 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_440);
            }
            ,
            s if s.matches("reservedInstancesModificationsSet") /* ReservedInstancesModifications com.amazonaws.ec2.synthetic#DescribeReservedInstancesModificationsOutput$ReservedInstancesModifications */ =>  {
                let var_441 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_modification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_modifications(var_441);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_reserved_instances_offerings(
    inp: &[u8],
    mut builder: crate::output::describe_reserved_instances_offerings_output::Builder,
) -> Result<
    crate::output::describe_reserved_instances_offerings_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeReservedInstancesOfferingsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeReservedInstancesOfferingsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesOfferingsSet") /* ReservedInstancesOfferings com.amazonaws.ec2.synthetic#DescribeReservedInstancesOfferingsOutput$ReservedInstancesOfferings */ =>  {
                let var_442 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_offering_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_offerings(var_442);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeReservedInstancesOfferingsOutput$NextToken */ =>  {
                let var_443 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_443);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_route_tables(
    inp: &[u8],
    mut builder: crate::output::describe_route_tables_output::Builder,
) -> Result<crate::output::describe_route_tables_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeRouteTablesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeRouteTablesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeTableSet") /* RouteTables com.amazonaws.ec2.synthetic#DescribeRouteTablesOutput$RouteTables */ =>  {
                let var_444 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_route_table_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_tables(var_444);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeRouteTablesOutput$NextToken */ =>  {
                let var_445 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_445);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_scheduled_instance_availability(
    inp: &[u8],
    mut builder: crate::output::describe_scheduled_instance_availability_output::Builder,
) -> Result<
    crate::output::describe_scheduled_instance_availability_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeScheduledInstanceAvailabilityResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeScheduledInstanceAvailabilityResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeScheduledInstanceAvailabilityOutput$NextToken */ =>  {
                let var_446 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_446);
            }
            ,
            s if s.matches("scheduledInstanceAvailabilitySet") /* ScheduledInstanceAvailabilitySet com.amazonaws.ec2.synthetic#DescribeScheduledInstanceAvailabilityOutput$ScheduledInstanceAvailabilitySet */ =>  {
                let var_447 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_scheduled_instance_availability_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_scheduled_instance_availability_set(var_447);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_scheduled_instances(
    inp: &[u8],
    mut builder: crate::output::describe_scheduled_instances_output::Builder,
) -> Result<
    crate::output::describe_scheduled_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeScheduledInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeScheduledInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeScheduledInstancesOutput$NextToken */ =>  {
                let var_448 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_448);
            }
            ,
            s if s.matches("scheduledInstanceSet") /* ScheduledInstanceSet com.amazonaws.ec2.synthetic#DescribeScheduledInstancesOutput$ScheduledInstanceSet */ =>  {
                let var_449 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_scheduled_instance_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_scheduled_instance_set(var_449);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_security_group_references(
    inp: &[u8],
    mut builder: crate::output::describe_security_group_references_output::Builder,
) -> Result<
    crate::output::describe_security_group_references_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSecurityGroupReferencesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSecurityGroupReferencesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("securityGroupReferenceSet") /* SecurityGroupReferenceSet com.amazonaws.ec2.synthetic#DescribeSecurityGroupReferencesOutput$SecurityGroupReferenceSet */ =>  {
                let var_450 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_references(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_reference_set(var_450);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_security_group_rules(
    inp: &[u8],
    mut builder: crate::output::describe_security_group_rules_output::Builder,
) -> Result<
    crate::output::describe_security_group_rules_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSecurityGroupRulesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSecurityGroupRulesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("securityGroupRuleSet") /* SecurityGroupRules com.amazonaws.ec2.synthetic#DescribeSecurityGroupRulesOutput$SecurityGroupRules */ =>  {
                let var_451 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_rule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rules(var_451);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSecurityGroupRulesOutput$NextToken */ =>  {
                let var_452 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_452);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_security_groups(
    inp: &[u8],
    mut builder: crate::output::describe_security_groups_output::Builder,
) -> Result<crate::output::describe_security_groups_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSecurityGroupsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSecurityGroupsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("securityGroupInfo") /* SecurityGroups com.amazonaws.ec2.synthetic#DescribeSecurityGroupsOutput$SecurityGroups */ =>  {
                let var_453 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_453);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSecurityGroupsOutput$NextToken */ =>  {
                let var_454 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_454);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_snapshot_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_snapshot_attribute_output::Builder,
) -> Result<
    crate::output::describe_snapshot_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSnapshotAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSnapshotAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("createVolumePermission") /* CreateVolumePermissions com.amazonaws.ec2.synthetic#DescribeSnapshotAttributeOutput$CreateVolumePermissions */ =>  {
                let var_455 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_create_volume_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_create_volume_permissions(var_455);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2.synthetic#DescribeSnapshotAttributeOutput$ProductCodes */ =>  {
                let var_456 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_456);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#DescribeSnapshotAttributeOutput$SnapshotId */ =>  {
                let var_457 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_457);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_snapshots(
    inp: &[u8],
    mut builder: crate::output::describe_snapshots_output::Builder,
) -> Result<crate::output::describe_snapshots_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSnapshotsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSnapshotsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotSet") /* Snapshots com.amazonaws.ec2.synthetic#DescribeSnapshotsOutput$Snapshots */ =>  {
                let var_458 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshots(var_458);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSnapshotsOutput$NextToken */ =>  {
                let var_459 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_459);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_snapshot_tier_status(
    inp: &[u8],
    mut builder: crate::output::describe_snapshot_tier_status_output::Builder,
) -> Result<
    crate::output::describe_snapshot_tier_status_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSnapshotTierStatusResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSnapshotTierStatusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotTierStatusSet") /* SnapshotTierStatuses com.amazonaws.ec2.synthetic#DescribeSnapshotTierStatusOutput$SnapshotTierStatuses */ =>  {
                let var_460 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_tier_status_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_tier_statuses(var_460);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSnapshotTierStatusOutput$NextToken */ =>  {
                let var_461 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_461);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_datafeed_subscription(
    inp: &[u8],
    mut builder: crate::output::describe_spot_datafeed_subscription_output::Builder,
) -> Result<
    crate::output::describe_spot_datafeed_subscription_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotDatafeedSubscriptionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotDatafeedSubscriptionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotDatafeedSubscription") /* SpotDatafeedSubscription com.amazonaws.ec2.synthetic#DescribeSpotDatafeedSubscriptionOutput$SpotDatafeedSubscription */ =>  {
                let var_462 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_datafeed_subscription(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_datafeed_subscription(var_462);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_fleet_instances(
    inp: &[u8],
    mut builder: crate::output::describe_spot_fleet_instances_output::Builder,
) -> Result<
    crate::output::describe_spot_fleet_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotFleetInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotFleetInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("activeInstanceSet") /* ActiveInstances com.amazonaws.ec2.synthetic#DescribeSpotFleetInstancesOutput$ActiveInstances */ =>  {
                let var_463 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_active_instance_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_active_instances(var_463);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSpotFleetInstancesOutput$NextToken */ =>  {
                let var_464 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_464);
            }
            ,
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2.synthetic#DescribeSpotFleetInstancesOutput$SpotFleetRequestId */ =>  {
                let var_465 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_465);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_fleet_request_history(
    inp: &[u8],
    mut builder: crate::output::describe_spot_fleet_request_history_output::Builder,
) -> Result<
    crate::output::describe_spot_fleet_request_history_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotFleetRequestHistoryResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotFleetRequestHistoryResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("historyRecordSet") /* HistoryRecords com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestHistoryOutput$HistoryRecords */ =>  {
                let var_466 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_history_records(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_history_records(var_466);
            }
            ,
            s if s.matches("lastEvaluatedTime") /* LastEvaluatedTime com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestHistoryOutput$LastEvaluatedTime */ =>  {
                let var_467 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_evaluated_time(var_467);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestHistoryOutput$NextToken */ =>  {
                let var_468 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_468);
            }
            ,
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestHistoryOutput$SpotFleetRequestId */ =>  {
                let var_469 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_469);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestHistoryOutput$StartTime */ =>  {
                let var_470 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_470);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_fleet_requests(
    inp: &[u8],
    mut builder: crate::output::describe_spot_fleet_requests_output::Builder,
) -> Result<
    crate::output::describe_spot_fleet_requests_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotFleetRequestsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotFleetRequestsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestsOutput$NextToken */ =>  {
                let var_471 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_471);
            }
            ,
            s if s.matches("spotFleetRequestConfigSet") /* SpotFleetRequestConfigs com.amazonaws.ec2.synthetic#DescribeSpotFleetRequestsOutput$SpotFleetRequestConfigs */ =>  {
                let var_472 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_fleet_request_config_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_configs(var_472);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_instance_requests(
    inp: &[u8],
    mut builder: crate::output::describe_spot_instance_requests_output::Builder,
) -> Result<
    crate::output::describe_spot_instance_requests_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotInstanceRequestsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotInstanceRequestsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotInstanceRequestSet") /* SpotInstanceRequests com.amazonaws.ec2.synthetic#DescribeSpotInstanceRequestsOutput$SpotInstanceRequests */ =>  {
                let var_473 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_instance_request_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_instance_requests(var_473);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSpotInstanceRequestsOutput$NextToken */ =>  {
                let var_474 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_474);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_spot_price_history(
    inp: &[u8],
    mut builder: crate::output::describe_spot_price_history_output::Builder,
) -> Result<
    crate::output::describe_spot_price_history_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSpotPriceHistoryResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSpotPriceHistoryResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSpotPriceHistoryOutput$NextToken */ =>  {
                let var_475 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_475);
            }
            ,
            s if s.matches("spotPriceHistorySet") /* SpotPriceHistory com.amazonaws.ec2.synthetic#DescribeSpotPriceHistoryOutput$SpotPriceHistory */ =>  {
                let var_476 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_price_history_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_price_history(var_476);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_stale_security_groups(
    inp: &[u8],
    mut builder: crate::output::describe_stale_security_groups_output::Builder,
) -> Result<
    crate::output::describe_stale_security_groups_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStaleSecurityGroupsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStaleSecurityGroupsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeStaleSecurityGroupsOutput$NextToken */ =>  {
                let var_477 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_477);
            }
            ,
            s if s.matches("staleSecurityGroupSet") /* StaleSecurityGroupSet com.amazonaws.ec2.synthetic#DescribeStaleSecurityGroupsOutput$StaleSecurityGroupSet */ =>  {
                let var_478 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_stale_security_group_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stale_security_group_set(var_478);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_store_image_tasks(
    inp: &[u8],
    mut builder: crate::output::describe_store_image_tasks_output::Builder,
) -> Result<
    crate::output::describe_store_image_tasks_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeStoreImageTasksResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeStoreImageTasksResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("storeImageTaskResultSet") /* StoreImageTaskResults com.amazonaws.ec2.synthetic#DescribeStoreImageTasksOutput$StoreImageTaskResults */ =>  {
                let var_479 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_store_image_task_result_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_store_image_task_results(var_479);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeStoreImageTasksOutput$NextToken */ =>  {
                let var_480 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_480);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_subnets(
    inp: &[u8],
    mut builder: crate::output::describe_subnets_output::Builder,
) -> Result<crate::output::describe_subnets_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeSubnetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeSubnetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnetSet") /* Subnets com.amazonaws.ec2.synthetic#DescribeSubnetsOutput$Subnets */ =>  {
                let var_481 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_subnet_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnets(var_481);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeSubnetsOutput$NextToken */ =>  {
                let var_482 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_482);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_tags(
    inp: &[u8],
    mut builder: crate::output::describe_tags_output::Builder,
) -> Result<crate::output::describe_tags_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTagsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTagsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTagsOutput$NextToken */ =>  {
                let var_483 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_483);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#DescribeTagsOutput$Tags */ =>  {
                let var_484 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_description_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_484);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_traffic_mirror_filters(
    inp: &[u8],
    mut builder: crate::output::describe_traffic_mirror_filters_output::Builder,
) -> Result<
    crate::output::describe_traffic_mirror_filters_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTrafficMirrorFiltersResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTrafficMirrorFiltersResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterSet") /* TrafficMirrorFilters com.amazonaws.ec2.synthetic#DescribeTrafficMirrorFiltersOutput$TrafficMirrorFilters */ =>  {
                let var_485 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_filter_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filters(var_485);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTrafficMirrorFiltersOutput$NextToken */ =>  {
                let var_486 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_486);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_traffic_mirror_sessions(
    inp: &[u8],
    mut builder: crate::output::describe_traffic_mirror_sessions_output::Builder,
) -> Result<
    crate::output::describe_traffic_mirror_sessions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTrafficMirrorSessionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTrafficMirrorSessionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorSessionSet") /* TrafficMirrorSessions com.amazonaws.ec2.synthetic#DescribeTrafficMirrorSessionsOutput$TrafficMirrorSessions */ =>  {
                let var_487 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_session_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_sessions(var_487);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTrafficMirrorSessionsOutput$NextToken */ =>  {
                let var_488 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_488);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_traffic_mirror_targets(
    inp: &[u8],
    mut builder: crate::output::describe_traffic_mirror_targets_output::Builder,
) -> Result<
    crate::output::describe_traffic_mirror_targets_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTrafficMirrorTargetsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTrafficMirrorTargetsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorTargetSet") /* TrafficMirrorTargets com.amazonaws.ec2.synthetic#DescribeTrafficMirrorTargetsOutput$TrafficMirrorTargets */ =>  {
                let var_489 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_target_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_targets(var_489);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTrafficMirrorTargetsOutput$NextToken */ =>  {
                let var_490 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_490);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_attachments(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_attachments_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_attachments_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayAttachmentsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayAttachmentsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachments") /* TransitGatewayAttachments com.amazonaws.ec2.synthetic#DescribeTransitGatewayAttachmentsOutput$TransitGatewayAttachments */ =>  {
                let var_491 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachments(var_491);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayAttachmentsOutput$NextToken */ =>  {
                let var_492 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_492);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_connect_peers(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_connect_peers_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_connect_peers_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayConnectPeersResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayConnectPeersResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnectPeerSet") /* TransitGatewayConnectPeers com.amazonaws.ec2.synthetic#DescribeTransitGatewayConnectPeersOutput$TransitGatewayConnectPeers */ =>  {
                let var_493 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_connect_peer_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect_peers(var_493);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayConnectPeersOutput$NextToken */ =>  {
                let var_494 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_494);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_connects(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_connects_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_connects_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayConnectsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayConnectsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayConnectSet") /* TransitGatewayConnects com.amazonaws.ec2.synthetic#DescribeTransitGatewayConnectsOutput$TransitGatewayConnects */ =>  {
                let var_495 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_connect_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connects(var_495);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayConnectsOutput$NextToken */ =>  {
                let var_496 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_496);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_multicast_domains(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_multicast_domains_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_multicast_domains_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayMulticastDomainsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayMulticastDomainsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomains") /* TransitGatewayMulticastDomains com.amazonaws.ec2.synthetic#DescribeTransitGatewayMulticastDomainsOutput$TransitGatewayMulticastDomains */ =>  {
                let var_497 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_multicast_domain_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domains(var_497);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayMulticastDomainsOutput$NextToken */ =>  {
                let var_498 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_498);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_peering_attachments(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_peering_attachments_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_peering_attachments_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayPeeringAttachmentsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayPeeringAttachmentsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPeeringAttachments") /* TransitGatewayPeeringAttachments com.amazonaws.ec2.synthetic#DescribeTransitGatewayPeeringAttachmentsOutput$TransitGatewayPeeringAttachments */ =>  {
                let var_499 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_peering_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_peering_attachments(var_499);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayPeeringAttachmentsOutput$NextToken */ =>  {
                let var_500 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_500);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_route_tables(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_route_tables_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_route_tables_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayRouteTablesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayRouteTablesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTables") /* TransitGatewayRouteTables com.amazonaws.ec2.synthetic#DescribeTransitGatewayRouteTablesOutput$TransitGatewayRouteTables */ =>  {
                let var_501 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_route_table_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_tables(var_501);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayRouteTablesOutput$NextToken */ =>  {
                let var_502 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_502);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateways_output::Builder,
) -> Result<
    crate::output::describe_transit_gateways_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewaySet") /* TransitGateways com.amazonaws.ec2.synthetic#DescribeTransitGatewaysOutput$TransitGateways */ =>  {
                let var_503 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateways(var_503);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewaysOutput$NextToken */ =>  {
                let var_504 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_504);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    inp: &[u8],
    mut builder: crate::output::describe_transit_gateway_vpc_attachments_output::Builder,
) -> Result<
    crate::output::describe_transit_gateway_vpc_attachments_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTransitGatewayVpcAttachmentsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTransitGatewayVpcAttachmentsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachments") /* TransitGatewayVpcAttachments com.amazonaws.ec2.synthetic#DescribeTransitGatewayVpcAttachmentsOutput$TransitGatewayVpcAttachments */ =>  {
                let var_505 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_vpc_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachments(var_505);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTransitGatewayVpcAttachmentsOutput$NextToken */ =>  {
                let var_506 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_506);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_trunk_interface_associations(
    inp: &[u8],
    mut builder: crate::output::describe_trunk_interface_associations_output::Builder,
) -> Result<
    crate::output::describe_trunk_interface_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeTrunkInterfaceAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeTrunkInterfaceAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("interfaceAssociationSet") /* InterfaceAssociations com.amazonaws.ec2.synthetic#DescribeTrunkInterfaceAssociationsOutput$InterfaceAssociations */ =>  {
                let var_507 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_trunk_interface_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_interface_associations(var_507);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeTrunkInterfaceAssociationsOutput$NextToken */ =>  {
                let var_508 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_508);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_volume_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_volume_attribute_output::Builder,
) -> Result<
    crate::output::describe_volume_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVolumeAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVolumeAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("autoEnableIO") /* AutoEnableIO com.amazonaws.ec2.synthetic#DescribeVolumeAttributeOutput$AutoEnableIO */ =>  {
                let var_509 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_auto_enable_io(var_509);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2.synthetic#DescribeVolumeAttributeOutput$ProductCodes */ =>  {
                let var_510 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_510);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#DescribeVolumeAttributeOutput$VolumeId */ =>  {
                let var_511 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_511);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_volumes(
    inp: &[u8],
    mut builder: crate::output::describe_volumes_output::Builder,
) -> Result<crate::output::describe_volumes_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVolumesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVolumesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("volumeSet") /* Volumes com.amazonaws.ec2.synthetic#DescribeVolumesOutput$Volumes */ =>  {
                let var_512 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volumes(var_512);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVolumesOutput$NextToken */ =>  {
                let var_513 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_513);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_volumes_modifications(
    inp: &[u8],
    mut builder: crate::output::describe_volumes_modifications_output::Builder,
) -> Result<
    crate::output::describe_volumes_modifications_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVolumesModificationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVolumesModificationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("volumeModificationSet") /* VolumesModifications com.amazonaws.ec2.synthetic#DescribeVolumesModificationsOutput$VolumesModifications */ =>  {
                let var_514 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_modification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volumes_modifications(var_514);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVolumesModificationsOutput$NextToken */ =>  {
                let var_515 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_515);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_volume_status(
    inp: &[u8],
    mut builder: crate::output::describe_volume_status_output::Builder,
) -> Result<crate::output::describe_volume_status_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVolumeStatusResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVolumeStatusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVolumeStatusOutput$NextToken */ =>  {
                let var_516 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_516);
            }
            ,
            s if s.matches("volumeStatusSet") /* VolumeStatuses com.amazonaws.ec2.synthetic#DescribeVolumeStatusOutput$VolumeStatuses */ =>  {
                let var_517 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_status_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volume_statuses(var_517);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_attribute(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_attribute_output::Builder,
) -> Result<crate::output::describe_vpc_attribute_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2.synthetic#DescribeVpcAttributeOutput$VpcId */ =>  {
                let var_518 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_518);
            }
            ,
            s if s.matches("enableDnsHostnames") /* EnableDnsHostnames com.amazonaws.ec2.synthetic#DescribeVpcAttributeOutput$EnableDnsHostnames */ =>  {
                let var_519 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enable_dns_hostnames(var_519);
            }
            ,
            s if s.matches("enableDnsSupport") /* EnableDnsSupport com.amazonaws.ec2.synthetic#DescribeVpcAttributeOutput$EnableDnsSupport */ =>  {
                let var_520 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_attribute_boolean_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enable_dns_support(var_520);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_classic_link(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_classic_link_output::Builder,
) -> Result<
    crate::output::describe_vpc_classic_link_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcClassicLinkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcClassicLinkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcSet") /* Vpcs com.amazonaws.ec2.synthetic#DescribeVpcClassicLinkOutput$Vpcs */ =>  {
                let var_521 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_classic_link_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpcs(var_521);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_classic_link_dns_support(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_classic_link_dns_support_output::Builder,
) -> Result<
    crate::output::describe_vpc_classic_link_dns_support_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcClassicLinkDnsSupportResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcClassicLinkDnsSupportResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcClassicLinkDnsSupportOutput$NextToken */ =>  {
                let var_522 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_522);
            }
            ,
            s if s.matches("vpcs") /* Vpcs com.amazonaws.ec2.synthetic#DescribeVpcClassicLinkDnsSupportOutput$Vpcs */ =>  {
                let var_523 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_classic_link_dns_support_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpcs(var_523);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoint_connection_notifications_output::Builder,
) -> Result<
    crate::output::describe_vpc_endpoint_connection_notifications_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointConnectionNotificationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointConnectionNotificationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("connectionNotificationSet") /* ConnectionNotificationSet com.amazonaws.ec2.synthetic#DescribeVpcEndpointConnectionNotificationsOutput$ConnectionNotificationSet */ =>  {
                let var_524 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_connection_notification_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_notification_set(var_524);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointConnectionNotificationsOutput$NextToken */ =>  {
                let var_525 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_525);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoint_connections(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoint_connections_output::Builder,
) -> Result<
    crate::output::describe_vpc_endpoint_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcEndpointConnectionSet") /* VpcEndpointConnections com.amazonaws.ec2.synthetic#DescribeVpcEndpointConnectionsOutput$VpcEndpointConnections */ =>  {
                let var_526 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_endpoint_connection_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_connections(var_526);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointConnectionsOutput$NextToken */ =>  {
                let var_527 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_527);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoints(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoints_output::Builder,
) -> Result<crate::output::describe_vpc_endpoints_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcEndpointSet") /* VpcEndpoints com.amazonaws.ec2.synthetic#DescribeVpcEndpointsOutput$VpcEndpoints */ =>  {
                let var_528 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_endpoint_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoints(var_528);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointsOutput$NextToken */ =>  {
                let var_529 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_529);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoint_service_configurations_output::Builder,
) -> Result<
    crate::output::describe_vpc_endpoint_service_configurations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointServiceConfigurationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointServiceConfigurationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceConfigurationSet") /* ServiceConfigurations com.amazonaws.ec2.synthetic#DescribeVpcEndpointServiceConfigurationsOutput$ServiceConfigurations */ =>  {
                let var_530 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_service_configuration_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_configurations(var_530);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointServiceConfigurationsOutput$NextToken */ =>  {
                let var_531 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_531);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoint_service_permissions_output::Builder,
) -> Result<
    crate::output::describe_vpc_endpoint_service_permissions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointServicePermissionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointServicePermissionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allowedPrincipals") /* AllowedPrincipals com.amazonaws.ec2.synthetic#DescribeVpcEndpointServicePermissionsOutput$AllowedPrincipals */ =>  {
                let var_532 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_allowed_principal_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_allowed_principals(var_532);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointServicePermissionsOutput$NextToken */ =>  {
                let var_533 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_533);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_endpoint_services(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_endpoint_services_output::Builder,
) -> Result<
    crate::output::describe_vpc_endpoint_services_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcEndpointServicesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcEndpointServicesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceNameSet") /* ServiceNames com.amazonaws.ec2.synthetic#DescribeVpcEndpointServicesOutput$ServiceNames */ =>  {
                let var_534 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_names(var_534);
            }
            ,
            s if s.matches("serviceDetailSet") /* ServiceDetails com.amazonaws.ec2.synthetic#DescribeVpcEndpointServicesOutput$ServiceDetails */ =>  {
                let var_535 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_service_detail_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_details(var_535);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcEndpointServicesOutput$NextToken */ =>  {
                let var_536 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_536);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpc_peering_connections(
    inp: &[u8],
    mut builder: crate::output::describe_vpc_peering_connections_output::Builder,
) -> Result<
    crate::output::describe_vpc_peering_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcPeeringConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcPeeringConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcPeeringConnectionSet") /* VpcPeeringConnections com.amazonaws.ec2.synthetic#DescribeVpcPeeringConnectionsOutput$VpcPeeringConnections */ =>  {
                let var_537 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_peering_connection_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connections(var_537);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcPeeringConnectionsOutput$NextToken */ =>  {
                let var_538 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_538);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpcs(
    inp: &[u8],
    mut builder: crate::output::describe_vpcs_output::Builder,
) -> Result<crate::output::describe_vpcs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpcsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpcsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcSet") /* Vpcs com.amazonaws.ec2.synthetic#DescribeVpcsOutput$Vpcs */ =>  {
                let var_539 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpcs(var_539);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#DescribeVpcsOutput$NextToken */ =>  {
                let var_540 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_540);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpn_connections(
    inp: &[u8],
    mut builder: crate::output::describe_vpn_connections_output::Builder,
) -> Result<crate::output::describe_vpn_connections_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpnConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpnConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnectionSet") /* VpnConnections com.amazonaws.ec2.synthetic#DescribeVpnConnectionsOutput$VpnConnections */ =>  {
                let var_541 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpn_connection_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connections(var_541);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_describe_vpn_gateways(
    inp: &[u8],
    mut builder: crate::output::describe_vpn_gateways_output::Builder,
) -> Result<crate::output::describe_vpn_gateways_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeVpnGatewaysResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DescribeVpnGatewaysResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnGatewaySet") /* VpnGateways com.amazonaws.ec2.synthetic#DescribeVpnGatewaysOutput$VpnGateways */ =>  {
                let var_542 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpn_gateway_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_gateways(var_542);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_detach_classic_link_vpc(
    inp: &[u8],
    mut builder: crate::output::detach_classic_link_vpc_output::Builder,
) -> Result<crate::output::detach_classic_link_vpc_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DetachClassicLinkVpcResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DetachClassicLinkVpcResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DetachClassicLinkVpcOutput$Return */ =>  {
                let var_543 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_543);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_detach_volume(
    inp: &[u8],
    mut builder: crate::output::detach_volume_output::Builder,
) -> Result<crate::output::detach_volume_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DetachVolumeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DetachVolumeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2.synthetic#DetachVolumeOutput$AttachTime */ =>  {
                let var_544 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_544);
            }
            ,
            s if s.matches("device") /* Device com.amazonaws.ec2.synthetic#DetachVolumeOutput$Device */ =>  {
                let var_545 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device(var_545);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#DetachVolumeOutput$InstanceId */ =>  {
                let var_546 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_546);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2.synthetic#DetachVolumeOutput$State */ =>  {
                let var_547 =
                    Some(
                        Result::<crate::model::VolumeAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_547);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#DetachVolumeOutput$VolumeId */ =>  {
                let var_548 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_548);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2.synthetic#DetachVolumeOutput$DeleteOnTermination */ =>  {
                let var_549 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_549);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_ebs_encryption_by_default(
    inp: &[u8],
    mut builder: crate::output::disable_ebs_encryption_by_default_output::Builder,
) -> Result<
    crate::output::disable_ebs_encryption_by_default_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableEbsEncryptionByDefaultResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableEbsEncryptionByDefaultResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ebsEncryptionByDefault") /* EbsEncryptionByDefault com.amazonaws.ec2.synthetic#DisableEbsEncryptionByDefaultOutput$EbsEncryptionByDefault */ =>  {
                let var_550 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_encryption_by_default(var_550);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_fast_launch(
    inp: &[u8],
    mut builder: crate::output::disable_fast_launch_output::Builder,
) -> Result<crate::output::disable_fast_launch_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableFastLaunchResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableFastLaunchResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$ImageId */ =>  {
                let var_551 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_551);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$ResourceType */ =>  {
                let var_552 =
                    Some(
                        Result::<crate::model::FastLaunchResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_552);
            }
            ,
            s if s.matches("snapshotConfiguration") /* SnapshotConfiguration com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$SnapshotConfiguration */ =>  {
                let var_553 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_snapshot_configuration_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_configuration(var_553);
            }
            ,
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$LaunchTemplate */ =>  {
                let var_554 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_launch_template_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_554);
            }
            ,
            s if s.matches("maxParallelLaunches") /* MaxParallelLaunches com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$MaxParallelLaunches */ =>  {
                let var_555 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_parallel_launches(var_555);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$OwnerId */ =>  {
                let var_556 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_556);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$State */ =>  {
                let var_557 =
                    Some(
                        Result::<crate::model::FastLaunchStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_557);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$StateTransitionReason */ =>  {
                let var_558 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_558);
            }
            ,
            s if s.matches("stateTransitionTime") /* StateTransitionTime com.amazonaws.ec2.synthetic#DisableFastLaunchOutput$StateTransitionTime */ =>  {
                let var_559 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_state_transition_time(var_559);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_fast_snapshot_restores(
    inp: &[u8],
    mut builder: crate::output::disable_fast_snapshot_restores_output::Builder,
) -> Result<
    crate::output::disable_fast_snapshot_restores_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableFastSnapshotRestoresResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableFastSnapshotRestoresResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successful") /* Successful com.amazonaws.ec2.synthetic#DisableFastSnapshotRestoresOutput$Successful */ =>  {
                let var_560 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful(var_560);
            }
            ,
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#DisableFastSnapshotRestoresOutput$Unsuccessful */ =>  {
                let var_561 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_561);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_image_deprecation(
    inp: &[u8],
    mut builder: crate::output::disable_image_deprecation_output::Builder,
) -> Result<
    crate::output::disable_image_deprecation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableImageDeprecationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableImageDeprecationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DisableImageDeprecationOutput$Return */ =>  {
                let var_562 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_562);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_ipam_organization_admin_account(
    inp: &[u8],
    mut builder: crate::output::disable_ipam_organization_admin_account_output::Builder,
) -> Result<
    crate::output::disable_ipam_organization_admin_account_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableIpamOrganizationAdminAccountResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableIpamOrganizationAdminAccountResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("success") /* Success com.amazonaws.ec2.synthetic#DisableIpamOrganizationAdminAccountOutput$Success */ =>  {
                let var_563 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_success(var_563);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_serial_console_access(
    inp: &[u8],
    mut builder: crate::output::disable_serial_console_access_output::Builder,
) -> Result<
    crate::output::disable_serial_console_access_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableSerialConsoleAccessResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableSerialConsoleAccessResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serialConsoleAccessEnabled") /* SerialConsoleAccessEnabled com.amazonaws.ec2.synthetic#DisableSerialConsoleAccessOutput$SerialConsoleAccessEnabled */ =>  {
                let var_564 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_serial_console_access_enabled(var_564);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    inp: &[u8],
    mut builder: crate::output::disable_transit_gateway_route_table_propagation_output::Builder,
) -> Result<
    crate::output::disable_transit_gateway_route_table_propagation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableTransitGatewayRouteTablePropagationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableTransitGatewayRouteTablePropagationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("propagation") /* Propagation com.amazonaws.ec2.synthetic#DisableTransitGatewayRouteTablePropagationOutput$Propagation */ =>  {
                let var_565 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_propagation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_propagation(var_565);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_vpc_classic_link(
    inp: &[u8],
    mut builder: crate::output::disable_vpc_classic_link_output::Builder,
) -> Result<crate::output::disable_vpc_classic_link_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableVpcClassicLinkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableVpcClassicLinkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DisableVpcClassicLinkOutput$Return */ =>  {
                let var_566 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_566);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disable_vpc_classic_link_dns_support(
    inp: &[u8],
    mut builder: crate::output::disable_vpc_classic_link_dns_support_output::Builder,
) -> Result<
    crate::output::disable_vpc_classic_link_dns_support_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisableVpcClassicLinkDnsSupportResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisableVpcClassicLinkDnsSupportResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DisableVpcClassicLinkDnsSupportOutput$Return */ =>  {
                let var_567 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_567);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_client_vpn_target_network(
    inp: &[u8],
    mut builder: crate::output::disassociate_client_vpn_target_network_output::Builder,
) -> Result<
    crate::output::disassociate_client_vpn_target_network_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateClientVpnTargetNetworkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateClientVpnTargetNetworkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2.synthetic#DisassociateClientVpnTargetNetworkOutput$AssociationId */ =>  {
                let var_568 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_568);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#DisassociateClientVpnTargetNetworkOutput$Status */ =>  {
                let var_569 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_association_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_569);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    inp: &[u8],
    mut builder: crate::output::disassociate_enclave_certificate_iam_role_output::Builder,
) -> Result<
    crate::output::disassociate_enclave_certificate_iam_role_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateEnclaveCertificateIamRoleResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateEnclaveCertificateIamRoleResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DisassociateEnclaveCertificateIamRoleOutput$Return */ =>  {
                let var_570 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_570);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_iam_instance_profile(
    inp: &[u8],
    mut builder: crate::output::disassociate_iam_instance_profile_output::Builder,
) -> Result<
    crate::output::disassociate_iam_instance_profile_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateIamInstanceProfileResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateIamInstanceProfileResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("iamInstanceProfileAssociation") /* IamInstanceProfileAssociation com.amazonaws.ec2.synthetic#DisassociateIamInstanceProfileOutput$IamInstanceProfileAssociation */ =>  {
                let var_571 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile_association(var_571);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_instance_event_window(
    inp: &[u8],
    mut builder: crate::output::disassociate_instance_event_window_output::Builder,
) -> Result<
    crate::output::disassociate_instance_event_window_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateInstanceEventWindowResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateInstanceEventWindowResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindow") /* InstanceEventWindow com.amazonaws.ec2.synthetic#DisassociateInstanceEventWindowOutput$InstanceEventWindow */ =>  {
                let var_572 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_window(var_572);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_subnet_cidr_block(
    inp: &[u8],
    mut builder: crate::output::disassociate_subnet_cidr_block_output::Builder,
) -> Result<
    crate::output::disassociate_subnet_cidr_block_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateSubnetCidrBlockResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateSubnetCidrBlockResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrBlockAssociation") /* Ipv6CidrBlockAssociation com.amazonaws.ec2.synthetic#DisassociateSubnetCidrBlockOutput$Ipv6CidrBlockAssociation */ =>  {
                let var_573 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_ipv6_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association(var_573);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2.synthetic#DisassociateSubnetCidrBlockOutput$SubnetId */ =>  {
                let var_574 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_574);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    inp: &[u8],
    mut builder: crate::output::disassociate_transit_gateway_multicast_domain_output::Builder,
) -> Result<
    crate::output::disassociate_transit_gateway_multicast_domain_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateTransitGatewayMulticastDomainResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateTransitGatewayMulticastDomainResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associations") /* Associations com.amazonaws.ec2.synthetic#DisassociateTransitGatewayMulticastDomainOutput$Associations */ =>  {
                let var_575 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_associations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_575);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_transit_gateway_route_table(
    inp: &[u8],
    mut builder: crate::output::disassociate_transit_gateway_route_table_output::Builder,
) -> Result<
    crate::output::disassociate_transit_gateway_route_table_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateTransitGatewayRouteTableResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateTransitGatewayRouteTableResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2.synthetic#DisassociateTransitGatewayRouteTableOutput$Association */ =>  {
                let var_576 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_576);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_trunk_interface(
    inp: &[u8],
    mut builder: crate::output::disassociate_trunk_interface_output::Builder,
) -> Result<
    crate::output::disassociate_trunk_interface_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateTrunkInterfaceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateTrunkInterfaceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#DisassociateTrunkInterfaceOutput$Return */ =>  {
                let var_577 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_577);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#DisassociateTrunkInterfaceOutput$ClientToken */ =>  {
                let var_578 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_578);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_disassociate_vpc_cidr_block(
    inp: &[u8],
    mut builder: crate::output::disassociate_vpc_cidr_block_output::Builder,
) -> Result<
    crate::output::disassociate_vpc_cidr_block_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DisassociateVpcCidrBlockResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DisassociateVpcCidrBlockResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrBlockAssociation") /* Ipv6CidrBlockAssociation com.amazonaws.ec2.synthetic#DisassociateVpcCidrBlockOutput$Ipv6CidrBlockAssociation */ =>  {
                let var_579 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_ipv6_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association(var_579);
            }
            ,
            s if s.matches("cidrBlockAssociation") /* CidrBlockAssociation com.amazonaws.ec2.synthetic#DisassociateVpcCidrBlockOutput$CidrBlockAssociation */ =>  {
                let var_580 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_cidr_block_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_association(var_580);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2.synthetic#DisassociateVpcCidrBlockOutput$VpcId */ =>  {
                let var_581 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_581);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_ebs_encryption_by_default(
    inp: &[u8],
    mut builder: crate::output::enable_ebs_encryption_by_default_output::Builder,
) -> Result<
    crate::output::enable_ebs_encryption_by_default_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableEbsEncryptionByDefaultResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableEbsEncryptionByDefaultResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ebsEncryptionByDefault") /* EbsEncryptionByDefault com.amazonaws.ec2.synthetic#EnableEbsEncryptionByDefaultOutput$EbsEncryptionByDefault */ =>  {
                let var_582 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_encryption_by_default(var_582);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_fast_launch(
    inp: &[u8],
    mut builder: crate::output::enable_fast_launch_output::Builder,
) -> Result<crate::output::enable_fast_launch_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableFastLaunchResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableFastLaunchResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$ImageId */ =>  {
                let var_583 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_583);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$ResourceType */ =>  {
                let var_584 =
                    Some(
                        Result::<crate::model::FastLaunchResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_584);
            }
            ,
            s if s.matches("snapshotConfiguration") /* SnapshotConfiguration com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$SnapshotConfiguration */ =>  {
                let var_585 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_snapshot_configuration_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_configuration(var_585);
            }
            ,
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$LaunchTemplate */ =>  {
                let var_586 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_launch_template_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_586);
            }
            ,
            s if s.matches("maxParallelLaunches") /* MaxParallelLaunches com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$MaxParallelLaunches */ =>  {
                let var_587 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_parallel_launches(var_587);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$OwnerId */ =>  {
                let var_588 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_588);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$State */ =>  {
                let var_589 =
                    Some(
                        Result::<crate::model::FastLaunchStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_589);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$StateTransitionReason */ =>  {
                let var_590 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_590);
            }
            ,
            s if s.matches("stateTransitionTime") /* StateTransitionTime com.amazonaws.ec2.synthetic#EnableFastLaunchOutput$StateTransitionTime */ =>  {
                let var_591 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_state_transition_time(var_591);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_fast_snapshot_restores(
    inp: &[u8],
    mut builder: crate::output::enable_fast_snapshot_restores_output::Builder,
) -> Result<
    crate::output::enable_fast_snapshot_restores_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableFastSnapshotRestoresResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableFastSnapshotRestoresResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successful") /* Successful com.amazonaws.ec2.synthetic#EnableFastSnapshotRestoresOutput$Successful */ =>  {
                let var_592 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_success_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful(var_592);
            }
            ,
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#EnableFastSnapshotRestoresOutput$Unsuccessful */ =>  {
                let var_593 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_593);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_image_deprecation(
    inp: &[u8],
    mut builder: crate::output::enable_image_deprecation_output::Builder,
) -> Result<crate::output::enable_image_deprecation_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableImageDeprecationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableImageDeprecationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#EnableImageDeprecationOutput$Return */ =>  {
                let var_594 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_594);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_ipam_organization_admin_account(
    inp: &[u8],
    mut builder: crate::output::enable_ipam_organization_admin_account_output::Builder,
) -> Result<
    crate::output::enable_ipam_organization_admin_account_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableIpamOrganizationAdminAccountResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableIpamOrganizationAdminAccountResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("success") /* Success com.amazonaws.ec2.synthetic#EnableIpamOrganizationAdminAccountOutput$Success */ =>  {
                let var_595 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_success(var_595);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_serial_console_access(
    inp: &[u8],
    mut builder: crate::output::enable_serial_console_access_output::Builder,
) -> Result<
    crate::output::enable_serial_console_access_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableSerialConsoleAccessResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableSerialConsoleAccessResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serialConsoleAccessEnabled") /* SerialConsoleAccessEnabled com.amazonaws.ec2.synthetic#EnableSerialConsoleAccessOutput$SerialConsoleAccessEnabled */ =>  {
                let var_596 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_serial_console_access_enabled(var_596);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    inp: &[u8],
    mut builder: crate::output::enable_transit_gateway_route_table_propagation_output::Builder,
) -> Result<
    crate::output::enable_transit_gateway_route_table_propagation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableTransitGatewayRouteTablePropagationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableTransitGatewayRouteTablePropagationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("propagation") /* Propagation com.amazonaws.ec2.synthetic#EnableTransitGatewayRouteTablePropagationOutput$Propagation */ =>  {
                let var_597 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_propagation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_propagation(var_597);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_vpc_classic_link(
    inp: &[u8],
    mut builder: crate::output::enable_vpc_classic_link_output::Builder,
) -> Result<crate::output::enable_vpc_classic_link_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableVpcClassicLinkResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableVpcClassicLinkResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#EnableVpcClassicLinkOutput$Return */ =>  {
                let var_598 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_598);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_enable_vpc_classic_link_dns_support(
    inp: &[u8],
    mut builder: crate::output::enable_vpc_classic_link_dns_support_output::Builder,
) -> Result<
    crate::output::enable_vpc_classic_link_dns_support_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("EnableVpcClassicLinkDnsSupportResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected EnableVpcClassicLinkDnsSupportResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#EnableVpcClassicLinkDnsSupportOutput$Return */ =>  {
                let var_599 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_599);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    inp: &[u8],
    mut builder: crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder,
) -> Result<
    crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ExportClientVpnClientCertificateRevocationListResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected ExportClientVpnClientCertificateRevocationListResponse got {:?}", start_el)));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("certificateRevocationList") /* CertificateRevocationList com.amazonaws.ec2.synthetic#ExportClientVpnClientCertificateRevocationListOutput$CertificateRevocationList */ =>  {
                let var_600 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_revocation_list(var_600);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#ExportClientVpnClientCertificateRevocationListOutput$Status */ =>  {
                let var_601 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_certificate_revocation_list_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_601);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_export_client_vpn_client_configuration(
    inp: &[u8],
    mut builder: crate::output::export_client_vpn_client_configuration_output::Builder,
) -> Result<
    crate::output::export_client_vpn_client_configuration_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ExportClientVpnClientConfigurationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ExportClientVpnClientConfigurationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientConfiguration") /* ClientConfiguration com.amazonaws.ec2.synthetic#ExportClientVpnClientConfigurationOutput$ClientConfiguration */ =>  {
                let var_602 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_configuration(var_602);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_export_image(
    inp: &[u8],
    mut builder: crate::output::export_image_output::Builder,
) -> Result<crate::output::export_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ExportImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ExportImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#ExportImageOutput$Description */ =>  {
                let var_603 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_603);
            }
            ,
            s if s.matches("diskImageFormat") /* DiskImageFormat com.amazonaws.ec2.synthetic#ExportImageOutput$DiskImageFormat */ =>  {
                let var_604 =
                    Some(
                        Result::<crate::model::DiskImageFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DiskImageFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_disk_image_format(var_604);
            }
            ,
            s if s.matches("exportImageTaskId") /* ExportImageTaskId com.amazonaws.ec2.synthetic#ExportImageOutput$ExportImageTaskId */ =>  {
                let var_605 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_export_image_task_id(var_605);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#ExportImageOutput$ImageId */ =>  {
                let var_606 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_606);
            }
            ,
            s if s.matches("roleName") /* RoleName com.amazonaws.ec2.synthetic#ExportImageOutput$RoleName */ =>  {
                let var_607 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role_name(var_607);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2.synthetic#ExportImageOutput$Progress */ =>  {
                let var_608 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_608);
            }
            ,
            s if s.matches("s3ExportLocation") /* S3ExportLocation com.amazonaws.ec2.synthetic#ExportImageOutput$S3ExportLocation */ =>  {
                let var_609 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_export_task_s3_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3_export_location(var_609);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#ExportImageOutput$Status */ =>  {
                let var_610 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_610);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2.synthetic#ExportImageOutput$StatusMessage */ =>  {
                let var_611 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_611);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#ExportImageOutput$Tags */ =>  {
                let var_612 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_612);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_export_transit_gateway_routes(
    inp: &[u8],
    mut builder: crate::output::export_transit_gateway_routes_output::Builder,
) -> Result<
    crate::output::export_transit_gateway_routes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ExportTransitGatewayRoutesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ExportTransitGatewayRoutesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("s3Location") /* S3Location com.amazonaws.ec2.synthetic#ExportTransitGatewayRoutesOutput$S3Location */ =>  {
                let var_613 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_location(var_613);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    inp: &[u8],
    mut builder: crate::output::get_associated_enclave_certificate_iam_roles_output::Builder,
) -> Result<
    crate::output::get_associated_enclave_certificate_iam_roles_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetAssociatedEnclaveCertificateIamRolesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetAssociatedEnclaveCertificateIamRolesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associatedRoleSet") /* AssociatedRoles com.amazonaws.ec2.synthetic#GetAssociatedEnclaveCertificateIamRolesOutput$AssociatedRoles */ =>  {
                let var_614 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_associated_roles_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_roles(var_614);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    inp: &[u8],
    mut builder: crate::output::get_associated_ipv6_pool_cidrs_output::Builder,
) -> Result<
    crate::output::get_associated_ipv6_pool_cidrs_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetAssociatedIpv6PoolCidrsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetAssociatedIpv6PoolCidrsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrAssociationSet") /* Ipv6CidrAssociations com.amazonaws.ec2.synthetic#GetAssociatedIpv6PoolCidrsOutput$Ipv6CidrAssociations */ =>  {
                let var_615 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_cidr_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_associations(var_615);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetAssociatedIpv6PoolCidrsOutput$NextToken */ =>  {
                let var_616 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_616);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_capacity_reservation_usage(
    inp: &[u8],
    mut builder: crate::output::get_capacity_reservation_usage_output::Builder,
) -> Result<
    crate::output::get_capacity_reservation_usage_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetCapacityReservationUsageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetCapacityReservationUsageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$NextToken */ =>  {
                let var_617 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_617);
            }
            ,
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$CapacityReservationId */ =>  {
                let var_618 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_618);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$InstanceType */ =>  {
                let var_619 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_619);
            }
            ,
            s if s.matches("totalInstanceCount") /* TotalInstanceCount com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$TotalInstanceCount */ =>  {
                let var_620 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_instance_count(var_620);
            }
            ,
            s if s.matches("availableInstanceCount") /* AvailableInstanceCount com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$AvailableInstanceCount */ =>  {
                let var_621 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_instance_count(var_621);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$State */ =>  {
                let var_622 =
                    Some(
                        Result::<crate::model::CapacityReservationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_622);
            }
            ,
            s if s.matches("instanceUsageSet") /* InstanceUsages com.amazonaws.ec2.synthetic#GetCapacityReservationUsageOutput$InstanceUsages */ =>  {
                let var_623 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_usage_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_usages(var_623);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_coip_pool_usage(
    inp: &[u8],
    mut builder: crate::output::get_coip_pool_usage_output::Builder,
) -> Result<crate::output::get_coip_pool_usage_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetCoipPoolUsageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetCoipPoolUsageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("coipPoolId") /* CoipPoolId com.amazonaws.ec2.synthetic#GetCoipPoolUsageOutput$CoipPoolId */ =>  {
                let var_624 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_coip_pool_id(var_624);
            }
            ,
            s if s.matches("coipAddressUsageSet") /* CoipAddressUsages com.amazonaws.ec2.synthetic#GetCoipPoolUsageOutput$CoipAddressUsages */ =>  {
                let var_625 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_coip_address_usage_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_coip_address_usages(var_625);
            }
            ,
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2.synthetic#GetCoipPoolUsageOutput$LocalGatewayRouteTableId */ =>  {
                let var_626 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_626);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_console_output(
    inp: &[u8],
    mut builder: crate::output::get_console_output_output::Builder,
) -> Result<crate::output::get_console_output_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetConsoleOutputResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetConsoleOutputResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#GetConsoleOutputOutput$InstanceId */ =>  {
                let var_627 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_627);
            }
            ,
            s if s.matches("output") /* Output com.amazonaws.ec2.synthetic#GetConsoleOutputOutput$Output */ =>  {
                let var_628 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_output(var_628);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2.synthetic#GetConsoleOutputOutput$Timestamp */ =>  {
                let var_629 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_629);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_console_screenshot(
    inp: &[u8],
    mut builder: crate::output::get_console_screenshot_output::Builder,
) -> Result<crate::output::get_console_screenshot_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetConsoleScreenshotResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetConsoleScreenshotResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageData") /* ImageData com.amazonaws.ec2.synthetic#GetConsoleScreenshotOutput$ImageData */ =>  {
                let var_630 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_data(var_630);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#GetConsoleScreenshotOutput$InstanceId */ =>  {
                let var_631 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_631);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_default_credit_specification(
    inp: &[u8],
    mut builder: crate::output::get_default_credit_specification_output::Builder,
) -> Result<
    crate::output::get_default_credit_specification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetDefaultCreditSpecificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetDefaultCreditSpecificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceFamilyCreditSpecification") /* InstanceFamilyCreditSpecification com.amazonaws.ec2.synthetic#GetDefaultCreditSpecificationOutput$InstanceFamilyCreditSpecification */ =>  {
                let var_632 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_family_credit_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_family_credit_specification(var_632);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ebs_default_kms_key_id(
    inp: &[u8],
    mut builder: crate::output::get_ebs_default_kms_key_id_output::Builder,
) -> Result<
    crate::output::get_ebs_default_kms_key_id_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetEbsDefaultKmsKeyIdResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetEbsDefaultKmsKeyIdResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#GetEbsDefaultKmsKeyIdOutput$KmsKeyId */ =>  {
                let var_633 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_633);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ebs_encryption_by_default(
    inp: &[u8],
    mut builder: crate::output::get_ebs_encryption_by_default_output::Builder,
) -> Result<
    crate::output::get_ebs_encryption_by_default_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetEbsEncryptionByDefaultResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetEbsEncryptionByDefaultResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ebsEncryptionByDefault") /* EbsEncryptionByDefault com.amazonaws.ec2.synthetic#GetEbsEncryptionByDefaultOutput$EbsEncryptionByDefault */ =>  {
                let var_634 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_encryption_by_default(var_634);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_flow_logs_integration_template(
    inp: &[u8],
    mut builder: crate::output::get_flow_logs_integration_template_output::Builder,
) -> Result<
    crate::output::get_flow_logs_integration_template_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetFlowLogsIntegrationTemplateResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetFlowLogsIntegrationTemplateResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("result") /* Result com.amazonaws.ec2.synthetic#GetFlowLogsIntegrationTemplateOutput$Result */ =>  {
                let var_635 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_result(var_635);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_groups_for_capacity_reservation(
    inp: &[u8],
    mut builder: crate::output::get_groups_for_capacity_reservation_output::Builder,
) -> Result<
    crate::output::get_groups_for_capacity_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetGroupsForCapacityReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetGroupsForCapacityReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetGroupsForCapacityReservationOutput$NextToken */ =>  {
                let var_636 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_636);
            }
            ,
            s if s.matches("capacityReservationGroupSet") /* CapacityReservationGroups com.amazonaws.ec2.synthetic#GetGroupsForCapacityReservationOutput$CapacityReservationGroups */ =>  {
                let var_637 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_capacity_reservation_group_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_groups(var_637);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_host_reservation_purchase_preview(
    inp: &[u8],
    mut builder: crate::output::get_host_reservation_purchase_preview_output::Builder,
) -> Result<
    crate::output::get_host_reservation_purchase_preview_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetHostReservationPurchasePreviewResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetHostReservationPurchasePreviewResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2.synthetic#GetHostReservationPurchasePreviewOutput$CurrencyCode */ =>  {
                let var_638 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_638);
            }
            ,
            s if s.matches("purchase") /* Purchase com.amazonaws.ec2.synthetic#GetHostReservationPurchasePreviewOutput$Purchase */ =>  {
                let var_639 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_purchase_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_purchase(var_639);
            }
            ,
            s if s.matches("totalHourlyPrice") /* TotalHourlyPrice com.amazonaws.ec2.synthetic#GetHostReservationPurchasePreviewOutput$TotalHourlyPrice */ =>  {
                let var_640 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_total_hourly_price(var_640);
            }
            ,
            s if s.matches("totalUpfrontPrice") /* TotalUpfrontPrice com.amazonaws.ec2.synthetic#GetHostReservationPurchasePreviewOutput$TotalUpfrontPrice */ =>  {
                let var_641 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_total_upfront_price(var_641);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_instance_types_from_instance_requirements(
    inp: &[u8],
    mut builder: crate::output::get_instance_types_from_instance_requirements_output::Builder,
) -> Result<
    crate::output::get_instance_types_from_instance_requirements_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetInstanceTypesFromInstanceRequirementsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetInstanceTypesFromInstanceRequirementsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTypeSet") /* InstanceTypes com.amazonaws.ec2.synthetic#GetInstanceTypesFromInstanceRequirementsOutput$InstanceTypes */ =>  {
                let var_642 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_type_info_from_instance_requirements_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_types(var_642);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetInstanceTypesFromInstanceRequirementsOutput$NextToken */ =>  {
                let var_643 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_643);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ipam_address_history(
    inp: &[u8],
    mut builder: crate::output::get_ipam_address_history_output::Builder,
) -> Result<crate::output::get_ipam_address_history_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetIpamAddressHistoryResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetIpamAddressHistoryResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("historyRecordSet") /* HistoryRecords com.amazonaws.ec2.synthetic#GetIpamAddressHistoryOutput$HistoryRecords */ =>  {
                let var_644 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_address_history_record_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_history_records(var_644);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetIpamAddressHistoryOutput$NextToken */ =>  {
                let var_645 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_645);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ipam_pool_allocations(
    inp: &[u8],
    mut builder: crate::output::get_ipam_pool_allocations_output::Builder,
) -> Result<
    crate::output::get_ipam_pool_allocations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetIpamPoolAllocationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetIpamPoolAllocationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPoolAllocationSet") /* IpamPoolAllocations com.amazonaws.ec2.synthetic#GetIpamPoolAllocationsOutput$IpamPoolAllocations */ =>  {
                let var_646 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_pool_allocation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_allocations(var_646);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetIpamPoolAllocationsOutput$NextToken */ =>  {
                let var_647 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_647);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ipam_pool_cidrs(
    inp: &[u8],
    mut builder: crate::output::get_ipam_pool_cidrs_output::Builder,
) -> Result<crate::output::get_ipam_pool_cidrs_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetIpamPoolCidrsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetIpamPoolCidrsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPoolCidrSet") /* IpamPoolCidrs com.amazonaws.ec2.synthetic#GetIpamPoolCidrsOutput$IpamPoolCidrs */ =>  {
                let var_648 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_pool_cidr_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_cidrs(var_648);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetIpamPoolCidrsOutput$NextToken */ =>  {
                let var_649 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_649);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_ipam_resource_cidrs(
    inp: &[u8],
    mut builder: crate::output::get_ipam_resource_cidrs_output::Builder,
) -> Result<crate::output::get_ipam_resource_cidrs_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetIpamResourceCidrsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetIpamResourceCidrsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetIpamResourceCidrsOutput$NextToken */ =>  {
                let var_650 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_650);
            }
            ,
            s if s.matches("ipamResourceCidrSet") /* IpamResourceCidrs com.amazonaws.ec2.synthetic#GetIpamResourceCidrsOutput$IpamResourceCidrs */ =>  {
                let var_651 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_resource_cidr_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_resource_cidrs(var_651);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_launch_template_data(
    inp: &[u8],
    mut builder: crate::output::get_launch_template_data_output::Builder,
) -> Result<crate::output::get_launch_template_data_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetLaunchTemplateDataResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetLaunchTemplateDataResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateData") /* LaunchTemplateData com.amazonaws.ec2.synthetic#GetLaunchTemplateDataOutput$LaunchTemplateData */ =>  {
                let var_652 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_response_launch_template_data(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_data(var_652);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_managed_prefix_list_associations(
    inp: &[u8],
    mut builder: crate::output::get_managed_prefix_list_associations_output::Builder,
) -> Result<
    crate::output::get_managed_prefix_list_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetManagedPrefixListAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetManagedPrefixListAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixListAssociationSet") /* PrefixListAssociations com.amazonaws.ec2.synthetic#GetManagedPrefixListAssociationsOutput$PrefixListAssociations */ =>  {
                let var_653 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_prefix_list_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list_associations(var_653);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetManagedPrefixListAssociationsOutput$NextToken */ =>  {
                let var_654 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_654);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_managed_prefix_list_entries(
    inp: &[u8],
    mut builder: crate::output::get_managed_prefix_list_entries_output::Builder,
) -> Result<
    crate::output::get_managed_prefix_list_entries_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetManagedPrefixListEntriesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetManagedPrefixListEntriesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("entrySet") /* Entries com.amazonaws.ec2.synthetic#GetManagedPrefixListEntriesOutput$Entries */ =>  {
                let var_655 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_prefix_list_entry_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_entries(var_655);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetManagedPrefixListEntriesOutput$NextToken */ =>  {
                let var_656 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_656);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    inp: &[u8],
    mut builder: crate::output::get_network_insights_access_scope_analysis_findings_output::Builder,
) -> Result<
    crate::output::get_network_insights_access_scope_analysis_findings_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetNetworkInsightsAccessScopeAnalysisFindingsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetNetworkInsightsAccessScopeAnalysisFindingsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysisId") /* NetworkInsightsAccessScopeAnalysisId com.amazonaws.ec2.synthetic#GetNetworkInsightsAccessScopeAnalysisFindingsOutput$NetworkInsightsAccessScopeAnalysisId */ =>  {
                let var_657 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis_id(var_657);
            }
            ,
            s if s.matches("analysisStatus") /* AnalysisStatus com.amazonaws.ec2.synthetic#GetNetworkInsightsAccessScopeAnalysisFindingsOutput$AnalysisStatus */ =>  {
                let var_658 =
                    Some(
                        Result::<crate::model::AnalysisStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AnalysisStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_analysis_status(var_658);
            }
            ,
            s if s.matches("analysisFindingSet") /* AnalysisFindings com.amazonaws.ec2.synthetic#GetNetworkInsightsAccessScopeAnalysisFindingsOutput$AnalysisFindings */ =>  {
                let var_659 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_access_scope_analysis_finding_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_analysis_findings(var_659);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetNetworkInsightsAccessScopeAnalysisFindingsOutput$NextToken */ =>  {
                let var_660 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_660);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_network_insights_access_scope_content(
    inp: &[u8],
    mut builder: crate::output::get_network_insights_access_scope_content_output::Builder,
) -> Result<
    crate::output::get_network_insights_access_scope_content_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetNetworkInsightsAccessScopeContentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetNetworkInsightsAccessScopeContentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeContent") /* NetworkInsightsAccessScopeContent com.amazonaws.ec2.synthetic#GetNetworkInsightsAccessScopeContentOutput$NetworkInsightsAccessScopeContent */ =>  {
                let var_661 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_access_scope_content(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_content(var_661);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_password_data(
    inp: &[u8],
    mut builder: crate::output::get_password_data_output::Builder,
) -> Result<crate::output::get_password_data_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetPasswordDataResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetPasswordDataResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#GetPasswordDataOutput$InstanceId */ =>  {
                let var_662 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_662);
            }
            ,
            s if s.matches("passwordData") /* PasswordData com.amazonaws.ec2.synthetic#GetPasswordDataOutput$PasswordData */ =>  {
                let var_663 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_password_data(var_663);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2.synthetic#GetPasswordDataOutput$Timestamp */ =>  {
                let var_664 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_664);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_reserved_instances_exchange_quote(
    inp: &[u8],
    mut builder: crate::output::get_reserved_instances_exchange_quote_output::Builder,
) -> Result<
    crate::output::get_reserved_instances_exchange_quote_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetReservedInstancesExchangeQuoteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetReservedInstancesExchangeQuoteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$CurrencyCode */ =>  {
                let var_665 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_665);
            }
            ,
            s if s.matches("isValidExchange") /* IsValidExchange com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$IsValidExchange */ =>  {
                let var_666 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_valid_exchange(var_666);
            }
            ,
            s if s.matches("outputReservedInstancesWillExpireAt") /* OutputReservedInstancesWillExpireAt com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$OutputReservedInstancesWillExpireAt */ =>  {
                let var_667 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_output_reserved_instances_will_expire_at(var_667);
            }
            ,
            s if s.matches("paymentDue") /* PaymentDue com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$PaymentDue */ =>  {
                let var_668 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_payment_due(var_668);
            }
            ,
            s if s.matches("reservedInstanceValueRollup") /* ReservedInstanceValueRollup com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$ReservedInstanceValueRollup */ =>  {
                let var_669 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_reservation_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instance_value_rollup(var_669);
            }
            ,
            s if s.matches("reservedInstanceValueSet") /* ReservedInstanceValueSet com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$ReservedInstanceValueSet */ =>  {
                let var_670 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instance_reservation_value_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instance_value_set(var_670);
            }
            ,
            s if s.matches("targetConfigurationValueRollup") /* TargetConfigurationValueRollup com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$TargetConfigurationValueRollup */ =>  {
                let var_671 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_reservation_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_configuration_value_rollup(var_671);
            }
            ,
            s if s.matches("targetConfigurationValueSet") /* TargetConfigurationValueSet com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$TargetConfigurationValueSet */ =>  {
                let var_672 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_target_reservation_value_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_configuration_value_set(var_672);
            }
            ,
            s if s.matches("validationFailureReason") /* ValidationFailureReason com.amazonaws.ec2.synthetic#GetReservedInstancesExchangeQuoteOutput$ValidationFailureReason */ =>  {
                let var_673 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_validation_failure_reason(var_673);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_serial_console_access_status(
    inp: &[u8],
    mut builder: crate::output::get_serial_console_access_status_output::Builder,
) -> Result<
    crate::output::get_serial_console_access_status_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetSerialConsoleAccessStatusResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetSerialConsoleAccessStatusResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serialConsoleAccessEnabled") /* SerialConsoleAccessEnabled com.amazonaws.ec2.synthetic#GetSerialConsoleAccessStatusOutput$SerialConsoleAccessEnabled */ =>  {
                let var_674 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_serial_console_access_enabled(var_674);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_spot_placement_scores(
    inp: &[u8],
    mut builder: crate::output::get_spot_placement_scores_output::Builder,
) -> Result<
    crate::output::get_spot_placement_scores_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetSpotPlacementScoresResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetSpotPlacementScoresResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotPlacementScoreSet") /* SpotPlacementScores com.amazonaws.ec2.synthetic#GetSpotPlacementScoresOutput$SpotPlacementScores */ =>  {
                let var_675 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_placement_scores(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_placement_scores(var_675);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetSpotPlacementScoresOutput$NextToken */ =>  {
                let var_676 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_676);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_subnet_cidr_reservations(
    inp: &[u8],
    mut builder: crate::output::get_subnet_cidr_reservations_output::Builder,
) -> Result<
    crate::output::get_subnet_cidr_reservations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetSubnetCidrReservationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetSubnetCidrReservationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnetIpv4CidrReservationSet") /* SubnetIpv4CidrReservations com.amazonaws.ec2.synthetic#GetSubnetCidrReservationsOutput$SubnetIpv4CidrReservations */ =>  {
                let var_677 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_subnet_cidr_reservation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ipv4_cidr_reservations(var_677);
            }
            ,
            s if s.matches("subnetIpv6CidrReservationSet") /* SubnetIpv6CidrReservations com.amazonaws.ec2.synthetic#GetSubnetCidrReservationsOutput$SubnetIpv6CidrReservations */ =>  {
                let var_678 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_subnet_cidr_reservation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ipv6_cidr_reservations(var_678);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetSubnetCidrReservationsOutput$NextToken */ =>  {
                let var_679 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_679);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_transit_gateway_attachment_propagations(
    inp: &[u8],
    mut builder: crate::output::get_transit_gateway_attachment_propagations_output::Builder,
) -> Result<
    crate::output::get_transit_gateway_attachment_propagations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTransitGatewayAttachmentPropagationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTransitGatewayAttachmentPropagationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentPropagations") /* TransitGatewayAttachmentPropagations com.amazonaws.ec2.synthetic#GetTransitGatewayAttachmentPropagationsOutput$TransitGatewayAttachmentPropagations */ =>  {
                let var_680 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_attachment_propagation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_propagations(var_680);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetTransitGatewayAttachmentPropagationsOutput$NextToken */ =>  {
                let var_681 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_681);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    inp: &[u8],
    mut builder: crate::output::get_transit_gateway_multicast_domain_associations_output::Builder,
) -> Result<
    crate::output::get_transit_gateway_multicast_domain_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTransitGatewayMulticastDomainAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTransitGatewayMulticastDomainAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("multicastDomainAssociations") /* MulticastDomainAssociations com.amazonaws.ec2.synthetic#GetTransitGatewayMulticastDomainAssociationsOutput$MulticastDomainAssociations */ =>  {
                let var_682 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_multicast_domain_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_multicast_domain_associations(var_682);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetTransitGatewayMulticastDomainAssociationsOutput$NextToken */ =>  {
                let var_683 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_683);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_transit_gateway_prefix_list_references(
    inp: &[u8],
    mut builder: crate::output::get_transit_gateway_prefix_list_references_output::Builder,
) -> Result<
    crate::output::get_transit_gateway_prefix_list_references_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTransitGatewayPrefixListReferencesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTransitGatewayPrefixListReferencesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPrefixListReferenceSet") /* TransitGatewayPrefixListReferences com.amazonaws.ec2.synthetic#GetTransitGatewayPrefixListReferencesOutput$TransitGatewayPrefixListReferences */ =>  {
                let var_684 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_prefix_list_reference_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_prefix_list_references(var_684);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetTransitGatewayPrefixListReferencesOutput$NextToken */ =>  {
                let var_685 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_685);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_transit_gateway_route_table_associations(
    inp: &[u8],
    mut builder: crate::output::get_transit_gateway_route_table_associations_output::Builder,
) -> Result<
    crate::output::get_transit_gateway_route_table_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTransitGatewayRouteTableAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTransitGatewayRouteTableAssociationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associations") /* Associations com.amazonaws.ec2.synthetic#GetTransitGatewayRouteTableAssociationsOutput$Associations */ =>  {
                let var_686 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_route_table_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_686);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetTransitGatewayRouteTableAssociationsOutput$NextToken */ =>  {
                let var_687 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_687);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_transit_gateway_route_table_propagations(
    inp: &[u8],
    mut builder: crate::output::get_transit_gateway_route_table_propagations_output::Builder,
) -> Result<
    crate::output::get_transit_gateway_route_table_propagations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetTransitGatewayRouteTablePropagationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetTransitGatewayRouteTablePropagationsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTablePropagations") /* TransitGatewayRouteTablePropagations com.amazonaws.ec2.synthetic#GetTransitGatewayRouteTablePropagationsOutput$TransitGatewayRouteTablePropagations */ =>  {
                let var_688 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_route_table_propagation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_propagations(var_688);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetTransitGatewayRouteTablePropagationsOutput$NextToken */ =>  {
                let var_689 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_689);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    inp: &[u8],
    mut builder: crate::output::get_vpn_connection_device_sample_configuration_output::Builder,
) -> Result<
    crate::output::get_vpn_connection_device_sample_configuration_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetVpnConnectionDeviceSampleConfigurationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetVpnConnectionDeviceSampleConfigurationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnectionDeviceSampleConfiguration") /* VpnConnectionDeviceSampleConfiguration com.amazonaws.ec2.synthetic#GetVpnConnectionDeviceSampleConfigurationOutput$VpnConnectionDeviceSampleConfiguration */ =>  {
                let var_690 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_connection_device_sample_configuration(var_690);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_get_vpn_connection_device_types(
    inp: &[u8],
    mut builder: crate::output::get_vpn_connection_device_types_output::Builder,
) -> Result<
    crate::output::get_vpn_connection_device_types_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetVpnConnectionDeviceTypesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetVpnConnectionDeviceTypesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnectionDeviceTypeSet") /* VpnConnectionDeviceTypes com.amazonaws.ec2.synthetic#GetVpnConnectionDeviceTypesOutput$VpnConnectionDeviceTypes */ =>  {
                let var_691 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpn_connection_device_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection_device_types(var_691);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#GetVpnConnectionDeviceTypesOutput$NextToken */ =>  {
                let var_692 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_692);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    inp: &[u8],
    mut builder: crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder,
) -> Result<
    crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportClientVpnClientCertificateRevocationListResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected ImportClientVpnClientCertificateRevocationListResponse got {:?}", start_el)));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ImportClientVpnClientCertificateRevocationListOutput$Return */ =>  {
                let var_693 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_693);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_image(
    inp: &[u8],
    mut builder: crate::output::import_image_output::Builder,
) -> Result<crate::output::import_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ImportImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("architecture") /* Architecture com.amazonaws.ec2.synthetic#ImportImageOutput$Architecture */ =>  {
                let var_694 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_architecture(var_694);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#ImportImageOutput$Description */ =>  {
                let var_695 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_695);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2.synthetic#ImportImageOutput$Encrypted */ =>  {
                let var_696 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_696);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2.synthetic#ImportImageOutput$Hypervisor */ =>  {
                let var_697 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_697);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#ImportImageOutput$ImageId */ =>  {
                let var_698 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_698);
            }
            ,
            s if s.matches("importTaskId") /* ImportTaskId com.amazonaws.ec2.synthetic#ImportImageOutput$ImportTaskId */ =>  {
                let var_699 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_task_id(var_699);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#ImportImageOutput$KmsKeyId */ =>  {
                let var_700 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_700);
            }
            ,
            s if s.matches("licenseType") /* LicenseType com.amazonaws.ec2.synthetic#ImportImageOutput$LicenseType */ =>  {
                let var_701 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_type(var_701);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2.synthetic#ImportImageOutput$Platform */ =>  {
                let var_702 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_702);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2.synthetic#ImportImageOutput$Progress */ =>  {
                let var_703 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_703);
            }
            ,
            s if s.matches("snapshotDetailSet") /* SnapshotDetails com.amazonaws.ec2.synthetic#ImportImageOutput$SnapshotDetails */ =>  {
                let var_704 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_detail_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_details(var_704);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#ImportImageOutput$Status */ =>  {
                let var_705 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_705);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2.synthetic#ImportImageOutput$StatusMessage */ =>  {
                let var_706 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_706);
            }
            ,
            s if s.matches("licenseSpecifications") /* LicenseSpecifications com.amazonaws.ec2.synthetic#ImportImageOutput$LicenseSpecifications */ =>  {
                let var_707 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_import_image_license_specification_list_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_license_specifications(var_707);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#ImportImageOutput$Tags */ =>  {
                let var_708 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_708);
            }
            ,
            s if s.matches("usageOperation") /* UsageOperation com.amazonaws.ec2.synthetic#ImportImageOutput$UsageOperation */ =>  {
                let var_709 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_operation(var_709);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_instance(
    inp: &[u8],
    mut builder: crate::output::import_instance_output::Builder,
) -> Result<crate::output::import_instance_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportInstanceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ImportInstanceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("conversionTask") /* ConversionTask com.amazonaws.ec2.synthetic#ImportInstanceOutput$ConversionTask */ =>  {
                let var_710 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_conversion_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_conversion_task(var_710);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_key_pair(
    inp: &[u8],
    mut builder: crate::output::import_key_pair_output::Builder,
) -> Result<crate::output::import_key_pair_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportKeyPairResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ImportKeyPairResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("keyFingerprint") /* KeyFingerprint com.amazonaws.ec2.synthetic#ImportKeyPairOutput$KeyFingerprint */ =>  {
                let var_711 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_fingerprint(var_711);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2.synthetic#ImportKeyPairOutput$KeyName */ =>  {
                let var_712 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_712);
            }
            ,
            s if s.matches("keyPairId") /* KeyPairId com.amazonaws.ec2.synthetic#ImportKeyPairOutput$KeyPairId */ =>  {
                let var_713 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_pair_id(var_713);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#ImportKeyPairOutput$Tags */ =>  {
                let var_714 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_714);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_snapshot(
    inp: &[u8],
    mut builder: crate::output::import_snapshot_output::Builder,
) -> Result<crate::output::import_snapshot_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportSnapshotResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ImportSnapshotResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#ImportSnapshotOutput$Description */ =>  {
                let var_715 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_715);
            }
            ,
            s if s.matches("importTaskId") /* ImportTaskId com.amazonaws.ec2.synthetic#ImportSnapshotOutput$ImportTaskId */ =>  {
                let var_716 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_task_id(var_716);
            }
            ,
            s if s.matches("snapshotTaskDetail") /* SnapshotTaskDetail com.amazonaws.ec2.synthetic#ImportSnapshotOutput$SnapshotTaskDetail */ =>  {
                let var_717 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_snapshot_task_detail(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_task_detail(var_717);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2.synthetic#ImportSnapshotOutput$Tags */ =>  {
                let var_718 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_718);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_import_volume(
    inp: &[u8],
    mut builder: crate::output::import_volume_output::Builder,
) -> Result<crate::output::import_volume_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ImportVolumeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ImportVolumeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("conversionTask") /* ConversionTask com.amazonaws.ec2.synthetic#ImportVolumeOutput$ConversionTask */ =>  {
                let var_719 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_conversion_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_conversion_task(var_719);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_list_images_in_recycle_bin(
    inp: &[u8],
    mut builder: crate::output::list_images_in_recycle_bin_output::Builder,
) -> Result<
    crate::output::list_images_in_recycle_bin_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListImagesInRecycleBinResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListImagesInRecycleBinResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageSet") /* Images com.amazonaws.ec2.synthetic#ListImagesInRecycleBinOutput$Images */ =>  {
                let var_720 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_image_recycle_bin_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_images(var_720);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#ListImagesInRecycleBinOutput$NextToken */ =>  {
                let var_721 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_721);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_list_snapshots_in_recycle_bin(
    inp: &[u8],
    mut builder: crate::output::list_snapshots_in_recycle_bin_output::Builder,
) -> Result<
    crate::output::list_snapshots_in_recycle_bin_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListSnapshotsInRecycleBinResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListSnapshotsInRecycleBinResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotSet") /* Snapshots com.amazonaws.ec2.synthetic#ListSnapshotsInRecycleBinOutput$Snapshots */ =>  {
                let var_722 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_recycle_bin_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshots(var_722);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#ListSnapshotsInRecycleBinOutput$NextToken */ =>  {
                let var_723 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_723);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_address_attribute(
    inp: &[u8],
    mut builder: crate::output::modify_address_attribute_output::Builder,
) -> Result<crate::output::modify_address_attribute_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyAddressAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyAddressAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("address") /* Address com.amazonaws.ec2.synthetic#ModifyAddressAttributeOutput$Address */ =>  {
                let var_724 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_address_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_address(var_724);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_availability_zone_group(
    inp: &[u8],
    mut builder: crate::output::modify_availability_zone_group_output::Builder,
) -> Result<
    crate::output::modify_availability_zone_group_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyAvailabilityZoneGroupResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyAvailabilityZoneGroupResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyAvailabilityZoneGroupOutput$Return */ =>  {
                let var_725 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_725);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_capacity_reservation(
    inp: &[u8],
    mut builder: crate::output::modify_capacity_reservation_output::Builder,
) -> Result<
    crate::output::modify_capacity_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyCapacityReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyCapacityReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyCapacityReservationOutput$Return */ =>  {
                let var_726 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_726);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_capacity_reservation_fleet(
    inp: &[u8],
    mut builder: crate::output::modify_capacity_reservation_fleet_output::Builder,
) -> Result<
    crate::output::modify_capacity_reservation_fleet_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyCapacityReservationFleetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyCapacityReservationFleetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyCapacityReservationFleetOutput$Return */ =>  {
                let var_727 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_727);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_client_vpn_endpoint(
    inp: &[u8],
    mut builder: crate::output::modify_client_vpn_endpoint_output::Builder,
) -> Result<
    crate::output::modify_client_vpn_endpoint_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyClientVpnEndpointResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyClientVpnEndpointResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyClientVpnEndpointOutput$Return */ =>  {
                let var_728 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_728);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_default_credit_specification(
    inp: &[u8],
    mut builder: crate::output::modify_default_credit_specification_output::Builder,
) -> Result<
    crate::output::modify_default_credit_specification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyDefaultCreditSpecificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyDefaultCreditSpecificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceFamilyCreditSpecification") /* InstanceFamilyCreditSpecification com.amazonaws.ec2.synthetic#ModifyDefaultCreditSpecificationOutput$InstanceFamilyCreditSpecification */ =>  {
                let var_729 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_family_credit_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_family_credit_specification(var_729);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_ebs_default_kms_key_id(
    inp: &[u8],
    mut builder: crate::output::modify_ebs_default_kms_key_id_output::Builder,
) -> Result<
    crate::output::modify_ebs_default_kms_key_id_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyEbsDefaultKmsKeyIdResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyEbsDefaultKmsKeyIdResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#ModifyEbsDefaultKmsKeyIdOutput$KmsKeyId */ =>  {
                let var_730 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_730);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_fleet(
    inp: &[u8],
    mut builder: crate::output::modify_fleet_output::Builder,
) -> Result<crate::output::modify_fleet_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyFleetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyFleetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyFleetOutput$Return */ =>  {
                let var_731 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_731);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_fpga_image_attribute(
    inp: &[u8],
    mut builder: crate::output::modify_fpga_image_attribute_output::Builder,
) -> Result<
    crate::output::modify_fpga_image_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyFpgaImageAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyFpgaImageAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageAttribute") /* FpgaImageAttribute com.amazonaws.ec2.synthetic#ModifyFpgaImageAttributeOutput$FpgaImageAttribute */ =>  {
                let var_732 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fpga_image_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpga_image_attribute(var_732);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_hosts(
    inp: &[u8],
    mut builder: crate::output::modify_hosts_output::Builder,
) -> Result<crate::output::modify_hosts_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyHostsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyHostsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successful") /* Successful com.amazonaws.ec2.synthetic#ModifyHostsOutput$Successful */ =>  {
                let var_733 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_response_host_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful(var_733);
            }
            ,
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#ModifyHostsOutput$Unsuccessful */ =>  {
                let var_734 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_734);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    inp: &[u8],
    mut builder: crate::output::modify_instance_capacity_reservation_attributes_output::Builder,
) -> Result<
    crate::output::modify_instance_capacity_reservation_attributes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstanceCapacityReservationAttributesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstanceCapacityReservationAttributesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyInstanceCapacityReservationAttributesOutput$Return */ =>  {
                let var_735 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_735);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_credit_specification(
    inp: &[u8],
    mut builder: crate::output::modify_instance_credit_specification_output::Builder,
) -> Result<
    crate::output::modify_instance_credit_specification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstanceCreditSpecificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstanceCreditSpecificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successfulInstanceCreditSpecificationSet") /* SuccessfulInstanceCreditSpecifications com.amazonaws.ec2.synthetic#ModifyInstanceCreditSpecificationOutput$SuccessfulInstanceCreditSpecifications */ =>  {
                let var_736 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_successful_instance_credit_specification_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful_instance_credit_specifications(var_736);
            }
            ,
            s if s.matches("unsuccessfulInstanceCreditSpecificationSet") /* UnsuccessfulInstanceCreditSpecifications com.amazonaws.ec2.synthetic#ModifyInstanceCreditSpecificationOutput$UnsuccessfulInstanceCreditSpecifications */ =>  {
                let var_737 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_instance_credit_specification_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful_instance_credit_specifications(var_737);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_event_start_time(
    inp: &[u8],
    mut builder: crate::output::modify_instance_event_start_time_output::Builder,
) -> Result<
    crate::output::modify_instance_event_start_time_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstanceEventStartTimeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstanceEventStartTimeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("event") /* Event com.amazonaws.ec2.synthetic#ModifyInstanceEventStartTimeOutput$Event */ =>  {
                let var_738 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_status_event(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event(var_738);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_event_window(
    inp: &[u8],
    mut builder: crate::output::modify_instance_event_window_output::Builder,
) -> Result<
    crate::output::modify_instance_event_window_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstanceEventWindowResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstanceEventWindowResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindow") /* InstanceEventWindow com.amazonaws.ec2.synthetic#ModifyInstanceEventWindowOutput$InstanceEventWindow */ =>  {
                let var_739 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_event_window(var_739);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_metadata_options(
    inp: &[u8],
    mut builder: crate::output::modify_instance_metadata_options_output::Builder,
) -> Result<
    crate::output::modify_instance_metadata_options_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstanceMetadataOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstanceMetadataOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2.synthetic#ModifyInstanceMetadataOptionsOutput$InstanceId */ =>  {
                let var_740 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_740);
            }
            ,
            s if s.matches("instanceMetadataOptions") /* InstanceMetadataOptions com.amazonaws.ec2.synthetic#ModifyInstanceMetadataOptionsOutput$InstanceMetadataOptions */ =>  {
                let var_741 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_metadata_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_metadata_options(var_741);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_instance_placement(
    inp: &[u8],
    mut builder: crate::output::modify_instance_placement_output::Builder,
) -> Result<
    crate::output::modify_instance_placement_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyInstancePlacementResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyInstancePlacementResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyInstancePlacementOutput$Return */ =>  {
                let var_742 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_742);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_ipam(
    inp: &[u8],
    mut builder: crate::output::modify_ipam_output::Builder,
) -> Result<crate::output::modify_ipam_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyIpamResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyIpamResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipam") /* Ipam com.amazonaws.ec2.synthetic#ModifyIpamOutput$Ipam */ =>  {
                let var_743 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam(var_743);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_ipam_pool(
    inp: &[u8],
    mut builder: crate::output::modify_ipam_pool_output::Builder,
) -> Result<crate::output::modify_ipam_pool_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyIpamPoolResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyIpamPoolResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPool") /* IpamPool com.amazonaws.ec2.synthetic#ModifyIpamPoolOutput$IpamPool */ =>  {
                let var_744 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool(var_744);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_ipam_resource_cidr(
    inp: &[u8],
    mut builder: crate::output::modify_ipam_resource_cidr_output::Builder,
) -> Result<
    crate::output::modify_ipam_resource_cidr_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyIpamResourceCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyIpamResourceCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamResourceCidr") /* IpamResourceCidr com.amazonaws.ec2.synthetic#ModifyIpamResourceCidrOutput$IpamResourceCidr */ =>  {
                let var_745 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_resource_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_resource_cidr(var_745);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_ipam_scope(
    inp: &[u8],
    mut builder: crate::output::modify_ipam_scope_output::Builder,
) -> Result<crate::output::modify_ipam_scope_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyIpamScopeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyIpamScopeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamScope") /* IpamScope com.amazonaws.ec2.synthetic#ModifyIpamScopeOutput$IpamScope */ =>  {
                let var_746 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_scope(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_scope(var_746);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_launch_template(
    inp: &[u8],
    mut builder: crate::output::modify_launch_template_output::Builder,
) -> Result<crate::output::modify_launch_template_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyLaunchTemplateResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyLaunchTemplateResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2.synthetic#ModifyLaunchTemplateOutput$LaunchTemplate */ =>  {
                let var_747 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_747);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_managed_prefix_list(
    inp: &[u8],
    mut builder: crate::output::modify_managed_prefix_list_output::Builder,
) -> Result<
    crate::output::modify_managed_prefix_list_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyManagedPrefixListResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyManagedPrefixListResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixList") /* PrefixList com.amazonaws.ec2.synthetic#ModifyManagedPrefixListOutput$PrefixList */ =>  {
                let var_748 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_managed_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list(var_748);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_private_dns_name_options(
    inp: &[u8],
    mut builder: crate::output::modify_private_dns_name_options_output::Builder,
) -> Result<
    crate::output::modify_private_dns_name_options_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyPrivateDnsNameOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyPrivateDnsNameOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyPrivateDnsNameOptionsOutput$Return */ =>  {
                let var_749 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_749);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_reserved_instances(
    inp: &[u8],
    mut builder: crate::output::modify_reserved_instances_output::Builder,
) -> Result<
    crate::output::modify_reserved_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyReservedInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyReservedInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesModificationId") /* ReservedInstancesModificationId com.amazonaws.ec2.synthetic#ModifyReservedInstancesOutput$ReservedInstancesModificationId */ =>  {
                let var_750 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_modification_id(var_750);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_security_group_rules(
    inp: &[u8],
    mut builder: crate::output::modify_security_group_rules_output::Builder,
) -> Result<
    crate::output::modify_security_group_rules_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifySecurityGroupRulesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifySecurityGroupRulesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifySecurityGroupRulesOutput$Return */ =>  {
                let var_751 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_751);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_snapshot_tier(
    inp: &[u8],
    mut builder: crate::output::modify_snapshot_tier_output::Builder,
) -> Result<crate::output::modify_snapshot_tier_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifySnapshotTierResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifySnapshotTierResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#ModifySnapshotTierOutput$SnapshotId */ =>  {
                let var_752 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_752);
            }
            ,
            s if s.matches("tieringStartTime") /* TieringStartTime com.amazonaws.ec2.synthetic#ModifySnapshotTierOutput$TieringStartTime */ =>  {
                let var_753 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_tiering_start_time(var_753);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_spot_fleet_request(
    inp: &[u8],
    mut builder: crate::output::modify_spot_fleet_request_output::Builder,
) -> Result<
    crate::output::modify_spot_fleet_request_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifySpotFleetRequestResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifySpotFleetRequestResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifySpotFleetRequestOutput$Return */ =>  {
                let var_754 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_754);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    inp: &[u8],
    mut builder: crate::output::modify_traffic_mirror_filter_network_services_output::Builder,
) -> Result<
    crate::output::modify_traffic_mirror_filter_network_services_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTrafficMirrorFilterNetworkServicesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTrafficMirrorFilterNetworkServicesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilter") /* TrafficMirrorFilter com.amazonaws.ec2.synthetic#ModifyTrafficMirrorFilterNetworkServicesOutput$TrafficMirrorFilter */ =>  {
                let var_755 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter(var_755);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_traffic_mirror_filter_rule(
    inp: &[u8],
    mut builder: crate::output::modify_traffic_mirror_filter_rule_output::Builder,
) -> Result<
    crate::output::modify_traffic_mirror_filter_rule_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTrafficMirrorFilterRuleResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTrafficMirrorFilterRuleResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterRule") /* TrafficMirrorFilterRule com.amazonaws.ec2.synthetic#ModifyTrafficMirrorFilterRuleOutput$TrafficMirrorFilterRule */ =>  {
                let var_756 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_rule(var_756);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_traffic_mirror_session(
    inp: &[u8],
    mut builder: crate::output::modify_traffic_mirror_session_output::Builder,
) -> Result<
    crate::output::modify_traffic_mirror_session_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTrafficMirrorSessionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTrafficMirrorSessionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorSession") /* TrafficMirrorSession com.amazonaws.ec2.synthetic#ModifyTrafficMirrorSessionOutput$TrafficMirrorSession */ =>  {
                let var_757 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_session(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_session(var_757);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_transit_gateway(
    inp: &[u8],
    mut builder: crate::output::modify_transit_gateway_output::Builder,
) -> Result<crate::output::modify_transit_gateway_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTransitGatewayResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTransitGatewayResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGateway") /* TransitGateway com.amazonaws.ec2.synthetic#ModifyTransitGatewayOutput$TransitGateway */ =>  {
                let var_758 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway(var_758);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    inp: &[u8],
    mut builder: crate::output::modify_transit_gateway_prefix_list_reference_output::Builder,
) -> Result<
    crate::output::modify_transit_gateway_prefix_list_reference_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTransitGatewayPrefixListReferenceResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTransitGatewayPrefixListReferenceResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPrefixListReference") /* TransitGatewayPrefixListReference com.amazonaws.ec2.synthetic#ModifyTransitGatewayPrefixListReferenceOutput$TransitGatewayPrefixListReference */ =>  {
                let var_759 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_prefix_list_reference(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_prefix_list_reference(var_759);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    inp: &[u8],
    mut builder: crate::output::modify_transit_gateway_vpc_attachment_output::Builder,
) -> Result<
    crate::output::modify_transit_gateway_vpc_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyTransitGatewayVpcAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyTransitGatewayVpcAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachment") /* TransitGatewayVpcAttachment com.amazonaws.ec2.synthetic#ModifyTransitGatewayVpcAttachmentOutput$TransitGatewayVpcAttachment */ =>  {
                let var_760 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachment(var_760);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_volume(
    inp: &[u8],
    mut builder: crate::output::modify_volume_output::Builder,
) -> Result<crate::output::modify_volume_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVolumeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVolumeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("volumeModification") /* VolumeModification com.amazonaws.ec2.synthetic#ModifyVolumeOutput$VolumeModification */ =>  {
                let var_761 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_volume_modification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volume_modification(var_761);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_endpoint(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_endpoint_output::Builder,
) -> Result<crate::output::modify_vpc_endpoint_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcEndpointResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcEndpointResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyVpcEndpointOutput$Return */ =>  {
                let var_762 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_762);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_endpoint_connection_notification_output::Builder,
) -> Result<
    crate::output::modify_vpc_endpoint_connection_notification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcEndpointConnectionNotificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcEndpointConnectionNotificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* ReturnValue com.amazonaws.ec2.synthetic#ModifyVpcEndpointConnectionNotificationOutput$ReturnValue */ =>  {
                let var_763 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_763);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_endpoint_service_configuration_output::Builder,
) -> Result<
    crate::output::modify_vpc_endpoint_service_configuration_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcEndpointServiceConfigurationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcEndpointServiceConfigurationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ModifyVpcEndpointServiceConfigurationOutput$Return */ =>  {
                let var_764 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_764);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_endpoint_service_payer_responsibility_output::Builder,
) -> Result<
    crate::output::modify_vpc_endpoint_service_payer_responsibility_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcEndpointServicePayerResponsibilityResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcEndpointServicePayerResponsibilityResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* ReturnValue com.amazonaws.ec2.synthetic#ModifyVpcEndpointServicePayerResponsibilityOutput$ReturnValue */ =>  {
                let var_765 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_765);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_endpoint_service_permissions_output::Builder,
) -> Result<
    crate::output::modify_vpc_endpoint_service_permissions_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcEndpointServicePermissionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcEndpointServicePermissionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* ReturnValue com.amazonaws.ec2.synthetic#ModifyVpcEndpointServicePermissionsOutput$ReturnValue */ =>  {
                let var_766 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_766);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_peering_connection_options(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_peering_connection_options_output::Builder,
) -> Result<
    crate::output::modify_vpc_peering_connection_options_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcPeeringConnectionOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcPeeringConnectionOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accepterPeeringConnectionOptions") /* AccepterPeeringConnectionOptions com.amazonaws.ec2.synthetic#ModifyVpcPeeringConnectionOptionsOutput$AccepterPeeringConnectionOptions */ =>  {
                let var_767 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_peering_connection_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accepter_peering_connection_options(var_767);
            }
            ,
            s if s.matches("requesterPeeringConnectionOptions") /* RequesterPeeringConnectionOptions com.amazonaws.ec2.synthetic#ModifyVpcPeeringConnectionOptionsOutput$RequesterPeeringConnectionOptions */ =>  {
                let var_768 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_peering_connection_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_requester_peering_connection_options(var_768);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpc_tenancy(
    inp: &[u8],
    mut builder: crate::output::modify_vpc_tenancy_output::Builder,
) -> Result<crate::output::modify_vpc_tenancy_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpcTenancyResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpcTenancyResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* ReturnValue com.amazonaws.ec2.synthetic#ModifyVpcTenancyOutput$ReturnValue */ =>  {
                let var_769 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_769);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpn_connection(
    inp: &[u8],
    mut builder: crate::output::modify_vpn_connection_output::Builder,
) -> Result<crate::output::modify_vpn_connection_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpnConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpnConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2.synthetic#ModifyVpnConnectionOutput$VpnConnection */ =>  {
                let var_770 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_770);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpn_connection_options(
    inp: &[u8],
    mut builder: crate::output::modify_vpn_connection_options_output::Builder,
) -> Result<
    crate::output::modify_vpn_connection_options_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpnConnectionOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpnConnectionOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2.synthetic#ModifyVpnConnectionOptionsOutput$VpnConnection */ =>  {
                let var_771 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_771);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpn_tunnel_certificate(
    inp: &[u8],
    mut builder: crate::output::modify_vpn_tunnel_certificate_output::Builder,
) -> Result<
    crate::output::modify_vpn_tunnel_certificate_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpnTunnelCertificateResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpnTunnelCertificateResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2.synthetic#ModifyVpnTunnelCertificateOutput$VpnConnection */ =>  {
                let var_772 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_772);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_modify_vpn_tunnel_options(
    inp: &[u8],
    mut builder: crate::output::modify_vpn_tunnel_options_output::Builder,
) -> Result<
    crate::output::modify_vpn_tunnel_options_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyVpnTunnelOptionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ModifyVpnTunnelOptionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2.synthetic#ModifyVpnTunnelOptionsOutput$VpnConnection */ =>  {
                let var_773 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_773);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_monitor_instances(
    inp: &[u8],
    mut builder: crate::output::monitor_instances_output::Builder,
) -> Result<crate::output::monitor_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("MonitorInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected MonitorInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* InstanceMonitorings com.amazonaws.ec2.synthetic#MonitorInstancesOutput$InstanceMonitorings */ =>  {
                let var_774 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_monitoring_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_monitorings(var_774);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_move_address_to_vpc(
    inp: &[u8],
    mut builder: crate::output::move_address_to_vpc_output::Builder,
) -> Result<crate::output::move_address_to_vpc_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("MoveAddressToVpcResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected MoveAddressToVpcResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2.synthetic#MoveAddressToVpcOutput$AllocationId */ =>  {
                let var_775 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_775);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#MoveAddressToVpcOutput$Status */ =>  {
                let var_776 =
                    Some(
                        Result::<crate::model::Status, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Status::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_776);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_move_byoip_cidr_to_ipam(
    inp: &[u8],
    mut builder: crate::output::move_byoip_cidr_to_ipam_output::Builder,
) -> Result<crate::output::move_byoip_cidr_to_ipam_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("MoveByoipCidrToIpamResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected MoveByoipCidrToIpamResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidr") /* ByoipCidr com.amazonaws.ec2.synthetic#MoveByoipCidrToIpamOutput$ByoipCidr */ =>  {
                let var_777 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidr(var_777);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_provision_byoip_cidr(
    inp: &[u8],
    mut builder: crate::output::provision_byoip_cidr_output::Builder,
) -> Result<crate::output::provision_byoip_cidr_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ProvisionByoipCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ProvisionByoipCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidr") /* ByoipCidr com.amazonaws.ec2.synthetic#ProvisionByoipCidrOutput$ByoipCidr */ =>  {
                let var_778 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidr(var_778);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_provision_ipam_pool_cidr(
    inp: &[u8],
    mut builder: crate::output::provision_ipam_pool_cidr_output::Builder,
) -> Result<crate::output::provision_ipam_pool_cidr_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ProvisionIpamPoolCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ProvisionIpamPoolCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPoolCidr") /* IpamPoolCidr com.amazonaws.ec2.synthetic#ProvisionIpamPoolCidrOutput$IpamPoolCidr */ =>  {
                let var_779 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_cidr(var_779);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_provision_public_ipv4_pool_cidr(
    inp: &[u8],
    mut builder: crate::output::provision_public_ipv4_pool_cidr_output::Builder,
) -> Result<
    crate::output::provision_public_ipv4_pool_cidr_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ProvisionPublicIpv4PoolCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ProvisionPublicIpv4PoolCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2.synthetic#ProvisionPublicIpv4PoolCidrOutput$PoolId */ =>  {
                let var_780 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_780);
            }
            ,
            s if s.matches("poolAddressRange") /* PoolAddressRange com.amazonaws.ec2.synthetic#ProvisionPublicIpv4PoolCidrOutput$PoolAddressRange */ =>  {
                let var_781 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_public_ipv4_pool_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pool_address_range(var_781);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_purchase_host_reservation(
    inp: &[u8],
    mut builder: crate::output::purchase_host_reservation_output::Builder,
) -> Result<
    crate::output::purchase_host_reservation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("PurchaseHostReservationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected PurchaseHostReservationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2.synthetic#PurchaseHostReservationOutput$ClientToken */ =>  {
                let var_782 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_782);
            }
            ,
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2.synthetic#PurchaseHostReservationOutput$CurrencyCode */ =>  {
                let var_783 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_783);
            }
            ,
            s if s.matches("purchase") /* Purchase com.amazonaws.ec2.synthetic#PurchaseHostReservationOutput$Purchase */ =>  {
                let var_784 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_purchase_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_purchase(var_784);
            }
            ,
            s if s.matches("totalHourlyPrice") /* TotalHourlyPrice com.amazonaws.ec2.synthetic#PurchaseHostReservationOutput$TotalHourlyPrice */ =>  {
                let var_785 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_total_hourly_price(var_785);
            }
            ,
            s if s.matches("totalUpfrontPrice") /* TotalUpfrontPrice com.amazonaws.ec2.synthetic#PurchaseHostReservationOutput$TotalUpfrontPrice */ =>  {
                let var_786 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_total_upfront_price(var_786);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_purchase_reserved_instances_offering(
    inp: &[u8],
    mut builder: crate::output::purchase_reserved_instances_offering_output::Builder,
) -> Result<
    crate::output::purchase_reserved_instances_offering_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("PurchaseReservedInstancesOfferingResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected PurchaseReservedInstancesOfferingResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2.synthetic#PurchaseReservedInstancesOfferingOutput$ReservedInstancesId */ =>  {
                let var_787 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_787);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_purchase_scheduled_instances(
    inp: &[u8],
    mut builder: crate::output::purchase_scheduled_instances_output::Builder,
) -> Result<
    crate::output::purchase_scheduled_instances_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("PurchaseScheduledInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected PurchaseScheduledInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("scheduledInstanceSet") /* ScheduledInstanceSet com.amazonaws.ec2.synthetic#PurchaseScheduledInstancesOutput$ScheduledInstanceSet */ =>  {
                let var_788 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_purchased_scheduled_instance_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_scheduled_instance_set(var_788);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_register_image(
    inp: &[u8],
    mut builder: crate::output::register_image_output::Builder,
) -> Result<crate::output::register_image_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RegisterImageResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RegisterImageResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#RegisterImageOutput$ImageId */ =>  {
                let var_789 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_789);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_register_instance_event_notification_attributes(
    inp: &[u8],
    mut builder: crate::output::register_instance_event_notification_attributes_output::Builder,
) -> Result<
    crate::output::register_instance_event_notification_attributes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RegisterInstanceEventNotificationAttributesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RegisterInstanceEventNotificationAttributesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTagAttribute") /* InstanceTagAttribute com.amazonaws.ec2.synthetic#RegisterInstanceEventNotificationAttributesOutput$InstanceTagAttribute */ =>  {
                let var_790 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_tag_notification_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_tag_attribute(var_790);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_register_transit_gateway_multicast_group_members(
    inp: &[u8],
    mut builder: crate::output::register_transit_gateway_multicast_group_members_output::Builder,
) -> Result<
    crate::output::register_transit_gateway_multicast_group_members_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RegisterTransitGatewayMulticastGroupMembersResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RegisterTransitGatewayMulticastGroupMembersResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("registeredMulticastGroupMembers") /* RegisteredMulticastGroupMembers com.amazonaws.ec2.synthetic#RegisterTransitGatewayMulticastGroupMembersOutput$RegisteredMulticastGroupMembers */ =>  {
                let var_791 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_registered_group_members(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_registered_multicast_group_members(var_791);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    inp: &[u8],
    mut builder: crate::output::register_transit_gateway_multicast_group_sources_output::Builder,
) -> Result<
    crate::output::register_transit_gateway_multicast_group_sources_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RegisterTransitGatewayMulticastGroupSourcesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RegisterTransitGatewayMulticastGroupSourcesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("registeredMulticastGroupSources") /* RegisteredMulticastGroupSources com.amazonaws.ec2.synthetic#RegisterTransitGatewayMulticastGroupSourcesOutput$RegisteredMulticastGroupSources */ =>  {
                let var_792 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_registered_group_sources(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_registered_multicast_group_sources(var_792);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    inp: &[u8],
    mut builder: crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder,
) -> Result<
    crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RejectTransitGatewayMulticastDomainAssociationsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!("invalid root, expected RejectTransitGatewayMulticastDomainAssociationsResponse got {:?}", start_el)));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associations") /* Associations com.amazonaws.ec2.synthetic#RejectTransitGatewayMulticastDomainAssociationsOutput$Associations */ =>  {
                let var_793 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_associations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_793);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reject_transit_gateway_peering_attachment(
    inp: &[u8],
    mut builder: crate::output::reject_transit_gateway_peering_attachment_output::Builder,
) -> Result<
    crate::output::reject_transit_gateway_peering_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RejectTransitGatewayPeeringAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RejectTransitGatewayPeeringAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayPeeringAttachment") /* TransitGatewayPeeringAttachment com.amazonaws.ec2.synthetic#RejectTransitGatewayPeeringAttachmentOutput$TransitGatewayPeeringAttachment */ =>  {
                let var_794 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_peering_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_peering_attachment(var_794);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    inp: &[u8],
    mut builder: crate::output::reject_transit_gateway_vpc_attachment_output::Builder,
) -> Result<
    crate::output::reject_transit_gateway_vpc_attachment_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RejectTransitGatewayVpcAttachmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RejectTransitGatewayVpcAttachmentResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayVpcAttachment") /* TransitGatewayVpcAttachment com.amazonaws.ec2.synthetic#RejectTransitGatewayVpcAttachmentOutput$TransitGatewayVpcAttachment */ =>  {
                let var_795 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_vpc_attachment(var_795);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reject_vpc_endpoint_connections(
    inp: &[u8],
    mut builder: crate::output::reject_vpc_endpoint_connections_output::Builder,
) -> Result<
    crate::output::reject_vpc_endpoint_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RejectVpcEndpointConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RejectVpcEndpointConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#RejectVpcEndpointConnectionsOutput$Unsuccessful */ =>  {
                let var_796 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_796);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reject_vpc_peering_connection(
    inp: &[u8],
    mut builder: crate::output::reject_vpc_peering_connection_output::Builder,
) -> Result<
    crate::output::reject_vpc_peering_connection_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RejectVpcPeeringConnectionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RejectVpcPeeringConnectionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#RejectVpcPeeringConnectionOutput$Return */ =>  {
                let var_797 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_797);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_release_hosts(
    inp: &[u8],
    mut builder: crate::output::release_hosts_output::Builder,
) -> Result<crate::output::release_hosts_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReleaseHostsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReleaseHostsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("successful") /* Successful com.amazonaws.ec2.synthetic#ReleaseHostsOutput$Successful */ =>  {
                let var_798 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_response_host_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful(var_798);
            }
            ,
            s if s.matches("unsuccessful") /* Unsuccessful com.amazonaws.ec2.synthetic#ReleaseHostsOutput$Unsuccessful */ =>  {
                let var_799 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_unsuccessful_item_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unsuccessful(var_799);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_release_ipam_pool_allocation(
    inp: &[u8],
    mut builder: crate::output::release_ipam_pool_allocation_output::Builder,
) -> Result<
    crate::output::release_ipam_pool_allocation_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReleaseIpamPoolAllocationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReleaseIpamPoolAllocationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("success") /* Success com.amazonaws.ec2.synthetic#ReleaseIpamPoolAllocationOutput$Success */ =>  {
                let var_800 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_success(var_800);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_replace_iam_instance_profile_association(
    inp: &[u8],
    mut builder: crate::output::replace_iam_instance_profile_association_output::Builder,
) -> Result<
    crate::output::replace_iam_instance_profile_association_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReplaceIamInstanceProfileAssociationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReplaceIamInstanceProfileAssociationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("iamInstanceProfileAssociation") /* IamInstanceProfileAssociation com.amazonaws.ec2.synthetic#ReplaceIamInstanceProfileAssociationOutput$IamInstanceProfileAssociation */ =>  {
                let var_801 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile_association(var_801);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_replace_network_acl_association(
    inp: &[u8],
    mut builder: crate::output::replace_network_acl_association_output::Builder,
) -> Result<
    crate::output::replace_network_acl_association_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReplaceNetworkAclAssociationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReplaceNetworkAclAssociationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("newAssociationId") /* NewAssociationId com.amazonaws.ec2.synthetic#ReplaceNetworkAclAssociationOutput$NewAssociationId */ =>  {
                let var_802 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_new_association_id(var_802);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_replace_route_table_association(
    inp: &[u8],
    mut builder: crate::output::replace_route_table_association_output::Builder,
) -> Result<
    crate::output::replace_route_table_association_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReplaceRouteTableAssociationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReplaceRouteTableAssociationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("newAssociationId") /* NewAssociationId com.amazonaws.ec2.synthetic#ReplaceRouteTableAssociationOutput$NewAssociationId */ =>  {
                let var_803 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_new_association_id(var_803);
            }
            ,
            s if s.matches("associationState") /* AssociationState com.amazonaws.ec2.synthetic#ReplaceRouteTableAssociationOutput$AssociationState */ =>  {
                let var_804 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_route_table_association_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association_state(var_804);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_replace_transit_gateway_route(
    inp: &[u8],
    mut builder: crate::output::replace_transit_gateway_route_output::Builder,
) -> Result<
    crate::output::replace_transit_gateway_route_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReplaceTransitGatewayRouteResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReplaceTransitGatewayRouteResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("route") /* Route com.amazonaws.ec2.synthetic#ReplaceTransitGatewayRouteOutput$Route */ =>  {
                let var_805 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route(var_805);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_request_spot_fleet(
    inp: &[u8],
    mut builder: crate::output::request_spot_fleet_output::Builder,
) -> Result<crate::output::request_spot_fleet_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RequestSpotFleetResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RequestSpotFleetResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2.synthetic#RequestSpotFleetOutput$SpotFleetRequestId */ =>  {
                let var_806 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_806);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_request_spot_instances(
    inp: &[u8],
    mut builder: crate::output::request_spot_instances_output::Builder,
) -> Result<crate::output::request_spot_instances_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RequestSpotInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RequestSpotInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotInstanceRequestSet") /* SpotInstanceRequests com.amazonaws.ec2.synthetic#RequestSpotInstancesOutput$SpotInstanceRequests */ =>  {
                let var_807 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_instance_request_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_instance_requests(var_807);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reset_address_attribute(
    inp: &[u8],
    mut builder: crate::output::reset_address_attribute_output::Builder,
) -> Result<crate::output::reset_address_attribute_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ResetAddressAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ResetAddressAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("address") /* Address com.amazonaws.ec2.synthetic#ResetAddressAttributeOutput$Address */ =>  {
                let var_808 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_address_attribute(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_address(var_808);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reset_ebs_default_kms_key_id(
    inp: &[u8],
    mut builder: crate::output::reset_ebs_default_kms_key_id_output::Builder,
) -> Result<
    crate::output::reset_ebs_default_kms_key_id_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ResetEbsDefaultKmsKeyIdResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ResetEbsDefaultKmsKeyIdResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2.synthetic#ResetEbsDefaultKmsKeyIdOutput$KmsKeyId */ =>  {
                let var_809 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_809);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_reset_fpga_image_attribute(
    inp: &[u8],
    mut builder: crate::output::reset_fpga_image_attribute_output::Builder,
) -> Result<
    crate::output::reset_fpga_image_attribute_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ResetFpgaImageAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ResetFpgaImageAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#ResetFpgaImageAttributeOutput$Return */ =>  {
                let var_810 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_810);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_address_to_classic(
    inp: &[u8],
    mut builder: crate::output::restore_address_to_classic_output::Builder,
) -> Result<
    crate::output::restore_address_to_classic_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreAddressToClassicResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreAddressToClassicResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2.synthetic#RestoreAddressToClassicOutput$PublicIp */ =>  {
                let var_811 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_811);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#RestoreAddressToClassicOutput$Status */ =>  {
                let var_812 =
                    Some(
                        Result::<crate::model::Status, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Status::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_812);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_image_from_recycle_bin(
    inp: &[u8],
    mut builder: crate::output::restore_image_from_recycle_bin_output::Builder,
) -> Result<
    crate::output::restore_image_from_recycle_bin_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreImageFromRecycleBinResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreImageFromRecycleBinResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#RestoreImageFromRecycleBinOutput$Return */ =>  {
                let var_813 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_813);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_managed_prefix_list_version(
    inp: &[u8],
    mut builder: crate::output::restore_managed_prefix_list_version_output::Builder,
) -> Result<
    crate::output::restore_managed_prefix_list_version_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreManagedPrefixListVersionResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreManagedPrefixListVersionResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixList") /* PrefixList com.amazonaws.ec2.synthetic#RestoreManagedPrefixListVersionOutput$PrefixList */ =>  {
                let var_814 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_managed_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list(var_814);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_snapshot_from_recycle_bin(
    inp: &[u8],
    mut builder: crate::output::restore_snapshot_from_recycle_bin_output::Builder,
) -> Result<
    crate::output::restore_snapshot_from_recycle_bin_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreSnapshotFromRecycleBinResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreSnapshotFromRecycleBinResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$SnapshotId */ =>  {
                let var_815 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_815);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$OutpostArn */ =>  {
                let var_816 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_816);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$Description */ =>  {
                let var_817 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_817);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$Encrypted */ =>  {
                let var_818 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_818);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$OwnerId */ =>  {
                let var_819 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_819);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$Progress */ =>  {
                let var_820 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_820);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$StartTime */ =>  {
                let var_821 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_821);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$State */ =>  {
                let var_822 =
                    Some(
                        Result::<crate::model::SnapshotState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SnapshotState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_822);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$VolumeId */ =>  {
                let var_823 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_823);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2.synthetic#RestoreSnapshotFromRecycleBinOutput$VolumeSize */ =>  {
                let var_824 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_824);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_restore_snapshot_tier(
    inp: &[u8],
    mut builder: crate::output::restore_snapshot_tier_output::Builder,
) -> Result<crate::output::restore_snapshot_tier_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreSnapshotTierResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreSnapshotTierResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2.synthetic#RestoreSnapshotTierOutput$SnapshotId */ =>  {
                let var_825 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_825);
            }
            ,
            s if s.matches("restoreStartTime") /* RestoreStartTime com.amazonaws.ec2.synthetic#RestoreSnapshotTierOutput$RestoreStartTime */ =>  {
                let var_826 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_restore_start_time(var_826);
            }
            ,
            s if s.matches("restoreDuration") /* RestoreDuration com.amazonaws.ec2.synthetic#RestoreSnapshotTierOutput$RestoreDuration */ =>  {
                let var_827 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_restore_duration(var_827);
            }
            ,
            s if s.matches("isPermanentRestore") /* IsPermanentRestore com.amazonaws.ec2.synthetic#RestoreSnapshotTierOutput$IsPermanentRestore */ =>  {
                let var_828 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_permanent_restore(var_828);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_revoke_client_vpn_ingress(
    inp: &[u8],
    mut builder: crate::output::revoke_client_vpn_ingress_output::Builder,
) -> Result<
    crate::output::revoke_client_vpn_ingress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RevokeClientVpnIngressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RevokeClientVpnIngressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2.synthetic#RevokeClientVpnIngressOutput$Status */ =>  {
                let var_829 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_authorization_rule_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_829);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_revoke_security_group_egress(
    inp: &[u8],
    mut builder: crate::output::revoke_security_group_egress_output::Builder,
) -> Result<
    crate::output::revoke_security_group_egress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RevokeSecurityGroupEgressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RevokeSecurityGroupEgressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#RevokeSecurityGroupEgressOutput$Return */ =>  {
                let var_830 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_830);
            }
            ,
            s if s.matches("unknownIpPermissionSet") /* UnknownIpPermissions com.amazonaws.ec2.synthetic#RevokeSecurityGroupEgressOutput$UnknownIpPermissions */ =>  {
                let var_831 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unknown_ip_permissions(var_831);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_revoke_security_group_ingress(
    inp: &[u8],
    mut builder: crate::output::revoke_security_group_ingress_output::Builder,
) -> Result<
    crate::output::revoke_security_group_ingress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RevokeSecurityGroupIngressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RevokeSecurityGroupIngressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#RevokeSecurityGroupIngressOutput$Return */ =>  {
                let var_832 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_832);
            }
            ,
            s if s.matches("unknownIpPermissionSet") /* UnknownIpPermissions com.amazonaws.ec2.synthetic#RevokeSecurityGroupIngressOutput$UnknownIpPermissions */ =>  {
                let var_833 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unknown_ip_permissions(var_833);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_run_instances(
    inp: &[u8],
    mut builder: crate::output::run_instances_output::Builder,
) -> Result<crate::output::run_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RunInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RunInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2.synthetic#RunInstancesOutput$Groups */ =>  {
                let var_834 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_834);
            }
            ,
            s if s.matches("instancesSet") /* Instances com.amazonaws.ec2.synthetic#RunInstancesOutput$Instances */ =>  {
                let var_835 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_835);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2.synthetic#RunInstancesOutput$OwnerId */ =>  {
                let var_836 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_836);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2.synthetic#RunInstancesOutput$RequesterId */ =>  {
                let var_837 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_837);
            }
            ,
            s if s.matches("reservationId") /* ReservationId com.amazonaws.ec2.synthetic#RunInstancesOutput$ReservationId */ =>  {
                let var_838 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_id(var_838);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_run_scheduled_instances(
    inp: &[u8],
    mut builder: crate::output::run_scheduled_instances_output::Builder,
) -> Result<crate::output::run_scheduled_instances_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RunScheduledInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RunScheduledInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceIdSet") /* InstanceIdSet com.amazonaws.ec2.synthetic#RunScheduledInstancesOutput$InstanceIdSet */ =>  {
                let var_839 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_id_set(var_839);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_search_local_gateway_routes(
    inp: &[u8],
    mut builder: crate::output::search_local_gateway_routes_output::Builder,
) -> Result<
    crate::output::search_local_gateway_routes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("SearchLocalGatewayRoutesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected SearchLocalGatewayRoutesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeSet") /* Routes com.amazonaws.ec2.synthetic#SearchLocalGatewayRoutesOutput$Routes */ =>  {
                let var_840 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_route_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_840);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#SearchLocalGatewayRoutesOutput$NextToken */ =>  {
                let var_841 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_841);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_search_transit_gateway_multicast_groups(
    inp: &[u8],
    mut builder: crate::output::search_transit_gateway_multicast_groups_output::Builder,
) -> Result<
    crate::output::search_transit_gateway_multicast_groups_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("SearchTransitGatewayMulticastGroupsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected SearchTransitGatewayMulticastGroupsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("multicastGroups") /* MulticastGroups com.amazonaws.ec2.synthetic#SearchTransitGatewayMulticastGroupsOutput$MulticastGroups */ =>  {
                let var_842 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_multicast_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_multicast_groups(var_842);
            }
            ,
            s if s.matches("nextToken") /* NextToken com.amazonaws.ec2.synthetic#SearchTransitGatewayMulticastGroupsOutput$NextToken */ =>  {
                let var_843 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_843);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_search_transit_gateway_routes(
    inp: &[u8],
    mut builder: crate::output::search_transit_gateway_routes_output::Builder,
) -> Result<
    crate::output::search_transit_gateway_routes_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("SearchTransitGatewayRoutesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected SearchTransitGatewayRoutesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("routeSet") /* Routes com.amazonaws.ec2.synthetic#SearchTransitGatewayRoutesOutput$Routes */ =>  {
                let var_844 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_route_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_844);
            }
            ,
            s if s.matches("additionalRoutesAvailable") /* AdditionalRoutesAvailable com.amazonaws.ec2.synthetic#SearchTransitGatewayRoutesOutput$AdditionalRoutesAvailable */ =>  {
                let var_845 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_additional_routes_available(var_845);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_start_instances(
    inp: &[u8],
    mut builder: crate::output::start_instances_output::Builder,
) -> Result<crate::output::start_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StartInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StartInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* StartingInstances com.amazonaws.ec2.synthetic#StartInstancesOutput$StartingInstances */ =>  {
                let var_846 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_state_change_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_starting_instances(var_846);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_start_network_insights_access_scope_analysis(
    inp: &[u8],
    mut builder: crate::output::start_network_insights_access_scope_analysis_output::Builder,
) -> Result<
    crate::output::start_network_insights_access_scope_analysis_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StartNetworkInsightsAccessScopeAnalysisResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StartNetworkInsightsAccessScopeAnalysisResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysis") /* NetworkInsightsAccessScopeAnalysis com.amazonaws.ec2.synthetic#StartNetworkInsightsAccessScopeAnalysisOutput$NetworkInsightsAccessScopeAnalysis */ =>  {
                let var_847 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_access_scope_analysis(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis(var_847);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_start_network_insights_analysis(
    inp: &[u8],
    mut builder: crate::output::start_network_insights_analysis_output::Builder,
) -> Result<
    crate::output::start_network_insights_analysis_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StartNetworkInsightsAnalysisResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StartNetworkInsightsAnalysisResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAnalysis") /* NetworkInsightsAnalysis com.amazonaws.ec2.synthetic#StartNetworkInsightsAnalysisOutput$NetworkInsightsAnalysis */ =>  {
                let var_848 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_insights_analysis(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_insights_analysis(var_848);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    inp: &[u8],
    mut builder: crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder,
) -> Result<
    crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StartVpcEndpointServicePrivateDnsVerificationResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StartVpcEndpointServicePrivateDnsVerificationResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* ReturnValue com.amazonaws.ec2.synthetic#StartVpcEndpointServicePrivateDnsVerificationOutput$ReturnValue */ =>  {
                let var_849 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return_value(var_849);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_stop_instances(
    inp: &[u8],
    mut builder: crate::output::stop_instances_output::Builder,
) -> Result<crate::output::stop_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("StopInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected StopInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* StoppingInstances com.amazonaws.ec2.synthetic#StopInstancesOutput$StoppingInstances */ =>  {
                let var_850 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_state_change_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stopping_instances(var_850);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_terminate_client_vpn_connections(
    inp: &[u8],
    mut builder: crate::output::terminate_client_vpn_connections_output::Builder,
) -> Result<
    crate::output::terminate_client_vpn_connections_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("TerminateClientVpnConnectionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected TerminateClientVpnConnectionsResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2.synthetic#TerminateClientVpnConnectionsOutput$ClientVpnEndpointId */ =>  {
                let var_851 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_851);
            }
            ,
            s if s.matches("username") /* Username com.amazonaws.ec2.synthetic#TerminateClientVpnConnectionsOutput$Username */ =>  {
                let var_852 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_username(var_852);
            }
            ,
            s if s.matches("connectionStatuses") /* ConnectionStatuses com.amazonaws.ec2.synthetic#TerminateClientVpnConnectionsOutput$ConnectionStatuses */ =>  {
                let var_853 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_terminate_connection_status_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_statuses(var_853);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_terminate_instances(
    inp: &[u8],
    mut builder: crate::output::terminate_instances_output::Builder,
) -> Result<crate::output::terminate_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("TerminateInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected TerminateInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* TerminatingInstances com.amazonaws.ec2.synthetic#TerminateInstancesOutput$TerminatingInstances */ =>  {
                let var_854 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_state_change_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_terminating_instances(var_854);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_unassign_ipv6_addresses(
    inp: &[u8],
    mut builder: crate::output::unassign_ipv6_addresses_output::Builder,
) -> Result<crate::output::unassign_ipv6_addresses_output::Builder, aws_smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UnassignIpv6AddressesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UnassignIpv6AddressesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2.synthetic#UnassignIpv6AddressesOutput$NetworkInterfaceId */ =>  {
                let var_855 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_855);
            }
            ,
            s if s.matches("unassignedIpv6Addresses") /* UnassignedIpv6Addresses com.amazonaws.ec2.synthetic#UnassignIpv6AddressesOutput$UnassignedIpv6Addresses */ =>  {
                let var_856 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unassigned_ipv6_addresses(var_856);
            }
            ,
            s if s.matches("unassignedIpv6PrefixSet") /* UnassignedIpv6Prefixes com.amazonaws.ec2.synthetic#UnassignIpv6AddressesOutput$UnassignedIpv6Prefixes */ =>  {
                let var_857 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_unassigned_ipv6_prefixes(var_857);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_unmonitor_instances(
    inp: &[u8],
    mut builder: crate::output::unmonitor_instances_output::Builder,
) -> Result<crate::output::unmonitor_instances_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UnmonitorInstancesResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UnmonitorInstancesResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instancesSet") /* InstanceMonitorings com.amazonaws.ec2.synthetic#UnmonitorInstancesOutput$InstanceMonitorings */ =>  {
                let var_858 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_monitoring_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_monitorings(var_858);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_update_security_group_rule_descriptions_egress(
    inp: &[u8],
    mut builder: crate::output::update_security_group_rule_descriptions_egress_output::Builder,
) -> Result<
    crate::output::update_security_group_rule_descriptions_egress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateSecurityGroupRuleDescriptionsEgressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateSecurityGroupRuleDescriptionsEgressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#UpdateSecurityGroupRuleDescriptionsEgressOutput$Return */ =>  {
                let var_859 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_859);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    inp: &[u8],
    mut builder: crate::output::update_security_group_rule_descriptions_ingress_output::Builder,
) -> Result<
    crate::output::update_security_group_rule_descriptions_ingress_output::Builder,
    aws_smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("UpdateSecurityGroupRuleDescriptionsIngressResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected UpdateSecurityGroupRuleDescriptionsIngressResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("return") /* Return com.amazonaws.ec2.synthetic#UpdateSecurityGroupRuleDescriptionsIngressOutput$Return */ =>  {
                let var_860 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_return(var_860);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_crate_operation_withdraw_byoip_cidr(
    inp: &[u8],
    mut builder: crate::output::withdraw_byoip_cidr_output::Builder,
) -> Result<crate::output::withdraw_byoip_cidr_output::Builder, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("WithdrawByoipCidrResponse")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected WithdrawByoipCidrResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("byoipCidr") /* ByoipCidr com.amazonaws.ec2.synthetic#WithdrawByoipCidrOutput$ByoipCidr */ =>  {
                let var_861 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_byoip_cidr(var_861);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

pub fn deser_structure_crate_model_transit_gateway_multicast_domain_associations(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayMulticastDomainAssociations, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDomainAssociations::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$TransitGatewayMulticastDomainId */ =>  {
                let var_862 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_862);
            }
            ,
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$TransitGatewayAttachmentId */ =>  {
                let var_863 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_863);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$ResourceId */ =>  {
                let var_864 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_864);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$ResourceType */ =>  {
                let var_865 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_865);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$ResourceOwnerId */ =>  {
                let var_866 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_866);
            }
            ,
            s if s.matches("subnets") /* Subnets com.amazonaws.ec2#TransitGatewayMulticastDomainAssociations$Subnets */ =>  {
                let var_867 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_subnet_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnets(var_867);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_peering_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayPeeringAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayPeeringAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayPeeringAttachment$TransitGatewayAttachmentId */ =>  {
                let var_868 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_868);
            }
            ,
            s if s.matches("requesterTgwInfo") /* RequesterTgwInfo com.amazonaws.ec2#TransitGatewayPeeringAttachment$RequesterTgwInfo */ =>  {
                let var_869 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_peering_tgw_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_requester_tgw_info(var_869);
            }
            ,
            s if s.matches("accepterTgwInfo") /* AccepterTgwInfo com.amazonaws.ec2#TransitGatewayPeeringAttachment$AccepterTgwInfo */ =>  {
                let var_870 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_peering_tgw_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accepter_tgw_info(var_870);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#TransitGatewayPeeringAttachment$Status */ =>  {
                let var_871 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_peering_attachment_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_871);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayPeeringAttachment$State */ =>  {
                let var_872 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_872);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayPeeringAttachment$CreationTime */ =>  {
                let var_873 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_873);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayPeeringAttachment$Tags */ =>  {
                let var_874 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_874);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_vpc_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayVpcAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayVpcAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayVpcAttachment$TransitGatewayAttachmentId */ =>  {
                let var_875 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_875);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGatewayVpcAttachment$TransitGatewayId */ =>  {
                let var_876 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_876);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#TransitGatewayVpcAttachment$VpcId */ =>  {
                let var_877 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_877);
            }
            ,
            s if s.matches("vpcOwnerId") /* VpcOwnerId com.amazonaws.ec2#TransitGatewayVpcAttachment$VpcOwnerId */ =>  {
                let var_878 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_owner_id(var_878);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayVpcAttachment$State */ =>  {
                let var_879 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_879);
            }
            ,
            s if s.matches("subnetIds") /* SubnetIds com.amazonaws.ec2#TransitGatewayVpcAttachment$SubnetIds */ =>  {
                let var_880 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ids(var_880);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayVpcAttachment$CreationTime */ =>  {
                let var_881 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_881);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#TransitGatewayVpcAttachment$Options */ =>  {
                let var_882 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_882);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayVpcAttachment$Tags */ =>  {
                let var_883 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_883);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_unsuccessful_item_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UnsuccessfulItem>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UnsuccessfulItemSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_unsuccessful_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_vpc_peering_connection(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcPeeringConnection, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcPeeringConnection::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accepterVpcInfo") /* AccepterVpcInfo com.amazonaws.ec2#VpcPeeringConnection$AccepterVpcInfo */ =>  {
                let var_884 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection_vpc_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accepter_vpc_info(var_884);
            }
            ,
            s if s.matches("expirationTime") /* ExpirationTime com.amazonaws.ec2#VpcPeeringConnection$ExpirationTime */ =>  {
                let var_885 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_expiration_time(var_885);
            }
            ,
            s if s.matches("requesterVpcInfo") /* RequesterVpcInfo com.amazonaws.ec2#VpcPeeringConnection$RequesterVpcInfo */ =>  {
                let var_886 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection_vpc_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_requester_vpc_info(var_886);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#VpcPeeringConnection$Status */ =>  {
                let var_887 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection_state_reason(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_887);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpcPeeringConnection$Tags */ =>  {
                let var_888 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_888);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#VpcPeeringConnection$VpcPeeringConnectionId */ =>  {
                let var_889 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_889);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_byoip_cidr(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ByoipCidr, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ByoipCidr::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#ByoipCidr$Cidr */ =>  {
                let var_890 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_890);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ByoipCidr$Description */ =>  {
                let var_891 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_891);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ByoipCidr$StatusMessage */ =>  {
                let var_892 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_892);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ByoipCidr$State */ =>  {
                let var_893 =
                    Some(
                        Result::<crate::model::ByoipCidrState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ByoipCidrState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_893);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_response_host_id_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ResponseHostIdList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_ipam_pool_allocation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamPoolAllocation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamPoolAllocation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#IpamPoolAllocation$Cidr */ =>  {
                let var_894 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_894);
            }
            ,
            s if s.matches("ipamPoolAllocationId") /* IpamPoolAllocationId com.amazonaws.ec2#IpamPoolAllocation$IpamPoolAllocationId */ =>  {
                let var_895 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_allocation_id(var_895);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#IpamPoolAllocation$Description */ =>  {
                let var_896 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_896);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamPoolAllocation$ResourceId */ =>  {
                let var_897 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_897);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamPoolAllocation$ResourceType */ =>  {
                let var_898 =
                    Some(
                        Result::<crate::model::IpamPoolAllocationResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamPoolAllocationResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_898);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamPoolAllocation$ResourceRegion */ =>  {
                let var_899 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_899);
            }
            ,
            s if s.matches("resourceOwner") /* ResourceOwner com.amazonaws.ec2#IpamPoolAllocation$ResourceOwner */ =>  {
                let var_900 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner(var_900);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_client_vpn_security_group_id_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClientVpnSecurityGroupIdSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6AddressList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ip_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpPrefixList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_assigned_private_ip_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AssignedPrivateIpAddress>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AssignedPrivateIpAddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_assigned_private_ip_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv4_prefixes_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv4PrefixSpecification>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv4PrefixesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv4_prefix_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_association_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AssociationStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AssociationStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#AssociationStatus$Code */ =>  {
                let var_901 =
                    Some(
                        Result::<crate::model::AssociationStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AssociationStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_901);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#AssociationStatus$Message */ =>  {
                let var_902 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_902);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_iam_instance_profile_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IamInstanceProfileAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IamInstanceProfileAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#IamInstanceProfileAssociation$AssociationId */ =>  {
                let var_903 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_903);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#IamInstanceProfileAssociation$InstanceId */ =>  {
                let var_904 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_904);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#IamInstanceProfileAssociation$IamInstanceProfile */ =>  {
                let var_905 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_905);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IamInstanceProfileAssociation$State */ =>  {
                let var_906 =
                    Some(
                        Result::<crate::model::IamInstanceProfileAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IamInstanceProfileAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_906);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#IamInstanceProfileAssociation$Timestamp */ =>  {
                let var_907 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_907);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_event_window(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceEventWindow, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceEventWindow::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindowId") /* InstanceEventWindowId com.amazonaws.ec2#InstanceEventWindow$InstanceEventWindowId */ =>  {
                let var_908 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_event_window_id(var_908);
            }
            ,
            s if s.matches("timeRangeSet") /* TimeRanges com.amazonaws.ec2#InstanceEventWindow$TimeRanges */ =>  {
                let var_909 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_event_window_time_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_time_ranges(var_909);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#InstanceEventWindow$Name */ =>  {
                let var_910 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_910);
            }
            ,
            s if s.matches("cronExpression") /* CronExpression com.amazonaws.ec2#InstanceEventWindow$CronExpression */ =>  {
                let var_911 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cron_expression(var_911);
            }
            ,
            s if s.matches("associationTarget") /* AssociationTarget com.amazonaws.ec2#InstanceEventWindow$AssociationTarget */ =>  {
                let var_912 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_event_window_association_target(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association_target(var_912);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceEventWindow$State */ =>  {
                let var_913 =
                    Some(
                        Result::<crate::model::InstanceEventWindowState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceEventWindowState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_913);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#InstanceEventWindow$Tags */ =>  {
                let var_914 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_914);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_route_table_association_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RouteTableAssociationState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RouteTableAssociationState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#RouteTableAssociationState$State */ =>  {
                let var_915 =
                    Some(
                        Result::<crate::model::RouteTableAssociationStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RouteTableAssociationStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_915);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#RouteTableAssociationState$StatusMessage */ =>  {
                let var_916 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_916);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet_ipv6_cidr_block_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SubnetIpv6CidrBlockAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SubnetIpv6CidrBlockAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#SubnetIpv6CidrBlockAssociation$AssociationId */ =>  {
                let var_917 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_917);
            }
            ,
            s if s.matches("ipv6CidrBlock") /* Ipv6CidrBlock com.amazonaws.ec2#SubnetIpv6CidrBlockAssociation$Ipv6CidrBlock */ =>  {
                let var_918 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block(var_918);
            }
            ,
            s if s.matches("ipv6CidrBlockState") /* Ipv6CidrBlockState com.amazonaws.ec2#SubnetIpv6CidrBlockAssociation$Ipv6CidrBlockState */ =>  {
                let var_919 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_cidr_block_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_state(var_919);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayAssociation$TransitGatewayRouteTableId */ =>  {
                let var_920 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_920);
            }
            ,
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayAssociation$TransitGatewayAttachmentId */ =>  {
                let var_921 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_921);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayAssociation$ResourceId */ =>  {
                let var_922 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_922);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayAssociation$ResourceType */ =>  {
                let var_923 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_923);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayAssociation$State */ =>  {
                let var_924 =
                    Some(
                        Result::<crate::model::TransitGatewayAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_924);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_trunk_interface_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrunkInterfaceAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrunkInterfaceAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#TrunkInterfaceAssociation$AssociationId */ =>  {
                let var_925 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_925);
            }
            ,
            s if s.matches("branchInterfaceId") /* BranchInterfaceId com.amazonaws.ec2#TrunkInterfaceAssociation$BranchInterfaceId */ =>  {
                let var_926 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_branch_interface_id(var_926);
            }
            ,
            s if s.matches("trunkInterfaceId") /* TrunkInterfaceId com.amazonaws.ec2#TrunkInterfaceAssociation$TrunkInterfaceId */ =>  {
                let var_927 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_trunk_interface_id(var_927);
            }
            ,
            s if s.matches("interfaceProtocol") /* InterfaceProtocol com.amazonaws.ec2#TrunkInterfaceAssociation$InterfaceProtocol */ =>  {
                let var_928 =
                    Some(
                        Result::<crate::model::InterfaceProtocolType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InterfaceProtocolType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_protocol(var_928);
            }
            ,
            s if s.matches("vlanId") /* VlanId com.amazonaws.ec2#TrunkInterfaceAssociation$VlanId */ =>  {
                let var_929 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vlan_id(var_929);
            }
            ,
            s if s.matches("greKey") /* GreKey com.amazonaws.ec2#TrunkInterfaceAssociation$GreKey */ =>  {
                let var_930 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_gre_key(var_930);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TrunkInterfaceAssociation$Tags */ =>  {
                let var_931 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_931);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_ipv6_cidr_block_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcIpv6CidrBlockAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcIpv6CidrBlockAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#VpcIpv6CidrBlockAssociation$AssociationId */ =>  {
                let var_932 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_932);
            }
            ,
            s if s.matches("ipv6CidrBlock") /* Ipv6CidrBlock com.amazonaws.ec2#VpcIpv6CidrBlockAssociation$Ipv6CidrBlock */ =>  {
                let var_933 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block(var_933);
            }
            ,
            s if s.matches("ipv6CidrBlockState") /* Ipv6CidrBlockState com.amazonaws.ec2#VpcIpv6CidrBlockAssociation$Ipv6CidrBlockState */ =>  {
                let var_934 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_cidr_block_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_state(var_934);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2#VpcIpv6CidrBlockAssociation$NetworkBorderGroup */ =>  {
                let var_935 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_935);
            }
            ,
            s if s.matches("ipv6Pool") /* Ipv6Pool com.amazonaws.ec2#VpcIpv6CidrBlockAssociation$Ipv6Pool */ =>  {
                let var_936 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_pool(var_936);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_cidr_block_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcCidrBlockAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcCidrBlockAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#VpcCidrBlockAssociation$AssociationId */ =>  {
                let var_937 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_937);
            }
            ,
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#VpcCidrBlockAssociation$CidrBlock */ =>  {
                let var_938 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_938);
            }
            ,
            s if s.matches("cidrBlockState") /* CidrBlockState com.amazonaws.ec2#VpcCidrBlockAssociation$CidrBlockState */ =>  {
                let var_939 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_cidr_block_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_state(var_939);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#VpcAttachment$State */ =>  {
                let var_940 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_940);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcAttachment$VpcId */ =>  {
                let var_941 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_941);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_authorization_rule_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnAuthorizationRuleStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnAuthorizationRuleStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientVpnAuthorizationRuleStatus$Code */ =>  {
                let var_942 =
                    Some(
                        Result::<crate::model::ClientVpnAuthorizationRuleStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnAuthorizationRuleStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_942);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientVpnAuthorizationRuleStatus$Message */ =>  {
                let var_943 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_943);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_security_group_rule_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SecurityGroupRule>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SecurityGroupRuleList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_security_group_rule(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_bundle_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BundleTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BundleTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bundleId") /* BundleId com.amazonaws.ec2#BundleTask$BundleId */ =>  {
                let var_944 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bundle_id(var_944);
            }
            ,
            s if s.matches("error") /* BundleTaskError com.amazonaws.ec2#BundleTask$BundleTaskError */ =>  {
                let var_945 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_bundle_task_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bundle_task_error(var_945);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#BundleTask$InstanceId */ =>  {
                let var_946 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_946);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#BundleTask$Progress */ =>  {
                let var_947 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_947);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#BundleTask$StartTime */ =>  {
                let var_948 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_948);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#BundleTask$State */ =>  {
                let var_949 =
                    Some(
                        Result::<crate::model::BundleTaskState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BundleTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_949);
            }
            ,
            s if s.matches("storage") /* Storage com.amazonaws.ec2#BundleTask$Storage */ =>  {
                let var_950 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_storage(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage(var_950);
            }
            ,
            s if s.matches("updateTime") /* UpdateTime com.amazonaws.ec2#BundleTask$UpdateTime */ =>  {
                let var_951 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_update_time(var_951);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_capacity_reservation_fleet_cancellation_state_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::CapacityReservationFleetCancellationState>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CapacityReservationFleetCancellationStateSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_capacity_reservation_fleet_cancellation_state(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_failed_capacity_reservation_fleet_cancellation_result_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::FailedCapacityReservationFleetCancellationResult>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FailedCapacityReservationFleetCancellationResultSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_failed_capacity_reservation_fleet_cancellation_result(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_instances_listing_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ReservedInstancesListing>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstancesListingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances_listing(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_cancel_spot_fleet_requests_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CancelSpotFleetRequestsSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_cancel_spot_fleet_requests_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_cancel_spot_fleet_requests_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CancelSpotFleetRequestsErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_cancel_spot_fleet_requests_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_cancelled_spot_instance_request_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::CancelledSpotInstanceRequest>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CancelledSpotInstanceRequestList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_cancelled_spot_instance_request(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_tag_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TagList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_capacity_reservation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#CapacityReservation$CapacityReservationId */ =>  {
                let var_952 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_952);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#CapacityReservation$OwnerId */ =>  {
                let var_953 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_953);
            }
            ,
            s if s.matches("capacityReservationArn") /* CapacityReservationArn com.amazonaws.ec2#CapacityReservation$CapacityReservationArn */ =>  {
                let var_954 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_arn(var_954);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#CapacityReservation$AvailabilityZoneId */ =>  {
                let var_955 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_955);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#CapacityReservation$InstanceType */ =>  {
                let var_956 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_956);
            }
            ,
            s if s.matches("instancePlatform") /* InstancePlatform com.amazonaws.ec2#CapacityReservation$InstancePlatform */ =>  {
                let var_957 =
                    Some(
                        Result::<crate::model::CapacityReservationInstancePlatform, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationInstancePlatform::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_platform(var_957);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#CapacityReservation$AvailabilityZone */ =>  {
                let var_958 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_958);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#CapacityReservation$Tenancy */ =>  {
                let var_959 =
                    Some(
                        Result::<crate::model::CapacityReservationTenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationTenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_959);
            }
            ,
            s if s.matches("totalInstanceCount") /* TotalInstanceCount com.amazonaws.ec2#CapacityReservation$TotalInstanceCount */ =>  {
                let var_960 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_instance_count(var_960);
            }
            ,
            s if s.matches("availableInstanceCount") /* AvailableInstanceCount com.amazonaws.ec2#CapacityReservation$AvailableInstanceCount */ =>  {
                let var_961 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_instance_count(var_961);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#CapacityReservation$EbsOptimized */ =>  {
                let var_962 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_962);
            }
            ,
            s if s.matches("ephemeralStorage") /* EphemeralStorage com.amazonaws.ec2#CapacityReservation$EphemeralStorage */ =>  {
                let var_963 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ephemeral_storage(var_963);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#CapacityReservation$State */ =>  {
                let var_964 =
                    Some(
                        Result::<crate::model::CapacityReservationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_964);
            }
            ,
            s if s.matches("startDate") /* StartDate com.amazonaws.ec2#CapacityReservation$StartDate */ =>  {
                let var_965 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_date(var_965);
            }
            ,
            s if s.matches("endDate") /* EndDate com.amazonaws.ec2#CapacityReservation$EndDate */ =>  {
                let var_966 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end_date(var_966);
            }
            ,
            s if s.matches("endDateType") /* EndDateType com.amazonaws.ec2#CapacityReservation$EndDateType */ =>  {
                let var_967 =
                    Some(
                        Result::<crate::model::EndDateType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EndDateType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_end_date_type(var_967);
            }
            ,
            s if s.matches("instanceMatchCriteria") /* InstanceMatchCriteria com.amazonaws.ec2#CapacityReservation$InstanceMatchCriteria */ =>  {
                let var_968 =
                    Some(
                        Result::<crate::model::InstanceMatchCriteria, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMatchCriteria::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_match_criteria(var_968);
            }
            ,
            s if s.matches("createDate") /* CreateDate com.amazonaws.ec2#CapacityReservation$CreateDate */ =>  {
                let var_969 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_969);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#CapacityReservation$Tags */ =>  {
                let var_970 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_970);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#CapacityReservation$OutpostArn */ =>  {
                let var_971 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_971);
            }
            ,
            s if s.matches("capacityReservationFleetId") /* CapacityReservationFleetId com.amazonaws.ec2#CapacityReservation$CapacityReservationFleetId */ =>  {
                let var_972 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_id(var_972);
            }
            ,
            s if s.matches("placementGroupArn") /* PlacementGroupArn com.amazonaws.ec2#CapacityReservation$PlacementGroupArn */ =>  {
                let var_973 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_placement_group_arn(var_973);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_fleet_capacity_reservation_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FleetCapacityReservation>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FleetCapacityReservationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fleet_capacity_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_carrier_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CarrierGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CarrierGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierGatewayId") /* CarrierGatewayId com.amazonaws.ec2#CarrierGateway$CarrierGatewayId */ =>  {
                let var_974 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_gateway_id(var_974);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#CarrierGateway$VpcId */ =>  {
                let var_975 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_975);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#CarrierGateway$State */ =>  {
                let var_976 =
                    Some(
                        Result::<crate::model::CarrierGatewayState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CarrierGatewayState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_976);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#CarrierGateway$OwnerId */ =>  {
                let var_977 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_977);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#CarrierGateway$Tags */ =>  {
                let var_978 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_978);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_endpoint_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnEndpointStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnEndpointStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientVpnEndpointStatus$Code */ =>  {
                let var_979 =
                    Some(
                        Result::<crate::model::ClientVpnEndpointStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnEndpointStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_979);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientVpnEndpointStatus$Message */ =>  {
                let var_980 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_980);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_route_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnRouteStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnRouteStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientVpnRouteStatus$Code */ =>  {
                let var_981 =
                    Some(
                        Result::<crate::model::ClientVpnRouteStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnRouteStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_981);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientVpnRouteStatus$Message */ =>  {
                let var_982 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_982);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_customer_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CustomerGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CustomerGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bgpAsn") /* BgpAsn com.amazonaws.ec2#CustomerGateway$BgpAsn */ =>  {
                let var_983 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bgp_asn(var_983);
            }
            ,
            s if s.matches("customerGatewayId") /* CustomerGatewayId com.amazonaws.ec2#CustomerGateway$CustomerGatewayId */ =>  {
                let var_984 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_gateway_id(var_984);
            }
            ,
            s if s.matches("ipAddress") /* IpAddress com.amazonaws.ec2#CustomerGateway$IpAddress */ =>  {
                let var_985 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address(var_985);
            }
            ,
            s if s.matches("certificateArn") /* CertificateArn com.amazonaws.ec2#CustomerGateway$CertificateArn */ =>  {
                let var_986 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_arn(var_986);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#CustomerGateway$State */ =>  {
                let var_987 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_987);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#CustomerGateway$Type */ =>  {
                let var_988 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_988);
            }
            ,
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#CustomerGateway$DeviceName */ =>  {
                let var_989 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_989);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#CustomerGateway$Tags */ =>  {
                let var_990 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_990);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Subnet, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Subnet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Subnet$AvailabilityZone */ =>  {
                let var_991 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_991);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#Subnet$AvailabilityZoneId */ =>  {
                let var_992 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_992);
            }
            ,
            s if s.matches("availableIpAddressCount") /* AvailableIpAddressCount com.amazonaws.ec2#Subnet$AvailableIpAddressCount */ =>  {
                let var_993 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_ip_address_count(var_993);
            }
            ,
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#Subnet$CidrBlock */ =>  {
                let var_994 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_994);
            }
            ,
            s if s.matches("defaultForAz") /* DefaultForAz com.amazonaws.ec2#Subnet$DefaultForAz */ =>  {
                let var_995 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_for_az(var_995);
            }
            ,
            s if s.matches("enableLniAtDeviceIndex") /* EnableLniAtDeviceIndex com.amazonaws.ec2#Subnet$EnableLniAtDeviceIndex */ =>  {
                let var_996 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_lni_at_device_index(var_996);
            }
            ,
            s if s.matches("mapPublicIpOnLaunch") /* MapPublicIpOnLaunch com.amazonaws.ec2#Subnet$MapPublicIpOnLaunch */ =>  {
                let var_997 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_map_public_ip_on_launch(var_997);
            }
            ,
            s if s.matches("mapCustomerOwnedIpOnLaunch") /* MapCustomerOwnedIpOnLaunch com.amazonaws.ec2#Subnet$MapCustomerOwnedIpOnLaunch */ =>  {
                let var_998 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_map_customer_owned_ip_on_launch(var_998);
            }
            ,
            s if s.matches("customerOwnedIpv4Pool") /* CustomerOwnedIpv4Pool com.amazonaws.ec2#Subnet$CustomerOwnedIpv4Pool */ =>  {
                let var_999 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ipv4_pool(var_999);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Subnet$State */ =>  {
                let var_1000 =
                    Some(
                        Result::<crate::model::SubnetState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SubnetState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1000);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#Subnet$SubnetId */ =>  {
                let var_1001 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_1001);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#Subnet$VpcId */ =>  {
                let var_1002 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1002);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Subnet$OwnerId */ =>  {
                let var_1003 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1003);
            }
            ,
            s if s.matches("assignIpv6AddressOnCreation") /* AssignIpv6AddressOnCreation com.amazonaws.ec2#Subnet$AssignIpv6AddressOnCreation */ =>  {
                let var_1004 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_assign_ipv6_address_on_creation(var_1004);
            }
            ,
            s if s.matches("ipv6CidrBlockAssociationSet") /* Ipv6CidrBlockAssociationSet com.amazonaws.ec2#Subnet$Ipv6CidrBlockAssociationSet */ =>  {
                let var_1005 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_subnet_ipv6_cidr_block_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association_set(var_1005);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Subnet$Tags */ =>  {
                let var_1006 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1006);
            }
            ,
            s if s.matches("subnetArn") /* SubnetArn com.amazonaws.ec2#Subnet$SubnetArn */ =>  {
                let var_1007 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_arn(var_1007);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#Subnet$OutpostArn */ =>  {
                let var_1008 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_1008);
            }
            ,
            s if s.matches("enableDns64") /* EnableDns64 com.amazonaws.ec2#Subnet$EnableDns64 */ =>  {
                let var_1009 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_dns64(var_1009);
            }
            ,
            s if s.matches("ipv6Native") /* Ipv6Native com.amazonaws.ec2#Subnet$Ipv6Native */ =>  {
                let var_1010 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_native(var_1010);
            }
            ,
            s if s.matches("privateDnsNameOptionsOnLaunch") /* PrivateDnsNameOptionsOnLaunch com.amazonaws.ec2#Subnet$PrivateDnsNameOptionsOnLaunch */ =>  {
                let var_1011 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_private_dns_name_options_on_launch(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_options_on_launch(var_1011);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Vpc, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Vpc::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#Vpc$CidrBlock */ =>  {
                let var_1012 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_1012);
            }
            ,
            s if s.matches("dhcpOptionsId") /* DhcpOptionsId com.amazonaws.ec2#Vpc$DhcpOptionsId */ =>  {
                let var_1013 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dhcp_options_id(var_1013);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Vpc$State */ =>  {
                let var_1014 =
                    Some(
                        Result::<crate::model::VpcState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpcState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1014);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#Vpc$VpcId */ =>  {
                let var_1015 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1015);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Vpc$OwnerId */ =>  {
                let var_1016 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1016);
            }
            ,
            s if s.matches("instanceTenancy") /* InstanceTenancy com.amazonaws.ec2#Vpc$InstanceTenancy */ =>  {
                let var_1017 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_tenancy(var_1017);
            }
            ,
            s if s.matches("ipv6CidrBlockAssociationSet") /* Ipv6CidrBlockAssociationSet com.amazonaws.ec2#Vpc$Ipv6CidrBlockAssociationSet */ =>  {
                let var_1018 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_ipv6_cidr_block_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_association_set(var_1018);
            }
            ,
            s if s.matches("cidrBlockAssociationSet") /* CidrBlockAssociationSet com.amazonaws.ec2#Vpc$CidrBlockAssociationSet */ =>  {
                let var_1019 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_cidr_block_association_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_association_set(var_1019);
            }
            ,
            s if s.matches("isDefault") /* IsDefault com.amazonaws.ec2#Vpc$IsDefault */ =>  {
                let var_1020 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default(var_1020);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Vpc$Tags */ =>  {
                let var_1021 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1021);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_dhcp_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DhcpOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DhcpOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dhcpConfigurationSet") /* DhcpConfigurations com.amazonaws.ec2#DhcpOptions$DhcpConfigurations */ =>  {
                let var_1022 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dhcp_configuration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dhcp_configurations(var_1022);
            }
            ,
            s if s.matches("dhcpOptionsId") /* DhcpOptionsId com.amazonaws.ec2#DhcpOptions$DhcpOptionsId */ =>  {
                let var_1023 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dhcp_options_id(var_1023);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#DhcpOptions$OwnerId */ =>  {
                let var_1024 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1024);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#DhcpOptions$Tags */ =>  {
                let var_1025 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1025);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_egress_only_internet_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EgressOnlyInternetGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EgressOnlyInternetGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachmentSet") /* Attachments com.amazonaws.ec2#EgressOnlyInternetGateway$Attachments */ =>  {
                let var_1026 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_internet_gateway_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachments(var_1026);
            }
            ,
            s if s.matches("egressOnlyInternetGatewayId") /* EgressOnlyInternetGatewayId com.amazonaws.ec2#EgressOnlyInternetGateway$EgressOnlyInternetGatewayId */ =>  {
                let var_1027 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_egress_only_internet_gateway_id(var_1027);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#EgressOnlyInternetGateway$Tags */ =>  {
                let var_1028 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1028);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_create_fleet_errors_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CreateFleetError>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CreateFleetErrorsSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_create_fleet_error(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_create_fleet_instances_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CreateFleetInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CreateFleetInstancesSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_create_fleet_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_value_string_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ValueStringList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_export_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExportTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExportTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#ExportTask$Description */ =>  {
                let var_1029 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1029);
            }
            ,
            s if s.matches("exportTaskId") /* ExportTaskId com.amazonaws.ec2#ExportTask$ExportTaskId */ =>  {
                let var_1030 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_export_task_id(var_1030);
            }
            ,
            s if s.matches("exportToS3") /* ExportToS3Task com.amazonaws.ec2#ExportTask$ExportToS3Task */ =>  {
                let var_1031 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_export_to_s3_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_export_to_s3_task(var_1031);
            }
            ,
            s if s.matches("instanceExport") /* InstanceExportDetails com.amazonaws.ec2#ExportTask$InstanceExportDetails */ =>  {
                let var_1032 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_export_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_export_details(var_1032);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ExportTask$State */ =>  {
                let var_1033 =
                    Some(
                        Result::<crate::model::ExportTaskState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExportTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1033);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ExportTask$StatusMessage */ =>  {
                let var_1034 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1034);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ExportTask$Tags */ =>  {
                let var_1035 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1035);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_internet_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InternetGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InternetGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachmentSet") /* Attachments com.amazonaws.ec2#InternetGateway$Attachments */ =>  {
                let var_1036 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_internet_gateway_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachments(var_1036);
            }
            ,
            s if s.matches("internetGatewayId") /* InternetGatewayId com.amazonaws.ec2#InternetGateway$InternetGatewayId */ =>  {
                let var_1037 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_internet_gateway_id(var_1037);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#InternetGateway$OwnerId */ =>  {
                let var_1038 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1038);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#InternetGateway$Tags */ =>  {
                let var_1039 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1039);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipam, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipam::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Ipam$OwnerId */ =>  {
                let var_1040 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1040);
            }
            ,
            s if s.matches("ipamId") /* IpamId com.amazonaws.ec2#Ipam$IpamId */ =>  {
                let var_1041 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_id(var_1041);
            }
            ,
            s if s.matches("ipamArn") /* IpamArn com.amazonaws.ec2#Ipam$IpamArn */ =>  {
                let var_1042 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_arn(var_1042);
            }
            ,
            s if s.matches("ipamRegion") /* IpamRegion com.amazonaws.ec2#Ipam$IpamRegion */ =>  {
                let var_1043 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_region(var_1043);
            }
            ,
            s if s.matches("publicDefaultScopeId") /* PublicDefaultScopeId com.amazonaws.ec2#Ipam$PublicDefaultScopeId */ =>  {
                let var_1044 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_default_scope_id(var_1044);
            }
            ,
            s if s.matches("privateDefaultScopeId") /* PrivateDefaultScopeId com.amazonaws.ec2#Ipam$PrivateDefaultScopeId */ =>  {
                let var_1045 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_default_scope_id(var_1045);
            }
            ,
            s if s.matches("scopeCount") /* ScopeCount com.amazonaws.ec2#Ipam$ScopeCount */ =>  {
                let var_1046 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_scope_count(var_1046);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#Ipam$Description */ =>  {
                let var_1047 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1047);
            }
            ,
            s if s.matches("operatingRegionSet") /* OperatingRegions com.amazonaws.ec2#Ipam$OperatingRegions */ =>  {
                let var_1048 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_operating_region_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_operating_regions(var_1048);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Ipam$State */ =>  {
                let var_1049 =
                    Some(
                        Result::<crate::model::IpamState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1049);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Ipam$Tags */ =>  {
                let var_1050 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1050);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_pool(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamPool, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamPool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#IpamPool$OwnerId */ =>  {
                let var_1051 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1051);
            }
            ,
            s if s.matches("ipamPoolId") /* IpamPoolId com.amazonaws.ec2#IpamPool$IpamPoolId */ =>  {
                let var_1052 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_id(var_1052);
            }
            ,
            s if s.matches("sourceIpamPoolId") /* SourceIpamPoolId com.amazonaws.ec2#IpamPool$SourceIpamPoolId */ =>  {
                let var_1053 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_ipam_pool_id(var_1053);
            }
            ,
            s if s.matches("ipamPoolArn") /* IpamPoolArn com.amazonaws.ec2#IpamPool$IpamPoolArn */ =>  {
                let var_1054 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_arn(var_1054);
            }
            ,
            s if s.matches("ipamScopeArn") /* IpamScopeArn com.amazonaws.ec2#IpamPool$IpamScopeArn */ =>  {
                let var_1055 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_arn(var_1055);
            }
            ,
            s if s.matches("ipamScopeType") /* IpamScopeType com.amazonaws.ec2#IpamPool$IpamScopeType */ =>  {
                let var_1056 =
                    Some(
                        Result::<crate::model::IpamScopeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamScopeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_type(var_1056);
            }
            ,
            s if s.matches("ipamArn") /* IpamArn com.amazonaws.ec2#IpamPool$IpamArn */ =>  {
                let var_1057 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_arn(var_1057);
            }
            ,
            s if s.matches("ipamRegion") /* IpamRegion com.amazonaws.ec2#IpamPool$IpamRegion */ =>  {
                let var_1058 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_region(var_1058);
            }
            ,
            s if s.matches("locale") /* Locale com.amazonaws.ec2#IpamPool$Locale */ =>  {
                let var_1059 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_locale(var_1059);
            }
            ,
            s if s.matches("poolDepth") /* PoolDepth com.amazonaws.ec2#IpamPool$PoolDepth */ =>  {
                let var_1060 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_pool_depth(var_1060);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IpamPool$State */ =>  {
                let var_1061 =
                    Some(
                        Result::<crate::model::IpamPoolState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamPoolState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1061);
            }
            ,
            s if s.matches("stateMessage") /* StateMessage com.amazonaws.ec2#IpamPool$StateMessage */ =>  {
                let var_1062 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_1062);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#IpamPool$Description */ =>  {
                let var_1063 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1063);
            }
            ,
            s if s.matches("autoImport") /* AutoImport com.amazonaws.ec2#IpamPool$AutoImport */ =>  {
                let var_1064 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_import(var_1064);
            }
            ,
            s if s.matches("publiclyAdvertisable") /* PubliclyAdvertisable com.amazonaws.ec2#IpamPool$PubliclyAdvertisable */ =>  {
                let var_1065 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_publicly_advertisable(var_1065);
            }
            ,
            s if s.matches("addressFamily") /* AddressFamily com.amazonaws.ec2#IpamPool$AddressFamily */ =>  {
                let var_1066 =
                    Some(
                        Result::<crate::model::AddressFamily, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AddressFamily::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_address_family(var_1066);
            }
            ,
            s if s.matches("allocationMinNetmaskLength") /* AllocationMinNetmaskLength com.amazonaws.ec2#IpamPool$AllocationMinNetmaskLength */ =>  {
                let var_1067 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_min_netmask_length(var_1067);
            }
            ,
            s if s.matches("allocationMaxNetmaskLength") /* AllocationMaxNetmaskLength com.amazonaws.ec2#IpamPool$AllocationMaxNetmaskLength */ =>  {
                let var_1068 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_max_netmask_length(var_1068);
            }
            ,
            s if s.matches("allocationDefaultNetmaskLength") /* AllocationDefaultNetmaskLength com.amazonaws.ec2#IpamPool$AllocationDefaultNetmaskLength */ =>  {
                let var_1069 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_default_netmask_length(var_1069);
            }
            ,
            s if s.matches("allocationResourceTagSet") /* AllocationResourceTags com.amazonaws.ec2#IpamPool$AllocationResourceTags */ =>  {
                let var_1070 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_resource_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_allocation_resource_tags(var_1070);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#IpamPool$Tags */ =>  {
                let var_1071 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1071);
            }
            ,
            s if s.matches("awsService") /* AwsService com.amazonaws.ec2#IpamPool$AwsService */ =>  {
                let var_1072 =
                    Some(
                        Result::<crate::model::IpamPoolAwsService, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamPoolAwsService::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_service(var_1072);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_scope(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamScope, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamScope::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#IpamScope$OwnerId */ =>  {
                let var_1073 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1073);
            }
            ,
            s if s.matches("ipamScopeId") /* IpamScopeId com.amazonaws.ec2#IpamScope$IpamScopeId */ =>  {
                let var_1074 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_id(var_1074);
            }
            ,
            s if s.matches("ipamScopeArn") /* IpamScopeArn com.amazonaws.ec2#IpamScope$IpamScopeArn */ =>  {
                let var_1075 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_arn(var_1075);
            }
            ,
            s if s.matches("ipamArn") /* IpamArn com.amazonaws.ec2#IpamScope$IpamArn */ =>  {
                let var_1076 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_arn(var_1076);
            }
            ,
            s if s.matches("ipamRegion") /* IpamRegion com.amazonaws.ec2#IpamScope$IpamRegion */ =>  {
                let var_1077 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_region(var_1077);
            }
            ,
            s if s.matches("ipamScopeType") /* IpamScopeType com.amazonaws.ec2#IpamScope$IpamScopeType */ =>  {
                let var_1078 =
                    Some(
                        Result::<crate::model::IpamScopeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamScopeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_type(var_1078);
            }
            ,
            s if s.matches("isDefault") /* IsDefault com.amazonaws.ec2#IpamScope$IsDefault */ =>  {
                let var_1079 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default(var_1079);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#IpamScope$Description */ =>  {
                let var_1080 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1080);
            }
            ,
            s if s.matches("poolCount") /* PoolCount com.amazonaws.ec2#IpamScope$PoolCount */ =>  {
                let var_1081 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_pool_count(var_1081);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IpamScope$State */ =>  {
                let var_1082 =
                    Some(
                        Result::<crate::model::IpamScopeState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamScopeState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1082);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#IpamScope$Tags */ =>  {
                let var_1083 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1083);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplate, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplate::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#LaunchTemplate$LaunchTemplateId */ =>  {
                let var_1084 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_1084);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#LaunchTemplate$LaunchTemplateName */ =>  {
                let var_1085 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_1085);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#LaunchTemplate$CreateTime */ =>  {
                let var_1086 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1086);
            }
            ,
            s if s.matches("createdBy") /* CreatedBy com.amazonaws.ec2#LaunchTemplate$CreatedBy */ =>  {
                let var_1087 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_created_by(var_1087);
            }
            ,
            s if s.matches("defaultVersionNumber") /* DefaultVersionNumber com.amazonaws.ec2#LaunchTemplate$DefaultVersionNumber */ =>  {
                let var_1088 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_version_number(var_1088);
            }
            ,
            s if s.matches("latestVersionNumber") /* LatestVersionNumber com.amazonaws.ec2#LaunchTemplate$LatestVersionNumber */ =>  {
                let var_1089 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_latest_version_number(var_1089);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LaunchTemplate$Tags */ =>  {
                let var_1090 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1090);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_validation_warning(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ValidationWarning, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ValidationWarning::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("errorSet") /* Errors com.amazonaws.ec2#ValidationWarning$Errors */ =>  {
                let var_1091 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_errors(var_1091);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_version(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateVersion, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateVersion::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#LaunchTemplateVersion$LaunchTemplateId */ =>  {
                let var_1092 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_1092);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#LaunchTemplateVersion$LaunchTemplateName */ =>  {
                let var_1093 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_1093);
            }
            ,
            s if s.matches("versionNumber") /* VersionNumber com.amazonaws.ec2#LaunchTemplateVersion$VersionNumber */ =>  {
                let var_1094 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_version_number(var_1094);
            }
            ,
            s if s.matches("versionDescription") /* VersionDescription com.amazonaws.ec2#LaunchTemplateVersion$VersionDescription */ =>  {
                let var_1095 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version_description(var_1095);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#LaunchTemplateVersion$CreateTime */ =>  {
                let var_1096 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1096);
            }
            ,
            s if s.matches("createdBy") /* CreatedBy com.amazonaws.ec2#LaunchTemplateVersion$CreatedBy */ =>  {
                let var_1097 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_created_by(var_1097);
            }
            ,
            s if s.matches("defaultVersion") /* DefaultVersion com.amazonaws.ec2#LaunchTemplateVersion$DefaultVersion */ =>  {
                let var_1098 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_version(var_1098);
            }
            ,
            s if s.matches("launchTemplateData") /* LaunchTemplateData com.amazonaws.ec2#LaunchTemplateVersion$LaunchTemplateData */ =>  {
                let var_1099 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_response_launch_template_data(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_data(var_1099);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGatewayRoute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGatewayRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationCidrBlock") /* DestinationCidrBlock com.amazonaws.ec2#LocalGatewayRoute$DestinationCidrBlock */ =>  {
                let var_1100 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr_block(var_1100);
            }
            ,
            s if s.matches("localGatewayVirtualInterfaceGroupId") /* LocalGatewayVirtualInterfaceGroupId com.amazonaws.ec2#LocalGatewayRoute$LocalGatewayVirtualInterfaceGroupId */ =>  {
                let var_1101 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_group_id(var_1101);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#LocalGatewayRoute$Type */ =>  {
                let var_1102 =
                    Some(
                        Result::<crate::model::LocalGatewayRouteType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LocalGatewayRouteType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1102);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#LocalGatewayRoute$State */ =>  {
                let var_1103 =
                    Some(
                        Result::<crate::model::LocalGatewayRouteState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LocalGatewayRouteState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1103);
            }
            ,
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2#LocalGatewayRoute$LocalGatewayRouteTableId */ =>  {
                let var_1104 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_1104);
            }
            ,
            s if s.matches("localGatewayRouteTableArn") /* LocalGatewayRouteTableArn com.amazonaws.ec2#LocalGatewayRoute$LocalGatewayRouteTableArn */ =>  {
                let var_1105 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_arn(var_1105);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayRoute$OwnerId */ =>  {
                let var_1106 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1106);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_route_table_vpc_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGatewayRouteTableVpcAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGatewayRouteTableVpcAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVpcAssociationId") /* LocalGatewayRouteTableVpcAssociationId com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$LocalGatewayRouteTableVpcAssociationId */ =>  {
                let var_1107 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_vpc_association_id(var_1107);
            }
            ,
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$LocalGatewayRouteTableId */ =>  {
                let var_1108 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_1108);
            }
            ,
            s if s.matches("localGatewayRouteTableArn") /* LocalGatewayRouteTableArn com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$LocalGatewayRouteTableArn */ =>  {
                let var_1109 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_arn(var_1109);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$LocalGatewayId */ =>  {
                let var_1110 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_1110);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$VpcId */ =>  {
                let var_1111 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1111);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$OwnerId */ =>  {
                let var_1112 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1112);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$State */ =>  {
                let var_1113 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1113);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociation$Tags */ =>  {
                let var_1114 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1114);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_managed_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ManagedPrefixList, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ManagedPrefixList::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#ManagedPrefixList$PrefixListId */ =>  {
                let var_1115 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_1115);
            }
            ,
            s if s.matches("addressFamily") /* AddressFamily com.amazonaws.ec2#ManagedPrefixList$AddressFamily */ =>  {
                let var_1116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_address_family(var_1116);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ManagedPrefixList$State */ =>  {
                let var_1117 =
                    Some(
                        Result::<crate::model::PrefixListState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PrefixListState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1117);
            }
            ,
            s if s.matches("stateMessage") /* StateMessage com.amazonaws.ec2#ManagedPrefixList$StateMessage */ =>  {
                let var_1118 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_1118);
            }
            ,
            s if s.matches("prefixListArn") /* PrefixListArn com.amazonaws.ec2#ManagedPrefixList$PrefixListArn */ =>  {
                let var_1119 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_arn(var_1119);
            }
            ,
            s if s.matches("prefixListName") /* PrefixListName com.amazonaws.ec2#ManagedPrefixList$PrefixListName */ =>  {
                let var_1120 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_name(var_1120);
            }
            ,
            s if s.matches("maxEntries") /* MaxEntries com.amazonaws.ec2#ManagedPrefixList$MaxEntries */ =>  {
                let var_1121 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_entries(var_1121);
            }
            ,
            s if s.matches("version") /* Version com.amazonaws.ec2#ManagedPrefixList$Version */ =>  {
                let var_1122 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_version(var_1122);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ManagedPrefixList$Tags */ =>  {
                let var_1123 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1123);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#ManagedPrefixList$OwnerId */ =>  {
                let var_1124 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1124);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_nat_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NatGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NatGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#NatGateway$CreateTime */ =>  {
                let var_1125 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1125);
            }
            ,
            s if s.matches("deleteTime") /* DeleteTime com.amazonaws.ec2#NatGateway$DeleteTime */ =>  {
                let var_1126 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_delete_time(var_1126);
            }
            ,
            s if s.matches("failureCode") /* FailureCode com.amazonaws.ec2#NatGateway$FailureCode */ =>  {
                let var_1127 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_failure_code(var_1127);
            }
            ,
            s if s.matches("failureMessage") /* FailureMessage com.amazonaws.ec2#NatGateway$FailureMessage */ =>  {
                let var_1128 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_failure_message(var_1128);
            }
            ,
            s if s.matches("natGatewayAddressSet") /* NatGatewayAddresses com.amazonaws.ec2#NatGateway$NatGatewayAddresses */ =>  {
                let var_1129 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_nat_gateway_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_nat_gateway_addresses(var_1129);
            }
            ,
            s if s.matches("natGatewayId") /* NatGatewayId com.amazonaws.ec2#NatGateway$NatGatewayId */ =>  {
                let var_1130 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nat_gateway_id(var_1130);
            }
            ,
            s if s.matches("provisionedBandwidth") /* ProvisionedBandwidth com.amazonaws.ec2#NatGateway$ProvisionedBandwidth */ =>  {
                let var_1131 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_provisioned_bandwidth(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_provisioned_bandwidth(var_1131);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#NatGateway$State */ =>  {
                let var_1132 =
                    Some(
                        Result::<crate::model::NatGatewayState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NatGatewayState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1132);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#NatGateway$SubnetId */ =>  {
                let var_1133 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_1133);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#NatGateway$VpcId */ =>  {
                let var_1134 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1134);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NatGateway$Tags */ =>  {
                let var_1135 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1135);
            }
            ,
            s if s.matches("connectivityType") /* ConnectivityType com.amazonaws.ec2#NatGateway$ConnectivityType */ =>  {
                let var_1136 =
                    Some(
                        Result::<crate::model::ConnectivityType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ConnectivityType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_connectivity_type(var_1136);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_acl(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkAcl, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkAcl::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationSet") /* Associations com.amazonaws.ec2#NetworkAcl$Associations */ =>  {
                let var_1137 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_acl_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_1137);
            }
            ,
            s if s.matches("entrySet") /* Entries com.amazonaws.ec2#NetworkAcl$Entries */ =>  {
                let var_1138 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_acl_entry_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_entries(var_1138);
            }
            ,
            s if s.matches("default") /* IsDefault com.amazonaws.ec2#NetworkAcl$IsDefault */ =>  {
                let var_1139 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default(var_1139);
            }
            ,
            s if s.matches("networkAclId") /* NetworkAclId com.amazonaws.ec2#NetworkAcl$NetworkAclId */ =>  {
                let var_1140 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_acl_id(var_1140);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NetworkAcl$Tags */ =>  {
                let var_1141 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1141);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#NetworkAcl$VpcId */ =>  {
                let var_1142 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1142);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#NetworkAcl$OwnerId */ =>  {
                let var_1143 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1143);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_insights_access_scope(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInsightsAccessScope, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInsightsAccessScope::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeId") /* NetworkInsightsAccessScopeId com.amazonaws.ec2#NetworkInsightsAccessScope$NetworkInsightsAccessScopeId */ =>  {
                let var_1144 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_id(var_1144);
            }
            ,
            s if s.matches("networkInsightsAccessScopeArn") /* NetworkInsightsAccessScopeArn com.amazonaws.ec2#NetworkInsightsAccessScope$NetworkInsightsAccessScopeArn */ =>  {
                let var_1145 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_arn(var_1145);
            }
            ,
            s if s.matches("createdDate") /* CreatedDate com.amazonaws.ec2#NetworkInsightsAccessScope$CreatedDate */ =>  {
                let var_1146 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_created_date(var_1146);
            }
            ,
            s if s.matches("updatedDate") /* UpdatedDate com.amazonaws.ec2#NetworkInsightsAccessScope$UpdatedDate */ =>  {
                let var_1147 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_updated_date(var_1147);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NetworkInsightsAccessScope$Tags */ =>  {
                let var_1148 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1148);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_insights_access_scope_content(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInsightsAccessScopeContent, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInsightsAccessScopeContent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeId") /* NetworkInsightsAccessScopeId com.amazonaws.ec2#NetworkInsightsAccessScopeContent$NetworkInsightsAccessScopeId */ =>  {
                let var_1149 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_id(var_1149);
            }
            ,
            s if s.matches("matchPathSet") /* MatchPaths com.amazonaws.ec2#NetworkInsightsAccessScopeContent$MatchPaths */ =>  {
                let var_1150 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_access_scope_path_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_match_paths(var_1150);
            }
            ,
            s if s.matches("excludePathSet") /* ExcludePaths com.amazonaws.ec2#NetworkInsightsAccessScopeContent$ExcludePaths */ =>  {
                let var_1151 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_access_scope_path_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_exclude_paths(var_1151);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_insights_path(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInsightsPath, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInsightsPath::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsPathId") /* NetworkInsightsPathId com.amazonaws.ec2#NetworkInsightsPath$NetworkInsightsPathId */ =>  {
                let var_1152 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_path_id(var_1152);
            }
            ,
            s if s.matches("networkInsightsPathArn") /* NetworkInsightsPathArn com.amazonaws.ec2#NetworkInsightsPath$NetworkInsightsPathArn */ =>  {
                let var_1153 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_path_arn(var_1153);
            }
            ,
            s if s.matches("createdDate") /* CreatedDate com.amazonaws.ec2#NetworkInsightsPath$CreatedDate */ =>  {
                let var_1154 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_created_date(var_1154);
            }
            ,
            s if s.matches("source") /* Source com.amazonaws.ec2#NetworkInsightsPath$Source */ =>  {
                let var_1155 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_1155);
            }
            ,
            s if s.matches("destination") /* Destination com.amazonaws.ec2#NetworkInsightsPath$Destination */ =>  {
                let var_1156 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination(var_1156);
            }
            ,
            s if s.matches("sourceIp") /* SourceIp com.amazonaws.ec2#NetworkInsightsPath$SourceIp */ =>  {
                let var_1157 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_ip(var_1157);
            }
            ,
            s if s.matches("destinationIp") /* DestinationIp com.amazonaws.ec2#NetworkInsightsPath$DestinationIp */ =>  {
                let var_1158 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_ip(var_1158);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#NetworkInsightsPath$Protocol */ =>  {
                let var_1159 =
                    Some(
                        Result::<crate::model::Protocol, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Protocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_1159);
            }
            ,
            s if s.matches("destinationPort") /* DestinationPort com.amazonaws.ec2#NetworkInsightsPath$DestinationPort */ =>  {
                let var_1160 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_destination_port(var_1160);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NetworkInsightsPath$Tags */ =>  {
                let var_1161 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1161);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_interface(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterface, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterface::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#NetworkInterface$Association */ =>  {
                let var_1162 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_1162);
            }
            ,
            s if s.matches("attachment") /* Attachment com.amazonaws.ec2#NetworkInterface$Attachment */ =>  {
                let var_1163 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment(var_1163);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#NetworkInterface$AvailabilityZone */ =>  {
                let var_1164 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1164);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#NetworkInterface$Description */ =>  {
                let var_1165 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1165);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#NetworkInterface$Groups */ =>  {
                let var_1166 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_1166);
            }
            ,
            s if s.matches("interfaceType") /* InterfaceType com.amazonaws.ec2#NetworkInterface$InterfaceType */ =>  {
                let var_1167 =
                    Some(
                        Result::<crate::model::NetworkInterfaceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NetworkInterfaceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_1167);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#NetworkInterface$Ipv6Addresses */ =>  {
                let var_1168 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_interface_ipv6_addresses_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_1168);
            }
            ,
            s if s.matches("macAddress") /* MacAddress com.amazonaws.ec2#NetworkInterface$MacAddress */ =>  {
                let var_1169 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_mac_address(var_1169);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#NetworkInterface$NetworkInterfaceId */ =>  {
                let var_1170 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_1170);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#NetworkInterface$OutpostArn */ =>  {
                let var_1171 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_1171);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#NetworkInterface$OwnerId */ =>  {
                let var_1172 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1172);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#NetworkInterface$PrivateDnsName */ =>  {
                let var_1173 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_1173);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#NetworkInterface$PrivateIpAddress */ =>  {
                let var_1174 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_1174);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#NetworkInterface$PrivateIpAddresses */ =>  {
                let var_1175 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_interface_private_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_1175);
            }
            ,
            s if s.matches("ipv4PrefixSet") /* Ipv4Prefixes com.amazonaws.ec2#NetworkInterface$Ipv4Prefixes */ =>  {
                let var_1176 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv4_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_1176);
            }
            ,
            s if s.matches("ipv6PrefixSet") /* Ipv6Prefixes com.amazonaws.ec2#NetworkInterface$Ipv6Prefixes */ =>  {
                let var_1177 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_1177);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2#NetworkInterface$RequesterId */ =>  {
                let var_1178 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_1178);
            }
            ,
            s if s.matches("requesterManaged") /* RequesterManaged com.amazonaws.ec2#NetworkInterface$RequesterManaged */ =>  {
                let var_1179 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_managed(var_1179);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#NetworkInterface$SourceDestCheck */ =>  {
                let var_1180 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_1180);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#NetworkInterface$Status */ =>  {
                let var_1181 =
                    Some(
                        Result::<crate::model::NetworkInterfaceStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NetworkInterfaceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1181);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#NetworkInterface$SubnetId */ =>  {
                let var_1182 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_1182);
            }
            ,
            s if s.matches("tagSet") /* TagSet com.amazonaws.ec2#NetworkInterface$TagSet */ =>  {
                let var_1183 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_set(var_1183);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#NetworkInterface$VpcId */ =>  {
                let var_1184 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1184);
            }
            ,
            s if s.matches("denyAllIgwTraffic") /* DenyAllIgwTraffic com.amazonaws.ec2#NetworkInterface$DenyAllIgwTraffic */ =>  {
                let var_1185 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_deny_all_igw_traffic(var_1185);
            }
            ,
            s if s.matches("ipv6Native") /* Ipv6Native com.amazonaws.ec2#NetworkInterface$Ipv6Native */ =>  {
                let var_1186 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_native(var_1186);
            }
            ,
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#NetworkInterface$Ipv6Address */ =>  {
                let var_1187 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_1187);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_interface_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfacePermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfacePermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfacePermissionId") /* NetworkInterfacePermissionId com.amazonaws.ec2#NetworkInterfacePermission$NetworkInterfacePermissionId */ =>  {
                let var_1188 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_permission_id(var_1188);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#NetworkInterfacePermission$NetworkInterfaceId */ =>  {
                let var_1189 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_1189);
            }
            ,
            s if s.matches("awsAccountId") /* AwsAccountId com.amazonaws.ec2#NetworkInterfacePermission$AwsAccountId */ =>  {
                let var_1190 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_account_id(var_1190);
            }
            ,
            s if s.matches("awsService") /* AwsService com.amazonaws.ec2#NetworkInterfacePermission$AwsService */ =>  {
                let var_1191 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_service(var_1191);
            }
            ,
            s if s.matches("permission") /* Permission com.amazonaws.ec2#NetworkInterfacePermission$Permission */ =>  {
                let var_1192 =
                    Some(
                        Result::<crate::model::InterfacePermissionType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InterfacePermissionType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission(var_1192);
            }
            ,
            s if s.matches("permissionState") /* PermissionState com.amazonaws.ec2#NetworkInterfacePermission$PermissionState */ =>  {
                let var_1193 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_permission_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_permission_state(var_1193);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_placement_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PlacementGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PlacementGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#PlacementGroup$GroupName */ =>  {
                let var_1194 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_1194);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#PlacementGroup$State */ =>  {
                let var_1195 =
                    Some(
                        Result::<crate::model::PlacementGroupState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlacementGroupState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1195);
            }
            ,
            s if s.matches("strategy") /* Strategy com.amazonaws.ec2#PlacementGroup$Strategy */ =>  {
                let var_1196 =
                    Some(
                        Result::<crate::model::PlacementStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlacementStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_strategy(var_1196);
            }
            ,
            s if s.matches("partitionCount") /* PartitionCount com.amazonaws.ec2#PlacementGroup$PartitionCount */ =>  {
                let var_1197 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_partition_count(var_1197);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#PlacementGroup$GroupId */ =>  {
                let var_1198 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_1198);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#PlacementGroup$Tags */ =>  {
                let var_1199 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1199);
            }
            ,
            s if s.matches("groupArn") /* GroupArn com.amazonaws.ec2#PlacementGroup$GroupArn */ =>  {
                let var_1200 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_arn(var_1200);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replace_root_volume_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplaceRootVolumeTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplaceRootVolumeTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replaceRootVolumeTaskId") /* ReplaceRootVolumeTaskId com.amazonaws.ec2#ReplaceRootVolumeTask$ReplaceRootVolumeTaskId */ =>  {
                let var_1201 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replace_root_volume_task_id(var_1201);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ReplaceRootVolumeTask$InstanceId */ =>  {
                let var_1202 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1202);
            }
            ,
            s if s.matches("taskState") /* TaskState com.amazonaws.ec2#ReplaceRootVolumeTask$TaskState */ =>  {
                let var_1203 =
                    Some(
                        Result::<crate::model::ReplaceRootVolumeTaskState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReplaceRootVolumeTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_task_state(var_1203);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#ReplaceRootVolumeTask$StartTime */ =>  {
                let var_1204 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_start_time(var_1204);
            }
            ,
            s if s.matches("completeTime") /* CompleteTime com.amazonaws.ec2#ReplaceRootVolumeTask$CompleteTime */ =>  {
                let var_1205 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_complete_time(var_1205);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ReplaceRootVolumeTask$Tags */ =>  {
                let var_1206 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1206);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_route_table(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RouteTable, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RouteTable::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationSet") /* Associations com.amazonaws.ec2#RouteTable$Associations */ =>  {
                let var_1207 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_route_table_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associations(var_1207);
            }
            ,
            s if s.matches("propagatingVgwSet") /* PropagatingVgws com.amazonaws.ec2#RouteTable$PropagatingVgws */ =>  {
                let var_1208 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_propagating_vgw_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_propagating_vgws(var_1208);
            }
            ,
            s if s.matches("routeTableId") /* RouteTableId com.amazonaws.ec2#RouteTable$RouteTableId */ =>  {
                let var_1209 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_table_id(var_1209);
            }
            ,
            s if s.matches("routeSet") /* Routes com.amazonaws.ec2#RouteTable$Routes */ =>  {
                let var_1210 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_route_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_1210);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#RouteTable$Tags */ =>  {
                let var_1211 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1211);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#RouteTable$VpcId */ =>  {
                let var_1212 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1212);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#RouteTable$OwnerId */ =>  {
                let var_1213 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1213);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_snapshot_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SnapshotInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SnapshotSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_snapshot_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_spot_datafeed_subscription(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotDatafeedSubscription, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotDatafeedSubscription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("bucket") /* Bucket com.amazonaws.ec2#SpotDatafeedSubscription$Bucket */ =>  {
                let var_1214 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_1214);
            }
            ,
            s if s.matches("fault") /* Fault com.amazonaws.ec2#SpotDatafeedSubscription$Fault */ =>  {
                let var_1215 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_instance_state_fault(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fault(var_1215);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#SpotDatafeedSubscription$OwnerId */ =>  {
                let var_1216 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1216);
            }
            ,
            s if s.matches("prefix") /* Prefix com.amazonaws.ec2#SpotDatafeedSubscription$Prefix */ =>  {
                let var_1217 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_1217);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#SpotDatafeedSubscription$State */ =>  {
                let var_1218 =
                    Some(
                        Result::<crate::model::DatafeedSubscriptionState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DatafeedSubscriptionState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1218);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet_cidr_reservation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SubnetCidrReservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SubnetCidrReservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnetCidrReservationId") /* SubnetCidrReservationId com.amazonaws.ec2#SubnetCidrReservation$SubnetCidrReservationId */ =>  {
                let var_1219 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_cidr_reservation_id(var_1219);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#SubnetCidrReservation$SubnetId */ =>  {
                let var_1220 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_1220);
            }
            ,
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#SubnetCidrReservation$Cidr */ =>  {
                let var_1221 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_1221);
            }
            ,
            s if s.matches("reservationType") /* ReservationType com.amazonaws.ec2#SubnetCidrReservation$ReservationType */ =>  {
                let var_1222 =
                    Some(
                        Result::<crate::model::SubnetCidrReservationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SubnetCidrReservationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_type(var_1222);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#SubnetCidrReservation$OwnerId */ =>  {
                let var_1223 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1223);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#SubnetCidrReservation$Description */ =>  {
                let var_1224 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1224);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SubnetCidrReservation$Tags */ =>  {
                let var_1225 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1225);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_traffic_mirror_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficMirrorFilter, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficMirrorFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterId") /* TrafficMirrorFilterId com.amazonaws.ec2#TrafficMirrorFilter$TrafficMirrorFilterId */ =>  {
                let var_1226 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_id(var_1226);
            }
            ,
            s if s.matches("ingressFilterRuleSet") /* IngressFilterRules com.amazonaws.ec2#TrafficMirrorFilter$IngressFilterRules */ =>  {
                let var_1227 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_filter_rule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ingress_filter_rules(var_1227);
            }
            ,
            s if s.matches("egressFilterRuleSet") /* EgressFilterRules com.amazonaws.ec2#TrafficMirrorFilter$EgressFilterRules */ =>  {
                let var_1228 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_filter_rule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_egress_filter_rules(var_1228);
            }
            ,
            s if s.matches("networkServiceSet") /* NetworkServices com.amazonaws.ec2#TrafficMirrorFilter$NetworkServices */ =>  {
                let var_1229 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_traffic_mirror_network_service_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_services(var_1229);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#TrafficMirrorFilter$Description */ =>  {
                let var_1230 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1230);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TrafficMirrorFilter$Tags */ =>  {
                let var_1231 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1231);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_traffic_mirror_filter_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficMirrorFilterRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficMirrorFilterRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorFilterRuleId") /* TrafficMirrorFilterRuleId com.amazonaws.ec2#TrafficMirrorFilterRule$TrafficMirrorFilterRuleId */ =>  {
                let var_1232 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_rule_id(var_1232);
            }
            ,
            s if s.matches("trafficMirrorFilterId") /* TrafficMirrorFilterId com.amazonaws.ec2#TrafficMirrorFilterRule$TrafficMirrorFilterId */ =>  {
                let var_1233 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_id(var_1233);
            }
            ,
            s if s.matches("trafficDirection") /* TrafficDirection com.amazonaws.ec2#TrafficMirrorFilterRule$TrafficDirection */ =>  {
                let var_1234 =
                    Some(
                        Result::<crate::model::TrafficDirection, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TrafficDirection::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_direction(var_1234);
            }
            ,
            s if s.matches("ruleNumber") /* RuleNumber com.amazonaws.ec2#TrafficMirrorFilterRule$RuleNumber */ =>  {
                let var_1235 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_rule_number(var_1235);
            }
            ,
            s if s.matches("ruleAction") /* RuleAction com.amazonaws.ec2#TrafficMirrorFilterRule$RuleAction */ =>  {
                let var_1236 =
                    Some(
                        Result::<crate::model::TrafficMirrorRuleAction, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TrafficMirrorRuleAction::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_action(var_1236);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#TrafficMirrorFilterRule$Protocol */ =>  {
                let var_1237 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_protocol(var_1237);
            }
            ,
            s if s.matches("destinationPortRange") /* DestinationPortRange com.amazonaws.ec2#TrafficMirrorFilterRule$DestinationPortRange */ =>  {
                let var_1238 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_port_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_port_range(var_1238);
            }
            ,
            s if s.matches("sourcePortRange") /* SourcePortRange com.amazonaws.ec2#TrafficMirrorFilterRule$SourcePortRange */ =>  {
                let var_1239 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_traffic_mirror_port_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_port_range(var_1239);
            }
            ,
            s if s.matches("destinationCidrBlock") /* DestinationCidrBlock com.amazonaws.ec2#TrafficMirrorFilterRule$DestinationCidrBlock */ =>  {
                let var_1240 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr_block(var_1240);
            }
            ,
            s if s.matches("sourceCidrBlock") /* SourceCidrBlock com.amazonaws.ec2#TrafficMirrorFilterRule$SourceCidrBlock */ =>  {
                let var_1241 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_cidr_block(var_1241);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#TrafficMirrorFilterRule$Description */ =>  {
                let var_1242 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1242);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_traffic_mirror_session(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficMirrorSession, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficMirrorSession::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorSessionId") /* TrafficMirrorSessionId com.amazonaws.ec2#TrafficMirrorSession$TrafficMirrorSessionId */ =>  {
                let var_1243 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_session_id(var_1243);
            }
            ,
            s if s.matches("trafficMirrorTargetId") /* TrafficMirrorTargetId com.amazonaws.ec2#TrafficMirrorSession$TrafficMirrorTargetId */ =>  {
                let var_1244 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_target_id(var_1244);
            }
            ,
            s if s.matches("trafficMirrorFilterId") /* TrafficMirrorFilterId com.amazonaws.ec2#TrafficMirrorSession$TrafficMirrorFilterId */ =>  {
                let var_1245 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_filter_id(var_1245);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#TrafficMirrorSession$NetworkInterfaceId */ =>  {
                let var_1246 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_1246);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#TrafficMirrorSession$OwnerId */ =>  {
                let var_1247 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1247);
            }
            ,
            s if s.matches("packetLength") /* PacketLength com.amazonaws.ec2#TrafficMirrorSession$PacketLength */ =>  {
                let var_1248 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_packet_length(var_1248);
            }
            ,
            s if s.matches("sessionNumber") /* SessionNumber com.amazonaws.ec2#TrafficMirrorSession$SessionNumber */ =>  {
                let var_1249 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_session_number(var_1249);
            }
            ,
            s if s.matches("virtualNetworkId") /* VirtualNetworkId com.amazonaws.ec2#TrafficMirrorSession$VirtualNetworkId */ =>  {
                let var_1250 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_virtual_network_id(var_1250);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#TrafficMirrorSession$Description */ =>  {
                let var_1251 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1251);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TrafficMirrorSession$Tags */ =>  {
                let var_1252 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1252);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_traffic_mirror_target(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficMirrorTarget, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficMirrorTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("trafficMirrorTargetId") /* TrafficMirrorTargetId com.amazonaws.ec2#TrafficMirrorTarget$TrafficMirrorTargetId */ =>  {
                let var_1253 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_mirror_target_id(var_1253);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#TrafficMirrorTarget$NetworkInterfaceId */ =>  {
                let var_1254 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_1254);
            }
            ,
            s if s.matches("networkLoadBalancerArn") /* NetworkLoadBalancerArn com.amazonaws.ec2#TrafficMirrorTarget$NetworkLoadBalancerArn */ =>  {
                let var_1255 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_load_balancer_arn(var_1255);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#TrafficMirrorTarget$Type */ =>  {
                let var_1256 =
                    Some(
                        Result::<crate::model::TrafficMirrorTargetType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TrafficMirrorTargetType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1256);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#TrafficMirrorTarget$Description */ =>  {
                let var_1257 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1257);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#TrafficMirrorTarget$OwnerId */ =>  {
                let var_1258 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1258);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TrafficMirrorTarget$Tags */ =>  {
                let var_1259 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1259);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGateway$TransitGatewayId */ =>  {
                let var_1260 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1260);
            }
            ,
            s if s.matches("transitGatewayArn") /* TransitGatewayArn com.amazonaws.ec2#TransitGateway$TransitGatewayArn */ =>  {
                let var_1261 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_arn(var_1261);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGateway$State */ =>  {
                let var_1262 =
                    Some(
                        Result::<crate::model::TransitGatewayState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1262);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#TransitGateway$OwnerId */ =>  {
                let var_1263 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1263);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#TransitGateway$Description */ =>  {
                let var_1264 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1264);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGateway$CreationTime */ =>  {
                let var_1265 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1265);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#TransitGateway$Options */ =>  {
                let var_1266 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_1266);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGateway$Tags */ =>  {
                let var_1267 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1267);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_connect(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayConnect, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayConnect::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayConnect$TransitGatewayAttachmentId */ =>  {
                let var_1268 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_1268);
            }
            ,
            s if s.matches("transportTransitGatewayAttachmentId") /* TransportTransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayConnect$TransportTransitGatewayAttachmentId */ =>  {
                let var_1269 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transport_transit_gateway_attachment_id(var_1269);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGatewayConnect$TransitGatewayId */ =>  {
                let var_1270 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1270);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayConnect$State */ =>  {
                let var_1271 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1271);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayConnect$CreationTime */ =>  {
                let var_1272 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1272);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#TransitGatewayConnect$Options */ =>  {
                let var_1273 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_1273);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayConnect$Tags */ =>  {
                let var_1274 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1274);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_connect_peer(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayConnectPeer, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayConnectPeer::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayConnectPeer$TransitGatewayAttachmentId */ =>  {
                let var_1275 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_1275);
            }
            ,
            s if s.matches("transitGatewayConnectPeerId") /* TransitGatewayConnectPeerId com.amazonaws.ec2#TransitGatewayConnectPeer$TransitGatewayConnectPeerId */ =>  {
                let var_1276 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_connect_peer_id(var_1276);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayConnectPeer$State */ =>  {
                let var_1277 =
                    Some(
                        Result::<crate::model::TransitGatewayConnectPeerState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayConnectPeerState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1277);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayConnectPeer$CreationTime */ =>  {
                let var_1278 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1278);
            }
            ,
            s if s.matches("connectPeerConfiguration") /* ConnectPeerConfiguration com.amazonaws.ec2#TransitGatewayConnectPeer$ConnectPeerConfiguration */ =>  {
                let var_1279 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_connect_peer_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connect_peer_configuration(var_1279);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayConnectPeer$Tags */ =>  {
                let var_1280 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1280);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_domain(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayMulticastDomain, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDomain::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastDomain$TransitGatewayMulticastDomainId */ =>  {
                let var_1281 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_1281);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGatewayMulticastDomain$TransitGatewayId */ =>  {
                let var_1282 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1282);
            }
            ,
            s if s.matches("transitGatewayMulticastDomainArn") /* TransitGatewayMulticastDomainArn com.amazonaws.ec2#TransitGatewayMulticastDomain$TransitGatewayMulticastDomainArn */ =>  {
                let var_1283 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_arn(var_1283);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#TransitGatewayMulticastDomain$OwnerId */ =>  {
                let var_1284 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1284);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#TransitGatewayMulticastDomain$Options */ =>  {
                let var_1285 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_1285);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayMulticastDomain$State */ =>  {
                let var_1286 =
                    Some(
                        Result::<crate::model::TransitGatewayMulticastDomainState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayMulticastDomainState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1286);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayMulticastDomain$CreationTime */ =>  {
                let var_1287 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1287);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayMulticastDomain$Tags */ =>  {
                let var_1288 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1288);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_prefix_list_reference(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayPrefixListReference, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayPrefixListReference::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayPrefixListReference$TransitGatewayRouteTableId */ =>  {
                let var_1289 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_1289);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#TransitGatewayPrefixListReference$PrefixListId */ =>  {
                let var_1290 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_1290);
            }
            ,
            s if s.matches("prefixListOwnerId") /* PrefixListOwnerId com.amazonaws.ec2#TransitGatewayPrefixListReference$PrefixListOwnerId */ =>  {
                let var_1291 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_owner_id(var_1291);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayPrefixListReference$State */ =>  {
                let var_1292 =
                    Some(
                        Result::<crate::model::TransitGatewayPrefixListReferenceState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayPrefixListReferenceState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1292);
            }
            ,
            s if s.matches("blackhole") /* Blackhole com.amazonaws.ec2#TransitGatewayPrefixListReference$Blackhole */ =>  {
                let var_1293 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_blackhole(var_1293);
            }
            ,
            s if s.matches("transitGatewayAttachment") /* TransitGatewayAttachment com.amazonaws.ec2#TransitGatewayPrefixListReference$TransitGatewayAttachment */ =>  {
                let var_1294 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_prefix_list_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment(var_1294);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayRoute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationCidrBlock") /* DestinationCidrBlock com.amazonaws.ec2#TransitGatewayRoute$DestinationCidrBlock */ =>  {
                let var_1295 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr_block(var_1295);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#TransitGatewayRoute$PrefixListId */ =>  {
                let var_1296 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_1296);
            }
            ,
            s if s.matches("transitGatewayAttachments") /* TransitGatewayAttachments com.amazonaws.ec2#TransitGatewayRoute$TransitGatewayAttachments */ =>  {
                let var_1297 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_route_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachments(var_1297);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#TransitGatewayRoute$Type */ =>  {
                let var_1298 =
                    Some(
                        Result::<crate::model::TransitGatewayRouteType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayRouteType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1298);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayRoute$State */ =>  {
                let var_1299 =
                    Some(
                        Result::<crate::model::TransitGatewayRouteState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayRouteState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1299);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_route_table(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayRouteTable, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayRouteTable::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayRouteTable$TransitGatewayRouteTableId */ =>  {
                let var_1300 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_1300);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGatewayRouteTable$TransitGatewayId */ =>  {
                let var_1301 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1301);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayRouteTable$State */ =>  {
                let var_1302 =
                    Some(
                        Result::<crate::model::TransitGatewayRouteTableState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayRouteTableState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1302);
            }
            ,
            s if s.matches("defaultAssociationRouteTable") /* DefaultAssociationRouteTable com.amazonaws.ec2#TransitGatewayRouteTable$DefaultAssociationRouteTable */ =>  {
                let var_1303 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_association_route_table(var_1303);
            }
            ,
            s if s.matches("defaultPropagationRouteTable") /* DefaultPropagationRouteTable com.amazonaws.ec2#TransitGatewayRouteTable$DefaultPropagationRouteTable */ =>  {
                let var_1304 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_propagation_route_table(var_1304);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayRouteTable$CreationTime */ =>  {
                let var_1305 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1305);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayRouteTable$Tags */ =>  {
                let var_1306 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1306);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_volume_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeAttachment>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_vpc_endpoint(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcEndpoint, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcEndpointId") /* VpcEndpointId com.amazonaws.ec2#VpcEndpoint$VpcEndpointId */ =>  {
                let var_1307 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_id(var_1307);
            }
            ,
            s if s.matches("vpcEndpointType") /* VpcEndpointType com.amazonaws.ec2#VpcEndpoint$VpcEndpointType */ =>  {
                let var_1308 =
                    Some(
                        Result::<crate::model::VpcEndpointType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpcEndpointType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_type(var_1308);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcEndpoint$VpcId */ =>  {
                let var_1309 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1309);
            }
            ,
            s if s.matches("serviceName") /* ServiceName com.amazonaws.ec2#VpcEndpoint$ServiceName */ =>  {
                let var_1310 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_name(var_1310);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#VpcEndpoint$State */ =>  {
                let var_1311 =
                    Some(
                        Result::<crate::model::State, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::State::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1311);
            }
            ,
            s if s.matches("policyDocument") /* PolicyDocument com.amazonaws.ec2#VpcEndpoint$PolicyDocument */ =>  {
                let var_1312 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_policy_document(var_1312);
            }
            ,
            s if s.matches("routeTableIdSet") /* RouteTableIds com.amazonaws.ec2#VpcEndpoint$RouteTableIds */ =>  {
                let var_1313 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table_ids(var_1313);
            }
            ,
            s if s.matches("subnetIdSet") /* SubnetIds com.amazonaws.ec2#VpcEndpoint$SubnetIds */ =>  {
                let var_1314 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ids(var_1314);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#VpcEndpoint$Groups */ =>  {
                let var_1315 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_1315);
            }
            ,
            s if s.matches("privateDnsEnabled") /* PrivateDnsEnabled com.amazonaws.ec2#VpcEndpoint$PrivateDnsEnabled */ =>  {
                let var_1316 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_private_dns_enabled(var_1316);
            }
            ,
            s if s.matches("requesterManaged") /* RequesterManaged com.amazonaws.ec2#VpcEndpoint$RequesterManaged */ =>  {
                let var_1317 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_managed(var_1317);
            }
            ,
            s if s.matches("networkInterfaceIdSet") /* NetworkInterfaceIds com.amazonaws.ec2#VpcEndpoint$NetworkInterfaceIds */ =>  {
                let var_1318 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_ids(var_1318);
            }
            ,
            s if s.matches("dnsEntrySet") /* DnsEntries com.amazonaws.ec2#VpcEndpoint$DnsEntries */ =>  {
                let var_1319 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dns_entry_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_entries(var_1319);
            }
            ,
            s if s.matches("creationTimestamp") /* CreationTimestamp com.amazonaws.ec2#VpcEndpoint$CreationTimestamp */ =>  {
                let var_1320 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_1320);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpcEndpoint$Tags */ =>  {
                let var_1321 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1321);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#VpcEndpoint$OwnerId */ =>  {
                let var_1322 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1322);
            }
            ,
            s if s.matches("lastError") /* LastError com.amazonaws.ec2#VpcEndpoint$LastError */ =>  {
                let var_1323 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_last_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_last_error(var_1323);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_connection_notification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ConnectionNotification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ConnectionNotification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("connectionNotificationId") /* ConnectionNotificationId com.amazonaws.ec2#ConnectionNotification$ConnectionNotificationId */ =>  {
                let var_1324 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_notification_id(var_1324);
            }
            ,
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#ConnectionNotification$ServiceId */ =>  {
                let var_1325 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_1325);
            }
            ,
            s if s.matches("vpcEndpointId") /* VpcEndpointId com.amazonaws.ec2#ConnectionNotification$VpcEndpointId */ =>  {
                let var_1326 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_id(var_1326);
            }
            ,
            s if s.matches("connectionNotificationType") /* ConnectionNotificationType com.amazonaws.ec2#ConnectionNotification$ConnectionNotificationType */ =>  {
                let var_1327 =
                    Some(
                        Result::<crate::model::ConnectionNotificationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ConnectionNotificationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_notification_type(var_1327);
            }
            ,
            s if s.matches("connectionNotificationArn") /* ConnectionNotificationArn com.amazonaws.ec2#ConnectionNotification$ConnectionNotificationArn */ =>  {
                let var_1328 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_notification_arn(var_1328);
            }
            ,
            s if s.matches("connectionEvents") /* ConnectionEvents com.amazonaws.ec2#ConnectionNotification$ConnectionEvents */ =>  {
                let var_1329 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_events(var_1329);
            }
            ,
            s if s.matches("connectionNotificationState") /* ConnectionNotificationState com.amazonaws.ec2#ConnectionNotification$ConnectionNotificationState */ =>  {
                let var_1330 =
                    Some(
                        Result::<crate::model::ConnectionNotificationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ConnectionNotificationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_notification_state(var_1330);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_service_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServiceConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServiceConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceType") /* ServiceType com.amazonaws.ec2#ServiceConfiguration$ServiceType */ =>  {
                let var_1331 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_service_type_detail_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_type(var_1331);
            }
            ,
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#ServiceConfiguration$ServiceId */ =>  {
                let var_1332 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_1332);
            }
            ,
            s if s.matches("serviceName") /* ServiceName com.amazonaws.ec2#ServiceConfiguration$ServiceName */ =>  {
                let var_1333 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_name(var_1333);
            }
            ,
            s if s.matches("serviceState") /* ServiceState com.amazonaws.ec2#ServiceConfiguration$ServiceState */ =>  {
                let var_1334 =
                    Some(
                        Result::<crate::model::ServiceState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ServiceState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_service_state(var_1334);
            }
            ,
            s if s.matches("availabilityZoneSet") /* AvailabilityZones com.amazonaws.ec2#ServiceConfiguration$AvailabilityZones */ =>  {
                let var_1335 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_1335);
            }
            ,
            s if s.matches("acceptanceRequired") /* AcceptanceRequired com.amazonaws.ec2#ServiceConfiguration$AcceptanceRequired */ =>  {
                let var_1336 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_acceptance_required(var_1336);
            }
            ,
            s if s.matches("managesVpcEndpoints") /* ManagesVpcEndpoints com.amazonaws.ec2#ServiceConfiguration$ManagesVpcEndpoints */ =>  {
                let var_1337 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_manages_vpc_endpoints(var_1337);
            }
            ,
            s if s.matches("networkLoadBalancerArnSet") /* NetworkLoadBalancerArns com.amazonaws.ec2#ServiceConfiguration$NetworkLoadBalancerArns */ =>  {
                let var_1338 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_load_balancer_arns(var_1338);
            }
            ,
            s if s.matches("gatewayLoadBalancerArnSet") /* GatewayLoadBalancerArns com.amazonaws.ec2#ServiceConfiguration$GatewayLoadBalancerArns */ =>  {
                let var_1339 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gateway_load_balancer_arns(var_1339);
            }
            ,
            s if s.matches("baseEndpointDnsNameSet") /* BaseEndpointDnsNames com.amazonaws.ec2#ServiceConfiguration$BaseEndpointDnsNames */ =>  {
                let var_1340 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_base_endpoint_dns_names(var_1340);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#ServiceConfiguration$PrivateDnsName */ =>  {
                let var_1341 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_1341);
            }
            ,
            s if s.matches("privateDnsNameConfiguration") /* PrivateDnsNameConfiguration com.amazonaws.ec2#ServiceConfiguration$PrivateDnsNameConfiguration */ =>  {
                let var_1342 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_private_dns_name_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_configuration(var_1342);
            }
            ,
            s if s.matches("payerResponsibility") /* PayerResponsibility com.amazonaws.ec2#ServiceConfiguration$PayerResponsibility */ =>  {
                let var_1343 =
                    Some(
                        Result::<crate::model::PayerResponsibility, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PayerResponsibility::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payer_responsibility(var_1343);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ServiceConfiguration$Tags */ =>  {
                let var_1344 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1344);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpn_connection(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpnConnection, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpnConnection::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("customerGatewayConfiguration") /* CustomerGatewayConfiguration com.amazonaws.ec2#VpnConnection$CustomerGatewayConfiguration */ =>  {
                let var_1345 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_gateway_configuration(var_1345);
            }
            ,
            s if s.matches("customerGatewayId") /* CustomerGatewayId com.amazonaws.ec2#VpnConnection$CustomerGatewayId */ =>  {
                let var_1346 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_gateway_id(var_1346);
            }
            ,
            s if s.matches("category") /* Category com.amazonaws.ec2#VpnConnection$Category */ =>  {
                let var_1347 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_category(var_1347);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#VpnConnection$State */ =>  {
                let var_1348 =
                    Some(
                        Result::<crate::model::VpnState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1348);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#VpnConnection$Type */ =>  {
                let var_1349 =
                    Some(
                        Result::<crate::model::GatewayType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::GatewayType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1349);
            }
            ,
            s if s.matches("vpnConnectionId") /* VpnConnectionId com.amazonaws.ec2#VpnConnection$VpnConnectionId */ =>  {
                let var_1350 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_connection_id(var_1350);
            }
            ,
            s if s.matches("vpnGatewayId") /* VpnGatewayId com.amazonaws.ec2#VpnConnection$VpnGatewayId */ =>  {
                let var_1351 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_gateway_id(var_1351);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#VpnConnection$TransitGatewayId */ =>  {
                let var_1352 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1352);
            }
            ,
            s if s.matches("coreNetworkArn") /* CoreNetworkArn com.amazonaws.ec2#VpnConnection$CoreNetworkArn */ =>  {
                let var_1353 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_core_network_arn(var_1353);
            }
            ,
            s if s.matches("coreNetworkAttachmentArn") /* CoreNetworkAttachmentArn com.amazonaws.ec2#VpnConnection$CoreNetworkAttachmentArn */ =>  {
                let var_1354 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_core_network_attachment_arn(var_1354);
            }
            ,
            s if s.matches("gatewayAssociationState") /* GatewayAssociationState com.amazonaws.ec2#VpnConnection$GatewayAssociationState */ =>  {
                let var_1355 =
                    Some(
                        Result::<crate::model::GatewayAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::GatewayAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_gateway_association_state(var_1355);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#VpnConnection$Options */ =>  {
                let var_1356 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpn_connection_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_1356);
            }
            ,
            s if s.matches("routes") /* Routes com.amazonaws.ec2#VpnConnection$Routes */ =>  {
                let var_1357 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpn_static_route_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routes(var_1357);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpnConnection$Tags */ =>  {
                let var_1358 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1358);
            }
            ,
            s if s.matches("vgwTelemetry") /* VgwTelemetry com.amazonaws.ec2#VpnConnection$VgwTelemetry */ =>  {
                let var_1359 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vgw_telemetry_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vgw_telemetry(var_1359);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpn_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpnGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpnGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#VpnGateway$AvailabilityZone */ =>  {
                let var_1360 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1360);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#VpnGateway$State */ =>  {
                let var_1361 =
                    Some(
                        Result::<crate::model::VpnState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1361);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#VpnGateway$Type */ =>  {
                let var_1362 =
                    Some(
                        Result::<crate::model::GatewayType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::GatewayType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1362);
            }
            ,
            s if s.matches("attachments") /* VpcAttachments com.amazonaws.ec2#VpnGateway$VpcAttachments */ =>  {
                let var_1363 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_vpc_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_attachments(var_1363);
            }
            ,
            s if s.matches("vpnGatewayId") /* VpnGatewayId com.amazonaws.ec2#VpnGateway$VpnGatewayId */ =>  {
                let var_1364 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_gateway_id(var_1364);
            }
            ,
            s if s.matches("amazonSideAsn") /* AmazonSideAsn com.amazonaws.ec2#VpnGateway$AmazonSideAsn */ =>  {
                let var_1365 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_amazon_side_asn(var_1365);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpnGateway$Tags */ =>  {
                let var_1366 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1366);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_delete_fleet_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DeleteFleetSuccessItem>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DeleteFleetSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_delete_fleet_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_delete_fleet_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DeleteFleetErrorItem>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DeleteFleetErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_delete_fleet_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_event_window_state_change(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceEventWindowStateChange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceEventWindowStateChange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventWindowId") /* InstanceEventWindowId com.amazonaws.ec2#InstanceEventWindowStateChange$InstanceEventWindowId */ =>  {
                let var_1367 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_event_window_id(var_1367);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceEventWindowStateChange$State */ =>  {
                let var_1368 =
                    Some(
                        Result::<crate::model::InstanceEventWindowState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceEventWindowState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1368);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_delete_launch_template_versions_response_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_delete_launch_template_versions_response_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_delete_launch_template_versions_response_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_delete_launch_template_versions_response_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_successful_queued_purchase_deletion_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SuccessfulQueuedPurchaseDeletionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_successful_queued_purchase_deletion(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_failed_queued_purchase_deletion_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FailedQueuedPurchaseDeletionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_failed_queued_purchase_deletion(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_ipam_pool_cidr(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamPoolCidr, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamPoolCidr::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#IpamPoolCidr$Cidr */ =>  {
                let var_1369 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_1369);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IpamPoolCidr$State */ =>  {
                let var_1370 =
                    Some(
                        Result::<crate::model::IpamPoolCidrState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamPoolCidrState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1370);
            }
            ,
            s if s.matches("failureReason") /* FailureReason com.amazonaws.ec2#IpamPoolCidr$FailureReason */ =>  {
                let var_1371 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ipam_pool_cidr_failure_reason(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_failure_reason(var_1371);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_deprovisioned_address_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DeprovisionedAddressSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_tag_notification_attribute(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceTagNotificationAttribute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceTagNotificationAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTagKeySet") /* InstanceTagKeys com.amazonaws.ec2#InstanceTagNotificationAttribute$InstanceTagKeys */ =>  {
                let var_1372 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_tag_key_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_tag_keys(var_1372);
            }
            ,
            s if s.matches("includeAllTagsOfInstance") /* IncludeAllTagsOfInstance com.amazonaws.ec2#InstanceTagNotificationAttribute$IncludeAllTagsOfInstance */ =>  {
                let var_1373 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_include_all_tags_of_instance(var_1373);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_deregistered_group_members(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::TransitGatewayMulticastDeregisteredGroupMembers,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDeregisteredGroupMembers::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupMembers$TransitGatewayMulticastDomainId */ =>  {
                let var_1374 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_1374);
            }
            ,
            s if s.matches("deregisteredNetworkInterfaceIds") /* DeregisteredNetworkInterfaceIds com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupMembers$DeregisteredNetworkInterfaceIds */ =>  {
                let var_1375 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deregistered_network_interface_ids(var_1375);
            }
            ,
            s if s.matches("groupIpAddress") /* GroupIpAddress com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupMembers$GroupIpAddress */ =>  {
                let var_1376 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_ip_address(var_1376);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_deregistered_group_sources(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::TransitGatewayMulticastDeregisteredGroupSources,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDeregisteredGroupSources::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupSources$TransitGatewayMulticastDomainId */ =>  {
                let var_1377 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_1377);
            }
            ,
            s if s.matches("deregisteredNetworkInterfaceIds") /* DeregisteredNetworkInterfaceIds com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupSources$DeregisteredNetworkInterfaceIds */ =>  {
                let var_1378 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_deregistered_network_interface_ids(var_1378);
            }
            ,
            s if s.matches("groupIpAddress") /* GroupIpAddress com.amazonaws.ec2#TransitGatewayMulticastDeregisteredGroupSources$GroupIpAddress */ =>  {
                let var_1379 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_ip_address(var_1379);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_account_attribute_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AccountAttribute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AccountAttributeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_account_attribute(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Address>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_address_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AddressAttribute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AddressSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_address_attribute(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_id_format_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IdFormat>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IdFormatList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_id_format(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_availability_zone_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AvailabilityZone>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AvailabilityZoneList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_availability_zone(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_bundle_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::BundleTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#BundleTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_bundle_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_byoip_cidr_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ByoipCidr>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ByoipCidrSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_byoip_cidr(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_capacity_reservation_fleet_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CapacityReservationFleet>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CapacityReservationFleetSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_capacity_reservation_fleet(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_capacity_reservation_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CapacityReservation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CapacityReservationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_capacity_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_carrier_gateway_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CarrierGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CarrierGatewaySet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_carrier_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_classic_link_instance_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClassicLinkInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClassicLinkInstanceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_classic_link_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_authorization_rule_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AuthorizationRule>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AuthorizationRuleSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_authorization_rule(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_client_vpn_connection_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClientVpnConnection>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClientVpnConnectionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_client_vpn_connection(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_endpoint_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClientVpnEndpoint>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#EndpointSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_client_vpn_endpoint(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_client_vpn_route_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClientVpnRoute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClientVpnRouteSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_client_vpn_route(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_target_network_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TargetNetwork>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TargetNetworkSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_target_network(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_coip_pool_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CoipPool>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CoipPoolSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_coip_pool(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_describe_conversion_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ConversionTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DescribeConversionTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_conversion_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_customer_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CustomerGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CustomerGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_customer_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_dhcp_options_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DhcpOptions>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DhcpOptionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_dhcp_options(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_egress_only_internet_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::EgressOnlyInternetGateway>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#EgressOnlyInternetGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_egress_only_internet_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_elastic_gpu_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ElasticGpus>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticGpuSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_gpus(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_export_image_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ExportImageTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ExportImageTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_export_image_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_export_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ExportTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ExportTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_export_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_describe_fast_launch_images_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DescribeFastLaunchImagesSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DescribeFastLaunchImagesSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_describe_fast_launch_images_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_describe_fast_snapshot_restore_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_describe_fast_snapshot_restore_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_history_record_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HistoryRecordEntry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HistoryRecordSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_history_record_entry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_active_instance_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ActiveInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ActiveInstanceSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_active_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_fleet_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FleetData>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FleetSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fleet_data(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_flow_log_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FlowLog>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FlowLogSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_flow_log(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_fpga_image_attribute(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaImageAttribute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaImageAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageId") /* FpgaImageId com.amazonaws.ec2#FpgaImageAttribute$FpgaImageId */ =>  {
                let var_1380 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_id(var_1380);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#FpgaImageAttribute$Name */ =>  {
                let var_1381 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_1381);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#FpgaImageAttribute$Description */ =>  {
                let var_1382 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1382);
            }
            ,
            s if s.matches("loadPermissions") /* LoadPermissions com.amazonaws.ec2#FpgaImageAttribute$LoadPermissions */ =>  {
                let var_1383 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_load_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_permissions(var_1383);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2#FpgaImageAttribute$ProductCodes */ =>  {
                let var_1384 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_1384);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_fpga_image_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FpgaImage>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FpgaImageList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fpga_image(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_host_offering_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HostOffering>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HostOfferingSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_host_offering(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_host_reservation_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HostReservation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HostReservationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_host_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_host_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Host>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HostList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_host(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_iam_instance_profile_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::IamInstanceProfileAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IamInstanceProfileAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_iam_instance_profile_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_block_device_mapping_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::BlockDeviceMapping>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#BlockDeviceMappingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_block_device_mapping(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_permission_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LaunchPermission>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchPermissionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_product_code_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ProductCode>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ProductCodeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_product_code(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_attribute_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AttributeValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AttributeValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#AttributeValue$Value */ =>  {
                let var_1385 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_1385);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_image_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Image>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImageList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_image(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_import_image_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ImportImageTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImportImageTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_import_image_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_import_snapshot_task_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ImportSnapshotTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImportSnapshotTaskList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_import_snapshot_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_group_identifier_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::GroupIdentifier>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#GroupIdentifierList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_group_identifier(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_block_device_mapping_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceBlockDeviceMappingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_block_device_mapping(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_attribute_boolean_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AttributeBooleanValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AttributeBooleanValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#AttributeBooleanValue$Value */ =>  {
                let var_1386 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_1386);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_enclave_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EnclaveOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EnclaveOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#EnclaveOptions$Enabled */ =>  {
                let var_1387 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_1387);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_credit_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::InstanceCreditSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceCreditSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_credit_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_event_window_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceEventWindow>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceEventWindowSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_event_window(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reservation_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Reservation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_status_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceStatus>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceStatusList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_type_offerings_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceTypeOffering>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceTypeOfferingsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_type_offering(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_type_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceTypeInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceTypeInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_type_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_internet_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InternetGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InternetGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_internet_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_pool_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamPool>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamPoolSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_pool(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipam>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_scope_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamScope>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamScopeSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_scope(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_pool_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv6Pool>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6PoolSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_pool(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_key_pair_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::KeyPairInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#KeyPairList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_key_pair_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LaunchTemplate>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_version_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LaunchTemplateVersion>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateVersionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_version(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_route_table_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LocalGatewayRouteTable>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayRouteTableSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_route_table(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_route_table_virtual_interface_group_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_route_table_virtual_interface_group_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_route_table_vpc_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayRouteTableVpcAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_route_table_vpc_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LocalGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewaySet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_group_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroupSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_virtual_interface_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LocalGatewayVirtualInterface>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayVirtualInterfaceSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_virtual_interface(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_managed_prefix_list_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ManagedPrefixList>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ManagedPrefixListSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_managed_prefix_list(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_moving_address_status_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::MovingAddressStatus>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#MovingAddressStatusSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_moving_address_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_nat_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NatGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NatGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_nat_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_acl_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkAcl>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkAclList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_acl(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_insights_access_scope_analysis_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::NetworkInsightsAccessScopeAnalysis>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysisList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_insights_access_scope_analysis(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_insights_access_scope_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkInsightsAccessScope>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInsightsAccessScopeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_insights_access_scope(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_insights_analysis_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkInsightsAnalysis>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInsightsAnalysisList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_insights_analysis(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_insights_path_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkInsightsPath>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInsightsPathList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_insights_path(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_network_interface_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfaceAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfaceAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#NetworkInterfaceAttachment$AttachTime */ =>  {
                let var_1388 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_1388);
            }
            ,
            s if s.matches("attachmentId") /* AttachmentId com.amazonaws.ec2#NetworkInterfaceAttachment$AttachmentId */ =>  {
                let var_1389 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attachment_id(var_1389);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#NetworkInterfaceAttachment$DeleteOnTermination */ =>  {
                let var_1390 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_1390);
            }
            ,
            s if s.matches("deviceIndex") /* DeviceIndex com.amazonaws.ec2#NetworkInterfaceAttachment$DeviceIndex */ =>  {
                let var_1391 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_device_index(var_1391);
            }
            ,
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#NetworkInterfaceAttachment$NetworkCardIndex */ =>  {
                let var_1392 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_1392);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#NetworkInterfaceAttachment$InstanceId */ =>  {
                let var_1393 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1393);
            }
            ,
            s if s.matches("instanceOwnerId") /* InstanceOwnerId com.amazonaws.ec2#NetworkInterfaceAttachment$InstanceOwnerId */ =>  {
                let var_1394 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_owner_id(var_1394);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#NetworkInterfaceAttachment$Status */ =>  {
                let var_1395 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1395);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_network_interface_permission_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkInterfacePermission>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInterfacePermissionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_interface_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_interface_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkInterface>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInterfaceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_interface(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_placement_group_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PlacementGroup>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PlacementGroupList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_placement_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_prefix_list_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrefixList>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrefixListSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_prefix_list(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_principal_id_format_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrincipalIdFormat>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrincipalIdFormatList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_principal_id_format(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_public_ipv4_pool_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PublicIpv4Pool>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PublicIpv4PoolSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_public_ipv4_pool(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_region_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Region>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RegionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_region(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_replace_root_volume_tasks(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ReplaceRootVolumeTask>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReplaceRootVolumeTasks$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_replace_root_volume_task(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_instances_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ReservedInstances>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstancesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_instances_modification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ReservedInstancesModification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstancesModificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances_modification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_instances_offering_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ReservedInstancesOffering>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstancesOfferingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances_offering(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_route_table_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RouteTable>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RouteTableList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_route_table(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_scheduled_instance_availability_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ScheduledInstanceAvailability>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ScheduledInstanceAvailabilitySet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_scheduled_instance_availability(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_scheduled_instance_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ScheduledInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ScheduledInstanceSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_scheduled_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_security_group_references(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SecurityGroupReference>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SecurityGroupReferences$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_security_group_reference(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_security_group_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SecurityGroup>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SecurityGroupList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_security_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_create_volume_permission_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CreateVolumePermission>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CreateVolumePermissionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_create_volume_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_snapshot_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Snapshot>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SnapshotList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_snapshot(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_snapshot_tier_status_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SnapshotTierStatus>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#snapshotTierStatusSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_snapshot_tier_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_history_records(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HistoryRecord>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HistoryRecords$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_history_record(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_spot_fleet_request_config_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SpotFleetRequestConfig>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SpotFleetRequestConfigSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_fleet_request_config(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_spot_instance_request_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SpotInstanceRequest>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SpotInstanceRequestList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_instance_request(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_spot_price_history_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SpotPrice>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SpotPriceHistoryList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_price(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_stale_security_group_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StaleSecurityGroup>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#StaleSecurityGroupSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_stale_security_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_store_image_task_result_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StoreImageTaskResult>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#StoreImageTaskResultSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_store_image_task_result(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_subnet_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Subnet>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SubnetList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_subnet(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_tag_description_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TagDescription>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TagDescriptionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag_description(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_traffic_mirror_filter_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficMirrorFilter>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrafficMirrorFilterSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_traffic_mirror_session_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficMirrorSession>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrafficMirrorSessionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_traffic_mirror_session(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_traffic_mirror_target_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficMirrorTarget>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrafficMirrorTargetSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_traffic_mirror_target(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGatewayAttachment>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_connect_peer_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGatewayConnectPeer>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayConnectPeerList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_connect_peer(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_connect_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGatewayConnect>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayConnectList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_connect(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_multicast_domain_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayMulticastDomain>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayMulticastDomainList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_peering_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayPeeringAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_peering_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_route_table_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGatewayRouteTable>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayRouteTableList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_route_table(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_vpc_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayVpcAttachment>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayVpcAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_vpc_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_trunk_interface_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrunkInterfaceAssociation>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrunkInterfaceAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_trunk_interface_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_volume_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Volume>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_volume_modification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeModification>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeModificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_modification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_volume_status_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeStatusItem>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeStatusList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_status_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_classic_link_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcClassicLink>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcClassicLinkList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_classic_link(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_classic_link_dns_support_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClassicLinkDnsSupport>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClassicLinkDnsSupportList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_classic_link_dns_support(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_connection_notification_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ConnectionNotification>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ConnectionNotificationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_connection_notification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_endpoint_connection_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcEndpointConnection>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcEndpointConnectionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_endpoint_connection(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_endpoint_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcEndpoint>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcEndpointSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_endpoint(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_service_configuration_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ServiceConfiguration>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ServiceConfigurationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_service_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_allowed_principal_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AllowedPrincipal>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AllowedPrincipalSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_allowed_principal(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_service_detail_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ServiceDetail>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ServiceDetailSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_service_detail(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_peering_connection_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcPeeringConnection>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcPeeringConnectionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_peering_connection(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Vpc>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpn_connection_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpnConnection>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpnConnectionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpn_connection(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpn_gateway_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpnGateway>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpnGatewayList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpn_gateway(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_fast_launch_snapshot_configuration_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FastLaunchSnapshotConfigurationResponse, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::FastLaunchSnapshotConfigurationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("targetResourceCount") /* TargetResourceCount com.amazonaws.ec2#FastLaunchSnapshotConfigurationResponse$TargetResourceCount */ =>  {
                let var_1396 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_resource_count(var_1396);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fast_launch_launch_template_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::FastLaunchLaunchTemplateSpecificationResponse,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FastLaunchLaunchTemplateSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#FastLaunchLaunchTemplateSpecificationResponse$LaunchTemplateId */ =>  {
                let var_1397 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_1397);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#FastLaunchLaunchTemplateSpecificationResponse$LaunchTemplateName */ =>  {
                let var_1398 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_1398);
            }
            ,
            s if s.matches("version") /* Version com.amazonaws.ec2#FastLaunchLaunchTemplateSpecificationResponse$Version */ =>  {
                let var_1399 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version(var_1399);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_disable_fast_snapshot_restore_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DisableFastSnapshotRestoreErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_disable_fast_snapshot_restore_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_transit_gateway_propagation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayPropagation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayPropagation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayPropagation$TransitGatewayAttachmentId */ =>  {
                let var_1400 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_1400);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayPropagation$ResourceId */ =>  {
                let var_1401 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_1401);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayPropagation$ResourceType */ =>  {
                let var_1402 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_1402);
            }
            ,
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayPropagation$TransitGatewayRouteTableId */ =>  {
                let var_1403 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_1403);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayPropagation$State */ =>  {
                let var_1404 =
                    Some(
                        Result::<crate::model::TransitGatewayPropagationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayPropagationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1404);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_success_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_enable_fast_snapshot_restore_success_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#EnableFastSnapshotRestoreErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_enable_fast_snapshot_restore_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_client_certificate_revocation_list_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientCertificateRevocationListStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientCertificateRevocationListStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientCertificateRevocationListStatus$Code */ =>  {
                let var_1405 =
                    Some(
                        Result::<crate::model::ClientCertificateRevocationListStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientCertificateRevocationListStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1405);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientCertificateRevocationListStatus$Message */ =>  {
                let var_1406 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1406);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_export_task_s3_location(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExportTaskS3Location, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExportTaskS3Location::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("s3Bucket") /* S3Bucket com.amazonaws.ec2#ExportTaskS3Location$S3Bucket */ =>  {
                let var_1407 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket(var_1407);
            }
            ,
            s if s.matches("s3Prefix") /* S3Prefix com.amazonaws.ec2#ExportTaskS3Location$S3Prefix */ =>  {
                let var_1408 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_prefix(var_1408);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_associated_roles_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AssociatedRole>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AssociatedRolesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_associated_role(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_cidr_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv6CidrAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6CidrAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_cidr_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_usage_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceUsage>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceUsageSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_usage(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_coip_address_usage_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CoipAddressUsage>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CoipAddressUsageSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_coip_address_usage(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_family_credit_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceFamilyCreditSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceFamilyCreditSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#InstanceFamilyCreditSpecification$InstanceFamily */ =>  {
                let var_1409 =
                    Some(
                        Result::<crate::model::UnlimitedSupportedInstanceFamily, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::UnlimitedSupportedInstanceFamily::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_1409);
            }
            ,
            s if s.matches("cpuCredits") /* CpuCredits com.amazonaws.ec2#InstanceFamilyCreditSpecification$CpuCredits */ =>  {
                let var_1410 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cpu_credits(var_1410);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_capacity_reservation_group_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CapacityReservationGroup>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CapacityReservationGroupSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_capacity_reservation_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_purchase_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Purchase>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PurchaseSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_purchase(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_type_info_from_instance_requirements_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::InstanceTypeInfoFromInstanceRequirements>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceTypeInfoFromInstanceRequirementsSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_type_info_from_instance_requirements(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_address_history_record_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamAddressHistoryRecord>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamAddressHistoryRecordSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_address_history_record(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_pool_allocation_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamPoolAllocation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamPoolAllocationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_pool_allocation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_pool_cidr_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamPoolCidr>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamPoolCidrSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_pool_cidr(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_resource_cidr_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamResourceCidr>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamResourceCidrSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_resource_cidr(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_response_launch_template_data(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResponseLaunchTemplateData, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResponseLaunchTemplateData::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#ResponseLaunchTemplateData$KernelId */ =>  {
                let var_1411 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_1411);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#ResponseLaunchTemplateData$EbsOptimized */ =>  {
                let var_1412 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_1412);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#ResponseLaunchTemplateData$IamInstanceProfile */ =>  {
                let var_1413 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_iam_instance_profile_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_1413);
            }
            ,
            s if s.matches("blockDeviceMappingSet") /* BlockDeviceMappings com.amazonaws.ec2#ResponseLaunchTemplateData$BlockDeviceMappings */ =>  {
                let var_1414 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_1414);
            }
            ,
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2#ResponseLaunchTemplateData$NetworkInterfaces */ =>  {
                let var_1415 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_instance_network_interface_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_1415);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ResponseLaunchTemplateData$ImageId */ =>  {
                let var_1416 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_1416);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ResponseLaunchTemplateData$InstanceType */ =>  {
                let var_1417 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_1417);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#ResponseLaunchTemplateData$KeyName */ =>  {
                let var_1418 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_1418);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#ResponseLaunchTemplateData$Monitoring */ =>  {
                let var_1419 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_templates_monitoring(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_1419);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#ResponseLaunchTemplateData$Placement */ =>  {
                let var_1420 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_placement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_1420);
            }
            ,
            s if s.matches("ramDiskId") /* RamDiskId com.amazonaws.ec2#ResponseLaunchTemplateData$RamDiskId */ =>  {
                let var_1421 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ram_disk_id(var_1421);
            }
            ,
            s if s.matches("disableApiTermination") /* DisableApiTermination com.amazonaws.ec2#ResponseLaunchTemplateData$DisableApiTermination */ =>  {
                let var_1422 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disable_api_termination(var_1422);
            }
            ,
            s if s.matches("instanceInitiatedShutdownBehavior") /* InstanceInitiatedShutdownBehavior com.amazonaws.ec2#ResponseLaunchTemplateData$InstanceInitiatedShutdownBehavior */ =>  {
                let var_1423 =
                    Some(
                        Result::<crate::model::ShutdownBehavior, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ShutdownBehavior::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_initiated_shutdown_behavior(var_1423);
            }
            ,
            s if s.matches("userData") /* UserData com.amazonaws.ec2#ResponseLaunchTemplateData$UserData */ =>  {
                let var_1424 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_data(var_1424);
            }
            ,
            s if s.matches("tagSpecificationSet") /* TagSpecifications com.amazonaws.ec2#ResponseLaunchTemplateData$TagSpecifications */ =>  {
                let var_1425 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_tag_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_specifications(var_1425);
            }
            ,
            s if s.matches("elasticGpuSpecificationSet") /* ElasticGpuSpecifications com.amazonaws.ec2#ResponseLaunchTemplateData$ElasticGpuSpecifications */ =>  {
                let var_1426 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_gpu_specification_response_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_specifications(var_1426);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorSet") /* ElasticInferenceAccelerators com.amazonaws.ec2#ResponseLaunchTemplateData$ElasticInferenceAccelerators */ =>  {
                let var_1427 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_elastic_inference_accelerator_response_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerators(var_1427);
            }
            ,
            s if s.matches("securityGroupIdSet") /* SecurityGroupIds com.amazonaws.ec2#ResponseLaunchTemplateData$SecurityGroupIds */ =>  {
                let var_1428 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_1428);
            }
            ,
            s if s.matches("securityGroupSet") /* SecurityGroups com.amazonaws.ec2#ResponseLaunchTemplateData$SecurityGroups */ =>  {
                let var_1429 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_1429);
            }
            ,
            s if s.matches("instanceMarketOptions") /* InstanceMarketOptions com.amazonaws.ec2#ResponseLaunchTemplateData$InstanceMarketOptions */ =>  {
                let var_1430 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_instance_market_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_market_options(var_1430);
            }
            ,
            s if s.matches("creditSpecification") /* CreditSpecification com.amazonaws.ec2#ResponseLaunchTemplateData$CreditSpecification */ =>  {
                let var_1431 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_credit_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credit_specification(var_1431);
            }
            ,
            s if s.matches("cpuOptions") /* CpuOptions com.amazonaws.ec2#ResponseLaunchTemplateData$CpuOptions */ =>  {
                let var_1432 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_cpu_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu_options(var_1432);
            }
            ,
            s if s.matches("capacityReservationSpecification") /* CapacityReservationSpecification com.amazonaws.ec2#ResponseLaunchTemplateData$CapacityReservationSpecification */ =>  {
                let var_1433 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_capacity_reservation_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_specification(var_1433);
            }
            ,
            s if s.matches("licenseSet") /* LicenseSpecifications com.amazonaws.ec2#ResponseLaunchTemplateData$LicenseSpecifications */ =>  {
                let var_1434 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_license_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_license_specifications(var_1434);
            }
            ,
            s if s.matches("hibernationOptions") /* HibernationOptions com.amazonaws.ec2#ResponseLaunchTemplateData$HibernationOptions */ =>  {
                let var_1435 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_hibernation_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hibernation_options(var_1435);
            }
            ,
            s if s.matches("metadataOptions") /* MetadataOptions com.amazonaws.ec2#ResponseLaunchTemplateData$MetadataOptions */ =>  {
                let var_1436 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_instance_metadata_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metadata_options(var_1436);
            }
            ,
            s if s.matches("enclaveOptions") /* EnclaveOptions com.amazonaws.ec2#ResponseLaunchTemplateData$EnclaveOptions */ =>  {
                let var_1437 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_enclave_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enclave_options(var_1437);
            }
            ,
            s if s.matches("instanceRequirements") /* InstanceRequirements com.amazonaws.ec2#ResponseLaunchTemplateData$InstanceRequirements */ =>  {
                let var_1438 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_requirements(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_requirements(var_1438);
            }
            ,
            s if s.matches("privateDnsNameOptions") /* PrivateDnsNameOptions com.amazonaws.ec2#ResponseLaunchTemplateData$PrivateDnsNameOptions */ =>  {
                let var_1439 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_private_dns_name_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_options(var_1439);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_prefix_list_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrefixListAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrefixListAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_prefix_list_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_prefix_list_entry_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrefixListEntry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrefixListEntrySet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_prefix_list_entry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_access_scope_analysis_finding_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AccessScopeAnalysisFinding>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AccessScopeAnalysisFindingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_access_scope_analysis_finding(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_reservation_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservationValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservationValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#ReservationValue$HourlyPrice */ =>  {
                let var_1440 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_1440);
            }
            ,
            s if s.matches("remainingTotalValue") /* RemainingTotalValue com.amazonaws.ec2#ReservationValue$RemainingTotalValue */ =>  {
                let var_1441 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_remaining_total_value(var_1441);
            }
            ,
            s if s.matches("remainingUpfrontValue") /* RemainingUpfrontValue com.amazonaws.ec2#ReservationValue$RemainingUpfrontValue */ =>  {
                let var_1442 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_remaining_upfront_value(var_1442);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_reserved_instance_reservation_value_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ReservedInstanceReservationValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstanceReservationValueSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instance_reservation_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_target_reservation_value_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TargetReservationValue>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TargetReservationValueSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_target_reservation_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_spot_placement_scores(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SpotPlacementScore>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SpotPlacementScores$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_placement_score(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_subnet_cidr_reservation_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SubnetCidrReservation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SubnetCidrReservationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_subnet_cidr_reservation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_attachment_propagation_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayAttachmentPropagationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_attachment_propagation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_multicast_domain_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayMulticastDomainAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_domain_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_prefix_list_reference_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayPrefixListReference>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayPrefixListReferenceSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_prefix_list_reference(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_route_table_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayRouteTableAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_route_table_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_route_table_propagation_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayRouteTablePropagationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_route_table_propagation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpn_connection_device_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpnConnectionDeviceType>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpnConnectionDeviceTypeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpn_connection_device_type(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_snapshot_detail_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SnapshotDetail>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SnapshotDetailList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_snapshot_detail(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_import_image_license_specification_list_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImportImageLicenseSpecificationListResponse$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_import_image_license_configuration_response(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_conversion_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ConversionTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ConversionTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("conversionTaskId") /* ConversionTaskId com.amazonaws.ec2#ConversionTask$ConversionTaskId */ =>  {
                let var_1443 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_conversion_task_id(var_1443);
            }
            ,
            s if s.matches("expirationTime") /* ExpirationTime com.amazonaws.ec2#ConversionTask$ExpirationTime */ =>  {
                let var_1444 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_expiration_time(var_1444);
            }
            ,
            s if s.matches("importInstance") /* ImportInstance com.amazonaws.ec2#ConversionTask$ImportInstance */ =>  {
                let var_1445 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_import_instance_task_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_import_instance(var_1445);
            }
            ,
            s if s.matches("importVolume") /* ImportVolume com.amazonaws.ec2#ConversionTask$ImportVolume */ =>  {
                let var_1446 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_import_volume_task_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_import_volume(var_1446);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ConversionTask$State */ =>  {
                let var_1447 =
                    Some(
                        Result::<crate::model::ConversionTaskState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ConversionTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1447);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ConversionTask$StatusMessage */ =>  {
                let var_1448 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1448);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ConversionTask$Tags */ =>  {
                let var_1449 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1449);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_snapshot_task_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SnapshotTaskDetail, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SnapshotTaskDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#SnapshotTaskDetail$Description */ =>  {
                let var_1450 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1450);
            }
            ,
            s if s.matches("diskImageSize") /* DiskImageSize com.amazonaws.ec2#SnapshotTaskDetail$DiskImageSize */ =>  {
                let var_1451 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disk_image_size(var_1451);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#SnapshotTaskDetail$Encrypted */ =>  {
                let var_1452 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_1452);
            }
            ,
            s if s.matches("format") /* Format com.amazonaws.ec2#SnapshotTaskDetail$Format */ =>  {
                let var_1453 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_1453);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2#SnapshotTaskDetail$KmsKeyId */ =>  {
                let var_1454 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_1454);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#SnapshotTaskDetail$Progress */ =>  {
                let var_1455 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_1455);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotTaskDetail$SnapshotId */ =>  {
                let var_1456 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_1456);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#SnapshotTaskDetail$Status */ =>  {
                let var_1457 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1457);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#SnapshotTaskDetail$StatusMessage */ =>  {
                let var_1458 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1458);
            }
            ,
            s if s.matches("url") /* Url com.amazonaws.ec2#SnapshotTaskDetail$Url */ =>  {
                let var_1459 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_url(var_1459);
            }
            ,
            s if s.matches("userBucket") /* UserBucket com.amazonaws.ec2#SnapshotTaskDetail$UserBucket */ =>  {
                let var_1460 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_user_bucket_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_bucket(var_1460);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_image_recycle_bin_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ImageRecycleBinInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImageRecycleBinInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_image_recycle_bin_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_snapshot_recycle_bin_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SnapshotRecycleBinInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SnapshotRecycleBinInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_snapshot_recycle_bin_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_address_attribute(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AddressAttribute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AddressAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#AddressAttribute$PublicIp */ =>  {
                let var_1461 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_1461);
            }
            ,
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2#AddressAttribute$AllocationId */ =>  {
                let var_1462 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_1462);
            }
            ,
            s if s.matches("ptrRecord") /* PtrRecord com.amazonaws.ec2#AddressAttribute$PtrRecord */ =>  {
                let var_1463 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ptr_record(var_1463);
            }
            ,
            s if s.matches("ptrRecordUpdate") /* PtrRecordUpdate com.amazonaws.ec2#AddressAttribute$PtrRecordUpdate */ =>  {
                let var_1464 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ptr_update_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ptr_record_update(var_1464);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_unsuccessful_item_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UnsuccessfulItem>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UnsuccessfulItemList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_unsuccessful_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_successful_instance_credit_specification_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SuccessfulInstanceCreditSpecificationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_successful_instance_credit_specification_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_unsuccessful_instance_credit_specification_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UnsuccessfulInstanceCreditSpecificationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_unsuccessful_instance_credit_specification_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_status_event(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStatusEvent, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStatusEvent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceEventId") /* InstanceEventId com.amazonaws.ec2#InstanceStatusEvent$InstanceEventId */ =>  {
                let var_1465 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_event_id(var_1465);
            }
            ,
            s if s.matches("code") /* Code com.amazonaws.ec2#InstanceStatusEvent$Code */ =>  {
                let var_1466 =
                    Some(
                        Result::<crate::model::EventCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EventCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1466);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#InstanceStatusEvent$Description */ =>  {
                let var_1467 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1467);
            }
            ,
            s if s.matches("notAfter") /* NotAfter com.amazonaws.ec2#InstanceStatusEvent$NotAfter */ =>  {
                let var_1468 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_not_after(var_1468);
            }
            ,
            s if s.matches("notBefore") /* NotBefore com.amazonaws.ec2#InstanceStatusEvent$NotBefore */ =>  {
                let var_1469 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_not_before(var_1469);
            }
            ,
            s if s.matches("notBeforeDeadline") /* NotBeforeDeadline com.amazonaws.ec2#InstanceStatusEvent$NotBeforeDeadline */ =>  {
                let var_1470 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_not_before_deadline(var_1470);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_metadata_options_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceMetadataOptionsResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceMetadataOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceMetadataOptionsResponse$State */ =>  {
                let var_1471 =
                    Some(
                        Result::<crate::model::InstanceMetadataOptionsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataOptionsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1471);
            }
            ,
            s if s.matches("httpTokens") /* HttpTokens com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpTokens */ =>  {
                let var_1472 =
                    Some(
                        Result::<crate::model::HttpTokensState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HttpTokensState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_tokens(var_1472);
            }
            ,
            s if s.matches("httpPutResponseHopLimit") /* HttpPutResponseHopLimit com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpPutResponseHopLimit */ =>  {
                let var_1473 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_put_response_hop_limit(var_1473);
            }
            ,
            s if s.matches("httpEndpoint") /* HttpEndpoint com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpEndpoint */ =>  {
                let var_1474 =
                    Some(
                        Result::<crate::model::InstanceMetadataEndpointState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataEndpointState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_endpoint(var_1474);
            }
            ,
            s if s.matches("httpProtocolIpv6") /* HttpProtocolIpv6 com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpProtocolIpv6 */ =>  {
                let var_1475 =
                    Some(
                        Result::<crate::model::InstanceMetadataProtocolState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataProtocolState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_protocol_ipv6(var_1475);
            }
            ,
            s if s.matches("instanceMetadataTags") /* InstanceMetadataTags com.amazonaws.ec2#InstanceMetadataOptionsResponse$InstanceMetadataTags */ =>  {
                let var_1476 =
                    Some(
                        Result::<crate::model::InstanceMetadataTagsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceMetadataTagsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_metadata_tags(var_1476);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_resource_cidr(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamResourceCidr, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamResourceCidr::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamId") /* IpamId com.amazonaws.ec2#IpamResourceCidr$IpamId */ =>  {
                let var_1477 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_id(var_1477);
            }
            ,
            s if s.matches("ipamScopeId") /* IpamScopeId com.amazonaws.ec2#IpamResourceCidr$IpamScopeId */ =>  {
                let var_1478 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_id(var_1478);
            }
            ,
            s if s.matches("ipamPoolId") /* IpamPoolId com.amazonaws.ec2#IpamResourceCidr$IpamPoolId */ =>  {
                let var_1479 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_id(var_1479);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamResourceCidr$ResourceRegion */ =>  {
                let var_1480 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_1480);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#IpamResourceCidr$ResourceOwnerId */ =>  {
                let var_1481 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_1481);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamResourceCidr$ResourceId */ =>  {
                let var_1482 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_1482);
            }
            ,
            s if s.matches("resourceName") /* ResourceName com.amazonaws.ec2#IpamResourceCidr$ResourceName */ =>  {
                let var_1483 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_name(var_1483);
            }
            ,
            s if s.matches("resourceCidr") /* ResourceCidr com.amazonaws.ec2#IpamResourceCidr$ResourceCidr */ =>  {
                let var_1484 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_cidr(var_1484);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamResourceCidr$ResourceType */ =>  {
                let var_1485 =
                    Some(
                        Result::<crate::model::IpamResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_1485);
            }
            ,
            s if s.matches("resourceTagSet") /* ResourceTags com.amazonaws.ec2#IpamResourceCidr$ResourceTags */ =>  {
                let var_1486 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipam_resource_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tags(var_1486);
            }
            ,
            s if s.matches("ipUsage") /* IpUsage com.amazonaws.ec2#IpamResourceCidr$IpUsage */ =>  {
                let var_1487 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#BoxedDouble`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ip_usage(var_1487);
            }
            ,
            s if s.matches("complianceStatus") /* ComplianceStatus com.amazonaws.ec2#IpamResourceCidr$ComplianceStatus */ =>  {
                let var_1488 =
                    Some(
                        Result::<crate::model::IpamComplianceStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamComplianceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_compliance_status(var_1488);
            }
            ,
            s if s.matches("managementState") /* ManagementState com.amazonaws.ec2#IpamResourceCidr$ManagementState */ =>  {
                let var_1489 =
                    Some(
                        Result::<crate::model::IpamManagementState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamManagementState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_management_state(var_1489);
            }
            ,
            s if s.matches("overlapStatus") /* OverlapStatus com.amazonaws.ec2#IpamResourceCidr$OverlapStatus */ =>  {
                let var_1490 =
                    Some(
                        Result::<crate::model::IpamOverlapStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamOverlapStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_overlap_status(var_1490);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#IpamResourceCidr$VpcId */ =>  {
                let var_1491 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1491);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_volume_modification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeModification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeModification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#VolumeModification$VolumeId */ =>  {
                let var_1492 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_1492);
            }
            ,
            s if s.matches("modificationState") /* ModificationState com.amazonaws.ec2#VolumeModification$ModificationState */ =>  {
                let var_1493 =
                    Some(
                        Result::<crate::model::VolumeModificationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeModificationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_modification_state(var_1493);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#VolumeModification$StatusMessage */ =>  {
                let var_1494 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1494);
            }
            ,
            s if s.matches("targetSize") /* TargetSize com.amazonaws.ec2#VolumeModification$TargetSize */ =>  {
                let var_1495 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_size(var_1495);
            }
            ,
            s if s.matches("targetIops") /* TargetIops com.amazonaws.ec2#VolumeModification$TargetIops */ =>  {
                let var_1496 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_iops(var_1496);
            }
            ,
            s if s.matches("targetVolumeType") /* TargetVolumeType com.amazonaws.ec2#VolumeModification$TargetVolumeType */ =>  {
                let var_1497 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_target_volume_type(var_1497);
            }
            ,
            s if s.matches("targetThroughput") /* TargetThroughput com.amazonaws.ec2#VolumeModification$TargetThroughput */ =>  {
                let var_1498 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_throughput(var_1498);
            }
            ,
            s if s.matches("targetMultiAttachEnabled") /* TargetMultiAttachEnabled com.amazonaws.ec2#VolumeModification$TargetMultiAttachEnabled */ =>  {
                let var_1499 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_multi_attach_enabled(var_1499);
            }
            ,
            s if s.matches("originalSize") /* OriginalSize com.amazonaws.ec2#VolumeModification$OriginalSize */ =>  {
                let var_1500 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_original_size(var_1500);
            }
            ,
            s if s.matches("originalIops") /* OriginalIops com.amazonaws.ec2#VolumeModification$OriginalIops */ =>  {
                let var_1501 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_original_iops(var_1501);
            }
            ,
            s if s.matches("originalVolumeType") /* OriginalVolumeType com.amazonaws.ec2#VolumeModification$OriginalVolumeType */ =>  {
                let var_1502 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_original_volume_type(var_1502);
            }
            ,
            s if s.matches("originalThroughput") /* OriginalThroughput com.amazonaws.ec2#VolumeModification$OriginalThroughput */ =>  {
                let var_1503 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_original_throughput(var_1503);
            }
            ,
            s if s.matches("originalMultiAttachEnabled") /* OriginalMultiAttachEnabled com.amazonaws.ec2#VolumeModification$OriginalMultiAttachEnabled */ =>  {
                let var_1504 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_original_multi_attach_enabled(var_1504);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#VolumeModification$Progress */ =>  {
                let var_1505 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_progress(var_1505);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#VolumeModification$StartTime */ =>  {
                let var_1506 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_1506);
            }
            ,
            s if s.matches("endTime") /* EndTime com.amazonaws.ec2#VolumeModification$EndTime */ =>  {
                let var_1507 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end_time(var_1507);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_peering_connection_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PeeringConnectionOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PeeringConnectionOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allowDnsResolutionFromRemoteVpc") /* AllowDnsResolutionFromRemoteVpc com.amazonaws.ec2#PeeringConnectionOptions$AllowDnsResolutionFromRemoteVpc */ =>  {
                let var_1508 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_dns_resolution_from_remote_vpc(var_1508);
            }
            ,
            s if s.matches("allowEgressFromLocalClassicLinkToRemoteVpc") /* AllowEgressFromLocalClassicLinkToRemoteVpc com.amazonaws.ec2#PeeringConnectionOptions$AllowEgressFromLocalClassicLinkToRemoteVpc */ =>  {
                let var_1509 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_egress_from_local_classic_link_to_remote_vpc(var_1509);
            }
            ,
            s if s.matches("allowEgressFromLocalVpcToRemoteClassicLink") /* AllowEgressFromLocalVpcToRemoteClassicLink com.amazonaws.ec2#PeeringConnectionOptions$AllowEgressFromLocalVpcToRemoteClassicLink */ =>  {
                let var_1510 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_egress_from_local_vpc_to_remote_classic_link(var_1510);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_monitoring_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceMonitoring>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceMonitoringList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_monitoring(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_public_ipv4_pool_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PublicIpv4PoolRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PublicIpv4PoolRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("firstAddress") /* FirstAddress com.amazonaws.ec2#PublicIpv4PoolRange$FirstAddress */ =>  {
                let var_1511 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_first_address(var_1511);
            }
            ,
            s if s.matches("lastAddress") /* LastAddress com.amazonaws.ec2#PublicIpv4PoolRange$LastAddress */ =>  {
                let var_1512 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_last_address(var_1512);
            }
            ,
            s if s.matches("addressCount") /* AddressCount com.amazonaws.ec2#PublicIpv4PoolRange$AddressCount */ =>  {
                let var_1513 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_address_count(var_1513);
            }
            ,
            s if s.matches("availableAddressCount") /* AvailableAddressCount com.amazonaws.ec2#PublicIpv4PoolRange$AvailableAddressCount */ =>  {
                let var_1514 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_address_count(var_1514);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_purchased_scheduled_instance_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ScheduledInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PurchasedScheduledInstanceSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_scheduled_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_transit_gateway_multicast_registered_group_members(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::TransitGatewayMulticastRegisteredGroupMembers,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastRegisteredGroupMembers::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupMembers$TransitGatewayMulticastDomainId */ =>  {
                let var_1515 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_1515);
            }
            ,
            s if s.matches("registeredNetworkInterfaceIds") /* RegisteredNetworkInterfaceIds com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupMembers$RegisteredNetworkInterfaceIds */ =>  {
                let var_1516 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_registered_network_interface_ids(var_1516);
            }
            ,
            s if s.matches("groupIpAddress") /* GroupIpAddress com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupMembers$GroupIpAddress */ =>  {
                let var_1517 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_ip_address(var_1517);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_registered_group_sources(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::TransitGatewayMulticastRegisteredGroupSources,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastRegisteredGroupSources::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayMulticastDomainId") /* TransitGatewayMulticastDomainId com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupSources$TransitGatewayMulticastDomainId */ =>  {
                let var_1518 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_multicast_domain_id(var_1518);
            }
            ,
            s if s.matches("registeredNetworkInterfaceIds") /* RegisteredNetworkInterfaceIds com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupSources$RegisteredNetworkInterfaceIds */ =>  {
                let var_1519 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_registered_network_interface_ids(var_1519);
            }
            ,
            s if s.matches("groupIpAddress") /* GroupIpAddress com.amazonaws.ec2#TransitGatewayMulticastRegisteredGroupSources$GroupIpAddress */ =>  {
                let var_1520 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_ip_address(var_1520);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ip_permission_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpPermission>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpPermissionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ip_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Instance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_id_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIdSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_route_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LocalGatewayRoute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayRouteList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_local_gateway_route(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_multicast_group_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayMulticastGroup>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayMulticastGroupList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_multicast_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_route_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TransitGatewayRoute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayRouteList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_route(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_state_change_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceStateChange>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceStateChangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_state_change(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_network_insights_access_scope_analysis(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInsightsAccessScopeAnalysis, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInsightsAccessScopeAnalysis::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysisId") /* NetworkInsightsAccessScopeAnalysisId com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$NetworkInsightsAccessScopeAnalysisId */ =>  {
                let var_1521 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis_id(var_1521);
            }
            ,
            s if s.matches("networkInsightsAccessScopeAnalysisArn") /* NetworkInsightsAccessScopeAnalysisArn com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$NetworkInsightsAccessScopeAnalysisArn */ =>  {
                let var_1522 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis_arn(var_1522);
            }
            ,
            s if s.matches("networkInsightsAccessScopeId") /* NetworkInsightsAccessScopeId com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$NetworkInsightsAccessScopeId */ =>  {
                let var_1523 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_id(var_1523);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$Status */ =>  {
                let var_1524 =
                    Some(
                        Result::<crate::model::AnalysisStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AnalysisStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1524);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$StatusMessage */ =>  {
                let var_1525 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1525);
            }
            ,
            s if s.matches("warningMessage") /* WarningMessage com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$WarningMessage */ =>  {
                let var_1526 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_warning_message(var_1526);
            }
            ,
            s if s.matches("startDate") /* StartDate com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$StartDate */ =>  {
                let var_1527 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_date(var_1527);
            }
            ,
            s if s.matches("endDate") /* EndDate com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$EndDate */ =>  {
                let var_1528 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end_date(var_1528);
            }
            ,
            s if s.matches("findingsFound") /* FindingsFound com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$FindingsFound */ =>  {
                let var_1529 =
                    Some(
                        Result::<crate::model::FindingsFound, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FindingsFound::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_findings_found(var_1529);
            }
            ,
            s if s.matches("analyzedEniCount") /* AnalyzedEniCount com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$AnalyzedEniCount */ =>  {
                let var_1530 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_analyzed_eni_count(var_1530);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NetworkInsightsAccessScopeAnalysis$Tags */ =>  {
                let var_1531 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1531);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_insights_analysis(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInsightsAnalysis, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInsightsAnalysis::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAnalysisId") /* NetworkInsightsAnalysisId com.amazonaws.ec2#NetworkInsightsAnalysis$NetworkInsightsAnalysisId */ =>  {
                let var_1532 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_analysis_id(var_1532);
            }
            ,
            s if s.matches("networkInsightsAnalysisArn") /* NetworkInsightsAnalysisArn com.amazonaws.ec2#NetworkInsightsAnalysis$NetworkInsightsAnalysisArn */ =>  {
                let var_1533 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_analysis_arn(var_1533);
            }
            ,
            s if s.matches("networkInsightsPathId") /* NetworkInsightsPathId com.amazonaws.ec2#NetworkInsightsAnalysis$NetworkInsightsPathId */ =>  {
                let var_1534 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_path_id(var_1534);
            }
            ,
            s if s.matches("filterInArnSet") /* FilterInArns com.amazonaws.ec2#NetworkInsightsAnalysis$FilterInArns */ =>  {
                let var_1535 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_arn_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter_in_arns(var_1535);
            }
            ,
            s if s.matches("startDate") /* StartDate com.amazonaws.ec2#NetworkInsightsAnalysis$StartDate */ =>  {
                let var_1536 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_date(var_1536);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#NetworkInsightsAnalysis$Status */ =>  {
                let var_1537 =
                    Some(
                        Result::<crate::model::AnalysisStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AnalysisStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1537);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#NetworkInsightsAnalysis$StatusMessage */ =>  {
                let var_1538 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1538);
            }
            ,
            s if s.matches("warningMessage") /* WarningMessage com.amazonaws.ec2#NetworkInsightsAnalysis$WarningMessage */ =>  {
                let var_1539 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_warning_message(var_1539);
            }
            ,
            s if s.matches("networkPathFound") /* NetworkPathFound com.amazonaws.ec2#NetworkInsightsAnalysis$NetworkPathFound */ =>  {
                let var_1540 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_path_found(var_1540);
            }
            ,
            s if s.matches("forwardPathComponentSet") /* ForwardPathComponents com.amazonaws.ec2#NetworkInsightsAnalysis$ForwardPathComponents */ =>  {
                let var_1541 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_path_component_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_forward_path_components(var_1541);
            }
            ,
            s if s.matches("returnPathComponentSet") /* ReturnPathComponents com.amazonaws.ec2#NetworkInsightsAnalysis$ReturnPathComponents */ =>  {
                let var_1542 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_path_component_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_return_path_components(var_1542);
            }
            ,
            s if s.matches("explanationSet") /* Explanations com.amazonaws.ec2#NetworkInsightsAnalysis$Explanations */ =>  {
                let var_1543 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_explanation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_explanations(var_1543);
            }
            ,
            s if s.matches("alternatePathHintSet") /* AlternatePathHints com.amazonaws.ec2#NetworkInsightsAnalysis$AlternatePathHints */ =>  {
                let var_1544 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_alternate_path_hint_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_alternate_path_hints(var_1544);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#NetworkInsightsAnalysis$Tags */ =>  {
                let var_1545 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1545);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_terminate_connection_status_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TerminateConnectionStatus>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TerminateConnectionStatusSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_terminate_connection_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_subnet_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SubnetAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SubnetAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_subnet_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_peering_tgw_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PeeringTgwInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PeeringTgwInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#PeeringTgwInfo$TransitGatewayId */ =>  {
                let var_1546 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_1546);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#PeeringTgwInfo$OwnerId */ =>  {
                let var_1547 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1547);
            }
            ,
            s if s.matches("region") /* Region com.amazonaws.ec2#PeeringTgwInfo$Region */ =>  {
                let var_1548 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_1548);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_peering_attachment_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PeeringAttachmentStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PeeringAttachmentStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#PeeringAttachmentStatus$Code */ =>  {
                let var_1549 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1549);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#PeeringAttachmentStatus$Message */ =>  {
                let var_1550 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1550);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_vpc_attachment_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayVpcAttachmentOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayVpcAttachmentOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dnsSupport") /* DnsSupport com.amazonaws.ec2#TransitGatewayVpcAttachmentOptions$DnsSupport */ =>  {
                let var_1551 =
                    Some(
                        Result::<crate::model::DnsSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DnsSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_support(var_1551);
            }
            ,
            s if s.matches("ipv6Support") /* Ipv6Support com.amazonaws.ec2#TransitGatewayVpcAttachmentOptions$Ipv6Support */ =>  {
                let var_1552 =
                    Some(
                        Result::<crate::model::Ipv6SupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Ipv6SupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_support(var_1552);
            }
            ,
            s if s.matches("applianceModeSupport") /* ApplianceModeSupport com.amazonaws.ec2#TransitGatewayVpcAttachmentOptions$ApplianceModeSupport */ =>  {
                let var_1553 =
                    Some(
                        Result::<crate::model::ApplianceModeSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ApplianceModeSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_appliance_mode_support(var_1553);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_unsuccessful_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::UnsuccessfulItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UnsuccessfulItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("error") /* Error com.amazonaws.ec2#UnsuccessfulItem$Error */ =>  {
                let var_1554 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_unsuccessful_item_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_1554);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#UnsuccessfulItem$ResourceId */ =>  {
                let var_1555 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_1555);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_peering_connection_vpc_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcPeeringConnectionVpcInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcPeeringConnectionVpcInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$CidrBlock */ =>  {
                let var_1556 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_1556);
            }
            ,
            s if s.matches("ipv6CidrBlockSet") /* Ipv6CidrBlockSet com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$Ipv6CidrBlockSet */ =>  {
                let var_1557 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_cidr_block_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_set(var_1557);
            }
            ,
            s if s.matches("cidrBlockSet") /* CidrBlockSet com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$CidrBlockSet */ =>  {
                let var_1558 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_cidr_block_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_set(var_1558);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$OwnerId */ =>  {
                let var_1559 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1559);
            }
            ,
            s if s.matches("peeringOptions") /* PeeringOptions com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$PeeringOptions */ =>  {
                let var_1560 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_vpc_peering_connection_options_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_peering_options(var_1560);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$VpcId */ =>  {
                let var_1561 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1561);
            }
            ,
            s if s.matches("region") /* Region com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$Region */ =>  {
                let var_1562 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_1562);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_peering_connection_state_reason(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcPeeringConnectionStateReason, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcPeeringConnectionStateReason::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#VpcPeeringConnectionStateReason$Code */ =>  {
                let var_1563 =
                    Some(
                        Result::<crate::model::VpcPeeringConnectionStateReasonCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpcPeeringConnectionStateReasonCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1563);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#VpcPeeringConnectionStateReason$Message */ =>  {
                let var_1564 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1564);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_assigned_private_ip_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AssignedPrivateIpAddress, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AssignedPrivateIpAddress::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#AssignedPrivateIpAddress$PrivateIpAddress */ =>  {
                let var_1565 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_1565);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv4_prefix_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv4PrefixSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv4PrefixSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv4Prefix") /* Ipv4Prefix com.amazonaws.ec2#Ipv4PrefixSpecification$Ipv4Prefix */ =>  {
                let var_1566 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix(var_1566);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_iam_instance_profile(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IamInstanceProfile, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IamInstanceProfile::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#IamInstanceProfile$Arn */ =>  {
                let var_1567 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_1567);
            }
            ,
            s if s.matches("id") /* Id com.amazonaws.ec2#IamInstanceProfile$Id */ =>  {
                let var_1568 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_1568);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_event_window_time_range_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::InstanceEventWindowTimeRange>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceEventWindowTimeRangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_event_window_time_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_event_window_association_target(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceEventWindowAssociationTarget, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceEventWindowAssociationTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceIdSet") /* InstanceIds com.amazonaws.ec2#InstanceEventWindowAssociationTarget$InstanceIds */ =>  {
                let var_1569 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_ids(var_1569);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#InstanceEventWindowAssociationTarget$Tags */ =>  {
                let var_1570 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1570);
            }
            ,
            s if s.matches("dedicatedHostIdSet") /* DedicatedHostIds com.amazonaws.ec2#InstanceEventWindowAssociationTarget$DedicatedHostIds */ =>  {
                let var_1571 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dedicated_host_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dedicated_host_ids(var_1571);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet_cidr_block_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SubnetCidrBlockState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SubnetCidrBlockState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#SubnetCidrBlockState$State */ =>  {
                let var_1572 =
                    Some(
                        Result::<crate::model::SubnetCidrBlockStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SubnetCidrBlockStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1572);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#SubnetCidrBlockState$StatusMessage */ =>  {
                let var_1573 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1573);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_cidr_block_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcCidrBlockState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcCidrBlockState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#VpcCidrBlockState$State */ =>  {
                let var_1574 =
                    Some(
                        Result::<crate::model::VpcCidrBlockStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpcCidrBlockStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1574);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#VpcCidrBlockState$StatusMessage */ =>  {
                let var_1575 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1575);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_security_group_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SecurityGroupRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SecurityGroupRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("securityGroupRuleId") /* SecurityGroupRuleId com.amazonaws.ec2#SecurityGroupRule$SecurityGroupRuleId */ =>  {
                let var_1576 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_security_group_rule_id(var_1576);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#SecurityGroupRule$GroupId */ =>  {
                let var_1577 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_1577);
            }
            ,
            s if s.matches("groupOwnerId") /* GroupOwnerId com.amazonaws.ec2#SecurityGroupRule$GroupOwnerId */ =>  {
                let var_1578 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_owner_id(var_1578);
            }
            ,
            s if s.matches("isEgress") /* IsEgress com.amazonaws.ec2#SecurityGroupRule$IsEgress */ =>  {
                let var_1579 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_egress(var_1579);
            }
            ,
            s if s.matches("ipProtocol") /* IpProtocol com.amazonaws.ec2#SecurityGroupRule$IpProtocol */ =>  {
                let var_1580 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_protocol(var_1580);
            }
            ,
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#SecurityGroupRule$FromPort */ =>  {
                let var_1581 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_1581);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#SecurityGroupRule$ToPort */ =>  {
                let var_1582 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_1582);
            }
            ,
            s if s.matches("cidrIpv4") /* CidrIpv4 com.amazonaws.ec2#SecurityGroupRule$CidrIpv4 */ =>  {
                let var_1583 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_ipv4(var_1583);
            }
            ,
            s if s.matches("cidrIpv6") /* CidrIpv6 com.amazonaws.ec2#SecurityGroupRule$CidrIpv6 */ =>  {
                let var_1584 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_ipv6(var_1584);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#SecurityGroupRule$PrefixListId */ =>  {
                let var_1585 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_1585);
            }
            ,
            s if s.matches("referencedGroupInfo") /* ReferencedGroupInfo com.amazonaws.ec2#SecurityGroupRule$ReferencedGroupInfo */ =>  {
                let var_1586 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_referenced_security_group(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_referenced_group_info(var_1586);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#SecurityGroupRule$Description */ =>  {
                let var_1587 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1587);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SecurityGroupRule$Tags */ =>  {
                let var_1588 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1588);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_bundle_task_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BundleTaskError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BundleTaskError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#BundleTaskError$Code */ =>  {
                let var_1589 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1589);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#BundleTaskError$Message */ =>  {
                let var_1590 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1590);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_storage(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Storage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Storage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("S3") /* S3 com.amazonaws.ec2#Storage$S3 */ =>  {
                let var_1591 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_s3_storage(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3(var_1591);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_fleet_cancellation_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationFleetCancellationState, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationFleetCancellationState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currentFleetState") /* CurrentFleetState com.amazonaws.ec2#CapacityReservationFleetCancellationState$CurrentFleetState */ =>  {
                let var_1592 =
                    Some(
                        Result::<crate::model::CapacityReservationFleetState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationFleetState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_current_fleet_state(var_1592);
            }
            ,
            s if s.matches("previousFleetState") /* PreviousFleetState com.amazonaws.ec2#CapacityReservationFleetCancellationState$PreviousFleetState */ =>  {
                let var_1593 =
                    Some(
                        Result::<crate::model::CapacityReservationFleetState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationFleetState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_previous_fleet_state(var_1593);
            }
            ,
            s if s.matches("capacityReservationFleetId") /* CapacityReservationFleetId com.amazonaws.ec2#CapacityReservationFleetCancellationState$CapacityReservationFleetId */ =>  {
                let var_1594 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_id(var_1594);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_failed_capacity_reservation_fleet_cancellation_result(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::FailedCapacityReservationFleetCancellationResult,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FailedCapacityReservationFleetCancellationResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationFleetId") /* CapacityReservationFleetId com.amazonaws.ec2#FailedCapacityReservationFleetCancellationResult$CapacityReservationFleetId */ =>  {
                let var_1595 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_id(var_1595);
            }
            ,
            s if s.matches("cancelCapacityReservationFleetError") /* CancelCapacityReservationFleetError com.amazonaws.ec2#FailedCapacityReservationFleetCancellationResult$CancelCapacityReservationFleetError */ =>  {
                let var_1596 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_cancel_capacity_reservation_fleet_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cancel_capacity_reservation_fleet_error(var_1596);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_listing(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesListing, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesListing::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#ReservedInstancesListing$ClientToken */ =>  {
                let var_1597 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_1597);
            }
            ,
            s if s.matches("createDate") /* CreateDate com.amazonaws.ec2#ReservedInstancesListing$CreateDate */ =>  {
                let var_1598 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_1598);
            }
            ,
            s if s.matches("instanceCounts") /* InstanceCounts com.amazonaws.ec2#ReservedInstancesListing$InstanceCounts */ =>  {
                let var_1599 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_count_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_counts(var_1599);
            }
            ,
            s if s.matches("priceSchedules") /* PriceSchedules com.amazonaws.ec2#ReservedInstancesListing$PriceSchedules */ =>  {
                let var_1600 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_price_schedule_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_price_schedules(var_1600);
            }
            ,
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#ReservedInstancesListing$ReservedInstancesId */ =>  {
                let var_1601 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_1601);
            }
            ,
            s if s.matches("reservedInstancesListingId") /* ReservedInstancesListingId com.amazonaws.ec2#ReservedInstancesListing$ReservedInstancesListingId */ =>  {
                let var_1602 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_listing_id(var_1602);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ReservedInstancesListing$Status */ =>  {
                let var_1603 =
                    Some(
                        Result::<crate::model::ListingStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ListingStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1603);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ReservedInstancesListing$StatusMessage */ =>  {
                let var_1604 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1604);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ReservedInstancesListing$Tags */ =>  {
                let var_1605 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1605);
            }
            ,
            s if s.matches("updateDate") /* UpdateDate com.amazonaws.ec2#ReservedInstancesListing$UpdateDate */ =>  {
                let var_1606 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_update_date(var_1606);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cancel_spot_fleet_requests_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CancelSpotFleetRequestsSuccessItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CancelSpotFleetRequestsSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currentSpotFleetRequestState") /* CurrentSpotFleetRequestState com.amazonaws.ec2#CancelSpotFleetRequestsSuccessItem$CurrentSpotFleetRequestState */ =>  {
                let var_1607 =
                    Some(
                        Result::<crate::model::BatchState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BatchState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_current_spot_fleet_request_state(var_1607);
            }
            ,
            s if s.matches("previousSpotFleetRequestState") /* PreviousSpotFleetRequestState com.amazonaws.ec2#CancelSpotFleetRequestsSuccessItem$PreviousSpotFleetRequestState */ =>  {
                let var_1608 =
                    Some(
                        Result::<crate::model::BatchState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BatchState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_previous_spot_fleet_request_state(var_1608);
            }
            ,
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2#CancelSpotFleetRequestsSuccessItem$SpotFleetRequestId */ =>  {
                let var_1609 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_1609);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cancel_spot_fleet_requests_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CancelSpotFleetRequestsErrorItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CancelSpotFleetRequestsErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("error") /* Error com.amazonaws.ec2#CancelSpotFleetRequestsErrorItem$Error */ =>  {
                let var_1610 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_cancel_spot_fleet_requests_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_1610);
            }
            ,
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2#CancelSpotFleetRequestsErrorItem$SpotFleetRequestId */ =>  {
                let var_1611 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_1611);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cancelled_spot_instance_request(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CancelledSpotInstanceRequest, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CancelledSpotInstanceRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("spotInstanceRequestId") /* SpotInstanceRequestId com.amazonaws.ec2#CancelledSpotInstanceRequest$SpotInstanceRequestId */ =>  {
                let var_1612 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_request_id(var_1612);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#CancelledSpotInstanceRequest$State */ =>  {
                let var_1613 =
                    Some(
                        Result::<crate::model::CancelSpotInstanceRequestState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CancelSpotInstanceRequestState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1613);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tag(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tag, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("key") /* Key com.amazonaws.ec2#Tag$Key */ =>  {
                let var_1614 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_1614);
            }
            ,
            s if s.matches("value") /* Value com.amazonaws.ec2#Tag$Value */ =>  {
                let var_1615 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_1615);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fleet_capacity_reservation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetCapacityReservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetCapacityReservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#FleetCapacityReservation$CapacityReservationId */ =>  {
                let var_1616 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_1616);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#FleetCapacityReservation$AvailabilityZoneId */ =>  {
                let var_1617 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_1617);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#FleetCapacityReservation$InstanceType */ =>  {
                let var_1618 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_1618);
            }
            ,
            s if s.matches("instancePlatform") /* InstancePlatform com.amazonaws.ec2#FleetCapacityReservation$InstancePlatform */ =>  {
                let var_1619 =
                    Some(
                        Result::<crate::model::CapacityReservationInstancePlatform, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationInstancePlatform::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_platform(var_1619);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#FleetCapacityReservation$AvailabilityZone */ =>  {
                let var_1620 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1620);
            }
            ,
            s if s.matches("totalInstanceCount") /* TotalInstanceCount com.amazonaws.ec2#FleetCapacityReservation$TotalInstanceCount */ =>  {
                let var_1621 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_instance_count(var_1621);
            }
            ,
            s if s.matches("fulfilledCapacity") /* FulfilledCapacity com.amazonaws.ec2#FleetCapacityReservation$FulfilledCapacity */ =>  {
                let var_1622 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fulfilled_capacity(var_1622);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#FleetCapacityReservation$EbsOptimized */ =>  {
                let var_1623 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_1623);
            }
            ,
            s if s.matches("createDate") /* CreateDate com.amazonaws.ec2#FleetCapacityReservation$CreateDate */ =>  {
                let var_1624 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_1624);
            }
            ,
            s if s.matches("weight") /* Weight com.amazonaws.ec2#FleetCapacityReservation$Weight */ =>  {
                let var_1625 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#DoubleWithConstraints`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weight(var_1625);
            }
            ,
            s if s.matches("priority") /* Priority com.amazonaws.ec2#FleetCapacityReservation$Priority */ =>  {
                let var_1626 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#IntegerWithConstraints`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_priority(var_1626);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_subnet_ipv6_cidr_block_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::SubnetIpv6CidrBlockAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SubnetIpv6CidrBlockAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_subnet_ipv6_cidr_block_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_private_dns_name_options_on_launch(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrivateDnsNameOptionsOnLaunch, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrivateDnsNameOptionsOnLaunch::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostnameType") /* HostnameType com.amazonaws.ec2#PrivateDnsNameOptionsOnLaunch$HostnameType */ =>  {
                let var_1627 =
                    Some(
                        Result::<crate::model::HostnameType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostnameType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hostname_type(var_1627);
            }
            ,
            s if s.matches("enableResourceNameDnsARecord") /* EnableResourceNameDnsARecord com.amazonaws.ec2#PrivateDnsNameOptionsOnLaunch$EnableResourceNameDnsARecord */ =>  {
                let var_1628 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_a_record(var_1628);
            }
            ,
            s if s.matches("enableResourceNameDnsAAAARecord") /* EnableResourceNameDnsAAAARecord com.amazonaws.ec2#PrivateDnsNameOptionsOnLaunch$EnableResourceNameDnsAAAARecord */ =>  {
                let var_1629 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_aaaa_record(var_1629);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_vpc_ipv6_cidr_block_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::VpcIpv6CidrBlockAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcIpv6CidrBlockAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_ipv6_cidr_block_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_cidr_block_association_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcCidrBlockAssociation>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcCidrBlockAssociationSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_cidr_block_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_dhcp_configuration_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DhcpConfiguration>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DhcpConfigurationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_dhcp_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_internet_gateway_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InternetGatewayAttachment>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InternetGatewayAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_internet_gateway_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_create_fleet_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CreateFleetError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CreateFleetError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateAndOverrides") /* LaunchTemplateAndOverrides com.amazonaws.ec2#CreateFleetError$LaunchTemplateAndOverrides */ =>  {
                let var_1630 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_and_overrides_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_and_overrides(var_1630);
            }
            ,
            s if s.matches("lifecycle") /* Lifecycle com.amazonaws.ec2#CreateFleetError$Lifecycle */ =>  {
                let var_1631 =
                    Some(
                        Result::<crate::model::InstanceLifecycle, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycle::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle(var_1631);
            }
            ,
            s if s.matches("errorCode") /* ErrorCode com.amazonaws.ec2#CreateFleetError$ErrorCode */ =>  {
                let var_1632 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_error_code(var_1632);
            }
            ,
            s if s.matches("errorMessage") /* ErrorMessage com.amazonaws.ec2#CreateFleetError$ErrorMessage */ =>  {
                let var_1633 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_error_message(var_1633);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_create_fleet_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CreateFleetInstance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CreateFleetInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateAndOverrides") /* LaunchTemplateAndOverrides com.amazonaws.ec2#CreateFleetInstance$LaunchTemplateAndOverrides */ =>  {
                let var_1634 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_and_overrides_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_and_overrides(var_1634);
            }
            ,
            s if s.matches("lifecycle") /* Lifecycle com.amazonaws.ec2#CreateFleetInstance$Lifecycle */ =>  {
                let var_1635 =
                    Some(
                        Result::<crate::model::InstanceLifecycle, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycle::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle(var_1635);
            }
            ,
            s if s.matches("instanceIds") /* InstanceIds com.amazonaws.ec2#CreateFleetInstance$InstanceIds */ =>  {
                let var_1636 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ids_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_ids(var_1636);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#CreateFleetInstance$InstanceType */ =>  {
                let var_1637 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_1637);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#CreateFleetInstance$Platform */ =>  {
                let var_1638 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_1638);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_export_to_s3_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExportToS3Task, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExportToS3Task::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("containerFormat") /* ContainerFormat com.amazonaws.ec2#ExportToS3Task$ContainerFormat */ =>  {
                let var_1639 =
                    Some(
                        Result::<crate::model::ContainerFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ContainerFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_container_format(var_1639);
            }
            ,
            s if s.matches("diskImageFormat") /* DiskImageFormat com.amazonaws.ec2#ExportToS3Task$DiskImageFormat */ =>  {
                let var_1640 =
                    Some(
                        Result::<crate::model::DiskImageFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DiskImageFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_disk_image_format(var_1640);
            }
            ,
            s if s.matches("s3Bucket") /* S3Bucket com.amazonaws.ec2#ExportToS3Task$S3Bucket */ =>  {
                let var_1641 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket(var_1641);
            }
            ,
            s if s.matches("s3Key") /* S3Key com.amazonaws.ec2#ExportToS3Task$S3Key */ =>  {
                let var_1642 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_key(var_1642);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_export_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceExportDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceExportDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceExportDetails$InstanceId */ =>  {
                let var_1643 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1643);
            }
            ,
            s if s.matches("targetEnvironment") /* TargetEnvironment com.amazonaws.ec2#InstanceExportDetails$TargetEnvironment */ =>  {
                let var_1644 =
                    Some(
                        Result::<crate::model::ExportEnvironment, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExportEnvironment::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_target_environment(var_1644);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ipam_operating_region_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamOperatingRegion>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamOperatingRegionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_operating_region(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipam_resource_tag_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpamResourceTag>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpamResourceTagList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipam_resource_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ValidationError>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_validation_error(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_nat_gateway_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NatGatewayAddress>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NatGatewayAddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_nat_gateway_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_provisioned_bandwidth(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ProvisionedBandwidth, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ProvisionedBandwidth::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("provisionTime") /* ProvisionTime com.amazonaws.ec2#ProvisionedBandwidth$ProvisionTime */ =>  {
                let var_1645 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_provision_time(var_1645);
            }
            ,
            s if s.matches("provisioned") /* Provisioned com.amazonaws.ec2#ProvisionedBandwidth$Provisioned */ =>  {
                let var_1646 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_provisioned(var_1646);
            }
            ,
            s if s.matches("requestTime") /* RequestTime com.amazonaws.ec2#ProvisionedBandwidth$RequestTime */ =>  {
                let var_1647 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_request_time(var_1647);
            }
            ,
            s if s.matches("requested") /* Requested com.amazonaws.ec2#ProvisionedBandwidth$Requested */ =>  {
                let var_1648 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requested(var_1648);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ProvisionedBandwidth$Status */ =>  {
                let var_1649 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1649);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_network_acl_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkAclAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkAclAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_acl_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_acl_entry_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkAclEntry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkAclEntryList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_acl_entry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_access_scope_path_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AccessScopePath>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AccessScopePathList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_access_scope_path(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_network_interface_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfaceAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfaceAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2#NetworkInterfaceAssociation$AllocationId */ =>  {
                let var_1650 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_1650);
            }
            ,
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#NetworkInterfaceAssociation$AssociationId */ =>  {
                let var_1651 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_1651);
            }
            ,
            s if s.matches("ipOwnerId") /* IpOwnerId com.amazonaws.ec2#NetworkInterfaceAssociation$IpOwnerId */ =>  {
                let var_1652 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_owner_id(var_1652);
            }
            ,
            s if s.matches("publicDnsName") /* PublicDnsName com.amazonaws.ec2#NetworkInterfaceAssociation$PublicDnsName */ =>  {
                let var_1653 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_1653);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#NetworkInterfaceAssociation$PublicIp */ =>  {
                let var_1654 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_1654);
            }
            ,
            s if s.matches("customerOwnedIp") /* CustomerOwnedIp com.amazonaws.ec2#NetworkInterfaceAssociation$CustomerOwnedIp */ =>  {
                let var_1655 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ip(var_1655);
            }
            ,
            s if s.matches("carrierIp") /* CarrierIp com.amazonaws.ec2#NetworkInterfaceAssociation$CarrierIp */ =>  {
                let var_1656 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_ip(var_1656);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_network_interface_ipv6_addresses_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::NetworkInterfaceIpv6Address>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInterfaceIpv6AddressesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_interface_ipv6_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_network_interface_private_ip_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::NetworkInterfacePrivateIpAddress>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkInterfacePrivateIpAddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_interface_private_ip_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_prefixes_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv6PrefixSpecification>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6PrefixesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_prefix_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_network_interface_permission_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfacePermissionState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfacePermissionState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#NetworkInterfacePermissionState$State */ =>  {
                let var_1657 =
                    Some(
                        Result::<crate::model::NetworkInterfacePermissionStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NetworkInterfacePermissionStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1657);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#NetworkInterfacePermissionState$StatusMessage */ =>  {
                let var_1658 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1658);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_route_table_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RouteTableAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RouteTableAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_route_table_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_propagating_vgw_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PropagatingVgw>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PropagatingVgwList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_propagating_vgw(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_route_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Route>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RouteList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_route(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_snapshot_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SnapshotInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SnapshotInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#SnapshotInfo$Description */ =>  {
                let var_1659 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1659);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SnapshotInfo$Tags */ =>  {
                let var_1660 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1660);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#SnapshotInfo$Encrypted */ =>  {
                let var_1661 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_1661);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#SnapshotInfo$VolumeId */ =>  {
                let var_1662 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_1662);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#SnapshotInfo$State */ =>  {
                let var_1663 =
                    Some(
                        Result::<crate::model::SnapshotState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SnapshotState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1663);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2#SnapshotInfo$VolumeSize */ =>  {
                let var_1664 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_1664);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#SnapshotInfo$StartTime */ =>  {
                let var_1665 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_1665);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#SnapshotInfo$Progress */ =>  {
                let var_1666 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_1666);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#SnapshotInfo$OwnerId */ =>  {
                let var_1667 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1667);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotInfo$SnapshotId */ =>  {
                let var_1668 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_1668);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#SnapshotInfo$OutpostArn */ =>  {
                let var_1669 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_1669);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_instance_state_fault(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotInstanceStateFault, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotInstanceStateFault::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#SpotInstanceStateFault$Code */ =>  {
                let var_1670 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1670);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#SpotInstanceStateFault$Message */ =>  {
                let var_1671 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1671);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_traffic_mirror_filter_rule_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TrafficMirrorFilterRule>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrafficMirrorFilterRuleList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_traffic_mirror_filter_rule(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_traffic_mirror_network_service_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TrafficMirrorNetworkService>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TrafficMirrorNetworkServiceList$member */ =>  {
                out.push(
                    Result::<crate::model::TrafficMirrorNetworkService, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::TrafficMirrorNetworkService::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_traffic_mirror_port_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TrafficMirrorPortRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TrafficMirrorPortRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#TrafficMirrorPortRange$FromPort */ =>  {
                let var_1672 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_1672);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#TrafficMirrorPortRange$ToPort */ =>  {
                let var_1673 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_1673);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amazonSideAsn") /* AmazonSideAsn com.amazonaws.ec2#TransitGatewayOptions$AmazonSideAsn */ =>  {
                let var_1674 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_amazon_side_asn(var_1674);
            }
            ,
            s if s.matches("transitGatewayCidrBlocks") /* TransitGatewayCidrBlocks com.amazonaws.ec2#TransitGatewayOptions$TransitGatewayCidrBlocks */ =>  {
                let var_1675 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_cidr_blocks(var_1675);
            }
            ,
            s if s.matches("autoAcceptSharedAttachments") /* AutoAcceptSharedAttachments com.amazonaws.ec2#TransitGatewayOptions$AutoAcceptSharedAttachments */ =>  {
                let var_1676 =
                    Some(
                        Result::<crate::model::AutoAcceptSharedAttachmentsValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AutoAcceptSharedAttachmentsValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_accept_shared_attachments(var_1676);
            }
            ,
            s if s.matches("defaultRouteTableAssociation") /* DefaultRouteTableAssociation com.amazonaws.ec2#TransitGatewayOptions$DefaultRouteTableAssociation */ =>  {
                let var_1677 =
                    Some(
                        Result::<crate::model::DefaultRouteTableAssociationValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DefaultRouteTableAssociationValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_default_route_table_association(var_1677);
            }
            ,
            s if s.matches("associationDefaultRouteTableId") /* AssociationDefaultRouteTableId com.amazonaws.ec2#TransitGatewayOptions$AssociationDefaultRouteTableId */ =>  {
                let var_1678 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_default_route_table_id(var_1678);
            }
            ,
            s if s.matches("defaultRouteTablePropagation") /* DefaultRouteTablePropagation com.amazonaws.ec2#TransitGatewayOptions$DefaultRouteTablePropagation */ =>  {
                let var_1679 =
                    Some(
                        Result::<crate::model::DefaultRouteTablePropagationValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DefaultRouteTablePropagationValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_default_route_table_propagation(var_1679);
            }
            ,
            s if s.matches("propagationDefaultRouteTableId") /* PropagationDefaultRouteTableId com.amazonaws.ec2#TransitGatewayOptions$PropagationDefaultRouteTableId */ =>  {
                let var_1680 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_propagation_default_route_table_id(var_1680);
            }
            ,
            s if s.matches("vpnEcmpSupport") /* VpnEcmpSupport com.amazonaws.ec2#TransitGatewayOptions$VpnEcmpSupport */ =>  {
                let var_1681 =
                    Some(
                        Result::<crate::model::VpnEcmpSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnEcmpSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_ecmp_support(var_1681);
            }
            ,
            s if s.matches("dnsSupport") /* DnsSupport com.amazonaws.ec2#TransitGatewayOptions$DnsSupport */ =>  {
                let var_1682 =
                    Some(
                        Result::<crate::model::DnsSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DnsSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_support(var_1682);
            }
            ,
            s if s.matches("multicastSupport") /* MulticastSupport com.amazonaws.ec2#TransitGatewayOptions$MulticastSupport */ =>  {
                let var_1683 =
                    Some(
                        Result::<crate::model::MulticastSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MulticastSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_multicast_support(var_1683);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_connect_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayConnectOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayConnectOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#TransitGatewayConnectOptions$Protocol */ =>  {
                let var_1684 =
                    Some(
                        Result::<crate::model::ProtocolValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ProtocolValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_1684);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_connect_peer_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayConnectPeerConfiguration, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayConnectPeerConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAddress") /* TransitGatewayAddress com.amazonaws.ec2#TransitGatewayConnectPeerConfiguration$TransitGatewayAddress */ =>  {
                let var_1685 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_address(var_1685);
            }
            ,
            s if s.matches("peerAddress") /* PeerAddress com.amazonaws.ec2#TransitGatewayConnectPeerConfiguration$PeerAddress */ =>  {
                let var_1686 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peer_address(var_1686);
            }
            ,
            s if s.matches("insideCidrBlocks") /* InsideCidrBlocks com.amazonaws.ec2#TransitGatewayConnectPeerConfiguration$InsideCidrBlocks */ =>  {
                let var_1687 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_inside_cidr_blocks_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inside_cidr_blocks(var_1687);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#TransitGatewayConnectPeerConfiguration$Protocol */ =>  {
                let var_1688 =
                    Some(
                        Result::<crate::model::ProtocolValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ProtocolValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_1688);
            }
            ,
            s if s.matches("bgpConfigurations") /* BgpConfigurations com.amazonaws.ec2#TransitGatewayConnectPeerConfiguration$BgpConfigurations */ =>  {
                let var_1689 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_transit_gateway_attachment_bgp_configuration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_bgp_configurations(var_1689);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_domain_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayMulticastDomainOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDomainOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("igmpv2Support") /* Igmpv2Support com.amazonaws.ec2#TransitGatewayMulticastDomainOptions$Igmpv2Support */ =>  {
                let var_1690 =
                    Some(
                        Result::<crate::model::Igmpv2SupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Igmpv2SupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_igmpv2_support(var_1690);
            }
            ,
            s if s.matches("staticSourcesSupport") /* StaticSourcesSupport com.amazonaws.ec2#TransitGatewayMulticastDomainOptions$StaticSourcesSupport */ =>  {
                let var_1691 =
                    Some(
                        Result::<crate::model::StaticSourcesSupportValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StaticSourcesSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_static_sources_support(var_1691);
            }
            ,
            s if s.matches("autoAcceptSharedAssociations") /* AutoAcceptSharedAssociations com.amazonaws.ec2#TransitGatewayMulticastDomainOptions$AutoAcceptSharedAssociations */ =>  {
                let var_1692 =
                    Some(
                        Result::<crate::model::AutoAcceptSharedAssociationsValue, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AutoAcceptSharedAssociationsValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_accept_shared_associations(var_1692);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_prefix_list_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayPrefixListAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayPrefixListAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayPrefixListAttachment$TransitGatewayAttachmentId */ =>  {
                let var_1693 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_1693);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayPrefixListAttachment$ResourceType */ =>  {
                let var_1694 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_1694);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayPrefixListAttachment$ResourceId */ =>  {
                let var_1695 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_1695);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_route_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayRouteAttachment>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayRouteAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_route_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_volume_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#VolumeAttachment$AttachTime */ =>  {
                let var_1696 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_1696);
            }
            ,
            s if s.matches("device") /* Device com.amazonaws.ec2#VolumeAttachment$Device */ =>  {
                let var_1697 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device(var_1697);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#VolumeAttachment$InstanceId */ =>  {
                let var_1698 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1698);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2#VolumeAttachment$State */ =>  {
                let var_1699 =
                    Some(
                        Result::<crate::model::VolumeAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1699);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#VolumeAttachment$VolumeId */ =>  {
                let var_1700 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_1700);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#VolumeAttachment$DeleteOnTermination */ =>  {
                let var_1701 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_1701);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_group_identifier_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SecurityGroupIdentifier>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#GroupIdentifierSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_security_group_identifier(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_dns_entry_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DnsEntry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DnsEntrySet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_dns_entry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_last_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LastError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LastError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* Message com.amazonaws.ec2#LastError$Message */ =>  {
                let var_1702 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1702);
            }
            ,
            s if s.matches("code") /* Code com.amazonaws.ec2#LastError$Code */ =>  {
                let var_1703 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1703);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_service_type_detail_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ServiceTypeDetail>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ServiceTypeDetailSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_service_type_detail(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_private_dns_name_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrivateDnsNameConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrivateDnsNameConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#PrivateDnsNameConfiguration$State */ =>  {
                let var_1704 =
                    Some(
                        Result::<crate::model::DnsNameState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DnsNameState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1704);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#PrivateDnsNameConfiguration$Type */ =>  {
                let var_1705 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1705);
            }
            ,
            s if s.matches("value") /* Value com.amazonaws.ec2#PrivateDnsNameConfiguration$Value */ =>  {
                let var_1706 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_1706);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#PrivateDnsNameConfiguration$Name */ =>  {
                let var_1707 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_1707);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpn_connection_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpnConnectionOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpnConnectionOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enableAcceleration") /* EnableAcceleration com.amazonaws.ec2#VpnConnectionOptions$EnableAcceleration */ =>  {
                let var_1708 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_acceleration(var_1708);
            }
            ,
            s if s.matches("staticRoutesOnly") /* StaticRoutesOnly com.amazonaws.ec2#VpnConnectionOptions$StaticRoutesOnly */ =>  {
                let var_1709 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_static_routes_only(var_1709);
            }
            ,
            s if s.matches("localIpv4NetworkCidr") /* LocalIpv4NetworkCidr com.amazonaws.ec2#VpnConnectionOptions$LocalIpv4NetworkCidr */ =>  {
                let var_1710 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_ipv4_network_cidr(var_1710);
            }
            ,
            s if s.matches("remoteIpv4NetworkCidr") /* RemoteIpv4NetworkCidr com.amazonaws.ec2#VpnConnectionOptions$RemoteIpv4NetworkCidr */ =>  {
                let var_1711 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_remote_ipv4_network_cidr(var_1711);
            }
            ,
            s if s.matches("localIpv6NetworkCidr") /* LocalIpv6NetworkCidr com.amazonaws.ec2#VpnConnectionOptions$LocalIpv6NetworkCidr */ =>  {
                let var_1712 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_ipv6_network_cidr(var_1712);
            }
            ,
            s if s.matches("remoteIpv6NetworkCidr") /* RemoteIpv6NetworkCidr com.amazonaws.ec2#VpnConnectionOptions$RemoteIpv6NetworkCidr */ =>  {
                let var_1713 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_remote_ipv6_network_cidr(var_1713);
            }
            ,
            s if s.matches("tunnelInsideIpVersion") /* TunnelInsideIpVersion com.amazonaws.ec2#VpnConnectionOptions$TunnelInsideIpVersion */ =>  {
                let var_1714 =
                    Some(
                        Result::<crate::model::TunnelInsideIpVersion, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TunnelInsideIpVersion::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tunnel_inside_ip_version(var_1714);
            }
            ,
            s if s.matches("tunnelOptionSet") /* TunnelOptions com.amazonaws.ec2#VpnConnectionOptions$TunnelOptions */ =>  {
                let var_1715 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tunnel_options_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tunnel_options(var_1715);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_vpn_static_route_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpnStaticRoute>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpnStaticRouteList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpn_static_route(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vgw_telemetry_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VgwTelemetry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VgwTelemetryList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vgw_telemetry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_vpc_attachment_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VpcAttachment>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VpcAttachmentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_vpc_attachment(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_delete_fleet_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteFleetSuccessItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteFleetSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currentFleetState") /* CurrentFleetState com.amazonaws.ec2#DeleteFleetSuccessItem$CurrentFleetState */ =>  {
                let var_1716 =
                    Some(
                        Result::<crate::model::FleetStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_current_fleet_state(var_1716);
            }
            ,
            s if s.matches("previousFleetState") /* PreviousFleetState com.amazonaws.ec2#DeleteFleetSuccessItem$PreviousFleetState */ =>  {
                let var_1717 =
                    Some(
                        Result::<crate::model::FleetStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_previous_fleet_state(var_1717);
            }
            ,
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2#DeleteFleetSuccessItem$FleetId */ =>  {
                let var_1718 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_1718);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_fleet_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteFleetErrorItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteFleetErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("error") /* Error com.amazonaws.ec2#DeleteFleetErrorItem$Error */ =>  {
                let var_1719 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_delete_fleet_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_1719);
            }
            ,
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2#DeleteFleetErrorItem$FleetId */ =>  {
                let var_1720 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_1720);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_launch_template_versions_response_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseSuccessItem$LaunchTemplateId */ =>  {
                let var_1721 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_1721);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseSuccessItem$LaunchTemplateName */ =>  {
                let var_1722 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_1722);
            }
            ,
            s if s.matches("versionNumber") /* VersionNumber com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseSuccessItem$VersionNumber */ =>  {
                let var_1723 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_version_number(var_1723);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_launch_template_versions_response_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::DeleteLaunchTemplateVersionsResponseErrorItem,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteLaunchTemplateVersionsResponseErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseErrorItem$LaunchTemplateId */ =>  {
                let var_1724 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_1724);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseErrorItem$LaunchTemplateName */ =>  {
                let var_1725 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_1725);
            }
            ,
            s if s.matches("versionNumber") /* VersionNumber com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseErrorItem$VersionNumber */ =>  {
                let var_1726 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_version_number(var_1726);
            }
            ,
            s if s.matches("responseError") /* ResponseError com.amazonaws.ec2#DeleteLaunchTemplateVersionsResponseErrorItem$ResponseError */ =>  {
                let var_1727 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_response_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_response_error(var_1727);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_successful_queued_purchase_deletion(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SuccessfulQueuedPurchaseDeletion, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SuccessfulQueuedPurchaseDeletion::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#SuccessfulQueuedPurchaseDeletion$ReservedInstancesId */ =>  {
                let var_1728 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_1728);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_failed_queued_purchase_deletion(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FailedQueuedPurchaseDeletion, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FailedQueuedPurchaseDeletion::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("error") /* Error com.amazonaws.ec2#FailedQueuedPurchaseDeletion$Error */ =>  {
                let var_1729 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_delete_queued_reserved_instances_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_1729);
            }
            ,
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#FailedQueuedPurchaseDeletion$ReservedInstancesId */ =>  {
                let var_1730 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_1730);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_pool_cidr_failure_reason(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamPoolCidrFailureReason, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamPoolCidrFailureReason::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#IpamPoolCidrFailureReason$Code */ =>  {
                let var_1731 =
                    Some(
                        Result::<crate::model::IpamPoolCidrFailureCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamPoolCidrFailureCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_1731);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#IpamPoolCidrFailureReason$Message */ =>  {
                let var_1732 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1732);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_tag_key_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceTagKeySet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_account_attribute(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccountAttribute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccountAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attributeName") /* AttributeName com.amazonaws.ec2#AccountAttribute$AttributeName */ =>  {
                let var_1733 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attribute_name(var_1733);
            }
            ,
            s if s.matches("attributeValueSet") /* AttributeValues com.amazonaws.ec2#AccountAttribute$AttributeValues */ =>  {
                let var_1734 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_account_attribute_value_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attribute_values(var_1734);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Address, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Address::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#Address$InstanceId */ =>  {
                let var_1735 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1735);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#Address$PublicIp */ =>  {
                let var_1736 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_1736);
            }
            ,
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2#Address$AllocationId */ =>  {
                let var_1737 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_1737);
            }
            ,
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#Address$AssociationId */ =>  {
                let var_1738 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_1738);
            }
            ,
            s if s.matches("domain") /* Domain com.amazonaws.ec2#Address$Domain */ =>  {
                let var_1739 =
                    Some(
                        Result::<crate::model::DomainType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DomainType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_domain(var_1739);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#Address$NetworkInterfaceId */ =>  {
                let var_1740 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_1740);
            }
            ,
            s if s.matches("networkInterfaceOwnerId") /* NetworkInterfaceOwnerId com.amazonaws.ec2#Address$NetworkInterfaceOwnerId */ =>  {
                let var_1741 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_owner_id(var_1741);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#Address$PrivateIpAddress */ =>  {
                let var_1742 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_1742);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Address$Tags */ =>  {
                let var_1743 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1743);
            }
            ,
            s if s.matches("publicIpv4Pool") /* PublicIpv4Pool com.amazonaws.ec2#Address$PublicIpv4Pool */ =>  {
                let var_1744 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ipv4_pool(var_1744);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2#Address$NetworkBorderGroup */ =>  {
                let var_1745 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_1745);
            }
            ,
            s if s.matches("customerOwnedIp") /* CustomerOwnedIp com.amazonaws.ec2#Address$CustomerOwnedIp */ =>  {
                let var_1746 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ip(var_1746);
            }
            ,
            s if s.matches("customerOwnedIpv4Pool") /* CustomerOwnedIpv4Pool com.amazonaws.ec2#Address$CustomerOwnedIpv4Pool */ =>  {
                let var_1747 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ipv4_pool(var_1747);
            }
            ,
            s if s.matches("carrierIp") /* CarrierIp com.amazonaws.ec2#Address$CarrierIp */ =>  {
                let var_1748 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_ip(var_1748);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_id_format(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IdFormat, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IdFormat::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deadline") /* Deadline com.amazonaws.ec2#IdFormat$Deadline */ =>  {
                let var_1749 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_deadline(var_1749);
            }
            ,
            s if s.matches("resource") /* Resource com.amazonaws.ec2#IdFormat$Resource */ =>  {
                let var_1750 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource(var_1750);
            }
            ,
            s if s.matches("useLongIds") /* UseLongIds com.amazonaws.ec2#IdFormat$UseLongIds */ =>  {
                let var_1751 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_use_long_ids(var_1751);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_availability_zone(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AvailabilityZone, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AvailabilityZone::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("zoneState") /* State com.amazonaws.ec2#AvailabilityZone$State */ =>  {
                let var_1752 =
                    Some(
                        Result::<crate::model::AvailabilityZoneState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AvailabilityZoneState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1752);
            }
            ,
            s if s.matches("optInStatus") /* OptInStatus com.amazonaws.ec2#AvailabilityZone$OptInStatus */ =>  {
                let var_1753 =
                    Some(
                        Result::<crate::model::AvailabilityZoneOptInStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AvailabilityZoneOptInStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_opt_in_status(var_1753);
            }
            ,
            s if s.matches("messageSet") /* Messages com.amazonaws.ec2#AvailabilityZone$Messages */ =>  {
                let var_1754 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_availability_zone_message_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_messages(var_1754);
            }
            ,
            s if s.matches("regionName") /* RegionName com.amazonaws.ec2#AvailabilityZone$RegionName */ =>  {
                let var_1755 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region_name(var_1755);
            }
            ,
            s if s.matches("zoneName") /* ZoneName com.amazonaws.ec2#AvailabilityZone$ZoneName */ =>  {
                let var_1756 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_zone_name(var_1756);
            }
            ,
            s if s.matches("zoneId") /* ZoneId com.amazonaws.ec2#AvailabilityZone$ZoneId */ =>  {
                let var_1757 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_zone_id(var_1757);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#AvailabilityZone$GroupName */ =>  {
                let var_1758 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_1758);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2#AvailabilityZone$NetworkBorderGroup */ =>  {
                let var_1759 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_1759);
            }
            ,
            s if s.matches("zoneType") /* ZoneType com.amazonaws.ec2#AvailabilityZone$ZoneType */ =>  {
                let var_1760 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_zone_type(var_1760);
            }
            ,
            s if s.matches("parentZoneName") /* ParentZoneName com.amazonaws.ec2#AvailabilityZone$ParentZoneName */ =>  {
                let var_1761 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_zone_name(var_1761);
            }
            ,
            s if s.matches("parentZoneId") /* ParentZoneId com.amazonaws.ec2#AvailabilityZone$ParentZoneId */ =>  {
                let var_1762 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_parent_zone_id(var_1762);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_fleet(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationFleet, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationFleet::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationFleetId") /* CapacityReservationFleetId com.amazonaws.ec2#CapacityReservationFleet$CapacityReservationFleetId */ =>  {
                let var_1763 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_id(var_1763);
            }
            ,
            s if s.matches("capacityReservationFleetArn") /* CapacityReservationFleetArn com.amazonaws.ec2#CapacityReservationFleet$CapacityReservationFleetArn */ =>  {
                let var_1764 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_fleet_arn(var_1764);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#CapacityReservationFleet$State */ =>  {
                let var_1765 =
                    Some(
                        Result::<crate::model::CapacityReservationFleetState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationFleetState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1765);
            }
            ,
            s if s.matches("totalTargetCapacity") /* TotalTargetCapacity com.amazonaws.ec2#CapacityReservationFleet$TotalTargetCapacity */ =>  {
                let var_1766 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_target_capacity(var_1766);
            }
            ,
            s if s.matches("totalFulfilledCapacity") /* TotalFulfilledCapacity com.amazonaws.ec2#CapacityReservationFleet$TotalFulfilledCapacity */ =>  {
                let var_1767 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_fulfilled_capacity(var_1767);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#CapacityReservationFleet$Tenancy */ =>  {
                let var_1768 =
                    Some(
                        Result::<crate::model::FleetCapacityReservationTenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetCapacityReservationTenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_1768);
            }
            ,
            s if s.matches("endDate") /* EndDate com.amazonaws.ec2#CapacityReservationFleet$EndDate */ =>  {
                let var_1769 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end_date(var_1769);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#CapacityReservationFleet$CreateTime */ =>  {
                let var_1770 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1770);
            }
            ,
            s if s.matches("instanceMatchCriteria") /* InstanceMatchCriteria com.amazonaws.ec2#CapacityReservationFleet$InstanceMatchCriteria */ =>  {
                let var_1771 =
                    Some(
                        Result::<crate::model::FleetInstanceMatchCriteria, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetInstanceMatchCriteria::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_match_criteria(var_1771);
            }
            ,
            s if s.matches("allocationStrategy") /* AllocationStrategy com.amazonaws.ec2#CapacityReservationFleet$AllocationStrategy */ =>  {
                let var_1772 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_strategy(var_1772);
            }
            ,
            s if s.matches("instanceTypeSpecificationSet") /* InstanceTypeSpecifications com.amazonaws.ec2#CapacityReservationFleet$InstanceTypeSpecifications */ =>  {
                let var_1773 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fleet_capacity_reservation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_type_specifications(var_1773);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#CapacityReservationFleet$Tags */ =>  {
                let var_1774 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1774);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_classic_link_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClassicLinkInstance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClassicLinkInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#ClassicLinkInstance$Groups */ =>  {
                let var_1775 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_1775);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ClassicLinkInstance$InstanceId */ =>  {
                let var_1776 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1776);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ClassicLinkInstance$Tags */ =>  {
                let var_1777 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1777);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#ClassicLinkInstance$VpcId */ =>  {
                let var_1778 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1778);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_authorization_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AuthorizationRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AuthorizationRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#AuthorizationRule$ClientVpnEndpointId */ =>  {
                let var_1779 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1779);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#AuthorizationRule$Description */ =>  {
                let var_1780 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1780);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#AuthorizationRule$GroupId */ =>  {
                let var_1781 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_1781);
            }
            ,
            s if s.matches("accessAll") /* AccessAll com.amazonaws.ec2#AuthorizationRule$AccessAll */ =>  {
                let var_1782 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_access_all(var_1782);
            }
            ,
            s if s.matches("destinationCidr") /* DestinationCidr com.amazonaws.ec2#AuthorizationRule$DestinationCidr */ =>  {
                let var_1783 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr(var_1783);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#AuthorizationRule$Status */ =>  {
                let var_1784 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_authorization_rule_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_1784);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_connection(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnConnection, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnConnection::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#ClientVpnConnection$ClientVpnEndpointId */ =>  {
                let var_1785 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1785);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#ClientVpnConnection$Timestamp */ =>  {
                let var_1786 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_1786);
            }
            ,
            s if s.matches("connectionId") /* ConnectionId com.amazonaws.ec2#ClientVpnConnection$ConnectionId */ =>  {
                let var_1787 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_id(var_1787);
            }
            ,
            s if s.matches("username") /* Username com.amazonaws.ec2#ClientVpnConnection$Username */ =>  {
                let var_1788 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_username(var_1788);
            }
            ,
            s if s.matches("connectionEstablishedTime") /* ConnectionEstablishedTime com.amazonaws.ec2#ClientVpnConnection$ConnectionEstablishedTime */ =>  {
                let var_1789 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_established_time(var_1789);
            }
            ,
            s if s.matches("ingressBytes") /* IngressBytes com.amazonaws.ec2#ClientVpnConnection$IngressBytes */ =>  {
                let var_1790 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ingress_bytes(var_1790);
            }
            ,
            s if s.matches("egressBytes") /* EgressBytes com.amazonaws.ec2#ClientVpnConnection$EgressBytes */ =>  {
                let var_1791 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_egress_bytes(var_1791);
            }
            ,
            s if s.matches("ingressPackets") /* IngressPackets com.amazonaws.ec2#ClientVpnConnection$IngressPackets */ =>  {
                let var_1792 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ingress_packets(var_1792);
            }
            ,
            s if s.matches("egressPackets") /* EgressPackets com.amazonaws.ec2#ClientVpnConnection$EgressPackets */ =>  {
                let var_1793 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_egress_packets(var_1793);
            }
            ,
            s if s.matches("clientIp") /* ClientIp com.amazonaws.ec2#ClientVpnConnection$ClientIp */ =>  {
                let var_1794 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_ip(var_1794);
            }
            ,
            s if s.matches("commonName") /* CommonName com.amazonaws.ec2#ClientVpnConnection$CommonName */ =>  {
                let var_1795 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_common_name(var_1795);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ClientVpnConnection$Status */ =>  {
                let var_1796 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_connection_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_1796);
            }
            ,
            s if s.matches("connectionEndTime") /* ConnectionEndTime com.amazonaws.ec2#ClientVpnConnection$ConnectionEndTime */ =>  {
                let var_1797 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_end_time(var_1797);
            }
            ,
            s if s.matches("postureComplianceStatusSet") /* PostureComplianceStatuses com.amazonaws.ec2#ClientVpnConnection$PostureComplianceStatuses */ =>  {
                let var_1798 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_posture_compliance_statuses(var_1798);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_endpoint(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnEndpoint, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#ClientVpnEndpoint$ClientVpnEndpointId */ =>  {
                let var_1799 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1799);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ClientVpnEndpoint$Description */ =>  {
                let var_1800 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1800);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ClientVpnEndpoint$Status */ =>  {
                let var_1801 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_endpoint_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_1801);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#ClientVpnEndpoint$CreationTime */ =>  {
                let var_1802 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1802);
            }
            ,
            s if s.matches("deletionTime") /* DeletionTime com.amazonaws.ec2#ClientVpnEndpoint$DeletionTime */ =>  {
                let var_1803 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deletion_time(var_1803);
            }
            ,
            s if s.matches("dnsName") /* DnsName com.amazonaws.ec2#ClientVpnEndpoint$DnsName */ =>  {
                let var_1804 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_1804);
            }
            ,
            s if s.matches("clientCidrBlock") /* ClientCidrBlock com.amazonaws.ec2#ClientVpnEndpoint$ClientCidrBlock */ =>  {
                let var_1805 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_cidr_block(var_1805);
            }
            ,
            s if s.matches("dnsServer") /* DnsServers com.amazonaws.ec2#ClientVpnEndpoint$DnsServers */ =>  {
                let var_1806 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_servers(var_1806);
            }
            ,
            s if s.matches("splitTunnel") /* SplitTunnel com.amazonaws.ec2#ClientVpnEndpoint$SplitTunnel */ =>  {
                let var_1807 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_split_tunnel(var_1807);
            }
            ,
            s if s.matches("vpnProtocol") /* VpnProtocol com.amazonaws.ec2#ClientVpnEndpoint$VpnProtocol */ =>  {
                let var_1808 =
                    Some(
                        Result::<crate::model::VpnProtocol, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnProtocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_protocol(var_1808);
            }
            ,
            s if s.matches("transportProtocol") /* TransportProtocol com.amazonaws.ec2#ClientVpnEndpoint$TransportProtocol */ =>  {
                let var_1809 =
                    Some(
                        Result::<crate::model::TransportProtocol, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransportProtocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_transport_protocol(var_1809);
            }
            ,
            s if s.matches("vpnPort") /* VpnPort com.amazonaws.ec2#ClientVpnEndpoint$VpnPort */ =>  {
                let var_1810 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vpn_port(var_1810);
            }
            ,
            s if s.matches("associatedTargetNetwork") /* AssociatedTargetNetworks com.amazonaws.ec2#ClientVpnEndpoint$AssociatedTargetNetworks */ =>  {
                let var_1811 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_associated_target_network_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_target_networks(var_1811);
            }
            ,
            s if s.matches("serverCertificateArn") /* ServerCertificateArn com.amazonaws.ec2#ClientVpnEndpoint$ServerCertificateArn */ =>  {
                let var_1812 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_server_certificate_arn(var_1812);
            }
            ,
            s if s.matches("authenticationOptions") /* AuthenticationOptions com.amazonaws.ec2#ClientVpnEndpoint$AuthenticationOptions */ =>  {
                let var_1813 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_client_vpn_authentication_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_authentication_options(var_1813);
            }
            ,
            s if s.matches("connectionLogOptions") /* ConnectionLogOptions com.amazonaws.ec2#ClientVpnEndpoint$ConnectionLogOptions */ =>  {
                let var_1814 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_connection_log_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_log_options(var_1814);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ClientVpnEndpoint$Tags */ =>  {
                let var_1815 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1815);
            }
            ,
            s if s.matches("securityGroupIdSet") /* SecurityGroupIds com.amazonaws.ec2#ClientVpnEndpoint$SecurityGroupIds */ =>  {
                let var_1816 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_client_vpn_security_group_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_1816);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#ClientVpnEndpoint$VpcId */ =>  {
                let var_1817 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1817);
            }
            ,
            s if s.matches("selfServicePortalUrl") /* SelfServicePortalUrl com.amazonaws.ec2#ClientVpnEndpoint$SelfServicePortalUrl */ =>  {
                let var_1818 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_self_service_portal_url(var_1818);
            }
            ,
            s if s.matches("clientConnectOptions") /* ClientConnectOptions com.amazonaws.ec2#ClientVpnEndpoint$ClientConnectOptions */ =>  {
                let var_1819 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_connect_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_connect_options(var_1819);
            }
            ,
            s if s.matches("sessionTimeoutHours") /* SessionTimeoutHours com.amazonaws.ec2#ClientVpnEndpoint$SessionTimeoutHours */ =>  {
                let var_1820 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_session_timeout_hours(var_1820);
            }
            ,
            s if s.matches("clientLoginBannerOptions") /* ClientLoginBannerOptions com.amazonaws.ec2#ClientVpnEndpoint$ClientLoginBannerOptions */ =>  {
                let var_1821 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_login_banner_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_login_banner_options(var_1821);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnRoute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#ClientVpnRoute$ClientVpnEndpointId */ =>  {
                let var_1822 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1822);
            }
            ,
            s if s.matches("destinationCidr") /* DestinationCidr com.amazonaws.ec2#ClientVpnRoute$DestinationCidr */ =>  {
                let var_1823 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr(var_1823);
            }
            ,
            s if s.matches("targetSubnet") /* TargetSubnet com.amazonaws.ec2#ClientVpnRoute$TargetSubnet */ =>  {
                let var_1824 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_subnet(var_1824);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#ClientVpnRoute$Type */ =>  {
                let var_1825 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1825);
            }
            ,
            s if s.matches("origin") /* Origin com.amazonaws.ec2#ClientVpnRoute$Origin */ =>  {
                let var_1826 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_origin(var_1826);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ClientVpnRoute$Status */ =>  {
                let var_1827 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_route_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_1827);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ClientVpnRoute$Description */ =>  {
                let var_1828 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1828);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_network(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetNetwork, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetNetwork::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#TargetNetwork$AssociationId */ =>  {
                let var_1829 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_1829);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#TargetNetwork$VpcId */ =>  {
                let var_1830 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_1830);
            }
            ,
            s if s.matches("targetNetworkId") /* TargetNetworkId com.amazonaws.ec2#TargetNetwork$TargetNetworkId */ =>  {
                let var_1831 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_network_id(var_1831);
            }
            ,
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#TargetNetwork$ClientVpnEndpointId */ =>  {
                let var_1832 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1832);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#TargetNetwork$Status */ =>  {
                let var_1833 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_association_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_1833);
            }
            ,
            s if s.matches("securityGroups") /* SecurityGroups com.amazonaws.ec2#TargetNetwork$SecurityGroups */ =>  {
                let var_1834 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_1834);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_coip_pool(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CoipPool, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CoipPool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2#CoipPool$PoolId */ =>  {
                let var_1835 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_1835);
            }
            ,
            s if s.matches("poolCidrSet") /* PoolCidrs com.amazonaws.ec2#CoipPool$PoolCidrs */ =>  {
                let var_1836 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pool_cidrs(var_1836);
            }
            ,
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2#CoipPool$LocalGatewayRouteTableId */ =>  {
                let var_1837 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_1837);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#CoipPool$Tags */ =>  {
                let var_1838 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1838);
            }
            ,
            s if s.matches("poolArn") /* PoolArn com.amazonaws.ec2#CoipPool$PoolArn */ =>  {
                let var_1839 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_arn(var_1839);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_elastic_gpus(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ElasticGpus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ElasticGpus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticGpuId") /* ElasticGpuId com.amazonaws.ec2#ElasticGpus$ElasticGpuId */ =>  {
                let var_1840 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_id(var_1840);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ElasticGpus$AvailabilityZone */ =>  {
                let var_1841 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1841);
            }
            ,
            s if s.matches("elasticGpuType") /* ElasticGpuType com.amazonaws.ec2#ElasticGpus$ElasticGpuType */ =>  {
                let var_1842 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_type(var_1842);
            }
            ,
            s if s.matches("elasticGpuHealth") /* ElasticGpuHealth com.amazonaws.ec2#ElasticGpus$ElasticGpuHealth */ =>  {
                let var_1843 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_elastic_gpu_health(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_health(var_1843);
            }
            ,
            s if s.matches("elasticGpuState") /* ElasticGpuState com.amazonaws.ec2#ElasticGpus$ElasticGpuState */ =>  {
                let var_1844 =
                    Some(
                        Result::<crate::model::ElasticGpuState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ElasticGpuState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_state(var_1844);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ElasticGpus$InstanceId */ =>  {
                let var_1845 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1845);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ElasticGpus$Tags */ =>  {
                let var_1846 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1846);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_export_image_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExportImageTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExportImageTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#ExportImageTask$Description */ =>  {
                let var_1847 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1847);
            }
            ,
            s if s.matches("exportImageTaskId") /* ExportImageTaskId com.amazonaws.ec2#ExportImageTask$ExportImageTaskId */ =>  {
                let var_1848 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_export_image_task_id(var_1848);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ExportImageTask$ImageId */ =>  {
                let var_1849 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_1849);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#ExportImageTask$Progress */ =>  {
                let var_1850 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_1850);
            }
            ,
            s if s.matches("s3ExportLocation") /* S3ExportLocation com.amazonaws.ec2#ExportImageTask$S3ExportLocation */ =>  {
                let var_1851 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_export_task_s3_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3_export_location(var_1851);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ExportImageTask$Status */ =>  {
                let var_1852 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_1852);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ExportImageTask$StatusMessage */ =>  {
                let var_1853 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_1853);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ExportImageTask$Tags */ =>  {
                let var_1854 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1854);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_describe_fast_launch_images_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DescribeFastLaunchImagesSuccessItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DescribeFastLaunchImagesSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$ImageId */ =>  {
                let var_1855 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_1855);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$ResourceType */ =>  {
                let var_1856 =
                    Some(
                        Result::<crate::model::FastLaunchResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_1856);
            }
            ,
            s if s.matches("snapshotConfiguration") /* SnapshotConfiguration com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$SnapshotConfiguration */ =>  {
                let var_1857 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_snapshot_configuration_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_configuration(var_1857);
            }
            ,
            s if s.matches("launchTemplate") /* LaunchTemplate com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$LaunchTemplate */ =>  {
                let var_1858 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fast_launch_launch_template_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template(var_1858);
            }
            ,
            s if s.matches("maxParallelLaunches") /* MaxParallelLaunches com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$MaxParallelLaunches */ =>  {
                let var_1859 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_parallel_launches(var_1859);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$OwnerId */ =>  {
                let var_1860 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1860);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$State */ =>  {
                let var_1861 =
                    Some(
                        Result::<crate::model::FastLaunchStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastLaunchStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1861);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$StateTransitionReason */ =>  {
                let var_1862 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_1862);
            }
            ,
            s if s.matches("stateTransitionTime") /* StateTransitionTime com.amazonaws.ec2#DescribeFastLaunchImagesSuccessItem$StateTransitionTime */ =>  {
                let var_1863 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_state_transition_time(var_1863);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_describe_fast_snapshot_restore_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DescribeFastSnapshotRestoreSuccessItem, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::DescribeFastSnapshotRestoreSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$SnapshotId */ =>  {
                let var_1864 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_1864);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$AvailabilityZone */ =>  {
                let var_1865 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1865);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$State */ =>  {
                let var_1866 =
                    Some(
                        Result::<crate::model::FastSnapshotRestoreStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastSnapshotRestoreStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1866);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$StateTransitionReason */ =>  {
                let var_1867 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_1867);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$OwnerId */ =>  {
                let var_1868 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1868);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$OwnerAlias */ =>  {
                let var_1869 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_1869);
            }
            ,
            s if s.matches("enablingTime") /* EnablingTime com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$EnablingTime */ =>  {
                let var_1870 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabling_time(var_1870);
            }
            ,
            s if s.matches("optimizingTime") /* OptimizingTime com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$OptimizingTime */ =>  {
                let var_1871 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_optimizing_time(var_1871);
            }
            ,
            s if s.matches("enabledTime") /* EnabledTime com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$EnabledTime */ =>  {
                let var_1872 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabled_time(var_1872);
            }
            ,
            s if s.matches("disablingTime") /* DisablingTime com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$DisablingTime */ =>  {
                let var_1873 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabling_time(var_1873);
            }
            ,
            s if s.matches("disabledTime") /* DisabledTime com.amazonaws.ec2#DescribeFastSnapshotRestoreSuccessItem$DisabledTime */ =>  {
                let var_1874 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabled_time(var_1874);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_history_record_entry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HistoryRecordEntry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HistoryRecordEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("eventInformation") /* EventInformation com.amazonaws.ec2#HistoryRecordEntry$EventInformation */ =>  {
                let var_1875 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_information(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_information(var_1875);
            }
            ,
            s if s.matches("eventType") /* EventType com.amazonaws.ec2#HistoryRecordEntry$EventType */ =>  {
                let var_1876 =
                    Some(
                        Result::<crate::model::FleetEventType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetEventType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_event_type(var_1876);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#HistoryRecordEntry$Timestamp */ =>  {
                let var_1877 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_1877);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_active_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ActiveInstance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ActiveInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ActiveInstance$InstanceId */ =>  {
                let var_1878 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_1878);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ActiveInstance$InstanceType */ =>  {
                let var_1879 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_1879);
            }
            ,
            s if s.matches("spotInstanceRequestId") /* SpotInstanceRequestId com.amazonaws.ec2#ActiveInstance$SpotInstanceRequestId */ =>  {
                let var_1880 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_request_id(var_1880);
            }
            ,
            s if s.matches("instanceHealth") /* InstanceHealth com.amazonaws.ec2#ActiveInstance$InstanceHealth */ =>  {
                let var_1881 =
                    Some(
                        Result::<crate::model::InstanceHealthStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceHealthStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_health(var_1881);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fleet_data(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetData, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetData::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("activityStatus") /* ActivityStatus com.amazonaws.ec2#FleetData$ActivityStatus */ =>  {
                let var_1882 =
                    Some(
                        Result::<crate::model::FleetActivityStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetActivityStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_activity_status(var_1882);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#FleetData$CreateTime */ =>  {
                let var_1883 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1883);
            }
            ,
            s if s.matches("fleetId") /* FleetId com.amazonaws.ec2#FleetData$FleetId */ =>  {
                let var_1884 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_id(var_1884);
            }
            ,
            s if s.matches("fleetState") /* FleetState com.amazonaws.ec2#FleetData$FleetState */ =>  {
                let var_1885 =
                    Some(
                        Result::<crate::model::FleetStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_fleet_state(var_1885);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#FleetData$ClientToken */ =>  {
                let var_1886 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_1886);
            }
            ,
            s if s.matches("excessCapacityTerminationPolicy") /* ExcessCapacityTerminationPolicy com.amazonaws.ec2#FleetData$ExcessCapacityTerminationPolicy */ =>  {
                let var_1887 =
                    Some(
                        Result::<crate::model::FleetExcessCapacityTerminationPolicy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetExcessCapacityTerminationPolicy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_excess_capacity_termination_policy(var_1887);
            }
            ,
            s if s.matches("fulfilledCapacity") /* FulfilledCapacity com.amazonaws.ec2#FleetData$FulfilledCapacity */ =>  {
                let var_1888 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fulfilled_capacity(var_1888);
            }
            ,
            s if s.matches("fulfilledOnDemandCapacity") /* FulfilledOnDemandCapacity com.amazonaws.ec2#FleetData$FulfilledOnDemandCapacity */ =>  {
                let var_1889 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fulfilled_on_demand_capacity(var_1889);
            }
            ,
            s if s.matches("launchTemplateConfigs") /* LaunchTemplateConfigs com.amazonaws.ec2#FleetData$LaunchTemplateConfigs */ =>  {
                let var_1890 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fleet_launch_template_config_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_configs(var_1890);
            }
            ,
            s if s.matches("targetCapacitySpecification") /* TargetCapacitySpecification com.amazonaws.ec2#FleetData$TargetCapacitySpecification */ =>  {
                let var_1891 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_target_capacity_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_capacity_specification(var_1891);
            }
            ,
            s if s.matches("terminateInstancesWithExpiration") /* TerminateInstancesWithExpiration com.amazonaws.ec2#FleetData$TerminateInstancesWithExpiration */ =>  {
                let var_1892 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_terminate_instances_with_expiration(var_1892);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#FleetData$Type */ =>  {
                let var_1893 =
                    Some(
                        Result::<crate::model::FleetType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_1893);
            }
            ,
            s if s.matches("validFrom") /* ValidFrom com.amazonaws.ec2#FleetData$ValidFrom */ =>  {
                let var_1894 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_from(var_1894);
            }
            ,
            s if s.matches("validUntil") /* ValidUntil com.amazonaws.ec2#FleetData$ValidUntil */ =>  {
                let var_1895 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_until(var_1895);
            }
            ,
            s if s.matches("replaceUnhealthyInstances") /* ReplaceUnhealthyInstances com.amazonaws.ec2#FleetData$ReplaceUnhealthyInstances */ =>  {
                let var_1896 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_replace_unhealthy_instances(var_1896);
            }
            ,
            s if s.matches("spotOptions") /* SpotOptions com.amazonaws.ec2#FleetData$SpotOptions */ =>  {
                let var_1897 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_options(var_1897);
            }
            ,
            s if s.matches("onDemandOptions") /* OnDemandOptions com.amazonaws.ec2#FleetData$OnDemandOptions */ =>  {
                let var_1898 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_on_demand_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_on_demand_options(var_1898);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#FleetData$Tags */ =>  {
                let var_1899 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1899);
            }
            ,
            s if s.matches("errorSet") /* Errors com.amazonaws.ec2#FleetData$Errors */ =>  {
                let var_1900 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_describe_fleets_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_errors(var_1900);
            }
            ,
            s if s.matches("fleetInstanceSet") /* Instances com.amazonaws.ec2#FleetData$Instances */ =>  {
                let var_1901 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_describe_fleets_instances_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_1901);
            }
            ,
            s if s.matches("context") /* Context com.amazonaws.ec2#FleetData$Context */ =>  {
                let var_1902 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_context(var_1902);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_flow_log(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FlowLog, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FlowLog::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#FlowLog$CreationTime */ =>  {
                let var_1903 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_1903);
            }
            ,
            s if s.matches("deliverLogsErrorMessage") /* DeliverLogsErrorMessage com.amazonaws.ec2#FlowLog$DeliverLogsErrorMessage */ =>  {
                let var_1904 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deliver_logs_error_message(var_1904);
            }
            ,
            s if s.matches("deliverLogsPermissionArn") /* DeliverLogsPermissionArn com.amazonaws.ec2#FlowLog$DeliverLogsPermissionArn */ =>  {
                let var_1905 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deliver_logs_permission_arn(var_1905);
            }
            ,
            s if s.matches("deliverLogsStatus") /* DeliverLogsStatus com.amazonaws.ec2#FlowLog$DeliverLogsStatus */ =>  {
                let var_1906 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deliver_logs_status(var_1906);
            }
            ,
            s if s.matches("flowLogId") /* FlowLogId com.amazonaws.ec2#FlowLog$FlowLogId */ =>  {
                let var_1907 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_flow_log_id(var_1907);
            }
            ,
            s if s.matches("flowLogStatus") /* FlowLogStatus com.amazonaws.ec2#FlowLog$FlowLogStatus */ =>  {
                let var_1908 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_flow_log_status(var_1908);
            }
            ,
            s if s.matches("logGroupName") /* LogGroupName com.amazonaws.ec2#FlowLog$LogGroupName */ =>  {
                let var_1909 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_log_group_name(var_1909);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#FlowLog$ResourceId */ =>  {
                let var_1910 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_1910);
            }
            ,
            s if s.matches("trafficType") /* TrafficType com.amazonaws.ec2#FlowLog$TrafficType */ =>  {
                let var_1911 =
                    Some(
                        Result::<crate::model::TrafficType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TrafficType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_traffic_type(var_1911);
            }
            ,
            s if s.matches("logDestinationType") /* LogDestinationType com.amazonaws.ec2#FlowLog$LogDestinationType */ =>  {
                let var_1912 =
                    Some(
                        Result::<crate::model::LogDestinationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LogDestinationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_log_destination_type(var_1912);
            }
            ,
            s if s.matches("logDestination") /* LogDestination com.amazonaws.ec2#FlowLog$LogDestination */ =>  {
                let var_1913 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_log_destination(var_1913);
            }
            ,
            s if s.matches("logFormat") /* LogFormat com.amazonaws.ec2#FlowLog$LogFormat */ =>  {
                let var_1914 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_log_format(var_1914);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#FlowLog$Tags */ =>  {
                let var_1915 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1915);
            }
            ,
            s if s.matches("maxAggregationInterval") /* MaxAggregationInterval com.amazonaws.ec2#FlowLog$MaxAggregationInterval */ =>  {
                let var_1916 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_aggregation_interval(var_1916);
            }
            ,
            s if s.matches("destinationOptions") /* DestinationOptions com.amazonaws.ec2#FlowLog$DestinationOptions */ =>  {
                let var_1917 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_destination_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_options(var_1917);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_load_permission_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LoadPermission>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LoadPermissionList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_load_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_fpga_image(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaImage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaImage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgaImageId") /* FpgaImageId com.amazonaws.ec2#FpgaImage$FpgaImageId */ =>  {
                let var_1918 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_id(var_1918);
            }
            ,
            s if s.matches("fpgaImageGlobalId") /* FpgaImageGlobalId com.amazonaws.ec2#FpgaImage$FpgaImageGlobalId */ =>  {
                let var_1919 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fpga_image_global_id(var_1919);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#FpgaImage$Name */ =>  {
                let var_1920 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_1920);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#FpgaImage$Description */ =>  {
                let var_1921 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1921);
            }
            ,
            s if s.matches("shellVersion") /* ShellVersion com.amazonaws.ec2#FpgaImage$ShellVersion */ =>  {
                let var_1922 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_shell_version(var_1922);
            }
            ,
            s if s.matches("pciId") /* PciId com.amazonaws.ec2#FpgaImage$PciId */ =>  {
                let var_1923 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_pci_id(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pci_id(var_1923);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#FpgaImage$State */ =>  {
                let var_1924 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fpga_image_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state(var_1924);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#FpgaImage$CreateTime */ =>  {
                let var_1925 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_1925);
            }
            ,
            s if s.matches("updateTime") /* UpdateTime com.amazonaws.ec2#FpgaImage$UpdateTime */ =>  {
                let var_1926 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_update_time(var_1926);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#FpgaImage$OwnerId */ =>  {
                let var_1927 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1927);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2#FpgaImage$OwnerAlias */ =>  {
                let var_1928 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_1928);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2#FpgaImage$ProductCodes */ =>  {
                let var_1929 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_1929);
            }
            ,
            s if s.matches("tags") /* Tags com.amazonaws.ec2#FpgaImage$Tags */ =>  {
                let var_1930 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1930);
            }
            ,
            s if s.matches("public") /* Public com.amazonaws.ec2#FpgaImage$Public */ =>  {
                let var_1931 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_public(var_1931);
            }
            ,
            s if s.matches("dataRetentionSupport") /* DataRetentionSupport com.amazonaws.ec2#FpgaImage$DataRetentionSupport */ =>  {
                let var_1932 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_data_retention_support(var_1932);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_host_offering(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostOffering, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostOffering::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#HostOffering$CurrencyCode */ =>  {
                let var_1933 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_1933);
            }
            ,
            s if s.matches("duration") /* Duration com.amazonaws.ec2#HostOffering$Duration */ =>  {
                let var_1934 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_duration(var_1934);
            }
            ,
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#HostOffering$HourlyPrice */ =>  {
                let var_1935 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_1935);
            }
            ,
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#HostOffering$InstanceFamily */ =>  {
                let var_1936 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_1936);
            }
            ,
            s if s.matches("offeringId") /* OfferingId com.amazonaws.ec2#HostOffering$OfferingId */ =>  {
                let var_1937 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_id(var_1937);
            }
            ,
            s if s.matches("paymentOption") /* PaymentOption com.amazonaws.ec2#HostOffering$PaymentOption */ =>  {
                let var_1938 =
                    Some(
                        Result::<crate::model::PaymentOption, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PaymentOption::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payment_option(var_1938);
            }
            ,
            s if s.matches("upfrontPrice") /* UpfrontPrice com.amazonaws.ec2#HostOffering$UpfrontPrice */ =>  {
                let var_1939 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upfront_price(var_1939);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_host_reservation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostReservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostReservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("count") /* Count com.amazonaws.ec2#HostReservation$Count */ =>  {
                let var_1940 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_1940);
            }
            ,
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#HostReservation$CurrencyCode */ =>  {
                let var_1941 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_1941);
            }
            ,
            s if s.matches("duration") /* Duration com.amazonaws.ec2#HostReservation$Duration */ =>  {
                let var_1942 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_duration(var_1942);
            }
            ,
            s if s.matches("end") /* End com.amazonaws.ec2#HostReservation$End */ =>  {
                let var_1943 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end(var_1943);
            }
            ,
            s if s.matches("hostIdSet") /* HostIdSet com.amazonaws.ec2#HostReservation$HostIdSet */ =>  {
                let var_1944 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_response_host_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_id_set(var_1944);
            }
            ,
            s if s.matches("hostReservationId") /* HostReservationId com.amazonaws.ec2#HostReservation$HostReservationId */ =>  {
                let var_1945 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_reservation_id(var_1945);
            }
            ,
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#HostReservation$HourlyPrice */ =>  {
                let var_1946 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_1946);
            }
            ,
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#HostReservation$InstanceFamily */ =>  {
                let var_1947 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_1947);
            }
            ,
            s if s.matches("offeringId") /* OfferingId com.amazonaws.ec2#HostReservation$OfferingId */ =>  {
                let var_1948 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_id(var_1948);
            }
            ,
            s if s.matches("paymentOption") /* PaymentOption com.amazonaws.ec2#HostReservation$PaymentOption */ =>  {
                let var_1949 =
                    Some(
                        Result::<crate::model::PaymentOption, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PaymentOption::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payment_option(var_1949);
            }
            ,
            s if s.matches("start") /* Start com.amazonaws.ec2#HostReservation$Start */ =>  {
                let var_1950 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start(var_1950);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#HostReservation$State */ =>  {
                let var_1951 =
                    Some(
                        Result::<crate::model::ReservationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReservationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1951);
            }
            ,
            s if s.matches("upfrontPrice") /* UpfrontPrice com.amazonaws.ec2#HostReservation$UpfrontPrice */ =>  {
                let var_1952 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upfront_price(var_1952);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#HostReservation$Tags */ =>  {
                let var_1953 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1953);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_host(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Host, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Host::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("autoPlacement") /* AutoPlacement com.amazonaws.ec2#Host$AutoPlacement */ =>  {
                let var_1954 =
                    Some(
                        Result::<crate::model::AutoPlacement, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AutoPlacement::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_placement(var_1954);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Host$AvailabilityZone */ =>  {
                let var_1955 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_1955);
            }
            ,
            s if s.matches("availableCapacity") /* AvailableCapacity com.amazonaws.ec2#Host$AvailableCapacity */ =>  {
                let var_1956 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_available_capacity(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_available_capacity(var_1956);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#Host$ClientToken */ =>  {
                let var_1957 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_1957);
            }
            ,
            s if s.matches("hostId") /* HostId com.amazonaws.ec2#Host$HostId */ =>  {
                let var_1958 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_id(var_1958);
            }
            ,
            s if s.matches("hostProperties") /* HostProperties com.amazonaws.ec2#Host$HostProperties */ =>  {
                let var_1959 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_host_properties(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_properties(var_1959);
            }
            ,
            s if s.matches("hostReservationId") /* HostReservationId com.amazonaws.ec2#Host$HostReservationId */ =>  {
                let var_1960 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_reservation_id(var_1960);
            }
            ,
            s if s.matches("instances") /* Instances com.amazonaws.ec2#Host$Instances */ =>  {
                let var_1961 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_host_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_1961);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Host$State */ =>  {
                let var_1962 =
                    Some(
                        Result::<crate::model::AllocationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AllocationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1962);
            }
            ,
            s if s.matches("allocationTime") /* AllocationTime com.amazonaws.ec2#Host$AllocationTime */ =>  {
                let var_1963 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_allocation_time(var_1963);
            }
            ,
            s if s.matches("releaseTime") /* ReleaseTime com.amazonaws.ec2#Host$ReleaseTime */ =>  {
                let var_1964 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_release_time(var_1964);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Host$Tags */ =>  {
                let var_1965 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_1965);
            }
            ,
            s if s.matches("hostRecovery") /* HostRecovery com.amazonaws.ec2#Host$HostRecovery */ =>  {
                let var_1966 =
                    Some(
                        Result::<crate::model::HostRecovery, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostRecovery::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_host_recovery(var_1966);
            }
            ,
            s if s.matches("allowsMultipleInstanceTypes") /* AllowsMultipleInstanceTypes com.amazonaws.ec2#Host$AllowsMultipleInstanceTypes */ =>  {
                let var_1967 =
                    Some(
                        Result::<crate::model::AllowsMultipleInstanceTypes, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AllowsMultipleInstanceTypes::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_allows_multiple_instance_types(var_1967);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Host$OwnerId */ =>  {
                let var_1968 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1968);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#Host$AvailabilityZoneId */ =>  {
                let var_1969 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_1969);
            }
            ,
            s if s.matches("memberOfServiceLinkedResourceGroup") /* MemberOfServiceLinkedResourceGroup com.amazonaws.ec2#Host$MemberOfServiceLinkedResourceGroup */ =>  {
                let var_1970 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_member_of_service_linked_resource_group(var_1970);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_block_device_mapping(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BlockDeviceMapping, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BlockDeviceMapping::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#BlockDeviceMapping$DeviceName */ =>  {
                let var_1971 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_1971);
            }
            ,
            s if s.matches("virtualName") /* VirtualName com.amazonaws.ec2#BlockDeviceMapping$VirtualName */ =>  {
                let var_1972 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_virtual_name(var_1972);
            }
            ,
            s if s.matches("ebs") /* Ebs com.amazonaws.ec2#BlockDeviceMapping$Ebs */ =>  {
                let var_1973 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ebs_block_device(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs(var_1973);
            }
            ,
            s if s.matches("noDevice") /* NoDevice com.amazonaws.ec2#BlockDeviceMapping$NoDevice */ =>  {
                let var_1974 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_no_device(var_1974);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchPermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("group") /* Group com.amazonaws.ec2#LaunchPermission$Group */ =>  {
                let var_1975 =
                    Some(
                        Result::<crate::model::PermissionGroup, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PermissionGroup::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_group(var_1975);
            }
            ,
            s if s.matches("userId") /* UserId com.amazonaws.ec2#LaunchPermission$UserId */ =>  {
                let var_1976 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_1976);
            }
            ,
            s if s.matches("organizationArn") /* OrganizationArn com.amazonaws.ec2#LaunchPermission$OrganizationArn */ =>  {
                let var_1977 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_organization_arn(var_1977);
            }
            ,
            s if s.matches("organizationalUnitArn") /* OrganizationalUnitArn com.amazonaws.ec2#LaunchPermission$OrganizationalUnitArn */ =>  {
                let var_1978 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_organizational_unit_arn(var_1978);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_product_code(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ProductCode, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ProductCode::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("productCode") /* ProductCodeId com.amazonaws.ec2#ProductCode$ProductCodeId */ =>  {
                let var_1979 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_product_code_id(var_1979);
            }
            ,
            s if s.matches("type") /* ProductCodeType com.amazonaws.ec2#ProductCode$ProductCodeType */ =>  {
                let var_1980 =
                    Some(
                        Result::<crate::model::ProductCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ProductCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_code_type(var_1980);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_image(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Image, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Image::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("architecture") /* Architecture com.amazonaws.ec2#Image$Architecture */ =>  {
                let var_1981 =
                    Some(
                        Result::<crate::model::ArchitectureValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ArchitectureValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_architecture(var_1981);
            }
            ,
            s if s.matches("creationDate") /* CreationDate com.amazonaws.ec2#Image$CreationDate */ =>  {
                let var_1982 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_creation_date(var_1982);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#Image$ImageId */ =>  {
                let var_1983 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_1983);
            }
            ,
            s if s.matches("imageLocation") /* ImageLocation com.amazonaws.ec2#Image$ImageLocation */ =>  {
                let var_1984 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_location(var_1984);
            }
            ,
            s if s.matches("imageType") /* ImageType com.amazonaws.ec2#Image$ImageType */ =>  {
                let var_1985 =
                    Some(
                        Result::<crate::model::ImageTypeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ImageTypeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_image_type(var_1985);
            }
            ,
            s if s.matches("isPublic") /* Public com.amazonaws.ec2#Image$Public */ =>  {
                let var_1986 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_public(var_1986);
            }
            ,
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#Image$KernelId */ =>  {
                let var_1987 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_1987);
            }
            ,
            s if s.matches("imageOwnerId") /* OwnerId com.amazonaws.ec2#Image$OwnerId */ =>  {
                let var_1988 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1988);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#Image$Platform */ =>  {
                let var_1989 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_1989);
            }
            ,
            s if s.matches("platformDetails") /* PlatformDetails com.amazonaws.ec2#Image$PlatformDetails */ =>  {
                let var_1990 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform_details(var_1990);
            }
            ,
            s if s.matches("usageOperation") /* UsageOperation com.amazonaws.ec2#Image$UsageOperation */ =>  {
                let var_1991 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_operation(var_1991);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2#Image$ProductCodes */ =>  {
                let var_1992 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_1992);
            }
            ,
            s if s.matches("ramdiskId") /* RamdiskId com.amazonaws.ec2#Image$RamdiskId */ =>  {
                let var_1993 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_1993);
            }
            ,
            s if s.matches("imageState") /* State com.amazonaws.ec2#Image$State */ =>  {
                let var_1994 =
                    Some(
                        Result::<crate::model::ImageState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ImageState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1994);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2#Image$BlockDeviceMappings */ =>  {
                let var_1995 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_1995);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#Image$Description */ =>  {
                let var_1996 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1996);
            }
            ,
            s if s.matches("enaSupport") /* EnaSupport com.amazonaws.ec2#Image$EnaSupport */ =>  {
                let var_1997 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ena_support(var_1997);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#Image$Hypervisor */ =>  {
                let var_1998 =
                    Some(
                        Result::<crate::model::HypervisorType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HypervisorType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_1998);
            }
            ,
            s if s.matches("imageOwnerAlias") /* ImageOwnerAlias com.amazonaws.ec2#Image$ImageOwnerAlias */ =>  {
                let var_1999 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_owner_alias(var_1999);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#Image$Name */ =>  {
                let var_2000 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2000);
            }
            ,
            s if s.matches("rootDeviceName") /* RootDeviceName com.amazonaws.ec2#Image$RootDeviceName */ =>  {
                let var_2001 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_name(var_2001);
            }
            ,
            s if s.matches("rootDeviceType") /* RootDeviceType com.amazonaws.ec2#Image$RootDeviceType */ =>  {
                let var_2002 =
                    Some(
                        Result::<crate::model::DeviceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeviceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_type(var_2002);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2#Image$SriovNetSupport */ =>  {
                let var_2003 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_2003);
            }
            ,
            s if s.matches("stateReason") /* StateReason com.amazonaws.ec2#Image$StateReason */ =>  {
                let var_2004 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_state_reason(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state_reason(var_2004);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Image$Tags */ =>  {
                let var_2005 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2005);
            }
            ,
            s if s.matches("virtualizationType") /* VirtualizationType com.amazonaws.ec2#Image$VirtualizationType */ =>  {
                let var_2006 =
                    Some(
                        Result::<crate::model::VirtualizationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VirtualizationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_virtualization_type(var_2006);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2#Image$BootMode */ =>  {
                let var_2007 =
                    Some(
                        Result::<crate::model::BootModeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BootModeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_2007);
            }
            ,
            s if s.matches("deprecationTime") /* DeprecationTime com.amazonaws.ec2#Image$DeprecationTime */ =>  {
                let var_2008 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deprecation_time(var_2008);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_import_image_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportImageTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportImageTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("architecture") /* Architecture com.amazonaws.ec2#ImportImageTask$Architecture */ =>  {
                let var_2009 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_architecture(var_2009);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ImportImageTask$Description */ =>  {
                let var_2010 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2010);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#ImportImageTask$Encrypted */ =>  {
                let var_2011 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_2011);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#ImportImageTask$Hypervisor */ =>  {
                let var_2012 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_2012);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ImportImageTask$ImageId */ =>  {
                let var_2013 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_2013);
            }
            ,
            s if s.matches("importTaskId") /* ImportTaskId com.amazonaws.ec2#ImportImageTask$ImportTaskId */ =>  {
                let var_2014 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_task_id(var_2014);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2#ImportImageTask$KmsKeyId */ =>  {
                let var_2015 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_2015);
            }
            ,
            s if s.matches("licenseType") /* LicenseType com.amazonaws.ec2#ImportImageTask$LicenseType */ =>  {
                let var_2016 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_type(var_2016);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#ImportImageTask$Platform */ =>  {
                let var_2017 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2017);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#ImportImageTask$Progress */ =>  {
                let var_2018 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_2018);
            }
            ,
            s if s.matches("snapshotDetailSet") /* SnapshotDetails com.amazonaws.ec2#ImportImageTask$SnapshotDetails */ =>  {
                let var_2019 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_snapshot_detail_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_details(var_2019);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ImportImageTask$Status */ =>  {
                let var_2020 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2020);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ImportImageTask$StatusMessage */ =>  {
                let var_2021 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_2021);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ImportImageTask$Tags */ =>  {
                let var_2022 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2022);
            }
            ,
            s if s.matches("licenseSpecifications") /* LicenseSpecifications com.amazonaws.ec2#ImportImageTask$LicenseSpecifications */ =>  {
                let var_2023 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_import_image_license_specification_list_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_license_specifications(var_2023);
            }
            ,
            s if s.matches("usageOperation") /* UsageOperation com.amazonaws.ec2#ImportImageTask$UsageOperation */ =>  {
                let var_2024 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_operation(var_2024);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2#ImportImageTask$BootMode */ =>  {
                let var_2025 =
                    Some(
                        Result::<crate::model::BootModeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BootModeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_2025);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_import_snapshot_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportSnapshotTask, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportSnapshotTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#ImportSnapshotTask$Description */ =>  {
                let var_2026 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2026);
            }
            ,
            s if s.matches("importTaskId") /* ImportTaskId com.amazonaws.ec2#ImportSnapshotTask$ImportTaskId */ =>  {
                let var_2027 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_task_id(var_2027);
            }
            ,
            s if s.matches("snapshotTaskDetail") /* SnapshotTaskDetail com.amazonaws.ec2#ImportSnapshotTask$SnapshotTaskDetail */ =>  {
                let var_2028 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_snapshot_task_detail(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_snapshot_task_detail(var_2028);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ImportSnapshotTask$Tags */ =>  {
                let var_2029 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2029);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_group_identifier(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GroupIdentifier, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GroupIdentifier::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#GroupIdentifier$GroupName */ =>  {
                let var_2030 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2030);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#GroupIdentifier$GroupId */ =>  {
                let var_2031 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2031);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_block_device_mapping(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceBlockDeviceMapping, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceBlockDeviceMapping::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#InstanceBlockDeviceMapping$DeviceName */ =>  {
                let var_2032 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_2032);
            }
            ,
            s if s.matches("ebs") /* Ebs com.amazonaws.ec2#InstanceBlockDeviceMapping$Ebs */ =>  {
                let var_2033 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ebs_instance_block_device(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs(var_2033);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_credit_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceCreditSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceCreditSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceCreditSpecification$InstanceId */ =>  {
                let var_2034 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2034);
            }
            ,
            s if s.matches("cpuCredits") /* CpuCredits com.amazonaws.ec2#InstanceCreditSpecification$CpuCredits */ =>  {
                let var_2035 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cpu_credits(var_2035);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reservation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Reservation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Reservation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#Reservation$Groups */ =>  {
                let var_2036 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_2036);
            }
            ,
            s if s.matches("instancesSet") /* Instances com.amazonaws.ec2#Reservation$Instances */ =>  {
                let var_2037 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_2037);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Reservation$OwnerId */ =>  {
                let var_2038 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2038);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2#Reservation$RequesterId */ =>  {
                let var_2039 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_2039);
            }
            ,
            s if s.matches("reservationId") /* ReservationId com.amazonaws.ec2#Reservation$ReservationId */ =>  {
                let var_2040 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_id(var_2040);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#InstanceStatus$AvailabilityZone */ =>  {
                let var_2041 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2041);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#InstanceStatus$OutpostArn */ =>  {
                let var_2042 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2042);
            }
            ,
            s if s.matches("eventsSet") /* Events com.amazonaws.ec2#InstanceStatus$Events */ =>  {
                let var_2043 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_status_event_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_events(var_2043);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceStatus$InstanceId */ =>  {
                let var_2044 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2044);
            }
            ,
            s if s.matches("instanceState") /* InstanceState com.amazonaws.ec2#InstanceStatus$InstanceState */ =>  {
                let var_2045 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_state(var_2045);
            }
            ,
            s if s.matches("instanceStatus") /* InstanceStatus com.amazonaws.ec2#InstanceStatus$InstanceStatus */ =>  {
                let var_2046 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_status_summary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_status(var_2046);
            }
            ,
            s if s.matches("systemStatus") /* SystemStatus com.amazonaws.ec2#InstanceStatus$SystemStatus */ =>  {
                let var_2047 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_status_summary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_system_status(var_2047);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_type_offering(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceTypeOffering, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceTypeOffering::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceTypeOffering$InstanceType */ =>  {
                let var_2048 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2048);
            }
            ,
            s if s.matches("locationType") /* LocationType com.amazonaws.ec2#InstanceTypeOffering$LocationType */ =>  {
                let var_2049 =
                    Some(
                        Result::<crate::model::LocationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LocationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_location_type(var_2049);
            }
            ,
            s if s.matches("location") /* Location com.amazonaws.ec2#InstanceTypeOffering$Location */ =>  {
                let var_2050 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_location(var_2050);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_type_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceTypeInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceTypeInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceTypeInfo$InstanceType */ =>  {
                let var_2051 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2051);
            }
            ,
            s if s.matches("currentGeneration") /* CurrentGeneration com.amazonaws.ec2#InstanceTypeInfo$CurrentGeneration */ =>  {
                let var_2052 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#CurrentGenerationFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_current_generation(var_2052);
            }
            ,
            s if s.matches("freeTierEligible") /* FreeTierEligible com.amazonaws.ec2#InstanceTypeInfo$FreeTierEligible */ =>  {
                let var_2053 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#FreeTierEligibleFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_free_tier_eligible(var_2053);
            }
            ,
            s if s.matches("supportedUsageClasses") /* SupportedUsageClasses com.amazonaws.ec2#InstanceTypeInfo$SupportedUsageClasses */ =>  {
                let var_2054 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_usage_class_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_usage_classes(var_2054);
            }
            ,
            s if s.matches("supportedRootDeviceTypes") /* SupportedRootDeviceTypes com.amazonaws.ec2#InstanceTypeInfo$SupportedRootDeviceTypes */ =>  {
                let var_2055 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_root_device_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_root_device_types(var_2055);
            }
            ,
            s if s.matches("supportedVirtualizationTypes") /* SupportedVirtualizationTypes com.amazonaws.ec2#InstanceTypeInfo$SupportedVirtualizationTypes */ =>  {
                let var_2056 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_virtualization_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_virtualization_types(var_2056);
            }
            ,
            s if s.matches("bareMetal") /* BareMetal com.amazonaws.ec2#InstanceTypeInfo$BareMetal */ =>  {
                let var_2057 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#BareMetalFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bare_metal(var_2057);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#InstanceTypeInfo$Hypervisor */ =>  {
                let var_2058 =
                    Some(
                        Result::<crate::model::InstanceTypeHypervisor, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceTypeHypervisor::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_2058);
            }
            ,
            s if s.matches("processorInfo") /* ProcessorInfo com.amazonaws.ec2#InstanceTypeInfo$ProcessorInfo */ =>  {
                let var_2059 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_processor_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_processor_info(var_2059);
            }
            ,
            s if s.matches("vCpuInfo") /* VCpuInfo com.amazonaws.ec2#InstanceTypeInfo$VCpuInfo */ =>  {
                let var_2060 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_v_cpu_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_v_cpu_info(var_2060);
            }
            ,
            s if s.matches("memoryInfo") /* MemoryInfo com.amazonaws.ec2#InstanceTypeInfo$MemoryInfo */ =>  {
                let var_2061 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_memory_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_info(var_2061);
            }
            ,
            s if s.matches("instanceStorageSupported") /* InstanceStorageSupported com.amazonaws.ec2#InstanceTypeInfo$InstanceStorageSupported */ =>  {
                let var_2062 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#InstanceStorageFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_storage_supported(var_2062);
            }
            ,
            s if s.matches("instanceStorageInfo") /* InstanceStorageInfo com.amazonaws.ec2#InstanceTypeInfo$InstanceStorageInfo */ =>  {
                let var_2063 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_storage_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_storage_info(var_2063);
            }
            ,
            s if s.matches("ebsInfo") /* EbsInfo com.amazonaws.ec2#InstanceTypeInfo$EbsInfo */ =>  {
                let var_2064 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ebs_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs_info(var_2064);
            }
            ,
            s if s.matches("networkInfo") /* NetworkInfo com.amazonaws.ec2#InstanceTypeInfo$NetworkInfo */ =>  {
                let var_2065 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_info(var_2065);
            }
            ,
            s if s.matches("gpuInfo") /* GpuInfo com.amazonaws.ec2#InstanceTypeInfo$GpuInfo */ =>  {
                let var_2066 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_gpu_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gpu_info(var_2066);
            }
            ,
            s if s.matches("fpgaInfo") /* FpgaInfo com.amazonaws.ec2#InstanceTypeInfo$FpgaInfo */ =>  {
                let var_2067 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fpga_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpga_info(var_2067);
            }
            ,
            s if s.matches("placementGroupInfo") /* PlacementGroupInfo com.amazonaws.ec2#InstanceTypeInfo$PlacementGroupInfo */ =>  {
                let var_2068 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_placement_group_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement_group_info(var_2068);
            }
            ,
            s if s.matches("inferenceAcceleratorInfo") /* InferenceAcceleratorInfo com.amazonaws.ec2#InstanceTypeInfo$InferenceAcceleratorInfo */ =>  {
                let var_2069 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inference_accelerator_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inference_accelerator_info(var_2069);
            }
            ,
            s if s.matches("hibernationSupported") /* HibernationSupported com.amazonaws.ec2#InstanceTypeInfo$HibernationSupported */ =>  {
                let var_2070 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#HibernationFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_hibernation_supported(var_2070);
            }
            ,
            s if s.matches("burstablePerformanceSupported") /* BurstablePerformanceSupported com.amazonaws.ec2#InstanceTypeInfo$BurstablePerformanceSupported */ =>  {
                let var_2071 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#BurstablePerformanceFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_burstable_performance_supported(var_2071);
            }
            ,
            s if s.matches("dedicatedHostsSupported") /* DedicatedHostsSupported com.amazonaws.ec2#InstanceTypeInfo$DedicatedHostsSupported */ =>  {
                let var_2072 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#DedicatedHostFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_dedicated_hosts_supported(var_2072);
            }
            ,
            s if s.matches("autoRecoverySupported") /* AutoRecoverySupported com.amazonaws.ec2#InstanceTypeInfo$AutoRecoverySupported */ =>  {
                let var_2073 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#AutoRecoveryFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_recovery_supported(var_2073);
            }
            ,
            s if s.matches("supportedBootModes") /* SupportedBootModes com.amazonaws.ec2#InstanceTypeInfo$SupportedBootModes */ =>  {
                let var_2074 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_boot_mode_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_boot_modes(var_2074);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_pool(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6Pool, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6Pool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2#Ipv6Pool$PoolId */ =>  {
                let var_2075 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_2075);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#Ipv6Pool$Description */ =>  {
                let var_2076 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2076);
            }
            ,
            s if s.matches("poolCidrBlockSet") /* PoolCidrBlocks com.amazonaws.ec2#Ipv6Pool$PoolCidrBlocks */ =>  {
                let var_2077 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_pool_cidr_blocks_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pool_cidr_blocks(var_2077);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Ipv6Pool$Tags */ =>  {
                let var_2078 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2078);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_key_pair_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::KeyPairInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::KeyPairInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("keyPairId") /* KeyPairId com.amazonaws.ec2#KeyPairInfo$KeyPairId */ =>  {
                let var_2079 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_pair_id(var_2079);
            }
            ,
            s if s.matches("keyFingerprint") /* KeyFingerprint com.amazonaws.ec2#KeyPairInfo$KeyFingerprint */ =>  {
                let var_2080 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_fingerprint(var_2080);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#KeyPairInfo$KeyName */ =>  {
                let var_2081 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_2081);
            }
            ,
            s if s.matches("keyType") /* KeyType com.amazonaws.ec2#KeyPairInfo$KeyType */ =>  {
                let var_2082 =
                    Some(
                        Result::<crate::model::KeyType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::KeyType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_key_type(var_2082);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#KeyPairInfo$Tags */ =>  {
                let var_2083 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2083);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_route_table(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGatewayRouteTable, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGatewayRouteTable::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2#LocalGatewayRouteTable$LocalGatewayRouteTableId */ =>  {
                let var_2084 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_2084);
            }
            ,
            s if s.matches("localGatewayRouteTableArn") /* LocalGatewayRouteTableArn com.amazonaws.ec2#LocalGatewayRouteTable$LocalGatewayRouteTableArn */ =>  {
                let var_2085 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_arn(var_2085);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGatewayRouteTable$LocalGatewayId */ =>  {
                let var_2086 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2086);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#LocalGatewayRouteTable$OutpostArn */ =>  {
                let var_2087 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2087);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayRouteTable$OwnerId */ =>  {
                let var_2088 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2088);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#LocalGatewayRouteTable$State */ =>  {
                let var_2089 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2089);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGatewayRouteTable$Tags */ =>  {
                let var_2090 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2090);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_route_table_virtual_interface_group_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder =
        crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayRouteTableVirtualInterfaceGroupAssociationId") /* LocalGatewayRouteTableVirtualInterfaceGroupAssociationId com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$LocalGatewayRouteTableVirtualInterfaceGroupAssociationId */ =>  {
                let var_2091 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_virtual_interface_group_association_id(var_2091);
            }
            ,
            s if s.matches("localGatewayVirtualInterfaceGroupId") /* LocalGatewayVirtualInterfaceGroupId com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$LocalGatewayVirtualInterfaceGroupId */ =>  {
                let var_2092 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_group_id(var_2092);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$LocalGatewayId */ =>  {
                let var_2093 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2093);
            }
            ,
            s if s.matches("localGatewayRouteTableId") /* LocalGatewayRouteTableId com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$LocalGatewayRouteTableId */ =>  {
                let var_2094 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_id(var_2094);
            }
            ,
            s if s.matches("localGatewayRouteTableArn") /* LocalGatewayRouteTableArn com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$LocalGatewayRouteTableArn */ =>  {
                let var_2095 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_route_table_arn(var_2095);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$OwnerId */ =>  {
                let var_2096 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2096);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$State */ =>  {
                let var_2097 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2097);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGatewayRouteTableVirtualInterfaceGroupAssociation$Tags */ =>  {
                let var_2098 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2098);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGateway, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGateway::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGateway$LocalGatewayId */ =>  {
                let var_2099 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2099);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#LocalGateway$OutpostArn */ =>  {
                let var_2100 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2100);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGateway$OwnerId */ =>  {
                let var_2101 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2101);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#LocalGateway$State */ =>  {
                let var_2102 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2102);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGateway$Tags */ =>  {
                let var_2103 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2103);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_virtual_interface_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGatewayVirtualInterfaceGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGatewayVirtualInterfaceGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayVirtualInterfaceGroupId") /* LocalGatewayVirtualInterfaceGroupId com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroup$LocalGatewayVirtualInterfaceGroupId */ =>  {
                let var_2104 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_group_id(var_2104);
            }
            ,
            s if s.matches("localGatewayVirtualInterfaceIdSet") /* LocalGatewayVirtualInterfaceIds com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroup$LocalGatewayVirtualInterfaceIds */ =>  {
                let var_2105 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_ids(var_2105);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroup$LocalGatewayId */ =>  {
                let var_2106 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2106);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroup$OwnerId */ =>  {
                let var_2107 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2107);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGatewayVirtualInterfaceGroup$Tags */ =>  {
                let var_2108 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2108);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_local_gateway_virtual_interface(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LocalGatewayVirtualInterface, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LocalGatewayVirtualInterface::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("localGatewayVirtualInterfaceId") /* LocalGatewayVirtualInterfaceId com.amazonaws.ec2#LocalGatewayVirtualInterface$LocalGatewayVirtualInterfaceId */ =>  {
                let var_2109 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_virtual_interface_id(var_2109);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#LocalGatewayVirtualInterface$LocalGatewayId */ =>  {
                let var_2110 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2110);
            }
            ,
            s if s.matches("vlan") /* Vlan com.amazonaws.ec2#LocalGatewayVirtualInterface$Vlan */ =>  {
                let var_2111 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vlan(var_2111);
            }
            ,
            s if s.matches("localAddress") /* LocalAddress com.amazonaws.ec2#LocalGatewayVirtualInterface$LocalAddress */ =>  {
                let var_2112 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_address(var_2112);
            }
            ,
            s if s.matches("peerAddress") /* PeerAddress com.amazonaws.ec2#LocalGatewayVirtualInterface$PeerAddress */ =>  {
                let var_2113 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peer_address(var_2113);
            }
            ,
            s if s.matches("localBgpAsn") /* LocalBgpAsn com.amazonaws.ec2#LocalGatewayVirtualInterface$LocalBgpAsn */ =>  {
                let var_2114 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_local_bgp_asn(var_2114);
            }
            ,
            s if s.matches("peerBgpAsn") /* PeerBgpAsn com.amazonaws.ec2#LocalGatewayVirtualInterface$PeerBgpAsn */ =>  {
                let var_2115 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_peer_bgp_asn(var_2115);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LocalGatewayVirtualInterface$OwnerId */ =>  {
                let var_2116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2116);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LocalGatewayVirtualInterface$Tags */ =>  {
                let var_2117 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2117);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_moving_address_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MovingAddressStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MovingAddressStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("moveStatus") /* MoveStatus com.amazonaws.ec2#MovingAddressStatus$MoveStatus */ =>  {
                let var_2118 =
                    Some(
                        Result::<crate::model::MoveStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MoveStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_move_status(var_2118);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#MovingAddressStatus$PublicIp */ =>  {
                let var_2119 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_2119);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrefixList, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrefixList::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrSet") /* Cidrs com.amazonaws.ec2#PrefixList$Cidrs */ =>  {
                let var_2120 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidrs(var_2120);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#PrefixList$PrefixListId */ =>  {
                let var_2121 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_2121);
            }
            ,
            s if s.matches("prefixListName") /* PrefixListName com.amazonaws.ec2#PrefixList$PrefixListName */ =>  {
                let var_2122 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_name(var_2122);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_principal_id_format(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrincipalIdFormat, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrincipalIdFormat::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#PrincipalIdFormat$Arn */ =>  {
                let var_2123 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_2123);
            }
            ,
            s if s.matches("statusSet") /* Statuses com.amazonaws.ec2#PrincipalIdFormat$Statuses */ =>  {
                let var_2124 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_id_format_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_statuses(var_2124);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_public_ipv4_pool(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PublicIpv4Pool, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PublicIpv4Pool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2#PublicIpv4Pool$PoolId */ =>  {
                let var_2125 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_2125);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#PublicIpv4Pool$Description */ =>  {
                let var_2126 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2126);
            }
            ,
            s if s.matches("poolAddressRangeSet") /* PoolAddressRanges com.amazonaws.ec2#PublicIpv4Pool$PoolAddressRanges */ =>  {
                let var_2127 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_public_ipv4_pool_range_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pool_address_ranges(var_2127);
            }
            ,
            s if s.matches("totalAddressCount") /* TotalAddressCount com.amazonaws.ec2#PublicIpv4Pool$TotalAddressCount */ =>  {
                let var_2128 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_address_count(var_2128);
            }
            ,
            s if s.matches("totalAvailableAddressCount") /* TotalAvailableAddressCount com.amazonaws.ec2#PublicIpv4Pool$TotalAvailableAddressCount */ =>  {
                let var_2129 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_available_address_count(var_2129);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2#PublicIpv4Pool$NetworkBorderGroup */ =>  {
                let var_2130 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_2130);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#PublicIpv4Pool$Tags */ =>  {
                let var_2131 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2131);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_region(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Region, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Region::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("regionEndpoint") /* Endpoint com.amazonaws.ec2#Region$Endpoint */ =>  {
                let var_2132 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint(var_2132);
            }
            ,
            s if s.matches("regionName") /* RegionName com.amazonaws.ec2#Region$RegionName */ =>  {
                let var_2133 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region_name(var_2133);
            }
            ,
            s if s.matches("optInStatus") /* OptInStatus com.amazonaws.ec2#Region$OptInStatus */ =>  {
                let var_2134 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_opt_in_status(var_2134);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstances, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstances::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ReservedInstances$AvailabilityZone */ =>  {
                let var_2135 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2135);
            }
            ,
            s if s.matches("duration") /* Duration com.amazonaws.ec2#ReservedInstances$Duration */ =>  {
                let var_2136 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_duration(var_2136);
            }
            ,
            s if s.matches("end") /* End com.amazonaws.ec2#ReservedInstances$End */ =>  {
                let var_2137 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_end(var_2137);
            }
            ,
            s if s.matches("fixedPrice") /* FixedPrice com.amazonaws.ec2#ReservedInstances$FixedPrice */ =>  {
                let var_2138 =
                    Some(
                         {
                            <f32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (float: `com.amazonaws.ec2#Float`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fixed_price(var_2138);
            }
            ,
            s if s.matches("instanceCount") /* InstanceCount com.amazonaws.ec2#ReservedInstances$InstanceCount */ =>  {
                let var_2139 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_count(var_2139);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ReservedInstances$InstanceType */ =>  {
                let var_2140 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2140);
            }
            ,
            s if s.matches("productDescription") /* ProductDescription com.amazonaws.ec2#ReservedInstances$ProductDescription */ =>  {
                let var_2141 =
                    Some(
                        Result::<crate::model::RiProductDescription, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RiProductDescription::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_description(var_2141);
            }
            ,
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#ReservedInstances$ReservedInstancesId */ =>  {
                let var_2142 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_2142);
            }
            ,
            s if s.matches("start") /* Start com.amazonaws.ec2#ReservedInstances$Start */ =>  {
                let var_2143 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start(var_2143);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ReservedInstances$State */ =>  {
                let var_2144 =
                    Some(
                        Result::<crate::model::ReservedInstanceState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReservedInstanceState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2144);
            }
            ,
            s if s.matches("usagePrice") /* UsagePrice com.amazonaws.ec2#ReservedInstances$UsagePrice */ =>  {
                let var_2145 =
                    Some(
                         {
                            <f32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (float: `com.amazonaws.ec2#Float`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_usage_price(var_2145);
            }
            ,
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#ReservedInstances$CurrencyCode */ =>  {
                let var_2146 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_2146);
            }
            ,
            s if s.matches("instanceTenancy") /* InstanceTenancy com.amazonaws.ec2#ReservedInstances$InstanceTenancy */ =>  {
                let var_2147 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_tenancy(var_2147);
            }
            ,
            s if s.matches("offeringClass") /* OfferingClass com.amazonaws.ec2#ReservedInstances$OfferingClass */ =>  {
                let var_2148 =
                    Some(
                        Result::<crate::model::OfferingClassType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OfferingClassType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_class(var_2148);
            }
            ,
            s if s.matches("offeringType") /* OfferingType com.amazonaws.ec2#ReservedInstances$OfferingType */ =>  {
                let var_2149 =
                    Some(
                        Result::<crate::model::OfferingTypeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OfferingTypeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_type(var_2149);
            }
            ,
            s if s.matches("recurringCharges") /* RecurringCharges com.amazonaws.ec2#ReservedInstances$RecurringCharges */ =>  {
                let var_2150 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_recurring_charges_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_recurring_charges(var_2150);
            }
            ,
            s if s.matches("scope") /* Scope com.amazonaws.ec2#ReservedInstances$Scope */ =>  {
                let var_2151 =
                    Some(
                        Result::<crate::model::Scope, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Scope::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_scope(var_2151);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ReservedInstances$Tags */ =>  {
                let var_2152 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2152);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_modification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesModification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesModification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#ReservedInstancesModification$ClientToken */ =>  {
                let var_2153 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_2153);
            }
            ,
            s if s.matches("createDate") /* CreateDate com.amazonaws.ec2#ReservedInstancesModification$CreateDate */ =>  {
                let var_2154 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_2154);
            }
            ,
            s if s.matches("effectiveDate") /* EffectiveDate com.amazonaws.ec2#ReservedInstancesModification$EffectiveDate */ =>  {
                let var_2155 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_effective_date(var_2155);
            }
            ,
            s if s.matches("modificationResultSet") /* ModificationResults com.amazonaws.ec2#ReservedInstancesModification$ModificationResults */ =>  {
                let var_2156 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_instances_modification_result_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_modification_results(var_2156);
            }
            ,
            s if s.matches("reservedInstancesSet") /* ReservedInstancesIds com.amazonaws.ec2#ReservedInstancesModification$ReservedInstancesIds */ =>  {
                let var_2157 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_reserved_intances_ids(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_ids(var_2157);
            }
            ,
            s if s.matches("reservedInstancesModificationId") /* ReservedInstancesModificationId com.amazonaws.ec2#ReservedInstancesModification$ReservedInstancesModificationId */ =>  {
                let var_2158 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_modification_id(var_2158);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ReservedInstancesModification$Status */ =>  {
                let var_2159 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2159);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ReservedInstancesModification$StatusMessage */ =>  {
                let var_2160 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_2160);
            }
            ,
            s if s.matches("updateDate") /* UpdateDate com.amazonaws.ec2#ReservedInstancesModification$UpdateDate */ =>  {
                let var_2161 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_update_date(var_2161);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_offering(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesOffering, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesOffering::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ReservedInstancesOffering$AvailabilityZone */ =>  {
                let var_2162 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2162);
            }
            ,
            s if s.matches("duration") /* Duration com.amazonaws.ec2#ReservedInstancesOffering$Duration */ =>  {
                let var_2163 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_duration(var_2163);
            }
            ,
            s if s.matches("fixedPrice") /* FixedPrice com.amazonaws.ec2#ReservedInstancesOffering$FixedPrice */ =>  {
                let var_2164 =
                    Some(
                         {
                            <f32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (float: `com.amazonaws.ec2#Float`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fixed_price(var_2164);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ReservedInstancesOffering$InstanceType */ =>  {
                let var_2165 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2165);
            }
            ,
            s if s.matches("productDescription") /* ProductDescription com.amazonaws.ec2#ReservedInstancesOffering$ProductDescription */ =>  {
                let var_2166 =
                    Some(
                        Result::<crate::model::RiProductDescription, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RiProductDescription::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_description(var_2166);
            }
            ,
            s if s.matches("reservedInstancesOfferingId") /* ReservedInstancesOfferingId com.amazonaws.ec2#ReservedInstancesOffering$ReservedInstancesOfferingId */ =>  {
                let var_2167 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_offering_id(var_2167);
            }
            ,
            s if s.matches("usagePrice") /* UsagePrice com.amazonaws.ec2#ReservedInstancesOffering$UsagePrice */ =>  {
                let var_2168 =
                    Some(
                         {
                            <f32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (float: `com.amazonaws.ec2#Float`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_usage_price(var_2168);
            }
            ,
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#ReservedInstancesOffering$CurrencyCode */ =>  {
                let var_2169 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_2169);
            }
            ,
            s if s.matches("instanceTenancy") /* InstanceTenancy com.amazonaws.ec2#ReservedInstancesOffering$InstanceTenancy */ =>  {
                let var_2170 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_tenancy(var_2170);
            }
            ,
            s if s.matches("marketplace") /* Marketplace com.amazonaws.ec2#ReservedInstancesOffering$Marketplace */ =>  {
                let var_2171 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_marketplace(var_2171);
            }
            ,
            s if s.matches("offeringClass") /* OfferingClass com.amazonaws.ec2#ReservedInstancesOffering$OfferingClass */ =>  {
                let var_2172 =
                    Some(
                        Result::<crate::model::OfferingClassType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OfferingClassType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_class(var_2172);
            }
            ,
            s if s.matches("offeringType") /* OfferingType com.amazonaws.ec2#ReservedInstancesOffering$OfferingType */ =>  {
                let var_2173 =
                    Some(
                        Result::<crate::model::OfferingTypeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OfferingTypeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_type(var_2173);
            }
            ,
            s if s.matches("pricingDetailsSet") /* PricingDetails com.amazonaws.ec2#ReservedInstancesOffering$PricingDetails */ =>  {
                let var_2174 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_pricing_details_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pricing_details(var_2174);
            }
            ,
            s if s.matches("recurringCharges") /* RecurringCharges com.amazonaws.ec2#ReservedInstancesOffering$RecurringCharges */ =>  {
                let var_2175 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_recurring_charges_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_recurring_charges(var_2175);
            }
            ,
            s if s.matches("scope") /* Scope com.amazonaws.ec2#ReservedInstancesOffering$Scope */ =>  {
                let var_2176 =
                    Some(
                        Result::<crate::model::Scope, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Scope::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_scope(var_2176);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_scheduled_instance_availability(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ScheduledInstanceAvailability, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ScheduledInstanceAvailability::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ScheduledInstanceAvailability$AvailabilityZone */ =>  {
                let var_2177 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2177);
            }
            ,
            s if s.matches("availableInstanceCount") /* AvailableInstanceCount com.amazonaws.ec2#ScheduledInstanceAvailability$AvailableInstanceCount */ =>  {
                let var_2178 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_instance_count(var_2178);
            }
            ,
            s if s.matches("firstSlotStartTime") /* FirstSlotStartTime com.amazonaws.ec2#ScheduledInstanceAvailability$FirstSlotStartTime */ =>  {
                let var_2179 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_first_slot_start_time(var_2179);
            }
            ,
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#ScheduledInstanceAvailability$HourlyPrice */ =>  {
                let var_2180 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_2180);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ScheduledInstanceAvailability$InstanceType */ =>  {
                let var_2181 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2181);
            }
            ,
            s if s.matches("maxTermDurationInDays") /* MaxTermDurationInDays com.amazonaws.ec2#ScheduledInstanceAvailability$MaxTermDurationInDays */ =>  {
                let var_2182 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_term_duration_in_days(var_2182);
            }
            ,
            s if s.matches("minTermDurationInDays") /* MinTermDurationInDays com.amazonaws.ec2#ScheduledInstanceAvailability$MinTermDurationInDays */ =>  {
                let var_2183 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_term_duration_in_days(var_2183);
            }
            ,
            s if s.matches("networkPlatform") /* NetworkPlatform com.amazonaws.ec2#ScheduledInstanceAvailability$NetworkPlatform */ =>  {
                let var_2184 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_platform(var_2184);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#ScheduledInstanceAvailability$Platform */ =>  {
                let var_2185 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2185);
            }
            ,
            s if s.matches("purchaseToken") /* PurchaseToken com.amazonaws.ec2#ScheduledInstanceAvailability$PurchaseToken */ =>  {
                let var_2186 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_purchase_token(var_2186);
            }
            ,
            s if s.matches("recurrence") /* Recurrence com.amazonaws.ec2#ScheduledInstanceAvailability$Recurrence */ =>  {
                let var_2187 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_scheduled_instance_recurrence(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_recurrence(var_2187);
            }
            ,
            s if s.matches("slotDurationInHours") /* SlotDurationInHours com.amazonaws.ec2#ScheduledInstanceAvailability$SlotDurationInHours */ =>  {
                let var_2188 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_slot_duration_in_hours(var_2188);
            }
            ,
            s if s.matches("totalScheduledInstanceHours") /* TotalScheduledInstanceHours com.amazonaws.ec2#ScheduledInstanceAvailability$TotalScheduledInstanceHours */ =>  {
                let var_2189 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_scheduled_instance_hours(var_2189);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_scheduled_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ScheduledInstance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ScheduledInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ScheduledInstance$AvailabilityZone */ =>  {
                let var_2190 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2190);
            }
            ,
            s if s.matches("createDate") /* CreateDate com.amazonaws.ec2#ScheduledInstance$CreateDate */ =>  {
                let var_2191 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_2191);
            }
            ,
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#ScheduledInstance$HourlyPrice */ =>  {
                let var_2192 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_2192);
            }
            ,
            s if s.matches("instanceCount") /* InstanceCount com.amazonaws.ec2#ScheduledInstance$InstanceCount */ =>  {
                let var_2193 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_count(var_2193);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ScheduledInstance$InstanceType */ =>  {
                let var_2194 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2194);
            }
            ,
            s if s.matches("networkPlatform") /* NetworkPlatform com.amazonaws.ec2#ScheduledInstance$NetworkPlatform */ =>  {
                let var_2195 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_platform(var_2195);
            }
            ,
            s if s.matches("nextSlotStartTime") /* NextSlotStartTime com.amazonaws.ec2#ScheduledInstance$NextSlotStartTime */ =>  {
                let var_2196 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_next_slot_start_time(var_2196);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#ScheduledInstance$Platform */ =>  {
                let var_2197 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2197);
            }
            ,
            s if s.matches("previousSlotEndTime") /* PreviousSlotEndTime com.amazonaws.ec2#ScheduledInstance$PreviousSlotEndTime */ =>  {
                let var_2198 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_previous_slot_end_time(var_2198);
            }
            ,
            s if s.matches("recurrence") /* Recurrence com.amazonaws.ec2#ScheduledInstance$Recurrence */ =>  {
                let var_2199 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_scheduled_instance_recurrence(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_recurrence(var_2199);
            }
            ,
            s if s.matches("scheduledInstanceId") /* ScheduledInstanceId com.amazonaws.ec2#ScheduledInstance$ScheduledInstanceId */ =>  {
                let var_2200 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_scheduled_instance_id(var_2200);
            }
            ,
            s if s.matches("slotDurationInHours") /* SlotDurationInHours com.amazonaws.ec2#ScheduledInstance$SlotDurationInHours */ =>  {
                let var_2201 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_slot_duration_in_hours(var_2201);
            }
            ,
            s if s.matches("termEndDate") /* TermEndDate com.amazonaws.ec2#ScheduledInstance$TermEndDate */ =>  {
                let var_2202 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_term_end_date(var_2202);
            }
            ,
            s if s.matches("termStartDate") /* TermStartDate com.amazonaws.ec2#ScheduledInstance$TermStartDate */ =>  {
                let var_2203 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_term_start_date(var_2203);
            }
            ,
            s if s.matches("totalScheduledInstanceHours") /* TotalScheduledInstanceHours com.amazonaws.ec2#ScheduledInstance$TotalScheduledInstanceHours */ =>  {
                let var_2204 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_scheduled_instance_hours(var_2204);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_security_group_reference(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SecurityGroupReference, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SecurityGroupReference::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#SecurityGroupReference$GroupId */ =>  {
                let var_2205 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2205);
            }
            ,
            s if s.matches("referencingVpcId") /* ReferencingVpcId com.amazonaws.ec2#SecurityGroupReference$ReferencingVpcId */ =>  {
                let var_2206 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_referencing_vpc_id(var_2206);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#SecurityGroupReference$VpcPeeringConnectionId */ =>  {
                let var_2207 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_2207);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_security_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SecurityGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SecurityGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupDescription") /* Description com.amazonaws.ec2#SecurityGroup$Description */ =>  {
                let var_2208 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2208);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#SecurityGroup$GroupName */ =>  {
                let var_2209 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2209);
            }
            ,
            s if s.matches("ipPermissions") /* IpPermissions com.amazonaws.ec2#SecurityGroup$IpPermissions */ =>  {
                let var_2210 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_permissions(var_2210);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#SecurityGroup$OwnerId */ =>  {
                let var_2211 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2211);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#SecurityGroup$GroupId */ =>  {
                let var_2212 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2212);
            }
            ,
            s if s.matches("ipPermissionsEgress") /* IpPermissionsEgress com.amazonaws.ec2#SecurityGroup$IpPermissionsEgress */ =>  {
                let var_2213 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_permissions_egress(var_2213);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SecurityGroup$Tags */ =>  {
                let var_2214 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2214);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#SecurityGroup$VpcId */ =>  {
                let var_2215 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2215);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_create_volume_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CreateVolumePermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CreateVolumePermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("group") /* Group com.amazonaws.ec2#CreateVolumePermission$Group */ =>  {
                let var_2216 =
                    Some(
                        Result::<crate::model::PermissionGroup, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PermissionGroup::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_group(var_2216);
            }
            ,
            s if s.matches("userId") /* UserId com.amazonaws.ec2#CreateVolumePermission$UserId */ =>  {
                let var_2217 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_2217);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_snapshot(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Snapshot, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Snapshot::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dataEncryptionKeyId") /* DataEncryptionKeyId com.amazonaws.ec2#Snapshot$DataEncryptionKeyId */ =>  {
                let var_2218 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_encryption_key_id(var_2218);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#Snapshot$Description */ =>  {
                let var_2219 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2219);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#Snapshot$Encrypted */ =>  {
                let var_2220 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_2220);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2#Snapshot$KmsKeyId */ =>  {
                let var_2221 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_2221);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Snapshot$OwnerId */ =>  {
                let var_2222 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2222);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#Snapshot$Progress */ =>  {
                let var_2223 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_2223);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#Snapshot$SnapshotId */ =>  {
                let var_2224 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2224);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#Snapshot$StartTime */ =>  {
                let var_2225 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_2225);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2#Snapshot$State */ =>  {
                let var_2226 =
                    Some(
                        Result::<crate::model::SnapshotState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SnapshotState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2226);
            }
            ,
            s if s.matches("statusMessage") /* StateMessage com.amazonaws.ec2#Snapshot$StateMessage */ =>  {
                let var_2227 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_2227);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#Snapshot$VolumeId */ =>  {
                let var_2228 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2228);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2#Snapshot$VolumeSize */ =>  {
                let var_2229 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_2229);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2#Snapshot$OwnerAlias */ =>  {
                let var_2230 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_2230);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#Snapshot$OutpostArn */ =>  {
                let var_2231 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2231);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Snapshot$Tags */ =>  {
                let var_2232 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2232);
            }
            ,
            s if s.matches("storageTier") /* StorageTier com.amazonaws.ec2#Snapshot$StorageTier */ =>  {
                let var_2233 =
                    Some(
                        Result::<crate::model::StorageTier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageTier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_tier(var_2233);
            }
            ,
            s if s.matches("restoreExpiryTime") /* RestoreExpiryTime com.amazonaws.ec2#Snapshot$RestoreExpiryTime */ =>  {
                let var_2234 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_restore_expiry_time(var_2234);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_snapshot_tier_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SnapshotTierStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SnapshotTierStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotTierStatus$SnapshotId */ =>  {
                let var_2235 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2235);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#SnapshotTierStatus$VolumeId */ =>  {
                let var_2236 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2236);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#SnapshotTierStatus$Status */ =>  {
                let var_2237 =
                    Some(
                        Result::<crate::model::SnapshotState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SnapshotState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2237);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#SnapshotTierStatus$OwnerId */ =>  {
                let var_2238 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2238);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SnapshotTierStatus$Tags */ =>  {
                let var_2239 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2239);
            }
            ,
            s if s.matches("storageTier") /* StorageTier com.amazonaws.ec2#SnapshotTierStatus$StorageTier */ =>  {
                let var_2240 =
                    Some(
                        Result::<crate::model::StorageTier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageTier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_tier(var_2240);
            }
            ,
            s if s.matches("lastTieringStartTime") /* LastTieringStartTime com.amazonaws.ec2#SnapshotTierStatus$LastTieringStartTime */ =>  {
                let var_2241 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_tiering_start_time(var_2241);
            }
            ,
            s if s.matches("lastTieringProgress") /* LastTieringProgress com.amazonaws.ec2#SnapshotTierStatus$LastTieringProgress */ =>  {
                let var_2242 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_last_tiering_progress(var_2242);
            }
            ,
            s if s.matches("lastTieringOperationStatus") /* LastTieringOperationStatus com.amazonaws.ec2#SnapshotTierStatus$LastTieringOperationStatus */ =>  {
                let var_2243 =
                    Some(
                        Result::<crate::model::TieringOperationStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TieringOperationStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_last_tiering_operation_status(var_2243);
            }
            ,
            s if s.matches("lastTieringOperationStatusDetail") /* LastTieringOperationStatusDetail com.amazonaws.ec2#SnapshotTierStatus$LastTieringOperationStatusDetail */ =>  {
                let var_2244 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_last_tiering_operation_status_detail(var_2244);
            }
            ,
            s if s.matches("archivalCompleteTime") /* ArchivalCompleteTime com.amazonaws.ec2#SnapshotTierStatus$ArchivalCompleteTime */ =>  {
                let var_2245 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_archival_complete_time(var_2245);
            }
            ,
            s if s.matches("restoreExpiryTime") /* RestoreExpiryTime com.amazonaws.ec2#SnapshotTierStatus$RestoreExpiryTime */ =>  {
                let var_2246 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_restore_expiry_time(var_2246);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_history_record(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HistoryRecord, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HistoryRecord::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("eventInformation") /* EventInformation com.amazonaws.ec2#HistoryRecord$EventInformation */ =>  {
                let var_2247 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_information(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_information(var_2247);
            }
            ,
            s if s.matches("eventType") /* EventType com.amazonaws.ec2#HistoryRecord$EventType */ =>  {
                let var_2248 =
                    Some(
                        Result::<crate::model::EventType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EventType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_event_type(var_2248);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#HistoryRecord$Timestamp */ =>  {
                let var_2249 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_2249);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_fleet_request_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotFleetRequestConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotFleetRequestConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("activityStatus") /* ActivityStatus com.amazonaws.ec2#SpotFleetRequestConfig$ActivityStatus */ =>  {
                let var_2250 =
                    Some(
                        Result::<crate::model::ActivityStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ActivityStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_activity_status(var_2250);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#SpotFleetRequestConfig$CreateTime */ =>  {
                let var_2251 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_2251);
            }
            ,
            s if s.matches("spotFleetRequestConfig") /* SpotFleetRequestConfig com.amazonaws.ec2#SpotFleetRequestConfig$SpotFleetRequestConfig */ =>  {
                let var_2252 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_fleet_request_config_data(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_config(var_2252);
            }
            ,
            s if s.matches("spotFleetRequestId") /* SpotFleetRequestId com.amazonaws.ec2#SpotFleetRequestConfig$SpotFleetRequestId */ =>  {
                let var_2253 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_id(var_2253);
            }
            ,
            s if s.matches("spotFleetRequestState") /* SpotFleetRequestState com.amazonaws.ec2#SpotFleetRequestConfig$SpotFleetRequestState */ =>  {
                let var_2254 =
                    Some(
                        Result::<crate::model::BatchState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BatchState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_fleet_request_state(var_2254);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SpotFleetRequestConfig$Tags */ =>  {
                let var_2255 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2255);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_instance_request(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotInstanceRequest, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotInstanceRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("actualBlockHourlyPrice") /* ActualBlockHourlyPrice com.amazonaws.ec2#SpotInstanceRequest$ActualBlockHourlyPrice */ =>  {
                let var_2256 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_actual_block_hourly_price(var_2256);
            }
            ,
            s if s.matches("availabilityZoneGroup") /* AvailabilityZoneGroup com.amazonaws.ec2#SpotInstanceRequest$AvailabilityZoneGroup */ =>  {
                let var_2257 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_group(var_2257);
            }
            ,
            s if s.matches("blockDurationMinutes") /* BlockDurationMinutes com.amazonaws.ec2#SpotInstanceRequest$BlockDurationMinutes */ =>  {
                let var_2258 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_block_duration_minutes(var_2258);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#SpotInstanceRequest$CreateTime */ =>  {
                let var_2259 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_2259);
            }
            ,
            s if s.matches("fault") /* Fault com.amazonaws.ec2#SpotInstanceRequest$Fault */ =>  {
                let var_2260 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_instance_state_fault(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fault(var_2260);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#SpotInstanceRequest$InstanceId */ =>  {
                let var_2261 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2261);
            }
            ,
            s if s.matches("launchGroup") /* LaunchGroup com.amazonaws.ec2#SpotInstanceRequest$LaunchGroup */ =>  {
                let var_2262 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_group(var_2262);
            }
            ,
            s if s.matches("launchSpecification") /* LaunchSpecification com.amazonaws.ec2#SpotInstanceRequest$LaunchSpecification */ =>  {
                let var_2263 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_specification(var_2263);
            }
            ,
            s if s.matches("launchedAvailabilityZone") /* LaunchedAvailabilityZone com.amazonaws.ec2#SpotInstanceRequest$LaunchedAvailabilityZone */ =>  {
                let var_2264 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launched_availability_zone(var_2264);
            }
            ,
            s if s.matches("productDescription") /* ProductDescription com.amazonaws.ec2#SpotInstanceRequest$ProductDescription */ =>  {
                let var_2265 =
                    Some(
                        Result::<crate::model::RiProductDescription, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RiProductDescription::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_description(var_2265);
            }
            ,
            s if s.matches("spotInstanceRequestId") /* SpotInstanceRequestId com.amazonaws.ec2#SpotInstanceRequest$SpotInstanceRequestId */ =>  {
                let var_2266 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_request_id(var_2266);
            }
            ,
            s if s.matches("spotPrice") /* SpotPrice com.amazonaws.ec2#SpotInstanceRequest$SpotPrice */ =>  {
                let var_2267 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_price(var_2267);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#SpotInstanceRequest$State */ =>  {
                let var_2268 =
                    Some(
                        Result::<crate::model::SpotInstanceState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SpotInstanceState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2268);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#SpotInstanceRequest$Status */ =>  {
                let var_2269 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_instance_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_2269);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#SpotInstanceRequest$Tags */ =>  {
                let var_2270 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2270);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#SpotInstanceRequest$Type */ =>  {
                let var_2271 =
                    Some(
                        Result::<crate::model::SpotInstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SpotInstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_2271);
            }
            ,
            s if s.matches("validFrom") /* ValidFrom com.amazonaws.ec2#SpotInstanceRequest$ValidFrom */ =>  {
                let var_2272 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_from(var_2272);
            }
            ,
            s if s.matches("validUntil") /* ValidUntil com.amazonaws.ec2#SpotInstanceRequest$ValidUntil */ =>  {
                let var_2273 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_until(var_2273);
            }
            ,
            s if s.matches("instanceInterruptionBehavior") /* InstanceInterruptionBehavior com.amazonaws.ec2#SpotInstanceRequest$InstanceInterruptionBehavior */ =>  {
                let var_2274 =
                    Some(
                        Result::<crate::model::InstanceInterruptionBehavior, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceInterruptionBehavior::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_interruption_behavior(var_2274);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_price(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotPrice, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotPrice::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#SpotPrice$AvailabilityZone */ =>  {
                let var_2275 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2275);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#SpotPrice$InstanceType */ =>  {
                let var_2276 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2276);
            }
            ,
            s if s.matches("productDescription") /* ProductDescription com.amazonaws.ec2#SpotPrice$ProductDescription */ =>  {
                let var_2277 =
                    Some(
                        Result::<crate::model::RiProductDescription, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RiProductDescription::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_product_description(var_2277);
            }
            ,
            s if s.matches("spotPrice") /* SpotPrice com.amazonaws.ec2#SpotPrice$SpotPrice */ =>  {
                let var_2278 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_price(var_2278);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#SpotPrice$Timestamp */ =>  {
                let var_2279 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_2279);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_stale_security_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StaleSecurityGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StaleSecurityGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#StaleSecurityGroup$Description */ =>  {
                let var_2280 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2280);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#StaleSecurityGroup$GroupId */ =>  {
                let var_2281 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2281);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#StaleSecurityGroup$GroupName */ =>  {
                let var_2282 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2282);
            }
            ,
            s if s.matches("staleIpPermissions") /* StaleIpPermissions com.amazonaws.ec2#StaleSecurityGroup$StaleIpPermissions */ =>  {
                let var_2283 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_stale_ip_permission_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stale_ip_permissions(var_2283);
            }
            ,
            s if s.matches("staleIpPermissionsEgress") /* StaleIpPermissionsEgress com.amazonaws.ec2#StaleSecurityGroup$StaleIpPermissionsEgress */ =>  {
                let var_2284 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_stale_ip_permission_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_stale_ip_permissions_egress(var_2284);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#StaleSecurityGroup$VpcId */ =>  {
                let var_2285 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2285);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_store_image_task_result(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StoreImageTaskResult, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StoreImageTaskResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amiId") /* AmiId com.amazonaws.ec2#StoreImageTaskResult$AmiId */ =>  {
                let var_2286 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ami_id(var_2286);
            }
            ,
            s if s.matches("taskStartTime") /* TaskStartTime com.amazonaws.ec2#StoreImageTaskResult$TaskStartTime */ =>  {
                let var_2287 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_task_start_time(var_2287);
            }
            ,
            s if s.matches("bucket") /* Bucket com.amazonaws.ec2#StoreImageTaskResult$Bucket */ =>  {
                let var_2288 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_2288);
            }
            ,
            s if s.matches("s3objectKey") /* S3objectKey com.amazonaws.ec2#StoreImageTaskResult$S3objectKey */ =>  {
                let var_2289 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3object_key(var_2289);
            }
            ,
            s if s.matches("progressPercentage") /* ProgressPercentage com.amazonaws.ec2#StoreImageTaskResult$ProgressPercentage */ =>  {
                let var_2290 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_progress_percentage(var_2290);
            }
            ,
            s if s.matches("storeTaskState") /* StoreTaskState com.amazonaws.ec2#StoreImageTaskResult$StoreTaskState */ =>  {
                let var_2291 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_store_task_state(var_2291);
            }
            ,
            s if s.matches("storeTaskFailureReason") /* StoreTaskFailureReason com.amazonaws.ec2#StoreImageTaskResult$StoreTaskFailureReason */ =>  {
                let var_2292 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_store_task_failure_reason(var_2292);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tag_description(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TagDescription, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TagDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("key") /* Key com.amazonaws.ec2#TagDescription$Key */ =>  {
                let var_2293 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_2293);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TagDescription$ResourceId */ =>  {
                let var_2294 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2294);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TagDescription$ResourceType */ =>  {
                let var_2295 =
                    Some(
                        Result::<crate::model::ResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2295);
            }
            ,
            s if s.matches("value") /* Value com.amazonaws.ec2#TagDescription$Value */ =>  {
                let var_2296 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_2296);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayAttachment$TransitGatewayAttachmentId */ =>  {
                let var_2297 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2297);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#TransitGatewayAttachment$TransitGatewayId */ =>  {
                let var_2298 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_2298);
            }
            ,
            s if s.matches("transitGatewayOwnerId") /* TransitGatewayOwnerId com.amazonaws.ec2#TransitGatewayAttachment$TransitGatewayOwnerId */ =>  {
                let var_2299 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_owner_id(var_2299);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#TransitGatewayAttachment$ResourceOwnerId */ =>  {
                let var_2300 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_2300);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayAttachment$ResourceType */ =>  {
                let var_2301 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2301);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayAttachment$ResourceId */ =>  {
                let var_2302 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2302);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayAttachment$State */ =>  {
                let var_2303 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2303);
            }
            ,
            s if s.matches("association") /* Association com.amazonaws.ec2#TransitGatewayAttachment$Association */ =>  {
                let var_2304 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_transit_gateway_attachment_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_2304);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayAttachment$CreationTime */ =>  {
                let var_2305 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_2305);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayAttachment$Tags */ =>  {
                let var_2306 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2306);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_volume(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Volume, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Volume::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachmentSet") /* Attachments com.amazonaws.ec2#Volume$Attachments */ =>  {
                let var_2307 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_attachment_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachments(var_2307);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Volume$AvailabilityZone */ =>  {
                let var_2308 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2308);
            }
            ,
            s if s.matches("createTime") /* CreateTime com.amazonaws.ec2#Volume$CreateTime */ =>  {
                let var_2309 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_2309);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#Volume$Encrypted */ =>  {
                let var_2310 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_2310);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2#Volume$KmsKeyId */ =>  {
                let var_2311 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_2311);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#Volume$OutpostArn */ =>  {
                let var_2312 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2312);
            }
            ,
            s if s.matches("size") /* Size com.amazonaws.ec2#Volume$Size */ =>  {
                let var_2313 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size(var_2313);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#Volume$SnapshotId */ =>  {
                let var_2314 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2314);
            }
            ,
            s if s.matches("status") /* State com.amazonaws.ec2#Volume$State */ =>  {
                let var_2315 =
                    Some(
                        Result::<crate::model::VolumeState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2315);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#Volume$VolumeId */ =>  {
                let var_2316 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2316);
            }
            ,
            s if s.matches("iops") /* Iops com.amazonaws.ec2#Volume$Iops */ =>  {
                let var_2317 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_2317);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Volume$Tags */ =>  {
                let var_2318 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2318);
            }
            ,
            s if s.matches("volumeType") /* VolumeType com.amazonaws.ec2#Volume$VolumeType */ =>  {
                let var_2319 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_type(var_2319);
            }
            ,
            s if s.matches("fastRestored") /* FastRestored com.amazonaws.ec2#Volume$FastRestored */ =>  {
                let var_2320 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fast_restored(var_2320);
            }
            ,
            s if s.matches("multiAttachEnabled") /* MultiAttachEnabled com.amazonaws.ec2#Volume$MultiAttachEnabled */ =>  {
                let var_2321 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_multi_attach_enabled(var_2321);
            }
            ,
            s if s.matches("throughput") /* Throughput com.amazonaws.ec2#Volume$Throughput */ =>  {
                let var_2322 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_throughput(var_2322);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_volume_status_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("actionsSet") /* Actions com.amazonaws.ec2#VolumeStatusItem$Actions */ =>  {
                let var_2323 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_status_actions_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_actions(var_2323);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#VolumeStatusItem$AvailabilityZone */ =>  {
                let var_2324 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2324);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#VolumeStatusItem$OutpostArn */ =>  {
                let var_2325 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2325);
            }
            ,
            s if s.matches("eventsSet") /* Events com.amazonaws.ec2#VolumeStatusItem$Events */ =>  {
                let var_2326 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_status_events_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_events(var_2326);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#VolumeStatusItem$VolumeId */ =>  {
                let var_2327 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2327);
            }
            ,
            s if s.matches("volumeStatus") /* VolumeStatus com.amazonaws.ec2#VolumeStatusItem$VolumeStatus */ =>  {
                let var_2328 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_volume_status_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volume_status(var_2328);
            }
            ,
            s if s.matches("attachmentStatuses") /* AttachmentStatuses com.amazonaws.ec2#VolumeStatusItem$AttachmentStatuses */ =>  {
                let var_2329 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_status_attachment_status_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment_statuses(var_2329);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_classic_link(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcClassicLink, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcClassicLink::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("classicLinkEnabled") /* ClassicLinkEnabled com.amazonaws.ec2#VpcClassicLink$ClassicLinkEnabled */ =>  {
                let var_2330 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_classic_link_enabled(var_2330);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpcClassicLink$Tags */ =>  {
                let var_2331 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2331);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcClassicLink$VpcId */ =>  {
                let var_2332 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2332);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_classic_link_dns_support(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClassicLinkDnsSupport, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClassicLinkDnsSupport::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("classicLinkDnsSupported") /* ClassicLinkDnsSupported com.amazonaws.ec2#ClassicLinkDnsSupport$ClassicLinkDnsSupported */ =>  {
                let var_2333 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_classic_link_dns_supported(var_2333);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#ClassicLinkDnsSupport$VpcId */ =>  {
                let var_2334 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2334);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpc_endpoint_connection(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcEndpointConnection, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcEndpointConnection::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#VpcEndpointConnection$ServiceId */ =>  {
                let var_2335 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_2335);
            }
            ,
            s if s.matches("vpcEndpointId") /* VpcEndpointId com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointId */ =>  {
                let var_2336 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_id(var_2336);
            }
            ,
            s if s.matches("vpcEndpointOwner") /* VpcEndpointOwner com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointOwner */ =>  {
                let var_2337 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_owner(var_2337);
            }
            ,
            s if s.matches("vpcEndpointState") /* VpcEndpointState com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointState */ =>  {
                let var_2338 =
                    Some(
                        Result::<crate::model::State, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::State::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_state(var_2338);
            }
            ,
            s if s.matches("creationTimestamp") /* CreationTimestamp com.amazonaws.ec2#VpcEndpointConnection$CreationTimestamp */ =>  {
                let var_2339 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_2339);
            }
            ,
            s if s.matches("dnsEntrySet") /* DnsEntries com.amazonaws.ec2#VpcEndpointConnection$DnsEntries */ =>  {
                let var_2340 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dns_entry_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_entries(var_2340);
            }
            ,
            s if s.matches("networkLoadBalancerArnSet") /* NetworkLoadBalancerArns com.amazonaws.ec2#VpcEndpointConnection$NetworkLoadBalancerArns */ =>  {
                let var_2341 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_load_balancer_arns(var_2341);
            }
            ,
            s if s.matches("gatewayLoadBalancerArnSet") /* GatewayLoadBalancerArns com.amazonaws.ec2#VpcEndpointConnection$GatewayLoadBalancerArns */ =>  {
                let var_2342 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gateway_load_balancer_arns(var_2342);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_allowed_principal(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AllowedPrincipal, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AllowedPrincipal::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("principalType") /* PrincipalType com.amazonaws.ec2#AllowedPrincipal$PrincipalType */ =>  {
                let var_2343 =
                    Some(
                        Result::<crate::model::PrincipalType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PrincipalType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_principal_type(var_2343);
            }
            ,
            s if s.matches("principal") /* Principal com.amazonaws.ec2#AllowedPrincipal$Principal */ =>  {
                let var_2344 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_principal(var_2344);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_service_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServiceDetail, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServiceDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceName") /* ServiceName com.amazonaws.ec2#ServiceDetail$ServiceName */ =>  {
                let var_2345 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_name(var_2345);
            }
            ,
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#ServiceDetail$ServiceId */ =>  {
                let var_2346 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_2346);
            }
            ,
            s if s.matches("serviceType") /* ServiceType com.amazonaws.ec2#ServiceDetail$ServiceType */ =>  {
                let var_2347 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_service_type_detail_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_service_type(var_2347);
            }
            ,
            s if s.matches("availabilityZoneSet") /* AvailabilityZones com.amazonaws.ec2#ServiceDetail$AvailabilityZones */ =>  {
                let var_2348 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_2348);
            }
            ,
            s if s.matches("owner") /* Owner com.amazonaws.ec2#ServiceDetail$Owner */ =>  {
                let var_2349 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner(var_2349);
            }
            ,
            s if s.matches("baseEndpointDnsNameSet") /* BaseEndpointDnsNames com.amazonaws.ec2#ServiceDetail$BaseEndpointDnsNames */ =>  {
                let var_2350 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_base_endpoint_dns_names(var_2350);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#ServiceDetail$PrivateDnsName */ =>  {
                let var_2351 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_2351);
            }
            ,
            s if s.matches("privateDnsNameSet") /* PrivateDnsNames com.amazonaws.ec2#ServiceDetail$PrivateDnsNames */ =>  {
                let var_2352 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_private_dns_details_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_names(var_2352);
            }
            ,
            s if s.matches("vpcEndpointPolicySupported") /* VpcEndpointPolicySupported com.amazonaws.ec2#ServiceDetail$VpcEndpointPolicySupported */ =>  {
                let var_2353 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_policy_supported(var_2353);
            }
            ,
            s if s.matches("acceptanceRequired") /* AcceptanceRequired com.amazonaws.ec2#ServiceDetail$AcceptanceRequired */ =>  {
                let var_2354 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_acceptance_required(var_2354);
            }
            ,
            s if s.matches("managesVpcEndpoints") /* ManagesVpcEndpoints com.amazonaws.ec2#ServiceDetail$ManagesVpcEndpoints */ =>  {
                let var_2355 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_manages_vpc_endpoints(var_2355);
            }
            ,
            s if s.matches("payerResponsibility") /* PayerResponsibility com.amazonaws.ec2#ServiceDetail$PayerResponsibility */ =>  {
                let var_2356 =
                    Some(
                        Result::<crate::model::PayerResponsibility, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PayerResponsibility::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payer_responsibility(var_2356);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ServiceDetail$Tags */ =>  {
                let var_2357 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2357);
            }
            ,
            s if s.matches("privateDnsNameVerificationState") /* PrivateDnsNameVerificationState com.amazonaws.ec2#ServiceDetail$PrivateDnsNameVerificationState */ =>  {
                let var_2358 =
                    Some(
                        Result::<crate::model::DnsNameState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DnsNameState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_verification_state(var_2358);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disable_fast_snapshot_restore_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DisableFastSnapshotRestoreSuccessItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DisableFastSnapshotRestoreSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$SnapshotId */ =>  {
                let var_2359 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2359);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$AvailabilityZone */ =>  {
                let var_2360 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2360);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$State */ =>  {
                let var_2361 =
                    Some(
                        Result::<crate::model::FastSnapshotRestoreStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastSnapshotRestoreStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2361);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$StateTransitionReason */ =>  {
                let var_2362 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_2362);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$OwnerId */ =>  {
                let var_2363 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2363);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$OwnerAlias */ =>  {
                let var_2364 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_2364);
            }
            ,
            s if s.matches("enablingTime") /* EnablingTime com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$EnablingTime */ =>  {
                let var_2365 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabling_time(var_2365);
            }
            ,
            s if s.matches("optimizingTime") /* OptimizingTime com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$OptimizingTime */ =>  {
                let var_2366 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_optimizing_time(var_2366);
            }
            ,
            s if s.matches("enabledTime") /* EnabledTime com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$EnabledTime */ =>  {
                let var_2367 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabled_time(var_2367);
            }
            ,
            s if s.matches("disablingTime") /* DisablingTime com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$DisablingTime */ =>  {
                let var_2368 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabling_time(var_2368);
            }
            ,
            s if s.matches("disabledTime") /* DisabledTime com.amazonaws.ec2#DisableFastSnapshotRestoreSuccessItem$DisabledTime */ =>  {
                let var_2369 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabled_time(var_2369);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disable_fast_snapshot_restore_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DisableFastSnapshotRestoreErrorItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DisableFastSnapshotRestoreErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#DisableFastSnapshotRestoreErrorItem$SnapshotId */ =>  {
                let var_2370 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2370);
            }
            ,
            s if s.matches("fastSnapshotRestoreStateErrorSet") /* FastSnapshotRestoreStateErrors com.amazonaws.ec2#DisableFastSnapshotRestoreErrorItem$FastSnapshotRestoreStateErrors */ =>  {
                let var_2371 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_state_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fast_snapshot_restore_state_errors(var_2371);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_enable_fast_snapshot_restore_success_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EnableFastSnapshotRestoreSuccessItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EnableFastSnapshotRestoreSuccessItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$SnapshotId */ =>  {
                let var_2372 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2372);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$AvailabilityZone */ =>  {
                let var_2373 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2373);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$State */ =>  {
                let var_2374 =
                    Some(
                        Result::<crate::model::FastSnapshotRestoreStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FastSnapshotRestoreStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2374);
            }
            ,
            s if s.matches("stateTransitionReason") /* StateTransitionReason com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$StateTransitionReason */ =>  {
                let var_2375 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_2375);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$OwnerId */ =>  {
                let var_2376 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2376);
            }
            ,
            s if s.matches("ownerAlias") /* OwnerAlias com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$OwnerAlias */ =>  {
                let var_2377 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_alias(var_2377);
            }
            ,
            s if s.matches("enablingTime") /* EnablingTime com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$EnablingTime */ =>  {
                let var_2378 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabling_time(var_2378);
            }
            ,
            s if s.matches("optimizingTime") /* OptimizingTime com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$OptimizingTime */ =>  {
                let var_2379 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_optimizing_time(var_2379);
            }
            ,
            s if s.matches("enabledTime") /* EnabledTime com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$EnabledTime */ =>  {
                let var_2380 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_enabled_time(var_2380);
            }
            ,
            s if s.matches("disablingTime") /* DisablingTime com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$DisablingTime */ =>  {
                let var_2381 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabling_time(var_2381);
            }
            ,
            s if s.matches("disabledTime") /* DisabledTime com.amazonaws.ec2#EnableFastSnapshotRestoreSuccessItem$DisabledTime */ =>  {
                let var_2382 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_disabled_time(var_2382);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_enable_fast_snapshot_restore_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EnableFastSnapshotRestoreErrorItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EnableFastSnapshotRestoreErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#EnableFastSnapshotRestoreErrorItem$SnapshotId */ =>  {
                let var_2383 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2383);
            }
            ,
            s if s.matches("fastSnapshotRestoreStateErrorSet") /* FastSnapshotRestoreStateErrors com.amazonaws.ec2#EnableFastSnapshotRestoreErrorItem$FastSnapshotRestoreStateErrors */ =>  {
                let var_2384 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_state_error_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fast_snapshot_restore_state_errors(var_2384);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_associated_role(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AssociatedRole, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AssociatedRole::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associatedRoleArn") /* AssociatedRoleArn com.amazonaws.ec2#AssociatedRole$AssociatedRoleArn */ =>  {
                let var_2385 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_associated_role_arn(var_2385);
            }
            ,
            s if s.matches("certificateS3BucketName") /* CertificateS3BucketName com.amazonaws.ec2#AssociatedRole$CertificateS3BucketName */ =>  {
                let var_2386 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_s3_bucket_name(var_2386);
            }
            ,
            s if s.matches("certificateS3ObjectKey") /* CertificateS3ObjectKey com.amazonaws.ec2#AssociatedRole$CertificateS3ObjectKey */ =>  {
                let var_2387 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_s3_object_key(var_2387);
            }
            ,
            s if s.matches("encryptionKmsKeyId") /* EncryptionKmsKeyId com.amazonaws.ec2#AssociatedRole$EncryptionKmsKeyId */ =>  {
                let var_2388 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_encryption_kms_key_id(var_2388);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_cidr_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6CidrAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6CidrAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Cidr") /* Ipv6Cidr com.amazonaws.ec2#Ipv6CidrAssociation$Ipv6Cidr */ =>  {
                let var_2389 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr(var_2389);
            }
            ,
            s if s.matches("associatedResource") /* AssociatedResource com.amazonaws.ec2#Ipv6CidrAssociation$AssociatedResource */ =>  {
                let var_2390 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_associated_resource(var_2390);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_usage(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceUsage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceUsage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accountId") /* AccountId com.amazonaws.ec2#InstanceUsage$AccountId */ =>  {
                let var_2391 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account_id(var_2391);
            }
            ,
            s if s.matches("usedInstanceCount") /* UsedInstanceCount com.amazonaws.ec2#InstanceUsage$UsedInstanceCount */ =>  {
                let var_2392 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_used_instance_count(var_2392);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_coip_address_usage(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CoipAddressUsage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CoipAddressUsage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2#CoipAddressUsage$AllocationId */ =>  {
                let var_2393 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_2393);
            }
            ,
            s if s.matches("awsAccountId") /* AwsAccountId com.amazonaws.ec2#CoipAddressUsage$AwsAccountId */ =>  {
                let var_2394 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_account_id(var_2394);
            }
            ,
            s if s.matches("awsService") /* AwsService com.amazonaws.ec2#CoipAddressUsage$AwsService */ =>  {
                let var_2395 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_service(var_2395);
            }
            ,
            s if s.matches("coIp") /* CoIp com.amazonaws.ec2#CoipAddressUsage$CoIp */ =>  {
                let var_2396 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_co_ip(var_2396);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupArn") /* GroupArn com.amazonaws.ec2#CapacityReservationGroup$GroupArn */ =>  {
                let var_2397 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_arn(var_2397);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#CapacityReservationGroup$OwnerId */ =>  {
                let var_2398 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_2398);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_purchase(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Purchase, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Purchase::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#Purchase$CurrencyCode */ =>  {
                let var_2399 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_2399);
            }
            ,
            s if s.matches("duration") /* Duration com.amazonaws.ec2#Purchase$Duration */ =>  {
                let var_2400 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_duration(var_2400);
            }
            ,
            s if s.matches("hostIdSet") /* HostIdSet com.amazonaws.ec2#Purchase$HostIdSet */ =>  {
                let var_2401 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_response_host_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_id_set(var_2401);
            }
            ,
            s if s.matches("hostReservationId") /* HostReservationId com.amazonaws.ec2#Purchase$HostReservationId */ =>  {
                let var_2402 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_reservation_id(var_2402);
            }
            ,
            s if s.matches("hourlyPrice") /* HourlyPrice com.amazonaws.ec2#Purchase$HourlyPrice */ =>  {
                let var_2403 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hourly_price(var_2403);
            }
            ,
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#Purchase$InstanceFamily */ =>  {
                let var_2404 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_2404);
            }
            ,
            s if s.matches("paymentOption") /* PaymentOption com.amazonaws.ec2#Purchase$PaymentOption */ =>  {
                let var_2405 =
                    Some(
                        Result::<crate::model::PaymentOption, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PaymentOption::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payment_option(var_2405);
            }
            ,
            s if s.matches("upfrontPrice") /* UpfrontPrice com.amazonaws.ec2#Purchase$UpfrontPrice */ =>  {
                let var_2406 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upfront_price(var_2406);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_type_info_from_instance_requirements(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceTypeInfoFromInstanceRequirements, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceTypeInfoFromInstanceRequirements::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceTypeInfoFromInstanceRequirements$InstanceType */ =>  {
                let var_2407 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2407);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_address_history_record(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamAddressHistoryRecord, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamAddressHistoryRecord::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceOwnerId */ =>  {
                let var_2408 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_2408);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceRegion */ =>  {
                let var_2409 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_2409);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceType */ =>  {
                let var_2410 =
                    Some(
                        Result::<crate::model::IpamAddressHistoryResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamAddressHistoryResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2410);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceId */ =>  {
                let var_2411 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2411);
            }
            ,
            s if s.matches("resourceCidr") /* ResourceCidr com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceCidr */ =>  {
                let var_2412 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_cidr(var_2412);
            }
            ,
            s if s.matches("resourceName") /* ResourceName com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceName */ =>  {
                let var_2413 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_name(var_2413);
            }
            ,
            s if s.matches("resourceComplianceStatus") /* ResourceComplianceStatus com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceComplianceStatus */ =>  {
                let var_2414 =
                    Some(
                        Result::<crate::model::IpamComplianceStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamComplianceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_compliance_status(var_2414);
            }
            ,
            s if s.matches("resourceOverlapStatus") /* ResourceOverlapStatus com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceOverlapStatus */ =>  {
                let var_2415 =
                    Some(
                        Result::<crate::model::IpamOverlapStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IpamOverlapStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_overlap_status(var_2415);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#IpamAddressHistoryRecord$VpcId */ =>  {
                let var_2416 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2416);
            }
            ,
            s if s.matches("sampledStartTime") /* SampledStartTime com.amazonaws.ec2#IpamAddressHistoryRecord$SampledStartTime */ =>  {
                let var_2417 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_sampled_start_time(var_2417);
            }
            ,
            s if s.matches("sampledEndTime") /* SampledEndTime com.amazonaws.ec2#IpamAddressHistoryRecord$SampledEndTime */ =>  {
                let var_2418 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_sampled_end_time(var_2418);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_iam_instance_profile_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::LaunchTemplateIamInstanceProfileSpecification,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateIamInstanceProfileSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#LaunchTemplateIamInstanceProfileSpecification$Arn */ =>  {
                let var_2419 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_2419);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#LaunchTemplateIamInstanceProfileSpecification$Name */ =>  {
                let var_2420 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2420);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_launch_template_block_device_mapping_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LaunchTemplateBlockDeviceMapping>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateBlockDeviceMappingList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_block_device_mapping(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_instance_network_interface_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LaunchTemplateInstanceNetworkInterfaceSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_instance_network_interface_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_launch_templates_monitoring(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplatesMonitoring, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplatesMonitoring::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#LaunchTemplatesMonitoring$Enabled */ =>  {
                let var_2421 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_2421);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_placement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplatePlacement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplatePlacement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#LaunchTemplatePlacement$AvailabilityZone */ =>  {
                let var_2422 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2422);
            }
            ,
            s if s.matches("affinity") /* Affinity com.amazonaws.ec2#LaunchTemplatePlacement$Affinity */ =>  {
                let var_2423 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_affinity(var_2423);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#LaunchTemplatePlacement$GroupName */ =>  {
                let var_2424 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2424);
            }
            ,
            s if s.matches("hostId") /* HostId com.amazonaws.ec2#LaunchTemplatePlacement$HostId */ =>  {
                let var_2425 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_id(var_2425);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#LaunchTemplatePlacement$Tenancy */ =>  {
                let var_2426 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_2426);
            }
            ,
            s if s.matches("spreadDomain") /* SpreadDomain com.amazonaws.ec2#LaunchTemplatePlacement$SpreadDomain */ =>  {
                let var_2427 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spread_domain(var_2427);
            }
            ,
            s if s.matches("hostResourceGroupArn") /* HostResourceGroupArn com.amazonaws.ec2#LaunchTemplatePlacement$HostResourceGroupArn */ =>  {
                let var_2428 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_resource_group_arn(var_2428);
            }
            ,
            s if s.matches("partitionNumber") /* PartitionNumber com.amazonaws.ec2#LaunchTemplatePlacement$PartitionNumber */ =>  {
                let var_2429 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_partition_number(var_2429);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_launch_template_tag_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LaunchTemplateTagSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateTagSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_tag_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_elastic_gpu_specification_response_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ElasticGpuSpecificationResponse>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticGpuSpecificationResponseList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_gpu_specification_response(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_elastic_inference_accelerator_response_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LaunchTemplateElasticInferenceAcceleratorResponse>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateElasticInferenceAcceleratorResponseList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_elastic_inference_accelerator_response(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_launch_template_instance_market_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateInstanceMarketOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateInstanceMarketOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("marketType") /* MarketType com.amazonaws.ec2#LaunchTemplateInstanceMarketOptions$MarketType */ =>  {
                let var_2430 =
                    Some(
                        Result::<crate::model::MarketType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MarketType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_market_type(var_2430);
            }
            ,
            s if s.matches("spotOptions") /* SpotOptions com.amazonaws.ec2#LaunchTemplateInstanceMarketOptions$SpotOptions */ =>  {
                let var_2431 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_spot_market_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_options(var_2431);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_credit_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CreditSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CreditSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cpuCredits") /* CpuCredits com.amazonaws.ec2#CreditSpecification$CpuCredits */ =>  {
                let var_2432 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cpu_credits(var_2432);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_cpu_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateCpuOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateCpuOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("coreCount") /* CoreCount com.amazonaws.ec2#LaunchTemplateCpuOptions$CoreCount */ =>  {
                let var_2433 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_core_count(var_2433);
            }
            ,
            s if s.matches("threadsPerCore") /* ThreadsPerCore com.amazonaws.ec2#LaunchTemplateCpuOptions$ThreadsPerCore */ =>  {
                let var_2434 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_threads_per_core(var_2434);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_capacity_reservation_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::LaunchTemplateCapacityReservationSpecificationResponse,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder =
        crate::model::LaunchTemplateCapacityReservationSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationPreference") /* CapacityReservationPreference com.amazonaws.ec2#LaunchTemplateCapacityReservationSpecificationResponse$CapacityReservationPreference */ =>  {
                let var_2435 =
                    Some(
                        Result::<crate::model::CapacityReservationPreference, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationPreference::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_preference(var_2435);
            }
            ,
            s if s.matches("capacityReservationTarget") /* CapacityReservationTarget com.amazonaws.ec2#LaunchTemplateCapacityReservationSpecificationResponse$CapacityReservationTarget */ =>  {
                let var_2436 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_target_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_target(var_2436);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_launch_template_license_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::LaunchTemplateLicenseConfiguration>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateLicenseList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_license_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_launch_template_hibernation_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateHibernationOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateHibernationOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("configured") /* Configured com.amazonaws.ec2#LaunchTemplateHibernationOptions$Configured */ =>  {
                let var_2437 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_configured(var_2437);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_instance_metadata_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateInstanceMetadataOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateInstanceMetadataOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$State */ =>  {
                let var_2438 =
                    Some(
                        Result::<crate::model::LaunchTemplateInstanceMetadataOptionsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateInstanceMetadataOptionsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2438);
            }
            ,
            s if s.matches("httpTokens") /* HttpTokens com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$HttpTokens */ =>  {
                let var_2439 =
                    Some(
                        Result::<crate::model::LaunchTemplateHttpTokensState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateHttpTokensState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_tokens(var_2439);
            }
            ,
            s if s.matches("httpPutResponseHopLimit") /* HttpPutResponseHopLimit com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$HttpPutResponseHopLimit */ =>  {
                let var_2440 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_put_response_hop_limit(var_2440);
            }
            ,
            s if s.matches("httpEndpoint") /* HttpEndpoint com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$HttpEndpoint */ =>  {
                let var_2441 =
                    Some(
                        Result::<crate::model::LaunchTemplateInstanceMetadataEndpointState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateInstanceMetadataEndpointState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_endpoint(var_2441);
            }
            ,
            s if s.matches("httpProtocolIpv6") /* HttpProtocolIpv6 com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$HttpProtocolIpv6 */ =>  {
                let var_2442 =
                    Some(
                        Result::<crate::model::LaunchTemplateInstanceMetadataProtocolIpv6, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateInstanceMetadataProtocolIpv6::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_protocol_ipv6(var_2442);
            }
            ,
            s if s.matches("instanceMetadataTags") /* InstanceMetadataTags com.amazonaws.ec2#LaunchTemplateInstanceMetadataOptions$InstanceMetadataTags */ =>  {
                let var_2443 =
                    Some(
                        Result::<crate::model::LaunchTemplateInstanceMetadataTagsState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateInstanceMetadataTagsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_metadata_tags(var_2443);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_enclave_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateEnclaveOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateEnclaveOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#LaunchTemplateEnclaveOptions$Enabled */ =>  {
                let var_2444 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_2444);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_requirements(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceRequirements, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceRequirements::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vCpuCount") /* VCpuCount com.amazonaws.ec2#InstanceRequirements$VCpuCount */ =>  {
                let var_2445 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_v_cpu_count_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_v_cpu_count(var_2445);
            }
            ,
            s if s.matches("memoryMiB") /* MemoryMiB com.amazonaws.ec2#InstanceRequirements$MemoryMiB */ =>  {
                let var_2446 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_memory_mi_b(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_mi_b(var_2446);
            }
            ,
            s if s.matches("cpuManufacturerSet") /* CpuManufacturers com.amazonaws.ec2#InstanceRequirements$CpuManufacturers */ =>  {
                let var_2447 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_cpu_manufacturer_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu_manufacturers(var_2447);
            }
            ,
            s if s.matches("memoryGiBPerVCpu") /* MemoryGiBPerVCpu com.amazonaws.ec2#InstanceRequirements$MemoryGiBPerVCpu */ =>  {
                let var_2448 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_memory_gi_b_per_v_cpu(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_gi_b_per_v_cpu(var_2448);
            }
            ,
            s if s.matches("excludedInstanceTypeSet") /* ExcludedInstanceTypes com.amazonaws.ec2#InstanceRequirements$ExcludedInstanceTypes */ =>  {
                let var_2449 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_excluded_instance_type_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_instance_types(var_2449);
            }
            ,
            s if s.matches("instanceGenerationSet") /* InstanceGenerations com.amazonaws.ec2#InstanceRequirements$InstanceGenerations */ =>  {
                let var_2450 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_generation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_generations(var_2450);
            }
            ,
            s if s.matches("spotMaxPricePercentageOverLowestPrice") /* SpotMaxPricePercentageOverLowestPrice com.amazonaws.ec2#InstanceRequirements$SpotMaxPricePercentageOverLowestPrice */ =>  {
                let var_2451 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_spot_max_price_percentage_over_lowest_price(var_2451);
            }
            ,
            s if s.matches("onDemandMaxPricePercentageOverLowestPrice") /* OnDemandMaxPricePercentageOverLowestPrice com.amazonaws.ec2#InstanceRequirements$OnDemandMaxPricePercentageOverLowestPrice */ =>  {
                let var_2452 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_on_demand_max_price_percentage_over_lowest_price(var_2452);
            }
            ,
            s if s.matches("bareMetal") /* BareMetal com.amazonaws.ec2#InstanceRequirements$BareMetal */ =>  {
                let var_2453 =
                    Some(
                        Result::<crate::model::BareMetal, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BareMetal::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_bare_metal(var_2453);
            }
            ,
            s if s.matches("burstablePerformance") /* BurstablePerformance com.amazonaws.ec2#InstanceRequirements$BurstablePerformance */ =>  {
                let var_2454 =
                    Some(
                        Result::<crate::model::BurstablePerformance, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BurstablePerformance::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_burstable_performance(var_2454);
            }
            ,
            s if s.matches("requireHibernateSupport") /* RequireHibernateSupport com.amazonaws.ec2#InstanceRequirements$RequireHibernateSupport */ =>  {
                let var_2455 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_require_hibernate_support(var_2455);
            }
            ,
            s if s.matches("networkInterfaceCount") /* NetworkInterfaceCount com.amazonaws.ec2#InstanceRequirements$NetworkInterfaceCount */ =>  {
                let var_2456 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_count(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_count(var_2456);
            }
            ,
            s if s.matches("localStorage") /* LocalStorage com.amazonaws.ec2#InstanceRequirements$LocalStorage */ =>  {
                let var_2457 =
                    Some(
                        Result::<crate::model::LocalStorage, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LocalStorage::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_local_storage(var_2457);
            }
            ,
            s if s.matches("localStorageTypeSet") /* LocalStorageTypes com.amazonaws.ec2#InstanceRequirements$LocalStorageTypes */ =>  {
                let var_2458 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_local_storage_type_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_local_storage_types(var_2458);
            }
            ,
            s if s.matches("totalLocalStorageGB") /* TotalLocalStorageGB com.amazonaws.ec2#InstanceRequirements$TotalLocalStorageGB */ =>  {
                let var_2459 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_total_local_storage_gb(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_total_local_storage_gb(var_2459);
            }
            ,
            s if s.matches("baselineEbsBandwidthMbps") /* BaselineEbsBandwidthMbps com.amazonaws.ec2#InstanceRequirements$BaselineEbsBandwidthMbps */ =>  {
                let var_2460 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_baseline_ebs_bandwidth_mbps(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_baseline_ebs_bandwidth_mbps(var_2460);
            }
            ,
            s if s.matches("acceleratorTypeSet") /* AcceleratorTypes com.amazonaws.ec2#InstanceRequirements$AcceleratorTypes */ =>  {
                let var_2461 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_accelerator_type_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_types(var_2461);
            }
            ,
            s if s.matches("acceleratorCount") /* AcceleratorCount com.amazonaws.ec2#InstanceRequirements$AcceleratorCount */ =>  {
                let var_2462 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_accelerator_count(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_count(var_2462);
            }
            ,
            s if s.matches("acceleratorManufacturerSet") /* AcceleratorManufacturers com.amazonaws.ec2#InstanceRequirements$AcceleratorManufacturers */ =>  {
                let var_2463 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_accelerator_manufacturer_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_manufacturers(var_2463);
            }
            ,
            s if s.matches("acceleratorNameSet") /* AcceleratorNames com.amazonaws.ec2#InstanceRequirements$AcceleratorNames */ =>  {
                let var_2464 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_accelerator_name_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_names(var_2464);
            }
            ,
            s if s.matches("acceleratorTotalMemoryMiB") /* AcceleratorTotalMemoryMiB com.amazonaws.ec2#InstanceRequirements$AcceleratorTotalMemoryMiB */ =>  {
                let var_2465 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_accelerator_total_memory_mi_b(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerator_total_memory_mi_b(var_2465);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_private_dns_name_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplatePrivateDnsNameOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplatePrivateDnsNameOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostnameType") /* HostnameType com.amazonaws.ec2#LaunchTemplatePrivateDnsNameOptions$HostnameType */ =>  {
                let var_2466 =
                    Some(
                        Result::<crate::model::HostnameType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostnameType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hostname_type(var_2466);
            }
            ,
            s if s.matches("enableResourceNameDnsARecord") /* EnableResourceNameDnsARecord com.amazonaws.ec2#LaunchTemplatePrivateDnsNameOptions$EnableResourceNameDnsARecord */ =>  {
                let var_2467 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_a_record(var_2467);
            }
            ,
            s if s.matches("enableResourceNameDnsAAAARecord") /* EnableResourceNameDnsAAAARecord com.amazonaws.ec2#LaunchTemplatePrivateDnsNameOptions$EnableResourceNameDnsAAAARecord */ =>  {
                let var_2468 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_aaaa_record(var_2468);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_prefix_list_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrefixListAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrefixListAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#PrefixListAssociation$ResourceId */ =>  {
                let var_2469 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2469);
            }
            ,
            s if s.matches("resourceOwner") /* ResourceOwner com.amazonaws.ec2#PrefixListAssociation$ResourceOwner */ =>  {
                let var_2470 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner(var_2470);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_prefix_list_entry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrefixListEntry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrefixListEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#PrefixListEntry$Cidr */ =>  {
                let var_2471 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_2471);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#PrefixListEntry$Description */ =>  {
                let var_2472 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2472);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_access_scope_analysis_finding(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccessScopeAnalysisFinding, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccessScopeAnalysisFinding::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInsightsAccessScopeAnalysisId") /* NetworkInsightsAccessScopeAnalysisId com.amazonaws.ec2#AccessScopeAnalysisFinding$NetworkInsightsAccessScopeAnalysisId */ =>  {
                let var_2473 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_analysis_id(var_2473);
            }
            ,
            s if s.matches("networkInsightsAccessScopeId") /* NetworkInsightsAccessScopeId com.amazonaws.ec2#AccessScopeAnalysisFinding$NetworkInsightsAccessScopeId */ =>  {
                let var_2474 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_insights_access_scope_id(var_2474);
            }
            ,
            s if s.matches("findingId") /* FindingId com.amazonaws.ec2#AccessScopeAnalysisFinding$FindingId */ =>  {
                let var_2475 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_finding_id(var_2475);
            }
            ,
            s if s.matches("findingComponentSet") /* FindingComponents com.amazonaws.ec2#AccessScopeAnalysisFinding$FindingComponents */ =>  {
                let var_2476 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_path_component_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_finding_components(var_2476);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instance_reservation_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstanceReservationValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstanceReservationValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservationValue") /* ReservationValue com.amazonaws.ec2#ReservedInstanceReservationValue$ReservationValue */ =>  {
                let var_2477 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_reservation_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reservation_value(var_2477);
            }
            ,
            s if s.matches("reservedInstanceId") /* ReservedInstanceId com.amazonaws.ec2#ReservedInstanceReservationValue$ReservedInstanceId */ =>  {
                let var_2478 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instance_id(var_2478);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_reservation_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetReservationValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetReservationValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservationValue") /* ReservationValue com.amazonaws.ec2#TargetReservationValue$ReservationValue */ =>  {
                let var_2479 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_reservation_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reservation_value(var_2479);
            }
            ,
            s if s.matches("targetConfiguration") /* TargetConfiguration com.amazonaws.ec2#TargetReservationValue$TargetConfiguration */ =>  {
                let var_2480 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_target_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_configuration(var_2480);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_placement_score(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotPlacementScore, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotPlacementScore::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("region") /* Region com.amazonaws.ec2#SpotPlacementScore$Region */ =>  {
                let var_2481 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_2481);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#SpotPlacementScore$AvailabilityZoneId */ =>  {
                let var_2482 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_2482);
            }
            ,
            s if s.matches("score") /* Score com.amazonaws.ec2#SpotPlacementScore$Score */ =>  {
                let var_2483 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_score(var_2483);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_attachment_propagation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayAttachmentPropagation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayAttachmentPropagation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayAttachmentPropagation$TransitGatewayRouteTableId */ =>  {
                let var_2484 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_2484);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayAttachmentPropagation$State */ =>  {
                let var_2485 =
                    Some(
                        Result::<crate::model::TransitGatewayPropagationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayPropagationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2485);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_domain_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayMulticastDomainAssociation, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastDomainAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociation$TransitGatewayAttachmentId */ =>  {
                let var_2486 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2486);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociation$ResourceId */ =>  {
                let var_2487 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2487);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayMulticastDomainAssociation$ResourceType */ =>  {
                let var_2488 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2488);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#TransitGatewayMulticastDomainAssociation$ResourceOwnerId */ =>  {
                let var_2489 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_2489);
            }
            ,
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2#TransitGatewayMulticastDomainAssociation$Subnet */ =>  {
                let var_2490 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_subnet_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_2490);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_route_table_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayRouteTableAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayRouteTableAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayRouteTableAssociation$TransitGatewayAttachmentId */ =>  {
                let var_2491 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2491);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayRouteTableAssociation$ResourceId */ =>  {
                let var_2492 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2492);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayRouteTableAssociation$ResourceType */ =>  {
                let var_2493 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2493);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayRouteTableAssociation$State */ =>  {
                let var_2494 =
                    Some(
                        Result::<crate::model::TransitGatewayAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2494);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_route_table_propagation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayRouteTablePropagation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayRouteTablePropagation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayRouteTablePropagation$TransitGatewayAttachmentId */ =>  {
                let var_2495 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2495);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayRouteTablePropagation$ResourceId */ =>  {
                let var_2496 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2496);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayRouteTablePropagation$ResourceType */ =>  {
                let var_2497 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2497);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayRouteTablePropagation$State */ =>  {
                let var_2498 =
                    Some(
                        Result::<crate::model::TransitGatewayPropagationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayPropagationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2498);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vpn_connection_device_type(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpnConnectionDeviceType, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpnConnectionDeviceType::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpnConnectionDeviceTypeId") /* VpnConnectionDeviceTypeId com.amazonaws.ec2#VpnConnectionDeviceType$VpnConnectionDeviceTypeId */ =>  {
                let var_2499 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_connection_device_type_id(var_2499);
            }
            ,
            s if s.matches("vendor") /* Vendor com.amazonaws.ec2#VpnConnectionDeviceType$Vendor */ =>  {
                let var_2500 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vendor(var_2500);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#VpnConnectionDeviceType$Platform */ =>  {
                let var_2501 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2501);
            }
            ,
            s if s.matches("software") /* Software com.amazonaws.ec2#VpnConnectionDeviceType$Software */ =>  {
                let var_2502 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_software(var_2502);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_snapshot_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SnapshotDetail, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SnapshotDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#SnapshotDetail$Description */ =>  {
                let var_2503 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2503);
            }
            ,
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#SnapshotDetail$DeviceName */ =>  {
                let var_2504 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_2504);
            }
            ,
            s if s.matches("diskImageSize") /* DiskImageSize com.amazonaws.ec2#SnapshotDetail$DiskImageSize */ =>  {
                let var_2505 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disk_image_size(var_2505);
            }
            ,
            s if s.matches("format") /* Format com.amazonaws.ec2#SnapshotDetail$Format */ =>  {
                let var_2506 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_2506);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#SnapshotDetail$Progress */ =>  {
                let var_2507 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_2507);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotDetail$SnapshotId */ =>  {
                let var_2508 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2508);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#SnapshotDetail$Status */ =>  {
                let var_2509 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2509);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#SnapshotDetail$StatusMessage */ =>  {
                let var_2510 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_2510);
            }
            ,
            s if s.matches("url") /* Url com.amazonaws.ec2#SnapshotDetail$Url */ =>  {
                let var_2511 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_url(var_2511);
            }
            ,
            s if s.matches("userBucket") /* UserBucket com.amazonaws.ec2#SnapshotDetail$UserBucket */ =>  {
                let var_2512 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_user_bucket_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_bucket(var_2512);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_import_image_license_configuration_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportImageLicenseConfigurationResponse, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportImageLicenseConfigurationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("licenseConfigurationArn") /* LicenseConfigurationArn com.amazonaws.ec2#ImportImageLicenseConfigurationResponse$LicenseConfigurationArn */ =>  {
                let var_2513 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_configuration_arn(var_2513);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_import_instance_task_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportInstanceTaskDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportInstanceTaskDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#ImportInstanceTaskDetails$Description */ =>  {
                let var_2514 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2514);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ImportInstanceTaskDetails$InstanceId */ =>  {
                let var_2515 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2515);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#ImportInstanceTaskDetails$Platform */ =>  {
                let var_2516 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2516);
            }
            ,
            s if s.matches("volumes") /* Volumes com.amazonaws.ec2#ImportInstanceTaskDetails$Volumes */ =>  {
                let var_2517 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_import_instance_volume_detail_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volumes(var_2517);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_import_volume_task_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportVolumeTaskDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportVolumeTaskDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ImportVolumeTaskDetails$AvailabilityZone */ =>  {
                let var_2518 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2518);
            }
            ,
            s if s.matches("bytesConverted") /* BytesConverted com.amazonaws.ec2#ImportVolumeTaskDetails$BytesConverted */ =>  {
                let var_2519 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bytes_converted(var_2519);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ImportVolumeTaskDetails$Description */ =>  {
                let var_2520 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2520);
            }
            ,
            s if s.matches("image") /* Image com.amazonaws.ec2#ImportVolumeTaskDetails$Image */ =>  {
                let var_2521 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_disk_image_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_image(var_2521);
            }
            ,
            s if s.matches("volume") /* Volume com.amazonaws.ec2#ImportVolumeTaskDetails$Volume */ =>  {
                let var_2522 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_disk_image_volume_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volume(var_2522);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_user_bucket_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::UserBucketDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UserBucketDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("s3Bucket") /* S3Bucket com.amazonaws.ec2#UserBucketDetails$S3Bucket */ =>  {
                let var_2523 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket(var_2523);
            }
            ,
            s if s.matches("s3Key") /* S3Key com.amazonaws.ec2#UserBucketDetails$S3Key */ =>  {
                let var_2524 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_key(var_2524);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_image_recycle_bin_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImageRecycleBinInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImageRecycleBinInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ImageRecycleBinInfo$ImageId */ =>  {
                let var_2525 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_2525);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#ImageRecycleBinInfo$Name */ =>  {
                let var_2526 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2526);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ImageRecycleBinInfo$Description */ =>  {
                let var_2527 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2527);
            }
            ,
            s if s.matches("recycleBinEnterTime") /* RecycleBinEnterTime com.amazonaws.ec2#ImageRecycleBinInfo$RecycleBinEnterTime */ =>  {
                let var_2528 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_recycle_bin_enter_time(var_2528);
            }
            ,
            s if s.matches("recycleBinExitTime") /* RecycleBinExitTime com.amazonaws.ec2#ImageRecycleBinInfo$RecycleBinExitTime */ =>  {
                let var_2529 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_recycle_bin_exit_time(var_2529);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_snapshot_recycle_bin_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SnapshotRecycleBinInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SnapshotRecycleBinInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotRecycleBinInfo$SnapshotId */ =>  {
                let var_2530 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2530);
            }
            ,
            s if s.matches("recycleBinEnterTime") /* RecycleBinEnterTime com.amazonaws.ec2#SnapshotRecycleBinInfo$RecycleBinEnterTime */ =>  {
                let var_2531 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_recycle_bin_enter_time(var_2531);
            }
            ,
            s if s.matches("recycleBinExitTime") /* RecycleBinExitTime com.amazonaws.ec2#SnapshotRecycleBinInfo$RecycleBinExitTime */ =>  {
                let var_2532 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_recycle_bin_exit_time(var_2532);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#SnapshotRecycleBinInfo$Description */ =>  {
                let var_2533 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2533);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#SnapshotRecycleBinInfo$VolumeId */ =>  {
                let var_2534 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2534);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ptr_update_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PtrUpdateStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PtrUpdateStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#PtrUpdateStatus$Value */ =>  {
                let var_2535 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_2535);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#PtrUpdateStatus$Status */ =>  {
                let var_2536 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2536);
            }
            ,
            s if s.matches("reason") /* Reason com.amazonaws.ec2#PtrUpdateStatus$Reason */ =>  {
                let var_2537 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reason(var_2537);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_successful_instance_credit_specification_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SuccessfulInstanceCreditSpecificationItem, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::SuccessfulInstanceCreditSpecificationItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#SuccessfulInstanceCreditSpecificationItem$InstanceId */ =>  {
                let var_2538 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2538);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_unsuccessful_instance_credit_specification_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::UnsuccessfulInstanceCreditSpecificationItem,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UnsuccessfulInstanceCreditSpecificationItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#UnsuccessfulInstanceCreditSpecificationItem$InstanceId */ =>  {
                let var_2539 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2539);
            }
            ,
            s if s.matches("error") /* Error com.amazonaws.ec2#UnsuccessfulInstanceCreditSpecificationItem$Error */ =>  {
                let var_2540 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_unsuccessful_instance_credit_specification_item_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_2540);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_monitoring(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceMonitoring, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceMonitoring::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceMonitoring$InstanceId */ =>  {
                let var_2541 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2541);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#InstanceMonitoring$Monitoring */ =>  {
                let var_2542 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_monitoring(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_2542);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ip_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpPermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#IpPermission$FromPort */ =>  {
                let var_2543 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_2543);
            }
            ,
            s if s.matches("ipProtocol") /* IpProtocol com.amazonaws.ec2#IpPermission$IpProtocol */ =>  {
                let var_2544 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_protocol(var_2544);
            }
            ,
            s if s.matches("ipRanges") /* IpRanges com.amazonaws.ec2#IpPermission$IpRanges */ =>  {
                let var_2545 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_ranges(var_2545);
            }
            ,
            s if s.matches("ipv6Ranges") /* Ipv6Ranges com.amazonaws.ec2#IpPermission$Ipv6Ranges */ =>  {
                let var_2546 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_ranges(var_2546);
            }
            ,
            s if s.matches("prefixListIds") /* PrefixListIds com.amazonaws.ec2#IpPermission$PrefixListIds */ =>  {
                let var_2547 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_prefix_list_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list_ids(var_2547);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#IpPermission$ToPort */ =>  {
                let var_2548 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_2548);
            }
            ,
            s if s.matches("groups") /* UserIdGroupPairs com.amazonaws.ec2#IpPermission$UserIdGroupPairs */ =>  {
                let var_2549 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_user_id_group_pair_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_id_group_pairs(var_2549);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Instance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Instance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amiLaunchIndex") /* AmiLaunchIndex com.amazonaws.ec2#Instance$AmiLaunchIndex */ =>  {
                let var_2550 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ami_launch_index(var_2550);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#Instance$ImageId */ =>  {
                let var_2551 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_2551);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#Instance$InstanceId */ =>  {
                let var_2552 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2552);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#Instance$InstanceType */ =>  {
                let var_2553 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2553);
            }
            ,
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#Instance$KernelId */ =>  {
                let var_2554 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_2554);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#Instance$KeyName */ =>  {
                let var_2555 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_2555);
            }
            ,
            s if s.matches("launchTime") /* LaunchTime com.amazonaws.ec2#Instance$LaunchTime */ =>  {
                let var_2556 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_launch_time(var_2556);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#Instance$Monitoring */ =>  {
                let var_2557 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_monitoring(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_2557);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#Instance$Placement */ =>  {
                let var_2558 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_placement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_2558);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#Instance$Platform */ =>  {
                let var_2559 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_2559);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#Instance$PrivateDnsName */ =>  {
                let var_2560 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_2560);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#Instance$PrivateIpAddress */ =>  {
                let var_2561 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_2561);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2#Instance$ProductCodes */ =>  {
                let var_2562 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_2562);
            }
            ,
            s if s.matches("dnsName") /* PublicDnsName com.amazonaws.ec2#Instance$PublicDnsName */ =>  {
                let var_2563 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_2563);
            }
            ,
            s if s.matches("ipAddress") /* PublicIpAddress com.amazonaws.ec2#Instance$PublicIpAddress */ =>  {
                let var_2564 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip_address(var_2564);
            }
            ,
            s if s.matches("ramdiskId") /* RamdiskId com.amazonaws.ec2#Instance$RamdiskId */ =>  {
                let var_2565 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_2565);
            }
            ,
            s if s.matches("instanceState") /* State com.amazonaws.ec2#Instance$State */ =>  {
                let var_2566 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state(var_2566);
            }
            ,
            s if s.matches("reason") /* StateTransitionReason com.amazonaws.ec2#Instance$StateTransitionReason */ =>  {
                let var_2567 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_transition_reason(var_2567);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#Instance$SubnetId */ =>  {
                let var_2568 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2568);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#Instance$VpcId */ =>  {
                let var_2569 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2569);
            }
            ,
            s if s.matches("architecture") /* Architecture com.amazonaws.ec2#Instance$Architecture */ =>  {
                let var_2570 =
                    Some(
                        Result::<crate::model::ArchitectureValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ArchitectureValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_architecture(var_2570);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2#Instance$BlockDeviceMappings */ =>  {
                let var_2571 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_2571);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#Instance$ClientToken */ =>  {
                let var_2572 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_2572);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#Instance$EbsOptimized */ =>  {
                let var_2573 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_2573);
            }
            ,
            s if s.matches("enaSupport") /* EnaSupport com.amazonaws.ec2#Instance$EnaSupport */ =>  {
                let var_2574 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ena_support(var_2574);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#Instance$Hypervisor */ =>  {
                let var_2575 =
                    Some(
                        Result::<crate::model::HypervisorType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HypervisorType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_2575);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#Instance$IamInstanceProfile */ =>  {
                let var_2576 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_2576);
            }
            ,
            s if s.matches("instanceLifecycle") /* InstanceLifecycle com.amazonaws.ec2#Instance$InstanceLifecycle */ =>  {
                let var_2577 =
                    Some(
                        Result::<crate::model::InstanceLifecycleType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycleType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_lifecycle(var_2577);
            }
            ,
            s if s.matches("elasticGpuAssociationSet") /* ElasticGpuAssociations com.amazonaws.ec2#Instance$ElasticGpuAssociations */ =>  {
                let var_2578 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_gpu_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_associations(var_2578);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationSet") /* ElasticInferenceAcceleratorAssociations com.amazonaws.ec2#Instance$ElasticInferenceAcceleratorAssociations */ =>  {
                let var_2579 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_elastic_inference_accelerator_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_associations(var_2579);
            }
            ,
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2#Instance$NetworkInterfaces */ =>  {
                let var_2580 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_network_interface_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_2580);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#Instance$OutpostArn */ =>  {
                let var_2581 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2581);
            }
            ,
            s if s.matches("rootDeviceName") /* RootDeviceName com.amazonaws.ec2#Instance$RootDeviceName */ =>  {
                let var_2582 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_name(var_2582);
            }
            ,
            s if s.matches("rootDeviceType") /* RootDeviceType com.amazonaws.ec2#Instance$RootDeviceType */ =>  {
                let var_2583 =
                    Some(
                        Result::<crate::model::DeviceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeviceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_root_device_type(var_2583);
            }
            ,
            s if s.matches("groupSet") /* SecurityGroups com.amazonaws.ec2#Instance$SecurityGroups */ =>  {
                let var_2584 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_2584);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#Instance$SourceDestCheck */ =>  {
                let var_2585 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_2585);
            }
            ,
            s if s.matches("spotInstanceRequestId") /* SpotInstanceRequestId com.amazonaws.ec2#Instance$SpotInstanceRequestId */ =>  {
                let var_2586 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_request_id(var_2586);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2#Instance$SriovNetSupport */ =>  {
                let var_2587 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_2587);
            }
            ,
            s if s.matches("stateReason") /* StateReason com.amazonaws.ec2#Instance$StateReason */ =>  {
                let var_2588 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_state_reason(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_state_reason(var_2588);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Instance$Tags */ =>  {
                let var_2589 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2589);
            }
            ,
            s if s.matches("virtualizationType") /* VirtualizationType com.amazonaws.ec2#Instance$VirtualizationType */ =>  {
                let var_2590 =
                    Some(
                        Result::<crate::model::VirtualizationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VirtualizationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_virtualization_type(var_2590);
            }
            ,
            s if s.matches("cpuOptions") /* CpuOptions com.amazonaws.ec2#Instance$CpuOptions */ =>  {
                let var_2591 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_cpu_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu_options(var_2591);
            }
            ,
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#Instance$CapacityReservationId */ =>  {
                let var_2592 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_2592);
            }
            ,
            s if s.matches("capacityReservationSpecification") /* CapacityReservationSpecification com.amazonaws.ec2#Instance$CapacityReservationSpecification */ =>  {
                let var_2593 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_specification_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_specification(var_2593);
            }
            ,
            s if s.matches("hibernationOptions") /* HibernationOptions com.amazonaws.ec2#Instance$HibernationOptions */ =>  {
                let var_2594 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_hibernation_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hibernation_options(var_2594);
            }
            ,
            s if s.matches("licenseSet") /* Licenses com.amazonaws.ec2#Instance$Licenses */ =>  {
                let var_2595 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_license_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_licenses(var_2595);
            }
            ,
            s if s.matches("metadataOptions") /* MetadataOptions com.amazonaws.ec2#Instance$MetadataOptions */ =>  {
                let var_2596 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_metadata_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metadata_options(var_2596);
            }
            ,
            s if s.matches("enclaveOptions") /* EnclaveOptions com.amazonaws.ec2#Instance$EnclaveOptions */ =>  {
                let var_2597 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_enclave_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_enclave_options(var_2597);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2#Instance$BootMode */ =>  {
                let var_2598 =
                    Some(
                        Result::<crate::model::BootModeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BootModeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_2598);
            }
            ,
            s if s.matches("platformDetails") /* PlatformDetails com.amazonaws.ec2#Instance$PlatformDetails */ =>  {
                let var_2599 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform_details(var_2599);
            }
            ,
            s if s.matches("usageOperation") /* UsageOperation com.amazonaws.ec2#Instance$UsageOperation */ =>  {
                let var_2600 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_operation(var_2600);
            }
            ,
            s if s.matches("usageOperationUpdateTime") /* UsageOperationUpdateTime com.amazonaws.ec2#Instance$UsageOperationUpdateTime */ =>  {
                let var_2601 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_usage_operation_update_time(var_2601);
            }
            ,
            s if s.matches("privateDnsNameOptions") /* PrivateDnsNameOptions com.amazonaws.ec2#Instance$PrivateDnsNameOptions */ =>  {
                let var_2602 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_private_dns_name_options_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_dns_name_options(var_2602);
            }
            ,
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#Instance$Ipv6Address */ =>  {
                let var_2603 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_2603);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_transit_gateway_multicast_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayMulticastGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayMulticastGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupIpAddress") /* GroupIpAddress com.amazonaws.ec2#TransitGatewayMulticastGroup$GroupIpAddress */ =>  {
                let var_2604 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_ip_address(var_2604);
            }
            ,
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayMulticastGroup$TransitGatewayAttachmentId */ =>  {
                let var_2605 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2605);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#TransitGatewayMulticastGroup$SubnetId */ =>  {
                let var_2606 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2606);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayMulticastGroup$ResourceId */ =>  {
                let var_2607 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2607);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayMulticastGroup$ResourceType */ =>  {
                let var_2608 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2608);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#TransitGatewayMulticastGroup$ResourceOwnerId */ =>  {
                let var_2609 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_2609);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#TransitGatewayMulticastGroup$NetworkInterfaceId */ =>  {
                let var_2610 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_2610);
            }
            ,
            s if s.matches("groupMember") /* GroupMember com.amazonaws.ec2#TransitGatewayMulticastGroup$GroupMember */ =>  {
                let var_2611 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_group_member(var_2611);
            }
            ,
            s if s.matches("groupSource") /* GroupSource com.amazonaws.ec2#TransitGatewayMulticastGroup$GroupSource */ =>  {
                let var_2612 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_group_source(var_2612);
            }
            ,
            s if s.matches("memberType") /* MemberType com.amazonaws.ec2#TransitGatewayMulticastGroup$MemberType */ =>  {
                let var_2613 =
                    Some(
                        Result::<crate::model::MembershipType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MembershipType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_member_type(var_2613);
            }
            ,
            s if s.matches("sourceType") /* SourceType com.amazonaws.ec2#TransitGatewayMulticastGroup$SourceType */ =>  {
                let var_2614 =
                    Some(
                        Result::<crate::model::MembershipType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MembershipType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_source_type(var_2614);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_state_change(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStateChange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStateChange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("currentState") /* CurrentState com.amazonaws.ec2#InstanceStateChange$CurrentState */ =>  {
                let var_2615 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_current_state(var_2615);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#InstanceStateChange$InstanceId */ =>  {
                let var_2616 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2616);
            }
            ,
            s if s.matches("previousState") /* PreviousState com.amazonaws.ec2#InstanceStateChange$PreviousState */ =>  {
                let var_2617 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_previous_state(var_2617);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_arn_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ArnList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_path_component_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PathComponent>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PathComponentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_path_component(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_explanation_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Explanation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ExplanationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_explanation(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_alternate_path_hint_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AlternatePathHint>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AlternatePathHintList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_alternate_path_hint(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_terminate_connection_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TerminateConnectionStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TerminateConnectionStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("connectionId") /* ConnectionId com.amazonaws.ec2#TerminateConnectionStatus$ConnectionId */ =>  {
                let var_2618 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_connection_id(var_2618);
            }
            ,
            s if s.matches("previousStatus") /* PreviousStatus com.amazonaws.ec2#TerminateConnectionStatus$PreviousStatus */ =>  {
                let var_2619 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_connection_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_previous_status(var_2619);
            }
            ,
            s if s.matches("currentStatus") /* CurrentStatus com.amazonaws.ec2#TerminateConnectionStatus$CurrentStatus */ =>  {
                let var_2620 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_connection_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_current_status(var_2620);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_subnet_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SubnetAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SubnetAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#SubnetAssociation$SubnetId */ =>  {
                let var_2621 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2621);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#SubnetAssociation$State */ =>  {
                let var_2622 =
                    Some(
                        Result::<crate::model::TransitGatewayMulitcastDomainAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayMulitcastDomainAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2622);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_unsuccessful_item_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::UnsuccessfulItemError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UnsuccessfulItemError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#UnsuccessfulItemError$Code */ =>  {
                let var_2623 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2623);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#UnsuccessfulItemError$Message */ =>  {
                let var_2624 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2624);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ipv6_cidr_block_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv6CidrBlock>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6CidrBlockSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_cidr_block(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_cidr_block_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CidrBlock>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CidrBlockSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_cidr_block(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_vpc_peering_connection_options_description(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpcPeeringConnectionOptionsDescription, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::VpcPeeringConnectionOptionsDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allowDnsResolutionFromRemoteVpc") /* AllowDnsResolutionFromRemoteVpc com.amazonaws.ec2#VpcPeeringConnectionOptionsDescription$AllowDnsResolutionFromRemoteVpc */ =>  {
                let var_2625 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_dns_resolution_from_remote_vpc(var_2625);
            }
            ,
            s if s.matches("allowEgressFromLocalClassicLinkToRemoteVpc") /* AllowEgressFromLocalClassicLinkToRemoteVpc com.amazonaws.ec2#VpcPeeringConnectionOptionsDescription$AllowEgressFromLocalClassicLinkToRemoteVpc */ =>  {
                let var_2626 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_egress_from_local_classic_link_to_remote_vpc(var_2626);
            }
            ,
            s if s.matches("allowEgressFromLocalVpcToRemoteClassicLink") /* AllowEgressFromLocalVpcToRemoteClassicLink com.amazonaws.ec2#VpcPeeringConnectionOptionsDescription$AllowEgressFromLocalVpcToRemoteClassicLink */ =>  {
                let var_2627 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_egress_from_local_vpc_to_remote_classic_link(var_2627);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_event_window_time_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceEventWindowTimeRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceEventWindowTimeRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("startWeekDay") /* StartWeekDay com.amazonaws.ec2#InstanceEventWindowTimeRange$StartWeekDay */ =>  {
                let var_2628 =
                    Some(
                        Result::<crate::model::WeekDay, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::WeekDay::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_start_week_day(var_2628);
            }
            ,
            s if s.matches("startHour") /* StartHour com.amazonaws.ec2#InstanceEventWindowTimeRange$StartHour */ =>  {
                let var_2629 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Hour`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_start_hour(var_2629);
            }
            ,
            s if s.matches("endWeekDay") /* EndWeekDay com.amazonaws.ec2#InstanceEventWindowTimeRange$EndWeekDay */ =>  {
                let var_2630 =
                    Some(
                        Result::<crate::model::WeekDay, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::WeekDay::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_end_week_day(var_2630);
            }
            ,
            s if s.matches("endHour") /* EndHour com.amazonaws.ec2#InstanceEventWindowTimeRange$EndHour */ =>  {
                let var_2631 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Hour`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_end_hour(var_2631);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_id_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIdList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_dedicated_host_id_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DedicatedHostIdList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_referenced_security_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReferencedSecurityGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReferencedSecurityGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#ReferencedSecurityGroup$GroupId */ =>  {
                let var_2632 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2632);
            }
            ,
            s if s.matches("peeringStatus") /* PeeringStatus com.amazonaws.ec2#ReferencedSecurityGroup$PeeringStatus */ =>  {
                let var_2633 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peering_status(var_2633);
            }
            ,
            s if s.matches("userId") /* UserId com.amazonaws.ec2#ReferencedSecurityGroup$UserId */ =>  {
                let var_2634 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_2634);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#ReferencedSecurityGroup$VpcId */ =>  {
                let var_2635 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2635);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#ReferencedSecurityGroup$VpcPeeringConnectionId */ =>  {
                let var_2636 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_2636);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_s3_storage(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::S3Storage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::S3Storage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AWSAccessKeyId") /* AWSAccessKeyId com.amazonaws.ec2#S3Storage$AWSAccessKeyId */ =>  {
                let var_2637 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_access_key_id(var_2637);
            }
            ,
            s if s.matches("bucket") /* Bucket com.amazonaws.ec2#S3Storage$Bucket */ =>  {
                let var_2638 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_2638);
            }
            ,
            s if s.matches("prefix") /* Prefix com.amazonaws.ec2#S3Storage$Prefix */ =>  {
                let var_2639 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_2639);
            }
            ,
            s if s.matches("uploadPolicy") /* UploadPolicy com.amazonaws.ec2#S3Storage$UploadPolicy */ =>  {
                let var_2640 =
                    Some(
                        aws_smithy_types::base64::decode(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|err|aws_smithy_xml::decode::XmlError::custom(format!("invalid base64: {:?}", err))).map(aws_smithy_types::Blob::new)
                        ?
                    )
                ;
                builder = builder.set_upload_policy(var_2640);
            }
            ,
            s if s.matches("uploadPolicySignature") /* UploadPolicySignature com.amazonaws.ec2#S3Storage$UploadPolicySignature */ =>  {
                let var_2641 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_upload_policy_signature(var_2641);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cancel_capacity_reservation_fleet_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CancelCapacityReservationFleetError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CancelCapacityReservationFleetError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#CancelCapacityReservationFleetError$Code */ =>  {
                let var_2642 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2642);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#CancelCapacityReservationFleetError$Message */ =>  {
                let var_2643 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2643);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_count_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceCount>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceCountList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_count(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_price_schedule_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PriceSchedule>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PriceScheduleList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_price_schedule(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_cancel_spot_fleet_requests_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CancelSpotFleetRequestsError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CancelSpotFleetRequestsError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#CancelSpotFleetRequestsError$Code */ =>  {
                let var_2644 =
                    Some(
                        Result::<crate::model::CancelBatchErrorCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CancelBatchErrorCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2644);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#CancelSpotFleetRequestsError$Message */ =>  {
                let var_2645 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2645);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_dhcp_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DhcpConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DhcpConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("key") /* Key com.amazonaws.ec2#DhcpConfiguration$Key */ =>  {
                let var_2646 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_2646);
            }
            ,
            s if s.matches("valueSet") /* Values com.amazonaws.ec2#DhcpConfiguration$Values */ =>  {
                let var_2647 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_dhcp_configuration_value_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_values(var_2647);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_internet_gateway_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InternetGatewayAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InternetGatewayAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#InternetGatewayAttachment$State */ =>  {
                let var_2648 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2648);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#InternetGatewayAttachment$VpcId */ =>  {
                let var_2649 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_2649);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_and_overrides_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateAndOverridesResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateAndOverridesResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateSpecification") /* LaunchTemplateSpecification com.amazonaws.ec2#LaunchTemplateAndOverridesResponse$LaunchTemplateSpecification */ =>  {
                let var_2650 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_launch_template_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_specification(var_2650);
            }
            ,
            s if s.matches("overrides") /* Overrides com.amazonaws.ec2#LaunchTemplateAndOverridesResponse$Overrides */ =>  {
                let var_2651 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_launch_template_overrides(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_overrides(var_2651);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_ids_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIdsSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_ipam_operating_region(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamOperatingRegion, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamOperatingRegion::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("regionName") /* RegionName com.amazonaws.ec2#IpamOperatingRegion$RegionName */ =>  {
                let var_2652 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region_name(var_2652);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipam_resource_tag(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpamResourceTag, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpamResourceTag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("key") /* Key com.amazonaws.ec2#IpamResourceTag$Key */ =>  {
                let var_2653 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_2653);
            }
            ,
            s if s.matches("value") /* Value com.amazonaws.ec2#IpamResourceTag$Value */ =>  {
                let var_2654 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_2654);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_validation_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ValidationError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ValidationError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ValidationError$Code */ =>  {
                let var_2655 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2655);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ValidationError$Message */ =>  {
                let var_2656 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2656);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_nat_gateway_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NatGatewayAddress, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NatGatewayAddress::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationId") /* AllocationId com.amazonaws.ec2#NatGatewayAddress$AllocationId */ =>  {
                let var_2657 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_id(var_2657);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#NatGatewayAddress$NetworkInterfaceId */ =>  {
                let var_2658 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_2658);
            }
            ,
            s if s.matches("privateIp") /* PrivateIp com.amazonaws.ec2#NatGatewayAddress$PrivateIp */ =>  {
                let var_2659 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip(var_2659);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#NatGatewayAddress$PublicIp */ =>  {
                let var_2660 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_2660);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_acl_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkAclAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkAclAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkAclAssociationId") /* NetworkAclAssociationId com.amazonaws.ec2#NetworkAclAssociation$NetworkAclAssociationId */ =>  {
                let var_2661 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_acl_association_id(var_2661);
            }
            ,
            s if s.matches("networkAclId") /* NetworkAclId com.amazonaws.ec2#NetworkAclAssociation$NetworkAclId */ =>  {
                let var_2662 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_acl_id(var_2662);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#NetworkAclAssociation$SubnetId */ =>  {
                let var_2663 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2663);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_acl_entry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkAclEntry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkAclEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#NetworkAclEntry$CidrBlock */ =>  {
                let var_2664 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_2664);
            }
            ,
            s if s.matches("egress") /* Egress com.amazonaws.ec2#NetworkAclEntry$Egress */ =>  {
                let var_2665 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_egress(var_2665);
            }
            ,
            s if s.matches("icmpTypeCode") /* IcmpTypeCode com.amazonaws.ec2#NetworkAclEntry$IcmpTypeCode */ =>  {
                let var_2666 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_icmp_type_code(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_icmp_type_code(var_2666);
            }
            ,
            s if s.matches("ipv6CidrBlock") /* Ipv6CidrBlock com.amazonaws.ec2#NetworkAclEntry$Ipv6CidrBlock */ =>  {
                let var_2667 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block(var_2667);
            }
            ,
            s if s.matches("portRange") /* PortRange com.amazonaws.ec2#NetworkAclEntry$PortRange */ =>  {
                let var_2668 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_port_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_port_range(var_2668);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#NetworkAclEntry$Protocol */ =>  {
                let var_2669 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_2669);
            }
            ,
            s if s.matches("ruleAction") /* RuleAction com.amazonaws.ec2#NetworkAclEntry$RuleAction */ =>  {
                let var_2670 =
                    Some(
                        Result::<crate::model::RuleAction, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RuleAction::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_action(var_2670);
            }
            ,
            s if s.matches("ruleNumber") /* RuleNumber com.amazonaws.ec2#NetworkAclEntry$RuleNumber */ =>  {
                let var_2671 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_rule_number(var_2671);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_access_scope_path(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccessScopePath, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccessScopePath::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("source") /* Source com.amazonaws.ec2#AccessScopePath$Source */ =>  {
                let var_2672 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_path_statement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source(var_2672);
            }
            ,
            s if s.matches("destination") /* Destination com.amazonaws.ec2#AccessScopePath$Destination */ =>  {
                let var_2673 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_path_statement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_2673);
            }
            ,
            s if s.matches("throughResourceSet") /* ThroughResources com.amazonaws.ec2#AccessScopePath$ThroughResources */ =>  {
                let var_2674 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_through_resources_statement_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_through_resources(var_2674);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_interface_ipv6_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfaceIpv6Address, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfaceIpv6Address::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#NetworkInterfaceIpv6Address$Ipv6Address */ =>  {
                let var_2675 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_2675);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_interface_private_ip_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfacePrivateIpAddress, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfacePrivateIpAddress::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#NetworkInterfacePrivateIpAddress$Association */ =>  {
                let var_2676 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_2676);
            }
            ,
            s if s.matches("primary") /* Primary com.amazonaws.ec2#NetworkInterfacePrivateIpAddress$Primary */ =>  {
                let var_2677 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_primary(var_2677);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#NetworkInterfacePrivateIpAddress$PrivateDnsName */ =>  {
                let var_2678 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_2678);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#NetworkInterfacePrivateIpAddress$PrivateIpAddress */ =>  {
                let var_2679 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_2679);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_prefix_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6PrefixSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6PrefixSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Prefix") /* Ipv6Prefix com.amazonaws.ec2#Ipv6PrefixSpecification$Ipv6Prefix */ =>  {
                let var_2680 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix(var_2680);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_route_table_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RouteTableAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RouteTableAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("main") /* Main com.amazonaws.ec2#RouteTableAssociation$Main */ =>  {
                let var_2681 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_main(var_2681);
            }
            ,
            s if s.matches("routeTableAssociationId") /* RouteTableAssociationId com.amazonaws.ec2#RouteTableAssociation$RouteTableAssociationId */ =>  {
                let var_2682 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_table_association_id(var_2682);
            }
            ,
            s if s.matches("routeTableId") /* RouteTableId com.amazonaws.ec2#RouteTableAssociation$RouteTableId */ =>  {
                let var_2683 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_route_table_id(var_2683);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#RouteTableAssociation$SubnetId */ =>  {
                let var_2684 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2684);
            }
            ,
            s if s.matches("gatewayId") /* GatewayId com.amazonaws.ec2#RouteTableAssociation$GatewayId */ =>  {
                let var_2685 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_gateway_id(var_2685);
            }
            ,
            s if s.matches("associationState") /* AssociationState com.amazonaws.ec2#RouteTableAssociation$AssociationState */ =>  {
                let var_2686 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_route_table_association_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association_state(var_2686);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_propagating_vgw(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PropagatingVgw, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PropagatingVgw::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("gatewayId") /* GatewayId com.amazonaws.ec2#PropagatingVgw$GatewayId */ =>  {
                let var_2687 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_gateway_id(var_2687);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Route, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Route::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationCidrBlock") /* DestinationCidrBlock com.amazonaws.ec2#Route$DestinationCidrBlock */ =>  {
                let var_2688 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr_block(var_2688);
            }
            ,
            s if s.matches("destinationIpv6CidrBlock") /* DestinationIpv6CidrBlock com.amazonaws.ec2#Route$DestinationIpv6CidrBlock */ =>  {
                let var_2689 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_ipv6_cidr_block(var_2689);
            }
            ,
            s if s.matches("destinationPrefixListId") /* DestinationPrefixListId com.amazonaws.ec2#Route$DestinationPrefixListId */ =>  {
                let var_2690 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_prefix_list_id(var_2690);
            }
            ,
            s if s.matches("egressOnlyInternetGatewayId") /* EgressOnlyInternetGatewayId com.amazonaws.ec2#Route$EgressOnlyInternetGatewayId */ =>  {
                let var_2691 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_egress_only_internet_gateway_id(var_2691);
            }
            ,
            s if s.matches("gatewayId") /* GatewayId com.amazonaws.ec2#Route$GatewayId */ =>  {
                let var_2692 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_gateway_id(var_2692);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#Route$InstanceId */ =>  {
                let var_2693 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2693);
            }
            ,
            s if s.matches("instanceOwnerId") /* InstanceOwnerId com.amazonaws.ec2#Route$InstanceOwnerId */ =>  {
                let var_2694 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_owner_id(var_2694);
            }
            ,
            s if s.matches("natGatewayId") /* NatGatewayId com.amazonaws.ec2#Route$NatGatewayId */ =>  {
                let var_2695 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nat_gateway_id(var_2695);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#Route$TransitGatewayId */ =>  {
                let var_2696 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_2696);
            }
            ,
            s if s.matches("localGatewayId") /* LocalGatewayId com.amazonaws.ec2#Route$LocalGatewayId */ =>  {
                let var_2697 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_local_gateway_id(var_2697);
            }
            ,
            s if s.matches("carrierGatewayId") /* CarrierGatewayId com.amazonaws.ec2#Route$CarrierGatewayId */ =>  {
                let var_2698 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_gateway_id(var_2698);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#Route$NetworkInterfaceId */ =>  {
                let var_2699 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_2699);
            }
            ,
            s if s.matches("origin") /* Origin com.amazonaws.ec2#Route$Origin */ =>  {
                let var_2700 =
                    Some(
                        Result::<crate::model::RouteOrigin, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RouteOrigin::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_origin(var_2700);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Route$State */ =>  {
                let var_2701 =
                    Some(
                        Result::<crate::model::RouteState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RouteState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2701);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#Route$VpcPeeringConnectionId */ =>  {
                let var_2702 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_2702);
            }
            ,
            s if s.matches("coreNetworkArn") /* CoreNetworkArn com.amazonaws.ec2#Route$CoreNetworkArn */ =>  {
                let var_2703 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_core_network_arn(var_2703);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_inside_cidr_blocks_string_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InsideCidrBlocksStringList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_transit_gateway_attachment_bgp_configuration_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::TransitGatewayAttachmentBgpConfiguration>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TransitGatewayAttachmentBgpConfigurationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_transit_gateway_attachment_bgp_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_transit_gateway_route_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayRouteAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayRouteAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#TransitGatewayRouteAttachment$ResourceId */ =>  {
                let var_2704 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_2704);
            }
            ,
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayRouteAttachment$TransitGatewayAttachmentId */ =>  {
                let var_2705 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_2705);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TransitGatewayRouteAttachment$ResourceType */ =>  {
                let var_2706 =
                    Some(
                        Result::<crate::model::TransitGatewayAttachmentResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAttachmentResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2706);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_security_group_identifier(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SecurityGroupIdentifier, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SecurityGroupIdentifier::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#SecurityGroupIdentifier$GroupId */ =>  {
                let var_2707 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_2707);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#SecurityGroupIdentifier$GroupName */ =>  {
                let var_2708 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2708);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_dns_entry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DnsEntry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DnsEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dnsName") /* DnsName com.amazonaws.ec2#DnsEntry$DnsName */ =>  {
                let var_2709 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_2709);
            }
            ,
            s if s.matches("hostedZoneId") /* HostedZoneId com.amazonaws.ec2#DnsEntry$HostedZoneId */ =>  {
                let var_2710 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_hosted_zone_id(var_2710);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_service_type_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServiceTypeDetail, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServiceTypeDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceType") /* ServiceType com.amazonaws.ec2#ServiceTypeDetail$ServiceType */ =>  {
                let var_2711 =
                    Some(
                        Result::<crate::model::ServiceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ServiceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_service_type(var_2711);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_tunnel_options_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TunnelOption>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TunnelOptionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tunnel_option(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_vpn_static_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VpnStaticRoute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VpnStaticRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationCidrBlock") /* DestinationCidrBlock com.amazonaws.ec2#VpnStaticRoute$DestinationCidrBlock */ =>  {
                let var_2712 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr_block(var_2712);
            }
            ,
            s if s.matches("source") /* Source com.amazonaws.ec2#VpnStaticRoute$Source */ =>  {
                let var_2713 =
                    Some(
                        Result::<crate::model::VpnStaticRouteSource, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnStaticRouteSource::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_source(var_2713);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#VpnStaticRoute$State */ =>  {
                let var_2714 =
                    Some(
                        Result::<crate::model::VpnState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VpnState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2714);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_vgw_telemetry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VgwTelemetry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VgwTelemetry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("acceptedRouteCount") /* AcceptedRouteCount com.amazonaws.ec2#VgwTelemetry$AcceptedRouteCount */ =>  {
                let var_2715 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_accepted_route_count(var_2715);
            }
            ,
            s if s.matches("lastStatusChange") /* LastStatusChange com.amazonaws.ec2#VgwTelemetry$LastStatusChange */ =>  {
                let var_2716 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_status_change(var_2716);
            }
            ,
            s if s.matches("outsideIpAddress") /* OutsideIpAddress com.amazonaws.ec2#VgwTelemetry$OutsideIpAddress */ =>  {
                let var_2717 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outside_ip_address(var_2717);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#VgwTelemetry$Status */ =>  {
                let var_2718 =
                    Some(
                        Result::<crate::model::TelemetryStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TelemetryStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2718);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#VgwTelemetry$StatusMessage */ =>  {
                let var_2719 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_2719);
            }
            ,
            s if s.matches("certificateArn") /* CertificateArn com.amazonaws.ec2#VgwTelemetry$CertificateArn */ =>  {
                let var_2720 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_arn(var_2720);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_fleet_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteFleetError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteFleetError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#DeleteFleetError$Code */ =>  {
                let var_2721 =
                    Some(
                        Result::<crate::model::DeleteFleetErrorCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeleteFleetErrorCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2721);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#DeleteFleetError$Message */ =>  {
                let var_2722 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2722);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_response_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResponseError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResponseError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ResponseError$Code */ =>  {
                let var_2723 =
                    Some(
                        Result::<crate::model::LaunchTemplateErrorCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::LaunchTemplateErrorCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2723);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ResponseError$Message */ =>  {
                let var_2724 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2724);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_queued_reserved_instances_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteQueuedReservedInstancesError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteQueuedReservedInstancesError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#DeleteQueuedReservedInstancesError$Code */ =>  {
                let var_2725 =
                    Some(
                        Result::<crate::model::DeleteQueuedReservedInstancesErrorCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeleteQueuedReservedInstancesErrorCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2725);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#DeleteQueuedReservedInstancesError$Message */ =>  {
                let var_2726 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2726);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_account_attribute_value_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AccountAttributeValue>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AccountAttributeValueList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_account_attribute_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_availability_zone_message_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AvailabilityZoneMessage>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AvailabilityZoneMessageList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_availability_zone_message(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_client_vpn_connection_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnConnectionStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnConnectionStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientVpnConnectionStatus$Code */ =>  {
                let var_2727 =
                    Some(
                        Result::<crate::model::ClientVpnConnectionStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnConnectionStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2727);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientVpnConnectionStatus$Message */ =>  {
                let var_2728 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2728);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_associated_target_network_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AssociatedTargetNetwork>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AssociatedTargetNetworkSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_associated_target_network(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_client_vpn_authentication_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClientVpnAuthentication>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClientVpnAuthenticationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_client_vpn_authentication(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_connection_log_response_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ConnectionLogResponseOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ConnectionLogResponseOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Enabled") /* Enabled com.amazonaws.ec2#ConnectionLogResponseOptions$Enabled */ =>  {
                let var_2729 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_2729);
            }
            ,
            s if s.matches("CloudwatchLogGroup") /* CloudwatchLogGroup com.amazonaws.ec2#ConnectionLogResponseOptions$CloudwatchLogGroup */ =>  {
                let var_2730 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cloudwatch_log_group(var_2730);
            }
            ,
            s if s.matches("CloudwatchLogStream") /* CloudwatchLogStream com.amazonaws.ec2#ConnectionLogResponseOptions$CloudwatchLogStream */ =>  {
                let var_2731 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cloudwatch_log_stream(var_2731);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_connect_response_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientConnectResponseOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientConnectResponseOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#ClientConnectResponseOptions$Enabled */ =>  {
                let var_2732 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_2732);
            }
            ,
            s if s.matches("lambdaFunctionArn") /* LambdaFunctionArn com.amazonaws.ec2#ClientConnectResponseOptions$LambdaFunctionArn */ =>  {
                let var_2733 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_lambda_function_arn(var_2733);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ClientConnectResponseOptions$Status */ =>  {
                let var_2734 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_client_vpn_endpoint_attribute_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_2734);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_login_banner_response_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientLoginBannerResponseOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientLoginBannerResponseOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#ClientLoginBannerResponseOptions$Enabled */ =>  {
                let var_2735 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_2735);
            }
            ,
            s if s.matches("bannerText") /* BannerText com.amazonaws.ec2#ClientLoginBannerResponseOptions$BannerText */ =>  {
                let var_2736 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_banner_text(var_2736);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_elastic_gpu_health(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ElasticGpuHealth, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ElasticGpuHealth::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("status") /* Status com.amazonaws.ec2#ElasticGpuHealth$Status */ =>  {
                let var_2737 =
                    Some(
                        Result::<crate::model::ElasticGpuStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ElasticGpuStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2737);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_event_information(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EventInformation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EventInformation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("eventDescription") /* EventDescription com.amazonaws.ec2#EventInformation$EventDescription */ =>  {
                let var_2738 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_description(var_2738);
            }
            ,
            s if s.matches("eventSubType") /* EventSubType com.amazonaws.ec2#EventInformation$EventSubType */ =>  {
                let var_2739 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_sub_type(var_2739);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#EventInformation$InstanceId */ =>  {
                let var_2740 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2740);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_fleet_launch_template_config_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FleetLaunchTemplateConfig>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FleetLaunchTemplateConfigList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fleet_launch_template_config(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_target_capacity_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetCapacitySpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetCapacitySpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("totalTargetCapacity") /* TotalTargetCapacity com.amazonaws.ec2#TargetCapacitySpecification$TotalTargetCapacity */ =>  {
                let var_2741 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_target_capacity(var_2741);
            }
            ,
            s if s.matches("onDemandTargetCapacity") /* OnDemandTargetCapacity com.amazonaws.ec2#TargetCapacitySpecification$OnDemandTargetCapacity */ =>  {
                let var_2742 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_on_demand_target_capacity(var_2742);
            }
            ,
            s if s.matches("spotTargetCapacity") /* SpotTargetCapacity com.amazonaws.ec2#TargetCapacitySpecification$SpotTargetCapacity */ =>  {
                let var_2743 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_spot_target_capacity(var_2743);
            }
            ,
            s if s.matches("defaultTargetCapacityType") /* DefaultTargetCapacityType com.amazonaws.ec2#TargetCapacitySpecification$DefaultTargetCapacityType */ =>  {
                let var_2744 =
                    Some(
                        Result::<crate::model::DefaultTargetCapacityType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DefaultTargetCapacityType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_default_target_capacity_type(var_2744);
            }
            ,
            s if s.matches("targetCapacityUnitType") /* TargetCapacityUnitType com.amazonaws.ec2#TargetCapacitySpecification$TargetCapacityUnitType */ =>  {
                let var_2745 =
                    Some(
                        Result::<crate::model::TargetCapacityUnitType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TargetCapacityUnitType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_target_capacity_unit_type(var_2745);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationStrategy") /* AllocationStrategy com.amazonaws.ec2#SpotOptions$AllocationStrategy */ =>  {
                let var_2746 =
                    Some(
                        Result::<crate::model::SpotAllocationStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SpotAllocationStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_strategy(var_2746);
            }
            ,
            s if s.matches("maintenanceStrategies") /* MaintenanceStrategies com.amazonaws.ec2#SpotOptions$MaintenanceStrategies */ =>  {
                let var_2747 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_spot_maintenance_strategies(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_maintenance_strategies(var_2747);
            }
            ,
            s if s.matches("instanceInterruptionBehavior") /* InstanceInterruptionBehavior com.amazonaws.ec2#SpotOptions$InstanceInterruptionBehavior */ =>  {
                let var_2748 =
                    Some(
                        Result::<crate::model::SpotInstanceInterruptionBehavior, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SpotInstanceInterruptionBehavior::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_interruption_behavior(var_2748);
            }
            ,
            s if s.matches("instancePoolsToUseCount") /* InstancePoolsToUseCount com.amazonaws.ec2#SpotOptions$InstancePoolsToUseCount */ =>  {
                let var_2749 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_pools_to_use_count(var_2749);
            }
            ,
            s if s.matches("singleInstanceType") /* SingleInstanceType com.amazonaws.ec2#SpotOptions$SingleInstanceType */ =>  {
                let var_2750 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_single_instance_type(var_2750);
            }
            ,
            s if s.matches("singleAvailabilityZone") /* SingleAvailabilityZone com.amazonaws.ec2#SpotOptions$SingleAvailabilityZone */ =>  {
                let var_2751 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_single_availability_zone(var_2751);
            }
            ,
            s if s.matches("minTargetCapacity") /* MinTargetCapacity com.amazonaws.ec2#SpotOptions$MinTargetCapacity */ =>  {
                let var_2752 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_target_capacity(var_2752);
            }
            ,
            s if s.matches("maxTotalPrice") /* MaxTotalPrice com.amazonaws.ec2#SpotOptions$MaxTotalPrice */ =>  {
                let var_2753 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_max_total_price(var_2753);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_on_demand_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OnDemandOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OnDemandOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationStrategy") /* AllocationStrategy com.amazonaws.ec2#OnDemandOptions$AllocationStrategy */ =>  {
                let var_2754 =
                    Some(
                        Result::<crate::model::FleetOnDemandAllocationStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetOnDemandAllocationStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_strategy(var_2754);
            }
            ,
            s if s.matches("capacityReservationOptions") /* CapacityReservationOptions com.amazonaws.ec2#OnDemandOptions$CapacityReservationOptions */ =>  {
                let var_2755 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_options(var_2755);
            }
            ,
            s if s.matches("singleInstanceType") /* SingleInstanceType com.amazonaws.ec2#OnDemandOptions$SingleInstanceType */ =>  {
                let var_2756 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_single_instance_type(var_2756);
            }
            ,
            s if s.matches("singleAvailabilityZone") /* SingleAvailabilityZone com.amazonaws.ec2#OnDemandOptions$SingleAvailabilityZone */ =>  {
                let var_2757 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_single_availability_zone(var_2757);
            }
            ,
            s if s.matches("minTargetCapacity") /* MinTargetCapacity com.amazonaws.ec2#OnDemandOptions$MinTargetCapacity */ =>  {
                let var_2758 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_target_capacity(var_2758);
            }
            ,
            s if s.matches("maxTotalPrice") /* MaxTotalPrice com.amazonaws.ec2#OnDemandOptions$MaxTotalPrice */ =>  {
                let var_2759 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_max_total_price(var_2759);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_describe_fleets_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DescribeFleetError>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DescribeFleetsErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_describe_fleet_error(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_describe_fleets_instances_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DescribeFleetsInstances>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DescribeFleetsInstancesSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_describe_fleets_instances(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_destination_options_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DestinationOptionsResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DestinationOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fileFormat") /* FileFormat com.amazonaws.ec2#DestinationOptionsResponse$FileFormat */ =>  {
                let var_2760 =
                    Some(
                        Result::<crate::model::DestinationFileFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DestinationFileFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_file_format(var_2760);
            }
            ,
            s if s.matches("hiveCompatiblePartitions") /* HiveCompatiblePartitions com.amazonaws.ec2#DestinationOptionsResponse$HiveCompatiblePartitions */ =>  {
                let var_2761 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_hive_compatible_partitions(var_2761);
            }
            ,
            s if s.matches("perHourPartition") /* PerHourPartition com.amazonaws.ec2#DestinationOptionsResponse$PerHourPartition */ =>  {
                let var_2762 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_per_hour_partition(var_2762);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_load_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LoadPermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LoadPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("userId") /* UserId com.amazonaws.ec2#LoadPermission$UserId */ =>  {
                let var_2763 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_2763);
            }
            ,
            s if s.matches("group") /* Group com.amazonaws.ec2#LoadPermission$Group */ =>  {
                let var_2764 =
                    Some(
                        Result::<crate::model::PermissionGroup, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PermissionGroup::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_group(var_2764);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_pci_id(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PciId, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PciId::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DeviceId") /* DeviceId com.amazonaws.ec2#PciId$DeviceId */ =>  {
                let var_2765 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_id(var_2765);
            }
            ,
            s if s.matches("VendorId") /* VendorId com.amazonaws.ec2#PciId$VendorId */ =>  {
                let var_2766 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vendor_id(var_2766);
            }
            ,
            s if s.matches("SubsystemId") /* SubsystemId com.amazonaws.ec2#PciId$SubsystemId */ =>  {
                let var_2767 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subsystem_id(var_2767);
            }
            ,
            s if s.matches("SubsystemVendorId") /* SubsystemVendorId com.amazonaws.ec2#PciId$SubsystemVendorId */ =>  {
                let var_2768 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subsystem_vendor_id(var_2768);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fpga_image_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaImageState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaImageState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#FpgaImageState$Code */ =>  {
                let var_2769 =
                    Some(
                        Result::<crate::model::FpgaImageStateCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FpgaImageStateCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2769);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#FpgaImageState$Message */ =>  {
                let var_2770 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2770);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_response_host_id_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ResponseHostIdSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_available_capacity(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AvailableCapacity, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AvailableCapacity::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availableInstanceCapacity") /* AvailableInstanceCapacity com.amazonaws.ec2#AvailableCapacity$AvailableInstanceCapacity */ =>  {
                let var_2771 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_available_instance_capacity_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_available_instance_capacity(var_2771);
            }
            ,
            s if s.matches("availableVCpus") /* AvailableVCpus com.amazonaws.ec2#AvailableCapacity$AvailableVCpus */ =>  {
                let var_2772 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_v_cpus(var_2772);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_host_properties(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostProperties, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostProperties::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cores") /* Cores com.amazonaws.ec2#HostProperties$Cores */ =>  {
                let var_2773 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_cores(var_2773);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#HostProperties$InstanceType */ =>  {
                let var_2774 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2774);
            }
            ,
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#HostProperties$InstanceFamily */ =>  {
                let var_2775 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_2775);
            }
            ,
            s if s.matches("sockets") /* Sockets com.amazonaws.ec2#HostProperties$Sockets */ =>  {
                let var_2776 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_sockets(var_2776);
            }
            ,
            s if s.matches("totalVCpus") /* TotalVCpus com.amazonaws.ec2#HostProperties$TotalVCpus */ =>  {
                let var_2777 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_v_cpus(var_2777);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_host_instance_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::HostInstance>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#HostInstanceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_host_instance(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_ebs_block_device(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EbsBlockDevice, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EbsBlockDevice::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#EbsBlockDevice$DeleteOnTermination */ =>  {
                let var_2778 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_2778);
            }
            ,
            s if s.matches("iops") /* Iops com.amazonaws.ec2#EbsBlockDevice$Iops */ =>  {
                let var_2779 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_2779);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#EbsBlockDevice$SnapshotId */ =>  {
                let var_2780 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2780);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2#EbsBlockDevice$VolumeSize */ =>  {
                let var_2781 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_2781);
            }
            ,
            s if s.matches("volumeType") /* VolumeType com.amazonaws.ec2#EbsBlockDevice$VolumeType */ =>  {
                let var_2782 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_type(var_2782);
            }
            ,
            s if s.matches("KmsKeyId") /* KmsKeyId com.amazonaws.ec2#EbsBlockDevice$KmsKeyId */ =>  {
                let var_2783 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_2783);
            }
            ,
            s if s.matches("throughput") /* Throughput com.amazonaws.ec2#EbsBlockDevice$Throughput */ =>  {
                let var_2784 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_throughput(var_2784);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#EbsBlockDevice$OutpostArn */ =>  {
                let var_2785 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_2785);
            }
            ,
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#EbsBlockDevice$Encrypted */ =>  {
                let var_2786 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_2786);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_state_reason(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StateReason, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StateReason::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#StateReason$Code */ =>  {
                let var_2787 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2787);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#StateReason$Message */ =>  {
                let var_2788 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2788);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ebs_instance_block_device(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EbsInstanceBlockDevice, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EbsInstanceBlockDevice::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#EbsInstanceBlockDevice$AttachTime */ =>  {
                let var_2789 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_2789);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#EbsInstanceBlockDevice$DeleteOnTermination */ =>  {
                let var_2790 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_2790);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#EbsInstanceBlockDevice$Status */ =>  {
                let var_2791 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2791);
            }
            ,
            s if s.matches("volumeId") /* VolumeId com.amazonaws.ec2#EbsInstanceBlockDevice$VolumeId */ =>  {
                let var_2792 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_id(var_2792);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_status_event_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceStatusEvent>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceStatusEventList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_status_event(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_state(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceState, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceState::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#InstanceState$Code */ =>  {
                let var_2793 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_code(var_2793);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#InstanceState$Name */ =>  {
                let var_2794 =
                    Some(
                        Result::<crate::model::InstanceStateName, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceStateName::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2794);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_status_summary(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStatusSummary, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStatusSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("details") /* Details com.amazonaws.ec2#InstanceStatusSummary$Details */ =>  {
                let var_2795 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_status_details_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_details(var_2795);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceStatusSummary$Status */ =>  {
                let var_2796 =
                    Some(
                        Result::<crate::model::SummaryStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SummaryStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2796);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_usage_class_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UsageClassType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UsageClassTypeList$member */ =>  {
                out.push(
                    Result::<crate::model::UsageClassType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::UsageClassType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_root_device_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RootDeviceType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RootDeviceTypeList$member */ =>  {
                out.push(
                    Result::<crate::model::RootDeviceType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::RootDeviceType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_virtualization_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VirtualizationType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VirtualizationTypeList$member */ =>  {
                out.push(
                    Result::<crate::model::VirtualizationType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::VirtualizationType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_processor_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ProcessorInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ProcessorInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("supportedArchitectures") /* SupportedArchitectures com.amazonaws.ec2#ProcessorInfo$SupportedArchitectures */ =>  {
                let var_2797 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_architecture_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_architectures(var_2797);
            }
            ,
            s if s.matches("sustainedClockSpeedInGhz") /* SustainedClockSpeedInGhz com.amazonaws.ec2#ProcessorInfo$SustainedClockSpeedInGhz */ =>  {
                let var_2798 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#ProcessorSustainedClockSpeed`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_sustained_clock_speed_in_ghz(var_2798);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_v_cpu_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VCpuInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VCpuInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("defaultVCpus") /* DefaultVCpus com.amazonaws.ec2#VCpuInfo$DefaultVCpus */ =>  {
                let var_2799 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#VCpuCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_v_cpus(var_2799);
            }
            ,
            s if s.matches("defaultCores") /* DefaultCores com.amazonaws.ec2#VCpuInfo$DefaultCores */ =>  {
                let var_2800 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#CoreCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_cores(var_2800);
            }
            ,
            s if s.matches("defaultThreadsPerCore") /* DefaultThreadsPerCore com.amazonaws.ec2#VCpuInfo$DefaultThreadsPerCore */ =>  {
                let var_2801 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#ThreadsPerCore`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_threads_per_core(var_2801);
            }
            ,
            s if s.matches("validCores") /* ValidCores com.amazonaws.ec2#VCpuInfo$ValidCores */ =>  {
                let var_2802 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_core_count_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_valid_cores(var_2802);
            }
            ,
            s if s.matches("validThreadsPerCore") /* ValidThreadsPerCore com.amazonaws.ec2#VCpuInfo$ValidThreadsPerCore */ =>  {
                let var_2803 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_threads_per_core_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_valid_threads_per_core(var_2803);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_memory_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MemoryInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MemoryInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sizeInMiB") /* SizeInMiB com.amazonaws.ec2#MemoryInfo$SizeInMiB */ =>  {
                let var_2804 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#MemorySize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size_in_mi_b(var_2804);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_storage_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStorageInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStorageInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("totalSizeInGB") /* TotalSizeInGB com.amazonaws.ec2#InstanceStorageInfo$TotalSizeInGB */ =>  {
                let var_2805 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#DiskSize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_size_in_gb(var_2805);
            }
            ,
            s if s.matches("disks") /* Disks com.amazonaws.ec2#InstanceStorageInfo$Disks */ =>  {
                let var_2806 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_disk_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_disks(var_2806);
            }
            ,
            s if s.matches("nvmeSupport") /* NvmeSupport com.amazonaws.ec2#InstanceStorageInfo$NvmeSupport */ =>  {
                let var_2807 =
                    Some(
                        Result::<crate::model::EphemeralNvmeSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EphemeralNvmeSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_nvme_support(var_2807);
            }
            ,
            s if s.matches("encryptionSupport") /* EncryptionSupport com.amazonaws.ec2#InstanceStorageInfo$EncryptionSupport */ =>  {
                let var_2808 =
                    Some(
                        Result::<crate::model::InstanceStorageEncryptionSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceStorageEncryptionSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_encryption_support(var_2808);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ebs_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EbsInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EbsInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ebsOptimizedSupport") /* EbsOptimizedSupport com.amazonaws.ec2#EbsInfo$EbsOptimizedSupport */ =>  {
                let var_2809 =
                    Some(
                        Result::<crate::model::EbsOptimizedSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EbsOptimizedSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized_support(var_2809);
            }
            ,
            s if s.matches("encryptionSupport") /* EncryptionSupport com.amazonaws.ec2#EbsInfo$EncryptionSupport */ =>  {
                let var_2810 =
                    Some(
                        Result::<crate::model::EbsEncryptionSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EbsEncryptionSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_encryption_support(var_2810);
            }
            ,
            s if s.matches("ebsOptimizedInfo") /* EbsOptimizedInfo com.amazonaws.ec2#EbsInfo$EbsOptimizedInfo */ =>  {
                let var_2811 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ebs_optimized_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized_info(var_2811);
            }
            ,
            s if s.matches("nvmeSupport") /* NvmeSupport com.amazonaws.ec2#EbsInfo$NvmeSupport */ =>  {
                let var_2812 =
                    Some(
                        Result::<crate::model::EbsNvmeSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EbsNvmeSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_nvme_support(var_2812);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkPerformance") /* NetworkPerformance com.amazonaws.ec2#NetworkInfo$NetworkPerformance */ =>  {
                let var_2813 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_performance(var_2813);
            }
            ,
            s if s.matches("maximumNetworkInterfaces") /* MaximumNetworkInterfaces com.amazonaws.ec2#NetworkInfo$MaximumNetworkInterfaces */ =>  {
                let var_2814 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaxNetworkInterfaces`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_network_interfaces(var_2814);
            }
            ,
            s if s.matches("maximumNetworkCards") /* MaximumNetworkCards com.amazonaws.ec2#NetworkInfo$MaximumNetworkCards */ =>  {
                let var_2815 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaximumNetworkCards`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_network_cards(var_2815);
            }
            ,
            s if s.matches("defaultNetworkCardIndex") /* DefaultNetworkCardIndex com.amazonaws.ec2#NetworkInfo$DefaultNetworkCardIndex */ =>  {
                let var_2816 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#DefaultNetworkCardIndex`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_default_network_card_index(var_2816);
            }
            ,
            s if s.matches("networkCards") /* NetworkCards com.amazonaws.ec2#NetworkInfo$NetworkCards */ =>  {
                let var_2817 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_network_card_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_cards(var_2817);
            }
            ,
            s if s.matches("ipv4AddressesPerInterface") /* Ipv4AddressesPerInterface com.amazonaws.ec2#NetworkInfo$Ipv4AddressesPerInterface */ =>  {
                let var_2818 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaxIpv4AddrPerInterface`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv4_addresses_per_interface(var_2818);
            }
            ,
            s if s.matches("ipv6AddressesPerInterface") /* Ipv6AddressesPerInterface com.amazonaws.ec2#NetworkInfo$Ipv6AddressesPerInterface */ =>  {
                let var_2819 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaxIpv6AddrPerInterface`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses_per_interface(var_2819);
            }
            ,
            s if s.matches("ipv6Supported") /* Ipv6Supported com.amazonaws.ec2#NetworkInfo$Ipv6Supported */ =>  {
                let var_2820 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Ipv6Flag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_supported(var_2820);
            }
            ,
            s if s.matches("enaSupport") /* EnaSupport com.amazonaws.ec2#NetworkInfo$EnaSupport */ =>  {
                let var_2821 =
                    Some(
                        Result::<crate::model::EnaSupport, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::EnaSupport::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ena_support(var_2821);
            }
            ,
            s if s.matches("efaSupported") /* EfaSupported com.amazonaws.ec2#NetworkInfo$EfaSupported */ =>  {
                let var_2822 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#EfaSupportedFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_efa_supported(var_2822);
            }
            ,
            s if s.matches("efaInfo") /* EfaInfo com.amazonaws.ec2#NetworkInfo$EfaInfo */ =>  {
                let var_2823 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_efa_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_efa_info(var_2823);
            }
            ,
            s if s.matches("encryptionInTransitSupported") /* EncryptionInTransitSupported com.amazonaws.ec2#NetworkInfo$EncryptionInTransitSupported */ =>  {
                let var_2824 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#EncryptionInTransitSupported`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encryption_in_transit_supported(var_2824);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_gpu_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GpuInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GpuInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("gpus") /* Gpus com.amazonaws.ec2#GpuInfo$Gpus */ =>  {
                let var_2825 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_gpu_device_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gpus(var_2825);
            }
            ,
            s if s.matches("totalGpuMemoryInMiB") /* TotalGpuMemoryInMiB com.amazonaws.ec2#GpuInfo$TotalGpuMemoryInMiB */ =>  {
                let var_2826 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#totalGpuMemory`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_gpu_memory_in_mi_b(var_2826);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fpga_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fpgas") /* Fpgas com.amazonaws.ec2#FpgaInfo$Fpgas */ =>  {
                let var_2827 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fpga_device_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpgas(var_2827);
            }
            ,
            s if s.matches("totalFpgaMemoryInMiB") /* TotalFpgaMemoryInMiB com.amazonaws.ec2#FpgaInfo$TotalFpgaMemoryInMiB */ =>  {
                let var_2828 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#totalFpgaMemory`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_fpga_memory_in_mi_b(var_2828);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_placement_group_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PlacementGroupInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PlacementGroupInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("supportedStrategies") /* SupportedStrategies com.amazonaws.ec2#PlacementGroupInfo$SupportedStrategies */ =>  {
                let var_2829 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_placement_group_strategy_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_strategies(var_2829);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inference_accelerator_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InferenceAcceleratorInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InferenceAcceleratorInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("accelerators") /* Accelerators com.amazonaws.ec2#InferenceAcceleratorInfo$Accelerators */ =>  {
                let var_2830 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_inference_device_info_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accelerators(var_2830);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_boot_mode_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::BootModeType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#BootModeTypeList$member */ =>  {
                out.push(
                    Result::<crate::model::BootModeType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::BootModeType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_pool_cidr_blocks_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PoolCidrBlock>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PoolCidrBlocksSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_pool_cidr_block(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_local_gateway_virtual_interface_id_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalGatewayVirtualInterfaceIdSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_public_ipv4_pool_range_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PublicIpv4PoolRange>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PublicIpv4PoolRangeSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_public_ipv4_pool_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_recurring_charges_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RecurringCharge>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#RecurringChargesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_recurring_charge(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_instances_modification_result_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ReservedInstancesModificationResult>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedInstancesModificationResultList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances_modification_result(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_reserved_intances_ids(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ReservedInstancesId>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ReservedIntancesIds$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_reserved_instances_id(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_pricing_details_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PricingDetail>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PricingDetailsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_pricing_detail(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_scheduled_instance_recurrence(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ScheduledInstanceRecurrence, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ScheduledInstanceRecurrence::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("frequency") /* Frequency com.amazonaws.ec2#ScheduledInstanceRecurrence$Frequency */ =>  {
                let var_2831 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_frequency(var_2831);
            }
            ,
            s if s.matches("interval") /* Interval com.amazonaws.ec2#ScheduledInstanceRecurrence$Interval */ =>  {
                let var_2832 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_interval(var_2832);
            }
            ,
            s if s.matches("occurrenceDaySet") /* OccurrenceDaySet com.amazonaws.ec2#ScheduledInstanceRecurrence$OccurrenceDaySet */ =>  {
                let var_2833 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_occurrence_day_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_occurrence_day_set(var_2833);
            }
            ,
            s if s.matches("occurrenceRelativeToEnd") /* OccurrenceRelativeToEnd com.amazonaws.ec2#ScheduledInstanceRecurrence$OccurrenceRelativeToEnd */ =>  {
                let var_2834 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_occurrence_relative_to_end(var_2834);
            }
            ,
            s if s.matches("occurrenceUnit") /* OccurrenceUnit com.amazonaws.ec2#ScheduledInstanceRecurrence$OccurrenceUnit */ =>  {
                let var_2835 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_occurrence_unit(var_2835);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_fleet_request_config_data(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotFleetRequestConfigData, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotFleetRequestConfigData::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("allocationStrategy") /* AllocationStrategy com.amazonaws.ec2#SpotFleetRequestConfigData$AllocationStrategy */ =>  {
                let var_2836 =
                    Some(
                        Result::<crate::model::AllocationStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AllocationStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_allocation_strategy(var_2836);
            }
            ,
            s if s.matches("onDemandAllocationStrategy") /* OnDemandAllocationStrategy com.amazonaws.ec2#SpotFleetRequestConfigData$OnDemandAllocationStrategy */ =>  {
                let var_2837 =
                    Some(
                        Result::<crate::model::OnDemandAllocationStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OnDemandAllocationStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_on_demand_allocation_strategy(var_2837);
            }
            ,
            s if s.matches("spotMaintenanceStrategies") /* SpotMaintenanceStrategies com.amazonaws.ec2#SpotFleetRequestConfigData$SpotMaintenanceStrategies */ =>  {
                let var_2838 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_maintenance_strategies(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_spot_maintenance_strategies(var_2838);
            }
            ,
            s if s.matches("clientToken") /* ClientToken com.amazonaws.ec2#SpotFleetRequestConfigData$ClientToken */ =>  {
                let var_2839 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_token(var_2839);
            }
            ,
            s if s.matches("excessCapacityTerminationPolicy") /* ExcessCapacityTerminationPolicy com.amazonaws.ec2#SpotFleetRequestConfigData$ExcessCapacityTerminationPolicy */ =>  {
                let var_2840 =
                    Some(
                        Result::<crate::model::ExcessCapacityTerminationPolicy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExcessCapacityTerminationPolicy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_excess_capacity_termination_policy(var_2840);
            }
            ,
            s if s.matches("fulfilledCapacity") /* FulfilledCapacity com.amazonaws.ec2#SpotFleetRequestConfigData$FulfilledCapacity */ =>  {
                let var_2841 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_fulfilled_capacity(var_2841);
            }
            ,
            s if s.matches("onDemandFulfilledCapacity") /* OnDemandFulfilledCapacity com.amazonaws.ec2#SpotFleetRequestConfigData$OnDemandFulfilledCapacity */ =>  {
                let var_2842 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_on_demand_fulfilled_capacity(var_2842);
            }
            ,
            s if s.matches("iamFleetRole") /* IamFleetRole com.amazonaws.ec2#SpotFleetRequestConfigData$IamFleetRole */ =>  {
                let var_2843 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_iam_fleet_role(var_2843);
            }
            ,
            s if s.matches("launchSpecifications") /* LaunchSpecifications com.amazonaws.ec2#SpotFleetRequestConfigData$LaunchSpecifications */ =>  {
                let var_2844 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_specs_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_specifications(var_2844);
            }
            ,
            s if s.matches("launchTemplateConfigs") /* LaunchTemplateConfigs com.amazonaws.ec2#SpotFleetRequestConfigData$LaunchTemplateConfigs */ =>  {
                let var_2845 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_config_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_configs(var_2845);
            }
            ,
            s if s.matches("spotPrice") /* SpotPrice com.amazonaws.ec2#SpotFleetRequestConfigData$SpotPrice */ =>  {
                let var_2846 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_price(var_2846);
            }
            ,
            s if s.matches("targetCapacity") /* TargetCapacity com.amazonaws.ec2#SpotFleetRequestConfigData$TargetCapacity */ =>  {
                let var_2847 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_target_capacity(var_2847);
            }
            ,
            s if s.matches("onDemandTargetCapacity") /* OnDemandTargetCapacity com.amazonaws.ec2#SpotFleetRequestConfigData$OnDemandTargetCapacity */ =>  {
                let var_2848 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_on_demand_target_capacity(var_2848);
            }
            ,
            s if s.matches("onDemandMaxTotalPrice") /* OnDemandMaxTotalPrice com.amazonaws.ec2#SpotFleetRequestConfigData$OnDemandMaxTotalPrice */ =>  {
                let var_2849 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_on_demand_max_total_price(var_2849);
            }
            ,
            s if s.matches("spotMaxTotalPrice") /* SpotMaxTotalPrice com.amazonaws.ec2#SpotFleetRequestConfigData$SpotMaxTotalPrice */ =>  {
                let var_2850 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_max_total_price(var_2850);
            }
            ,
            s if s.matches("terminateInstancesWithExpiration") /* TerminateInstancesWithExpiration com.amazonaws.ec2#SpotFleetRequestConfigData$TerminateInstancesWithExpiration */ =>  {
                let var_2851 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_terminate_instances_with_expiration(var_2851);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#SpotFleetRequestConfigData$Type */ =>  {
                let var_2852 =
                    Some(
                        Result::<crate::model::FleetType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_2852);
            }
            ,
            s if s.matches("validFrom") /* ValidFrom com.amazonaws.ec2#SpotFleetRequestConfigData$ValidFrom */ =>  {
                let var_2853 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_from(var_2853);
            }
            ,
            s if s.matches("validUntil") /* ValidUntil com.amazonaws.ec2#SpotFleetRequestConfigData$ValidUntil */ =>  {
                let var_2854 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_until(var_2854);
            }
            ,
            s if s.matches("replaceUnhealthyInstances") /* ReplaceUnhealthyInstances com.amazonaws.ec2#SpotFleetRequestConfigData$ReplaceUnhealthyInstances */ =>  {
                let var_2855 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_replace_unhealthy_instances(var_2855);
            }
            ,
            s if s.matches("instanceInterruptionBehavior") /* InstanceInterruptionBehavior com.amazonaws.ec2#SpotFleetRequestConfigData$InstanceInterruptionBehavior */ =>  {
                let var_2856 =
                    Some(
                        Result::<crate::model::InstanceInterruptionBehavior, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceInterruptionBehavior::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_interruption_behavior(var_2856);
            }
            ,
            s if s.matches("loadBalancersConfig") /* LoadBalancersConfig com.amazonaws.ec2#SpotFleetRequestConfigData$LoadBalancersConfig */ =>  {
                let var_2857 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_load_balancers_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancers_config(var_2857);
            }
            ,
            s if s.matches("instancePoolsToUseCount") /* InstancePoolsToUseCount com.amazonaws.ec2#SpotFleetRequestConfigData$InstancePoolsToUseCount */ =>  {
                let var_2858 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_pools_to_use_count(var_2858);
            }
            ,
            s if s.matches("context") /* Context com.amazonaws.ec2#SpotFleetRequestConfigData$Context */ =>  {
                let var_2859 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_context(var_2859);
            }
            ,
            s if s.matches("targetCapacityUnitType") /* TargetCapacityUnitType com.amazonaws.ec2#SpotFleetRequestConfigData$TargetCapacityUnitType */ =>  {
                let var_2860 =
                    Some(
                        Result::<crate::model::TargetCapacityUnitType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TargetCapacityUnitType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_target_capacity_unit_type(var_2860);
            }
            ,
            s if s.matches("TagSpecification") /* TagSpecifications com.amazonaws.ec2#SpotFleetRequestConfigData$TagSpecifications */ =>  {
                let var_2861 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_specifications(var_2861);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("userData") /* UserData com.amazonaws.ec2#LaunchSpecification$UserData */ =>  {
                let var_2862 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_data(var_2862);
            }
            ,
            s if s.matches("groupSet") /* SecurityGroups com.amazonaws.ec2#LaunchSpecification$SecurityGroups */ =>  {
                let var_2863 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_2863);
            }
            ,
            s if s.matches("addressingType") /* AddressingType com.amazonaws.ec2#LaunchSpecification$AddressingType */ =>  {
                let var_2864 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_addressing_type(var_2864);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2#LaunchSpecification$BlockDeviceMappings */ =>  {
                let var_2865 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_2865);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#LaunchSpecification$EbsOptimized */ =>  {
                let var_2866 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_2866);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#LaunchSpecification$IamInstanceProfile */ =>  {
                let var_2867 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_2867);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#LaunchSpecification$ImageId */ =>  {
                let var_2868 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_2868);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#LaunchSpecification$InstanceType */ =>  {
                let var_2869 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_2869);
            }
            ,
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#LaunchSpecification$KernelId */ =>  {
                let var_2870 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_2870);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#LaunchSpecification$KeyName */ =>  {
                let var_2871 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_2871);
            }
            ,
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2#LaunchSpecification$NetworkInterfaces */ =>  {
                let var_2872 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_network_interface_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_2872);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#LaunchSpecification$Placement */ =>  {
                let var_2873 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_placement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_2873);
            }
            ,
            s if s.matches("ramdiskId") /* RamdiskId com.amazonaws.ec2#LaunchSpecification$RamdiskId */ =>  {
                let var_2874 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_2874);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#LaunchSpecification$SubnetId */ =>  {
                let var_2875 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2875);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#LaunchSpecification$Monitoring */ =>  {
                let var_2876 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_run_instances_monitoring_enabled(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_2876);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_instance_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotInstanceStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotInstanceStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#SpotInstanceStatus$Code */ =>  {
                let var_2877 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2877);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#SpotInstanceStatus$Message */ =>  {
                let var_2878 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2878);
            }
            ,
            s if s.matches("updateTime") /* UpdateTime com.amazonaws.ec2#SpotInstanceStatus$UpdateTime */ =>  {
                let var_2879 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_update_time(var_2879);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_stale_ip_permission_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::StaleIpPermission>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#StaleIpPermissionSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_stale_ip_permission(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_transit_gateway_attachment_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayAttachmentAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayAttachmentAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayAttachmentAssociation$TransitGatewayRouteTableId */ =>  {
                let var_2880 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_2880);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayAttachmentAssociation$State */ =>  {
                let var_2881 =
                    Some(
                        Result::<crate::model::TransitGatewayAssociationState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitGatewayAssociationState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2881);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_volume_status_actions_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeStatusAction>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeStatusActionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_status_action(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_volume_status_events_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeStatusEvent>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeStatusEventsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_status_event(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_volume_status_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("details") /* Details com.amazonaws.ec2#VolumeStatusInfo$Details */ =>  {
                let var_2882 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_volume_status_details_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_details(var_2882);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#VolumeStatusInfo$Status */ =>  {
                let var_2883 =
                    Some(
                        Result::<crate::model::VolumeStatusInfoStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeStatusInfoStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_2883);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_volume_status_attachment_status_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::VolumeStatusAttachmentStatus>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeStatusAttachmentStatusList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_status_attachment_status(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_private_dns_details_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrivateDnsDetails>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrivateDnsDetailsSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_private_dns_details(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_disable_fast_snapshot_restore_state_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::DisableFastSnapshotRestoreStateErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DisableFastSnapshotRestoreStateErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_disable_fast_snapshot_restore_state_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_enable_fast_snapshot_restore_state_error_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::EnableFastSnapshotRestoreStateErrorItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#EnableFastSnapshotRestoreStateErrorSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_enable_fast_snapshot_restore_state_error_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_launch_template_block_device_mapping(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateBlockDeviceMapping, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateBlockDeviceMapping::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#LaunchTemplateBlockDeviceMapping$DeviceName */ =>  {
                let var_2884 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_2884);
            }
            ,
            s if s.matches("virtualName") /* VirtualName com.amazonaws.ec2#LaunchTemplateBlockDeviceMapping$VirtualName */ =>  {
                let var_2885 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_virtual_name(var_2885);
            }
            ,
            s if s.matches("ebs") /* Ebs com.amazonaws.ec2#LaunchTemplateBlockDeviceMapping$Ebs */ =>  {
                let var_2886 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_ebs_block_device(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs(var_2886);
            }
            ,
            s if s.matches("noDevice") /* NoDevice com.amazonaws.ec2#LaunchTemplateBlockDeviceMapping$NoDevice */ =>  {
                let var_2887 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_no_device(var_2887);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_instance_network_interface_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::LaunchTemplateInstanceNetworkInterfaceSpecification,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateInstanceNetworkInterfaceSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associateCarrierIpAddress") /* AssociateCarrierIpAddress com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$AssociateCarrierIpAddress */ =>  {
                let var_2888 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_associate_carrier_ip_address(var_2888);
            }
            ,
            s if s.matches("associatePublicIpAddress") /* AssociatePublicIpAddress com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$AssociatePublicIpAddress */ =>  {
                let var_2889 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_associate_public_ip_address(var_2889);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$DeleteOnTermination */ =>  {
                let var_2890 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_2890);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Description */ =>  {
                let var_2891 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2891);
            }
            ,
            s if s.matches("deviceIndex") /* DeviceIndex com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$DeviceIndex */ =>  {
                let var_2892 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_device_index(var_2892);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Groups */ =>  {
                let var_2893 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_id_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_2893);
            }
            ,
            s if s.matches("interfaceType") /* InterfaceType com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$InterfaceType */ =>  {
                let var_2894 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_2894);
            }
            ,
            s if s.matches("ipv6AddressCount") /* Ipv6AddressCount com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv6AddressCount */ =>  {
                let var_2895 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_address_count(var_2895);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv6Addresses */ =>  {
                let var_2896 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_2896);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$NetworkInterfaceId */ =>  {
                let var_2897 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_2897);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$PrivateIpAddress */ =>  {
                let var_2898 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_2898);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$PrivateIpAddresses */ =>  {
                let var_2899 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_private_ip_address_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_2899);
            }
            ,
            s if s.matches("secondaryPrivateIpAddressCount") /* SecondaryPrivateIpAddressCount com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$SecondaryPrivateIpAddressCount */ =>  {
                let var_2900 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_secondary_private_ip_address_count(var_2900);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$SubnetId */ =>  {
                let var_2901 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_2901);
            }
            ,
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$NetworkCardIndex */ =>  {
                let var_2902 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_2902);
            }
            ,
            s if s.matches("ipv4PrefixSet") /* Ipv4Prefixes com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv4Prefixes */ =>  {
                let var_2903 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv4_prefix_list_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_2903);
            }
            ,
            s if s.matches("ipv4PrefixCount") /* Ipv4PrefixCount com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv4PrefixCount */ =>  {
                let var_2904 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix_count(var_2904);
            }
            ,
            s if s.matches("ipv6PrefixSet") /* Ipv6Prefixes com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv6Prefixes */ =>  {
                let var_2905 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_prefix_list_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_2905);
            }
            ,
            s if s.matches("ipv6PrefixCount") /* Ipv6PrefixCount com.amazonaws.ec2#LaunchTemplateInstanceNetworkInterfaceSpecification$Ipv6PrefixCount */ =>  {
                let var_2906 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix_count(var_2906);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_tag_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateTagSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateTagSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#LaunchTemplateTagSpecification$ResourceType */ =>  {
                let var_2907 =
                    Some(
                        Result::<crate::model::ResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_2907);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#LaunchTemplateTagSpecification$Tags */ =>  {
                let var_2908 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_2908);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_elastic_gpu_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ElasticGpuSpecificationResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ElasticGpuSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("type") /* Type com.amazonaws.ec2#ElasticGpuSpecificationResponse$Type */ =>  {
                let var_2909 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_2909);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_elastic_inference_accelerator_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::LaunchTemplateElasticInferenceAcceleratorResponse,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateElasticInferenceAcceleratorResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("type") /* Type com.amazonaws.ec2#LaunchTemplateElasticInferenceAcceleratorResponse$Type */ =>  {
                let var_2910 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_2910);
            }
            ,
            s if s.matches("count") /* Count com.amazonaws.ec2#LaunchTemplateElasticInferenceAcceleratorResponse$Count */ =>  {
                let var_2911 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_2911);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_spot_market_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateSpotMarketOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateSpotMarketOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("maxPrice") /* MaxPrice com.amazonaws.ec2#LaunchTemplateSpotMarketOptions$MaxPrice */ =>  {
                let var_2912 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_max_price(var_2912);
            }
            ,
            s if s.matches("spotInstanceType") /* SpotInstanceType com.amazonaws.ec2#LaunchTemplateSpotMarketOptions$SpotInstanceType */ =>  {
                let var_2913 =
                    Some(
                        Result::<crate::model::SpotInstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SpotInstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_instance_type(var_2913);
            }
            ,
            s if s.matches("blockDurationMinutes") /* BlockDurationMinutes com.amazonaws.ec2#LaunchTemplateSpotMarketOptions$BlockDurationMinutes */ =>  {
                let var_2914 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_block_duration_minutes(var_2914);
            }
            ,
            s if s.matches("validUntil") /* ValidUntil com.amazonaws.ec2#LaunchTemplateSpotMarketOptions$ValidUntil */ =>  {
                let var_2915 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_valid_until(var_2915);
            }
            ,
            s if s.matches("instanceInterruptionBehavior") /* InstanceInterruptionBehavior com.amazonaws.ec2#LaunchTemplateSpotMarketOptions$InstanceInterruptionBehavior */ =>  {
                let var_2916 =
                    Some(
                        Result::<crate::model::InstanceInterruptionBehavior, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceInterruptionBehavior::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_interruption_behavior(var_2916);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_target_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationTargetResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationTargetResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationId") /* CapacityReservationId com.amazonaws.ec2#CapacityReservationTargetResponse$CapacityReservationId */ =>  {
                let var_2917 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_id(var_2917);
            }
            ,
            s if s.matches("capacityReservationResourceGroupArn") /* CapacityReservationResourceGroupArn com.amazonaws.ec2#CapacityReservationTargetResponse$CapacityReservationResourceGroupArn */ =>  {
                let var_2918 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_resource_group_arn(var_2918);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_license_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateLicenseConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateLicenseConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("licenseConfigurationArn") /* LicenseConfigurationArn com.amazonaws.ec2#LaunchTemplateLicenseConfiguration$LicenseConfigurationArn */ =>  {
                let var_2919 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_configuration_arn(var_2919);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_v_cpu_count_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VCpuCountRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VCpuCountRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#VCpuCountRange$Min */ =>  {
                let var_2920 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2920);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#VCpuCountRange$Max */ =>  {
                let var_2921 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2921);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_memory_mi_b(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MemoryMiB, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MemoryMiB::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#MemoryMiB$Min */ =>  {
                let var_2922 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2922);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#MemoryMiB$Max */ =>  {
                let var_2923 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2923);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_cpu_manufacturer_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::CpuManufacturer>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CpuManufacturerSet$member */ =>  {
                out.push(
                    Result::<crate::model::CpuManufacturer, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::CpuManufacturer::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_memory_gi_b_per_v_cpu(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MemoryGiBPerVCpu, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MemoryGiBPerVCpu::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#MemoryGiBPerVCpu$Min */ =>  {
                let var_2924 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2924);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#MemoryGiBPerVCpu$Max */ =>  {
                let var_2925 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2925);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_excluded_instance_type_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ExcludedInstanceTypeSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_generation_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceGeneration>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceGenerationSet$member */ =>  {
                out.push(
                    Result::<crate::model::InstanceGeneration, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::InstanceGeneration::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_network_interface_count(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkInterfaceCount, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkInterfaceCount::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#NetworkInterfaceCount$Min */ =>  {
                let var_2926 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2926);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#NetworkInterfaceCount$Max */ =>  {
                let var_2927 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2927);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_local_storage_type_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LocalStorageType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LocalStorageTypeSet$member */ =>  {
                out.push(
                    Result::<crate::model::LocalStorageType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::LocalStorageType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_total_local_storage_gb(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TotalLocalStorageGb, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TotalLocalStorageGb::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#TotalLocalStorageGB$Min */ =>  {
                let var_2928 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2928);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#TotalLocalStorageGB$Max */ =>  {
                let var_2929 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2929);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_baseline_ebs_bandwidth_mbps(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BaselineEbsBandwidthMbps, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BaselineEbsBandwidthMbps::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#BaselineEbsBandwidthMbps$Min */ =>  {
                let var_2930 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2930);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#BaselineEbsBandwidthMbps$Max */ =>  {
                let var_2931 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2931);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_accelerator_type_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AcceleratorType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AcceleratorTypeSet$member */ =>  {
                out.push(
                    Result::<crate::model::AcceleratorType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::AcceleratorType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_accelerator_count(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AcceleratorCount, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AcceleratorCount::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#AcceleratorCount$Min */ =>  {
                let var_2932 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2932);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#AcceleratorCount$Max */ =>  {
                let var_2933 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2933);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_accelerator_manufacturer_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AcceleratorManufacturer>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AcceleratorManufacturerSet$member */ =>  {
                out.push(
                    Result::<crate::model::AcceleratorManufacturer, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::AcceleratorManufacturer::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_accelerator_name_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AcceleratorName>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AcceleratorNameSet$member */ =>  {
                out.push(
                    Result::<crate::model::AcceleratorName, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::AcceleratorName::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_accelerator_total_memory_mi_b(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AcceleratorTotalMemoryMiB, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AcceleratorTotalMemoryMiB::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("min") /* Min com.amazonaws.ec2#AcceleratorTotalMemoryMiB$Min */ =>  {
                let var_2934 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min(var_2934);
            }
            ,
            s if s.matches("max") /* Max com.amazonaws.ec2#AcceleratorTotalMemoryMiB$Max */ =>  {
                let var_2935 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max(var_2935);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceCount") /* InstanceCount com.amazonaws.ec2#TargetConfiguration$InstanceCount */ =>  {
                let var_2936 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_count(var_2936);
            }
            ,
            s if s.matches("offeringId") /* OfferingId com.amazonaws.ec2#TargetConfiguration$OfferingId */ =>  {
                let var_2937 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_offering_id(var_2937);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_import_instance_volume_detail_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ImportInstanceVolumeDetailItem>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ImportInstanceVolumeDetailSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_import_instance_volume_detail_item(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_disk_image_description(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DiskImageDescription, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DiskImageDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("checksum") /* Checksum com.amazonaws.ec2#DiskImageDescription$Checksum */ =>  {
                let var_2938 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_checksum(var_2938);
            }
            ,
            s if s.matches("format") /* Format com.amazonaws.ec2#DiskImageDescription$Format */ =>  {
                let var_2939 =
                    Some(
                        Result::<crate::model::DiskImageFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DiskImageFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_2939);
            }
            ,
            s if s.matches("importManifestUrl") /* ImportManifestUrl com.amazonaws.ec2#DiskImageDescription$ImportManifestUrl */ =>  {
                let var_2940 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_import_manifest_url(var_2940);
            }
            ,
            s if s.matches("size") /* Size com.amazonaws.ec2#DiskImageDescription$Size */ =>  {
                let var_2941 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size(var_2941);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disk_image_volume_description(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DiskImageVolumeDescription, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DiskImageVolumeDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("id") /* Id com.amazonaws.ec2#DiskImageVolumeDescription$Id */ =>  {
                let var_2942 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_2942);
            }
            ,
            s if s.matches("size") /* Size com.amazonaws.ec2#DiskImageVolumeDescription$Size */ =>  {
                let var_2943 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size(var_2943);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_unsuccessful_instance_credit_specification_item_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::model::UnsuccessfulInstanceCreditSpecificationItemError,
    aws_smithy_xml::decode::XmlError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UnsuccessfulInstanceCreditSpecificationItemError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#UnsuccessfulInstanceCreditSpecificationItemError$Code */ =>  {
                let var_2944 =
                    Some(
                        Result::<crate::model::UnsuccessfulInstanceCreditSpecificationErrorCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::UnsuccessfulInstanceCreditSpecificationErrorCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_2944);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#UnsuccessfulInstanceCreditSpecificationItemError$Message */ =>  {
                let var_2945 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2945);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_monitoring(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Monitoring, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Monitoring::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#Monitoring$State */ =>  {
                let var_2946 =
                    Some(
                        Result::<crate::model::MonitoringState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MonitoringState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2946);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ip_range_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IpRange>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpRangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ip_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_range_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Ipv6Range>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6RangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_prefix_list_id_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PrefixListId>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrefixListIdList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_prefix_list_id(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_user_id_group_pair_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UserIdGroupPair>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UserIdGroupPairList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_user_id_group_pair(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_placement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Placement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Placement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Placement$AvailabilityZone */ =>  {
                let var_2947 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2947);
            }
            ,
            s if s.matches("affinity") /* Affinity com.amazonaws.ec2#Placement$Affinity */ =>  {
                let var_2948 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_affinity(var_2948);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#Placement$GroupName */ =>  {
                let var_2949 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_2949);
            }
            ,
            s if s.matches("partitionNumber") /* PartitionNumber com.amazonaws.ec2#Placement$PartitionNumber */ =>  {
                let var_2950 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_partition_number(var_2950);
            }
            ,
            s if s.matches("hostId") /* HostId com.amazonaws.ec2#Placement$HostId */ =>  {
                let var_2951 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_id(var_2951);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#Placement$Tenancy */ =>  {
                let var_2952 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_2952);
            }
            ,
            s if s.matches("spreadDomain") /* SpreadDomain com.amazonaws.ec2#Placement$SpreadDomain */ =>  {
                let var_2953 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spread_domain(var_2953);
            }
            ,
            s if s.matches("hostResourceGroupArn") /* HostResourceGroupArn com.amazonaws.ec2#Placement$HostResourceGroupArn */ =>  {
                let var_2954 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_resource_group_arn(var_2954);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_elastic_gpu_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ElasticGpuAssociation>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticGpuAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_gpu_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_elastic_inference_accelerator_association_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::ElasticInferenceAcceleratorAssociation>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ElasticInferenceAcceleratorAssociationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_elastic_inference_accelerator_association(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_network_interface_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceNetworkInterface>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceNetworkInterfaceList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_network_interface(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_cpu_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CpuOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CpuOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("coreCount") /* CoreCount com.amazonaws.ec2#CpuOptions$CoreCount */ =>  {
                let var_2955 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_core_count(var_2955);
            }
            ,
            s if s.matches("threadsPerCore") /* ThreadsPerCore com.amazonaws.ec2#CpuOptions$ThreadsPerCore */ =>  {
                let var_2956 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_threads_per_core(var_2956);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationSpecificationResponse, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityReservationPreference") /* CapacityReservationPreference com.amazonaws.ec2#CapacityReservationSpecificationResponse$CapacityReservationPreference */ =>  {
                let var_2957 =
                    Some(
                        Result::<crate::model::CapacityReservationPreference, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CapacityReservationPreference::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_preference(var_2957);
            }
            ,
            s if s.matches("capacityReservationTarget") /* CapacityReservationTarget com.amazonaws.ec2#CapacityReservationSpecificationResponse$CapacityReservationTarget */ =>  {
                let var_2958 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_capacity_reservation_target_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_target(var_2958);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_hibernation_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HibernationOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HibernationOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("configured") /* Configured com.amazonaws.ec2#HibernationOptions$Configured */ =>  {
                let var_2959 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_configured(var_2959);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_license_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LicenseConfiguration>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LicenseList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_license_configuration(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_private_dns_name_options_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrivateDnsNameOptionsResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrivateDnsNameOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("hostnameType") /* HostnameType com.amazonaws.ec2#PrivateDnsNameOptionsResponse$HostnameType */ =>  {
                let var_2960 =
                    Some(
                        Result::<crate::model::HostnameType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::HostnameType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hostname_type(var_2960);
            }
            ,
            s if s.matches("enableResourceNameDnsARecord") /* EnableResourceNameDnsARecord com.amazonaws.ec2#PrivateDnsNameOptionsResponse$EnableResourceNameDnsARecord */ =>  {
                let var_2961 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_a_record(var_2961);
            }
            ,
            s if s.matches("enableResourceNameDnsAAAARecord") /* EnableResourceNameDnsAAAARecord com.amazonaws.ec2#PrivateDnsNameOptionsResponse$EnableResourceNameDnsAAAARecord */ =>  {
                let var_2962 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_resource_name_dns_aaaa_record(var_2962);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_path_component(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PathComponent, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PathComponent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sequenceNumber") /* SequenceNumber com.amazonaws.ec2#PathComponent$SequenceNumber */ =>  {
                let var_2963 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_sequence_number(var_2963);
            }
            ,
            s if s.matches("aclRule") /* AclRule com.amazonaws.ec2#PathComponent$AclRule */ =>  {
                let var_2964 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_acl_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_acl_rule(var_2964);
            }
            ,
            s if s.matches("attachedTo") /* AttachedTo com.amazonaws.ec2#PathComponent$AttachedTo */ =>  {
                let var_2965 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attached_to(var_2965);
            }
            ,
            s if s.matches("component") /* Component com.amazonaws.ec2#PathComponent$Component */ =>  {
                let var_2966 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_component(var_2966);
            }
            ,
            s if s.matches("destinationVpc") /* DestinationVpc com.amazonaws.ec2#PathComponent$DestinationVpc */ =>  {
                let var_2967 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_vpc(var_2967);
            }
            ,
            s if s.matches("outboundHeader") /* OutboundHeader com.amazonaws.ec2#PathComponent$OutboundHeader */ =>  {
                let var_2968 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_packet_header(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_outbound_header(var_2968);
            }
            ,
            s if s.matches("inboundHeader") /* InboundHeader com.amazonaws.ec2#PathComponent$InboundHeader */ =>  {
                let var_2969 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_packet_header(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inbound_header(var_2969);
            }
            ,
            s if s.matches("routeTableRoute") /* RouteTableRoute com.amazonaws.ec2#PathComponent$RouteTableRoute */ =>  {
                let var_2970 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_route_table_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table_route(var_2970);
            }
            ,
            s if s.matches("securityGroupRule") /* SecurityGroupRule com.amazonaws.ec2#PathComponent$SecurityGroupRule */ =>  {
                let var_2971 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_security_group_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rule(var_2971);
            }
            ,
            s if s.matches("sourceVpc") /* SourceVpc com.amazonaws.ec2#PathComponent$SourceVpc */ =>  {
                let var_2972 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_vpc(var_2972);
            }
            ,
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2#PathComponent$Subnet */ =>  {
                let var_2973 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_2973);
            }
            ,
            s if s.matches("vpc") /* Vpc com.amazonaws.ec2#PathComponent$Vpc */ =>  {
                let var_2974 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_2974);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_explanation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Explanation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Explanation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("acl") /* Acl com.amazonaws.ec2#Explanation$Acl */ =>  {
                let var_2975 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_acl(var_2975);
            }
            ,
            s if s.matches("aclRule") /* AclRule com.amazonaws.ec2#Explanation$AclRule */ =>  {
                let var_2976 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_acl_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_acl_rule(var_2976);
            }
            ,
            s if s.matches("address") /* Address com.amazonaws.ec2#Explanation$Address */ =>  {
                let var_2977 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_address(var_2977);
            }
            ,
            s if s.matches("addressSet") /* Addresses com.amazonaws.ec2#Explanation$Addresses */ =>  {
                let var_2978 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_addresses(var_2978);
            }
            ,
            s if s.matches("attachedTo") /* AttachedTo com.amazonaws.ec2#Explanation$AttachedTo */ =>  {
                let var_2979 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attached_to(var_2979);
            }
            ,
            s if s.matches("availabilityZoneSet") /* AvailabilityZones com.amazonaws.ec2#Explanation$AvailabilityZones */ =>  {
                let var_2980 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_availability_zones(var_2980);
            }
            ,
            s if s.matches("cidrSet") /* Cidrs com.amazonaws.ec2#Explanation$Cidrs */ =>  {
                let var_2981 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidrs(var_2981);
            }
            ,
            s if s.matches("component") /* Component com.amazonaws.ec2#Explanation$Component */ =>  {
                let var_2982 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_component(var_2982);
            }
            ,
            s if s.matches("customerGateway") /* CustomerGateway com.amazonaws.ec2#Explanation$CustomerGateway */ =>  {
                let var_2983 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_customer_gateway(var_2983);
            }
            ,
            s if s.matches("destination") /* Destination com.amazonaws.ec2#Explanation$Destination */ =>  {
                let var_2984 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_2984);
            }
            ,
            s if s.matches("destinationVpc") /* DestinationVpc com.amazonaws.ec2#Explanation$DestinationVpc */ =>  {
                let var_2985 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_vpc(var_2985);
            }
            ,
            s if s.matches("direction") /* Direction com.amazonaws.ec2#Explanation$Direction */ =>  {
                let var_2986 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_direction(var_2986);
            }
            ,
            s if s.matches("explanationCode") /* ExplanationCode com.amazonaws.ec2#Explanation$ExplanationCode */ =>  {
                let var_2987 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_explanation_code(var_2987);
            }
            ,
            s if s.matches("ingressRouteTable") /* IngressRouteTable com.amazonaws.ec2#Explanation$IngressRouteTable */ =>  {
                let var_2988 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ingress_route_table(var_2988);
            }
            ,
            s if s.matches("internetGateway") /* InternetGateway com.amazonaws.ec2#Explanation$InternetGateway */ =>  {
                let var_2989 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_internet_gateway(var_2989);
            }
            ,
            s if s.matches("loadBalancerArn") /* LoadBalancerArn com.amazonaws.ec2#Explanation$LoadBalancerArn */ =>  {
                let var_2990 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_load_balancer_arn(var_2990);
            }
            ,
            s if s.matches("classicLoadBalancerListener") /* ClassicLoadBalancerListener com.amazonaws.ec2#Explanation$ClassicLoadBalancerListener */ =>  {
                let var_2991 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_load_balancer_listener(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_classic_load_balancer_listener(var_2991);
            }
            ,
            s if s.matches("loadBalancerListenerPort") /* LoadBalancerListenerPort com.amazonaws.ec2#Explanation$LoadBalancerListenerPort */ =>  {
                let var_2992 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_load_balancer_listener_port(var_2992);
            }
            ,
            s if s.matches("loadBalancerTarget") /* LoadBalancerTarget com.amazonaws.ec2#Explanation$LoadBalancerTarget */ =>  {
                let var_2993 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_load_balancer_target(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancer_target(var_2993);
            }
            ,
            s if s.matches("loadBalancerTargetGroup") /* LoadBalancerTargetGroup com.amazonaws.ec2#Explanation$LoadBalancerTargetGroup */ =>  {
                let var_2994 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancer_target_group(var_2994);
            }
            ,
            s if s.matches("loadBalancerTargetGroupSet") /* LoadBalancerTargetGroups com.amazonaws.ec2#Explanation$LoadBalancerTargetGroups */ =>  {
                let var_2995 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_analysis_component_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancer_target_groups(var_2995);
            }
            ,
            s if s.matches("loadBalancerTargetPort") /* LoadBalancerTargetPort com.amazonaws.ec2#Explanation$LoadBalancerTargetPort */ =>  {
                let var_2996 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_load_balancer_target_port(var_2996);
            }
            ,
            s if s.matches("elasticLoadBalancerListener") /* ElasticLoadBalancerListener com.amazonaws.ec2#Explanation$ElasticLoadBalancerListener */ =>  {
                let var_2997 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_load_balancer_listener(var_2997);
            }
            ,
            s if s.matches("missingComponent") /* MissingComponent com.amazonaws.ec2#Explanation$MissingComponent */ =>  {
                let var_2998 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_missing_component(var_2998);
            }
            ,
            s if s.matches("natGateway") /* NatGateway com.amazonaws.ec2#Explanation$NatGateway */ =>  {
                let var_2999 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_nat_gateway(var_2999);
            }
            ,
            s if s.matches("networkInterface") /* NetworkInterface com.amazonaws.ec2#Explanation$NetworkInterface */ =>  {
                let var_3000 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface(var_3000);
            }
            ,
            s if s.matches("packetField") /* PacketField com.amazonaws.ec2#Explanation$PacketField */ =>  {
                let var_3001 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_packet_field(var_3001);
            }
            ,
            s if s.matches("vpcPeeringConnection") /* VpcPeeringConnection com.amazonaws.ec2#Explanation$VpcPeeringConnection */ =>  {
                let var_3002 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection(var_3002);
            }
            ,
            s if s.matches("port") /* Port com.amazonaws.ec2#Explanation$Port */ =>  {
                let var_3003 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_3003);
            }
            ,
            s if s.matches("portRangeSet") /* PortRanges com.amazonaws.ec2#Explanation$PortRanges */ =>  {
                let var_3004 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_port_ranges(var_3004);
            }
            ,
            s if s.matches("prefixList") /* PrefixList com.amazonaws.ec2#Explanation$PrefixList */ =>  {
                let var_3005 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list(var_3005);
            }
            ,
            s if s.matches("protocolSet") /* Protocols com.amazonaws.ec2#Explanation$Protocols */ =>  {
                let var_3006 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_protocols(var_3006);
            }
            ,
            s if s.matches("routeTableRoute") /* RouteTableRoute com.amazonaws.ec2#Explanation$RouteTableRoute */ =>  {
                let var_3007 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_route_table_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table_route(var_3007);
            }
            ,
            s if s.matches("routeTable") /* RouteTable com.amazonaws.ec2#Explanation$RouteTable */ =>  {
                let var_3008 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table(var_3008);
            }
            ,
            s if s.matches("securityGroup") /* SecurityGroup com.amazonaws.ec2#Explanation$SecurityGroup */ =>  {
                let var_3009 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group(var_3009);
            }
            ,
            s if s.matches("securityGroupRule") /* SecurityGroupRule com.amazonaws.ec2#Explanation$SecurityGroupRule */ =>  {
                let var_3010 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_security_group_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rule(var_3010);
            }
            ,
            s if s.matches("securityGroupSet") /* SecurityGroups com.amazonaws.ec2#Explanation$SecurityGroups */ =>  {
                let var_3011 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_analysis_component_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_3011);
            }
            ,
            s if s.matches("sourceVpc") /* SourceVpc com.amazonaws.ec2#Explanation$SourceVpc */ =>  {
                let var_3012 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_vpc(var_3012);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Explanation$State */ =>  {
                let var_3013 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_3013);
            }
            ,
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2#Explanation$Subnet */ =>  {
                let var_3014 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_3014);
            }
            ,
            s if s.matches("subnetRouteTable") /* SubnetRouteTable com.amazonaws.ec2#Explanation$SubnetRouteTable */ =>  {
                let var_3015 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_route_table(var_3015);
            }
            ,
            s if s.matches("vpc") /* Vpc com.amazonaws.ec2#Explanation$Vpc */ =>  {
                let var_3016 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_3016);
            }
            ,
            s if s.matches("vpcEndpoint") /* VpcEndpoint com.amazonaws.ec2#Explanation$VpcEndpoint */ =>  {
                let var_3017 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint(var_3017);
            }
            ,
            s if s.matches("vpnConnection") /* VpnConnection com.amazonaws.ec2#Explanation$VpnConnection */ =>  {
                let var_3018 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_connection(var_3018);
            }
            ,
            s if s.matches("vpnGateway") /* VpnGateway com.amazonaws.ec2#Explanation$VpnGateway */ =>  {
                let var_3019 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpn_gateway(var_3019);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_alternate_path_hint(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AlternatePathHint, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AlternatePathHint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("componentId") /* ComponentId com.amazonaws.ec2#AlternatePathHint$ComponentId */ =>  {
                let var_3020 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_component_id(var_3020);
            }
            ,
            s if s.matches("componentArn") /* ComponentArn com.amazonaws.ec2#AlternatePathHint$ComponentArn */ =>  {
                let var_3021 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_component_arn(var_3021);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_cidr_block(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6CidrBlock, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6CidrBlock::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6CidrBlock") /* Ipv6CidrBlock com.amazonaws.ec2#Ipv6CidrBlock$Ipv6CidrBlock */ =>  {
                let var_3022 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block(var_3022);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cidr_block(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CidrBlock, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CidrBlock::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#CidrBlock$CidrBlock */ =>  {
                let var_3023 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_3023);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_count(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceCount, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceCount::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceCount") /* InstanceCount com.amazonaws.ec2#InstanceCount$InstanceCount */ =>  {
                let var_3024 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_count(var_3024);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceCount$State */ =>  {
                let var_3025 =
                    Some(
                        Result::<crate::model::ListingState, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ListingState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_3025);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_price_schedule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PriceSchedule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PriceSchedule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("active") /* Active com.amazonaws.ec2#PriceSchedule$Active */ =>  {
                let var_3026 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_active(var_3026);
            }
            ,
            s if s.matches("currencyCode") /* CurrencyCode com.amazonaws.ec2#PriceSchedule$CurrencyCode */ =>  {
                let var_3027 =
                    Some(
                        Result::<crate::model::CurrencyCodeValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CurrencyCodeValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_currency_code(var_3027);
            }
            ,
            s if s.matches("price") /* Price com.amazonaws.ec2#PriceSchedule$Price */ =>  {
                let var_3028 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_price(var_3028);
            }
            ,
            s if s.matches("term") /* Term com.amazonaws.ec2#PriceSchedule$Term */ =>  {
                let var_3029 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_term(var_3029);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_dhcp_configuration_value_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AttributeValue>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DhcpConfigurationValueList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_attribute_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_fleet_launch_template_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetLaunchTemplateSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetLaunchTemplateSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateId") /* LaunchTemplateId com.amazonaws.ec2#FleetLaunchTemplateSpecification$LaunchTemplateId */ =>  {
                let var_3030 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_id(var_3030);
            }
            ,
            s if s.matches("launchTemplateName") /* LaunchTemplateName com.amazonaws.ec2#FleetLaunchTemplateSpecification$LaunchTemplateName */ =>  {
                let var_3031 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_launch_template_name(var_3031);
            }
            ,
            s if s.matches("version") /* Version com.amazonaws.ec2#FleetLaunchTemplateSpecification$Version */ =>  {
                let var_3032 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version(var_3032);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fleet_launch_template_overrides(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetLaunchTemplateOverrides, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetLaunchTemplateOverrides::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#FleetLaunchTemplateOverrides$InstanceType */ =>  {
                let var_3033 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3033);
            }
            ,
            s if s.matches("maxPrice") /* MaxPrice com.amazonaws.ec2#FleetLaunchTemplateOverrides$MaxPrice */ =>  {
                let var_3034 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_max_price(var_3034);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#FleetLaunchTemplateOverrides$SubnetId */ =>  {
                let var_3035 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_3035);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#FleetLaunchTemplateOverrides$AvailabilityZone */ =>  {
                let var_3036 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3036);
            }
            ,
            s if s.matches("weightedCapacity") /* WeightedCapacity com.amazonaws.ec2#FleetLaunchTemplateOverrides$WeightedCapacity */ =>  {
                let var_3037 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weighted_capacity(var_3037);
            }
            ,
            s if s.matches("priority") /* Priority com.amazonaws.ec2#FleetLaunchTemplateOverrides$Priority */ =>  {
                let var_3038 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_priority(var_3038);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#FleetLaunchTemplateOverrides$Placement */ =>  {
                let var_3039 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_placement_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_3039);
            }
            ,
            s if s.matches("instanceRequirements") /* InstanceRequirements com.amazonaws.ec2#FleetLaunchTemplateOverrides$InstanceRequirements */ =>  {
                let var_3040 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_requirements(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_requirements(var_3040);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_icmp_type_code(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IcmpTypeCode, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IcmpTypeCode::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#IcmpTypeCode$Code */ =>  {
                let var_3041 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_code(var_3041);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#IcmpTypeCode$Type */ =>  {
                let var_3042 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_type(var_3042);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_port_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PortRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PortRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("from") /* From com.amazonaws.ec2#PortRange$From */ =>  {
                let var_3043 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from(var_3043);
            }
            ,
            s if s.matches("to") /* To com.amazonaws.ec2#PortRange$To */ =>  {
                let var_3044 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to(var_3044);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_path_statement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PathStatement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PathStatement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("packetHeaderStatement") /* PacketHeaderStatement com.amazonaws.ec2#PathStatement$PacketHeaderStatement */ =>  {
                let var_3045 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_packet_header_statement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_packet_header_statement(var_3045);
            }
            ,
            s if s.matches("resourceStatement") /* ResourceStatement com.amazonaws.ec2#PathStatement$ResourceStatement */ =>  {
                let var_3046 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_resource_statement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_statement(var_3046);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_through_resources_statement_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ThroughResourcesStatement>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ThroughResourcesStatementList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_through_resources_statement(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_transit_gateway_attachment_bgp_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TransitGatewayAttachmentBgpConfiguration, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::TransitGatewayAttachmentBgpConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAsn") /* TransitGatewayAsn com.amazonaws.ec2#TransitGatewayAttachmentBgpConfiguration$TransitGatewayAsn */ =>  {
                let var_3047 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_asn(var_3047);
            }
            ,
            s if s.matches("peerAsn") /* PeerAsn com.amazonaws.ec2#TransitGatewayAttachmentBgpConfiguration$PeerAsn */ =>  {
                let var_3048 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_peer_asn(var_3048);
            }
            ,
            s if s.matches("transitGatewayAddress") /* TransitGatewayAddress com.amazonaws.ec2#TransitGatewayAttachmentBgpConfiguration$TransitGatewayAddress */ =>  {
                let var_3049 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_address(var_3049);
            }
            ,
            s if s.matches("peerAddress") /* PeerAddress com.amazonaws.ec2#TransitGatewayAttachmentBgpConfiguration$PeerAddress */ =>  {
                let var_3050 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peer_address(var_3050);
            }
            ,
            s if s.matches("bgpStatus") /* BgpStatus com.amazonaws.ec2#TransitGatewayAttachmentBgpConfiguration$BgpStatus */ =>  {
                let var_3051 =
                    Some(
                        Result::<crate::model::BgpStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BgpStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_bgp_status(var_3051);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tunnel_option(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TunnelOption, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TunnelOption::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("outsideIpAddress") /* OutsideIpAddress com.amazonaws.ec2#TunnelOption$OutsideIpAddress */ =>  {
                let var_3052 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outside_ip_address(var_3052);
            }
            ,
            s if s.matches("tunnelInsideCidr") /* TunnelInsideCidr com.amazonaws.ec2#TunnelOption$TunnelInsideCidr */ =>  {
                let var_3053 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tunnel_inside_cidr(var_3053);
            }
            ,
            s if s.matches("tunnelInsideIpv6Cidr") /* TunnelInsideIpv6Cidr com.amazonaws.ec2#TunnelOption$TunnelInsideIpv6Cidr */ =>  {
                let var_3054 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tunnel_inside_ipv6_cidr(var_3054);
            }
            ,
            s if s.matches("preSharedKey") /* PreSharedKey com.amazonaws.ec2#TunnelOption$PreSharedKey */ =>  {
                let var_3055 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pre_shared_key(var_3055);
            }
            ,
            s if s.matches("phase1LifetimeSeconds") /* Phase1LifetimeSeconds com.amazonaws.ec2#TunnelOption$Phase1LifetimeSeconds */ =>  {
                let var_3056 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_phase1_lifetime_seconds(var_3056);
            }
            ,
            s if s.matches("phase2LifetimeSeconds") /* Phase2LifetimeSeconds com.amazonaws.ec2#TunnelOption$Phase2LifetimeSeconds */ =>  {
                let var_3057 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_phase2_lifetime_seconds(var_3057);
            }
            ,
            s if s.matches("rekeyMarginTimeSeconds") /* RekeyMarginTimeSeconds com.amazonaws.ec2#TunnelOption$RekeyMarginTimeSeconds */ =>  {
                let var_3058 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_rekey_margin_time_seconds(var_3058);
            }
            ,
            s if s.matches("rekeyFuzzPercentage") /* RekeyFuzzPercentage com.amazonaws.ec2#TunnelOption$RekeyFuzzPercentage */ =>  {
                let var_3059 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_rekey_fuzz_percentage(var_3059);
            }
            ,
            s if s.matches("replayWindowSize") /* ReplayWindowSize com.amazonaws.ec2#TunnelOption$ReplayWindowSize */ =>  {
                let var_3060 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_replay_window_size(var_3060);
            }
            ,
            s if s.matches("dpdTimeoutSeconds") /* DpdTimeoutSeconds com.amazonaws.ec2#TunnelOption$DpdTimeoutSeconds */ =>  {
                let var_3061 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_dpd_timeout_seconds(var_3061);
            }
            ,
            s if s.matches("dpdTimeoutAction") /* DpdTimeoutAction com.amazonaws.ec2#TunnelOption$DpdTimeoutAction */ =>  {
                let var_3062 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dpd_timeout_action(var_3062);
            }
            ,
            s if s.matches("phase1EncryptionAlgorithmSet") /* Phase1EncryptionAlgorithms com.amazonaws.ec2#TunnelOption$Phase1EncryptionAlgorithms */ =>  {
                let var_3063 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase1_encryption_algorithms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase1_encryption_algorithms(var_3063);
            }
            ,
            s if s.matches("phase2EncryptionAlgorithmSet") /* Phase2EncryptionAlgorithms com.amazonaws.ec2#TunnelOption$Phase2EncryptionAlgorithms */ =>  {
                let var_3064 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase2_encryption_algorithms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase2_encryption_algorithms(var_3064);
            }
            ,
            s if s.matches("phase1IntegrityAlgorithmSet") /* Phase1IntegrityAlgorithms com.amazonaws.ec2#TunnelOption$Phase1IntegrityAlgorithms */ =>  {
                let var_3065 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase1_integrity_algorithms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase1_integrity_algorithms(var_3065);
            }
            ,
            s if s.matches("phase2IntegrityAlgorithmSet") /* Phase2IntegrityAlgorithms com.amazonaws.ec2#TunnelOption$Phase2IntegrityAlgorithms */ =>  {
                let var_3066 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase2_integrity_algorithms_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase2_integrity_algorithms(var_3066);
            }
            ,
            s if s.matches("phase1DHGroupNumberSet") /* Phase1DHGroupNumbers com.amazonaws.ec2#TunnelOption$Phase1DHGroupNumbers */ =>  {
                let var_3067 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase1_dh_group_numbers_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase1_dh_group_numbers(var_3067);
            }
            ,
            s if s.matches("phase2DHGroupNumberSet") /* Phase2DHGroupNumbers com.amazonaws.ec2#TunnelOption$Phase2DHGroupNumbers */ =>  {
                let var_3068 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_phase2_dh_group_numbers_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_phase2_dh_group_numbers(var_3068);
            }
            ,
            s if s.matches("ikeVersionSet") /* IkeVersions com.amazonaws.ec2#TunnelOption$IkeVersions */ =>  {
                let var_3069 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ike_versions_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ike_versions(var_3069);
            }
            ,
            s if s.matches("startupAction") /* StartupAction com.amazonaws.ec2#TunnelOption$StartupAction */ =>  {
                let var_3070 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_startup_action(var_3070);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_account_attribute_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccountAttributeValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccountAttributeValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attributeValue") /* AttributeValue com.amazonaws.ec2#AccountAttributeValue$AttributeValue */ =>  {
                let var_3071 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attribute_value(var_3071);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_availability_zone_message(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AvailabilityZoneMessage, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AvailabilityZoneMessage::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* Message com.amazonaws.ec2#AvailabilityZoneMessage$Message */ =>  {
                let var_3072 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3072);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_associated_target_network(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AssociatedTargetNetwork, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AssociatedTargetNetwork::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkId") /* NetworkId com.amazonaws.ec2#AssociatedTargetNetwork$NetworkId */ =>  {
                let var_3073 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_id(var_3073);
            }
            ,
            s if s.matches("networkType") /* NetworkType com.amazonaws.ec2#AssociatedTargetNetwork$NetworkType */ =>  {
                let var_3074 =
                    Some(
                        Result::<crate::model::AssociatedNetworkType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AssociatedNetworkType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_network_type(var_3074);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_authentication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnAuthentication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnAuthentication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("type") /* Type com.amazonaws.ec2#ClientVpnAuthentication$Type */ =>  {
                let var_3075 =
                    Some(
                        Result::<crate::model::ClientVpnAuthenticationType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnAuthenticationType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_3075);
            }
            ,
            s if s.matches("activeDirectory") /* ActiveDirectory com.amazonaws.ec2#ClientVpnAuthentication$ActiveDirectory */ =>  {
                let var_3076 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_directory_service_authentication(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_active_directory(var_3076);
            }
            ,
            s if s.matches("mutualAuthentication") /* MutualAuthentication com.amazonaws.ec2#ClientVpnAuthentication$MutualAuthentication */ =>  {
                let var_3077 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_certificate_authentication(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_mutual_authentication(var_3077);
            }
            ,
            s if s.matches("federatedAuthentication") /* FederatedAuthentication com.amazonaws.ec2#ClientVpnAuthentication$FederatedAuthentication */ =>  {
                let var_3078 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_federated_authentication(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_federated_authentication(var_3078);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_client_vpn_endpoint_attribute_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClientVpnEndpointAttributeStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClientVpnEndpointAttributeStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#ClientVpnEndpointAttributeStatus$Code */ =>  {
                let var_3079 =
                    Some(
                        Result::<crate::model::ClientVpnEndpointAttributeStatusCode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ClientVpnEndpointAttributeStatusCode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_3079);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#ClientVpnEndpointAttributeStatus$Message */ =>  {
                let var_3080 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3080);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fleet_launch_template_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetLaunchTemplateConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetLaunchTemplateConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateSpecification") /* LaunchTemplateSpecification com.amazonaws.ec2#FleetLaunchTemplateConfig$LaunchTemplateSpecification */ =>  {
                let var_3081 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_launch_template_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_specification(var_3081);
            }
            ,
            s if s.matches("overrides") /* Overrides com.amazonaws.ec2#FleetLaunchTemplateConfig$Overrides */ =>  {
                let var_3082 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_fleet_launch_template_overrides_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_overrides(var_3082);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fleet_spot_maintenance_strategies(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetSpotMaintenanceStrategies, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetSpotMaintenanceStrategies::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityRebalance") /* CapacityRebalance com.amazonaws.ec2#FleetSpotMaintenanceStrategies$CapacityRebalance */ =>  {
                let var_3083 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_spot_capacity_rebalance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_rebalance(var_3083);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_capacity_reservation_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CapacityReservationOptions, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CapacityReservationOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("usageStrategy") /* UsageStrategy com.amazonaws.ec2#CapacityReservationOptions$UsageStrategy */ =>  {
                let var_3084 =
                    Some(
                        Result::<crate::model::FleetCapacityReservationUsageStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetCapacityReservationUsageStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_usage_strategy(var_3084);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_describe_fleet_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DescribeFleetError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DescribeFleetError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateAndOverrides") /* LaunchTemplateAndOverrides com.amazonaws.ec2#DescribeFleetError$LaunchTemplateAndOverrides */ =>  {
                let var_3085 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_and_overrides_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_and_overrides(var_3085);
            }
            ,
            s if s.matches("lifecycle") /* Lifecycle com.amazonaws.ec2#DescribeFleetError$Lifecycle */ =>  {
                let var_3086 =
                    Some(
                        Result::<crate::model::InstanceLifecycle, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycle::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle(var_3086);
            }
            ,
            s if s.matches("errorCode") /* ErrorCode com.amazonaws.ec2#DescribeFleetError$ErrorCode */ =>  {
                let var_3087 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_error_code(var_3087);
            }
            ,
            s if s.matches("errorMessage") /* ErrorMessage com.amazonaws.ec2#DescribeFleetError$ErrorMessage */ =>  {
                let var_3088 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_error_message(var_3088);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_describe_fleets_instances(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DescribeFleetsInstances, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DescribeFleetsInstances::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateAndOverrides") /* LaunchTemplateAndOverrides com.amazonaws.ec2#DescribeFleetsInstances$LaunchTemplateAndOverrides */ =>  {
                let var_3089 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_launch_template_and_overrides_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_and_overrides(var_3089);
            }
            ,
            s if s.matches("lifecycle") /* Lifecycle com.amazonaws.ec2#DescribeFleetsInstances$Lifecycle */ =>  {
                let var_3090 =
                    Some(
                        Result::<crate::model::InstanceLifecycle, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceLifecycle::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle(var_3090);
            }
            ,
            s if s.matches("instanceIds") /* InstanceIds com.amazonaws.ec2#DescribeFleetsInstances$InstanceIds */ =>  {
                let var_3091 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ids_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_ids(var_3091);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#DescribeFleetsInstances$InstanceType */ =>  {
                let var_3092 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3092);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#DescribeFleetsInstances$Platform */ =>  {
                let var_3093 =
                    Some(
                        Result::<crate::model::PlatformValues, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_3093);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_available_instance_capacity_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceCapacity>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AvailableInstanceCapacityList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_capacity(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_host_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::HostInstance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::HostInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#HostInstance$InstanceId */ =>  {
                let var_3094 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_3094);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#HostInstance$InstanceType */ =>  {
                let var_3095 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3095);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#HostInstance$OwnerId */ =>  {
                let var_3096 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_3096);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_status_details_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceStatusDetails>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceStatusDetailsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_status_details(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_architecture_type_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ArchitectureType>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ArchitectureTypeList$member */ =>  {
                out.push(
                    Result::<crate::model::ArchitectureType, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::ArchitectureType::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_core_count_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<i32>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#CoreCountList$member */ =>  {
                out.push(
                     {
                        <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#CoreCount`)"))
                    }
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_threads_per_core_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<i32>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ThreadsPerCoreList$member */ =>  {
                out.push(
                     {
                        <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#ThreadsPerCore`)"))
                    }
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_disk_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::DiskInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#DiskInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_disk_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_ebs_optimized_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EbsOptimizedInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EbsOptimizedInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("baselineBandwidthInMbps") /* BaselineBandwidthInMbps com.amazonaws.ec2#EbsOptimizedInfo$BaselineBandwidthInMbps */ =>  {
                let var_3097 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#BaselineBandwidthInMbps`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_baseline_bandwidth_in_mbps(var_3097);
            }
            ,
            s if s.matches("baselineThroughputInMBps") /* BaselineThroughputInMBps com.amazonaws.ec2#EbsOptimizedInfo$BaselineThroughputInMBps */ =>  {
                let var_3098 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#BaselineThroughputInMBps`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_baseline_throughput_in_m_bps(var_3098);
            }
            ,
            s if s.matches("baselineIops") /* BaselineIops com.amazonaws.ec2#EbsOptimizedInfo$BaselineIops */ =>  {
                let var_3099 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#BaselineIops`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_baseline_iops(var_3099);
            }
            ,
            s if s.matches("maximumBandwidthInMbps") /* MaximumBandwidthInMbps com.amazonaws.ec2#EbsOptimizedInfo$MaximumBandwidthInMbps */ =>  {
                let var_3100 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaximumBandwidthInMbps`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_bandwidth_in_mbps(var_3100);
            }
            ,
            s if s.matches("maximumThroughputInMBps") /* MaximumThroughputInMBps com.amazonaws.ec2#EbsOptimizedInfo$MaximumThroughputInMBps */ =>  {
                let var_3101 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#MaximumThroughputInMBps`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_throughput_in_m_bps(var_3101);
            }
            ,
            s if s.matches("maximumIops") /* MaximumIops com.amazonaws.ec2#EbsOptimizedInfo$MaximumIops */ =>  {
                let var_3102 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaximumIops`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_iops(var_3102);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_network_card_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::NetworkCardInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#NetworkCardInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_network_card_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_efa_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EfaInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EfaInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("maximumEfaInterfaces") /* MaximumEfaInterfaces com.amazonaws.ec2#EfaInfo$MaximumEfaInterfaces */ =>  {
                let var_3103 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaximumEfaInterfaces`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_efa_interfaces(var_3103);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_gpu_device_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::GpuDeviceInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#GpuDeviceInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_gpu_device_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_fpga_device_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::FpgaDeviceInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FpgaDeviceInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fpga_device_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_placement_group_strategy_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PlacementGroupStrategy>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PlacementGroupStrategyList$member */ =>  {
                out.push(
                    Result::<crate::model::PlacementGroupStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::PlacementGroupStrategy::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_inference_device_info_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InferenceDeviceInfo>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("member") /* member com.amazonaws.ec2#InferenceDeviceInfoList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_inference_device_info(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_pool_cidr_block(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PoolCidrBlock, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PoolCidrBlock::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolCidrBlock") /* Cidr com.amazonaws.ec2#PoolCidrBlock$Cidr */ =>  {
                let var_3104 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_3104);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_recurring_charge(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RecurringCharge, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RecurringCharge::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amount") /* Amount com.amazonaws.ec2#RecurringCharge$Amount */ =>  {
                let var_3105 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_amount(var_3105);
            }
            ,
            s if s.matches("frequency") /* Frequency com.amazonaws.ec2#RecurringCharge$Frequency */ =>  {
                let var_3106 =
                    Some(
                        Result::<crate::model::RecurringChargeFrequency, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RecurringChargeFrequency::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_frequency(var_3106);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_modification_result(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesModificationResult, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesModificationResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#ReservedInstancesModificationResult$ReservedInstancesId */ =>  {
                let var_3107 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_3107);
            }
            ,
            s if s.matches("targetConfiguration") /* TargetConfiguration com.amazonaws.ec2#ReservedInstancesModificationResult$TargetConfiguration */ =>  {
                let var_3108 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_reserved_instances_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_configuration(var_3108);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_id(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesId, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesId::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("reservedInstancesId") /* ReservedInstancesId com.amazonaws.ec2#ReservedInstancesId$ReservedInstancesId */ =>  {
                let var_3109 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reserved_instances_id(var_3109);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_pricing_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PricingDetail, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PricingDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("count") /* Count com.amazonaws.ec2#PricingDetail$Count */ =>  {
                let var_3110 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_3110);
            }
            ,
            s if s.matches("price") /* Price com.amazonaws.ec2#PricingDetail$Price */ =>  {
                let var_3111 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_price(var_3111);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_occurrence_day_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<i32>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#OccurrenceDaySet$member */ =>  {
                out.push(
                     {
                        <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                    }
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_spot_maintenance_strategies(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotMaintenanceStrategies, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotMaintenanceStrategies::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("capacityRebalance") /* CapacityRebalance com.amazonaws.ec2#SpotMaintenanceStrategies$CapacityRebalance */ =>  {
                let var_3112 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_capacity_rebalance(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_rebalance(var_3112);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_launch_specs_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::SpotFleetLaunchSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchSpecsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_fleet_launch_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_config_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LaunchTemplateConfig>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateConfigList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_config(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_load_balancers_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LoadBalancersConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LoadBalancersConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("classicLoadBalancersConfig") /* ClassicLoadBalancersConfig com.amazonaws.ec2#LoadBalancersConfig$ClassicLoadBalancersConfig */ =>  {
                let var_3113 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_classic_load_balancers_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_classic_load_balancers_config(var_3113);
            }
            ,
            s if s.matches("targetGroupsConfig") /* TargetGroupsConfig com.amazonaws.ec2#LoadBalancersConfig$TargetGroupsConfig */ =>  {
                let var_3114 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_target_groups_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_groups_config(var_3114);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_tag_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TagSpecification>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TagSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_iam_instance_profile_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IamInstanceProfileSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IamInstanceProfileSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#IamInstanceProfileSpecification$Arn */ =>  {
                let var_3115 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_3115);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#IamInstanceProfileSpecification$Name */ =>  {
                let var_3116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3116);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_network_interface_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::InstanceNetworkInterfaceSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceNetworkInterfaceSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_network_interface_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_spot_placement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotPlacement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotPlacement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#SpotPlacement$AvailabilityZone */ =>  {
                let var_3117 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3117);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#SpotPlacement$GroupName */ =>  {
                let var_3118 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_3118);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#SpotPlacement$Tenancy */ =>  {
                let var_3119 =
                    Some(
                        Result::<crate::model::Tenancy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tenancy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_3119);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_run_instances_monitoring_enabled(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RunInstancesMonitoringEnabled, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RunInstancesMonitoringEnabled::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#RunInstancesMonitoringEnabled$Enabled */ =>  {
                let var_3120 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_3120);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_stale_ip_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StaleIpPermission, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StaleIpPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#StaleIpPermission$FromPort */ =>  {
                let var_3121 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_3121);
            }
            ,
            s if s.matches("ipProtocol") /* IpProtocol com.amazonaws.ec2#StaleIpPermission$IpProtocol */ =>  {
                let var_3122 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_protocol(var_3122);
            }
            ,
            s if s.matches("ipRanges") /* IpRanges com.amazonaws.ec2#StaleIpPermission$IpRanges */ =>  {
                let var_3123 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_ranges(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_ranges(var_3123);
            }
            ,
            s if s.matches("prefixListIds") /* PrefixListIds com.amazonaws.ec2#StaleIpPermission$PrefixListIds */ =>  {
                let var_3124 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_prefix_list_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list_ids(var_3124);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#StaleIpPermission$ToPort */ =>  {
                let var_3125 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_3125);
            }
            ,
            s if s.matches("groups") /* UserIdGroupPairs com.amazonaws.ec2#StaleIpPermission$UserIdGroupPairs */ =>  {
                let var_3126 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_user_id_group_pair_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_id_group_pairs(var_3126);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_volume_status_action(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusAction, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#VolumeStatusAction$Code */ =>  {
                let var_3127 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_3127);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#VolumeStatusAction$Description */ =>  {
                let var_3128 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3128);
            }
            ,
            s if s.matches("eventId") /* EventId com.amazonaws.ec2#VolumeStatusAction$EventId */ =>  {
                let var_3129 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_id(var_3129);
            }
            ,
            s if s.matches("eventType") /* EventType com.amazonaws.ec2#VolumeStatusAction$EventType */ =>  {
                let var_3130 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_type(var_3130);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_volume_status_event(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusEvent, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusEvent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#VolumeStatusEvent$Description */ =>  {
                let var_3131 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3131);
            }
            ,
            s if s.matches("eventId") /* EventId com.amazonaws.ec2#VolumeStatusEvent$EventId */ =>  {
                let var_3132 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_id(var_3132);
            }
            ,
            s if s.matches("eventType") /* EventType com.amazonaws.ec2#VolumeStatusEvent$EventType */ =>  {
                let var_3133 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_event_type(var_3133);
            }
            ,
            s if s.matches("notAfter") /* NotAfter com.amazonaws.ec2#VolumeStatusEvent$NotAfter */ =>  {
                let var_3134 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_not_after(var_3134);
            }
            ,
            s if s.matches("notBefore") /* NotBefore com.amazonaws.ec2#VolumeStatusEvent$NotBefore */ =>  {
                let var_3135 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_not_before(var_3135);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#VolumeStatusEvent$InstanceId */ =>  {
                let var_3136 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_3136);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_volume_status_details_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::VolumeStatusDetails>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#VolumeStatusDetailsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_volume_status_details(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_volume_status_attachment_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusAttachmentStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusAttachmentStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ioPerformance") /* IoPerformance com.amazonaws.ec2#VolumeStatusAttachmentStatus$IoPerformance */ =>  {
                let var_3137 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_io_performance(var_3137);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#VolumeStatusAttachmentStatus$InstanceId */ =>  {
                let var_3138 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_3138);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_private_dns_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrivateDnsDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrivateDnsDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#PrivateDnsDetails$PrivateDnsName */ =>  {
                let var_3139 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_3139);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disable_fast_snapshot_restore_state_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DisableFastSnapshotRestoreStateErrorItem, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::DisableFastSnapshotRestoreStateErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#DisableFastSnapshotRestoreStateErrorItem$AvailabilityZone */ =>  {
                let var_3140 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3140);
            }
            ,
            s if s.matches("error") /* Error com.amazonaws.ec2#DisableFastSnapshotRestoreStateErrorItem$Error */ =>  {
                let var_3141 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_disable_fast_snapshot_restore_state_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_3141);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_enable_fast_snapshot_restore_state_error_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EnableFastSnapshotRestoreStateErrorItem, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::EnableFastSnapshotRestoreStateErrorItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#EnableFastSnapshotRestoreStateErrorItem$AvailabilityZone */ =>  {
                let var_3142 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3142);
            }
            ,
            s if s.matches("error") /* Error com.amazonaws.ec2#EnableFastSnapshotRestoreStateErrorItem$Error */ =>  {
                let var_3143 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_enable_fast_snapshot_restore_state_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error(var_3143);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_ebs_block_device(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateEbsBlockDevice, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateEbsBlockDevice::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("encrypted") /* Encrypted com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$Encrypted */ =>  {
                let var_3144 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_encrypted(var_3144);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$DeleteOnTermination */ =>  {
                let var_3145 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_3145);
            }
            ,
            s if s.matches("iops") /* Iops com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$Iops */ =>  {
                let var_3146 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_iops(var_3146);
            }
            ,
            s if s.matches("kmsKeyId") /* KmsKeyId com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$KmsKeyId */ =>  {
                let var_3147 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_3147);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$SnapshotId */ =>  {
                let var_3148 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_3148);
            }
            ,
            s if s.matches("volumeSize") /* VolumeSize com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$VolumeSize */ =>  {
                let var_3149 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_volume_size(var_3149);
            }
            ,
            s if s.matches("volumeType") /* VolumeType com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$VolumeType */ =>  {
                let var_3150 =
                    Some(
                        Result::<crate::model::VolumeType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_volume_type(var_3150);
            }
            ,
            s if s.matches("throughput") /* Throughput com.amazonaws.ec2#LaunchTemplateEbsBlockDevice$Throughput */ =>  {
                let var_3151 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_throughput(var_3151);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_group_id_string_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupId") /* member com.amazonaws.ec2#GroupIdStringList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv6_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceIpv6Address>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv6AddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv6_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_private_ip_address_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::PrivateIpAddressSpecification>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrivateIpAddressSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_private_ip_address_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv4_prefix_list_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Ipv4PrefixSpecificationResponse>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv4PrefixListResponse$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv4_prefix_specification_response(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_prefix_list_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Ipv6PrefixSpecificationResponse>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6PrefixListResponse$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_prefix_specification_response(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_import_instance_volume_detail_item(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ImportInstanceVolumeDetailItem, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ImportInstanceVolumeDetailItem::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ImportInstanceVolumeDetailItem$AvailabilityZone */ =>  {
                let var_3152 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3152);
            }
            ,
            s if s.matches("bytesConverted") /* BytesConverted com.amazonaws.ec2#ImportInstanceVolumeDetailItem$BytesConverted */ =>  {
                let var_3153 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bytes_converted(var_3153);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ImportInstanceVolumeDetailItem$Description */ =>  {
                let var_3154 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3154);
            }
            ,
            s if s.matches("image") /* Image com.amazonaws.ec2#ImportInstanceVolumeDetailItem$Image */ =>  {
                let var_3155 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_disk_image_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_image(var_3155);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ImportInstanceVolumeDetailItem$Status */ =>  {
                let var_3156 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3156);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ImportInstanceVolumeDetailItem$StatusMessage */ =>  {
                let var_3157 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_3157);
            }
            ,
            s if s.matches("volume") /* Volume com.amazonaws.ec2#ImportInstanceVolumeDetailItem$Volume */ =>  {
                let var_3158 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_disk_image_volume_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_volume(var_3158);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ip_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IpRange, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IpRange::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrIp") /* CidrIp com.amazonaws.ec2#IpRange$CidrIp */ =>  {
                let var_3159 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_ip(var_3159);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#IpRange$Description */ =>  {
                let var_3160 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3160);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_range(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6Range, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6Range::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrIpv6") /* CidrIpv6 com.amazonaws.ec2#Ipv6Range$CidrIpv6 */ =>  {
                let var_3161 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_ipv6(var_3161);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#Ipv6Range$Description */ =>  {
                let var_3162 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3162);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_prefix_list_id(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrefixListId, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrefixListId::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#PrefixListId$Description */ =>  {
                let var_3163 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3163);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#PrefixListId$PrefixListId */ =>  {
                let var_3164 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_3164);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_user_id_group_pair(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::UserIdGroupPair, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::UserIdGroupPair::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#UserIdGroupPair$Description */ =>  {
                let var_3165 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3165);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#UserIdGroupPair$GroupId */ =>  {
                let var_3166 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_3166);
            }
            ,
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#UserIdGroupPair$GroupName */ =>  {
                let var_3167 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_3167);
            }
            ,
            s if s.matches("peeringStatus") /* PeeringStatus com.amazonaws.ec2#UserIdGroupPair$PeeringStatus */ =>  {
                let var_3168 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_peering_status(var_3168);
            }
            ,
            s if s.matches("userId") /* UserId com.amazonaws.ec2#UserIdGroupPair$UserId */ =>  {
                let var_3169 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_3169);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#UserIdGroupPair$VpcId */ =>  {
                let var_3170 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_3170);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#UserIdGroupPair$VpcPeeringConnectionId */ =>  {
                let var_3171 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_3171);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_elastic_gpu_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ElasticGpuAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ElasticGpuAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticGpuId") /* ElasticGpuId com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuId */ =>  {
                let var_3172 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_id(var_3172);
            }
            ,
            s if s.matches("elasticGpuAssociationId") /* ElasticGpuAssociationId com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationId */ =>  {
                let var_3173 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_id(var_3173);
            }
            ,
            s if s.matches("elasticGpuAssociationState") /* ElasticGpuAssociationState com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationState */ =>  {
                let var_3174 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_state(var_3174);
            }
            ,
            s if s.matches("elasticGpuAssociationTime") /* ElasticGpuAssociationTime com.amazonaws.ec2#ElasticGpuAssociation$ElasticGpuAssociationTime */ =>  {
                let var_3175 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_association_time(var_3175);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_elastic_inference_accelerator_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ElasticInferenceAcceleratorAssociation, aws_smithy_xml::decode::XmlError>
{
    #[allow(unused_mut)]
    let mut builder = crate::model::ElasticInferenceAcceleratorAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticInferenceAcceleratorArn") /* ElasticInferenceAcceleratorArn com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorArn */ =>  {
                let var_3176 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_arn(var_3176);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationId") /* ElasticInferenceAcceleratorAssociationId com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationId */ =>  {
                let var_3177 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_id(var_3177);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationState") /* ElasticInferenceAcceleratorAssociationState com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationState */ =>  {
                let var_3178 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_state(var_3178);
            }
            ,
            s if s.matches("elasticInferenceAcceleratorAssociationTime") /* ElasticInferenceAcceleratorAssociationTime com.amazonaws.ec2#ElasticInferenceAcceleratorAssociation$ElasticInferenceAcceleratorAssociationTime */ =>  {
                let var_3179 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_elastic_inference_accelerator_association_time(var_3179);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_network_interface(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceNetworkInterface, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceNetworkInterface::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#InstanceNetworkInterface$Association */ =>  {
                let var_3180 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_3180);
            }
            ,
            s if s.matches("attachment") /* Attachment com.amazonaws.ec2#InstanceNetworkInterface$Attachment */ =>  {
                let var_3181 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment(var_3181);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#InstanceNetworkInterface$Description */ =>  {
                let var_3182 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3182);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#InstanceNetworkInterface$Groups */ =>  {
                let var_3183 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_3183);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#InstanceNetworkInterface$Ipv6Addresses */ =>  {
                let var_3184 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_3184);
            }
            ,
            s if s.matches("macAddress") /* MacAddress com.amazonaws.ec2#InstanceNetworkInterface$MacAddress */ =>  {
                let var_3185 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_mac_address(var_3185);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#InstanceNetworkInterface$NetworkInterfaceId */ =>  {
                let var_3186 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_3186);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#InstanceNetworkInterface$OwnerId */ =>  {
                let var_3187 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_3187);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#InstanceNetworkInterface$PrivateDnsName */ =>  {
                let var_3188 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_3188);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#InstanceNetworkInterface$PrivateIpAddress */ =>  {
                let var_3189 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_3189);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#InstanceNetworkInterface$PrivateIpAddresses */ =>  {
                let var_3190 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_private_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_3190);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#InstanceNetworkInterface$SourceDestCheck */ =>  {
                let var_3191 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_3191);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceNetworkInterface$Status */ =>  {
                let var_3192 =
                    Some(
                        Result::<crate::model::NetworkInterfaceStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::NetworkInterfaceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3192);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#InstanceNetworkInterface$SubnetId */ =>  {
                let var_3193 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_3193);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#InstanceNetworkInterface$VpcId */ =>  {
                let var_3194 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_3194);
            }
            ,
            s if s.matches("interfaceType") /* InterfaceType com.amazonaws.ec2#InstanceNetworkInterface$InterfaceType */ =>  {
                let var_3195 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_3195);
            }
            ,
            s if s.matches("ipv4PrefixSet") /* Ipv4Prefixes com.amazonaws.ec2#InstanceNetworkInterface$Ipv4Prefixes */ =>  {
                let var_3196 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv4_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_3196);
            }
            ,
            s if s.matches("ipv6PrefixSet") /* Ipv6Prefixes com.amazonaws.ec2#InstanceNetworkInterface$Ipv6Prefixes */ =>  {
                let var_3197 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_3197);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_license_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LicenseConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LicenseConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("licenseConfigurationArn") /* LicenseConfigurationArn com.amazonaws.ec2#LicenseConfiguration$LicenseConfigurationArn */ =>  {
                let var_3198 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_license_configuration_arn(var_3198);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_acl_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisAclRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisAclRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#AnalysisAclRule$Cidr */ =>  {
                let var_3199 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_3199);
            }
            ,
            s if s.matches("egress") /* Egress com.amazonaws.ec2#AnalysisAclRule$Egress */ =>  {
                let var_3200 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_egress(var_3200);
            }
            ,
            s if s.matches("portRange") /* PortRange com.amazonaws.ec2#AnalysisAclRule$PortRange */ =>  {
                let var_3201 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_port_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_port_range(var_3201);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#AnalysisAclRule$Protocol */ =>  {
                let var_3202 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_3202);
            }
            ,
            s if s.matches("ruleAction") /* RuleAction com.amazonaws.ec2#AnalysisAclRule$RuleAction */ =>  {
                let var_3203 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_action(var_3203);
            }
            ,
            s if s.matches("ruleNumber") /* RuleNumber com.amazonaws.ec2#AnalysisAclRule$RuleNumber */ =>  {
                let var_3204 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_rule_number(var_3204);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_component(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisComponent, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisComponent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("id") /* Id com.amazonaws.ec2#AnalysisComponent$Id */ =>  {
                let var_3205 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_3205);
            }
            ,
            s if s.matches("arn") /* Arn com.amazonaws.ec2#AnalysisComponent$Arn */ =>  {
                let var_3206 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_3206);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#AnalysisComponent$Name */ =>  {
                let var_3207 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3207);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_packet_header(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisPacketHeader, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisPacketHeader::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationAddressSet") /* DestinationAddresses com.amazonaws.ec2#AnalysisPacketHeader$DestinationAddresses */ =>  {
                let var_3208 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_addresses(var_3208);
            }
            ,
            s if s.matches("destinationPortRangeSet") /* DestinationPortRanges com.amazonaws.ec2#AnalysisPacketHeader$DestinationPortRanges */ =>  {
                let var_3209 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_port_ranges(var_3209);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#AnalysisPacketHeader$Protocol */ =>  {
                let var_3210 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_3210);
            }
            ,
            s if s.matches("sourceAddressSet") /* SourceAddresses com.amazonaws.ec2#AnalysisPacketHeader$SourceAddresses */ =>  {
                let var_3211 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_addresses(var_3211);
            }
            ,
            s if s.matches("sourcePortRangeSet") /* SourcePortRanges com.amazonaws.ec2#AnalysisPacketHeader$SourcePortRanges */ =>  {
                let var_3212 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_port_ranges(var_3212);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_route_table_route(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisRouteTableRoute, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisRouteTableRoute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("destinationCidr") /* DestinationCidr com.amazonaws.ec2#AnalysisRouteTableRoute$DestinationCidr */ =>  {
                let var_3213 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_cidr(var_3213);
            }
            ,
            s if s.matches("destinationPrefixListId") /* DestinationPrefixListId com.amazonaws.ec2#AnalysisRouteTableRoute$DestinationPrefixListId */ =>  {
                let var_3214 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_destination_prefix_list_id(var_3214);
            }
            ,
            s if s.matches("egressOnlyInternetGatewayId") /* EgressOnlyInternetGatewayId com.amazonaws.ec2#AnalysisRouteTableRoute$EgressOnlyInternetGatewayId */ =>  {
                let var_3215 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_egress_only_internet_gateway_id(var_3215);
            }
            ,
            s if s.matches("gatewayId") /* GatewayId com.amazonaws.ec2#AnalysisRouteTableRoute$GatewayId */ =>  {
                let var_3216 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_gateway_id(var_3216);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#AnalysisRouteTableRoute$InstanceId */ =>  {
                let var_3217 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_3217);
            }
            ,
            s if s.matches("natGatewayId") /* NatGatewayId com.amazonaws.ec2#AnalysisRouteTableRoute$NatGatewayId */ =>  {
                let var_3218 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nat_gateway_id(var_3218);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#AnalysisRouteTableRoute$NetworkInterfaceId */ =>  {
                let var_3219 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_3219);
            }
            ,
            s if s.matches("origin") /* Origin com.amazonaws.ec2#AnalysisRouteTableRoute$Origin */ =>  {
                let var_3220 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_origin(var_3220);
            }
            ,
            s if s.matches("transitGatewayId") /* TransitGatewayId com.amazonaws.ec2#AnalysisRouteTableRoute$TransitGatewayId */ =>  {
                let var_3221 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_id(var_3221);
            }
            ,
            s if s.matches("vpcPeeringConnectionId") /* VpcPeeringConnectionId com.amazonaws.ec2#AnalysisRouteTableRoute$VpcPeeringConnectionId */ =>  {
                let var_3222 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_peering_connection_id(var_3222);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_security_group_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisSecurityGroupRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisSecurityGroupRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#AnalysisSecurityGroupRule$Cidr */ =>  {
                let var_3223 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_3223);
            }
            ,
            s if s.matches("direction") /* Direction com.amazonaws.ec2#AnalysisSecurityGroupRule$Direction */ =>  {
                let var_3224 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_direction(var_3224);
            }
            ,
            s if s.matches("securityGroupId") /* SecurityGroupId com.amazonaws.ec2#AnalysisSecurityGroupRule$SecurityGroupId */ =>  {
                let var_3225 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_security_group_id(var_3225);
            }
            ,
            s if s.matches("portRange") /* PortRange com.amazonaws.ec2#AnalysisSecurityGroupRule$PortRange */ =>  {
                let var_3226 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_port_range(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_port_range(var_3226);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#AnalysisSecurityGroupRule$PrefixListId */ =>  {
                let var_3227 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_3227);
            }
            ,
            s if s.matches("protocol") /* Protocol com.amazonaws.ec2#AnalysisSecurityGroupRule$Protocol */ =>  {
                let var_3228 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_3228);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ip_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpAddressList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_analysis_load_balancer_listener(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisLoadBalancerListener, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisLoadBalancerListener::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("loadBalancerPort") /* LoadBalancerPort com.amazonaws.ec2#AnalysisLoadBalancerListener$LoadBalancerPort */ =>  {
                let var_3229 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_load_balancer_port(var_3229);
            }
            ,
            s if s.matches("instancePort") /* InstancePort com.amazonaws.ec2#AnalysisLoadBalancerListener$InstancePort */ =>  {
                let var_3230 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_port(var_3230);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analysis_load_balancer_target(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalysisLoadBalancerTarget, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalysisLoadBalancerTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("address") /* Address com.amazonaws.ec2#AnalysisLoadBalancerTarget$Address */ =>  {
                let var_3231 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_address(var_3231);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#AnalysisLoadBalancerTarget$AvailabilityZone */ =>  {
                let var_3232 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3232);
            }
            ,
            s if s.matches("instance") /* Instance com.amazonaws.ec2#AnalysisLoadBalancerTarget$Instance */ =>  {
                let var_3233 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance(var_3233);
            }
            ,
            s if s.matches("port") /* Port com.amazonaws.ec2#AnalysisLoadBalancerTarget$Port */ =>  {
                let var_3234 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_3234);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_analysis_component_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::AnalysisComponent>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#AnalysisComponentList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_analysis_component(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_port_range_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::PortRange>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PortRangeList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_port_range(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_string_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#StringList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_placement_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PlacementResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PlacementResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#PlacementResponse$GroupName */ =>  {
                let var_3235 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_3235);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_packet_header_statement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PacketHeaderStatement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PacketHeaderStatement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sourceAddressSet") /* SourceAddresses com.amazonaws.ec2#PacketHeaderStatement$SourceAddresses */ =>  {
                let var_3236 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_addresses(var_3236);
            }
            ,
            s if s.matches("destinationAddressSet") /* DestinationAddresses com.amazonaws.ec2#PacketHeaderStatement$DestinationAddresses */ =>  {
                let var_3237 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_addresses(var_3237);
            }
            ,
            s if s.matches("sourcePortSet") /* SourcePorts com.amazonaws.ec2#PacketHeaderStatement$SourcePorts */ =>  {
                let var_3238 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_ports(var_3238);
            }
            ,
            s if s.matches("destinationPortSet") /* DestinationPorts com.amazonaws.ec2#PacketHeaderStatement$DestinationPorts */ =>  {
                let var_3239 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_ports(var_3239);
            }
            ,
            s if s.matches("sourcePrefixListSet") /* SourcePrefixLists com.amazonaws.ec2#PacketHeaderStatement$SourcePrefixLists */ =>  {
                let var_3240 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_prefix_lists(var_3240);
            }
            ,
            s if s.matches("destinationPrefixListSet") /* DestinationPrefixLists com.amazonaws.ec2#PacketHeaderStatement$DestinationPrefixLists */ =>  {
                let var_3241 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_prefix_lists(var_3241);
            }
            ,
            s if s.matches("protocolSet") /* Protocols com.amazonaws.ec2#PacketHeaderStatement$Protocols */ =>  {
                let var_3242 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_protocol_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_protocols(var_3242);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_resource_statement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ResourceStatement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ResourceStatement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceSet") /* Resources com.amazonaws.ec2#ResourceStatement$Resources */ =>  {
                let var_3243 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resources(var_3243);
            }
            ,
            s if s.matches("resourceTypeSet") /* ResourceTypes com.amazonaws.ec2#ResourceStatement$ResourceTypes */ =>  {
                let var_3244 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_types(var_3244);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_through_resources_statement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ThroughResourcesStatement, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ThroughResourcesStatement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceStatement") /* ResourceStatement com.amazonaws.ec2#ThroughResourcesStatement$ResourceStatement */ =>  {
                let var_3245 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_resource_statement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_statement(var_3245);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_phase1_encryption_algorithms_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase1EncryptionAlgorithmsListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase1EncryptionAlgorithmsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase1_encryption_algorithms_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_phase2_encryption_algorithms_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase2EncryptionAlgorithmsListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase2EncryptionAlgorithmsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase2_encryption_algorithms_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_phase1_integrity_algorithms_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase1IntegrityAlgorithmsListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase1IntegrityAlgorithmsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase1_integrity_algorithms_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_phase2_integrity_algorithms_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase2IntegrityAlgorithmsListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase2IntegrityAlgorithmsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase2_integrity_algorithms_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_phase1_dh_group_numbers_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase1DhGroupNumbersListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase1DHGroupNumbersList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase1_dh_group_numbers_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_phase2_dh_group_numbers_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Phase2DhGroupNumbersListValue>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Phase2DHGroupNumbersList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_phase2_dh_group_numbers_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ike_versions_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::IkeVersionsListValue>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IKEVersionsList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ike_versions_list_value(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_directory_service_authentication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DirectoryServiceAuthentication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DirectoryServiceAuthentication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("directoryId") /* DirectoryId com.amazonaws.ec2#DirectoryServiceAuthentication$DirectoryId */ =>  {
                let var_3246 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_directory_id(var_3246);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_certificate_authentication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CertificateAuthentication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CertificateAuthentication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientRootCertificateChain") /* ClientRootCertificateChain com.amazonaws.ec2#CertificateAuthentication$ClientRootCertificateChain */ =>  {
                let var_3247 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_root_certificate_chain(var_3247);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_federated_authentication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FederatedAuthentication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FederatedAuthentication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("samlProviderArn") /* SamlProviderArn com.amazonaws.ec2#FederatedAuthentication$SamlProviderArn */ =>  {
                let var_3248 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_saml_provider_arn(var_3248);
            }
            ,
            s if s.matches("selfServiceSamlProviderArn") /* SelfServiceSamlProviderArn com.amazonaws.ec2#FederatedAuthentication$SelfServiceSamlProviderArn */ =>  {
                let var_3249 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_self_service_saml_provider_arn(var_3249);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_fleet_launch_template_overrides_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::FleetLaunchTemplateOverrides>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#FleetLaunchTemplateOverridesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_fleet_launch_template_overrides(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_fleet_spot_capacity_rebalance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FleetSpotCapacityRebalance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FleetSpotCapacityRebalance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replacementStrategy") /* ReplacementStrategy com.amazonaws.ec2#FleetSpotCapacityRebalance$ReplacementStrategy */ =>  {
                let var_3250 =
                    Some(
                        Result::<crate::model::FleetReplacementStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FleetReplacementStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_replacement_strategy(var_3250);
            }
            ,
            s if s.matches("terminationDelay") /* TerminationDelay com.amazonaws.ec2#FleetSpotCapacityRebalance$TerminationDelay */ =>  {
                let var_3251 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_termination_delay(var_3251);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_capacity(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceCapacity, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceCapacity::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availableCapacity") /* AvailableCapacity com.amazonaws.ec2#InstanceCapacity$AvailableCapacity */ =>  {
                let var_3252 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_available_capacity(var_3252);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceCapacity$InstanceType */ =>  {
                let var_3253 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3253);
            }
            ,
            s if s.matches("totalCapacity") /* TotalCapacity com.amazonaws.ec2#InstanceCapacity$TotalCapacity */ =>  {
                let var_3254 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_capacity(var_3254);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_status_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceStatusDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceStatusDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("impairedSince") /* ImpairedSince com.amazonaws.ec2#InstanceStatusDetails$ImpairedSince */ =>  {
                let var_3255 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_impaired_since(var_3255);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#InstanceStatusDetails$Name */ =>  {
                let var_3256 =
                    Some(
                        Result::<crate::model::StatusName, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StatusName::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3256);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceStatusDetails$Status */ =>  {
                let var_3257 =
                    Some(
                        Result::<crate::model::StatusType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StatusType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3257);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disk_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DiskInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DiskInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sizeInGB") /* SizeInGB com.amazonaws.ec2#DiskInfo$SizeInGB */ =>  {
                let var_3258 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.ec2#DiskSize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size_in_gb(var_3258);
            }
            ,
            s if s.matches("count") /* Count com.amazonaws.ec2#DiskInfo$Count */ =>  {
                let var_3259 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#DiskCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_3259);
            }
            ,
            s if s.matches("type") /* Type com.amazonaws.ec2#DiskInfo$Type */ =>  {
                let var_3260 =
                    Some(
                        Result::<crate::model::DiskType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DiskType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_3260);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_network_card_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NetworkCardInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NetworkCardInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#NetworkCardInfo$NetworkCardIndex */ =>  {
                let var_3261 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#NetworkCardIndex`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_3261);
            }
            ,
            s if s.matches("networkPerformance") /* NetworkPerformance com.amazonaws.ec2#NetworkCardInfo$NetworkPerformance */ =>  {
                let var_3262 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_performance(var_3262);
            }
            ,
            s if s.matches("maximumNetworkInterfaces") /* MaximumNetworkInterfaces com.amazonaws.ec2#NetworkCardInfo$MaximumNetworkInterfaces */ =>  {
                let var_3263 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#MaxNetworkInterfaces`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_maximum_network_interfaces(var_3263);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_gpu_device_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GpuDeviceInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GpuDeviceInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("name") /* Name com.amazonaws.ec2#GpuDeviceInfo$Name */ =>  {
                let var_3264 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3264);
            }
            ,
            s if s.matches("manufacturer") /* Manufacturer com.amazonaws.ec2#GpuDeviceInfo$Manufacturer */ =>  {
                let var_3265 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_manufacturer(var_3265);
            }
            ,
            s if s.matches("count") /* Count com.amazonaws.ec2#GpuDeviceInfo$Count */ =>  {
                let var_3266 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#GpuDeviceCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_3266);
            }
            ,
            s if s.matches("memoryInfo") /* MemoryInfo com.amazonaws.ec2#GpuDeviceInfo$MemoryInfo */ =>  {
                let var_3267 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_gpu_device_memory_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_info(var_3267);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fpga_device_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaDeviceInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaDeviceInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("name") /* Name com.amazonaws.ec2#FpgaDeviceInfo$Name */ =>  {
                let var_3268 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3268);
            }
            ,
            s if s.matches("manufacturer") /* Manufacturer com.amazonaws.ec2#FpgaDeviceInfo$Manufacturer */ =>  {
                let var_3269 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_manufacturer(var_3269);
            }
            ,
            s if s.matches("count") /* Count com.amazonaws.ec2#FpgaDeviceInfo$Count */ =>  {
                let var_3270 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#FpgaDeviceCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_3270);
            }
            ,
            s if s.matches("memoryInfo") /* MemoryInfo com.amazonaws.ec2#FpgaDeviceInfo$MemoryInfo */ =>  {
                let var_3271 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fpga_device_memory_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_info(var_3271);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inference_device_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InferenceDeviceInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InferenceDeviceInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("count") /* Count com.amazonaws.ec2#InferenceDeviceInfo$Count */ =>  {
                let var_3272 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#InferenceDeviceCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_count(var_3272);
            }
            ,
            s if s.matches("name") /* Name com.amazonaws.ec2#InferenceDeviceInfo$Name */ =>  {
                let var_3273 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3273);
            }
            ,
            s if s.matches("manufacturer") /* Manufacturer com.amazonaws.ec2#InferenceDeviceInfo$Manufacturer */ =>  {
                let var_3274 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_manufacturer(var_3274);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_reserved_instances_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReservedInstancesConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReservedInstancesConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ReservedInstancesConfiguration$AvailabilityZone */ =>  {
                let var_3275 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3275);
            }
            ,
            s if s.matches("instanceCount") /* InstanceCount com.amazonaws.ec2#ReservedInstancesConfiguration$InstanceCount */ =>  {
                let var_3276 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_count(var_3276);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#ReservedInstancesConfiguration$InstanceType */ =>  {
                let var_3277 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3277);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#ReservedInstancesConfiguration$Platform */ =>  {
                let var_3278 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_3278);
            }
            ,
            s if s.matches("scope") /* Scope com.amazonaws.ec2#ReservedInstancesConfiguration$Scope */ =>  {
                let var_3279 =
                    Some(
                        Result::<crate::model::Scope, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Scope::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_scope(var_3279);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_capacity_rebalance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotCapacityRebalance, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotCapacityRebalance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replacementStrategy") /* ReplacementStrategy com.amazonaws.ec2#SpotCapacityRebalance$ReplacementStrategy */ =>  {
                let var_3280 =
                    Some(
                        Result::<crate::model::ReplacementStrategy, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReplacementStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_replacement_strategy(var_3280);
            }
            ,
            s if s.matches("terminationDelay") /* TerminationDelay com.amazonaws.ec2#SpotCapacityRebalance$TerminationDelay */ =>  {
                let var_3281 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_termination_delay(var_3281);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_fleet_launch_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotFleetLaunchSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotFleetLaunchSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupSet") /* SecurityGroups com.amazonaws.ec2#SpotFleetLaunchSpecification$SecurityGroups */ =>  {
                let var_3282 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_groups(var_3282);
            }
            ,
            s if s.matches("addressingType") /* AddressingType com.amazonaws.ec2#SpotFleetLaunchSpecification$AddressingType */ =>  {
                let var_3283 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_addressing_type(var_3283);
            }
            ,
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2#SpotFleetLaunchSpecification$BlockDeviceMappings */ =>  {
                let var_3284 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_3284);
            }
            ,
            s if s.matches("ebsOptimized") /* EbsOptimized com.amazonaws.ec2#SpotFleetLaunchSpecification$EbsOptimized */ =>  {
                let var_3285 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ebs_optimized(var_3285);
            }
            ,
            s if s.matches("iamInstanceProfile") /* IamInstanceProfile com.amazonaws.ec2#SpotFleetLaunchSpecification$IamInstanceProfile */ =>  {
                let var_3286 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_iam_instance_profile_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_iam_instance_profile(var_3286);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#SpotFleetLaunchSpecification$ImageId */ =>  {
                let var_3287 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_3287);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#SpotFleetLaunchSpecification$InstanceType */ =>  {
                let var_3288 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3288);
            }
            ,
            s if s.matches("kernelId") /* KernelId com.amazonaws.ec2#SpotFleetLaunchSpecification$KernelId */ =>  {
                let var_3289 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_3289);
            }
            ,
            s if s.matches("keyName") /* KeyName com.amazonaws.ec2#SpotFleetLaunchSpecification$KeyName */ =>  {
                let var_3290 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_name(var_3290);
            }
            ,
            s if s.matches("monitoring") /* Monitoring com.amazonaws.ec2#SpotFleetLaunchSpecification$Monitoring */ =>  {
                let var_3291 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_fleet_monitoring(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_monitoring(var_3291);
            }
            ,
            s if s.matches("networkInterfaceSet") /* NetworkInterfaces com.amazonaws.ec2#SpotFleetLaunchSpecification$NetworkInterfaces */ =>  {
                let var_3292 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_network_interface_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interfaces(var_3292);
            }
            ,
            s if s.matches("placement") /* Placement com.amazonaws.ec2#SpotFleetLaunchSpecification$Placement */ =>  {
                let var_3293 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_spot_placement(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement(var_3293);
            }
            ,
            s if s.matches("ramdiskId") /* RamdiskId com.amazonaws.ec2#SpotFleetLaunchSpecification$RamdiskId */ =>  {
                let var_3294 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_3294);
            }
            ,
            s if s.matches("spotPrice") /* SpotPrice com.amazonaws.ec2#SpotFleetLaunchSpecification$SpotPrice */ =>  {
                let var_3295 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_price(var_3295);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#SpotFleetLaunchSpecification$SubnetId */ =>  {
                let var_3296 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_3296);
            }
            ,
            s if s.matches("userData") /* UserData com.amazonaws.ec2#SpotFleetLaunchSpecification$UserData */ =>  {
                let var_3297 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_data(var_3297);
            }
            ,
            s if s.matches("weightedCapacity") /* WeightedCapacity com.amazonaws.ec2#SpotFleetLaunchSpecification$WeightedCapacity */ =>  {
                let var_3298 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weighted_capacity(var_3298);
            }
            ,
            s if s.matches("tagSpecificationSet") /* TagSpecifications com.amazonaws.ec2#SpotFleetLaunchSpecification$TagSpecifications */ =>  {
                let var_3299 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_spot_fleet_tag_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_specifications(var_3299);
            }
            ,
            s if s.matches("instanceRequirements") /* InstanceRequirements com.amazonaws.ec2#SpotFleetLaunchSpecification$InstanceRequirements */ =>  {
                let var_3300 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_requirements(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_requirements(var_3300);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateSpecification") /* LaunchTemplateSpecification com.amazonaws.ec2#LaunchTemplateConfig$LaunchTemplateSpecification */ =>  {
                let var_3301 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_fleet_launch_template_specification(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_specification(var_3301);
            }
            ,
            s if s.matches("overrides") /* Overrides com.amazonaws.ec2#LaunchTemplateConfig$Overrides */ =>  {
                let var_3302 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_launch_template_overrides_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_overrides(var_3302);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_classic_load_balancers_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClassicLoadBalancersConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClassicLoadBalancersConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("classicLoadBalancers") /* ClassicLoadBalancers com.amazonaws.ec2#ClassicLoadBalancersConfig$ClassicLoadBalancers */ =>  {
                let var_3303 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_classic_load_balancers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_classic_load_balancers(var_3303);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_groups_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetGroupsConfig, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetGroupsConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("targetGroups") /* TargetGroups com.amazonaws.ec2#TargetGroupsConfig$TargetGroups */ =>  {
                let var_3304 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_target_groups(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_groups(var_3304);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tag_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TagSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TagSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#TagSpecification$ResourceType */ =>  {
                let var_3305 =
                    Some(
                        Result::<crate::model::ResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_3305);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.ec2#TagSpecification$Tags */ =>  {
                let var_3306 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_3306);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_network_interface_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceNetworkInterfaceSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceNetworkInterfaceSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associatePublicIpAddress") /* AssociatePublicIpAddress com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$AssociatePublicIpAddress */ =>  {
                let var_3307 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_associate_public_ip_address(var_3307);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$DeleteOnTermination */ =>  {
                let var_3308 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_3308);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Description */ =>  {
                let var_3309 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3309);
            }
            ,
            s if s.matches("deviceIndex") /* DeviceIndex com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$DeviceIndex */ =>  {
                let var_3310 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_device_index(var_3310);
            }
            ,
            s if s.matches("SecurityGroupId") /* Groups com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Groups */ =>  {
                let var_3311 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_security_group_id_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_3311);
            }
            ,
            s if s.matches("ipv6AddressCount") /* Ipv6AddressCount com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv6AddressCount */ =>  {
                let var_3312 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_address_count(var_3312);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv6Addresses */ =>  {
                let var_3313 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_instance_ipv6_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_3313);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$NetworkInterfaceId */ =>  {
                let var_3314 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_3314);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$PrivateIpAddress */ =>  {
                let var_3315 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_3315);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$PrivateIpAddresses */ =>  {
                let var_3316 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_private_ip_address_specification_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_3316);
            }
            ,
            s if s.matches("secondaryPrivateIpAddressCount") /* SecondaryPrivateIpAddressCount com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$SecondaryPrivateIpAddressCount */ =>  {
                let var_3317 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_secondary_private_ip_address_count(var_3317);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$SubnetId */ =>  {
                let var_3318 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_3318);
            }
            ,
            s if s.matches("AssociateCarrierIpAddress") /* AssociateCarrierIpAddress com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$AssociateCarrierIpAddress */ =>  {
                let var_3319 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_associate_carrier_ip_address(var_3319);
            }
            ,
            s if s.matches("InterfaceType") /* InterfaceType com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$InterfaceType */ =>  {
                let var_3320 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_3320);
            }
            ,
            s if s.matches("NetworkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$NetworkCardIndex */ =>  {
                let var_3321 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_3321);
            }
            ,
            s if s.matches("Ipv4Prefix") /* Ipv4Prefixes com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv4Prefixes */ =>  {
                let var_3322 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv4_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_3322);
            }
            ,
            s if s.matches("Ipv4PrefixCount") /* Ipv4PrefixCount com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv4PrefixCount */ =>  {
                let var_3323 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix_count(var_3323);
            }
            ,
            s if s.matches("Ipv6Prefix") /* Ipv6Prefixes com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv6Prefixes */ =>  {
                let var_3324 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_ipv6_prefix_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_3324);
            }
            ,
            s if s.matches("Ipv6PrefixCount") /* Ipv6PrefixCount com.amazonaws.ec2#InstanceNetworkInterfaceSpecification$Ipv6PrefixCount */ =>  {
                let var_3325 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix_count(var_3325);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_ip_ranges(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#IpRanges$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_prefix_list_id_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#PrefixListIdSet$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_user_id_group_pair_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::UserIdGroupPair>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#UserIdGroupPairSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_user_id_group_pair(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_volume_status_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VolumeStatusDetails, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VolumeStatusDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("name") /* Name com.amazonaws.ec2#VolumeStatusDetails$Name */ =>  {
                let var_3326 =
                    Some(
                        Result::<crate::model::VolumeStatusName, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::VolumeStatusName::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3326);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#VolumeStatusDetails$Status */ =>  {
                let var_3327 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3327);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_disable_fast_snapshot_restore_state_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DisableFastSnapshotRestoreStateError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DisableFastSnapshotRestoreStateError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#DisableFastSnapshotRestoreStateError$Code */ =>  {
                let var_3328 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_3328);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#DisableFastSnapshotRestoreStateError$Message */ =>  {
                let var_3329 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3329);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_enable_fast_snapshot_restore_state_error(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EnableFastSnapshotRestoreStateError, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EnableFastSnapshotRestoreStateError::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("code") /* Code com.amazonaws.ec2#EnableFastSnapshotRestoreStateError$Code */ =>  {
                let var_3330 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_3330);
            }
            ,
            s if s.matches("message") /* Message com.amazonaws.ec2#EnableFastSnapshotRestoreStateError$Message */ =>  {
                let var_3331 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3331);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_ipv6_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceIpv6Address, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceIpv6Address::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#InstanceIpv6Address$Ipv6Address */ =>  {
                let var_3332 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_3332);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_private_ip_address_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PrivateIpAddressSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PrivateIpAddressSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("primary") /* Primary com.amazonaws.ec2#PrivateIpAddressSpecification$Primary */ =>  {
                let var_3333 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_primary(var_3333);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#PrivateIpAddressSpecification$PrivateIpAddress */ =>  {
                let var_3334 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_3334);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv4_prefix_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv4PrefixSpecificationResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv4PrefixSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv4Prefix") /* Ipv4Prefix com.amazonaws.ec2#Ipv4PrefixSpecificationResponse$Ipv4Prefix */ =>  {
                let var_3335 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix(var_3335);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_prefix_specification_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6PrefixSpecificationResponse, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6PrefixSpecificationResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Prefix") /* Ipv6Prefix com.amazonaws.ec2#Ipv6PrefixSpecificationResponse$Ipv6Prefix */ =>  {
                let var_3336 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix(var_3336);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_network_interface_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceNetworkInterfaceAssociation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceNetworkInterfaceAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("carrierIp") /* CarrierIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$CarrierIp */ =>  {
                let var_3337 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_carrier_ip(var_3337);
            }
            ,
            s if s.matches("customerOwnedIp") /* CustomerOwnedIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$CustomerOwnedIp */ =>  {
                let var_3338 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_customer_owned_ip(var_3338);
            }
            ,
            s if s.matches("ipOwnerId") /* IpOwnerId com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$IpOwnerId */ =>  {
                let var_3339 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_owner_id(var_3339);
            }
            ,
            s if s.matches("publicDnsName") /* PublicDnsName com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$PublicDnsName */ =>  {
                let var_3340 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_3340);
            }
            ,
            s if s.matches("publicIp") /* PublicIp com.amazonaws.ec2#InstanceNetworkInterfaceAssociation$PublicIp */ =>  {
                let var_3341 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip(var_3341);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_network_interface_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceNetworkInterfaceAttachment, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceNetworkInterfaceAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("attachTime") /* AttachTime com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$AttachTime */ =>  {
                let var_3342 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_attach_time(var_3342);
            }
            ,
            s if s.matches("attachmentId") /* AttachmentId com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$AttachmentId */ =>  {
                let var_3343 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_attachment_id(var_3343);
            }
            ,
            s if s.matches("deleteOnTermination") /* DeleteOnTermination com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$DeleteOnTermination */ =>  {
                let var_3344 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_on_termination(var_3344);
            }
            ,
            s if s.matches("deviceIndex") /* DeviceIndex com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$DeviceIndex */ =>  {
                let var_3345 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_device_index(var_3345);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$Status */ =>  {
                let var_3346 =
                    Some(
                        Result::<crate::model::AttachmentStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AttachmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3346);
            }
            ,
            s if s.matches("networkCardIndex") /* NetworkCardIndex com.amazonaws.ec2#InstanceNetworkInterfaceAttachment$NetworkCardIndex */ =>  {
                let var_3347 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_network_card_index(var_3347);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_instance_private_ip_address_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstancePrivateIpAddress>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstancePrivateIpAddressList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_private_ip_address(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv4_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceIpv4Prefix>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv4PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv4_prefix(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_instance_ipv6_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InstanceIpv6Prefix>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#InstanceIpv6PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_instance_ipv6_prefix(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_protocol_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Protocol>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ProtocolList$member */ =>  {
                out.push(
                    Result::<crate::model::Protocol, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::Protocol::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_phase1_encryption_algorithms_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase1EncryptionAlgorithmsListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase1EncryptionAlgorithmsListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase1EncryptionAlgorithmsListValue$Value */ =>  {
                let var_3348 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_3348);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_phase2_encryption_algorithms_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase2EncryptionAlgorithmsListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase2EncryptionAlgorithmsListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase2EncryptionAlgorithmsListValue$Value */ =>  {
                let var_3349 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_3349);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_phase1_integrity_algorithms_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase1IntegrityAlgorithmsListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase1IntegrityAlgorithmsListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase1IntegrityAlgorithmsListValue$Value */ =>  {
                let var_3350 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_3350);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_phase2_integrity_algorithms_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase2IntegrityAlgorithmsListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase2IntegrityAlgorithmsListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase2IntegrityAlgorithmsListValue$Value */ =>  {
                let var_3351 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_3351);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_phase1_dh_group_numbers_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase1DhGroupNumbersListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase1DhGroupNumbersListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase1DHGroupNumbersListValue$Value */ =>  {
                let var_3352 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_3352);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_phase2_dh_group_numbers_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Phase2DhGroupNumbersListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Phase2DhGroupNumbersListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#Phase2DHGroupNumbersListValue$Value */ =>  {
                let var_3353 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_value(var_3353);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ike_versions_list_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IkeVersionsListValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IkeVersionsListValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("value") /* Value com.amazonaws.ec2#IKEVersionsListValue$Value */ =>  {
                let var_3354 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_3354);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_gpu_device_memory_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GpuDeviceMemoryInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GpuDeviceMemoryInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sizeInMiB") /* SizeInMiB com.amazonaws.ec2#GpuDeviceMemoryInfo$SizeInMiB */ =>  {
                let var_3355 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#GpuDeviceMemorySize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size_in_mi_b(var_3355);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_fpga_device_memory_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FpgaDeviceMemoryInfo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FpgaDeviceMemoryInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sizeInMiB") /* SizeInMiB com.amazonaws.ec2#FpgaDeviceMemoryInfo$SizeInMiB */ =>  {
                let var_3356 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.ec2#FpgaDeviceMemorySize`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_size_in_mi_b(var_3356);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_fleet_monitoring(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotFleetMonitoring, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotFleetMonitoring::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("enabled") /* Enabled com.amazonaws.ec2#SpotFleetMonitoring$Enabled */ =>  {
                let var_3357 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_3357);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_ec2_spot_fleet_tag_specification_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::SpotFleetTagSpecification>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#SpotFleetTagSpecificationList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_spot_fleet_tag_specification(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_launch_template_overrides_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::LaunchTemplateOverrides>, aws_smithy_xml::decode::XmlError>
{
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#LaunchTemplateOverridesList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_launch_template_overrides(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_classic_load_balancers(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::ClassicLoadBalancer>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#ClassicLoadBalancers$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_classic_load_balancer(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_target_groups(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TargetGroup>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#TargetGroups$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_target_group(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_security_group_id_string_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SecurityGroupId") /* member com.amazonaws.ec2#SecurityGroupIdStringList$member */ =>  {
                out.push(
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv4_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Ipv4PrefixSpecificationRequest>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv4PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv4_prefix_specification_request(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_list_com_amazonaws_ec2_ipv6_prefix_list(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    std::vec::Vec<crate::model::Ipv6PrefixSpecificationRequest>,
    aws_smithy_xml::decode::XmlError,
> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("item") /* member com.amazonaws.ec2#Ipv6PrefixList$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_ipv6_prefix_specification_request(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_instance_private_ip_address(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstancePrivateIpAddress, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstancePrivateIpAddress::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#InstancePrivateIpAddress$Association */ =>  {
                let var_3358 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_3358);
            }
            ,
            s if s.matches("primary") /* Primary com.amazonaws.ec2#InstancePrivateIpAddress$Primary */ =>  {
                let var_3359 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_primary(var_3359);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#InstancePrivateIpAddress$PrivateDnsName */ =>  {
                let var_3360 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_3360);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#InstancePrivateIpAddress$PrivateIpAddress */ =>  {
                let var_3361 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_3361);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_ipv4_prefix(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceIpv4Prefix, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceIpv4Prefix::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv4Prefix") /* Ipv4Prefix com.amazonaws.ec2#InstanceIpv4Prefix$Ipv4Prefix */ =>  {
                let var_3362 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix(var_3362);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_instance_ipv6_prefix(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InstanceIpv6Prefix, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InstanceIpv6Prefix::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipv6Prefix") /* Ipv6Prefix com.amazonaws.ec2#InstanceIpv6Prefix$Ipv6Prefix */ =>  {
                let var_3363 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix(var_3363);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_spot_fleet_tag_specification(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SpotFleetTagSpecification, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SpotFleetTagSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#SpotFleetTagSpecification$ResourceType */ =>  {
                let var_3364 =
                    Some(
                        Result::<crate::model::ResourceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_3364);
            }
            ,
            s if s.matches("tag") /* Tags com.amazonaws.ec2#SpotFleetTagSpecification$Tags */ =>  {
                let var_3365 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_ec2_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_3365);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_launch_template_overrides(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LaunchTemplateOverrides, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LaunchTemplateOverrides::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#LaunchTemplateOverrides$InstanceType */ =>  {
                let var_3366 =
                    Some(
                        Result::<crate::model::InstanceType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_3366);
            }
            ,
            s if s.matches("spotPrice") /* SpotPrice com.amazonaws.ec2#LaunchTemplateOverrides$SpotPrice */ =>  {
                let var_3367 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_spot_price(var_3367);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#LaunchTemplateOverrides$SubnetId */ =>  {
                let var_3368 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_3368);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#LaunchTemplateOverrides$AvailabilityZone */ =>  {
                let var_3369 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3369);
            }
            ,
            s if s.matches("weightedCapacity") /* WeightedCapacity com.amazonaws.ec2#LaunchTemplateOverrides$WeightedCapacity */ =>  {
                let var_3370 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weighted_capacity(var_3370);
            }
            ,
            s if s.matches("priority") /* Priority com.amazonaws.ec2#LaunchTemplateOverrides$Priority */ =>  {
                let var_3371 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_priority(var_3371);
            }
            ,
            s if s.matches("instanceRequirements") /* InstanceRequirements com.amazonaws.ec2#LaunchTemplateOverrides$InstanceRequirements */ =>  {
                let var_3372 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_instance_requirements(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_requirements(var_3372);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_classic_load_balancer(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ClassicLoadBalancer, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ClassicLoadBalancer::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("name") /* Name com.amazonaws.ec2#ClassicLoadBalancer$Name */ =>  {
                let var_3373 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_3373);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetGroup, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("arn") /* Arn com.amazonaws.ec2#TargetGroup$Arn */ =>  {
                let var_3374 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_3374);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv4_prefix_specification_request(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv4PrefixSpecificationRequest, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv4PrefixSpecificationRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Ipv4Prefix") /* Ipv4Prefix com.amazonaws.ec2#Ipv4PrefixSpecificationRequest$Ipv4Prefix */ =>  {
                let var_3375 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefix(var_3375);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ipv6_prefix_specification_request(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ipv6PrefixSpecificationRequest, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ipv6PrefixSpecificationRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Ipv6Prefix") /* Ipv6Prefix com.amazonaws.ec2#Ipv6PrefixSpecificationRequest$Ipv6Prefix */ =>  {
                let var_3376 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefix(var_3376);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
