// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_elastic_gpus(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ElasticGpus, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ElasticGpus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("elasticGpuId") /* ElasticGpuId com.amazonaws.ec2#ElasticGpus$ElasticGpuId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_id(var_1);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#ElasticGpus$AvailabilityZone */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_2);
            }
            ,
            s if s.matches("elasticGpuType") /* ElasticGpuType com.amazonaws.ec2#ElasticGpus$ElasticGpuType */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_type(var_3);
            }
            ,
            s if s.matches("elasticGpuHealth") /* ElasticGpuHealth com.amazonaws.ec2#ElasticGpus$ElasticGpuHealth */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_elastic_gpu_health::de_elastic_gpu_health(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_health(var_4);
            }
            ,
            s if s.matches("elasticGpuState") /* ElasticGpuState com.amazonaws.ec2#ElasticGpus$ElasticGpuState */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::ElasticGpuState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ElasticGpuState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_elastic_gpu_state(var_5);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ElasticGpus$InstanceId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_6);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ElasticGpus$Tags */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
