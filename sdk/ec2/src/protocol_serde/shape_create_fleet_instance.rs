// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_create_fleet_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CreateFleetInstance, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CreateFleetInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("launchTemplateAndOverrides") /* LaunchTemplateAndOverrides com.amazonaws.ec2#CreateFleetInstance$LaunchTemplateAndOverrides */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_launch_template_and_overrides_response::de_launch_template_and_overrides_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_template_and_overrides(var_1);
            }
            ,
            s if s.matches("lifecycle") /* Lifecycle com.amazonaws.ec2#CreateFleetInstance$Lifecycle */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::InstanceLifecycle, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceLifecycle::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle(var_2);
            }
            ,
            s if s.matches("instanceIds") /* InstanceIds com.amazonaws.ec2#CreateFleetInstance$InstanceIds */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_instance_ids_set::de_instance_ids_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_ids(var_3);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#CreateFleetInstance$InstanceType */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::InstanceType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_4);
            }
            ,
            s if s.matches("platform") /* Platform com.amazonaws.ec2#CreateFleetInstance$Platform */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::PlatformValues, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PlatformValues::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_platform(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
