// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_ipam_resource_cidr(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::IpamResourceCidr, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamResourceCidr::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamId") /* IpamId com.amazonaws.ec2#IpamResourceCidr$IpamId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_id(var_1);
            }
            ,
            s if s.matches("ipamScopeId") /* IpamScopeId com.amazonaws.ec2#IpamResourceCidr$IpamScopeId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_id(var_2);
            }
            ,
            s if s.matches("ipamPoolId") /* IpamPoolId com.amazonaws.ec2#IpamResourceCidr$IpamPoolId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_id(var_3);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamResourceCidr$ResourceRegion */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_4);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#IpamResourceCidr$ResourceOwnerId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_5);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamResourceCidr$ResourceId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_6);
            }
            ,
            s if s.matches("resourceName") /* ResourceName com.amazonaws.ec2#IpamResourceCidr$ResourceName */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_name(var_7);
            }
            ,
            s if s.matches("resourceCidr") /* ResourceCidr com.amazonaws.ec2#IpamResourceCidr$ResourceCidr */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_cidr(var_8);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamResourceCidr$ResourceType */ =>  {
                let var_9 =
                    Some(
                        Result::<crate::types::IpamResourceType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_9);
            }
            ,
            s if s.matches("resourceTagSet") /* ResourceTags com.amazonaws.ec2#IpamResourceCidr$ResourceTags */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_ipam_resource_tag_list::de_ipam_resource_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tags(var_10);
            }
            ,
            s if s.matches("ipUsage") /* IpUsage com.amazonaws.ec2#IpamResourceCidr$IpUsage */ =>  {
                let var_11 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (double: `com.amazonaws.ec2#BoxedDouble`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ip_usage(var_11);
            }
            ,
            s if s.matches("complianceStatus") /* ComplianceStatus com.amazonaws.ec2#IpamResourceCidr$ComplianceStatus */ =>  {
                let var_12 =
                    Some(
                        Result::<crate::types::IpamComplianceStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamComplianceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_compliance_status(var_12);
            }
            ,
            s if s.matches("managementState") /* ManagementState com.amazonaws.ec2#IpamResourceCidr$ManagementState */ =>  {
                let var_13 =
                    Some(
                        Result::<crate::types::IpamManagementState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamManagementState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_management_state(var_13);
            }
            ,
            s if s.matches("overlapStatus") /* OverlapStatus com.amazonaws.ec2#IpamResourceCidr$OverlapStatus */ =>  {
                let var_14 =
                    Some(
                        Result::<crate::types::IpamOverlapStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamOverlapStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_overlap_status(var_14);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#IpamResourceCidr$VpcId */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
