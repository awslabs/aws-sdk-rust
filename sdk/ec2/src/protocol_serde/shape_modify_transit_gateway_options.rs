// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_2) = &input.add_transit_gateway_cidr_blocks {
        let mut list_4 = scope_1.start_list(true, Some("item"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_7) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_9 = scope_6.start_list(true, Some("item"));
        for item_8 in var_7 {
            #[allow(unused_mut)]
            let mut entry_10 = list_9.entry();
            entry_10.string(item_8);
        }
        list_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("VpnEcmpSupport");
    if let Some(var_12) = &input.vpn_ecmp_support {
        scope_11.string(var_12.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DnsSupport");
    if let Some(var_14) = &input.dns_support {
        scope_13.string(var_14.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_16) = &input.auto_accept_shared_attachments {
        scope_15.string(var_16.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_18) = &input.default_route_table_association {
        scope_17.string(var_18.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_20) = &input.association_default_route_table_id {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_22) = &input.default_route_table_propagation {
        scope_21.string(var_22.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_24) = &input.propagation_default_route_table_id {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("AmazonSideAsn");
    if let Some(var_26) = &input.amazon_side_asn {
        scope_25.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    Ok(())
}
