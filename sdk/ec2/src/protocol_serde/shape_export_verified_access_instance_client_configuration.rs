// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_export_verified_access_instance_client_configuration_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput,
    crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(
        crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationError::unhandled,
    )?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    Err(
        crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationError::generic(
            generic,
        ),
    )
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_export_verified_access_instance_client_configuration_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationOutput,
    crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::export_verified_access_instance_client_configuration::builders::ExportVerifiedAccessInstanceClientConfigurationOutputBuilder::default();
        output = crate::protocol_serde::shape_export_verified_access_instance_client_configuration::de_export_verified_access_instance_client_configuration(_response_body, output).map_err(crate::operation::export_verified_access_instance_client_configuration::ExportVerifiedAccessInstanceClientConfigurationError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_export_verified_access_instance_client_configuration(
    inp: &[u8],
    mut builder: crate::operation::export_verified_access_instance_client_configuration::builders::ExportVerifiedAccessInstanceClientConfigurationOutputBuilder,
) -> std::result::Result<
    crate::operation::export_verified_access_instance_client_configuration::builders::ExportVerifiedAccessInstanceClientConfigurationOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("ExportVerifiedAccessInstanceClientConfigurationResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected ExportVerifiedAccessInstanceClientConfigurationResponse got {start_el:?}"
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("version") /* Version com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$Version */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version(var_1);
            }
            ,
            s if s.matches("verifiedAccessInstanceId") /* VerifiedAccessInstanceId com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$VerifiedAccessInstanceId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_verified_access_instance_id(var_2);
            }
            ,
            s if s.matches("region") /* Region com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$Region */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_3);
            }
            ,
            s if s.matches("deviceTrustProviderSet") /* DeviceTrustProviders com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$DeviceTrustProviders */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_device_trust_provider_type_list::de_device_trust_provider_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_device_trust_providers(var_4);
            }
            ,
            s if s.matches("userTrustProvider") /* UserTrustProvider com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$UserTrustProvider */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_verified_access_instance_user_trust_provider_client_configuration::de_verified_access_instance_user_trust_provider_client_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_trust_provider(var_5);
            }
            ,
            s if s.matches("openVpnConfigurationSet") /* OpenVpnConfigurations com.amazonaws.ec2.synthetic#ExportVerifiedAccessInstanceClientConfigurationOutput$OpenVpnConfigurations */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_verified_access_instance_open_vpn_client_configuration_list::de_verified_access_instance_open_vpn_client_configuration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_open_vpn_configurations(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
