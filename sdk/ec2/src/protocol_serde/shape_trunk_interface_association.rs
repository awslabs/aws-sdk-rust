// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_trunk_interface_association(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TrunkInterfaceAssociation, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TrunkInterfaceAssociation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("associationId") /* AssociationId com.amazonaws.ec2#TrunkInterfaceAssociation$AssociationId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_id(var_1);
            }
            ,
            s if s.matches("branchInterfaceId") /* BranchInterfaceId com.amazonaws.ec2#TrunkInterfaceAssociation$BranchInterfaceId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_branch_interface_id(var_2);
            }
            ,
            s if s.matches("trunkInterfaceId") /* TrunkInterfaceId com.amazonaws.ec2#TrunkInterfaceAssociation$TrunkInterfaceId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_trunk_interface_id(var_3);
            }
            ,
            s if s.matches("interfaceProtocol") /* InterfaceProtocol com.amazonaws.ec2#TrunkInterfaceAssociation$InterfaceProtocol */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::InterfaceProtocolType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InterfaceProtocolType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_protocol(var_4);
            }
            ,
            s if s.matches("vlanId") /* VlanId com.amazonaws.ec2#TrunkInterfaceAssociation$VlanId */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vlan_id(var_5);
            }
            ,
            s if s.matches("greKey") /* GreKey com.amazonaws.ec2#TrunkInterfaceAssociation$GreKey */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_gre_key(var_6);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TrunkInterfaceAssociation$Tags */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
