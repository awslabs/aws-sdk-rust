// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_transit_gateway_options(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TransitGatewayOptions, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TransitGatewayOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("amazonSideAsn") /* AmazonSideAsn com.amazonaws.ec2#TransitGatewayOptions$AmazonSideAsn */ =>  {
                let var_1 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.ec2#Long`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_amazon_side_asn(var_1);
            }
            ,
            s if s.matches("transitGatewayCidrBlocks") /* TransitGatewayCidrBlocks com.amazonaws.ec2#TransitGatewayOptions$TransitGatewayCidrBlocks */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_cidr_blocks(var_2);
            }
            ,
            s if s.matches("autoAcceptSharedAttachments") /* AutoAcceptSharedAttachments com.amazonaws.ec2#TransitGatewayOptions$AutoAcceptSharedAttachments */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::AutoAcceptSharedAttachmentsValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::AutoAcceptSharedAttachmentsValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_accept_shared_attachments(var_3);
            }
            ,
            s if s.matches("defaultRouteTableAssociation") /* DefaultRouteTableAssociation com.amazonaws.ec2#TransitGatewayOptions$DefaultRouteTableAssociation */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::DefaultRouteTableAssociationValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::DefaultRouteTableAssociationValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_default_route_table_association(var_4);
            }
            ,
            s if s.matches("associationDefaultRouteTableId") /* AssociationDefaultRouteTableId com.amazonaws.ec2#TransitGatewayOptions$AssociationDefaultRouteTableId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_association_default_route_table_id(var_5);
            }
            ,
            s if s.matches("defaultRouteTablePropagation") /* DefaultRouteTablePropagation com.amazonaws.ec2#TransitGatewayOptions$DefaultRouteTablePropagation */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::DefaultRouteTablePropagationValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::DefaultRouteTablePropagationValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_default_route_table_propagation(var_6);
            }
            ,
            s if s.matches("propagationDefaultRouteTableId") /* PropagationDefaultRouteTableId com.amazonaws.ec2#TransitGatewayOptions$PropagationDefaultRouteTableId */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_propagation_default_route_table_id(var_7);
            }
            ,
            s if s.matches("vpnEcmpSupport") /* VpnEcmpSupport com.amazonaws.ec2#TransitGatewayOptions$VpnEcmpSupport */ =>  {
                let var_8 =
                    Some(
                        Result::<crate::types::VpnEcmpSupportValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::VpnEcmpSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_ecmp_support(var_8);
            }
            ,
            s if s.matches("dnsSupport") /* DnsSupport com.amazonaws.ec2#TransitGatewayOptions$DnsSupport */ =>  {
                let var_9 =
                    Some(
                        Result::<crate::types::DnsSupportValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::DnsSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_support(var_9);
            }
            ,
            s if s.matches("multicastSupport") /* MulticastSupport com.amazonaws.ec2#TransitGatewayOptions$MulticastSupport */ =>  {
                let var_10 =
                    Some(
                        Result::<crate::types::MulticastSupportValue, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::MulticastSupportValue::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_multicast_support(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
