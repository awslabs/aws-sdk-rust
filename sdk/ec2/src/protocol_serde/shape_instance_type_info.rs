// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_instance_type_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceTypeInfo, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceTypeInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#InstanceTypeInfo$InstanceType */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::InstanceType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_1);
            }
            ,
            s if s.matches("currentGeneration") /* CurrentGeneration com.amazonaws.ec2#InstanceTypeInfo$CurrentGeneration */ =>  {
                let var_2 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#CurrentGenerationFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_current_generation(var_2);
            }
            ,
            s if s.matches("freeTierEligible") /* FreeTierEligible com.amazonaws.ec2#InstanceTypeInfo$FreeTierEligible */ =>  {
                let var_3 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#FreeTierEligibleFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_free_tier_eligible(var_3);
            }
            ,
            s if s.matches("supportedUsageClasses") /* SupportedUsageClasses com.amazonaws.ec2#InstanceTypeInfo$SupportedUsageClasses */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_usage_class_type_list::de_usage_class_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_usage_classes(var_4);
            }
            ,
            s if s.matches("supportedRootDeviceTypes") /* SupportedRootDeviceTypes com.amazonaws.ec2#InstanceTypeInfo$SupportedRootDeviceTypes */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_root_device_type_list::de_root_device_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_root_device_types(var_5);
            }
            ,
            s if s.matches("supportedVirtualizationTypes") /* SupportedVirtualizationTypes com.amazonaws.ec2#InstanceTypeInfo$SupportedVirtualizationTypes */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_virtualization_type_list::de_virtualization_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_virtualization_types(var_6);
            }
            ,
            s if s.matches("bareMetal") /* BareMetal com.amazonaws.ec2#InstanceTypeInfo$BareMetal */ =>  {
                let var_7 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#BareMetalFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bare_metal(var_7);
            }
            ,
            s if s.matches("hypervisor") /* Hypervisor com.amazonaws.ec2#InstanceTypeInfo$Hypervisor */ =>  {
                let var_8 =
                    Some(
                        Result::<crate::types::InstanceTypeHypervisor, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceTypeHypervisor::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_hypervisor(var_8);
            }
            ,
            s if s.matches("processorInfo") /* ProcessorInfo com.amazonaws.ec2#InstanceTypeInfo$ProcessorInfo */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_processor_info::de_processor_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_processor_info(var_9);
            }
            ,
            s if s.matches("vCpuInfo") /* VCpuInfo com.amazonaws.ec2#InstanceTypeInfo$VCpuInfo */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_v_cpu_info::de_v_cpu_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_v_cpu_info(var_10);
            }
            ,
            s if s.matches("memoryInfo") /* MemoryInfo com.amazonaws.ec2#InstanceTypeInfo$MemoryInfo */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_memory_info::de_memory_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_memory_info(var_11);
            }
            ,
            s if s.matches("instanceStorageSupported") /* InstanceStorageSupported com.amazonaws.ec2#InstanceTypeInfo$InstanceStorageSupported */ =>  {
                let var_12 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#InstanceStorageFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_storage_supported(var_12);
            }
            ,
            s if s.matches("instanceStorageInfo") /* InstanceStorageInfo com.amazonaws.ec2#InstanceTypeInfo$InstanceStorageInfo */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_instance_storage_info::de_instance_storage_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_storage_info(var_13);
            }
            ,
            s if s.matches("ebsInfo") /* EbsInfo com.amazonaws.ec2#InstanceTypeInfo$EbsInfo */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_ebs_info::de_ebs_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ebs_info(var_14);
            }
            ,
            s if s.matches("networkInfo") /* NetworkInfo com.amazonaws.ec2#InstanceTypeInfo$NetworkInfo */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_network_info::de_network_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_info(var_15);
            }
            ,
            s if s.matches("gpuInfo") /* GpuInfo com.amazonaws.ec2#InstanceTypeInfo$GpuInfo */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_gpu_info::de_gpu_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gpu_info(var_16);
            }
            ,
            s if s.matches("fpgaInfo") /* FpgaInfo com.amazonaws.ec2#InstanceTypeInfo$FpgaInfo */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_fpga_info::de_fpga_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_fpga_info(var_17);
            }
            ,
            s if s.matches("placementGroupInfo") /* PlacementGroupInfo com.amazonaws.ec2#InstanceTypeInfo$PlacementGroupInfo */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_placement_group_info::de_placement_group_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_placement_group_info(var_18);
            }
            ,
            s if s.matches("inferenceAcceleratorInfo") /* InferenceAcceleratorInfo com.amazonaws.ec2#InstanceTypeInfo$InferenceAcceleratorInfo */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_inference_accelerator_info::de_inference_accelerator_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inference_accelerator_info(var_19);
            }
            ,
            s if s.matches("hibernationSupported") /* HibernationSupported com.amazonaws.ec2#InstanceTypeInfo$HibernationSupported */ =>  {
                let var_20 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#HibernationFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_hibernation_supported(var_20);
            }
            ,
            s if s.matches("burstablePerformanceSupported") /* BurstablePerformanceSupported com.amazonaws.ec2#InstanceTypeInfo$BurstablePerformanceSupported */ =>  {
                let var_21 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#BurstablePerformanceFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_burstable_performance_supported(var_21);
            }
            ,
            s if s.matches("dedicatedHostsSupported") /* DedicatedHostsSupported com.amazonaws.ec2#InstanceTypeInfo$DedicatedHostsSupported */ =>  {
                let var_22 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#DedicatedHostFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_dedicated_hosts_supported(var_22);
            }
            ,
            s if s.matches("autoRecoverySupported") /* AutoRecoverySupported com.amazonaws.ec2#InstanceTypeInfo$AutoRecoverySupported */ =>  {
                let var_23 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#AutoRecoveryFlag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_recovery_supported(var_23);
            }
            ,
            s if s.matches("supportedBootModes") /* SupportedBootModes com.amazonaws.ec2#InstanceTypeInfo$SupportedBootModes */ =>  {
                let var_24 =
                    Some(
                        crate::protocol_serde::shape_boot_mode_type_list::de_boot_mode_type_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_boot_modes(var_24);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
