// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_network_insights_analysis_input_input(
    input: &crate::operation::start_network_insights_analysis::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2) = &input.network_insights_path_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AdditionalAccount");
    if let Some(var_4) = &input.additional_accounts {
        let mut list_6 = scope_3.start_list(true, Some("item"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("FilterInArn");
    if let Some(var_9) = &input.filter_in_arns {
        let mut list_11 = scope_8.start_list(true, Some("item"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            entry_12.string(item_10);
        }
        list_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DryRun");
    if let Some(var_14) = &input.dry_run {
        scope_13.boolean(*var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TagSpecification");
    if let Some(var_16) = &input.tag_specifications {
        let mut list_18 = scope_15.start_list(true, Some("item"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            crate::protocol_serde::shape_tag_specification::ser_tag_specification(
                entry_19, item_17,
            )?;
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ClientToken");
    if let Some(var_21) = &input.client_token {
        scope_20.string(var_21);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
