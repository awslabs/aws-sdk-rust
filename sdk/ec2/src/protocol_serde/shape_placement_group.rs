// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_placement_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PlacementGroup, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PlacementGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("groupName") /* GroupName com.amazonaws.ec2#PlacementGroup$GroupName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_name(var_1);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#PlacementGroup$State */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::PlacementGroupState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PlacementGroupState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_2);
            }
            ,
            s if s.matches("strategy") /* Strategy com.amazonaws.ec2#PlacementGroup$Strategy */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::PlacementStrategy, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PlacementStrategy::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_strategy(var_3);
            }
            ,
            s if s.matches("partitionCount") /* PartitionCount com.amazonaws.ec2#PlacementGroup$PartitionCount */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_partition_count(var_4);
            }
            ,
            s if s.matches("groupId") /* GroupId com.amazonaws.ec2#PlacementGroup$GroupId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_id(var_5);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#PlacementGroup$Tags */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_6);
            }
            ,
            s if s.matches("groupArn") /* GroupArn com.amazonaws.ec2#PlacementGroup$GroupArn */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_group_arn(var_7);
            }
            ,
            s if s.matches("spreadLevel") /* SpreadLevel com.amazonaws.ec2#PlacementGroup$SpreadLevel */ =>  {
                let var_8 =
                    Some(
                        Result::<crate::types::SpreadLevel, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::SpreadLevel::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_spread_level(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
