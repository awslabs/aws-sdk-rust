// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_2) = &input.associate_carrier_ip_address {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_4) = &input.associate_public_ip_address {
        scope_3.boolean(*var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DeleteOnTermination");
    if let Some(var_6) = &input.delete_on_termination {
        scope_5.boolean(*var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Description");
    if let Some(var_8) = &input.description {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DeviceIndex");
    if let Some(var_10) = &input.device_index {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("SecurityGroupId");
    if let Some(var_12) = &input.groups {
        let mut list_14 = scope_11.start_list(true, Some("SecurityGroupId"));
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            entry_15.string(item_13);
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InterfaceType");
    if let Some(var_17) = &input.interface_type {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Ipv6AddressCount");
    if let Some(var_19) = &input.ipv6_address_count {
        scope_18.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Ipv6Addresses");
    if let Some(var_21) = &input.ipv6_addresses {
        let mut list_23 = scope_20.start_list(true, Some("InstanceIpv6Address"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            crate::protocol_serde::shape_instance_ipv6_address_request::ser_instance_ipv6_address_request(entry_24, item_22)?;
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("NetworkInterfaceId");
    if let Some(var_26) = &input.network_interface_id {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("PrivateIpAddress");
    if let Some(var_28) = &input.private_ip_address {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("PrivateIpAddresses");
    if let Some(var_30) = &input.private_ip_addresses {
        let mut list_32 = scope_29.start_list(true, Some("item"));
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            crate::protocol_serde::shape_private_ip_address_specification::ser_private_ip_address_specification(entry_33, item_31)?;
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_35) = &input.secondary_private_ip_address_count {
        scope_34.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_35).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("SubnetId");
    if let Some(var_37) = &input.subnet_id {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("NetworkCardIndex");
    if let Some(var_39) = &input.network_card_index {
        scope_38.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_39).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv4Prefix");
    if let Some(var_41) = &input.ipv4_prefixes {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::protocol_serde::shape_ipv4_prefix_specification_request::ser_ipv4_prefix_specification_request(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_46) = &input.ipv4_prefix_count {
        scope_45.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_46).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("Ipv6Prefix");
    if let Some(var_48) = &input.ipv6_prefixes {
        let mut list_50 = scope_47.start_list(true, Some("item"));
        for item_49 in var_48 {
            #[allow(unused_mut)]
            let mut entry_51 = list_50.entry();
            crate::protocol_serde::shape_ipv6_prefix_specification_request::ser_ipv6_prefix_specification_request(entry_51, item_49)?;
        }
        list_50.finish();
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_53) = &input.ipv6_prefix_count {
        scope_52.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_53).into()),
        );
    }
    Ok(())
}
