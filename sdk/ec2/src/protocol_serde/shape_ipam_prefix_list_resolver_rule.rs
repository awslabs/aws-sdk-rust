// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ipam_prefix_list_resolver_rule(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::IpamPrefixListResolverRule, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamPrefixListResolverRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ruleType") /* RuleType com.amazonaws.ec2#IpamPrefixListResolverRule$RuleType */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::IpamPrefixListResolverRuleType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPrefixListResolverRuleType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_type(var_1);
            }
            ,
            s if s.matches("staticCidr") /* StaticCidr com.amazonaws.ec2#IpamPrefixListResolverRule$StaticCidr */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_static_cidr(var_2);
            }
            ,
            s if s.matches("ipamScopeId") /* IpamScopeId com.amazonaws.ec2#IpamPrefixListResolverRule$IpamScopeId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_id(var_3);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamPrefixListResolverRule$ResourceType */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::IpamResourceType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamResourceType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_4);
            }
            ,
            s if s.matches("conditionSet") /* Conditions com.amazonaws.ec2#IpamPrefixListResolverRule$Conditions */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_ipam_prefix_list_resolver_rule_condition_set::de_ipam_prefix_list_resolver_rule_condition_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_conditions(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
