// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_capacity_manager_metric_dimensions_input_input_input(
    input: &crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityManagerMetricDimensions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("GroupBy");
    if let Some(var_2) = &input.group_by {
        if !var_2.is_empty() {
            let mut list_4 = scope_1.start_list(true, Some("item"));
            for item_3 in var_2 {
                #[allow(unused_mut)]
                let mut entry_5 = list_4.entry();
                entry_5.string(item_3.as_str());
            }
            list_4.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("FilterBy");
    if let Some(var_7) = &input.filter_by {
        if !var_7.is_empty() {
            let mut list_9 = scope_6.start_list(true, Some("item"));
            for item_8 in var_7 {
                #[allow(unused_mut)]
                let mut entry_10 = list_9.entry();
                crate::protocol_serde::shape_capacity_manager_condition::ser_capacity_manager_condition(entry_10, item_8)?;
            }
            list_9.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("StartTime");
    if let Some(var_12) = &input.start_time {
        scope_11.date_time(var_12, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("EndTime");
    if let Some(var_14) = &input.end_time {
        scope_13.date_time(var_14, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("MetricName");
    if let Some(var_16) = &input.metric_names {
        if !var_16.is_empty() {
            let mut list_18 = scope_15.start_list(true, Some("item"));
            for item_17 in var_16 {
                #[allow(unused_mut)]
                let mut entry_19 = list_18.entry();
                entry_19.string(item_17.as_str());
            }
            list_18.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("MaxResults");
    if let Some(var_21) = &input.max_results {
        scope_20.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("NextToken");
    if let Some(var_23) = &input.next_token {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("DryRun");
    if let Some(var_25) = &input.dry_run {
        scope_24.boolean(*var_25);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
