// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_vpc_peering_connection_vpc_info(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::VpcPeeringConnectionVpcInfo, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VpcPeeringConnectionVpcInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("cidrBlock") /* CidrBlock com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$CidrBlock */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr_block(var_1);
            }
            ,
            s if s.matches("ipv6CidrBlockSet") /* Ipv6CidrBlockSet com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$Ipv6CidrBlockSet */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_ipv6_cidr_block_set::de_ipv6_cidr_block_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_cidr_block_set(var_2);
            }
            ,
            s if s.matches("cidrBlockSet") /* CidrBlockSet com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$CidrBlockSet */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_cidr_block_set::de_cidr_block_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cidr_block_set(var_3);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$OwnerId */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_4);
            }
            ,
            s if s.matches("peeringOptions") /* PeeringOptions com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$PeeringOptions */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_vpc_peering_connection_options_description::de_vpc_peering_connection_options_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_peering_options(var_5);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$VpcId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_6);
            }
            ,
            s if s.matches("region") /* Region com.amazonaws.ec2#VpcPeeringConnectionVpcInfo$Region */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_region(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
