// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_verified_access_trust_provider_input_input(
    input: &crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVerifiedAccessTrustProvider",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TrustProviderType");
    if let Some(var_2) = &input.trust_provider_type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("UserTrustProviderType");
    if let Some(var_4) = &input.user_trust_provider_type {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DeviceTrustProviderType");
    if let Some(var_6) = &input.device_trust_provider_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("OidcOptions");
    if let Some(var_8) = &input.oidc_options {
        crate::protocol_serde::shape_create_verified_access_trust_provider_oidc_options::ser_create_verified_access_trust_provider_oidc_options(scope_7, var_8)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DeviceOptions");
    if let Some(var_10) = &input.device_options {
        crate::protocol_serde::shape_create_verified_access_trust_provider_device_options::ser_create_verified_access_trust_provider_device_options(scope_9, var_10)?;
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PolicyReferenceName");
    if let Some(var_12) = &input.policy_reference_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Description");
    if let Some(var_14) = &input.description {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TagSpecification");
    if let Some(var_16) = &input.tag_specifications {
        let mut list_18 = scope_15.start_list(true, Some("item"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            crate::protocol_serde::shape_tag_specification::ser_tag_specification(
                entry_19, item_17,
            )?;
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ClientToken");
    if let Some(var_21) = &input.client_token {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
