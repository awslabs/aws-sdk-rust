// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_image_input_input(
    input: &crate::operation::register_image::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ImageLocation");
    if let Some(var_2) = &input.image_location {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Architecture");
    if let Some(var_4) = &input.architecture {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6) = &input.block_device_mappings {
        let mut list_8 = scope_5.start_list(true, Some("BlockDeviceMapping"));
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_block_device_mapping::ser_block_device_mapping(
                entry_9, item_7,
            )?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Description");
    if let Some(var_11) = &input.description {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("DryRun");
    if let Some(var_13) = &input.dry_run {
        scope_12.boolean(*var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("EnaSupport");
    if let Some(var_15) = &input.ena_support {
        scope_14.boolean(*var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("KernelId");
    if let Some(var_17) = &input.kernel_id {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Name");
    if let Some(var_19) = &input.name {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("BillingProduct");
    if let Some(var_21) = &input.billing_products {
        let mut list_23 = scope_20.start_list(true, Some("item"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            entry_24.string(item_22);
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("RamdiskId");
    if let Some(var_26) = &input.ramdisk_id {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("RootDeviceName");
    if let Some(var_28) = &input.root_device_name {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("SriovNetSupport");
    if let Some(var_30) = &input.sriov_net_support {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("VirtualizationType");
    if let Some(var_32) = &input.virtualization_type {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("BootMode");
    if let Some(var_34) = &input.boot_mode {
        scope_33.string(var_34.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("TpmSupport");
    if let Some(var_36) = &input.tpm_support {
        scope_35.string(var_36.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("UefiData");
    if let Some(var_38) = &input.uefi_data {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("ImdsSupport");
    if let Some(var_40) = &input.imds_support {
        scope_39.string(var_40.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
