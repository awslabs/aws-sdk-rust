// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_network_interface_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::NetworkInterfacePermission, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::NetworkInterfacePermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("networkInterfacePermissionId") /* NetworkInterfacePermissionId com.amazonaws.ec2#NetworkInterfacePermission$NetworkInterfacePermissionId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_permission_id(var_1);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#NetworkInterfacePermission$NetworkInterfaceId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_2);
            }
            ,
            s if s.matches("awsAccountId") /* AwsAccountId com.amazonaws.ec2#NetworkInterfacePermission$AwsAccountId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_account_id(var_3);
            }
            ,
            s if s.matches("awsService") /* AwsService com.amazonaws.ec2#NetworkInterfacePermission$AwsService */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_service(var_4);
            }
            ,
            s if s.matches("permission") /* Permission com.amazonaws.ec2#NetworkInterfacePermission$Permission */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::InterfacePermissionType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InterfacePermissionType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission(var_5);
            }
            ,
            s if s.matches("permissionState") /* PermissionState com.amazonaws.ec2#NetworkInterfacePermission$PermissionState */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_network_interface_permission_state::de_network_interface_permission_state(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_permission_state(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
