// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_public_ipv4_pool(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PublicIpv4Pool, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PublicIpv4Pool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("poolId") /* PoolId com.amazonaws.ec2#PublicIpv4Pool$PoolId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_pool_id(var_1);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#PublicIpv4Pool$Description */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2);
            }
            ,
            s if s.matches("poolAddressRangeSet") /* PoolAddressRanges com.amazonaws.ec2#PublicIpv4Pool$PoolAddressRanges */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_public_ipv4_pool_range_set::de_public_ipv4_pool_range_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_pool_address_ranges(var_3);
            }
            ,
            s if s.matches("totalAddressCount") /* TotalAddressCount com.amazonaws.ec2#PublicIpv4Pool$TotalAddressCount */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_address_count(var_4);
            }
            ,
            s if s.matches("totalAvailableAddressCount") /* TotalAvailableAddressCount com.amazonaws.ec2#PublicIpv4Pool$TotalAvailableAddressCount */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_total_available_address_count(var_5);
            }
            ,
            s if s.matches("networkBorderGroup") /* NetworkBorderGroup com.amazonaws.ec2#PublicIpv4Pool$NetworkBorderGroup */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_border_group(var_6);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#PublicIpv4Pool$Tags */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
