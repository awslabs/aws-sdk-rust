// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_network_interface(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::NetworkInterface, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::NetworkInterface::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("association") /* Association com.amazonaws.ec2#NetworkInterface$Association */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_network_interface_association::de_network_interface_association(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_association(var_1);
            }
            ,
            s if s.matches("attachment") /* Attachment com.amazonaws.ec2#NetworkInterface$Attachment */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_network_interface_attachment::de_network_interface_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attachment(var_2);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#NetworkInterface$AvailabilityZone */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_3);
            }
            ,
            s if s.matches("connectionTrackingConfiguration") /* ConnectionTrackingConfiguration com.amazonaws.ec2#NetworkInterface$ConnectionTrackingConfiguration */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_connection_tracking_configuration::de_connection_tracking_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_tracking_configuration(var_4);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#NetworkInterface$Description */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_5);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#NetworkInterface$Groups */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_group_identifier_list::de_group_identifier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_6);
            }
            ,
            s if s.matches("interfaceType") /* InterfaceType com.amazonaws.ec2#NetworkInterface$InterfaceType */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::NetworkInterfaceType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::NetworkInterfaceType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_interface_type(var_7);
            }
            ,
            s if s.matches("ipv6AddressesSet") /* Ipv6Addresses com.amazonaws.ec2#NetworkInterface$Ipv6Addresses */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_network_interface_ipv6_addresses_list::de_network_interface_ipv6_addresses_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_addresses(var_8);
            }
            ,
            s if s.matches("macAddress") /* MacAddress com.amazonaws.ec2#NetworkInterface$MacAddress */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_mac_address(var_9);
            }
            ,
            s if s.matches("networkInterfaceId") /* NetworkInterfaceId com.amazonaws.ec2#NetworkInterface$NetworkInterfaceId */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_network_interface_id(var_10);
            }
            ,
            s if s.matches("outpostArn") /* OutpostArn com.amazonaws.ec2#NetworkInterface$OutpostArn */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outpost_arn(var_11);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#NetworkInterface$OwnerId */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_12);
            }
            ,
            s if s.matches("privateDnsName") /* PrivateDnsName com.amazonaws.ec2#NetworkInterface$PrivateDnsName */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_dns_name(var_13);
            }
            ,
            s if s.matches("publicDnsName") /* PublicDnsName com.amazonaws.ec2#NetworkInterface$PublicDnsName */ =>  {
                let var_14 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_dns_name(var_14);
            }
            ,
            s if s.matches("publicIpDnsNameOptions") /* PublicIpDnsNameOptions com.amazonaws.ec2#NetworkInterface$PublicIpDnsNameOptions */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_public_ip_dns_name_options::de_public_ip_dns_name_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_public_ip_dns_name_options(var_15);
            }
            ,
            s if s.matches("privateIpAddress") /* PrivateIpAddress com.amazonaws.ec2#NetworkInterface$PrivateIpAddress */ =>  {
                let var_16 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_private_ip_address(var_16);
            }
            ,
            s if s.matches("privateIpAddressesSet") /* PrivateIpAddresses com.amazonaws.ec2#NetworkInterface$PrivateIpAddresses */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_network_interface_private_ip_address_list::de_network_interface_private_ip_address_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_private_ip_addresses(var_17);
            }
            ,
            s if s.matches("ipv4PrefixSet") /* Ipv4Prefixes com.amazonaws.ec2#NetworkInterface$Ipv4Prefixes */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_ipv4_prefixes_list::de_ipv4_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv4_prefixes(var_18);
            }
            ,
            s if s.matches("ipv6PrefixSet") /* Ipv6Prefixes com.amazonaws.ec2#NetworkInterface$Ipv6Prefixes */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_ipv6_prefixes_list::de_ipv6_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ipv6_prefixes(var_19);
            }
            ,
            s if s.matches("requesterId") /* RequesterId com.amazonaws.ec2#NetworkInterface$RequesterId */ =>  {
                let var_20 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_requester_id(var_20);
            }
            ,
            s if s.matches("requesterManaged") /* RequesterManaged com.amazonaws.ec2#NetworkInterface$RequesterManaged */ =>  {
                let var_21 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_managed(var_21);
            }
            ,
            s if s.matches("sourceDestCheck") /* SourceDestCheck com.amazonaws.ec2#NetworkInterface$SourceDestCheck */ =>  {
                let var_22 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_source_dest_check(var_22);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#NetworkInterface$Status */ =>  {
                let var_23 =
                    Some(
                        Result::<crate::types::NetworkInterfaceStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::NetworkInterfaceStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_23);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#NetworkInterface$SubnetId */ =>  {
                let var_24 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_24);
            }
            ,
            s if s.matches("tagSet") /* TagSet com.amazonaws.ec2#NetworkInterface$TagSet */ =>  {
                let var_25 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_set(var_25);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#NetworkInterface$VpcId */ =>  {
                let var_26 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_26);
            }
            ,
            s if s.matches("denyAllIgwTraffic") /* DenyAllIgwTraffic com.amazonaws.ec2#NetworkInterface$DenyAllIgwTraffic */ =>  {
                let var_27 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_deny_all_igw_traffic(var_27);
            }
            ,
            s if s.matches("ipv6Native") /* Ipv6Native com.amazonaws.ec2#NetworkInterface$Ipv6Native */ =>  {
                let var_28 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ipv6_native(var_28);
            }
            ,
            s if s.matches("ipv6Address") /* Ipv6Address com.amazonaws.ec2#NetworkInterface$Ipv6Address */ =>  {
                let var_29 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipv6_address(var_29);
            }
            ,
            s if s.matches("operator") /* Operator com.amazonaws.ec2#NetworkInterface$Operator */ =>  {
                let var_30 =
                    Some(
                        crate::protocol_serde::shape_operator_response::de_operator_response(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_operator(var_30);
            }
            ,
            s if s.matches("associatedSubnetSet") /* AssociatedSubnets com.amazonaws.ec2#NetworkInterface$AssociatedSubnets */ =>  {
                let var_31 =
                    Some(
                        crate::protocol_serde::shape_associated_subnet_list::de_associated_subnet_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_subnets(var_31);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#NetworkInterface$AvailabilityZoneId */ =>  {
                let var_32 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_32);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
