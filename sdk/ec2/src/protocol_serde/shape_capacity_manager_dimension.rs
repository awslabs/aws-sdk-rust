// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_capacity_manager_dimension(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::CapacityManagerDimension, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CapacityManagerDimension::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#CapacityManagerDimension$ResourceRegion */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_1);
            }
            ,
            s if s.matches("availabilityZoneId") /* AvailabilityZoneId com.amazonaws.ec2#CapacityManagerDimension$AvailabilityZoneId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone_id(var_2);
            }
            ,
            s if s.matches("accountId") /* AccountId com.amazonaws.ec2#CapacityManagerDimension$AccountId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account_id(var_3);
            }
            ,
            s if s.matches("instanceFamily") /* InstanceFamily com.amazonaws.ec2#CapacityManagerDimension$InstanceFamily */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_family(var_4);
            }
            ,
            s if s.matches("instanceType") /* InstanceType com.amazonaws.ec2#CapacityManagerDimension$InstanceType */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_type(var_5);
            }
            ,
            s if s.matches("instancePlatform") /* InstancePlatform com.amazonaws.ec2#CapacityManagerDimension$InstancePlatform */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_platform(var_6);
            }
            ,
            s if s.matches("reservationArn") /* ReservationArn com.amazonaws.ec2#CapacityManagerDimension$ReservationArn */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_arn(var_7);
            }
            ,
            s if s.matches("reservationId") /* ReservationId com.amazonaws.ec2#CapacityManagerDimension$ReservationId */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_id(var_8);
            }
            ,
            s if s.matches("reservationType") /* ReservationType com.amazonaws.ec2#CapacityManagerDimension$ReservationType */ =>  {
                let var_9 =
                    Some(
                        Result::<crate::types::ReservationType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ReservationType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_type(var_9);
            }
            ,
            s if s.matches("reservationCreateTimestamp") /* ReservationCreateTimestamp com.amazonaws.ec2#CapacityManagerDimension$ReservationCreateTimestamp */ =>  {
                let var_10 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_reservation_create_timestamp(var_10);
            }
            ,
            s if s.matches("reservationStartTimestamp") /* ReservationStartTimestamp com.amazonaws.ec2#CapacityManagerDimension$ReservationStartTimestamp */ =>  {
                let var_11 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_reservation_start_timestamp(var_11);
            }
            ,
            s if s.matches("reservationEndTimestamp") /* ReservationEndTimestamp com.amazonaws.ec2#CapacityManagerDimension$ReservationEndTimestamp */ =>  {
                let var_12 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_reservation_end_timestamp(var_12);
            }
            ,
            s if s.matches("reservationEndDateType") /* ReservationEndDateType com.amazonaws.ec2#CapacityManagerDimension$ReservationEndDateType */ =>  {
                let var_13 =
                    Some(
                        Result::<crate::types::ReservationEndDateType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ReservationEndDateType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_end_date_type(var_13);
            }
            ,
            s if s.matches("tenancy") /* Tenancy com.amazonaws.ec2#CapacityManagerDimension$Tenancy */ =>  {
                let var_14 =
                    Some(
                        Result::<crate::types::CapacityTenancy, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::CapacityTenancy::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tenancy(var_14);
            }
            ,
            s if s.matches("reservationState") /* ReservationState com.amazonaws.ec2#CapacityManagerDimension$ReservationState */ =>  {
                let var_15 =
                    Some(
                        Result::<crate::types::ReservationState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ReservationState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_state(var_15);
            }
            ,
            s if s.matches("reservationInstanceMatchCriteria") /* ReservationInstanceMatchCriteria com.amazonaws.ec2#CapacityManagerDimension$ReservationInstanceMatchCriteria */ =>  {
                let var_16 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_instance_match_criteria(var_16);
            }
            ,
            s if s.matches("reservationUnusedFinancialOwner") /* ReservationUnusedFinancialOwner com.amazonaws.ec2#CapacityManagerDimension$ReservationUnusedFinancialOwner */ =>  {
                let var_17 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_reservation_unused_financial_owner(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
