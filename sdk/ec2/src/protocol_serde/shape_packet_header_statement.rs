// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_packet_header_statement(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PacketHeaderStatement, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PacketHeaderStatement::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sourceAddressSet") /* SourceAddresses com.amazonaws.ec2#PacketHeaderStatement$SourceAddresses */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_addresses(var_1);
            }
            ,
            s if s.matches("destinationAddressSet") /* DestinationAddresses com.amazonaws.ec2#PacketHeaderStatement$DestinationAddresses */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_addresses(var_2);
            }
            ,
            s if s.matches("sourcePortSet") /* SourcePorts com.amazonaws.ec2#PacketHeaderStatement$SourcePorts */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_ports(var_3);
            }
            ,
            s if s.matches("destinationPortSet") /* DestinationPorts com.amazonaws.ec2#PacketHeaderStatement$DestinationPorts */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_ports(var_4);
            }
            ,
            s if s.matches("sourcePrefixListSet") /* SourcePrefixLists com.amazonaws.ec2#PacketHeaderStatement$SourcePrefixLists */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_prefix_lists(var_5);
            }
            ,
            s if s.matches("destinationPrefixListSet") /* DestinationPrefixLists com.amazonaws.ec2#PacketHeaderStatement$DestinationPrefixLists */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_prefix_lists(var_6);
            }
            ,
            s if s.matches("protocolSet") /* Protocols com.amazonaws.ec2#PacketHeaderStatement$Protocols */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_protocol_list::de_protocol_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_protocols(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
