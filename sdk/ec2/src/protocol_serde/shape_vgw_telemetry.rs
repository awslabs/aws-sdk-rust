// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_vgw_telemetry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::VgwTelemetry, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VgwTelemetry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("acceptedRouteCount") /* AcceptedRouteCount com.amazonaws.ec2#VgwTelemetry$AcceptedRouteCount */ =>  {
                let var_1 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_accepted_route_count(var_1);
            }
            ,
            s if s.matches("lastStatusChange") /* LastStatusChange com.amazonaws.ec2#VgwTelemetry$LastStatusChange */ =>  {
                let var_2 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_status_change(var_2);
            }
            ,
            s if s.matches("outsideIpAddress") /* OutsideIpAddress com.amazonaws.ec2#VgwTelemetry$OutsideIpAddress */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_outside_ip_address(var_3);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#VgwTelemetry$Status */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::TelemetryStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TelemetryStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_4);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#VgwTelemetry$StatusMessage */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_5);
            }
            ,
            s if s.matches("certificateArn") /* CertificateArn com.amazonaws.ec2#VgwTelemetry$CertificateArn */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_certificate_arn(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
