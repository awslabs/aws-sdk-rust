// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AllocationStrategy");
    if let Some(var_2) = &input.allocation_strategy {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MaintenanceStrategies");
    if let Some(var_4) = &input.maintenance_strategies {
        crate::protocol_serde::shape_fleet_spot_maintenance_strategies_request::ser_fleet_spot_maintenance_strategies_request(scope_3, var_4)?;
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_6) = &input.instance_interruption_behavior {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_8) = &input.instance_pools_to_use_count {
        scope_7.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("SingleInstanceType");
    if let Some(var_10) = &input.single_instance_type {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_12) = &input.single_availability_zone {
        scope_11.boolean(*var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MinTargetCapacity");
    if let Some(var_14) = &input.min_target_capacity {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("MaxTotalPrice");
    if let Some(var_16) = &input.max_total_price {
        scope_15.string(var_16);
    }
    Ok(())
}
