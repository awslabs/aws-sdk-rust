// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_verified_access_instance(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::VerifiedAccessInstance, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VerifiedAccessInstance::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("verifiedAccessInstanceId") /* VerifiedAccessInstanceId com.amazonaws.ec2#VerifiedAccessInstance$VerifiedAccessInstanceId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_verified_access_instance_id(var_1);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#VerifiedAccessInstance$Description */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2);
            }
            ,
            s if s.matches("verifiedAccessTrustProviderSet") /* VerifiedAccessTrustProviders com.amazonaws.ec2#VerifiedAccessInstance$VerifiedAccessTrustProviders */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_verified_access_trust_provider_condensed_list::de_verified_access_trust_provider_condensed_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_verified_access_trust_providers(var_3);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#VerifiedAccessInstance$CreationTime */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_4);
            }
            ,
            s if s.matches("lastUpdatedTime") /* LastUpdatedTime com.amazonaws.ec2#VerifiedAccessInstance$LastUpdatedTime */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_last_updated_time(var_5);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VerifiedAccessInstance$Tags */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
