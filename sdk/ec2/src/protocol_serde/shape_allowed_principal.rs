// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_allowed_principal(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AllowedPrincipal, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AllowedPrincipal::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("principalType") /* PrincipalType com.amazonaws.ec2#AllowedPrincipal$PrincipalType */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::PrincipalType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PrincipalType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_principal_type(var_1);
            }
            ,
            s if s.matches("principal") /* Principal com.amazonaws.ec2#AllowedPrincipal$Principal */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_principal(var_2);
            }
            ,
            s if s.matches("servicePermissionId") /* ServicePermissionId com.amazonaws.ec2#AllowedPrincipal$ServicePermissionId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_permission_id(var_3);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#AllowedPrincipal$Tags */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_4);
            }
            ,
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#AllowedPrincipal$ServiceId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
