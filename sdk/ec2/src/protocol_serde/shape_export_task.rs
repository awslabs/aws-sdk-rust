// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_export_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ExportTask, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ExportTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#ExportTask$Description */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1);
            }
            ,
            s if s.matches("exportTaskId") /* ExportTaskId com.amazonaws.ec2#ExportTask$ExportTaskId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_export_task_id(var_2);
            }
            ,
            s if s.matches("exportToS3") /* ExportToS3Task com.amazonaws.ec2#ExportTask$ExportToS3Task */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_export_to_s3_task::de_export_to_s3_task(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_export_to_s3_task(var_3);
            }
            ,
            s if s.matches("instanceExport") /* InstanceExportDetails com.amazonaws.ec2#ExportTask$InstanceExportDetails */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_instance_export_details::de_instance_export_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_export_details(var_4);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#ExportTask$State */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::ExportTaskState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ExportTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_5);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#ExportTask$StatusMessage */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_6);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ExportTask$Tags */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
