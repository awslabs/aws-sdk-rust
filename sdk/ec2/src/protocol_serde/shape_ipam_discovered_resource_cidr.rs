// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ipam_discovered_resource_cidr(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::IpamDiscoveredResourceCidr, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamDiscoveredResourceCidr::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamResourceDiscoveryId") /* IpamResourceDiscoveryId com.amazonaws.ec2#IpamDiscoveredResourceCidr$IpamResourceDiscoveryId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_resource_discovery_id(var_1);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceRegion */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_2);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_3);
            }
            ,
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceOwnerId */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_4);
            }
            ,
            s if s.matches("resourceCidr") /* ResourceCidr com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceCidr */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_cidr(var_5);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceType */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::IpamResourceType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamResourceType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_6);
            }
            ,
            s if s.matches("resourceTagSet") /* ResourceTags com.amazonaws.ec2#IpamDiscoveredResourceCidr$ResourceTags */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_ipam_resource_tag_list::de_ipam_resource_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tags(var_7);
            }
            ,
            s if s.matches("ipUsage") /* IpUsage com.amazonaws.ec2#IpamDiscoveredResourceCidr$IpUsage */ =>  {
                let var_8 =
                    Some(
                         {
                            <f64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (double: `com.amazonaws.ec2#BoxedDouble`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ip_usage(var_8);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#IpamDiscoveredResourceCidr$VpcId */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_9);
            }
            ,
            s if s.matches("sampleTime") /* SampleTime com.amazonaws.ec2#IpamDiscoveredResourceCidr$SampleTime */ =>  {
                let var_10 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_sample_time(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
