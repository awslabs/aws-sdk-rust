// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_path_component(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PathComponent, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PathComponent::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("sequenceNumber") /* SequenceNumber com.amazonaws.ec2#PathComponent$SequenceNumber */ =>  {
                let var_1 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_sequence_number(var_1);
            }
            ,
            s if s.matches("aclRule") /* AclRule com.amazonaws.ec2#PathComponent$AclRule */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_analysis_acl_rule::de_analysis_acl_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_acl_rule(var_2);
            }
            ,
            s if s.matches("attachedTo") /* AttachedTo com.amazonaws.ec2#PathComponent$AttachedTo */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_attached_to(var_3);
            }
            ,
            s if s.matches("component") /* Component com.amazonaws.ec2#PathComponent$Component */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_component(var_4);
            }
            ,
            s if s.matches("destinationVpc") /* DestinationVpc com.amazonaws.ec2#PathComponent$DestinationVpc */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_vpc(var_5);
            }
            ,
            s if s.matches("outboundHeader") /* OutboundHeader com.amazonaws.ec2#PathComponent$OutboundHeader */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_analysis_packet_header::de_analysis_packet_header(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_outbound_header(var_6);
            }
            ,
            s if s.matches("inboundHeader") /* InboundHeader com.amazonaws.ec2#PathComponent$InboundHeader */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_analysis_packet_header::de_analysis_packet_header(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inbound_header(var_7);
            }
            ,
            s if s.matches("routeTableRoute") /* RouteTableRoute com.amazonaws.ec2#PathComponent$RouteTableRoute */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_analysis_route_table_route::de_analysis_route_table_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table_route(var_8);
            }
            ,
            s if s.matches("securityGroupRule") /* SecurityGroupRule com.amazonaws.ec2#PathComponent$SecurityGroupRule */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_analysis_security_group_rule::de_analysis_security_group_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_rule(var_9);
            }
            ,
            s if s.matches("sourceVpc") /* SourceVpc com.amazonaws.ec2#PathComponent$SourceVpc */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_vpc(var_10);
            }
            ,
            s if s.matches("subnet") /* Subnet com.amazonaws.ec2#PathComponent$Subnet */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet(var_11);
            }
            ,
            s if s.matches("vpc") /* Vpc com.amazonaws.ec2#PathComponent$Vpc */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_12);
            }
            ,
            s if s.matches("additionalDetailSet") /* AdditionalDetails com.amazonaws.ec2#PathComponent$AdditionalDetails */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_additional_detail_list::de_additional_detail_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_additional_details(var_13);
            }
            ,
            s if s.matches("transitGateway") /* TransitGateway com.amazonaws.ec2#PathComponent$TransitGateway */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway(var_14);
            }
            ,
            s if s.matches("transitGatewayRouteTableRoute") /* TransitGatewayRouteTableRoute com.amazonaws.ec2#PathComponent$TransitGatewayRouteTableRoute */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_transit_gateway_route_table_route::de_transit_gateway_route_table_route(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_route(var_15);
            }
            ,
            s if s.matches("explanationSet") /* Explanations com.amazonaws.ec2#PathComponent$Explanations */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_explanation_list::de_explanation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_explanations(var_16);
            }
            ,
            s if s.matches("elasticLoadBalancerListener") /* ElasticLoadBalancerListener com.amazonaws.ec2#PathComponent$ElasticLoadBalancerListener */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_analysis_component::de_analysis_component(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_elastic_load_balancer_listener(var_17);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
