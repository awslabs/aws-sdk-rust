// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SecurityGroupId");
    if let Some(var_2) = &input.security_group_ids {
        let mut list_4 = scope_1.start_list(true, Some("item"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("SecurityGroup");
    if let Some(var_7) = &input.security_groups {
        let mut list_9 = scope_6.start_list(true, Some("item"));
        for item_8 in var_7 {
            #[allow(unused_mut)]
            let mut entry_10 = list_9.entry();
            entry_10.string(item_8);
        }
        list_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("AddressingType");
    if let Some(var_12) = &input.addressing_type {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("BlockDeviceMapping");
    if let Some(var_14) = &input.block_device_mappings {
        let mut list_16 = scope_13.start_list(true, Some("item"));
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::protocol_serde::shape_block_device_mapping::ser_block_device_mapping(
                entry_17, item_15,
            )?;
        }
        list_16.finish();
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("EbsOptimized");
    if let Some(var_19) = &input.ebs_optimized {
        scope_18.boolean(*var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("IamInstanceProfile");
    if let Some(var_21) = &input.iam_instance_profile {
        crate::protocol_serde::shape_iam_instance_profile_specification::ser_iam_instance_profile_specification(scope_20, var_21)?;
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("ImageId");
    if let Some(var_23) = &input.image_id {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("InstanceType");
    if let Some(var_25) = &input.instance_type {
        scope_24.string(var_25.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("KernelId");
    if let Some(var_27) = &input.kernel_id {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("KeyName");
    if let Some(var_29) = &input.key_name {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("Monitoring");
    if let Some(var_31) = &input.monitoring {
        crate::protocol_serde::shape_run_instances_monitoring_enabled::ser_run_instances_monitoring_enabled(scope_30, var_31)?;
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("NetworkInterface");
    if let Some(var_33) = &input.network_interfaces {
        let mut list_35 = scope_32.start_list(true, Some("item"));
        for item_34 in var_33 {
            #[allow(unused_mut)]
            let mut entry_36 = list_35.entry();
            crate::protocol_serde::shape_instance_network_interface_specification::ser_instance_network_interface_specification(entry_36, item_34)?;
        }
        list_35.finish();
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Placement");
    if let Some(var_38) = &input.placement {
        crate::protocol_serde::shape_spot_placement::ser_spot_placement(scope_37, var_38)?;
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("RamdiskId");
    if let Some(var_40) = &input.ramdisk_id {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("SubnetId");
    if let Some(var_42) = &input.subnet_id {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("UserData");
    if let Some(var_44) = &input.user_data {
        scope_43.string(var_44);
    }
    Ok(())
}
