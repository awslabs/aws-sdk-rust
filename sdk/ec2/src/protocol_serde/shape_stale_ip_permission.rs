// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_stale_ip_permission(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::StaleIpPermission, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::StaleIpPermission::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("fromPort") /* FromPort com.amazonaws.ec2#StaleIpPermission$FromPort */ =>  {
                let var_1 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_from_port(var_1);
            }
            ,
            s if s.matches("ipProtocol") /* IpProtocol com.amazonaws.ec2#StaleIpPermission$IpProtocol */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_protocol(var_2);
            }
            ,
            s if s.matches("ipRanges") /* IpRanges com.amazonaws.ec2#StaleIpPermission$IpRanges */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_ip_ranges::de_ip_ranges(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ip_ranges(var_3);
            }
            ,
            s if s.matches("prefixListIds") /* PrefixListIds com.amazonaws.ec2#StaleIpPermission$PrefixListIds */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_prefix_list_id_set::de_prefix_list_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefix_list_ids(var_4);
            }
            ,
            s if s.matches("toPort") /* ToPort com.amazonaws.ec2#StaleIpPermission$ToPort */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_to_port(var_5);
            }
            ,
            s if s.matches("groups") /* UserIdGroupPairs com.amazonaws.ec2#StaleIpPermission$UserIdGroupPairs */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_user_id_group_pair_set::de_user_id_group_pair_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_id_group_pairs(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
