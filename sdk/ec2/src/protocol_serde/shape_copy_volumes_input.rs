// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_copy_volumes_input_input_input(
    input: &crate::operation::copy_volumes::CopyVolumesInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CopyVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceVolumeId");
    if let Some(var_2) = &input.source_volume_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Iops");
    if let Some(var_4) = &input.iops {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Size");
    if let Some(var_6) = &input.size {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("VolumeType");
    if let Some(var_8) = &input.volume_type {
        scope_7.string(var_8.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DryRun");
    if let Some(var_10) = &input.dry_run {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("TagSpecification");
    if let Some(var_12) = &input.tag_specifications {
        if !var_12.is_empty() {
            let mut list_14 = scope_11.start_list(true, Some("item"));
            for item_13 in var_12 {
                #[allow(unused_mut)]
                let mut entry_15 = list_14.entry();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(entry_15, item_13)?;
            }
            list_14.finish();
        }
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("MultiAttachEnabled");
    if let Some(var_17) = &input.multi_attach_enabled {
        scope_16.boolean(*var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("Throughput");
    if let Some(var_19) = &input.throughput {
        scope_18.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ClientToken");
    if let Some(var_21) = &input.client_token {
        scope_20.string(var_21);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
