// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_metric_data_result(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::MetricDataResult, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MetricDataResult::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("dimension") /* Dimension com.amazonaws.ec2#MetricDataResult$Dimension */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_capacity_manager_dimension::de_capacity_manager_dimension(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dimension(var_1);
            }
            ,
            s if s.matches("timestamp") /* Timestamp com.amazonaws.ec2#MetricDataResult$Timestamp */ =>  {
                let var_2 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_timestamp(var_2);
            }
            ,
            s if s.matches("metricValueSet") /* MetricValues com.amazonaws.ec2#MetricDataResult$MetricValues */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_metric_value_set::de_metric_value_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metric_values(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
