// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_replace_root_volume_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ReplaceRootVolumeTask, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ReplaceRootVolumeTask::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("replaceRootVolumeTaskId") /* ReplaceRootVolumeTaskId com.amazonaws.ec2#ReplaceRootVolumeTask$ReplaceRootVolumeTaskId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replace_root_volume_task_id(var_1);
            }
            ,
            s if s.matches("instanceId") /* InstanceId com.amazonaws.ec2#ReplaceRootVolumeTask$InstanceId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_id(var_2);
            }
            ,
            s if s.matches("taskState") /* TaskState com.amazonaws.ec2#ReplaceRootVolumeTask$TaskState */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::ReplaceRootVolumeTaskState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ReplaceRootVolumeTaskState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_task_state(var_3);
            }
            ,
            s if s.matches("startTime") /* StartTime com.amazonaws.ec2#ReplaceRootVolumeTask$StartTime */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_start_time(var_4);
            }
            ,
            s if s.matches("completeTime") /* CompleteTime com.amazonaws.ec2#ReplaceRootVolumeTask$CompleteTime */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_complete_time(var_5);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ReplaceRootVolumeTask$Tags */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_6);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2#ReplaceRootVolumeTask$ImageId */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_7);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#ReplaceRootVolumeTask$SnapshotId */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_8);
            }
            ,
            s if s.matches("deleteReplacedRootVolume") /* DeleteReplacedRootVolume com.amazonaws.ec2#ReplaceRootVolumeTask$DeleteReplacedRootVolume */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_replaced_root_volume(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
