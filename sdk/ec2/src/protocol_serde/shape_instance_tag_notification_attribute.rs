// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_instance_tag_notification_attribute(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceTagNotificationAttribute, aws_smithy_xml::decode::XmlDecodeError>
{
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceTagNotificationAttribute::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("instanceTagKeySet") /* InstanceTagKeys com.amazonaws.ec2#InstanceTagNotificationAttribute$InstanceTagKeys */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_instance_tag_key_set::de_instance_tag_key_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instance_tag_keys(var_1);
            }
            ,
            s if s.matches("includeAllTagsOfInstance") /* IncludeAllTagsOfInstance com.amazonaws.ec2#InstanceTagNotificationAttribute$IncludeAllTagsOfInstance */ =>  {
                let var_2 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_include_all_tags_of_instance(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
