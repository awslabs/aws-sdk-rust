// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_reserved_instances_offerings_input_input(
    input: &crate::operation::describe_reserved_instances_offerings::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZone");
    if let Some(var_2) = &input.availability_zone {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Filter");
    if let Some(var_4) = &input.filters {
        let mut list_6 = scope_3.start_list(true, Some("Filter"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_7, item_5)?;
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("IncludeMarketplace");
    if let Some(var_9) = &input.include_marketplace {
        scope_8.boolean(*var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("InstanceType");
    if let Some(var_11) = &input.instance_type {
        scope_10.string(var_11.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MaxDuration");
    if let Some(var_13) = &input.max_duration {
        scope_12.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("MaxInstanceCount");
    if let Some(var_15) = &input.max_instance_count {
        scope_14.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("MinDuration");
    if let Some(var_17) = &input.min_duration {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("OfferingClass");
    if let Some(var_19) = &input.offering_class {
        scope_18.string(var_19.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("ProductDescription");
    if let Some(var_21) = &input.product_description {
        scope_20.string(var_21.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_23) = &input.reserved_instances_offering_ids {
        let mut list_25 = scope_22.start_list(true, None);
        for item_24 in var_23 {
            #[allow(unused_mut)]
            let mut entry_26 = list_25.entry();
            entry_26.string(item_24);
        }
        list_25.finish();
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("DryRun");
    if let Some(var_28) = &input.dry_run {
        scope_27.boolean(*var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("InstanceTenancy");
    if let Some(var_30) = &input.instance_tenancy {
        scope_29.string(var_30.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("MaxResults");
    if let Some(var_32) = &input.max_results {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("NextToken");
    if let Some(var_34) = &input.next_token {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("OfferingType");
    if let Some(var_36) = &input.offering_type {
        scope_35.string(var_36.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
