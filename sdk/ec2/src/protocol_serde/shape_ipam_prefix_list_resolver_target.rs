// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ipam_prefix_list_resolver_target(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::IpamPrefixListResolverTarget, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamPrefixListResolverTarget::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ipamPrefixListResolverTargetId") /* IpamPrefixListResolverTargetId com.amazonaws.ec2#IpamPrefixListResolverTarget$IpamPrefixListResolverTargetId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_prefix_list_resolver_target_id(var_1);
            }
            ,
            s if s.matches("ipamPrefixListResolverTargetArn") /* IpamPrefixListResolverTargetArn com.amazonaws.ec2#IpamPrefixListResolverTarget$IpamPrefixListResolverTargetArn */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_prefix_list_resolver_target_arn(var_2);
            }
            ,
            s if s.matches("ipamPrefixListResolverId") /* IpamPrefixListResolverId com.amazonaws.ec2#IpamPrefixListResolverTarget$IpamPrefixListResolverId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_prefix_list_resolver_id(var_3);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#IpamPrefixListResolverTarget$OwnerId */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_4);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#IpamPrefixListResolverTarget$PrefixListId */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_5);
            }
            ,
            s if s.matches("prefixListRegion") /* PrefixListRegion com.amazonaws.ec2#IpamPrefixListResolverTarget$PrefixListRegion */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_region(var_6);
            }
            ,
            s if s.matches("desiredVersion") /* DesiredVersion com.amazonaws.ec2#IpamPrefixListResolverTarget$DesiredVersion */ =>  {
                let var_7 =
                    Some(
                         {
                            <i64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.ec2#BoxedLong`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_desired_version(var_7);
            }
            ,
            s if s.matches("lastSyncedVersion") /* LastSyncedVersion com.amazonaws.ec2#IpamPrefixListResolverTarget$LastSyncedVersion */ =>  {
                let var_8 =
                    Some(
                         {
                            <i64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.ec2#BoxedLong`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_last_synced_version(var_8);
            }
            ,
            s if s.matches("trackLatestVersion") /* TrackLatestVersion com.amazonaws.ec2#IpamPrefixListResolverTarget$TrackLatestVersion */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_track_latest_version(var_9);
            }
            ,
            s if s.matches("stateMessage") /* StateMessage com.amazonaws.ec2#IpamPrefixListResolverTarget$StateMessage */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_10);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IpamPrefixListResolverTarget$State */ =>  {
                let var_11 =
                    Some(
                        Result::<crate::types::IpamPrefixListResolverTargetState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPrefixListResolverTargetState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_11);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#IpamPrefixListResolverTarget$Tags */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
