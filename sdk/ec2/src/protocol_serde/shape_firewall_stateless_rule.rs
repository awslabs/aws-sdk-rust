// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_firewall_stateless_rule(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::FirewallStatelessRule, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::FirewallStatelessRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ruleGroupArn") /* RuleGroupArn com.amazonaws.ec2#FirewallStatelessRule$RuleGroupArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_group_arn(var_1);
            }
            ,
            s if s.matches("sourceSet") /* Sources com.amazonaws.ec2#FirewallStatelessRule$Sources */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sources(var_2);
            }
            ,
            s if s.matches("destinationSet") /* Destinations com.amazonaws.ec2#FirewallStatelessRule$Destinations */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destinations(var_3);
            }
            ,
            s if s.matches("sourcePortSet") /* SourcePorts com.amazonaws.ec2#FirewallStatelessRule$SourcePorts */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_port_range_list::de_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_ports(var_4);
            }
            ,
            s if s.matches("destinationPortSet") /* DestinationPorts com.amazonaws.ec2#FirewallStatelessRule$DestinationPorts */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_port_range_list::de_port_range_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination_ports(var_5);
            }
            ,
            s if s.matches("protocolSet") /* Protocols com.amazonaws.ec2#FirewallStatelessRule$Protocols */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_protocol_int_list::de_protocol_int_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_protocols(var_6);
            }
            ,
            s if s.matches("ruleAction") /* RuleAction com.amazonaws.ec2#FirewallStatelessRule$RuleAction */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_action(var_7);
            }
            ,
            s if s.matches("priority") /* Priority com.amazonaws.ec2#FirewallStatelessRule$Priority */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Priority`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_priority(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
