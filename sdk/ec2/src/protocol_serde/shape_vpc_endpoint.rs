// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_vpc_endpoint(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::VpcEndpoint, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VpcEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("vpcEndpointId") /* VpcEndpointId com.amazonaws.ec2#VpcEndpoint$VpcEndpointId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_id(var_1);
            }
            ,
            s if s.matches("vpcEndpointType") /* VpcEndpointType com.amazonaws.ec2#VpcEndpoint$VpcEndpointType */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::VpcEndpointType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::VpcEndpointType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_type(var_2);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#VpcEndpoint$VpcId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_3);
            }
            ,
            s if s.matches("serviceName") /* ServiceName com.amazonaws.ec2#VpcEndpoint$ServiceName */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_name(var_4);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#VpcEndpoint$State */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::State, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::State::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_5);
            }
            ,
            s if s.matches("policyDocument") /* PolicyDocument com.amazonaws.ec2#VpcEndpoint$PolicyDocument */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_policy_document(var_6);
            }
            ,
            s if s.matches("routeTableIdSet") /* RouteTableIds com.amazonaws.ec2#VpcEndpoint$RouteTableIds */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_route_table_ids(var_7);
            }
            ,
            s if s.matches("subnetIdSet") /* SubnetIds com.amazonaws.ec2#VpcEndpoint$SubnetIds */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_subnet_ids(var_8);
            }
            ,
            s if s.matches("groupSet") /* Groups com.amazonaws.ec2#VpcEndpoint$Groups */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_group_identifier_set::de_group_identifier_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_groups(var_9);
            }
            ,
            s if s.matches("ipAddressType") /* IpAddressType com.amazonaws.ec2#VpcEndpoint$IpAddressType */ =>  {
                let var_10 =
                    Some(
                        Result::<crate::types::IpAddressType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpAddressType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address_type(var_10);
            }
            ,
            s if s.matches("dnsOptions") /* DnsOptions com.amazonaws.ec2#VpcEndpoint$DnsOptions */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_dns_options::de_dns_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_options(var_11);
            }
            ,
            s if s.matches("privateDnsEnabled") /* PrivateDnsEnabled com.amazonaws.ec2#VpcEndpoint$PrivateDnsEnabled */ =>  {
                let var_12 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_private_dns_enabled(var_12);
            }
            ,
            s if s.matches("requesterManaged") /* RequesterManaged com.amazonaws.ec2#VpcEndpoint$RequesterManaged */ =>  {
                let var_13 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_managed(var_13);
            }
            ,
            s if s.matches("networkInterfaceIdSet") /* NetworkInterfaceIds com.amazonaws.ec2#VpcEndpoint$NetworkInterfaceIds */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_ids(var_14);
            }
            ,
            s if s.matches("dnsEntrySet") /* DnsEntries com.amazonaws.ec2#VpcEndpoint$DnsEntries */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_dns_entry_set::de_dns_entry_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_entries(var_15);
            }
            ,
            s if s.matches("creationTimestamp") /* CreationTimestamp com.amazonaws.ec2#VpcEndpoint$CreationTimestamp */ =>  {
                let var_16 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_16);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpcEndpoint$Tags */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_17);
            }
            ,
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#VpcEndpoint$OwnerId */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_18);
            }
            ,
            s if s.matches("lastError") /* LastError com.amazonaws.ec2#VpcEndpoint$LastError */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_last_error::de_last_error(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_last_error(var_19);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
