// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_ipam_address_history_record(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::IpamAddressHistoryRecord, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamAddressHistoryRecord::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("resourceOwnerId") /* ResourceOwnerId com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceOwnerId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner_id(var_1);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceRegion */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_2);
            }
            ,
            s if s.matches("resourceType") /* ResourceType com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceType */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::IpamAddressHistoryResourceType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamAddressHistoryResourceType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_type(var_3);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceId */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_4);
            }
            ,
            s if s.matches("resourceCidr") /* ResourceCidr com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceCidr */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_cidr(var_5);
            }
            ,
            s if s.matches("resourceName") /* ResourceName com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceName */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_name(var_6);
            }
            ,
            s if s.matches("resourceComplianceStatus") /* ResourceComplianceStatus com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceComplianceStatus */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::IpamComplianceStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamComplianceStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_compliance_status(var_7);
            }
            ,
            s if s.matches("resourceOverlapStatus") /* ResourceOverlapStatus com.amazonaws.ec2#IpamAddressHistoryRecord$ResourceOverlapStatus */ =>  {
                let var_8 =
                    Some(
                        Result::<crate::types::IpamOverlapStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamOverlapStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_overlap_status(var_8);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#IpamAddressHistoryRecord$VpcId */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_9);
            }
            ,
            s if s.matches("sampledStartTime") /* SampledStartTime com.amazonaws.ec2#IpamAddressHistoryRecord$SampledStartTime */ =>  {
                let var_10 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_sampled_start_time(var_10);
            }
            ,
            s if s.matches("sampledEndTime") /* SampledEndTime com.amazonaws.ec2#IpamAddressHistoryRecord$SampledEndTime */ =>  {
                let var_11 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_sampled_end_time(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
