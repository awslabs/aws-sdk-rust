// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_client_vpn_endpoint(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ClientVpnEndpoint, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ClientVpnEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("clientVpnEndpointId") /* ClientVpnEndpointId com.amazonaws.ec2#ClientVpnEndpoint$ClientVpnEndpointId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_vpn_endpoint_id(var_1);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#ClientVpnEndpoint$Description */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_2);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#ClientVpnEndpoint$Status */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_client_vpn_endpoint_status::de_client_vpn_endpoint_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_3);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#ClientVpnEndpoint$CreationTime */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_4);
            }
            ,
            s if s.matches("deletionTime") /* DeletionTime com.amazonaws.ec2#ClientVpnEndpoint$DeletionTime */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_deletion_time(var_5);
            }
            ,
            s if s.matches("dnsName") /* DnsName com.amazonaws.ec2#ClientVpnEndpoint$DnsName */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_6);
            }
            ,
            s if s.matches("clientCidrBlock") /* ClientCidrBlock com.amazonaws.ec2#ClientVpnEndpoint$ClientCidrBlock */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_client_cidr_block(var_7);
            }
            ,
            s if s.matches("dnsServer") /* DnsServers com.amazonaws.ec2#ClientVpnEndpoint$DnsServers */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_servers(var_8);
            }
            ,
            s if s.matches("splitTunnel") /* SplitTunnel com.amazonaws.ec2#ClientVpnEndpoint$SplitTunnel */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_split_tunnel(var_9);
            }
            ,
            s if s.matches("vpnProtocol") /* VpnProtocol com.amazonaws.ec2#ClientVpnEndpoint$VpnProtocol */ =>  {
                let var_10 =
                    Some(
                        Result::<crate::types::VpnProtocol, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::VpnProtocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpn_protocol(var_10);
            }
            ,
            s if s.matches("transportProtocol") /* TransportProtocol com.amazonaws.ec2#ClientVpnEndpoint$TransportProtocol */ =>  {
                let var_11 =
                    Some(
                        Result::<crate::types::TransportProtocol, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TransportProtocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_transport_protocol(var_11);
            }
            ,
            s if s.matches("vpnPort") /* VpnPort com.amazonaws.ec2#ClientVpnEndpoint$VpnPort */ =>  {
                let var_12 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_vpn_port(var_12);
            }
            ,
            s if s.matches("associatedTargetNetwork") /* AssociatedTargetNetworks com.amazonaws.ec2#ClientVpnEndpoint$AssociatedTargetNetworks */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_associated_target_network_set::de_associated_target_network_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_associated_target_networks(var_13);
            }
            ,
            s if s.matches("serverCertificateArn") /* ServerCertificateArn com.amazonaws.ec2#ClientVpnEndpoint$ServerCertificateArn */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_server_certificate_arn(var_14);
            }
            ,
            s if s.matches("authenticationOptions") /* AuthenticationOptions com.amazonaws.ec2#ClientVpnEndpoint$AuthenticationOptions */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_client_vpn_authentication_list::de_client_vpn_authentication_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_authentication_options(var_15);
            }
            ,
            s if s.matches("connectionLogOptions") /* ConnectionLogOptions com.amazonaws.ec2#ClientVpnEndpoint$ConnectionLogOptions */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_connection_log_response_options::de_connection_log_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_connection_log_options(var_16);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#ClientVpnEndpoint$Tags */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_17);
            }
            ,
            s if s.matches("securityGroupIdSet") /* SecurityGroupIds com.amazonaws.ec2#ClientVpnEndpoint$SecurityGroupIds */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_client_vpn_security_group_id_set::de_client_vpn_security_group_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_18);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#ClientVpnEndpoint$VpcId */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_19);
            }
            ,
            s if s.matches("selfServicePortalUrl") /* SelfServicePortalUrl com.amazonaws.ec2#ClientVpnEndpoint$SelfServicePortalUrl */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_self_service_portal_url(var_20);
            }
            ,
            s if s.matches("clientConnectOptions") /* ClientConnectOptions com.amazonaws.ec2#ClientVpnEndpoint$ClientConnectOptions */ =>  {
                let var_21 =
                    Some(
                        crate::protocol_serde::shape_client_connect_response_options::de_client_connect_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_connect_options(var_21);
            }
            ,
            s if s.matches("sessionTimeoutHours") /* SessionTimeoutHours com.amazonaws.ec2#ClientVpnEndpoint$SessionTimeoutHours */ =>  {
                let var_22 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_session_timeout_hours(var_22);
            }
            ,
            s if s.matches("clientLoginBannerOptions") /* ClientLoginBannerOptions com.amazonaws.ec2#ClientVpnEndpoint$ClientLoginBannerOptions */ =>  {
                let var_23 =
                    Some(
                        crate::protocol_serde::shape_client_login_banner_response_options::de_client_login_banner_response_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_client_login_banner_options(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
