// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_image_attribute_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_image_attribute::DescribeImageAttributeOutput,
    crate::operation::describe_image_attribute::DescribeImageAttributeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::describe_image_attribute::DescribeImageAttributeError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::describe_image_attribute::DescribeImageAttributeError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_image_attribute_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::describe_image_attribute::DescribeImageAttributeOutput,
    crate::operation::describe_image_attribute::DescribeImageAttributeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_image_attribute::builders::DescribeImageAttributeOutputBuilder::default();
        let _ = response;
        output =
            crate::protocol_serde::shape_describe_image_attribute::de_describe_image_attribute(
                response.body().as_ref(),
                output,
            )
            .map_err(
                crate::operation::describe_image_attribute::DescribeImageAttributeError::unhandled,
            )?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_describe_image_attribute(
    inp: &[u8],
    mut builder: crate::operation::describe_image_attribute::builders::DescribeImageAttributeOutputBuilder,
) -> Result<
    crate::operation::describe_image_attribute::builders::DescribeImageAttributeOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeImageAttributeResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DescribeImageAttributeResponse got {:?}",
            start_el
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("blockDeviceMapping") /* BlockDeviceMappings com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$BlockDeviceMappings */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_block_device_mapping_list::de_block_device_mapping_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_block_device_mappings(var_1);
            }
            ,
            s if s.matches("imageId") /* ImageId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$ImageId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_image_id(var_2);
            }
            ,
            s if s.matches("launchPermission") /* LaunchPermissions com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$LaunchPermissions */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_launch_permission_list::de_launch_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_permissions(var_3);
            }
            ,
            s if s.matches("productCodes") /* ProductCodes com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$ProductCodes */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_product_code_list::de_product_code_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_product_codes(var_4);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$Description */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_description(var_5);
            }
            ,
            s if s.matches("kernel") /* KernelId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$KernelId */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_kernel_id(var_6);
            }
            ,
            s if s.matches("ramdisk") /* RamdiskId com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$RamdiskId */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ramdisk_id(var_7);
            }
            ,
            s if s.matches("sriovNetSupport") /* SriovNetSupport com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$SriovNetSupport */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sriov_net_support(var_8);
            }
            ,
            s if s.matches("bootMode") /* BootMode com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$BootMode */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_boot_mode(var_9);
            }
            ,
            s if s.matches("tpmSupport") /* TpmSupport com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$TpmSupport */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tpm_support(var_10);
            }
            ,
            s if s.matches("uefiData") /* UefiData com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$UefiData */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_uefi_data(var_11);
            }
            ,
            s if s.matches("lastLaunchedTime") /* LastLaunchedTime com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$LastLaunchedTime */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_last_launched_time(var_12);
            }
            ,
            s if s.matches("imdsSupport") /* ImdsSupport com.amazonaws.ec2.synthetic#DescribeImageAttributeOutput$ImdsSupport */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_attribute_value::de_attribute_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_imds_support(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
