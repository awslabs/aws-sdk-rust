// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ec2_instance_connect_endpoint(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Ec2InstanceConnectEndpoint, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Ec2InstanceConnectEndpoint::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#Ec2InstanceConnectEndpoint$OwnerId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1);
            }
            ,
            s if s.matches("instanceConnectEndpointId") /* InstanceConnectEndpointId com.amazonaws.ec2#Ec2InstanceConnectEndpoint$InstanceConnectEndpointId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_connect_endpoint_id(var_2);
            }
            ,
            s if s.matches("instanceConnectEndpointArn") /* InstanceConnectEndpointArn com.amazonaws.ec2#Ec2InstanceConnectEndpoint$InstanceConnectEndpointArn */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_connect_endpoint_arn(var_3);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#Ec2InstanceConnectEndpoint$State */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::Ec2InstanceConnectEndpointState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::Ec2InstanceConnectEndpointState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_4);
            }
            ,
            s if s.matches("stateMessage") /* StateMessage com.amazonaws.ec2#Ec2InstanceConnectEndpoint$StateMessage */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_5);
            }
            ,
            s if s.matches("dnsName") /* DnsName com.amazonaws.ec2#Ec2InstanceConnectEndpoint$DnsName */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dns_name(var_6);
            }
            ,
            s if s.matches("fipsDnsName") /* FipsDnsName com.amazonaws.ec2#Ec2InstanceConnectEndpoint$FipsDnsName */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_fips_dns_name(var_7);
            }
            ,
            s if s.matches("networkInterfaceIdSet") /* NetworkInterfaceIds com.amazonaws.ec2#Ec2InstanceConnectEndpoint$NetworkInterfaceIds */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_network_interface_id_set::de_network_interface_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_interface_ids(var_8);
            }
            ,
            s if s.matches("vpcId") /* VpcId com.amazonaws.ec2#Ec2InstanceConnectEndpoint$VpcId */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_9);
            }
            ,
            s if s.matches("availabilityZone") /* AvailabilityZone com.amazonaws.ec2#Ec2InstanceConnectEndpoint$AvailabilityZone */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_availability_zone(var_10);
            }
            ,
            s if s.matches("createdAt") /* CreatedAt com.amazonaws.ec2#Ec2InstanceConnectEndpoint$CreatedAt */ =>  {
                let var_11 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_created_at(var_11);
            }
            ,
            s if s.matches("subnetId") /* SubnetId com.amazonaws.ec2#Ec2InstanceConnectEndpoint$SubnetId */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subnet_id(var_12);
            }
            ,
            s if s.matches("preserveClientIp") /* PreserveClientIp com.amazonaws.ec2#Ec2InstanceConnectEndpoint$PreserveClientIp */ =>  {
                let var_13 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_preserve_client_ip(var_13);
            }
            ,
            s if s.matches("securityGroupIdSet") /* SecurityGroupIds com.amazonaws.ec2#Ec2InstanceConnectEndpoint$SecurityGroupIds */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_security_group_id_set::de_security_group_id_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_security_group_ids(var_14);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#Ec2InstanceConnectEndpoint$Tags */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
