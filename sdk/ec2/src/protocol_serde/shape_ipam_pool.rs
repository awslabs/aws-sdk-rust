// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ipam_pool(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::IpamPool, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamPool::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#IpamPool$OwnerId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1);
            }
            ,
            s if s.matches("ipamPoolId") /* IpamPoolId com.amazonaws.ec2#IpamPool$IpamPoolId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_id(var_2);
            }
            ,
            s if s.matches("sourceIpamPoolId") /* SourceIpamPoolId com.amazonaws.ec2#IpamPool$SourceIpamPoolId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_ipam_pool_id(var_3);
            }
            ,
            s if s.matches("ipamPoolArn") /* IpamPoolArn com.amazonaws.ec2#IpamPool$IpamPoolArn */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_arn(var_4);
            }
            ,
            s if s.matches("ipamScopeArn") /* IpamScopeArn com.amazonaws.ec2#IpamPool$IpamScopeArn */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_arn(var_5);
            }
            ,
            s if s.matches("ipamScopeType") /* IpamScopeType com.amazonaws.ec2#IpamPool$IpamScopeType */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::IpamScopeType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamScopeType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_scope_type(var_6);
            }
            ,
            s if s.matches("ipamArn") /* IpamArn com.amazonaws.ec2#IpamPool$IpamArn */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_arn(var_7);
            }
            ,
            s if s.matches("ipamRegion") /* IpamRegion com.amazonaws.ec2#IpamPool$IpamRegion */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_region(var_8);
            }
            ,
            s if s.matches("locale") /* Locale com.amazonaws.ec2#IpamPool$Locale */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_locale(var_9);
            }
            ,
            s if s.matches("poolDepth") /* PoolDepth com.amazonaws.ec2#IpamPool$PoolDepth */ =>  {
                let var_10 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_pool_depth(var_10);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#IpamPool$State */ =>  {
                let var_11 =
                    Some(
                        Result::<crate::types::IpamPoolState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPoolState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_11);
            }
            ,
            s if s.matches("stateMessage") /* StateMessage com.amazonaws.ec2#IpamPool$StateMessage */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_message(var_12);
            }
            ,
            s if s.matches("description") /* Description com.amazonaws.ec2#IpamPool$Description */ =>  {
                let var_13 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_13);
            }
            ,
            s if s.matches("autoImport") /* AutoImport com.amazonaws.ec2#IpamPool$AutoImport */ =>  {
                let var_14 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_auto_import(var_14);
            }
            ,
            s if s.matches("publiclyAdvertisable") /* PubliclyAdvertisable com.amazonaws.ec2#IpamPool$PubliclyAdvertisable */ =>  {
                let var_15 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_publicly_advertisable(var_15);
            }
            ,
            s if s.matches("addressFamily") /* AddressFamily com.amazonaws.ec2#IpamPool$AddressFamily */ =>  {
                let var_16 =
                    Some(
                        Result::<crate::types::AddressFamily, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::AddressFamily::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_address_family(var_16);
            }
            ,
            s if s.matches("allocationMinNetmaskLength") /* AllocationMinNetmaskLength com.amazonaws.ec2#IpamPool$AllocationMinNetmaskLength */ =>  {
                let var_17 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_min_netmask_length(var_17);
            }
            ,
            s if s.matches("allocationMaxNetmaskLength") /* AllocationMaxNetmaskLength com.amazonaws.ec2#IpamPool$AllocationMaxNetmaskLength */ =>  {
                let var_18 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_max_netmask_length(var_18);
            }
            ,
            s if s.matches("allocationDefaultNetmaskLength") /* AllocationDefaultNetmaskLength com.amazonaws.ec2#IpamPool$AllocationDefaultNetmaskLength */ =>  {
                let var_19 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#IpamNetmaskLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allocation_default_netmask_length(var_19);
            }
            ,
            s if s.matches("allocationResourceTagSet") /* AllocationResourceTags com.amazonaws.ec2#IpamPool$AllocationResourceTags */ =>  {
                let var_20 =
                    Some(
                        crate::protocol_serde::shape_ipam_resource_tag_list::de_ipam_resource_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_allocation_resource_tags(var_20);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#IpamPool$Tags */ =>  {
                let var_21 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_21);
            }
            ,
            s if s.matches("awsService") /* AwsService com.amazonaws.ec2#IpamPool$AwsService */ =>  {
                let var_22 =
                    Some(
                        Result::<crate::types::IpamPoolAwsService, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPoolAwsService::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_aws_service(var_22);
            }
            ,
            s if s.matches("publicIpSource") /* PublicIpSource com.amazonaws.ec2#IpamPool$PublicIpSource */ =>  {
                let var_23 =
                    Some(
                        Result::<crate::types::IpamPoolPublicIpSource, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPoolPublicIpSource::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_public_ip_source(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
