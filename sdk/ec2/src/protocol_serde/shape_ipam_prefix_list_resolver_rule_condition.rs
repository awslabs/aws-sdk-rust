// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_ipam_prefix_list_resolver_rule_condition(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::IpamPrefixListResolverRuleCondition, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IpamPrefixListResolverRuleCondition::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("operation") /* Operation com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$Operation */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::IpamPrefixListResolverRuleConditionOperation, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpamPrefixListResolverRuleConditionOperation::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_operation(var_1);
            }
            ,
            s if s.matches("ipamPoolId") /* IpamPoolId com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$IpamPoolId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ipam_pool_id(var_2);
            }
            ,
            s if s.matches("resourceId") /* ResourceId com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$ResourceId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_id(var_3);
            }
            ,
            s if s.matches("resourceOwner") /* ResourceOwner com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$ResourceOwner */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_owner(var_4);
            }
            ,
            s if s.matches("resourceRegion") /* ResourceRegion com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$ResourceRegion */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_region(var_5);
            }
            ,
            s if s.matches("resourceTag") /* ResourceTag com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$ResourceTag */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_ipam_resource_tag::de_ipam_resource_tag(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_tag(var_6);
            }
            ,
            s if s.matches("cidr") /* Cidr com.amazonaws.ec2#IpamPrefixListResolverRuleCondition$Cidr */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cidr(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
