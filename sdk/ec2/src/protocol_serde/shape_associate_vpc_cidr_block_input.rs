// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_associate_vpc_cidr_block_input_input(
    input: &crate::operation::associate_vpc_cidr_block::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_2) = &input.amazon_provided_ipv6_cidr_block {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("CidrBlock");
    if let Some(var_4) = &input.cidr_block {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("VpcId");
    if let Some(var_6) = &input.vpc_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_8) = &input.ipv6_cidr_block_network_border_group {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Ipv6Pool");
    if let Some(var_10) = &input.ipv6_pool {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_12) = &input.ipv6_cidr_block {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_14) = &input.ipv4_ipam_pool_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_16) = &input.ipv4_netmask_length {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_18) = &input.ipv6_ipam_pool_id {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_20) = &input.ipv6_netmask_length {
        scope_19.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
