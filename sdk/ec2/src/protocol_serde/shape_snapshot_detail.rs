// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_snapshot_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::SnapshotDetail, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::SnapshotDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("description") /* Description com.amazonaws.ec2#SnapshotDetail$Description */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_1);
            }
            ,
            s if s.matches("deviceName") /* DeviceName com.amazonaws.ec2#SnapshotDetail$DeviceName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_device_name(var_2);
            }
            ,
            s if s.matches("diskImageSize") /* DiskImageSize com.amazonaws.ec2#SnapshotDetail$DiskImageSize */ =>  {
                let var_3 =
                    Some(
                         {
                            <f64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (double: `com.amazonaws.ec2#Double`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_disk_image_size(var_3);
            }
            ,
            s if s.matches("format") /* Format com.amazonaws.ec2#SnapshotDetail$Format */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_4);
            }
            ,
            s if s.matches("progress") /* Progress com.amazonaws.ec2#SnapshotDetail$Progress */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_progress(var_5);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#SnapshotDetail$SnapshotId */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_6);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#SnapshotDetail$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            s if s.matches("statusMessage") /* StatusMessage com.amazonaws.ec2#SnapshotDetail$StatusMessage */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_8);
            }
            ,
            s if s.matches("url") /* Url com.amazonaws.ec2#SnapshotDetail$Url */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_url(var_9);
            }
            ,
            s if s.matches("userBucket") /* UserBucket com.amazonaws.ec2#SnapshotDetail$UserBucket */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_user_bucket_details::de_user_bucket_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_bucket(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
