// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_vpc_endpoint_input_input(
    input: &crate::operation::modify_vpc_endpoint::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("VpcEndpointId");
    if let Some(var_4) = &input.vpc_endpoint_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResetPolicy");
    if let Some(var_6) = &input.reset_policy {
        scope_5.boolean(*var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("PolicyDocument");
    if let Some(var_8) = &input.policy_document {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("AddRouteTableId");
    if let Some(var_10) = &input.add_route_table_ids {
        let mut list_12 = scope_9.start_list(true, Some("item"));
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            entry_13.string(item_11);
        }
        list_12.finish();
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("RemoveRouteTableId");
    if let Some(var_15) = &input.remove_route_table_ids {
        let mut list_17 = scope_14.start_list(true, Some("item"));
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("AddSubnetId");
    if let Some(var_20) = &input.add_subnet_ids {
        let mut list_22 = scope_19.start_list(true, Some("item"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("RemoveSubnetId");
    if let Some(var_25) = &input.remove_subnet_ids {
        let mut list_27 = scope_24.start_list(true, Some("item"));
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("AddSecurityGroupId");
    if let Some(var_30) = &input.add_security_group_ids {
        let mut list_32 = scope_29.start_list(true, Some("item"));
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            entry_33.string(item_31);
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_35) = &input.remove_security_group_ids {
        let mut list_37 = scope_34.start_list(true, Some("item"));
        for item_36 in var_35 {
            #[allow(unused_mut)]
            let mut entry_38 = list_37.entry();
            entry_38.string(item_36);
        }
        list_37.finish();
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("IpAddressType");
    if let Some(var_40) = &input.ip_address_type {
        scope_39.string(var_40.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DnsOptions");
    if let Some(var_42) = &input.dns_options {
        crate::protocol_serde::shape_dns_options_specification::ser_dns_options_specification(
            scope_41, var_42,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_44) = &input.private_dns_enabled {
        scope_43.boolean(*var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
