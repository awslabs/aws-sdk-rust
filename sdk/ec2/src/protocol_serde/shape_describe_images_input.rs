// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_images_input_input(
    input: &crate::operation::describe_images::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ExecutableBy");
    if let Some(var_2) = &input.executable_users {
        let mut list_4 = scope_1.start_list(true, Some("ExecutableBy"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("Filter");
    if let Some(var_7) = &input.filters {
        let mut list_9 = scope_6.start_list(true, Some("Filter"));
        for item_8 in var_7 {
            #[allow(unused_mut)]
            let mut entry_10 = list_9.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_10, item_8)?;
        }
        list_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("ImageId");
    if let Some(var_12) = &input.image_ids {
        let mut list_14 = scope_11.start_list(true, Some("ImageId"));
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            entry_15.string(item_13);
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("Owner");
    if let Some(var_17) = &input.owners {
        let mut list_19 = scope_16.start_list(true, Some("Owner"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("IncludeDeprecated");
    if let Some(var_22) = &input.include_deprecated {
        scope_21.boolean(*var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("DryRun");
    if let Some(var_24) = &input.dry_run {
        scope_23.boolean(*var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("MaxResults");
    if let Some(var_26) = &input.max_results {
        scope_25.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("NextToken");
    if let Some(var_28) = &input.next_token {
        scope_27.string(var_28);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
