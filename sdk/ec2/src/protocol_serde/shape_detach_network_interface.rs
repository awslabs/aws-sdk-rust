// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_detach_network_interface_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::detach_network_interface::DetachNetworkInterfaceOutput,
    crate::operation::detach_network_interface::DetachNetworkInterfaceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::detach_network_interface::DetachNetworkInterfaceError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::detach_network_interface::DetachNetworkInterfaceError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_detach_network_interface_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::detach_network_interface::DetachNetworkInterfaceOutput,
    crate::operation::detach_network_interface::DetachNetworkInterfaceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::detach_network_interface::builders::DetachNetworkInterfaceOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
