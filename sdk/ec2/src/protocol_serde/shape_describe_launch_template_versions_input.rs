// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_launch_template_versions_input_input(
    input: &crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("LaunchTemplateId");
    if let Some(var_4) = &input.launch_template_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("LaunchTemplateName");
    if let Some(var_6) = &input.launch_template_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_8) = &input.versions {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            entry_11.string(item_9);
        }
        list_10.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MinVersion");
    if let Some(var_13) = &input.min_version {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("MaxVersion");
    if let Some(var_15) = &input.max_version {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("NextToken");
    if let Some(var_17) = &input.next_token {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("MaxResults");
    if let Some(var_19) = &input.max_results {
        scope_18.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Filter");
    if let Some(var_21) = &input.filters {
        let mut list_23 = scope_20.start_list(true, Some("Filter"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            crate::protocol_serde::shape_filter::ser_filter(entry_24, item_22)?;
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("ResolveAlias");
    if let Some(var_26) = &input.resolve_alias {
        scope_25.boolean(*var_26);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
