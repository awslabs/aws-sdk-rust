// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_spot_instances_input_input(
    input: &crate::operation::request_spot_instances::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_2) = &input.availability_zone_group {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("BlockDurationMinutes");
    if let Some(var_4) = &input.block_duration_minutes {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ClientToken");
    if let Some(var_6) = &input.client_token {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DryRun");
    if let Some(var_8) = &input.dry_run {
        scope_7.boolean(*var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("InstanceCount");
    if let Some(var_10) = &input.instance_count {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("LaunchGroup");
    if let Some(var_12) = &input.launch_group {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("LaunchSpecification");
    if let Some(var_14) = &input.launch_specification {
        crate::protocol_serde::shape_request_spot_launch_specification::ser_request_spot_launch_specification(scope_13, var_14)?;
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("SpotPrice");
    if let Some(var_16) = &input.spot_price {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("Type");
    if let Some(var_18) = &input.r#type {
        scope_17.string(var_18.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("ValidFrom");
    if let Some(var_20) = &input.valid_from {
        scope_19.date_time(var_20, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ValidUntil");
    if let Some(var_22) = &input.valid_until {
        scope_21.date_time(var_22, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("TagSpecification");
    if let Some(var_24) = &input.tag_specifications {
        let mut list_26 = scope_23.start_list(true, Some("item"));
        for item_25 in var_24 {
            #[allow(unused_mut)]
            let mut entry_27 = list_26.entry();
            crate::protocol_serde::shape_tag_specification::ser_tag_specification(
                entry_27, item_25,
            )?;
        }
        list_26.finish();
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_29) = &input.instance_interruption_behavior {
        scope_28.string(var_29.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
