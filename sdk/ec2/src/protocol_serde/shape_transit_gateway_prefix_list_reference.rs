// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_transit_gateway_prefix_list_reference(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TransitGatewayPrefixListReference, aws_smithy_xml::decode::XmlDecodeError>
{
    #[allow(unused_mut)]
    let mut builder = crate::types::TransitGatewayPrefixListReference::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayRouteTableId") /* TransitGatewayRouteTableId com.amazonaws.ec2#TransitGatewayPrefixListReference$TransitGatewayRouteTableId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_route_table_id(var_1);
            }
            ,
            s if s.matches("prefixListId") /* PrefixListId com.amazonaws.ec2#TransitGatewayPrefixListReference$PrefixListId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_id(var_2);
            }
            ,
            s if s.matches("prefixListOwnerId") /* PrefixListOwnerId com.amazonaws.ec2#TransitGatewayPrefixListReference$PrefixListOwnerId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix_list_owner_id(var_3);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayPrefixListReference$State */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::TransitGatewayPrefixListReferenceState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TransitGatewayPrefixListReferenceState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_4);
            }
            ,
            s if s.matches("blackhole") /* Blackhole com.amazonaws.ec2#TransitGatewayPrefixListReference$Blackhole */ =>  {
                let var_5 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ec2#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_blackhole(var_5);
            }
            ,
            s if s.matches("transitGatewayAttachment") /* TransitGatewayAttachment com.amazonaws.ec2#TransitGatewayPrefixListReference$TransitGatewayAttachment */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_transit_gateway_prefix_list_attachment::de_transit_gateway_prefix_list_attachment(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
