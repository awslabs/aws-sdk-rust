// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_instance_metadata_options_response(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceMetadataOptionsResponse, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceMetadataOptionsResponse::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("state") /* State com.amazonaws.ec2#InstanceMetadataOptionsResponse$State */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::InstanceMetadataOptionsState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataOptionsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_1);
            }
            ,
            s if s.matches("httpTokens") /* HttpTokens com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpTokens */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::HttpTokensState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::HttpTokensState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_tokens(var_2);
            }
            ,
            s if s.matches("httpPutResponseHopLimit") /* HttpPutResponseHopLimit com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpPutResponseHopLimit */ =>  {
                let var_3 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_put_response_hop_limit(var_3);
            }
            ,
            s if s.matches("httpEndpoint") /* HttpEndpoint com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpEndpoint */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::InstanceMetadataEndpointState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataEndpointState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_endpoint(var_4);
            }
            ,
            s if s.matches("httpProtocolIpv6") /* HttpProtocolIpv6 com.amazonaws.ec2#InstanceMetadataOptionsResponse$HttpProtocolIpv6 */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::InstanceMetadataProtocolState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataProtocolState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_protocol_ipv6(var_5);
            }
            ,
            s if s.matches("instanceMetadataTags") /* InstanceMetadataTags com.amazonaws.ec2#InstanceMetadataOptionsResponse$InstanceMetadataTags */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::InstanceMetadataTagsState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataTagsState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_metadata_tags(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
