// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_instance_attribute_input_input(
    input: &crate::operation::modify_instance_attribute::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceDestCheck");
    if let Some(var_2) = &input.source_dest_check {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(
            scope_1, var_2,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Attribute");
    if let Some(var_4) = &input.attribute {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6) = &input.block_device_mappings {
        let mut list_8 = scope_5.start_list(true, Some("item"));
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_instance_block_device_mapping_specification::ser_instance_block_device_mapping_specification(entry_9, item_7)?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("DisableApiTermination");
    if let Some(var_11) = &input.disable_api_termination {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(
            scope_10, var_11,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("DryRun");
    if let Some(var_13) = &input.dry_run {
        scope_12.boolean(*var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("EbsOptimized");
    if let Some(var_15) = &input.ebs_optimized {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(
            scope_14, var_15,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("EnaSupport");
    if let Some(var_17) = &input.ena_support {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(
            scope_16, var_17,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("GroupId");
    if let Some(var_19) = &input.groups {
        let mut list_21 = scope_18.start_list(true, Some("groupId"));
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20);
        }
        list_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("InstanceId");
    if let Some(var_24) = &input.instance_id {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_26) = &input.instance_initiated_shutdown_behavior {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_25, var_26)?;
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("InstanceType");
    if let Some(var_28) = &input.instance_type {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_27, var_28)?;
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("Kernel");
    if let Some(var_30) = &input.kernel {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_29, var_30)?;
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("Ramdisk");
    if let Some(var_32) = &input.ramdisk {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_31, var_32)?;
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("SriovNetSupport");
    if let Some(var_34) = &input.sriov_net_support {
        crate::protocol_serde::shape_attribute_value::ser_attribute_value(scope_33, var_34)?;
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("UserData");
    if let Some(var_36) = &input.user_data {
        crate::protocol_serde::shape_blob_attribute_value::ser_blob_attribute_value(
            scope_35, var_36,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Value");
    if let Some(var_38) = &input.value {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("DisableApiStop");
    if let Some(var_40) = &input.disable_api_stop {
        crate::protocol_serde::shape_attribute_boolean_value::ser_attribute_boolean_value(
            scope_39, var_40,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
