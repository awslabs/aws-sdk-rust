// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_vpc_endpoint_connection(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::VpcEndpointConnection, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VpcEndpointConnection::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("serviceId") /* ServiceId com.amazonaws.ec2#VpcEndpointConnection$ServiceId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_id(var_1);
            }
            ,
            s if s.matches("vpcEndpointId") /* VpcEndpointId com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_id(var_2);
            }
            ,
            s if s.matches("vpcEndpointOwner") /* VpcEndpointOwner com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointOwner */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_owner(var_3);
            }
            ,
            s if s.matches("vpcEndpointState") /* VpcEndpointState com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointState */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::State, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::State::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_state(var_4);
            }
            ,
            s if s.matches("creationTimestamp") /* CreationTimestamp com.amazonaws.ec2#VpcEndpointConnection$CreationTimestamp */ =>  {
                let var_5 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_timestamp(var_5);
            }
            ,
            s if s.matches("dnsEntrySet") /* DnsEntries com.amazonaws.ec2#VpcEndpointConnection$DnsEntries */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_dns_entry_set::de_dns_entry_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dns_entries(var_6);
            }
            ,
            s if s.matches("networkLoadBalancerArnSet") /* NetworkLoadBalancerArns com.amazonaws.ec2#VpcEndpointConnection$NetworkLoadBalancerArns */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_network_load_balancer_arns(var_7);
            }
            ,
            s if s.matches("gatewayLoadBalancerArnSet") /* GatewayLoadBalancerArns com.amazonaws.ec2#VpcEndpointConnection$GatewayLoadBalancerArns */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_value_string_list::de_value_string_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_gateway_load_balancer_arns(var_8);
            }
            ,
            s if s.matches("ipAddressType") /* IpAddressType com.amazonaws.ec2#VpcEndpointConnection$IpAddressType */ =>  {
                let var_9 =
                    Some(
                        Result::<crate::types::IpAddressType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IpAddressType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address_type(var_9);
            }
            ,
            s if s.matches("vpcEndpointConnectionId") /* VpcEndpointConnectionId com.amazonaws.ec2#VpcEndpointConnection$VpcEndpointConnectionId */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_endpoint_connection_id(var_10);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#VpcEndpointConnection$Tags */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
