// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_export_to_s3_task(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExportToS3Task, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExportToS3Task::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("containerFormat") /* ContainerFormat com.amazonaws.ec2#ExportToS3Task$ContainerFormat */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::model::ContainerFormat, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::model::ContainerFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_container_format(var_1);
            }
            ,
            s if s.matches("diskImageFormat") /* DiskImageFormat com.amazonaws.ec2#ExportToS3Task$DiskImageFormat */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::model::DiskImageFormat, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::model::DiskImageFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_disk_image_format(var_2);
            }
            ,
            s if s.matches("s3Bucket") /* S3Bucket com.amazonaws.ec2#ExportToS3Task$S3Bucket */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket(var_3);
            }
            ,
            s if s.matches("s3Key") /* S3Key com.amazonaws.ec2#ExportToS3Task$S3Key */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_key(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
