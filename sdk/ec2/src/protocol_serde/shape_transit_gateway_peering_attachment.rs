// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_transit_gateway_peering_attachment(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TransitGatewayPeeringAttachment, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TransitGatewayPeeringAttachment::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("transitGatewayAttachmentId") /* TransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayPeeringAttachment$TransitGatewayAttachmentId */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_transit_gateway_attachment_id(var_1);
            }
            ,
            s if s.matches("accepterTransitGatewayAttachmentId") /* AccepterTransitGatewayAttachmentId com.amazonaws.ec2#TransitGatewayPeeringAttachment$AccepterTransitGatewayAttachmentId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_accepter_transit_gateway_attachment_id(var_2);
            }
            ,
            s if s.matches("requesterTgwInfo") /* RequesterTgwInfo com.amazonaws.ec2#TransitGatewayPeeringAttachment$RequesterTgwInfo */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_peering_tgw_info::de_peering_tgw_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_requester_tgw_info(var_3);
            }
            ,
            s if s.matches("accepterTgwInfo") /* AccepterTgwInfo com.amazonaws.ec2#TransitGatewayPeeringAttachment$AccepterTgwInfo */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_peering_tgw_info::de_peering_tgw_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_accepter_tgw_info(var_4);
            }
            ,
            s if s.matches("options") /* Options com.amazonaws.ec2#TransitGatewayPeeringAttachment$Options */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_transit_gateway_peering_attachment_options::de_transit_gateway_peering_attachment_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_options(var_5);
            }
            ,
            s if s.matches("status") /* Status com.amazonaws.ec2#TransitGatewayPeeringAttachment$Status */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_peering_attachment_status::de_peering_attachment_status(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_status(var_6);
            }
            ,
            s if s.matches("state") /* State com.amazonaws.ec2#TransitGatewayPeeringAttachment$State */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::TransitGatewayAttachmentState, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TransitGatewayAttachmentState::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_state(var_7);
            }
            ,
            s if s.matches("creationTime") /* CreationTime com.amazonaws.ec2#TransitGatewayPeeringAttachment$CreationTime */ =>  {
                let var_8 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#DateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_time(var_8);
            }
            ,
            s if s.matches("tagSet") /* Tags com.amazonaws.ec2#TransitGatewayPeeringAttachment$Tags */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
