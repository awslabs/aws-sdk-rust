// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("DryRun");
    if let Some(var_86) = &input.dry_run {
        scope_85.boolean(*var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("IpamPoolId");
    if let Some(var_88) = &input.ipam_pool_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Cidr");
    if let Some(var_90) = &input.cidr {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("NetmaskLength");
    if let Some(var_92) = &input.netmask_length {
        scope_91.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("ClientToken");
    if let Some(var_94) = &input.client_token {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Description");
    if let Some(var_96) = &input.description {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreviewNextCidr");
    if let Some(var_98) = &input.preview_next_cidr {
        scope_97.boolean(*var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("DisallowedCidr");
    if let Some(var_100) = &input.disallowed_cidrs {
        let mut list_102 = scope_99.start_list(true, Some("item"));
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            entry_103.string(item_101);
        }
        list_102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_105) = &input.client_vpn_endpoint_id {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("VpcId");
    if let Some(var_107) = &input.vpc_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SecurityGroupId");
    if let Some(var_109) = &input.security_group_ids {
        let mut list_111 = scope_108.start_list(true, Some("item"));
        for item_110 in var_109 {
            #[allow(unused_mut)]
            let mut entry_112 = list_111.entry();
            entry_112.string(item_110);
        }
        list_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("DryRun");
    if let Some(var_114) = &input.dry_run {
        scope_113.boolean(*var_114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Ipv6AddressCount");
    if let Some(var_116) = &input.ipv6_address_count {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6Addresses");
    if let Some(var_118) = &input.ipv6_addresses {
        let mut list_120 = scope_117.start_list(true, Some("item"));
        for item_119 in var_118 {
            #[allow(unused_mut)]
            let mut entry_121 = list_120.entry();
            entry_121.string(item_119);
        }
        list_120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_123) = &input.ipv6_prefix_count {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6Prefix");
    if let Some(var_125) = &input.ipv6_prefixes {
        let mut list_127 = scope_124.start_list(true, Some("item"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            entry_128.string(item_126);
        }
        list_127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_130) = &input.network_interface_id {
        scope_129.string(var_130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("AllowReassignment");
    if let Some(var_132) = &input.allow_reassignment {
        scope_131.boolean(*var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("NetworkInterfaceId");
    if let Some(var_134) = &input.network_interface_id {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PrivateIpAddress");
    if let Some(var_136) = &input.private_ip_addresses {
        let mut list_138 = scope_135.start_list(true, Some("PrivateIpAddress"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_141) = &input.secondary_private_ip_address_count {
        scope_140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Ipv4Prefix");
    if let Some(var_143) = &input.ipv4_prefixes {
        let mut list_145 = scope_142.start_list(true, Some("item"));
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            entry_146.string(item_144);
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_148) = &input.ipv4_prefix_count {
        scope_147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AllocationId");
    if let Some(var_150) = &input.allocation_id {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("InstanceId");
    if let Some(var_152) = &input.instance_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("PublicIp");
    if let Some(var_154) = &input.public_ip {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AllowReassociation");
    if let Some(var_156) = &input.allow_reassociation {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DryRun");
    if let Some(var_158) = &input.dry_run {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NetworkInterfaceId");
    if let Some(var_160) = &input.network_interface_id {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("PrivateIpAddress");
    if let Some(var_162) = &input.private_ip_address {
        scope_161.string(var_162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_164) = &input.client_vpn_endpoint_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("SubnetId");
    if let Some(var_166) = &input.subnet_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("ClientToken");
    if let Some(var_168) = &input.client_token {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("DryRun");
    if let Some(var_170) = &input.dry_run {
        scope_169.boolean(*var_170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DhcpOptionsId");
    if let Some(var_172) = &input.dhcp_options_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("VpcId");
    if let Some(var_174) = &input.vpc_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DryRun");
    if let Some(var_176) = &input.dry_run {
        scope_175.boolean(*var_176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("CertificateArn");
    if let Some(var_178) = &input.certificate_arn {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("RoleArn");
    if let Some(var_180) = &input.role_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("DryRun");
    if let Some(var_182) = &input.dry_run {
        scope_181.boolean(*var_182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("IamInstanceProfile");
    if let Some(var_184) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_183, var_184,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("InstanceId");
    if let Some(var_186) = &input.instance_id {
        scope_185.string(var_186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("DryRun");
    if let Some(var_188) = &input.dry_run {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("InstanceEventWindowId");
    if let Some(var_190) = &input.instance_event_window_id {
        scope_189.string(var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("AssociationTarget");
    if let Some(var_192) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_191, var_192)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("DryRun");
    if let Some(var_194) = &input.dry_run {
        scope_193.boolean(*var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("RouteTableId");
    if let Some(var_196) = &input.route_table_id {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SubnetId");
    if let Some(var_198) = &input.subnet_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("GatewayId");
    if let Some(var_200) = &input.gateway_id {
        scope_199.string(var_200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_202) = &input.ipv6_cidr_block {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("SubnetId");
    if let Some(var_204) = &input.subnet_id {
        scope_203.string(var_204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_206) = &input.transit_gateway_multicast_domain_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_208) = &input.transit_gateway_attachment_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SubnetIds");
    if let Some(var_210) = &input.subnet_ids {
        let mut list_212 = scope_209.start_list(true, Some("item"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DryRun");
    if let Some(var_215) = &input.dry_run {
        scope_214.boolean(*var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_217) = &input.transit_gateway_route_table_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("DryRun");
    if let Some(var_221) = &input.dry_run {
        scope_220.boolean(*var_221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("BranchInterfaceId");
    if let Some(var_223) = &input.branch_interface_id {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TrunkInterfaceId");
    if let Some(var_225) = &input.trunk_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("VlanId");
    if let Some(var_227) = &input.vlan_id {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("GreKey");
    if let Some(var_229) = &input.gre_key {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("ClientToken");
    if let Some(var_231) = &input.client_token {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("DryRun");
    if let Some(var_233) = &input.dry_run {
        scope_232.boolean(*var_233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_235) = &input.amazon_provided_ipv6_cidr_block {
        scope_234.boolean(*var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("CidrBlock");
    if let Some(var_237) = &input.cidr_block {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("VpcId");
    if let Some(var_239) = &input.vpc_id {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_241) = &input.ipv6_cidr_block_network_border_group {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6Pool");
    if let Some(var_243) = &input.ipv6_pool {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_245) = &input.ipv6_cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_247) = &input.ipv4_ipam_pool_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_249) = &input.ipv4_netmask_length {
        scope_248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_251) = &input.ipv6_ipam_pool_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_253) = &input.ipv6_netmask_length {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("DryRun");
    if let Some(var_255) = &input.dry_run {
        scope_254.boolean(*var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("SecurityGroupId");
    if let Some(var_257) = &input.groups {
        let mut list_259 = scope_256.start_list(true, Some("groupId"));
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            entry_260.string(item_258);
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceId");
    if let Some(var_262) = &input.instance_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("VpcId");
    if let Some(var_264) = &input.vpc_id {
        scope_263.string(var_264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("DryRun");
    if let Some(var_266) = &input.dry_run {
        scope_265.boolean(*var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("InternetGatewayId");
    if let Some(var_268) = &input.internet_gateway_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("VpcId");
    if let Some(var_270) = &input.vpc_id {
        scope_269.string(var_270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DeviceIndex");
    if let Some(var_272) = &input.device_index {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InstanceId");
    if let Some(var_276) = &input.instance_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("NetworkInterfaceId");
    if let Some(var_278) = &input.network_interface_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkCardIndex");
    if let Some(var_280) = &input.network_card_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Device");
    if let Some(var_282) = &input.device {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("VolumeId");
    if let Some(var_286) = &input.volume_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DryRun");
    if let Some(var_288) = &input.dry_run {
        scope_287.boolean(*var_288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("VpcId");
    if let Some(var_290) = &input.vpc_id {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpnGatewayId");
    if let Some(var_292) = &input.vpn_gateway_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DryRun");
    if let Some(var_294) = &input.dry_run {
        scope_293.boolean(*var_294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_296) = &input.client_vpn_endpoint_id {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("TargetNetworkCidr");
    if let Some(var_298) = &input.target_network_cidr {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("AccessGroupId");
    if let Some(var_300) = &input.access_group_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_302) = &input.authorize_all_groups {
        scope_301.boolean(*var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Description");
    if let Some(var_304) = &input.description {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("ClientToken");
    if let Some(var_306) = &input.client_token {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("DryRun");
    if let Some(var_308) = &input.dry_run {
        scope_307.boolean(*var_308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("GroupId");
    if let Some(var_312) = &input.group_id {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("IpPermissions");
    if let Some(var_314) = &input.ip_permissions {
        let mut list_316 = scope_313.start_list(true, Some("item"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_317, item_315)?;
        }
        list_316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("TagSpecification");
    if let Some(var_319) = &input.tag_specifications {
        let mut list_321 = scope_318.start_list(true, Some("item"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_322, item_320,
            )?;
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("CidrIp");
    if let Some(var_324) = &input.cidr_ip {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("FromPort");
    if let Some(var_326) = &input.from_port {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("IpProtocol");
    if let Some(var_328) = &input.ip_protocol {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ToPort");
    if let Some(var_330) = &input.to_port {
        scope_329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_332) = &input.source_security_group_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_334) = &input.source_security_group_owner_id {
        scope_333.string(var_334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CidrIp");
    if let Some(var_336) = &input.cidr_ip {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FromPort");
    if let Some(var_338) = &input.from_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("GroupId");
    if let Some(var_340) = &input.group_id {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupName");
    if let Some(var_342) = &input.group_name {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("IpPermissions");
    if let Some(var_344) = &input.ip_permissions {
        let mut list_346 = scope_343.start_list(true, Some("item"));
        for item_345 in var_344 {
            #[allow(unused_mut)]
            let mut entry_347 = list_346.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_347, item_345)?;
        }
        list_346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("IpProtocol");
    if let Some(var_349) = &input.ip_protocol {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_351) = &input.source_security_group_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_353) = &input.source_security_group_owner_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ToPort");
    if let Some(var_355) = &input.to_port {
        scope_354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DryRun");
    if let Some(var_357) = &input.dry_run {
        scope_356.boolean(*var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("TagSpecification");
    if let Some(var_359) = &input.tag_specifications {
        let mut list_361 = scope_358.start_list(true, Some("item"));
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_362, item_360,
            )?;
        }
        list_361.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("InstanceId");
    if let Some(var_364) = &input.instance_id {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("Storage");
    if let Some(var_366) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_365, var_366)?;
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("BundleId");
    if let Some(var_370) = &input.bundle_id {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("DryRun");
    if let Some(var_372) = &input.dry_run {
        scope_371.boolean(*var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("CapacityReservationId");
    if let Some(var_374) = &input.capacity_reservation_id {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_380) = &input.capacity_reservation_fleet_ids {
        let mut list_382 = scope_379.start_list(true, Some("item"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            entry_383.string(item_381);
        }
        list_382.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ConversionTaskId");
    if let Some(var_385) = &input.conversion_task_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("ReasonMessage");
    if let Some(var_389) = &input.reason_message {
        scope_388.string(var_389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ExportTaskId");
    if let Some(var_391) = &input.export_task_id {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("CancelReason");
    if let Some(var_393) = &input.cancel_reason {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ImportTaskId");
    if let Some(var_397) = &input.import_task_id {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_399) = &input.reserved_instances_listing_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DryRun");
    if let Some(var_401) = &input.dry_run {
        scope_400.boolean(*var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SpotFleetRequestId");
    if let Some(var_403) = &input.spot_fleet_request_ids {
        let mut list_405 = scope_402.start_list(true, Some("item"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("TerminateInstances");
    if let Some(var_408) = &input.terminate_instances {
        scope_407.boolean(*var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("DryRun");
    if let Some(var_410) = &input.dry_run {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_412) = &input.spot_instance_request_ids {
        let mut list_414 = scope_411.start_list(true, Some("SpotInstanceRequestId"));
        for item_413 in var_412 {
            #[allow(unused_mut)]
            let mut entry_415 = list_414.entry();
            entry_415.string(item_413);
        }
        list_414.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("InstanceId");
    if let Some(var_417) = &input.instance_id {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("ProductCode");
    if let Some(var_419) = &input.product_code {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DryRun");
    if let Some(var_421) = &input.dry_run {
        scope_420.boolean(*var_421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("SourceFpgaImageId");
    if let Some(var_425) = &input.source_fpga_image_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("Description");
    if let Some(var_427) = &input.description {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Name");
    if let Some(var_429) = &input.name {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("ClientToken");
    if let Some(var_433) = &input.client_token {
        scope_432.string(var_433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Description");
    if let Some(var_437) = &input.description {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Encrypted");
    if let Some(var_439) = &input.encrypted {
        scope_438.boolean(*var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("KmsKeyId");
    if let Some(var_441) = &input.kms_key_id {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("Name");
    if let Some(var_443) = &input.name {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("SourceImageId");
    if let Some(var_445) = &input.source_image_id {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceRegion");
    if let Some(var_447) = &input.source_region {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("DestinationOutpostArn");
    if let Some(var_449) = &input.destination_outpost_arn {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DryRun");
    if let Some(var_451) = &input.dry_run {
        scope_450.boolean(*var_451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Description");
    if let Some(var_453) = &input.description {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DestinationOutpostArn");
    if let Some(var_455) = &input.destination_outpost_arn {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationRegion");
    if let Some(var_457) = &input.destination_region {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Encrypted");
    if let Some(var_459) = &input.encrypted {
        scope_458.boolean(*var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("KmsKeyId");
    if let Some(var_461) = &input.kms_key_id {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("PresignedUrl");
    if let Some(var_463) = &input.presigned_url {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("SourceRegion");
    if let Some(var_465) = &input.source_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceSnapshotId");
    if let Some(var_467) = &input.source_snapshot_id {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("TagSpecification");
    if let Some(var_469) = &input.tag_specifications {
        let mut list_471 = scope_468.start_list(true, Some("item"));
        for item_470 in var_469 {
            #[allow(unused_mut)]
            let mut entry_472 = list_471.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_472, item_470,
            )?;
        }
        list_471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("DryRun");
    if let Some(var_474) = &input.dry_run {
        scope_473.boolean(*var_474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ClientToken");
    if let Some(var_476) = &input.client_token {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("InstanceType");
    if let Some(var_478) = &input.instance_type {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstancePlatform");
    if let Some(var_480) = &input.instance_platform {
        scope_479.string(var_480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AvailabilityZone");
    if let Some(var_482) = &input.availability_zone {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZoneId");
    if let Some(var_484) = &input.availability_zone_id {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Tenancy");
    if let Some(var_486) = &input.tenancy {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstanceCount");
    if let Some(var_488) = &input.instance_count {
        scope_487.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("EbsOptimized");
    if let Some(var_490) = &input.ebs_optimized {
        scope_489.boolean(*var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EphemeralStorage");
    if let Some(var_492) = &input.ephemeral_storage {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EndDate");
    if let Some(var_494) = &input.end_date {
        scope_493.date_time(var_494, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDateType");
    if let Some(var_496) = &input.end_date_type {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_498) = &input.instance_match_criteria {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("TagSpecifications");
    if let Some(var_500) = &input.tag_specifications {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_503, item_501,
            )?;
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("DryRun");
    if let Some(var_505) = &input.dry_run {
        scope_504.boolean(*var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("OutpostArn");
    if let Some(var_507) = &input.outpost_arn {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("PlacementGroupArn");
    if let Some(var_509) = &input.placement_group_arn {
        scope_508.string(var_509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("AllocationStrategy");
    if let Some(var_511) = &input.allocation_strategy {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("ClientToken");
    if let Some(var_513) = &input.client_token {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_515) = &input.instance_type_specifications {
        let mut list_517 = scope_514.start_list(true, None);
        for item_516 in var_515 {
            #[allow(unused_mut)]
            let mut entry_518 = list_517.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_518, item_516)?;
        }
        list_517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("Tenancy");
    if let Some(var_520) = &input.tenancy {
        scope_519.string(var_520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("TotalTargetCapacity");
    if let Some(var_522) = &input.total_target_capacity {
        scope_521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("EndDate");
    if let Some(var_524) = &input.end_date {
        scope_523.date_time(var_524, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_526) = &input.instance_match_criteria {
        scope_525.string(var_526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("TagSpecification");
    if let Some(var_528) = &input.tag_specifications {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_531, item_529,
            )?;
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("DryRun");
    if let Some(var_533) = &input.dry_run {
        scope_532.boolean(*var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpcId");
    if let Some(var_535) = &input.vpc_id {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("TagSpecification");
    if let Some(var_537) = &input.tag_specifications {
        let mut list_539 = scope_536.start_list(true, Some("item"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_540, item_538,
            )?;
        }
        list_539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("DryRun");
    if let Some(var_542) = &input.dry_run {
        scope_541.boolean(*var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("ClientToken");
    if let Some(var_544) = &input.client_token {
        scope_543.string(var_544);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientCidrBlock");
    if let Some(var_546) = &input.client_cidr_block {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ServerCertificateArn");
    if let Some(var_548) = &input.server_certificate_arn {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Authentication");
    if let Some(var_550) = &input.authentication_options {
        let mut list_552 = scope_549.start_list(true, None);
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_553, item_551,
            )?;
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("ConnectionLogOptions");
    if let Some(var_555) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_554, var_555,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DnsServers");
    if let Some(var_557) = &input.dns_servers {
        let mut list_559 = scope_556.start_list(true, Some("item"));
        for item_558 in var_557 {
            #[allow(unused_mut)]
            let mut entry_560 = list_559.entry();
            entry_560.string(item_558);
        }
        list_559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("TransportProtocol");
    if let Some(var_562) = &input.transport_protocol {
        scope_561.string(var_562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("VpnPort");
    if let Some(var_564) = &input.vpn_port {
        scope_563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("Description");
    if let Some(var_566) = &input.description {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("SplitTunnel");
    if let Some(var_568) = &input.split_tunnel {
        scope_567.boolean(*var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("DryRun");
    if let Some(var_570) = &input.dry_run {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("ClientToken");
    if let Some(var_572) = &input.client_token {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("TagSpecification");
    if let Some(var_574) = &input.tag_specifications {
        let mut list_576 = scope_573.start_list(true, Some("item"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_577, item_575,
            )?;
        }
        list_576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("SecurityGroupId");
    if let Some(var_579) = &input.security_group_ids {
        let mut list_581 = scope_578.start_list(true, Some("item"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            entry_582.string(item_580);
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("VpcId");
    if let Some(var_584) = &input.vpc_id {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("SelfServicePortal");
    if let Some(var_586) = &input.self_service_portal {
        scope_585.string(var_586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("ClientConnectOptions");
    if let Some(var_588) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_587, var_588,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("SessionTimeoutHours");
    if let Some(var_590) = &input.session_timeout_hours {
        scope_589.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_590).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_592) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_591, var_592,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_594) = &input.client_vpn_endpoint_id {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DestinationCidrBlock");
    if let Some(var_596) = &input.destination_cidr_block {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_598) = &input.target_vpc_subnet_id {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Description");
    if let Some(var_600) = &input.description {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("ClientToken");
    if let Some(var_602) = &input.client_token {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DryRun");
    if let Some(var_604) = &input.dry_run {
        scope_603.boolean(*var_604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("BgpAsn");
    if let Some(var_606) = &input.bgp_asn {
        scope_605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_606).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("IpAddress");
    if let Some(var_608) = &input.public_ip {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("CertificateArn");
    if let Some(var_610) = &input.certificate_arn {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Type");
    if let Some(var_612) = &input.r#type {
        scope_611.string(var_612.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            )?;
        }
        list_616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DeviceName");
    if let Some(var_619) = &input.device_name {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DryRun");
    if let Some(var_621) = &input.dry_run {
        scope_620.boolean(*var_621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("AvailabilityZone");
    if let Some(var_623) = &input.availability_zone {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("Ipv6Native");
    if let Some(var_627) = &input.ipv6_native {
        scope_626.boolean(*var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DryRun");
    if let Some(var_629) = &input.dry_run {
        scope_628.boolean(*var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DhcpConfiguration");
    if let Some(var_631) = &input.dhcp_configurations {
        let mut list_633 = scope_630.start_list(true, Some("item"));
        for item_632 in var_631 {
            #[allow(unused_mut)]
            let mut entry_634 = list_633.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_634, item_632,
            )?;
        }
        list_633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TagSpecification");
    if let Some(var_636) = &input.tag_specifications {
        let mut list_638 = scope_635.start_list(true, Some("item"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_639, item_637,
            )?;
        }
        list_638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DryRun");
    if let Some(var_641) = &input.dry_run {
        scope_640.boolean(*var_641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("ClientToken");
    if let Some(var_643) = &input.client_token {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DryRun");
    if let Some(var_645) = &input.dry_run {
        scope_644.boolean(*var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("VpcId");
    if let Some(var_647) = &input.vpc_id {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("TagSpecification");
    if let Some(var_649) = &input.tag_specifications {
        let mut list_651 = scope_648.start_list(true, Some("item"));
        for item_650 in var_649 {
            #[allow(unused_mut)]
            let mut entry_652 = list_651.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_652, item_650,
            )?;
        }
        list_651.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("DryRun");
    if let Some(var_654) = &input.dry_run {
        scope_653.boolean(*var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("ClientToken");
    if let Some(var_656) = &input.client_token {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("SpotOptions");
    if let Some(var_658) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_657, var_658)?;
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("OnDemandOptions");
    if let Some(var_660) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_659, var_660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_662) = &input.excess_capacity_termination_policy {
        scope_661.string(var_662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_664) = &input.launch_template_configs {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_667, item_665,
            )?;
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_669) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_668, var_669,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_671) = &input.terminate_instances_with_expiration {
        scope_670.boolean(*var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("Type");
    if let Some(var_673) = &input.r#type {
        scope_672.string(var_673.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("ValidFrom");
    if let Some(var_675) = &input.valid_from {
        scope_674.date_time(var_675, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("ValidUntil");
    if let Some(var_677) = &input.valid_until {
        scope_676.date_time(var_677, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_679) = &input.replace_unhealthy_instances {
        scope_678.boolean(*var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("TagSpecification");
    if let Some(var_681) = &input.tag_specifications {
        let mut list_683 = scope_680.start_list(true, Some("item"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_684, item_682,
            )?;
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("Context");
    if let Some(var_686) = &input.context {
        scope_685.string(var_686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("DryRun");
    if let Some(var_688) = &input.dry_run {
        scope_687.boolean(*var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("ClientToken");
    if let Some(var_690) = &input.client_token {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_692) = &input.deliver_logs_permission_arn {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("LogGroupName");
    if let Some(var_694) = &input.log_group_name {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("ResourceId");
    if let Some(var_696) = &input.resource_ids {
        let mut list_698 = scope_695.start_list(true, Some("item"));
        for item_697 in var_696 {
            #[allow(unused_mut)]
            let mut entry_699 = list_698.entry();
            entry_699.string(item_697);
        }
        list_698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("ResourceType");
    if let Some(var_701) = &input.resource_type {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("TrafficType");
    if let Some(var_703) = &input.traffic_type {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("LogDestinationType");
    if let Some(var_705) = &input.log_destination_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LogDestination");
    if let Some(var_707) = &input.log_destination {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogFormat");
    if let Some(var_709) = &input.log_format {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TagSpecification");
    if let Some(var_711) = &input.tag_specifications {
        let mut list_713 = scope_710.start_list(true, Some("item"));
        for item_712 in var_711 {
            #[allow(unused_mut)]
            let mut entry_714 = list_713.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_714, item_712,
            )?;
        }
        list_713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("MaxAggregationInterval");
    if let Some(var_716) = &input.max_aggregation_interval {
        scope_715.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_716).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("DestinationOptions");
    if let Some(var_718) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_717, var_718,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DryRun");
    if let Some(var_720) = &input.dry_run {
        scope_719.boolean(*var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("InputStorageLocation");
    if let Some(var_722) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_721, var_722)?;
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("LogsStorageLocation");
    if let Some(var_724) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_723, var_724)?;
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("Description");
    if let Some(var_726) = &input.description {
        scope_725.string(var_726);
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Name");
    if let Some(var_728) = &input.name {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("ClientToken");
    if let Some(var_730) = &input.client_token {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("TagSpecification");
    if let Some(var_732) = &input.tag_specifications {
        let mut list_734 = scope_731.start_list(true, Some("item"));
        for item_733 in var_732 {
            #[allow(unused_mut)]
            let mut entry_735 = list_734.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_735, item_733,
            )?;
        }
        list_734.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("BlockDeviceMapping");
    if let Some(var_737) = &input.block_device_mappings {
        let mut list_739 = scope_736.start_list(true, Some("BlockDeviceMapping"));
        for item_738 in var_737 {
            #[allow(unused_mut)]
            let mut entry_740 = list_739.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_740, item_738,
            )?;
        }
        list_739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Description");
    if let Some(var_742) = &input.description {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("DryRun");
    if let Some(var_744) = &input.dry_run {
        scope_743.boolean(*var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("InstanceId");
    if let Some(var_746) = &input.instance_id {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("Name");
    if let Some(var_748) = &input.name {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("NoReboot");
    if let Some(var_750) = &input.no_reboot {
        scope_749.boolean(*var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("TagSpecification");
    if let Some(var_752) = &input.tag_specifications {
        let mut list_754 = scope_751.start_list(true, Some("item"));
        for item_753 in var_752 {
            #[allow(unused_mut)]
            let mut entry_755 = list_754.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_755, item_753,
            )?;
        }
        list_754.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DryRun");
    if let Some(var_757) = &input.dry_run {
        scope_756.boolean(*var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Name");
    if let Some(var_759) = &input.name {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("TimeRange");
    if let Some(var_761) = &input.time_ranges {
        let mut list_763 = scope_760.start_list(true, None);
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_764, item_762)?;
        }
        list_763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("CronExpression");
    if let Some(var_766) = &input.cron_expression {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("TagSpecification");
    if let Some(var_768) = &input.tag_specifications {
        let mut list_770 = scope_767.start_list(true, Some("item"));
        for item_769 in var_768 {
            #[allow(unused_mut)]
            let mut entry_771 = list_770.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_771, item_769,
            )?;
        }
        list_770.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Description");
    if let Some(var_773) = &input.description {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("ExportToS3");
    if let Some(var_775) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_774, var_775,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("InstanceId");
    if let Some(var_777) = &input.instance_id {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TargetEnvironment");
    if let Some(var_779) = &input.target_environment {
        scope_778.string(var_779.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("TagSpecification");
    if let Some(var_781) = &input.tag_specifications {
        let mut list_783 = scope_780.start_list(true, Some("item"));
        for item_782 in var_781 {
            #[allow(unused_mut)]
            let mut entry_784 = list_783.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_784, item_782,
            )?;
        }
        list_783.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("TagSpecification");
    if let Some(var_786) = &input.tag_specifications {
        let mut list_788 = scope_785.start_list(true, Some("item"));
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_789, item_787,
            )?;
        }
        list_788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("DryRun");
    if let Some(var_791) = &input.dry_run {
        scope_790.boolean(*var_791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DryRun");
    if let Some(var_793) = &input.dry_run {
        scope_792.boolean(*var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Description");
    if let Some(var_795) = &input.description {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("OperatingRegion");
    if let Some(var_797) = &input.operating_regions {
        let mut list_799 = scope_796.start_list(true, None);
        for item_798 in var_797 {
            #[allow(unused_mut)]
            let mut entry_800 = list_799.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_800, item_798,
            )?;
        }
        list_799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("TagSpecification");
    if let Some(var_802) = &input.tag_specifications {
        let mut list_804 = scope_801.start_list(true, Some("item"));
        for item_803 in var_802 {
            #[allow(unused_mut)]
            let mut entry_805 = list_804.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_805, item_803,
            )?;
        }
        list_804.finish();
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ClientToken");
    if let Some(var_807) = &input.client_token {
        scope_806.string(var_807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DryRun");
    if let Some(var_809) = &input.dry_run {
        scope_808.boolean(*var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("IpamScopeId");
    if let Some(var_811) = &input.ipam_scope_id {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("Locale");
    if let Some(var_813) = &input.locale {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("SourceIpamPoolId");
    if let Some(var_815) = &input.source_ipam_pool_id {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Description");
    if let Some(var_817) = &input.description {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("AddressFamily");
    if let Some(var_819) = &input.address_family {
        scope_818.string(var_819.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AutoImport");
    if let Some(var_821) = &input.auto_import {
        scope_820.boolean(*var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_823) = &input.publicly_advertisable {
        scope_822.boolean(*var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_825) = &input.allocation_min_netmask_length {
        scope_824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_827) = &input.allocation_max_netmask_length {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_829) = &input.allocation_default_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationResourceTag");
    if let Some(var_831) = &input.allocation_resource_tags {
        let mut list_833 = scope_830.start_list(true, Some("item"));
        for item_832 in var_831 {
            #[allow(unused_mut)]
            let mut entry_834 = list_833.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_834, item_832,
            )?;
        }
        list_833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("TagSpecification");
    if let Some(var_836) = &input.tag_specifications {
        let mut list_838 = scope_835.start_list(true, Some("item"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_839, item_837,
            )?;
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ClientToken");
    if let Some(var_841) = &input.client_token {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("AwsService");
    if let Some(var_843) = &input.aws_service {
        scope_842.string(var_843.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DryRun");
    if let Some(var_845) = &input.dry_run {
        scope_844.boolean(*var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("IpamId");
    if let Some(var_847) = &input.ipam_id {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Description");
    if let Some(var_849) = &input.description {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("TagSpecification");
    if let Some(var_851) = &input.tag_specifications {
        let mut list_853 = scope_850.start_list(true, Some("item"));
        for item_852 in var_851 {
            #[allow(unused_mut)]
            let mut entry_854 = list_853.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_854, item_852,
            )?;
        }
        list_853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("ClientToken");
    if let Some(var_856) = &input.client_token {
        scope_855.string(var_856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("KeyName");
    if let Some(var_858) = &input.key_name {
        scope_857.string(var_858);
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("DryRun");
    if let Some(var_860) = &input.dry_run {
        scope_859.boolean(*var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KeyType");
    if let Some(var_862) = &input.key_type {
        scope_861.string(var_862.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("TagSpecification");
    if let Some(var_864) = &input.tag_specifications {
        let mut list_866 = scope_863.start_list(true, Some("item"));
        for item_865 in var_864 {
            #[allow(unused_mut)]
            let mut entry_867 = list_866.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_867, item_865,
            )?;
        }
        list_866.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("DryRun");
    if let Some(var_869) = &input.dry_run {
        scope_868.boolean(*var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("ClientToken");
    if let Some(var_871) = &input.client_token {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("LaunchTemplateName");
    if let Some(var_873) = &input.launch_template_name {
        scope_872.string(var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("VersionDescription");
    if let Some(var_875) = &input.version_description {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("LaunchTemplateData");
    if let Some(var_877) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_876, var_877,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("TagSpecification");
    if let Some(var_879) = &input.tag_specifications {
        let mut list_881 = scope_878.start_list(true, Some("item"));
        for item_880 in var_879 {
            #[allow(unused_mut)]
            let mut entry_882 = list_881.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_882, item_880,
            )?;
        }
        list_881.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("DryRun");
    if let Some(var_884) = &input.dry_run {
        scope_883.boolean(*var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("ClientToken");
    if let Some(var_886) = &input.client_token {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("LaunchTemplateId");
    if let Some(var_888) = &input.launch_template_id {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("LaunchTemplateName");
    if let Some(var_890) = &input.launch_template_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("SourceVersion");
    if let Some(var_892) = &input.source_version {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("VersionDescription");
    if let Some(var_894) = &input.version_description {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("LaunchTemplateData");
    if let Some(var_896) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_895, var_896,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DestinationCidrBlock");
    if let Some(var_898) = &input.destination_cidr_block {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_900) = &input.local_gateway_route_table_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_902) = &input.local_gateway_virtual_interface_group_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DryRun");
    if let Some(var_904) = &input.dry_run {
        scope_903.boolean(*var_904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_906) = &input.local_gateway_route_table_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("VpcId");
    if let Some(var_908) = &input.vpc_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("TagSpecification");
    if let Some(var_910) = &input.tag_specifications {
        let mut list_912 = scope_909.start_list(true, Some("item"));
        for item_911 in var_910 {
            #[allow(unused_mut)]
            let mut entry_913 = list_912.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_913, item_911,
            )?;
        }
        list_912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("DryRun");
    if let Some(var_915) = &input.dry_run {
        scope_914.boolean(*var_915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("DryRun");
    if let Some(var_917) = &input.dry_run {
        scope_916.boolean(*var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("PrefixListName");
    if let Some(var_919) = &input.prefix_list_name {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("Entry");
    if let Some(var_921) = &input.entries {
        let mut list_923 = scope_920.start_list(true, None);
        for item_922 in var_921 {
            #[allow(unused_mut)]
            let mut entry_924 = list_923.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_924, item_922,
            )?;
        }
        list_923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("MaxEntries");
    if let Some(var_926) = &input.max_entries {
        scope_925.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_926).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("TagSpecification");
    if let Some(var_928) = &input.tag_specifications {
        let mut list_930 = scope_927.start_list(true, Some("item"));
        for item_929 in var_928 {
            #[allow(unused_mut)]
            let mut entry_931 = list_930.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_931, item_929,
            )?;
        }
        list_930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("AddressFamily");
    if let Some(var_933) = &input.address_family {
        scope_932.string(var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("ClientToken");
    if let Some(var_935) = &input.client_token {
        scope_934.string(var_935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("AllocationId");
    if let Some(var_937) = &input.allocation_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("ClientToken");
    if let Some(var_939) = &input.client_token {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("DryRun");
    if let Some(var_941) = &input.dry_run {
        scope_940.boolean(*var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("SubnetId");
    if let Some(var_943) = &input.subnet_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("TagSpecification");
    if let Some(var_945) = &input.tag_specifications {
        let mut list_947 = scope_944.start_list(true, Some("item"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_948, item_946,
            )?;
        }
        list_947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ConnectivityType");
    if let Some(var_950) = &input.connectivity_type {
        scope_949.string(var_950.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("DryRun");
    if let Some(var_952) = &input.dry_run {
        scope_951.boolean(*var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("VpcId");
    if let Some(var_954) = &input.vpc_id {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("TagSpecification");
    if let Some(var_956) = &input.tag_specifications {
        let mut list_958 = scope_955.start_list(true, Some("item"));
        for item_957 in var_956 {
            #[allow(unused_mut)]
            let mut entry_959 = list_958.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_959, item_957,
            )?;
        }
        list_958.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("CidrBlock");
    if let Some(var_961) = &input.cidr_block {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("DryRun");
    if let Some(var_963) = &input.dry_run {
        scope_962.boolean(*var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("Egress");
    if let Some(var_965) = &input.egress {
        scope_964.boolean(*var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Icmp");
    if let Some(var_967) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_966, var_967)?;
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_969) = &input.ipv6_cidr_block {
        scope_968.string(var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("NetworkAclId");
    if let Some(var_971) = &input.network_acl_id {
        scope_970.string(var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("PortRange");
    if let Some(var_973) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_972, var_973)?;
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Protocol");
    if let Some(var_975) = &input.protocol {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("RuleAction");
    if let Some(var_977) = &input.rule_action {
        scope_976.string(var_977.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("RuleNumber");
    if let Some(var_979) = &input.rule_number {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("MatchPath");
    if let Some(var_981) = &input.match_paths {
        let mut list_983 = scope_980.start_list(true, Some("item"));
        for item_982 in var_981 {
            #[allow(unused_mut)]
            let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_984, item_982,
            )?;
        }
        list_983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("ExcludePath");
    if let Some(var_986) = &input.exclude_paths {
        let mut list_988 = scope_985.start_list(true, Some("item"));
        for item_987 in var_986 {
            #[allow(unused_mut)]
            let mut entry_989 = list_988.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_989, item_987,
            )?;
        }
        list_988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("ClientToken");
    if let Some(var_991) = &input.client_token {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("TagSpecification");
    if let Some(var_993) = &input.tag_specifications {
        let mut list_995 = scope_992.start_list(true, Some("item"));
        for item_994 in var_993 {
            #[allow(unused_mut)]
            let mut entry_996 = list_995.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_996, item_994,
            )?;
        }
        list_995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("DryRun");
    if let Some(var_998) = &input.dry_run {
        scope_997.boolean(*var_998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("SourceIp");
    if let Some(var_1000) = &input.source_ip {
        scope_999.string(var_1000);
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("DestinationIp");
    if let Some(var_1002) = &input.destination_ip {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("Source");
    if let Some(var_1004) = &input.source {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Destination");
    if let Some(var_1006) = &input.destination {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Protocol");
    if let Some(var_1008) = &input.protocol {
        scope_1007.string(var_1008.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DestinationPort");
    if let Some(var_1010) = &input.destination_port {
        scope_1009.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1010).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("TagSpecification");
    if let Some(var_1012) = &input.tag_specifications {
        let mut list_1014 = scope_1011.start_list(true, Some("item"));
        for item_1013 in var_1012 {
            #[allow(unused_mut)]
            let mut entry_1015 = list_1014.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1015, item_1013,
            )?;
        }
        list_1014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("DryRun");
    if let Some(var_1017) = &input.dry_run {
        scope_1016.boolean(*var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("ClientToken");
    if let Some(var_1019) = &input.client_token {
        scope_1018.string(var_1019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("Description");
    if let Some(var_1021) = &input.description {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("DryRun");
    if let Some(var_1023) = &input.dry_run {
        scope_1022.boolean(*var_1023);
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("SecurityGroupId");
    if let Some(var_1025) = &input.groups {
        let mut list_1027 = scope_1024.start_list(true, Some("SecurityGroupId"));
        for item_1026 in var_1025 {
            #[allow(unused_mut)]
            let mut entry_1028 = list_1027.entry();
            entry_1028.string(item_1026);
        }
        list_1027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1030) = &input.ipv6_address_count {
        scope_1029.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1030).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Ipv6Addresses");
    if let Some(var_1032) = &input.ipv6_addresses {
        let mut list_1034 = scope_1031.start_list(true, Some("item"));
        for item_1033 in var_1032 {
            #[allow(unused_mut)]
            let mut entry_1035 = list_1034.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1035, item_1033,
            )?;
        }
        list_1034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("PrivateIpAddress");
    if let Some(var_1037) = &input.private_ip_address {
        scope_1036.string(var_1037);
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1039) = &input.private_ip_addresses {
        let mut list_1041 = scope_1038.start_list(true, Some("item"));
        for item_1040 in var_1039 {
            #[allow(unused_mut)]
            let mut entry_1042 = list_1041.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1042, item_1040,
            )?;
        }
        list_1041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1044) = &input.secondary_private_ip_address_count {
        scope_1043.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("Ipv4Prefix");
    if let Some(var_1046) = &input.ipv4_prefixes {
        let mut list_1048 = scope_1045.start_list(true, Some("item"));
        for item_1047 in var_1046 {
            #[allow(unused_mut)]
            let mut entry_1049 = list_1048.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1049, item_1047,
            )?;
        }
        list_1048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1051) = &input.ipv4_prefix_count {
        scope_1050.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1051).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("Ipv6Prefix");
    if let Some(var_1053) = &input.ipv6_prefixes {
        let mut list_1055 = scope_1052.start_list(true, Some("item"));
        for item_1054 in var_1053 {
            #[allow(unused_mut)]
            let mut entry_1056 = list_1055.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1056, item_1054,
            )?;
        }
        list_1055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1058) = &input.ipv6_prefix_count {
        scope_1057.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1058).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("InterfaceType");
    if let Some(var_1060) = &input.interface_type {
        scope_1059.string(var_1060.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("SubnetId");
    if let Some(var_1062) = &input.subnet_id {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("TagSpecification");
    if let Some(var_1064) = &input.tag_specifications {
        let mut list_1066 = scope_1063.start_list(true, Some("item"));
        for item_1065 in var_1064 {
            #[allow(unused_mut)]
            let mut entry_1067 = list_1066.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1067, item_1065,
            )?;
        }
        list_1066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("ClientToken");
    if let Some(var_1069) = &input.client_token {
        scope_1068.string(var_1069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1071) = &input.network_interface_id {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("AwsAccountId");
    if let Some(var_1073) = &input.aws_account_id {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("AwsService");
    if let Some(var_1075) = &input.aws_service {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("Permission");
    if let Some(var_1077) = &input.permission {
        scope_1076.string(var_1077.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("DryRun");
    if let Some(var_1079) = &input.dry_run {
        scope_1078.boolean(*var_1079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("DryRun");
    if let Some(var_1081) = &input.dry_run {
        scope_1080.boolean(*var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("GroupName");
    if let Some(var_1083) = &input.group_name {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("Strategy");
    if let Some(var_1085) = &input.strategy {
        scope_1084.string(var_1085.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("PartitionCount");
    if let Some(var_1087) = &input.partition_count {
        scope_1086.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1087).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("TagSpecification");
    if let Some(var_1089) = &input.tag_specifications {
        let mut list_1091 = scope_1088.start_list(true, Some("item"));
        for item_1090 in var_1089 {
            #[allow(unused_mut)]
            let mut entry_1092 = list_1091.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1092, item_1090,
            )?;
        }
        list_1091.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("DryRun");
    if let Some(var_1094) = &input.dry_run {
        scope_1093.boolean(*var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("TagSpecification");
    if let Some(var_1096) = &input.tag_specifications {
        let mut list_1098 = scope_1095.start_list(true, Some("item"));
        for item_1097 in var_1096 {
            #[allow(unused_mut)]
            let mut entry_1099 = list_1098.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1099, item_1097,
            )?;
        }
        list_1098.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("InstanceId");
    if let Some(var_1101) = &input.instance_id {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("SnapshotId");
    if let Some(var_1103) = &input.snapshot_id {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("ClientToken");
    if let Some(var_1105) = &input.client_token {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("DryRun");
    if let Some(var_1107) = &input.dry_run {
        scope_1106.boolean(*var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("TagSpecification");
    if let Some(var_1109) = &input.tag_specifications {
        let mut list_1111 = scope_1108.start_list(true, Some("item"));
        for item_1110 in var_1109 {
            #[allow(unused_mut)]
            let mut entry_1112 = list_1111.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1112, item_1110,
            )?;
        }
        list_1111.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("ClientToken");
    if let Some(var_1114) = &input.client_token {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("InstanceCount");
    if let Some(var_1116) = &input.instance_count {
        scope_1115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("PriceSchedules");
    if let Some(var_1118) = &input.price_schedules {
        let mut list_1120 = scope_1117.start_list(true, Some("item"));
        for item_1119 in var_1118 {
            #[allow(unused_mut)]
            let mut entry_1121 = list_1120.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1121, item_1119,
            )?;
        }
        list_1120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("ReservedInstancesId");
    if let Some(var_1123) = &input.reserved_instances_id {
        scope_1122.string(var_1123);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("Bucket");
    if let Some(var_1125) = &input.bucket {
        scope_1124.string(var_1125);
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("ObjectKey");
    if let Some(var_1127) = &input.object_key {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("Name");
    if let Some(var_1129) = &input.name {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("TagSpecification");
    if let Some(var_1131) = &input.tag_specifications {
        let mut list_1133 = scope_1130.start_list(true, Some("item"));
        for item_1132 in var_1131 {
            #[allow(unused_mut)]
            let mut entry_1134 = list_1133.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1134, item_1132,
            )?;
        }
        list_1133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("DryRun");
    if let Some(var_1136) = &input.dry_run {
        scope_1135.boolean(*var_1136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1138) = &input.destination_cidr_block {
        scope_1137.string(var_1138);
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1140) = &input.destination_ipv6_cidr_block {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1142) = &input.destination_prefix_list_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DryRun");
    if let Some(var_1144) = &input.dry_run {
        scope_1143.boolean(*var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("VpcEndpointId");
    if let Some(var_1146) = &input.vpc_endpoint_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1148) = &input.egress_only_internet_gateway_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("GatewayId");
    if let Some(var_1150) = &input.gateway_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("InstanceId");
    if let Some(var_1152) = &input.instance_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("NatGatewayId");
    if let Some(var_1154) = &input.nat_gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("TransitGatewayId");
    if let Some(var_1156) = &input.transit_gateway_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("LocalGatewayId");
    if let Some(var_1158) = &input.local_gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("CarrierGatewayId");
    if let Some(var_1160) = &input.carrier_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1162) = &input.network_interface_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("RouteTableId");
    if let Some(var_1164) = &input.route_table_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1166) = &input.vpc_peering_connection_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("CoreNetworkArn");
    if let Some(var_1168) = &input.core_network_arn {
        scope_1167.string(var_1168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("DryRun");
    if let Some(var_1170) = &input.dry_run {
        scope_1169.boolean(*var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("VpcId");
    if let Some(var_1172) = &input.vpc_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("TagSpecification");
    if let Some(var_1174) = &input.tag_specifications {
        let mut list_1176 = scope_1173.start_list(true, Some("item"));
        for item_1175 in var_1174 {
            #[allow(unused_mut)]
            let mut entry_1177 = list_1176.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1177, item_1175,
            )?;
        }
        list_1176.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("GroupDescription");
    if let Some(var_1179) = &input.description {
        scope_1178.string(var_1179);
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("GroupName");
    if let Some(var_1181) = &input.group_name {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("VpcId");
    if let Some(var_1183) = &input.vpc_id {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("TagSpecification");
    if let Some(var_1185) = &input.tag_specifications {
        let mut list_1187 = scope_1184.start_list(true, Some("item"));
        for item_1186 in var_1185 {
            #[allow(unused_mut)]
            let mut entry_1188 = list_1187.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1188, item_1186,
            )?;
        }
        list_1187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("DryRun");
    if let Some(var_1190) = &input.dry_run {
        scope_1189.boolean(*var_1190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("Description");
    if let Some(var_1192) = &input.description {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("OutpostArn");
    if let Some(var_1194) = &input.outpost_arn {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("VolumeId");
    if let Some(var_1196) = &input.volume_id {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("TagSpecification");
    if let Some(var_1198) = &input.tag_specifications {
        let mut list_1200 = scope_1197.start_list(true, Some("item"));
        for item_1199 in var_1198 {
            #[allow(unused_mut)]
            let mut entry_1201 = list_1200.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1201, item_1199,
            )?;
        }
        list_1200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("DryRun");
    if let Some(var_1203) = &input.dry_run {
        scope_1202.boolean(*var_1203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("Description");
    if let Some(var_1205) = &input.description {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("InstanceSpecification");
    if let Some(var_1207) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1206, var_1207,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("OutpostArn");
    if let Some(var_1209) = &input.outpost_arn {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("TagSpecification");
    if let Some(var_1211) = &input.tag_specifications {
        let mut list_1213 = scope_1210.start_list(true, Some("item"));
        for item_1212 in var_1211 {
            #[allow(unused_mut)]
            let mut entry_1214 = list_1213.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1214, item_1212,
            )?;
        }
        list_1213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1215 = writer.prefix("DryRun");
    if let Some(var_1216) = &input.dry_run {
        scope_1215.boolean(*var_1216);
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1218) = &input.copy_tags_from_source {
        scope_1217.string(var_1218.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("Bucket");
    if let Some(var_1220) = &input.bucket {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DryRun");
    if let Some(var_1222) = &input.dry_run {
        scope_1221.boolean(*var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Prefix");
    if let Some(var_1224) = &input.prefix {
        scope_1223.string(var_1224);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("ImageId");
    if let Some(var_1226) = &input.image_id {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Bucket");
    if let Some(var_1228) = &input.bucket {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("S3ObjectTag");
    if let Some(var_1230) = &input.s3_object_tags {
        let mut list_1232 = scope_1229.start_list(true, Some("item"));
        for item_1231 in var_1230 {
            #[allow(unused_mut)]
            let mut entry_1233 = list_1232.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1233, item_1231)?;
        }
        list_1232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("DryRun");
    if let Some(var_1235) = &input.dry_run {
        scope_1234.boolean(*var_1235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("TagSpecification");
    if let Some(var_1237) = &input.tag_specifications {
        let mut list_1239 = scope_1236.start_list(true, Some("item"));
        for item_1238 in var_1237 {
            #[allow(unused_mut)]
            let mut entry_1240 = list_1239.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1240, item_1238,
            )?;
        }
        list_1239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("AvailabilityZone");
    if let Some(var_1242) = &input.availability_zone {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1244) = &input.availability_zone_id {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CidrBlock");
    if let Some(var_1246) = &input.cidr_block {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1248) = &input.ipv6_cidr_block {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("OutpostArn");
    if let Some(var_1250) = &input.outpost_arn {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("VpcId");
    if let Some(var_1252) = &input.vpc_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("DryRun");
    if let Some(var_1254) = &input.dry_run {
        scope_1253.boolean(*var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Ipv6Native");
    if let Some(var_1256) = &input.ipv6_native {
        scope_1255.boolean(*var_1256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("TagSpecification");
    if let Some(var_1258) = &input.tag_specifications {
        let mut list_1260 = scope_1257.start_list(true, Some("item"));
        for item_1259 in var_1258 {
            #[allow(unused_mut)]
            let mut entry_1261 = list_1260.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1261, item_1259,
            )?;
        }
        list_1260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("SubnetId");
    if let Some(var_1263) = &input.subnet_id {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("Cidr");
    if let Some(var_1265) = &input.cidr {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("ReservationType");
    if let Some(var_1267) = &input.reservation_type {
        scope_1266.string(var_1267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("Description");
    if let Some(var_1269) = &input.description {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DryRun");
    if let Some(var_1271) = &input.dry_run {
        scope_1270.boolean(*var_1271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("DryRun");
    if let Some(var_1273) = &input.dry_run {
        scope_1272.boolean(*var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("ResourceId");
    if let Some(var_1275) = &input.resources {
        let mut list_1277 = scope_1274.start_list(true, None);
        for item_1276 in var_1275 {
            #[allow(unused_mut)]
            let mut entry_1278 = list_1277.entry();
            entry_1278.string(item_1276);
        }
        list_1277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("Tag");
    if let Some(var_1280) = &input.tags {
        let mut list_1282 = scope_1279.start_list(true, Some("item"));
        for item_1281 in var_1280 {
            #[allow(unused_mut)]
            let mut entry_1283 = list_1282.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1283, item_1281)?;
        }
        list_1282.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("Description");
    if let Some(var_1285) = &input.description {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("TagSpecification");
    if let Some(var_1287) = &input.tag_specifications {
        let mut list_1289 = scope_1286.start_list(true, Some("item"));
        for item_1288 in var_1287 {
            #[allow(unused_mut)]
            let mut entry_1290 = list_1289.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1290, item_1288,
            )?;
        }
        list_1289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("DryRun");
    if let Some(var_1292) = &input.dry_run {
        scope_1291.boolean(*var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("ClientToken");
    if let Some(var_1294) = &input.client_token {
        scope_1293.string(var_1294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1296) = &input.traffic_mirror_filter_id {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("TrafficDirection");
    if let Some(var_1298) = &input.traffic_direction {
        scope_1297.string(var_1298.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("RuleNumber");
    if let Some(var_1300) = &input.rule_number {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("RuleAction");
    if let Some(var_1302) = &input.rule_action {
        scope_1301.string(var_1302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DestinationPortRange");
    if let Some(var_1304) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1303, var_1304,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("SourcePortRange");
    if let Some(var_1306) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1305, var_1306,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Protocol");
    if let Some(var_1308) = &input.protocol {
        scope_1307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1310) = &input.destination_cidr_block {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("SourceCidrBlock");
    if let Some(var_1312) = &input.source_cidr_block {
        scope_1311.string(var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Description");
    if let Some(var_1314) = &input.description {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("DryRun");
    if let Some(var_1316) = &input.dry_run {
        scope_1315.boolean(*var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("ClientToken");
    if let Some(var_1318) = &input.client_token {
        scope_1317.string(var_1318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1320) = &input.network_interface_id {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1322) = &input.traffic_mirror_target_id {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1324) = &input.traffic_mirror_filter_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("PacketLength");
    if let Some(var_1326) = &input.packet_length {
        scope_1325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("SessionNumber");
    if let Some(var_1328) = &input.session_number {
        scope_1327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("VirtualNetworkId");
    if let Some(var_1330) = &input.virtual_network_id {
        scope_1329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("Description");
    if let Some(var_1332) = &input.description {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("TagSpecification");
    if let Some(var_1334) = &input.tag_specifications {
        let mut list_1336 = scope_1333.start_list(true, Some("item"));
        for item_1335 in var_1334 {
            #[allow(unused_mut)]
            let mut entry_1337 = list_1336.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1337, item_1335,
            )?;
        }
        list_1336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("DryRun");
    if let Some(var_1339) = &input.dry_run {
        scope_1338.boolean(*var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("ClientToken");
    if let Some(var_1341) = &input.client_token {
        scope_1340.string(var_1341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1343) = &input.network_interface_id {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1345) = &input.network_load_balancer_arn {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Description");
    if let Some(var_1347) = &input.description {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("TagSpecification");
    if let Some(var_1349) = &input.tag_specifications {
        let mut list_1351 = scope_1348.start_list(true, Some("item"));
        for item_1350 in var_1349 {
            #[allow(unused_mut)]
            let mut entry_1352 = list_1351.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1352, item_1350,
            )?;
        }
        list_1351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("DryRun");
    if let Some(var_1354) = &input.dry_run {
        scope_1353.boolean(*var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("ClientToken");
    if let Some(var_1356) = &input.client_token {
        scope_1355.string(var_1356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("Description");
    if let Some(var_1358) = &input.description {
        scope_1357.string(var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("Options");
    if let Some(var_1360) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1359, var_1360,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("TagSpecification");
    if let Some(var_1362) = &input.tag_specifications {
        let mut list_1364 = scope_1361.start_list(true, Some("item"));
        for item_1363 in var_1362 {
            #[allow(unused_mut)]
            let mut entry_1365 = list_1364.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1365, item_1363,
            )?;
        }
        list_1364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("DryRun");
    if let Some(var_1367) = &input.dry_run {
        scope_1366.boolean(*var_1367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1369) = &input.transport_transit_gateway_attachment_id {
        scope_1368.string(var_1369);
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Options");
    if let Some(var_1371) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1370, var_1371)?;
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("TagSpecification");
    if let Some(var_1373) = &input.tag_specifications {
        let mut list_1375 = scope_1372.start_list(true, Some("item"));
        for item_1374 in var_1373 {
            #[allow(unused_mut)]
            let mut entry_1376 = list_1375.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1376, item_1374,
            )?;
        }
        list_1375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("DryRun");
    if let Some(var_1378) = &input.dry_run {
        scope_1377.boolean(*var_1378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1380) = &input.transit_gateway_attachment_id {
        scope_1379.string(var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1382) = &input.transit_gateway_address {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("PeerAddress");
    if let Some(var_1384) = &input.peer_address {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("BgpOptions");
    if let Some(var_1386) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1385, var_1386)?;
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1388) = &input.inside_cidr_blocks {
        let mut list_1390 = scope_1387.start_list(true, Some("item"));
        for item_1389 in var_1388 {
            #[allow(unused_mut)]
            let mut entry_1391 = list_1390.entry();
            entry_1391.string(item_1389);
        }
        list_1390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("TagSpecification");
    if let Some(var_1393) = &input.tag_specifications {
        let mut list_1395 = scope_1392.start_list(true, Some("item"));
        for item_1394 in var_1393 {
            #[allow(unused_mut)]
            let mut entry_1396 = list_1395.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1396, item_1394,
            )?;
        }
        list_1395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("DryRun");
    if let Some(var_1398) = &input.dry_run {
        scope_1397.boolean(*var_1398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("TransitGatewayId");
    if let Some(var_1400) = &input.transit_gateway_id {
        scope_1399.string(var_1400);
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("Options");
    if let Some(var_1402) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1401, var_1402)?;
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("TagSpecification");
    if let Some(var_1404) = &input.tag_specifications {
        let mut list_1406 = scope_1403.start_list(true, Some("item"));
        for item_1405 in var_1404 {
            #[allow(unused_mut)]
            let mut entry_1407 = list_1406.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1407, item_1405,
            )?;
        }
        list_1406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("DryRun");
    if let Some(var_1409) = &input.dry_run {
        scope_1408.boolean(*var_1409);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("TransitGatewayId");
    if let Some(var_1411) = &input.transit_gateway_id {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1413) = &input.peer_transit_gateway_id {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("PeerAccountId");
    if let Some(var_1415) = &input.peer_account_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("PeerRegion");
    if let Some(var_1417) = &input.peer_region {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("TagSpecification");
    if let Some(var_1419) = &input.tag_specifications {
        let mut list_1421 = scope_1418.start_list(true, Some("item"));
        for item_1420 in var_1419 {
            #[allow(unused_mut)]
            let mut entry_1422 = list_1421.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1422, item_1420,
            )?;
        }
        list_1421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("DryRun");
    if let Some(var_1424) = &input.dry_run {
        scope_1423.boolean(*var_1424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1426) = &input.transit_gateway_route_table_id {
        scope_1425.string(var_1426);
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("PrefixListId");
    if let Some(var_1428) = &input.prefix_list_id {
        scope_1427.string(var_1428);
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1430) = &input.transit_gateway_attachment_id {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("Blackhole");
    if let Some(var_1432) = &input.blackhole {
        scope_1431.boolean(*var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("DryRun");
    if let Some(var_1434) = &input.dry_run {
        scope_1433.boolean(*var_1434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1436) = &input.destination_cidr_block {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1438) = &input.transit_gateway_route_table_id {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1440) = &input.transit_gateway_attachment_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("Blackhole");
    if let Some(var_1442) = &input.blackhole {
        scope_1441.boolean(*var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("DryRun");
    if let Some(var_1444) = &input.dry_run {
        scope_1443.boolean(*var_1444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("TransitGatewayId");
    if let Some(var_1446) = &input.transit_gateway_id {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("TagSpecifications");
    if let Some(var_1448) = &input.tag_specifications {
        let mut list_1450 = scope_1447.start_list(true, Some("item"));
        for item_1449 in var_1448 {
            #[allow(unused_mut)]
            let mut entry_1451 = list_1450.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1451, item_1449,
            )?;
        }
        list_1450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("DryRun");
    if let Some(var_1453) = &input.dry_run {
        scope_1452.boolean(*var_1453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("TransitGatewayId");
    if let Some(var_1455) = &input.transit_gateway_id {
        scope_1454.string(var_1455);
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("VpcId");
    if let Some(var_1457) = &input.vpc_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("SubnetIds");
    if let Some(var_1459) = &input.subnet_ids {
        let mut list_1461 = scope_1458.start_list(true, Some("item"));
        for item_1460 in var_1459 {
            #[allow(unused_mut)]
            let mut entry_1462 = list_1461.entry();
            entry_1462.string(item_1460);
        }
        list_1461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("Options");
    if let Some(var_1464) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1463, var_1464)?;
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("TagSpecifications");
    if let Some(var_1466) = &input.tag_specifications {
        let mut list_1468 = scope_1465.start_list(true, Some("item"));
        for item_1467 in var_1466 {
            #[allow(unused_mut)]
            let mut entry_1469 = list_1468.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1469, item_1467,
            )?;
        }
        list_1468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("DryRun");
    if let Some(var_1471) = &input.dry_run {
        scope_1470.boolean(*var_1471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("AvailabilityZone");
    if let Some(var_1473) = &input.availability_zone {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("Encrypted");
    if let Some(var_1475) = &input.encrypted {
        scope_1474.boolean(*var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("Iops");
    if let Some(var_1477) = &input.iops {
        scope_1476.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1477).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("KmsKeyId");
    if let Some(var_1479) = &input.kms_key_id {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("OutpostArn");
    if let Some(var_1481) = &input.outpost_arn {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("Size");
    if let Some(var_1483) = &input.size {
        scope_1482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("SnapshotId");
    if let Some(var_1485) = &input.snapshot_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("VolumeType");
    if let Some(var_1487) = &input.volume_type {
        scope_1486.string(var_1487.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("DryRun");
    if let Some(var_1489) = &input.dry_run {
        scope_1488.boolean(*var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("TagSpecification");
    if let Some(var_1491) = &input.tag_specifications {
        let mut list_1493 = scope_1490.start_list(true, Some("item"));
        for item_1492 in var_1491 {
            #[allow(unused_mut)]
            let mut entry_1494 = list_1493.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1494, item_1492,
            )?;
        }
        list_1493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1496) = &input.multi_attach_enabled {
        scope_1495.boolean(*var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("Throughput");
    if let Some(var_1498) = &input.throughput {
        scope_1497.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1498).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("ClientToken");
    if let Some(var_1500) = &input.client_token {
        scope_1499.string(var_1500);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("CidrBlock");
    if let Some(var_1502) = &input.cidr_block {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1504) = &input.amazon_provided_ipv6_cidr_block {
        scope_1503.boolean(*var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("Ipv6Pool");
    if let Some(var_1506) = &input.ipv6_pool {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1508) = &input.ipv6_cidr_block {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1510) = &input.ipv4_ipam_pool_id {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1512) = &input.ipv4_netmask_length {
        scope_1511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1514) = &input.ipv6_ipam_pool_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1516) = &input.ipv6_netmask_length {
        scope_1515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("DryRun");
    if let Some(var_1518) = &input.dry_run {
        scope_1517.boolean(*var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("InstanceTenancy");
    if let Some(var_1520) = &input.instance_tenancy {
        scope_1519.string(var_1520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1522) = &input.ipv6_cidr_block_network_border_group {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("TagSpecification");
    if let Some(var_1524) = &input.tag_specifications {
        let mut list_1526 = scope_1523.start_list(true, Some("item"));
        for item_1525 in var_1524 {
            #[allow(unused_mut)]
            let mut entry_1527 = list_1526.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1527, item_1525,
            )?;
        }
        list_1526.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("DryRun");
    if let Some(var_1529) = &input.dry_run {
        scope_1528.boolean(*var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("VpcEndpointType");
    if let Some(var_1531) = &input.vpc_endpoint_type {
        scope_1530.string(var_1531.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("VpcId");
    if let Some(var_1533) = &input.vpc_id {
        scope_1532.string(var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("ServiceName");
    if let Some(var_1535) = &input.service_name {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("PolicyDocument");
    if let Some(var_1537) = &input.policy_document {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("RouteTableId");
    if let Some(var_1539) = &input.route_table_ids {
        let mut list_1541 = scope_1538.start_list(true, Some("item"));
        for item_1540 in var_1539 {
            #[allow(unused_mut)]
            let mut entry_1542 = list_1541.entry();
            entry_1542.string(item_1540);
        }
        list_1541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1543 = writer.prefix("SubnetId");
    if let Some(var_1544) = &input.subnet_ids {
        let mut list_1546 = scope_1543.start_list(true, Some("item"));
        for item_1545 in var_1544 {
            #[allow(unused_mut)]
            let mut entry_1547 = list_1546.entry();
            entry_1547.string(item_1545);
        }
        list_1546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("SecurityGroupId");
    if let Some(var_1549) = &input.security_group_ids {
        let mut list_1551 = scope_1548.start_list(true, Some("item"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            entry_1552.string(item_1550);
        }
        list_1551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("ClientToken");
    if let Some(var_1554) = &input.client_token {
        scope_1553.string(var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1556) = &input.private_dns_enabled {
        scope_1555.boolean(*var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("TagSpecification");
    if let Some(var_1558) = &input.tag_specifications {
        let mut list_1560 = scope_1557.start_list(true, Some("item"));
        for item_1559 in var_1558 {
            #[allow(unused_mut)]
            let mut entry_1561 = list_1560.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1561, item_1559,
            )?;
        }
        list_1560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("DryRun");
    if let Some(var_1563) = &input.dry_run {
        scope_1562.boolean(*var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("ServiceId");
    if let Some(var_1565) = &input.service_id {
        scope_1564.string(var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("VpcEndpointId");
    if let Some(var_1567) = &input.vpc_endpoint_id {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1569) = &input.connection_notification_arn {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("ConnectionEvents");
    if let Some(var_1571) = &input.connection_events {
        let mut list_1573 = scope_1570.start_list(true, Some("item"));
        for item_1572 in var_1571 {
            #[allow(unused_mut)]
            let mut entry_1574 = list_1573.entry();
            entry_1574.string(item_1572);
        }
        list_1573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("ClientToken");
    if let Some(var_1576) = &input.client_token {
        scope_1575.string(var_1576);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("DryRun");
    if let Some(var_1578) = &input.dry_run {
        scope_1577.boolean(*var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("AcceptanceRequired");
    if let Some(var_1580) = &input.acceptance_required {
        scope_1579.boolean(*var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("PrivateDnsName");
    if let Some(var_1582) = &input.private_dns_name {
        scope_1581.string(var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1584) = &input.network_load_balancer_arns {
        let mut list_1586 = scope_1583.start_list(true, Some("item"));
        for item_1585 in var_1584 {
            #[allow(unused_mut)]
            let mut entry_1587 = list_1586.entry();
            entry_1587.string(item_1585);
        }
        list_1586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1588 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1589) = &input.gateway_load_balancer_arns {
        let mut list_1591 = scope_1588.start_list(true, Some("item"));
        for item_1590 in var_1589 {
            #[allow(unused_mut)]
            let mut entry_1592 = list_1591.entry();
            entry_1592.string(item_1590);
        }
        list_1591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("ClientToken");
    if let Some(var_1594) = &input.client_token {
        scope_1593.string(var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("TagSpecification");
    if let Some(var_1596) = &input.tag_specifications {
        let mut list_1598 = scope_1595.start_list(true, Some("item"));
        for item_1597 in var_1596 {
            #[allow(unused_mut)]
            let mut entry_1599 = list_1598.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1599, item_1597,
            )?;
        }
        list_1598.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("DryRun");
    if let Some(var_1601) = &input.dry_run {
        scope_1600.boolean(*var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("PeerOwnerId");
    if let Some(var_1603) = &input.peer_owner_id {
        scope_1602.string(var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("PeerVpcId");
    if let Some(var_1605) = &input.peer_vpc_id {
        scope_1604.string(var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("VpcId");
    if let Some(var_1607) = &input.vpc_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("PeerRegion");
    if let Some(var_1609) = &input.peer_region {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("TagSpecification");
    if let Some(var_1611) = &input.tag_specifications {
        let mut list_1613 = scope_1610.start_list(true, Some("item"));
        for item_1612 in var_1611 {
            #[allow(unused_mut)]
            let mut entry_1614 = list_1613.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1614, item_1612,
            )?;
        }
        list_1613.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("CustomerGatewayId");
    if let Some(var_1616) = &input.customer_gateway_id {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("Type");
    if let Some(var_1618) = &input.r#type {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("VpnGatewayId");
    if let Some(var_1620) = &input.vpn_gateway_id {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("TransitGatewayId");
    if let Some(var_1622) = &input.transit_gateway_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("DryRun");
    if let Some(var_1624) = &input.dry_run {
        scope_1623.boolean(*var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("Options");
    if let Some(var_1626) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1625, var_1626,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("TagSpecification");
    if let Some(var_1628) = &input.tag_specifications {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1631, item_1629,
            )?;
        }
        list_1630.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1633) = &input.destination_cidr_block {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("VpnConnectionId");
    if let Some(var_1635) = &input.vpn_connection_id {
        scope_1634.string(var_1635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("AvailabilityZone");
    if let Some(var_1637) = &input.availability_zone {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("Type");
    if let Some(var_1639) = &input.r#type {
        scope_1638.string(var_1639.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("TagSpecification");
    if let Some(var_1641) = &input.tag_specifications {
        let mut list_1643 = scope_1640.start_list(true, Some("item"));
        for item_1642 in var_1641 {
            #[allow(unused_mut)]
            let mut entry_1644 = list_1643.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1644, item_1642,
            )?;
        }
        list_1643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("AmazonSideAsn");
    if let Some(var_1646) = &input.amazon_side_asn {
        scope_1645.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1646).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("DryRun");
    if let Some(var_1648) = &input.dry_run {
        scope_1647.boolean(*var_1648);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("CarrierGatewayId");
    if let Some(var_1650) = &input.carrier_gateway_id {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("DryRun");
    if let Some(var_1652) = &input.dry_run {
        scope_1651.boolean(*var_1652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1654) = &input.client_vpn_endpoint_id {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DryRun");
    if let Some(var_1656) = &input.dry_run {
        scope_1655.boolean(*var_1656);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1658) = &input.client_vpn_endpoint_id {
        scope_1657.string(var_1658);
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1660) = &input.target_vpc_subnet_id {
        scope_1659.string(var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1662) = &input.destination_cidr_block {
        scope_1661.string(var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DryRun");
    if let Some(var_1664) = &input.dry_run {
        scope_1663.boolean(*var_1664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("CustomerGatewayId");
    if let Some(var_1666) = &input.customer_gateway_id {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("DryRun");
    if let Some(var_1668) = &input.dry_run {
        scope_1667.boolean(*var_1668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("DhcpOptionsId");
    if let Some(var_1670) = &input.dhcp_options_id {
        scope_1669.string(var_1670);
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DryRun");
    if let Some(var_1672) = &input.dry_run {
        scope_1671.boolean(*var_1672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("DryRun");
    if let Some(var_1674) = &input.dry_run {
        scope_1673.boolean(*var_1674);
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1676) = &input.egress_only_internet_gateway_id {
        scope_1675.string(var_1676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("DryRun");
    if let Some(var_1678) = &input.dry_run {
        scope_1677.boolean(*var_1678);
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("FleetId");
    if let Some(var_1680) = &input.fleet_ids {
        let mut list_1682 = scope_1679.start_list(true, None);
        for item_1681 in var_1680 {
            #[allow(unused_mut)]
            let mut entry_1683 = list_1682.entry();
            entry_1683.string(item_1681);
        }
        list_1682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("TerminateInstances");
    if let Some(var_1685) = &input.terminate_instances {
        scope_1684.boolean(*var_1685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("FlowLogId");
    if let Some(var_1689) = &input.flow_log_ids {
        let mut list_1691 = scope_1688.start_list(true, Some("item"));
        for item_1690 in var_1689 {
            #[allow(unused_mut)]
            let mut entry_1692 = list_1691.entry();
            entry_1692.string(item_1690);
        }
        list_1691.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("DryRun");
    if let Some(var_1694) = &input.dry_run {
        scope_1693.boolean(*var_1694);
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("FpgaImageId");
    if let Some(var_1696) = &input.fpga_image_id {
        scope_1695.string(var_1696);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("DryRun");
    if let Some(var_1698) = &input.dry_run {
        scope_1697.boolean(*var_1698);
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("ForceDelete");
    if let Some(var_1700) = &input.force_delete {
        scope_1699.boolean(*var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1702) = &input.instance_event_window_id {
        scope_1701.string(var_1702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("DryRun");
    if let Some(var_1704) = &input.dry_run {
        scope_1703.boolean(*var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("InternetGatewayId");
    if let Some(var_1706) = &input.internet_gateway_id {
        scope_1705.string(var_1706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("DryRun");
    if let Some(var_1708) = &input.dry_run {
        scope_1707.boolean(*var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("IpamId");
    if let Some(var_1710) = &input.ipam_id {
        scope_1709.string(var_1710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("DryRun");
    if let Some(var_1712) = &input.dry_run {
        scope_1711.boolean(*var_1712);
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("IpamPoolId");
    if let Some(var_1714) = &input.ipam_pool_id {
        scope_1713.string(var_1714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("DryRun");
    if let Some(var_1716) = &input.dry_run {
        scope_1715.boolean(*var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("IpamScopeId");
    if let Some(var_1718) = &input.ipam_scope_id {
        scope_1717.string(var_1718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("KeyName");
    if let Some(var_1720) = &input.key_name {
        scope_1719.string(var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("KeyPairId");
    if let Some(var_1722) = &input.key_pair_id {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("DryRun");
    if let Some(var_1724) = &input.dry_run {
        scope_1723.boolean(*var_1724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DryRun");
    if let Some(var_1726) = &input.dry_run {
        scope_1725.boolean(*var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("LaunchTemplateId");
    if let Some(var_1728) = &input.launch_template_id {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("LaunchTemplateName");
    if let Some(var_1730) = &input.launch_template_name {
        scope_1729.string(var_1730);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("DryRun");
    if let Some(var_1732) = &input.dry_run {
        scope_1731.boolean(*var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("LaunchTemplateId");
    if let Some(var_1734) = &input.launch_template_id {
        scope_1733.string(var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("LaunchTemplateName");
    if let Some(var_1736) = &input.launch_template_name {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1738) = &input.versions {
        let mut list_1740 = scope_1737.start_list(true, Some("item"));
        for item_1739 in var_1738 {
            #[allow(unused_mut)]
            let mut entry_1741 = list_1740.entry();
            entry_1741.string(item_1739);
        }
        list_1740.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1743) = &input.destination_cidr_block {
        scope_1742.string(var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1745) = &input.local_gateway_route_table_id {
        scope_1744.string(var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("DryRun");
    if let Some(var_1747) = &input.dry_run {
        scope_1746.boolean(*var_1747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1749) = &input.local_gateway_route_table_vpc_association_id {
        scope_1748.string(var_1749);
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DryRun");
    if let Some(var_1751) = &input.dry_run {
        scope_1750.boolean(*var_1751);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("DryRun");
    if let Some(var_1753) = &input.dry_run {
        scope_1752.boolean(*var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("PrefixListId");
    if let Some(var_1755) = &input.prefix_list_id {
        scope_1754.string(var_1755);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("DryRun");
    if let Some(var_1757) = &input.dry_run {
        scope_1756.boolean(*var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("NatGatewayId");
    if let Some(var_1759) = &input.nat_gateway_id {
        scope_1758.string(var_1759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("DryRun");
    if let Some(var_1761) = &input.dry_run {
        scope_1760.boolean(*var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("NetworkAclId");
    if let Some(var_1763) = &input.network_acl_id {
        scope_1762.string(var_1763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("DryRun");
    if let Some(var_1765) = &input.dry_run {
        scope_1764.boolean(*var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("Egress");
    if let Some(var_1767) = &input.egress {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("NetworkAclId");
    if let Some(var_1769) = &input.network_acl_id {
        scope_1768.string(var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("RuleNumber");
    if let Some(var_1771) = &input.rule_number {
        scope_1770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1771).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("DryRun");
    if let Some(var_1773) = &input.dry_run {
        scope_1772.boolean(*var_1773);
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1775) = &input.network_insights_access_scope_id {
        scope_1774.string(var_1775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1777) = &input.network_insights_access_scope_analysis_id {
        scope_1776.string(var_1777);
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("DryRun");
    if let Some(var_1779) = &input.dry_run {
        scope_1778.boolean(*var_1779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("DryRun");
    if let Some(var_1781) = &input.dry_run {
        scope_1780.boolean(*var_1781);
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1783) = &input.network_insights_analysis_id {
        scope_1782.string(var_1783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DryRun");
    if let Some(var_1785) = &input.dry_run {
        scope_1784.boolean(*var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1787) = &input.network_insights_path_id {
        scope_1786.string(var_1787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("DryRun");
    if let Some(var_1789) = &input.dry_run {
        scope_1788.boolean(*var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1791) = &input.network_interface_id {
        scope_1790.string(var_1791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1793) = &input.network_interface_permission_id {
        scope_1792.string(var_1793);
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Force");
    if let Some(var_1795) = &input.force {
        scope_1794.boolean(*var_1795);
    }
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("DryRun");
    if let Some(var_1797) = &input.dry_run {
        scope_1796.boolean(*var_1797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("DryRun");
    if let Some(var_1799) = &input.dry_run {
        scope_1798.boolean(*var_1799);
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("GroupName");
    if let Some(var_1801) = &input.group_name {
        scope_1800.string(var_1801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("PoolId");
    if let Some(var_1805) = &input.pool_id {
        scope_1804.string(var_1805);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("DryRun");
    if let Some(var_1807) = &input.dry_run {
        scope_1806.boolean(*var_1807);
    }
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("ReservedInstancesId");
    if let Some(var_1809) = &input.reserved_instances_ids {
        let mut list_1811 = scope_1808.start_list(true, Some("item"));
        for item_1810 in var_1809 {
            #[allow(unused_mut)]
            let mut entry_1812 = list_1811.entry();
            entry_1812.string(item_1810);
        }
        list_1811.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1814) = &input.destination_cidr_block {
        scope_1813.string(var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1816) = &input.destination_ipv6_cidr_block {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1818) = &input.destination_prefix_list_id {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DryRun");
    if let Some(var_1820) = &input.dry_run {
        scope_1819.boolean(*var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("RouteTableId");
    if let Some(var_1822) = &input.route_table_id {
        scope_1821.string(var_1822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DryRun");
    if let Some(var_1824) = &input.dry_run {
        scope_1823.boolean(*var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("RouteTableId");
    if let Some(var_1826) = &input.route_table_id {
        scope_1825.string(var_1826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("GroupId");
    if let Some(var_1828) = &input.group_id {
        scope_1827.string(var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("GroupName");
    if let Some(var_1830) = &input.group_name {
        scope_1829.string(var_1830);
    }
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("DryRun");
    if let Some(var_1832) = &input.dry_run {
        scope_1831.boolean(*var_1832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("SnapshotId");
    if let Some(var_1834) = &input.snapshot_id {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("DryRun");
    if let Some(var_1836) = &input.dry_run {
        scope_1835.boolean(*var_1836);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("DryRun");
    if let Some(var_1838) = &input.dry_run {
        scope_1837.boolean(*var_1838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("SubnetId");
    if let Some(var_1840) = &input.subnet_id {
        scope_1839.string(var_1840);
    }
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("DryRun");
    if let Some(var_1842) = &input.dry_run {
        scope_1841.boolean(*var_1842);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1844) = &input.subnet_cidr_reservation_id {
        scope_1843.string(var_1844);
    }
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("DryRun");
    if let Some(var_1846) = &input.dry_run {
        scope_1845.boolean(*var_1846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("DryRun");
    if let Some(var_1848) = &input.dry_run {
        scope_1847.boolean(*var_1848);
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("ResourceId");
    if let Some(var_1850) = &input.resources {
        let mut list_1852 = scope_1849.start_list(true, None);
        for item_1851 in var_1850 {
            #[allow(unused_mut)]
            let mut entry_1853 = list_1852.entry();
            entry_1853.string(item_1851);
        }
        list_1852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("Tag");
    if let Some(var_1855) = &input.tags {
        let mut list_1857 = scope_1854.start_list(true, Some("item"));
        for item_1856 in var_1855 {
            #[allow(unused_mut)]
            let mut entry_1858 = list_1857.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1858, item_1856)?;
        }
        list_1857.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1860) = &input.traffic_mirror_filter_id {
        scope_1859.string(var_1860);
    }
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("DryRun");
    if let Some(var_1862) = &input.dry_run {
        scope_1861.boolean(*var_1862);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1864) = &input.traffic_mirror_filter_rule_id {
        scope_1863.string(var_1864);
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("DryRun");
    if let Some(var_1866) = &input.dry_run {
        scope_1865.boolean(*var_1866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1868) = &input.traffic_mirror_session_id {
        scope_1867.string(var_1868);
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("DryRun");
    if let Some(var_1870) = &input.dry_run {
        scope_1869.boolean(*var_1870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1872) = &input.traffic_mirror_target_id {
        scope_1871.string(var_1872);
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("DryRun");
    if let Some(var_1874) = &input.dry_run {
        scope_1873.boolean(*var_1874);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("TransitGatewayId");
    if let Some(var_1876) = &input.transit_gateway_id {
        scope_1875.string(var_1876);
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("DryRun");
    if let Some(var_1878) = &input.dry_run {
        scope_1877.boolean(*var_1878);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1880) = &input.transit_gateway_attachment_id {
        scope_1879.string(var_1880);
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("DryRun");
    if let Some(var_1882) = &input.dry_run {
        scope_1881.boolean(*var_1882);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1884) = &input.transit_gateway_connect_peer_id {
        scope_1883.string(var_1884);
    }
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("DryRun");
    if let Some(var_1886) = &input.dry_run {
        scope_1885.boolean(*var_1886);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1888) = &input.transit_gateway_multicast_domain_id {
        scope_1887.string(var_1888);
    }
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("DryRun");
    if let Some(var_1890) = &input.dry_run {
        scope_1889.boolean(*var_1890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1892) = &input.transit_gateway_attachment_id {
        scope_1891.string(var_1892);
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("DryRun");
    if let Some(var_1894) = &input.dry_run {
        scope_1893.boolean(*var_1894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1896) = &input.transit_gateway_route_table_id {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("PrefixListId");
    if let Some(var_1898) = &input.prefix_list_id {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("DryRun");
    if let Some(var_1900) = &input.dry_run {
        scope_1899.boolean(*var_1900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1902) = &input.transit_gateway_route_table_id {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1904) = &input.destination_cidr_block {
        scope_1903.string(var_1904);
    }
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("DryRun");
    if let Some(var_1906) = &input.dry_run {
        scope_1905.boolean(*var_1906);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1908) = &input.transit_gateway_route_table_id {
        scope_1907.string(var_1908);
    }
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("DryRun");
    if let Some(var_1910) = &input.dry_run {
        scope_1909.boolean(*var_1910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1912) = &input.transit_gateway_attachment_id {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("DryRun");
    if let Some(var_1914) = &input.dry_run {
        scope_1913.boolean(*var_1914);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("VolumeId");
    if let Some(var_1916) = &input.volume_id {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("DryRun");
    if let Some(var_1918) = &input.dry_run {
        scope_1917.boolean(*var_1918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("VpcId");
    if let Some(var_1920) = &input.vpc_id {
        scope_1919.string(var_1920);
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("DryRun");
    if let Some(var_1922) = &input.dry_run {
        scope_1921.boolean(*var_1922);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("DryRun");
    if let Some(var_1924) = &input.dry_run {
        scope_1923.boolean(*var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1926) = &input.connection_notification_ids {
        let mut list_1928 = scope_1925.start_list(true, Some("item"));
        for item_1927 in var_1926 {
            #[allow(unused_mut)]
            let mut entry_1929 = list_1928.entry();
            entry_1929.string(item_1927);
        }
        list_1928.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("DryRun");
    if let Some(var_1931) = &input.dry_run {
        scope_1930.boolean(*var_1931);
    }
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("VpcEndpointId");
    if let Some(var_1933) = &input.vpc_endpoint_ids {
        let mut list_1935 = scope_1932.start_list(true, Some("item"));
        for item_1934 in var_1933 {
            #[allow(unused_mut)]
            let mut entry_1936 = list_1935.entry();
            entry_1936.string(item_1934);
        }
        list_1935.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1937 = writer.prefix("DryRun");
    if let Some(var_1938) = &input.dry_run {
        scope_1937.boolean(*var_1938);
    }
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("ServiceId");
    if let Some(var_1940) = &input.service_ids {
        let mut list_1942 = scope_1939.start_list(true, Some("item"));
        for item_1941 in var_1940 {
            #[allow(unused_mut)]
            let mut entry_1943 = list_1942.entry();
            entry_1943.string(item_1941);
        }
        list_1942.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("DryRun");
    if let Some(var_1945) = &input.dry_run {
        scope_1944.boolean(*var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1947) = &input.vpc_peering_connection_id {
        scope_1946.string(var_1947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("VpnConnectionId");
    if let Some(var_1949) = &input.vpn_connection_id {
        scope_1948.string(var_1949);
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("DryRun");
    if let Some(var_1951) = &input.dry_run {
        scope_1950.boolean(*var_1951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1953) = &input.destination_cidr_block {
        scope_1952.string(var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("VpnConnectionId");
    if let Some(var_1955) = &input.vpn_connection_id {
        scope_1954.string(var_1955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("VpnGatewayId");
    if let Some(var_1957) = &input.vpn_gateway_id {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("DryRun");
    if let Some(var_1959) = &input.dry_run {
        scope_1958.boolean(*var_1959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("Cidr");
    if let Some(var_1961) = &input.cidr {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("DryRun");
    if let Some(var_1963) = &input.dry_run {
        scope_1962.boolean(*var_1963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("DryRun");
    if let Some(var_1965) = &input.dry_run {
        scope_1964.boolean(*var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("IpamPoolId");
    if let Some(var_1967) = &input.ipam_pool_id {
        scope_1966.string(var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("Cidr");
    if let Some(var_1969) = &input.cidr {
        scope_1968.string(var_1969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("DryRun");
    if let Some(var_1971) = &input.dry_run {
        scope_1970.boolean(*var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("PoolId");
    if let Some(var_1973) = &input.pool_id {
        scope_1972.string(var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("Cidr");
    if let Some(var_1975) = &input.cidr {
        scope_1974.string(var_1975);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("ImageId");
    if let Some(var_1977) = &input.image_id {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("DryRun");
    if let Some(var_1979) = &input.dry_run {
        scope_1978.boolean(*var_1979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("DryRun");
    if let Some(var_1981) = &input.dry_run {
        scope_1980.boolean(*var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1983) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1982, var_1983)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1985) = &input.transit_gateway_multicast_domain_id {
        scope_1984.string(var_1985);
    }
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("GroupIpAddress");
    if let Some(var_1987) = &input.group_ip_address {
        scope_1986.string(var_1987);
    }
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1989) = &input.network_interface_ids {
        let mut list_1991 = scope_1988.start_list(true, Some("item"));
        for item_1990 in var_1989 {
            #[allow(unused_mut)]
            let mut entry_1992 = list_1991.entry();
            entry_1992.string(item_1990);
        }
        list_1991.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("DryRun");
    if let Some(var_1994) = &input.dry_run {
        scope_1993.boolean(*var_1994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1996) = &input.transit_gateway_multicast_domain_id {
        scope_1995.string(var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("GroupIpAddress");
    if let Some(var_1998) = &input.group_ip_address {
        scope_1997.string(var_1998);
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2000) = &input.network_interface_ids {
        let mut list_2002 = scope_1999.start_list(true, Some("item"));
        for item_2001 in var_2000 {
            #[allow(unused_mut)]
            let mut entry_2003 = list_2002.entry();
            entry_2003.string(item_2001);
        }
        list_2002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2004 = writer.prefix("DryRun");
    if let Some(var_2005) = &input.dry_run {
        scope_2004.boolean(*var_2005);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("AttributeName");
    if let Some(var_2007) = &input.attribute_names {
        let mut list_2009 = scope_2006.start_list(true, Some("attributeName"));
        for item_2008 in var_2007 {
            #[allow(unused_mut)]
            let mut entry_2010 = list_2009.entry();
            entry_2010.string(item_2008.as_str());
        }
        list_2009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2011 = writer.prefix("DryRun");
    if let Some(var_2012) = &input.dry_run {
        scope_2011.boolean(*var_2012);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("Filter");
    if let Some(var_2014) = &input.filters {
        let mut list_2016 = scope_2013.start_list(true, Some("Filter"));
        for item_2015 in var_2014 {
            #[allow(unused_mut)]
            let mut entry_2017 = list_2016.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2017, item_2015)?;
        }
        list_2016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("PublicIp");
    if let Some(var_2019) = &input.public_ips {
        let mut list_2021 = scope_2018.start_list(true, Some("PublicIp"));
        for item_2020 in var_2019 {
            #[allow(unused_mut)]
            let mut entry_2022 = list_2021.entry();
            entry_2022.string(item_2020);
        }
        list_2021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("AllocationId");
    if let Some(var_2024) = &input.allocation_ids {
        let mut list_2026 = scope_2023.start_list(true, Some("AllocationId"));
        for item_2025 in var_2024 {
            #[allow(unused_mut)]
            let mut entry_2027 = list_2026.entry();
            entry_2027.string(item_2025);
        }
        list_2026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2028 = writer.prefix("DryRun");
    if let Some(var_2029) = &input.dry_run {
        scope_2028.boolean(*var_2029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("AllocationId");
    if let Some(var_2031) = &input.allocation_ids {
        let mut list_2033 = scope_2030.start_list(true, Some("item"));
        for item_2032 in var_2031 {
            #[allow(unused_mut)]
            let mut entry_2034 = list_2033.entry();
            entry_2034.string(item_2032);
        }
        list_2033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("Attribute");
    if let Some(var_2036) = &input.attribute {
        scope_2035.string(var_2036.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("NextToken");
    if let Some(var_2038) = &input.next_token {
        scope_2037.string(var_2038);
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("MaxResults");
    if let Some(var_2040) = &input.max_results {
        scope_2039.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2040).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("DryRun");
    if let Some(var_2042) = &input.dry_run {
        scope_2041.boolean(*var_2042);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("DryRun");
    if let Some(var_2044) = &input.dry_run {
        scope_2043.boolean(*var_2044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("Filter");
    if let Some(var_2046) = &input.filters {
        let mut list_2048 = scope_2045.start_list(true, Some("Filter"));
        for item_2047 in var_2046 {
            #[allow(unused_mut)]
            let mut entry_2049 = list_2048.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2049, item_2047)?;
        }
        list_2048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2050 = writer.prefix("ZoneName");
    if let Some(var_2051) = &input.zone_names {
        let mut list_2053 = scope_2050.start_list(true, Some("ZoneName"));
        for item_2052 in var_2051 {
            #[allow(unused_mut)]
            let mut entry_2054 = list_2053.entry();
            entry_2054.string(item_2052);
        }
        list_2053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("ZoneId");
    if let Some(var_2056) = &input.zone_ids {
        let mut list_2058 = scope_2055.start_list(true, Some("ZoneId"));
        for item_2057 in var_2056 {
            #[allow(unused_mut)]
            let mut entry_2059 = list_2058.entry();
            entry_2059.string(item_2057);
        }
        list_2058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2061) = &input.all_availability_zones {
        scope_2060.boolean(*var_2061);
    }
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("DryRun");
    if let Some(var_2063) = &input.dry_run {
        scope_2062.boolean(*var_2063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("BundleId");
    if let Some(var_2065) = &input.bundle_ids {
        let mut list_2067 = scope_2064.start_list(true, Some("BundleId"));
        for item_2066 in var_2065 {
            #[allow(unused_mut)]
            let mut entry_2068 = list_2067.entry();
            entry_2068.string(item_2066);
        }
        list_2067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2069 = writer.prefix("Filter");
    if let Some(var_2070) = &input.filters {
        let mut list_2072 = scope_2069.start_list(true, Some("Filter"));
        for item_2071 in var_2070 {
            #[allow(unused_mut)]
            let mut entry_2073 = list_2072.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2073, item_2071)?;
        }
        list_2072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2074 = writer.prefix("DryRun");
    if let Some(var_2075) = &input.dry_run {
        scope_2074.boolean(*var_2075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("DryRun");
    if let Some(var_2077) = &input.dry_run {
        scope_2076.boolean(*var_2077);
    }
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("MaxResults");
    if let Some(var_2079) = &input.max_results {
        scope_2078.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2079).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("NextToken");
    if let Some(var_2081) = &input.next_token {
        scope_2080.string(var_2081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2082 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2083) = &input.capacity_reservation_fleet_ids {
        let mut list_2085 = scope_2082.start_list(true, Some("item"));
        for item_2084 in var_2083 {
            #[allow(unused_mut)]
            let mut entry_2086 = list_2085.entry();
            entry_2086.string(item_2084);
        }
        list_2085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("NextToken");
    if let Some(var_2088) = &input.next_token {
        scope_2087.string(var_2088);
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("MaxResults");
    if let Some(var_2090) = &input.max_results {
        scope_2089.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2090).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("Filter");
    if let Some(var_2092) = &input.filters {
        let mut list_2094 = scope_2091.start_list(true, Some("Filter"));
        for item_2093 in var_2092 {
            #[allow(unused_mut)]
            let mut entry_2095 = list_2094.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2095, item_2093)?;
        }
        list_2094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("DryRun");
    if let Some(var_2097) = &input.dry_run {
        scope_2096.boolean(*var_2097);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("CapacityReservationId");
    if let Some(var_2099) = &input.capacity_reservation_ids {
        let mut list_2101 = scope_2098.start_list(true, Some("item"));
        for item_2100 in var_2099 {
            #[allow(unused_mut)]
            let mut entry_2102 = list_2101.entry();
            entry_2102.string(item_2100);
        }
        list_2101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("NextToken");
    if let Some(var_2104) = &input.next_token {
        scope_2103.string(var_2104);
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("MaxResults");
    if let Some(var_2106) = &input.max_results {
        scope_2105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("Filter");
    if let Some(var_2108) = &input.filters {
        let mut list_2110 = scope_2107.start_list(true, Some("Filter"));
        for item_2109 in var_2108 {
            #[allow(unused_mut)]
            let mut entry_2111 = list_2110.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2111, item_2109)?;
        }
        list_2110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("DryRun");
    if let Some(var_2113) = &input.dry_run {
        scope_2112.boolean(*var_2113);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("CarrierGatewayId");
    if let Some(var_2115) = &input.carrier_gateway_ids {
        let mut list_2117 = scope_2114.start_list(true, None);
        for item_2116 in var_2115 {
            #[allow(unused_mut)]
            let mut entry_2118 = list_2117.entry();
            entry_2118.string(item_2116);
        }
        list_2117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("Filter");
    if let Some(var_2120) = &input.filters {
        let mut list_2122 = scope_2119.start_list(true, Some("Filter"));
        for item_2121 in var_2120 {
            #[allow(unused_mut)]
            let mut entry_2123 = list_2122.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2123, item_2121)?;
        }
        list_2122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("MaxResults");
    if let Some(var_2125) = &input.max_results {
        scope_2124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("NextToken");
    if let Some(var_2127) = &input.next_token {
        scope_2126.string(var_2127);
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("DryRun");
    if let Some(var_2129) = &input.dry_run {
        scope_2128.boolean(*var_2129);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("Filter");
    if let Some(var_2131) = &input.filters {
        let mut list_2133 = scope_2130.start_list(true, Some("Filter"));
        for item_2132 in var_2131 {
            #[allow(unused_mut)]
            let mut entry_2134 = list_2133.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2134, item_2132)?;
        }
        list_2133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("DryRun");
    if let Some(var_2136) = &input.dry_run {
        scope_2135.boolean(*var_2136);
    }
    #[allow(unused_mut)]
    let mut scope_2137 = writer.prefix("InstanceId");
    if let Some(var_2138) = &input.instance_ids {
        let mut list_2140 = scope_2137.start_list(true, Some("InstanceId"));
        for item_2139 in var_2138 {
            #[allow(unused_mut)]
            let mut entry_2141 = list_2140.entry();
            entry_2141.string(item_2139);
        }
        list_2140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("MaxResults");
    if let Some(var_2143) = &input.max_results {
        scope_2142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("NextToken");
    if let Some(var_2145) = &input.next_token {
        scope_2144.string(var_2145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2147) = &input.client_vpn_endpoint_id {
        scope_2146.string(var_2147);
    }
    #[allow(unused_mut)]
    let mut scope_2148 = writer.prefix("DryRun");
    if let Some(var_2149) = &input.dry_run {
        scope_2148.boolean(*var_2149);
    }
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("NextToken");
    if let Some(var_2151) = &input.next_token {
        scope_2150.string(var_2151);
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("Filter");
    if let Some(var_2153) = &input.filters {
        let mut list_2155 = scope_2152.start_list(true, Some("Filter"));
        for item_2154 in var_2153 {
            #[allow(unused_mut)]
            let mut entry_2156 = list_2155.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2156, item_2154)?;
        }
        list_2155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("MaxResults");
    if let Some(var_2158) = &input.max_results {
        scope_2157.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2158).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2160) = &input.client_vpn_endpoint_id {
        scope_2159.string(var_2160);
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("Filter");
    if let Some(var_2162) = &input.filters {
        let mut list_2164 = scope_2161.start_list(true, Some("Filter"));
        for item_2163 in var_2162 {
            #[allow(unused_mut)]
            let mut entry_2165 = list_2164.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2165, item_2163)?;
        }
        list_2164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2166 = writer.prefix("NextToken");
    if let Some(var_2167) = &input.next_token {
        scope_2166.string(var_2167);
    }
    #[allow(unused_mut)]
    let mut scope_2168 = writer.prefix("MaxResults");
    if let Some(var_2169) = &input.max_results {
        scope_2168.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2170 = writer.prefix("DryRun");
    if let Some(var_2171) = &input.dry_run {
        scope_2170.boolean(*var_2171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2172 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2173) = &input.client_vpn_endpoint_ids {
        let mut list_2175 = scope_2172.start_list(true, Some("item"));
        for item_2174 in var_2173 {
            #[allow(unused_mut)]
            let mut entry_2176 = list_2175.entry();
            entry_2176.string(item_2174);
        }
        list_2175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("MaxResults");
    if let Some(var_2178) = &input.max_results {
        scope_2177.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("NextToken");
    if let Some(var_2180) = &input.next_token {
        scope_2179.string(var_2180);
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("Filter");
    if let Some(var_2182) = &input.filters {
        let mut list_2184 = scope_2181.start_list(true, Some("Filter"));
        for item_2183 in var_2182 {
            #[allow(unused_mut)]
            let mut entry_2185 = list_2184.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2185, item_2183)?;
        }
        list_2184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2186 = writer.prefix("DryRun");
    if let Some(var_2187) = &input.dry_run {
        scope_2186.boolean(*var_2187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2188 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2189) = &input.client_vpn_endpoint_id {
        scope_2188.string(var_2189);
    }
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("Filter");
    if let Some(var_2191) = &input.filters {
        let mut list_2193 = scope_2190.start_list(true, Some("Filter"));
        for item_2192 in var_2191 {
            #[allow(unused_mut)]
            let mut entry_2194 = list_2193.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2194, item_2192)?;
        }
        list_2193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2195 = writer.prefix("MaxResults");
    if let Some(var_2196) = &input.max_results {
        scope_2195.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2196).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2197 = writer.prefix("NextToken");
    if let Some(var_2198) = &input.next_token {
        scope_2197.string(var_2198);
    }
    #[allow(unused_mut)]
    let mut scope_2199 = writer.prefix("DryRun");
    if let Some(var_2200) = &input.dry_run {
        scope_2199.boolean(*var_2200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2202) = &input.client_vpn_endpoint_id {
        scope_2201.string(var_2202);
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("AssociationIds");
    if let Some(var_2204) = &input.association_ids {
        let mut list_2206 = scope_2203.start_list(true, Some("item"));
        for item_2205 in var_2204 {
            #[allow(unused_mut)]
            let mut entry_2207 = list_2206.entry();
            entry_2207.string(item_2205);
        }
        list_2206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2208 = writer.prefix("MaxResults");
    if let Some(var_2209) = &input.max_results {
        scope_2208.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2209).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2210 = writer.prefix("NextToken");
    if let Some(var_2211) = &input.next_token {
        scope_2210.string(var_2211);
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("Filter");
    if let Some(var_2213) = &input.filters {
        let mut list_2215 = scope_2212.start_list(true, Some("Filter"));
        for item_2214 in var_2213 {
            #[allow(unused_mut)]
            let mut entry_2216 = list_2215.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2216, item_2214)?;
        }
        list_2215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2217 = writer.prefix("DryRun");
    if let Some(var_2218) = &input.dry_run {
        scope_2217.boolean(*var_2218);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2219 = writer.prefix("PoolId");
    if let Some(var_2220) = &input.pool_ids {
        let mut list_2222 = scope_2219.start_list(true, Some("item"));
        for item_2221 in var_2220 {
            #[allow(unused_mut)]
            let mut entry_2223 = list_2222.entry();
            entry_2223.string(item_2221);
        }
        list_2222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("Filter");
    if let Some(var_2225) = &input.filters {
        let mut list_2227 = scope_2224.start_list(true, Some("Filter"));
        for item_2226 in var_2225 {
            #[allow(unused_mut)]
            let mut entry_2228 = list_2227.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2228, item_2226)?;
        }
        list_2227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("MaxResults");
    if let Some(var_2230) = &input.max_results {
        scope_2229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2230).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2231 = writer.prefix("NextToken");
    if let Some(var_2232) = &input.next_token {
        scope_2231.string(var_2232);
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("DryRun");
    if let Some(var_2234) = &input.dry_run {
        scope_2233.boolean(*var_2234);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2235 = writer.prefix("ConversionTaskId");
    if let Some(var_2236) = &input.conversion_task_ids {
        let mut list_2238 = scope_2235.start_list(true, Some("item"));
        for item_2237 in var_2236 {
            #[allow(unused_mut)]
            let mut entry_2239 = list_2238.entry();
            entry_2239.string(item_2237);
        }
        list_2238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("DryRun");
    if let Some(var_2241) = &input.dry_run {
        scope_2240.boolean(*var_2241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("CustomerGatewayId");
    if let Some(var_2243) = &input.customer_gateway_ids {
        let mut list_2245 = scope_2242.start_list(true, Some("CustomerGatewayId"));
        for item_2244 in var_2243 {
            #[allow(unused_mut)]
            let mut entry_2246 = list_2245.entry();
            entry_2246.string(item_2244);
        }
        list_2245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("Filter");
    if let Some(var_2248) = &input.filters {
        let mut list_2250 = scope_2247.start_list(true, Some("Filter"));
        for item_2249 in var_2248 {
            #[allow(unused_mut)]
            let mut entry_2251 = list_2250.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2251, item_2249)?;
        }
        list_2250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("DryRun");
    if let Some(var_2253) = &input.dry_run {
        scope_2252.boolean(*var_2253);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("DhcpOptionsId");
    if let Some(var_2255) = &input.dhcp_options_ids {
        let mut list_2257 = scope_2254.start_list(true, Some("DhcpOptionsId"));
        for item_2256 in var_2255 {
            #[allow(unused_mut)]
            let mut entry_2258 = list_2257.entry();
            entry_2258.string(item_2256);
        }
        list_2257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2259 = writer.prefix("Filter");
    if let Some(var_2260) = &input.filters {
        let mut list_2262 = scope_2259.start_list(true, Some("Filter"));
        for item_2261 in var_2260 {
            #[allow(unused_mut)]
            let mut entry_2263 = list_2262.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2263, item_2261)?;
        }
        list_2262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("DryRun");
    if let Some(var_2265) = &input.dry_run {
        scope_2264.boolean(*var_2265);
    }
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("NextToken");
    if let Some(var_2267) = &input.next_token {
        scope_2266.string(var_2267);
    }
    #[allow(unused_mut)]
    let mut scope_2268 = writer.prefix("MaxResults");
    if let Some(var_2269) = &input.max_results {
        scope_2268.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2269).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2270 = writer.prefix("DryRun");
    if let Some(var_2271) = &input.dry_run {
        scope_2270.boolean(*var_2271);
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2273) = &input.egress_only_internet_gateway_ids {
        let mut list_2275 = scope_2272.start_list(true, Some("item"));
        for item_2274 in var_2273 {
            #[allow(unused_mut)]
            let mut entry_2276 = list_2275.entry();
            entry_2276.string(item_2274);
        }
        list_2275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2277 = writer.prefix("MaxResults");
    if let Some(var_2278) = &input.max_results {
        scope_2277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2279 = writer.prefix("NextToken");
    if let Some(var_2280) = &input.next_token {
        scope_2279.string(var_2280);
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("Filter");
    if let Some(var_2282) = &input.filters {
        let mut list_2284 = scope_2281.start_list(true, Some("Filter"));
        for item_2283 in var_2282 {
            #[allow(unused_mut)]
            let mut entry_2285 = list_2284.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2285, item_2283)?;
        }
        list_2284.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2286 = writer.prefix("ElasticGpuId");
    if let Some(var_2287) = &input.elastic_gpu_ids {
        let mut list_2289 = scope_2286.start_list(true, Some("item"));
        for item_2288 in var_2287 {
            #[allow(unused_mut)]
            let mut entry_2290 = list_2289.entry();
            entry_2290.string(item_2288);
        }
        list_2289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("DryRun");
    if let Some(var_2292) = &input.dry_run {
        scope_2291.boolean(*var_2292);
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("Filter");
    if let Some(var_2294) = &input.filters {
        let mut list_2296 = scope_2293.start_list(true, Some("Filter"));
        for item_2295 in var_2294 {
            #[allow(unused_mut)]
            let mut entry_2297 = list_2296.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2297, item_2295)?;
        }
        list_2296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("MaxResults");
    if let Some(var_2299) = &input.max_results {
        scope_2298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("NextToken");
    if let Some(var_2301) = &input.next_token {
        scope_2300.string(var_2301);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("DryRun");
    if let Some(var_2303) = &input.dry_run {
        scope_2302.boolean(*var_2303);
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("Filter");
    if let Some(var_2305) = &input.filters {
        let mut list_2307 = scope_2304.start_list(true, Some("Filter"));
        for item_2306 in var_2305 {
            #[allow(unused_mut)]
            let mut entry_2308 = list_2307.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2308, item_2306)?;
        }
        list_2307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2309 = writer.prefix("ExportImageTaskId");
    if let Some(var_2310) = &input.export_image_task_ids {
        let mut list_2312 = scope_2309.start_list(true, Some("ExportImageTaskId"));
        for item_2311 in var_2310 {
            #[allow(unused_mut)]
            let mut entry_2313 = list_2312.entry();
            entry_2313.string(item_2311);
        }
        list_2312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("MaxResults");
    if let Some(var_2315) = &input.max_results {
        scope_2314.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2315).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("NextToken");
    if let Some(var_2317) = &input.next_token {
        scope_2316.string(var_2317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2318 = writer.prefix("ExportTaskId");
    if let Some(var_2319) = &input.export_task_ids {
        let mut list_2321 = scope_2318.start_list(true, Some("ExportTaskId"));
        for item_2320 in var_2319 {
            #[allow(unused_mut)]
            let mut entry_2322 = list_2321.entry();
            entry_2322.string(item_2320);
        }
        list_2321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("Filter");
    if let Some(var_2324) = &input.filters {
        let mut list_2326 = scope_2323.start_list(true, Some("Filter"));
        for item_2325 in var_2324 {
            #[allow(unused_mut)]
            let mut entry_2327 = list_2326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2327, item_2325)?;
        }
        list_2326.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2328 = writer.prefix("ImageId");
    if let Some(var_2329) = &input.image_ids {
        let mut list_2331 = scope_2328.start_list(true, Some("ImageId"));
        for item_2330 in var_2329 {
            #[allow(unused_mut)]
            let mut entry_2332 = list_2331.entry();
            entry_2332.string(item_2330);
        }
        list_2331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("Filter");
    if let Some(var_2334) = &input.filters {
        let mut list_2336 = scope_2333.start_list(true, Some("Filter"));
        for item_2335 in var_2334 {
            #[allow(unused_mut)]
            let mut entry_2337 = list_2336.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2337, item_2335)?;
        }
        list_2336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("MaxResults");
    if let Some(var_2339) = &input.max_results {
        scope_2338.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2339).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("NextToken");
    if let Some(var_2341) = &input.next_token {
        scope_2340.string(var_2341);
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("DryRun");
    if let Some(var_2343) = &input.dry_run {
        scope_2342.boolean(*var_2343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("Filter");
    if let Some(var_2345) = &input.filters {
        let mut list_2347 = scope_2344.start_list(true, Some("Filter"));
        for item_2346 in var_2345 {
            #[allow(unused_mut)]
            let mut entry_2348 = list_2347.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2348, item_2346)?;
        }
        list_2347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("MaxResults");
    if let Some(var_2350) = &input.max_results {
        scope_2349.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2350).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("NextToken");
    if let Some(var_2352) = &input.next_token {
        scope_2351.string(var_2352);
    }
    #[allow(unused_mut)]
    let mut scope_2353 = writer.prefix("DryRun");
    if let Some(var_2354) = &input.dry_run {
        scope_2353.boolean(*var_2354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("DryRun");
    if let Some(var_2356) = &input.dry_run {
        scope_2355.boolean(*var_2356);
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("EventType");
    if let Some(var_2358) = &input.event_type {
        scope_2357.string(var_2358.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("MaxResults");
    if let Some(var_2360) = &input.max_results {
        scope_2359.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2360).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("NextToken");
    if let Some(var_2362) = &input.next_token {
        scope_2361.string(var_2362);
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("FleetId");
    if let Some(var_2364) = &input.fleet_id {
        scope_2363.string(var_2364);
    }
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("StartTime");
    if let Some(var_2366) = &input.start_time {
        scope_2365.date_time(var_2366, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2367 = writer.prefix("DryRun");
    if let Some(var_2368) = &input.dry_run {
        scope_2367.boolean(*var_2368);
    }
    #[allow(unused_mut)]
    let mut scope_2369 = writer.prefix("MaxResults");
    if let Some(var_2370) = &input.max_results {
        scope_2369.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2370).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2371 = writer.prefix("NextToken");
    if let Some(var_2372) = &input.next_token {
        scope_2371.string(var_2372);
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("FleetId");
    if let Some(var_2374) = &input.fleet_id {
        scope_2373.string(var_2374);
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("Filter");
    if let Some(var_2376) = &input.filters {
        let mut list_2378 = scope_2375.start_list(true, Some("Filter"));
        for item_2377 in var_2376 {
            #[allow(unused_mut)]
            let mut entry_2379 = list_2378.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2379, item_2377)?;
        }
        list_2378.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("DryRun");
    if let Some(var_2381) = &input.dry_run {
        scope_2380.boolean(*var_2381);
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("MaxResults");
    if let Some(var_2383) = &input.max_results {
        scope_2382.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2383).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("NextToken");
    if let Some(var_2385) = &input.next_token {
        scope_2384.string(var_2385);
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("FleetId");
    if let Some(var_2387) = &input.fleet_ids {
        let mut list_2389 = scope_2386.start_list(true, None);
        for item_2388 in var_2387 {
            #[allow(unused_mut)]
            let mut entry_2390 = list_2389.entry();
            entry_2390.string(item_2388);
        }
        list_2389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2391 = writer.prefix("Filter");
    if let Some(var_2392) = &input.filters {
        let mut list_2394 = scope_2391.start_list(true, Some("Filter"));
        for item_2393 in var_2392 {
            #[allow(unused_mut)]
            let mut entry_2395 = list_2394.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2395, item_2393)?;
        }
        list_2394.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("DryRun");
    if let Some(var_2397) = &input.dry_run {
        scope_2396.boolean(*var_2397);
    }
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("Filter");
    if let Some(var_2399) = &input.filter {
        let mut list_2401 = scope_2398.start_list(true, Some("Filter"));
        for item_2400 in var_2399 {
            #[allow(unused_mut)]
            let mut entry_2402 = list_2401.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2402, item_2400)?;
        }
        list_2401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("FlowLogId");
    if let Some(var_2404) = &input.flow_log_ids {
        let mut list_2406 = scope_2403.start_list(true, Some("item"));
        for item_2405 in var_2404 {
            #[allow(unused_mut)]
            let mut entry_2407 = list_2406.entry();
            entry_2407.string(item_2405);
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("MaxResults");
    if let Some(var_2409) = &input.max_results {
        scope_2408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("NextToken");
    if let Some(var_2411) = &input.next_token {
        scope_2410.string(var_2411);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("DryRun");
    if let Some(var_2413) = &input.dry_run {
        scope_2412.boolean(*var_2413);
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("FpgaImageId");
    if let Some(var_2415) = &input.fpga_image_id {
        scope_2414.string(var_2415);
    }
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("Attribute");
    if let Some(var_2417) = &input.attribute {
        scope_2416.string(var_2417.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("DryRun");
    if let Some(var_2419) = &input.dry_run {
        scope_2418.boolean(*var_2419);
    }
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("FpgaImageId");
    if let Some(var_2421) = &input.fpga_image_ids {
        let mut list_2423 = scope_2420.start_list(true, Some("item"));
        for item_2422 in var_2421 {
            #[allow(unused_mut)]
            let mut entry_2424 = list_2423.entry();
            entry_2424.string(item_2422);
        }
        list_2423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2425 = writer.prefix("Owner");
    if let Some(var_2426) = &input.owners {
        let mut list_2428 = scope_2425.start_list(true, Some("Owner"));
        for item_2427 in var_2426 {
            #[allow(unused_mut)]
            let mut entry_2429 = list_2428.entry();
            entry_2429.string(item_2427);
        }
        list_2428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("Filter");
    if let Some(var_2431) = &input.filters {
        let mut list_2433 = scope_2430.start_list(true, Some("Filter"));
        for item_2432 in var_2431 {
            #[allow(unused_mut)]
            let mut entry_2434 = list_2433.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2434, item_2432)?;
        }
        list_2433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("NextToken");
    if let Some(var_2436) = &input.next_token {
        scope_2435.string(var_2436);
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("MaxResults");
    if let Some(var_2438) = &input.max_results {
        scope_2437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2438).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("Filter");
    if let Some(var_2440) = &input.filter {
        let mut list_2442 = scope_2439.start_list(true, Some("Filter"));
        for item_2441 in var_2440 {
            #[allow(unused_mut)]
            let mut entry_2443 = list_2442.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2443, item_2441)?;
        }
        list_2442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("MaxDuration");
    if let Some(var_2445) = &input.max_duration {
        scope_2444.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2445).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("MaxResults");
    if let Some(var_2447) = &input.max_results {
        scope_2446.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2447).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("MinDuration");
    if let Some(var_2449) = &input.min_duration {
        scope_2448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("NextToken");
    if let Some(var_2451) = &input.next_token {
        scope_2450.string(var_2451);
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("OfferingId");
    if let Some(var_2453) = &input.offering_id {
        scope_2452.string(var_2453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("Filter");
    if let Some(var_2455) = &input.filter {
        let mut list_2457 = scope_2454.start_list(true, Some("Filter"));
        for item_2456 in var_2455 {
            #[allow(unused_mut)]
            let mut entry_2458 = list_2457.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2458, item_2456)?;
        }
        list_2457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("HostReservationIdSet");
    if let Some(var_2460) = &input.host_reservation_id_set {
        let mut list_2462 = scope_2459.start_list(true, Some("item"));
        for item_2461 in var_2460 {
            #[allow(unused_mut)]
            let mut entry_2463 = list_2462.entry();
            entry_2463.string(item_2461);
        }
        list_2462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2464 = writer.prefix("MaxResults");
    if let Some(var_2465) = &input.max_results {
        scope_2464.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2465).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2466 = writer.prefix("NextToken");
    if let Some(var_2467) = &input.next_token {
        scope_2466.string(var_2467);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2468 = writer.prefix("Filter");
    if let Some(var_2469) = &input.filter {
        let mut list_2471 = scope_2468.start_list(true, Some("Filter"));
        for item_2470 in var_2469 {
            #[allow(unused_mut)]
            let mut entry_2472 = list_2471.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2472, item_2470)?;
        }
        list_2471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("HostId");
    if let Some(var_2474) = &input.host_ids {
        let mut list_2476 = scope_2473.start_list(true, Some("item"));
        for item_2475 in var_2474 {
            #[allow(unused_mut)]
            let mut entry_2477 = list_2476.entry();
            entry_2477.string(item_2475);
        }
        list_2476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2478 = writer.prefix("MaxResults");
    if let Some(var_2479) = &input.max_results {
        scope_2478.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2479).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2480 = writer.prefix("NextToken");
    if let Some(var_2481) = &input.next_token {
        scope_2480.string(var_2481);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("AssociationId");
    if let Some(var_2483) = &input.association_ids {
        let mut list_2485 = scope_2482.start_list(true, Some("AssociationId"));
        for item_2484 in var_2483 {
            #[allow(unused_mut)]
            let mut entry_2486 = list_2485.entry();
            entry_2486.string(item_2484);
        }
        list_2485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("Filter");
    if let Some(var_2488) = &input.filters {
        let mut list_2490 = scope_2487.start_list(true, Some("Filter"));
        for item_2489 in var_2488 {
            #[allow(unused_mut)]
            let mut entry_2491 = list_2490.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2491, item_2489)?;
        }
        list_2490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2492 = writer.prefix("MaxResults");
    if let Some(var_2493) = &input.max_results {
        scope_2492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("NextToken");
    if let Some(var_2495) = &input.next_token {
        scope_2494.string(var_2495);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("PrincipalArn");
    if let Some(var_2497) = &input.principal_arn {
        scope_2496.string(var_2497);
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("Resource");
    if let Some(var_2499) = &input.resource {
        scope_2498.string(var_2499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("Resource");
    if let Some(var_2501) = &input.resource {
        scope_2500.string(var_2501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("Attribute");
    if let Some(var_2503) = &input.attribute {
        scope_2502.string(var_2503.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("ImageId");
    if let Some(var_2505) = &input.image_id {
        scope_2504.string(var_2505);
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("DryRun");
    if let Some(var_2507) = &input.dry_run {
        scope_2506.boolean(*var_2507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("ExecutableBy");
    if let Some(var_2509) = &input.executable_users {
        let mut list_2511 = scope_2508.start_list(true, Some("ExecutableBy"));
        for item_2510 in var_2509 {
            #[allow(unused_mut)]
            let mut entry_2512 = list_2511.entry();
            entry_2512.string(item_2510);
        }
        list_2511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("Filter");
    if let Some(var_2514) = &input.filters {
        let mut list_2516 = scope_2513.start_list(true, Some("Filter"));
        for item_2515 in var_2514 {
            #[allow(unused_mut)]
            let mut entry_2517 = list_2516.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2517, item_2515)?;
        }
        list_2516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2518 = writer.prefix("ImageId");
    if let Some(var_2519) = &input.image_ids {
        let mut list_2521 = scope_2518.start_list(true, Some("ImageId"));
        for item_2520 in var_2519 {
            #[allow(unused_mut)]
            let mut entry_2522 = list_2521.entry();
            entry_2522.string(item_2520);
        }
        list_2521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("Owner");
    if let Some(var_2524) = &input.owners {
        let mut list_2526 = scope_2523.start_list(true, Some("Owner"));
        for item_2525 in var_2524 {
            #[allow(unused_mut)]
            let mut entry_2527 = list_2526.entry();
            entry_2527.string(item_2525);
        }
        list_2526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("IncludeDeprecated");
    if let Some(var_2529) = &input.include_deprecated {
        scope_2528.boolean(*var_2529);
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("DryRun");
    if let Some(var_2531) = &input.dry_run {
        scope_2530.boolean(*var_2531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("DryRun");
    if let Some(var_2533) = &input.dry_run {
        scope_2532.boolean(*var_2533);
    }
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("Filters");
    if let Some(var_2535) = &input.filters {
        let mut list_2537 = scope_2534.start_list(true, Some("Filter"));
        for item_2536 in var_2535 {
            #[allow(unused_mut)]
            let mut entry_2538 = list_2537.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2538, item_2536)?;
        }
        list_2537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2539 = writer.prefix("ImportTaskId");
    if let Some(var_2540) = &input.import_task_ids {
        let mut list_2542 = scope_2539.start_list(true, Some("ImportTaskId"));
        for item_2541 in var_2540 {
            #[allow(unused_mut)]
            let mut entry_2543 = list_2542.entry();
            entry_2543.string(item_2541);
        }
        list_2542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2544 = writer.prefix("MaxResults");
    if let Some(var_2545) = &input.max_results {
        scope_2544.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("NextToken");
    if let Some(var_2547) = &input.next_token {
        scope_2546.string(var_2547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("DryRun");
    if let Some(var_2549) = &input.dry_run {
        scope_2548.boolean(*var_2549);
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("Filters");
    if let Some(var_2551) = &input.filters {
        let mut list_2553 = scope_2550.start_list(true, Some("Filter"));
        for item_2552 in var_2551 {
            #[allow(unused_mut)]
            let mut entry_2554 = list_2553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2554, item_2552)?;
        }
        list_2553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("ImportTaskId");
    if let Some(var_2556) = &input.import_task_ids {
        let mut list_2558 = scope_2555.start_list(true, Some("ImportTaskId"));
        for item_2557 in var_2556 {
            #[allow(unused_mut)]
            let mut entry_2559 = list_2558.entry();
            entry_2559.string(item_2557);
        }
        list_2558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("MaxResults");
    if let Some(var_2561) = &input.max_results {
        scope_2560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("NextToken");
    if let Some(var_2563) = &input.next_token {
        scope_2562.string(var_2563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("Attribute");
    if let Some(var_2565) = &input.attribute {
        scope_2564.string(var_2565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("DryRun");
    if let Some(var_2567) = &input.dry_run {
        scope_2566.boolean(*var_2567);
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("InstanceId");
    if let Some(var_2569) = &input.instance_id {
        scope_2568.string(var_2569);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("DryRun");
    if let Some(var_2571) = &input.dry_run {
        scope_2570.boolean(*var_2571);
    }
    #[allow(unused_mut)]
    let mut scope_2572 = writer.prefix("Filter");
    if let Some(var_2573) = &input.filters {
        let mut list_2575 = scope_2572.start_list(true, Some("Filter"));
        for item_2574 in var_2573 {
            #[allow(unused_mut)]
            let mut entry_2576 = list_2575.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2576, item_2574)?;
        }
        list_2575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2577 = writer.prefix("InstanceId");
    if let Some(var_2578) = &input.instance_ids {
        let mut list_2580 = scope_2577.start_list(true, Some("InstanceId"));
        for item_2579 in var_2578 {
            #[allow(unused_mut)]
            let mut entry_2581 = list_2580.entry();
            entry_2581.string(item_2579);
        }
        list_2580.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2582 = writer.prefix("MaxResults");
    if let Some(var_2583) = &input.max_results {
        scope_2582.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2583).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2584 = writer.prefix("NextToken");
    if let Some(var_2585) = &input.next_token {
        scope_2584.string(var_2585);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2586 = writer.prefix("DryRun");
    if let Some(var_2587) = &input.dry_run {
        scope_2586.boolean(*var_2587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2588 = writer.prefix("DryRun");
    if let Some(var_2589) = &input.dry_run {
        scope_2588.boolean(*var_2589);
    }
    #[allow(unused_mut)]
    let mut scope_2590 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2591) = &input.instance_event_window_ids {
        let mut list_2593 = scope_2590.start_list(true, Some("InstanceEventWindowId"));
        for item_2592 in var_2591 {
            #[allow(unused_mut)]
            let mut entry_2594 = list_2593.entry();
            entry_2594.string(item_2592);
        }
        list_2593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2595 = writer.prefix("Filter");
    if let Some(var_2596) = &input.filters {
        let mut list_2598 = scope_2595.start_list(true, Some("Filter"));
        for item_2597 in var_2596 {
            #[allow(unused_mut)]
            let mut entry_2599 = list_2598.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2599, item_2597)?;
        }
        list_2598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2600 = writer.prefix("MaxResults");
    if let Some(var_2601) = &input.max_results {
        scope_2600.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2602 = writer.prefix("NextToken");
    if let Some(var_2603) = &input.next_token {
        scope_2602.string(var_2603);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2604 = writer.prefix("Filter");
    if let Some(var_2605) = &input.filters {
        let mut list_2607 = scope_2604.start_list(true, Some("Filter"));
        for item_2606 in var_2605 {
            #[allow(unused_mut)]
            let mut entry_2608 = list_2607.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2608, item_2606)?;
        }
        list_2607.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2609 = writer.prefix("InstanceId");
    if let Some(var_2610) = &input.instance_ids {
        let mut list_2612 = scope_2609.start_list(true, Some("InstanceId"));
        for item_2611 in var_2610 {
            #[allow(unused_mut)]
            let mut entry_2613 = list_2612.entry();
            entry_2613.string(item_2611);
        }
        list_2612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("DryRun");
    if let Some(var_2615) = &input.dry_run {
        scope_2614.boolean(*var_2615);
    }
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("MaxResults");
    if let Some(var_2617) = &input.max_results {
        scope_2616.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2617).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("NextToken");
    if let Some(var_2619) = &input.next_token {
        scope_2618.string(var_2619);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("Filter");
    if let Some(var_2621) = &input.filters {
        let mut list_2623 = scope_2620.start_list(true, Some("Filter"));
        for item_2622 in var_2621 {
            #[allow(unused_mut)]
            let mut entry_2624 = list_2623.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2624, item_2622)?;
        }
        list_2623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("InstanceId");
    if let Some(var_2626) = &input.instance_ids {
        let mut list_2628 = scope_2625.start_list(true, Some("InstanceId"));
        for item_2627 in var_2626 {
            #[allow(unused_mut)]
            let mut entry_2629 = list_2628.entry();
            entry_2629.string(item_2627);
        }
        list_2628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2630 = writer.prefix("MaxResults");
    if let Some(var_2631) = &input.max_results {
        scope_2630.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2631).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2632 = writer.prefix("NextToken");
    if let Some(var_2633) = &input.next_token {
        scope_2632.string(var_2633);
    }
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("DryRun");
    if let Some(var_2635) = &input.dry_run {
        scope_2634.boolean(*var_2635);
    }
    #[allow(unused_mut)]
    let mut scope_2636 = writer.prefix("IncludeAllInstances");
    if let Some(var_2637) = &input.include_all_instances {
        scope_2636.boolean(*var_2637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2638 = writer.prefix("DryRun");
    if let Some(var_2639) = &input.dry_run {
        scope_2638.boolean(*var_2639);
    }
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("LocationType");
    if let Some(var_2641) = &input.location_type {
        scope_2640.string(var_2641.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("Filter");
    if let Some(var_2643) = &input.filters {
        let mut list_2645 = scope_2642.start_list(true, Some("Filter"));
        for item_2644 in var_2643 {
            #[allow(unused_mut)]
            let mut entry_2646 = list_2645.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2646, item_2644)?;
        }
        list_2645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("MaxResults");
    if let Some(var_2648) = &input.max_results {
        scope_2647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("NextToken");
    if let Some(var_2650) = &input.next_token {
        scope_2649.string(var_2650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("DryRun");
    if let Some(var_2652) = &input.dry_run {
        scope_2651.boolean(*var_2652);
    }
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("InstanceType");
    if let Some(var_2654) = &input.instance_types {
        let mut list_2656 = scope_2653.start_list(true, None);
        for item_2655 in var_2654 {
            #[allow(unused_mut)]
            let mut entry_2657 = list_2656.entry();
            entry_2657.string(item_2655.as_str());
        }
        list_2656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2658 = writer.prefix("Filter");
    if let Some(var_2659) = &input.filters {
        let mut list_2661 = scope_2658.start_list(true, Some("Filter"));
        for item_2660 in var_2659 {
            #[allow(unused_mut)]
            let mut entry_2662 = list_2661.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2662, item_2660)?;
        }
        list_2661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("MaxResults");
    if let Some(var_2664) = &input.max_results {
        scope_2663.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2664).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2665 = writer.prefix("NextToken");
    if let Some(var_2666) = &input.next_token {
        scope_2665.string(var_2666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("Filter");
    if let Some(var_2668) = &input.filters {
        let mut list_2670 = scope_2667.start_list(true, Some("Filter"));
        for item_2669 in var_2668 {
            #[allow(unused_mut)]
            let mut entry_2671 = list_2670.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2671, item_2669)?;
        }
        list_2670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("DryRun");
    if let Some(var_2673) = &input.dry_run {
        scope_2672.boolean(*var_2673);
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("InternetGatewayId");
    if let Some(var_2675) = &input.internet_gateway_ids {
        let mut list_2677 = scope_2674.start_list(true, Some("item"));
        for item_2676 in var_2675 {
            #[allow(unused_mut)]
            let mut entry_2678 = list_2677.entry();
            entry_2678.string(item_2676);
        }
        list_2677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2679 = writer.prefix("NextToken");
    if let Some(var_2680) = &input.next_token {
        scope_2679.string(var_2680);
    }
    #[allow(unused_mut)]
    let mut scope_2681 = writer.prefix("MaxResults");
    if let Some(var_2682) = &input.max_results {
        scope_2681.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2682).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2683 = writer.prefix("DryRun");
    if let Some(var_2684) = &input.dry_run {
        scope_2683.boolean(*var_2684);
    }
    #[allow(unused_mut)]
    let mut scope_2685 = writer.prefix("Filter");
    if let Some(var_2686) = &input.filters {
        let mut list_2688 = scope_2685.start_list(true, Some("Filter"));
        for item_2687 in var_2686 {
            #[allow(unused_mut)]
            let mut entry_2689 = list_2688.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2689, item_2687)?;
        }
        list_2688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2690 = writer.prefix("MaxResults");
    if let Some(var_2691) = &input.max_results {
        scope_2690.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2691).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("NextToken");
    if let Some(var_2693) = &input.next_token {
        scope_2692.string(var_2693);
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("IpamPoolId");
    if let Some(var_2695) = &input.ipam_pool_ids {
        let mut list_2697 = scope_2694.start_list(true, Some("item"));
        for item_2696 in var_2695 {
            #[allow(unused_mut)]
            let mut entry_2698 = list_2697.entry();
            entry_2698.string(item_2696);
        }
        list_2697.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2699 = writer.prefix("DryRun");
    if let Some(var_2700) = &input.dry_run {
        scope_2699.boolean(*var_2700);
    }
    #[allow(unused_mut)]
    let mut scope_2701 = writer.prefix("Filter");
    if let Some(var_2702) = &input.filters {
        let mut list_2704 = scope_2701.start_list(true, Some("Filter"));
        for item_2703 in var_2702 {
            #[allow(unused_mut)]
            let mut entry_2705 = list_2704.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2705, item_2703)?;
        }
        list_2704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("MaxResults");
    if let Some(var_2707) = &input.max_results {
        scope_2706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2708 = writer.prefix("NextToken");
    if let Some(var_2709) = &input.next_token {
        scope_2708.string(var_2709);
    }
    #[allow(unused_mut)]
    let mut scope_2710 = writer.prefix("IpamId");
    if let Some(var_2711) = &input.ipam_ids {
        let mut list_2713 = scope_2710.start_list(true, Some("item"));
        for item_2712 in var_2711 {
            #[allow(unused_mut)]
            let mut entry_2714 = list_2713.entry();
            entry_2714.string(item_2712);
        }
        list_2713.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("DryRun");
    if let Some(var_2716) = &input.dry_run {
        scope_2715.boolean(*var_2716);
    }
    #[allow(unused_mut)]
    let mut scope_2717 = writer.prefix("Filter");
    if let Some(var_2718) = &input.filters {
        let mut list_2720 = scope_2717.start_list(true, Some("Filter"));
        for item_2719 in var_2718 {
            #[allow(unused_mut)]
            let mut entry_2721 = list_2720.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2721, item_2719)?;
        }
        list_2720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("MaxResults");
    if let Some(var_2723) = &input.max_results {
        scope_2722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("NextToken");
    if let Some(var_2725) = &input.next_token {
        scope_2724.string(var_2725);
    }
    #[allow(unused_mut)]
    let mut scope_2726 = writer.prefix("IpamScopeId");
    if let Some(var_2727) = &input.ipam_scope_ids {
        let mut list_2729 = scope_2726.start_list(true, Some("item"));
        for item_2728 in var_2727 {
            #[allow(unused_mut)]
            let mut entry_2730 = list_2729.entry();
            entry_2730.string(item_2728);
        }
        list_2729.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("PoolId");
    if let Some(var_2732) = &input.pool_ids {
        let mut list_2734 = scope_2731.start_list(true, Some("item"));
        for item_2733 in var_2732 {
            #[allow(unused_mut)]
            let mut entry_2735 = list_2734.entry();
            entry_2735.string(item_2733);
        }
        list_2734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("NextToken");
    if let Some(var_2737) = &input.next_token {
        scope_2736.string(var_2737);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("MaxResults");
    if let Some(var_2739) = &input.max_results {
        scope_2738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("DryRun");
    if let Some(var_2741) = &input.dry_run {
        scope_2740.boolean(*var_2741);
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("Filter");
    if let Some(var_2743) = &input.filters {
        let mut list_2745 = scope_2742.start_list(true, Some("Filter"));
        for item_2744 in var_2743 {
            #[allow(unused_mut)]
            let mut entry_2746 = list_2745.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2746, item_2744)?;
        }
        list_2745.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("Filter");
    if let Some(var_2748) = &input.filters {
        let mut list_2750 = scope_2747.start_list(true, Some("Filter"));
        for item_2749 in var_2748 {
            #[allow(unused_mut)]
            let mut entry_2751 = list_2750.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2751, item_2749)?;
        }
        list_2750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2752 = writer.prefix("KeyName");
    if let Some(var_2753) = &input.key_names {
        let mut list_2755 = scope_2752.start_list(true, Some("KeyName"));
        for item_2754 in var_2753 {
            #[allow(unused_mut)]
            let mut entry_2756 = list_2755.entry();
            entry_2756.string(item_2754);
        }
        list_2755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2757 = writer.prefix("KeyPairId");
    if let Some(var_2758) = &input.key_pair_ids {
        let mut list_2760 = scope_2757.start_list(true, Some("KeyPairId"));
        for item_2759 in var_2758 {
            #[allow(unused_mut)]
            let mut entry_2761 = list_2760.entry();
            entry_2761.string(item_2759);
        }
        list_2760.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2762 = writer.prefix("DryRun");
    if let Some(var_2763) = &input.dry_run {
        scope_2762.boolean(*var_2763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2764 = writer.prefix("DryRun");
    if let Some(var_2765) = &input.dry_run {
        scope_2764.boolean(*var_2765);
    }
    #[allow(unused_mut)]
    let mut scope_2766 = writer.prefix("LaunchTemplateId");
    if let Some(var_2767) = &input.launch_template_ids {
        let mut list_2769 = scope_2766.start_list(true, Some("item"));
        for item_2768 in var_2767 {
            #[allow(unused_mut)]
            let mut entry_2770 = list_2769.entry();
            entry_2770.string(item_2768);
        }
        list_2769.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("LaunchTemplateName");
    if let Some(var_2772) = &input.launch_template_names {
        let mut list_2774 = scope_2771.start_list(true, Some("item"));
        for item_2773 in var_2772 {
            #[allow(unused_mut)]
            let mut entry_2775 = list_2774.entry();
            entry_2775.string(item_2773);
        }
        list_2774.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2776 = writer.prefix("Filter");
    if let Some(var_2777) = &input.filters {
        let mut list_2779 = scope_2776.start_list(true, Some("Filter"));
        for item_2778 in var_2777 {
            #[allow(unused_mut)]
            let mut entry_2780 = list_2779.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2780, item_2778)?;
        }
        list_2779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("NextToken");
    if let Some(var_2782) = &input.next_token {
        scope_2781.string(var_2782);
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("MaxResults");
    if let Some(var_2784) = &input.max_results {
        scope_2783.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2784).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("DryRun");
    if let Some(var_2786) = &input.dry_run {
        scope_2785.boolean(*var_2786);
    }
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("LaunchTemplateId");
    if let Some(var_2788) = &input.launch_template_id {
        scope_2787.string(var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("LaunchTemplateName");
    if let Some(var_2790) = &input.launch_template_name {
        scope_2789.string(var_2790);
    }
    #[allow(unused_mut)]
    let mut scope_2791 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2792) = &input.versions {
        let mut list_2794 = scope_2791.start_list(true, Some("item"));
        for item_2793 in var_2792 {
            #[allow(unused_mut)]
            let mut entry_2795 = list_2794.entry();
            entry_2795.string(item_2793);
        }
        list_2794.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("MinVersion");
    if let Some(var_2797) = &input.min_version {
        scope_2796.string(var_2797);
    }
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("MaxVersion");
    if let Some(var_2799) = &input.max_version {
        scope_2798.string(var_2799);
    }
    #[allow(unused_mut)]
    let mut scope_2800 = writer.prefix("NextToken");
    if let Some(var_2801) = &input.next_token {
        scope_2800.string(var_2801);
    }
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("MaxResults");
    if let Some(var_2803) = &input.max_results {
        scope_2802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2803).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("Filter");
    if let Some(var_2805) = &input.filters {
        let mut list_2807 = scope_2804.start_list(true, Some("Filter"));
        for item_2806 in var_2805 {
            #[allow(unused_mut)]
            let mut entry_2808 = list_2807.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2808, item_2806)?;
        }
        list_2807.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2809 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2810) = &input.local_gateway_route_table_ids {
        let mut list_2812 = scope_2809.start_list(true, Some("item"));
        for item_2811 in var_2810 {
            #[allow(unused_mut)]
            let mut entry_2813 = list_2812.entry();
            entry_2813.string(item_2811);
        }
        list_2812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("Filter");
    if let Some(var_2815) = &input.filters {
        let mut list_2817 = scope_2814.start_list(true, Some("Filter"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2818, item_2816)?;
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("MaxResults");
    if let Some(var_2820) = &input.max_results {
        scope_2819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2820).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("NextToken");
    if let Some(var_2822) = &input.next_token {
        scope_2821.string(var_2822);
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("DryRun");
    if let Some(var_2824) = &input.dry_run {
        scope_2823.boolean(*var_2824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2826) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2828 = scope_2825.start_list(true, Some("item"));
        for item_2827 in var_2826 {
            #[allow(unused_mut)]
            let mut entry_2829 = list_2828.entry();
            entry_2829.string(item_2827);
        }
        list_2828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2830 = writer.prefix("Filter");
    if let Some(var_2831) = &input.filters {
        let mut list_2833 = scope_2830.start_list(true, Some("Filter"));
        for item_2832 in var_2831 {
            #[allow(unused_mut)]
            let mut entry_2834 = list_2833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2834, item_2832)?;
        }
        list_2833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("MaxResults");
    if let Some(var_2836) = &input.max_results {
        scope_2835.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2836).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2837 = writer.prefix("NextToken");
    if let Some(var_2838) = &input.next_token {
        scope_2837.string(var_2838);
    }
    #[allow(unused_mut)]
    let mut scope_2839 = writer.prefix("DryRun");
    if let Some(var_2840) = &input.dry_run {
        scope_2839.boolean(*var_2840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2841 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2842) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2844 = scope_2841.start_list(true, Some("item"));
        for item_2843 in var_2842 {
            #[allow(unused_mut)]
            let mut entry_2845 = list_2844.entry();
            entry_2845.string(item_2843);
        }
        list_2844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2846 = writer.prefix("Filter");
    if let Some(var_2847) = &input.filters {
        let mut list_2849 = scope_2846.start_list(true, Some("Filter"));
        for item_2848 in var_2847 {
            #[allow(unused_mut)]
            let mut entry_2850 = list_2849.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2850, item_2848)?;
        }
        list_2849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("MaxResults");
    if let Some(var_2852) = &input.max_results {
        scope_2851.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2853 = writer.prefix("NextToken");
    if let Some(var_2854) = &input.next_token {
        scope_2853.string(var_2854);
    }
    #[allow(unused_mut)]
    let mut scope_2855 = writer.prefix("DryRun");
    if let Some(var_2856) = &input.dry_run {
        scope_2855.boolean(*var_2856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2857 = writer.prefix("LocalGatewayId");
    if let Some(var_2858) = &input.local_gateway_ids {
        let mut list_2860 = scope_2857.start_list(true, Some("item"));
        for item_2859 in var_2858 {
            #[allow(unused_mut)]
            let mut entry_2861 = list_2860.entry();
            entry_2861.string(item_2859);
        }
        list_2860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2862 = writer.prefix("Filter");
    if let Some(var_2863) = &input.filters {
        let mut list_2865 = scope_2862.start_list(true, Some("Filter"));
        for item_2864 in var_2863 {
            #[allow(unused_mut)]
            let mut entry_2866 = list_2865.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2866, item_2864)?;
        }
        list_2865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2867 = writer.prefix("MaxResults");
    if let Some(var_2868) = &input.max_results {
        scope_2867.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2868).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2869 = writer.prefix("NextToken");
    if let Some(var_2870) = &input.next_token {
        scope_2869.string(var_2870);
    }
    #[allow(unused_mut)]
    let mut scope_2871 = writer.prefix("DryRun");
    if let Some(var_2872) = &input.dry_run {
        scope_2871.boolean(*var_2872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2874) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2876 = scope_2873.start_list(true, Some("item"));
        for item_2875 in var_2874 {
            #[allow(unused_mut)]
            let mut entry_2877 = list_2876.entry();
            entry_2877.string(item_2875);
        }
        list_2876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2878 = writer.prefix("Filter");
    if let Some(var_2879) = &input.filters {
        let mut list_2881 = scope_2878.start_list(true, Some("Filter"));
        for item_2880 in var_2879 {
            #[allow(unused_mut)]
            let mut entry_2882 = list_2881.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2882, item_2880)?;
        }
        list_2881.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2883 = writer.prefix("MaxResults");
    if let Some(var_2884) = &input.max_results {
        scope_2883.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2884).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2885 = writer.prefix("NextToken");
    if let Some(var_2886) = &input.next_token {
        scope_2885.string(var_2886);
    }
    #[allow(unused_mut)]
    let mut scope_2887 = writer.prefix("DryRun");
    if let Some(var_2888) = &input.dry_run {
        scope_2887.boolean(*var_2888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2890) = &input.local_gateway_virtual_interface_ids {
        let mut list_2892 = scope_2889.start_list(true, Some("item"));
        for item_2891 in var_2890 {
            #[allow(unused_mut)]
            let mut entry_2893 = list_2892.entry();
            entry_2893.string(item_2891);
        }
        list_2892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("Filter");
    if let Some(var_2895) = &input.filters {
        let mut list_2897 = scope_2894.start_list(true, Some("Filter"));
        for item_2896 in var_2895 {
            #[allow(unused_mut)]
            let mut entry_2898 = list_2897.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2898, item_2896)?;
        }
        list_2897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2899 = writer.prefix("MaxResults");
    if let Some(var_2900) = &input.max_results {
        scope_2899.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2900).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2901 = writer.prefix("NextToken");
    if let Some(var_2902) = &input.next_token {
        scope_2901.string(var_2902);
    }
    #[allow(unused_mut)]
    let mut scope_2903 = writer.prefix("DryRun");
    if let Some(var_2904) = &input.dry_run {
        scope_2903.boolean(*var_2904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("DryRun");
    if let Some(var_2906) = &input.dry_run {
        scope_2905.boolean(*var_2906);
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("Filter");
    if let Some(var_2908) = &input.filters {
        let mut list_2910 = scope_2907.start_list(true, Some("Filter"));
        for item_2909 in var_2908 {
            #[allow(unused_mut)]
            let mut entry_2911 = list_2910.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2911, item_2909)?;
        }
        list_2910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2912 = writer.prefix("MaxResults");
    if let Some(var_2913) = &input.max_results {
        scope_2912.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2913).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("NextToken");
    if let Some(var_2915) = &input.next_token {
        scope_2914.string(var_2915);
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("PrefixListId");
    if let Some(var_2917) = &input.prefix_list_ids {
        let mut list_2919 = scope_2916.start_list(true, Some("item"));
        for item_2918 in var_2917 {
            #[allow(unused_mut)]
            let mut entry_2920 = list_2919.entry();
            entry_2920.string(item_2918);
        }
        list_2919.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2921 = writer.prefix("Filter");
    if let Some(var_2922) = &input.filters {
        let mut list_2924 = scope_2921.start_list(true, Some("Filter"));
        for item_2923 in var_2922 {
            #[allow(unused_mut)]
            let mut entry_2925 = list_2924.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2925, item_2923)?;
        }
        list_2924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("DryRun");
    if let Some(var_2927) = &input.dry_run {
        scope_2926.boolean(*var_2927);
    }
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("MaxResults");
    if let Some(var_2929) = &input.max_results {
        scope_2928.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2929).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("NextToken");
    if let Some(var_2931) = &input.next_token {
        scope_2930.string(var_2931);
    }
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("PublicIp");
    if let Some(var_2933) = &input.public_ips {
        let mut list_2935 = scope_2932.start_list(true, Some("item"));
        for item_2934 in var_2933 {
            #[allow(unused_mut)]
            let mut entry_2936 = list_2935.entry();
            entry_2936.string(item_2934);
        }
        list_2935.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("DryRun");
    if let Some(var_2938) = &input.dry_run {
        scope_2937.boolean(*var_2938);
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("Filter");
    if let Some(var_2940) = &input.filter {
        let mut list_2942 = scope_2939.start_list(true, Some("Filter"));
        for item_2941 in var_2940 {
            #[allow(unused_mut)]
            let mut entry_2943 = list_2942.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2943, item_2941)?;
        }
        list_2942.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2944 = writer.prefix("MaxResults");
    if let Some(var_2945) = &input.max_results {
        scope_2944.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2945).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2946 = writer.prefix("NatGatewayId");
    if let Some(var_2947) = &input.nat_gateway_ids {
        let mut list_2949 = scope_2946.start_list(true, Some("item"));
        for item_2948 in var_2947 {
            #[allow(unused_mut)]
            let mut entry_2950 = list_2949.entry();
            entry_2950.string(item_2948);
        }
        list_2949.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("NextToken");
    if let Some(var_2952) = &input.next_token {
        scope_2951.string(var_2952);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("Filter");
    if let Some(var_2954) = &input.filters {
        let mut list_2956 = scope_2953.start_list(true, Some("Filter"));
        for item_2955 in var_2954 {
            #[allow(unused_mut)]
            let mut entry_2957 = list_2956.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2957, item_2955)?;
        }
        list_2956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("DryRun");
    if let Some(var_2959) = &input.dry_run {
        scope_2958.boolean(*var_2959);
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("NetworkAclId");
    if let Some(var_2961) = &input.network_acl_ids {
        let mut list_2963 = scope_2960.start_list(true, Some("item"));
        for item_2962 in var_2961 {
            #[allow(unused_mut)]
            let mut entry_2964 = list_2963.entry();
            entry_2964.string(item_2962);
        }
        list_2963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("NextToken");
    if let Some(var_2966) = &input.next_token {
        scope_2965.string(var_2966);
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("MaxResults");
    if let Some(var_2968) = &input.max_results {
        scope_2967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2968).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2970) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2972 = scope_2969.start_list(true, Some("item"));
        for item_2971 in var_2970 {
            #[allow(unused_mut)]
            let mut entry_2973 = list_2972.entry();
            entry_2973.string(item_2971);
        }
        list_2972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2975) = &input.network_insights_access_scope_id {
        scope_2974.string(var_2975);
    }
    #[allow(unused_mut)]
    let mut scope_2976 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2977) = &input.analysis_start_time_begin {
        scope_2976.date_time(var_2977, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2978 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2979) = &input.analysis_start_time_end {
        scope_2978.date_time(var_2979, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("Filter");
    if let Some(var_2981) = &input.filters {
        let mut list_2983 = scope_2980.start_list(true, Some("Filter"));
        for item_2982 in var_2981 {
            #[allow(unused_mut)]
            let mut entry_2984 = list_2983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2984, item_2982)?;
        }
        list_2983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("MaxResults");
    if let Some(var_2986) = &input.max_results {
        scope_2985.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2986).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("DryRun");
    if let Some(var_2988) = &input.dry_run {
        scope_2987.boolean(*var_2988);
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("NextToken");
    if let Some(var_2990) = &input.next_token {
        scope_2989.string(var_2990);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2992) = &input.network_insights_access_scope_ids {
        let mut list_2994 = scope_2991.start_list(true, Some("item"));
        for item_2993 in var_2992 {
            #[allow(unused_mut)]
            let mut entry_2995 = list_2994.entry();
            entry_2995.string(item_2993);
        }
        list_2994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2996 = writer.prefix("Filter");
    if let Some(var_2997) = &input.filters {
        let mut list_2999 = scope_2996.start_list(true, Some("Filter"));
        for item_2998 in var_2997 {
            #[allow(unused_mut)]
            let mut entry_3000 = list_2999.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3000, item_2998)?;
        }
        list_2999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("MaxResults");
    if let Some(var_3002) = &input.max_results {
        scope_3001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("DryRun");
    if let Some(var_3004) = &input.dry_run {
        scope_3003.boolean(*var_3004);
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("NextToken");
    if let Some(var_3006) = &input.next_token {
        scope_3005.string(var_3006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3008) = &input.network_insights_analysis_ids {
        let mut list_3010 = scope_3007.start_list(true, Some("item"));
        for item_3009 in var_3008 {
            #[allow(unused_mut)]
            let mut entry_3011 = list_3010.entry();
            entry_3011.string(item_3009);
        }
        list_3010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3013) = &input.network_insights_path_id {
        scope_3012.string(var_3013);
    }
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("AnalysisStartTime");
    if let Some(var_3015) = &input.analysis_start_time {
        scope_3014.date_time(var_3015, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3016 = writer.prefix("AnalysisEndTime");
    if let Some(var_3017) = &input.analysis_end_time {
        scope_3016.date_time(var_3017, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("Filter");
    if let Some(var_3019) = &input.filters {
        let mut list_3021 = scope_3018.start_list(true, Some("Filter"));
        for item_3020 in var_3019 {
            #[allow(unused_mut)]
            let mut entry_3022 = list_3021.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3022, item_3020)?;
        }
        list_3021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("MaxResults");
    if let Some(var_3024) = &input.max_results {
        scope_3023.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3024).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("DryRun");
    if let Some(var_3026) = &input.dry_run {
        scope_3025.boolean(*var_3026);
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("NextToken");
    if let Some(var_3028) = &input.next_token {
        scope_3027.string(var_3028);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3030) = &input.network_insights_path_ids {
        let mut list_3032 = scope_3029.start_list(true, Some("item"));
        for item_3031 in var_3030 {
            #[allow(unused_mut)]
            let mut entry_3033 = list_3032.entry();
            entry_3033.string(item_3031);
        }
        list_3032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("Filter");
    if let Some(var_3035) = &input.filters {
        let mut list_3037 = scope_3034.start_list(true, Some("Filter"));
        for item_3036 in var_3035 {
            #[allow(unused_mut)]
            let mut entry_3038 = list_3037.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3038, item_3036)?;
        }
        list_3037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("MaxResults");
    if let Some(var_3040) = &input.max_results {
        scope_3039.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3040).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3041 = writer.prefix("DryRun");
    if let Some(var_3042) = &input.dry_run {
        scope_3041.boolean(*var_3042);
    }
    #[allow(unused_mut)]
    let mut scope_3043 = writer.prefix("NextToken");
    if let Some(var_3044) = &input.next_token {
        scope_3043.string(var_3044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3045 = writer.prefix("Attribute");
    if let Some(var_3046) = &input.attribute {
        scope_3045.string(var_3046.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3047 = writer.prefix("DryRun");
    if let Some(var_3048) = &input.dry_run {
        scope_3047.boolean(*var_3048);
    }
    #[allow(unused_mut)]
    let mut scope_3049 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3050) = &input.network_interface_id {
        scope_3049.string(var_3050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3051 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3052) = &input.network_interface_permission_ids {
        let mut list_3054 = scope_3051.start_list(true, None);
        for item_3053 in var_3052 {
            #[allow(unused_mut)]
            let mut entry_3055 = list_3054.entry();
            entry_3055.string(item_3053);
        }
        list_3054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3056 = writer.prefix("Filter");
    if let Some(var_3057) = &input.filters {
        let mut list_3059 = scope_3056.start_list(true, Some("Filter"));
        for item_3058 in var_3057 {
            #[allow(unused_mut)]
            let mut entry_3060 = list_3059.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3060, item_3058)?;
        }
        list_3059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3061 = writer.prefix("NextToken");
    if let Some(var_3062) = &input.next_token {
        scope_3061.string(var_3062);
    }
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("MaxResults");
    if let Some(var_3064) = &input.max_results {
        scope_3063.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3064).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("Filter");
    if let Some(var_3066) = &input.filters {
        let mut list_3068 = scope_3065.start_list(true, Some("Filter"));
        for item_3067 in var_3066 {
            #[allow(unused_mut)]
            let mut entry_3069 = list_3068.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3069, item_3067)?;
        }
        list_3068.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("DryRun");
    if let Some(var_3071) = &input.dry_run {
        scope_3070.boolean(*var_3071);
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3073) = &input.network_interface_ids {
        let mut list_3075 = scope_3072.start_list(true, Some("item"));
        for item_3074 in var_3073 {
            #[allow(unused_mut)]
            let mut entry_3076 = list_3075.entry();
            entry_3076.string(item_3074);
        }
        list_3075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3077 = writer.prefix("NextToken");
    if let Some(var_3078) = &input.next_token {
        scope_3077.string(var_3078);
    }
    #[allow(unused_mut)]
    let mut scope_3079 = writer.prefix("MaxResults");
    if let Some(var_3080) = &input.max_results {
        scope_3079.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3080).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3081 = writer.prefix("Filter");
    if let Some(var_3082) = &input.filters {
        let mut list_3084 = scope_3081.start_list(true, Some("Filter"));
        for item_3083 in var_3082 {
            #[allow(unused_mut)]
            let mut entry_3085 = list_3084.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3085, item_3083)?;
        }
        list_3084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("DryRun");
    if let Some(var_3087) = &input.dry_run {
        scope_3086.boolean(*var_3087);
    }
    #[allow(unused_mut)]
    let mut scope_3088 = writer.prefix("GroupName");
    if let Some(var_3089) = &input.group_names {
        let mut list_3091 = scope_3088.start_list(true, None);
        for item_3090 in var_3089 {
            #[allow(unused_mut)]
            let mut entry_3092 = list_3091.entry();
            entry_3092.string(item_3090);
        }
        list_3091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("GroupId");
    if let Some(var_3094) = &input.group_ids {
        let mut list_3096 = scope_3093.start_list(true, Some("GroupId"));
        for item_3095 in var_3094 {
            #[allow(unused_mut)]
            let mut entry_3097 = list_3096.entry();
            entry_3097.string(item_3095);
        }
        list_3096.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("DryRun");
    if let Some(var_3099) = &input.dry_run {
        scope_3098.boolean(*var_3099);
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("Filter");
    if let Some(var_3101) = &input.filters {
        let mut list_3103 = scope_3100.start_list(true, Some("Filter"));
        for item_3102 in var_3101 {
            #[allow(unused_mut)]
            let mut entry_3104 = list_3103.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3104, item_3102)?;
        }
        list_3103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("MaxResults");
    if let Some(var_3106) = &input.max_results {
        scope_3105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("NextToken");
    if let Some(var_3108) = &input.next_token {
        scope_3107.string(var_3108);
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("PrefixListId");
    if let Some(var_3110) = &input.prefix_list_ids {
        let mut list_3112 = scope_3109.start_list(true, Some("item"));
        for item_3111 in var_3110 {
            #[allow(unused_mut)]
            let mut entry_3113 = list_3112.entry();
            entry_3113.string(item_3111);
        }
        list_3112.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3114 = writer.prefix("DryRun");
    if let Some(var_3115) = &input.dry_run {
        scope_3114.boolean(*var_3115);
    }
    #[allow(unused_mut)]
    let mut scope_3116 = writer.prefix("Resource");
    if let Some(var_3117) = &input.resources {
        let mut list_3119 = scope_3116.start_list(true, Some("item"));
        for item_3118 in var_3117 {
            #[allow(unused_mut)]
            let mut entry_3120 = list_3119.entry();
            entry_3120.string(item_3118);
        }
        list_3119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("MaxResults");
    if let Some(var_3122) = &input.max_results {
        scope_3121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("NextToken");
    if let Some(var_3124) = &input.next_token {
        scope_3123.string(var_3124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3125 = writer.prefix("PoolId");
    if let Some(var_3126) = &input.pool_ids {
        let mut list_3128 = scope_3125.start_list(true, Some("item"));
        for item_3127 in var_3126 {
            #[allow(unused_mut)]
            let mut entry_3129 = list_3128.entry();
            entry_3129.string(item_3127);
        }
        list_3128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("NextToken");
    if let Some(var_3131) = &input.next_token {
        scope_3130.string(var_3131);
    }
    #[allow(unused_mut)]
    let mut scope_3132 = writer.prefix("MaxResults");
    if let Some(var_3133) = &input.max_results {
        scope_3132.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3133).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3134 = writer.prefix("Filter");
    if let Some(var_3135) = &input.filters {
        let mut list_3137 = scope_3134.start_list(true, Some("Filter"));
        for item_3136 in var_3135 {
            #[allow(unused_mut)]
            let mut entry_3138 = list_3137.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3138, item_3136)?;
        }
        list_3137.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3139 = writer.prefix("Filter");
    if let Some(var_3140) = &input.filters {
        let mut list_3142 = scope_3139.start_list(true, Some("Filter"));
        for item_3141 in var_3140 {
            #[allow(unused_mut)]
            let mut entry_3143 = list_3142.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3143, item_3141)?;
        }
        list_3142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("RegionName");
    if let Some(var_3145) = &input.region_names {
        let mut list_3147 = scope_3144.start_list(true, Some("RegionName"));
        for item_3146 in var_3145 {
            #[allow(unused_mut)]
            let mut entry_3148 = list_3147.entry();
            entry_3148.string(item_3146);
        }
        list_3147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("DryRun");
    if let Some(var_3150) = &input.dry_run {
        scope_3149.boolean(*var_3150);
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("AllRegions");
    if let Some(var_3152) = &input.all_regions {
        scope_3151.boolean(*var_3152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3154) = &input.replace_root_volume_task_ids {
        let mut list_3156 = scope_3153.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3155 in var_3154 {
            #[allow(unused_mut)]
            let mut entry_3157 = list_3156.entry();
            entry_3157.string(item_3155);
        }
        list_3156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("Filter");
    if let Some(var_3159) = &input.filters {
        let mut list_3161 = scope_3158.start_list(true, Some("Filter"));
        for item_3160 in var_3159 {
            #[allow(unused_mut)]
            let mut entry_3162 = list_3161.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3162, item_3160)?;
        }
        list_3161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3163 = writer.prefix("MaxResults");
    if let Some(var_3164) = &input.max_results {
        scope_3163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3165 = writer.prefix("NextToken");
    if let Some(var_3166) = &input.next_token {
        scope_3165.string(var_3166);
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("DryRun");
    if let Some(var_3168) = &input.dry_run {
        scope_3167.boolean(*var_3168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("Filter");
    if let Some(var_3170) = &input.filters {
        let mut list_3172 = scope_3169.start_list(true, Some("Filter"));
        for item_3171 in var_3170 {
            #[allow(unused_mut)]
            let mut entry_3173 = list_3172.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3173, item_3171)?;
        }
        list_3172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3174 = writer.prefix("OfferingClass");
    if let Some(var_3175) = &input.offering_class {
        scope_3174.string(var_3175.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("ReservedInstancesId");
    if let Some(var_3177) = &input.reserved_instances_ids {
        let mut list_3179 = scope_3176.start_list(true, Some("ReservedInstancesId"));
        for item_3178 in var_3177 {
            #[allow(unused_mut)]
            let mut entry_3180 = list_3179.entry();
            entry_3180.string(item_3178);
        }
        list_3179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3181 = writer.prefix("DryRun");
    if let Some(var_3182) = &input.dry_run {
        scope_3181.boolean(*var_3182);
    }
    #[allow(unused_mut)]
    let mut scope_3183 = writer.prefix("OfferingType");
    if let Some(var_3184) = &input.offering_type {
        scope_3183.string(var_3184.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("Filter");
    if let Some(var_3186) = &input.filters {
        let mut list_3188 = scope_3185.start_list(true, Some("Filter"));
        for item_3187 in var_3186 {
            #[allow(unused_mut)]
            let mut entry_3189 = list_3188.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3189, item_3187)?;
        }
        list_3188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3190 = writer.prefix("ReservedInstancesId");
    if let Some(var_3191) = &input.reserved_instances_id {
        scope_3190.string(var_3191);
    }
    #[allow(unused_mut)]
    let mut scope_3192 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3193) = &input.reserved_instances_listing_id {
        scope_3192.string(var_3193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("Filter");
    if let Some(var_3195) = &input.filters {
        let mut list_3197 = scope_3194.start_list(true, Some("Filter"));
        for item_3196 in var_3195 {
            #[allow(unused_mut)]
            let mut entry_3198 = list_3197.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3198, item_3196)?;
        }
        list_3197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3199 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3200) = &input.reserved_instances_modification_ids {
        let mut list_3202 = scope_3199.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3201 in var_3200 {
            #[allow(unused_mut)]
            let mut entry_3203 = list_3202.entry();
            entry_3203.string(item_3201);
        }
        list_3202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3204 = writer.prefix("NextToken");
    if let Some(var_3205) = &input.next_token {
        scope_3204.string(var_3205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("AvailabilityZone");
    if let Some(var_3207) = &input.availability_zone {
        scope_3206.string(var_3207);
    }
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("Filter");
    if let Some(var_3209) = &input.filters {
        let mut list_3211 = scope_3208.start_list(true, Some("Filter"));
        for item_3210 in var_3209 {
            #[allow(unused_mut)]
            let mut entry_3212 = list_3211.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3212, item_3210)?;
        }
        list_3211.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("IncludeMarketplace");
    if let Some(var_3214) = &input.include_marketplace {
        scope_3213.boolean(*var_3214);
    }
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("InstanceType");
    if let Some(var_3216) = &input.instance_type {
        scope_3215.string(var_3216.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("MaxDuration");
    if let Some(var_3218) = &input.max_duration {
        scope_3217.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3218).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("MaxInstanceCount");
    if let Some(var_3220) = &input.max_instance_count {
        scope_3219.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3220).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("MinDuration");
    if let Some(var_3222) = &input.min_duration {
        scope_3221.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3222).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("OfferingClass");
    if let Some(var_3224) = &input.offering_class {
        scope_3223.string(var_3224.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("ProductDescription");
    if let Some(var_3226) = &input.product_description {
        scope_3225.string(var_3226.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3228) = &input.reserved_instances_offering_ids {
        let mut list_3230 = scope_3227.start_list(true, None);
        for item_3229 in var_3228 {
            #[allow(unused_mut)]
            let mut entry_3231 = list_3230.entry();
            entry_3231.string(item_3229);
        }
        list_3230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("DryRun");
    if let Some(var_3233) = &input.dry_run {
        scope_3232.boolean(*var_3233);
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("InstanceTenancy");
    if let Some(var_3235) = &input.instance_tenancy {
        scope_3234.string(var_3235.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("MaxResults");
    if let Some(var_3237) = &input.max_results {
        scope_3236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("NextToken");
    if let Some(var_3239) = &input.next_token {
        scope_3238.string(var_3239);
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("OfferingType");
    if let Some(var_3241) = &input.offering_type {
        scope_3240.string(var_3241.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("Filter");
    if let Some(var_3243) = &input.filters {
        let mut list_3245 = scope_3242.start_list(true, Some("Filter"));
        for item_3244 in var_3243 {
            #[allow(unused_mut)]
            let mut entry_3246 = list_3245.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3246, item_3244)?;
        }
        list_3245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("DryRun");
    if let Some(var_3248) = &input.dry_run {
        scope_3247.boolean(*var_3248);
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("RouteTableId");
    if let Some(var_3250) = &input.route_table_ids {
        let mut list_3252 = scope_3249.start_list(true, Some("item"));
        for item_3251 in var_3250 {
            #[allow(unused_mut)]
            let mut entry_3253 = list_3252.entry();
            entry_3253.string(item_3251);
        }
        list_3252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3254 = writer.prefix("NextToken");
    if let Some(var_3255) = &input.next_token {
        scope_3254.string(var_3255);
    }
    #[allow(unused_mut)]
    let mut scope_3256 = writer.prefix("MaxResults");
    if let Some(var_3257) = &input.max_results {
        scope_3256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3257).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3258 = writer.prefix("DryRun");
    if let Some(var_3259) = &input.dry_run {
        scope_3258.boolean(*var_3259);
    }
    #[allow(unused_mut)]
    let mut scope_3260 = writer.prefix("Filter");
    if let Some(var_3261) = &input.filters {
        let mut list_3263 = scope_3260.start_list(true, Some("Filter"));
        for item_3262 in var_3261 {
            #[allow(unused_mut)]
            let mut entry_3264 = list_3263.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3264, item_3262)?;
        }
        list_3263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3265 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3266) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3265, var_3266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("MaxResults");
    if let Some(var_3268) = &input.max_results {
        scope_3267.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3268).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3269 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3270) = &input.max_slot_duration_in_hours {
        scope_3269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3272) = &input.min_slot_duration_in_hours {
        scope_3271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("NextToken");
    if let Some(var_3274) = &input.next_token {
        scope_3273.string(var_3274);
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("Recurrence");
    if let Some(var_3276) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3275, var_3276,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("DryRun");
    if let Some(var_3278) = &input.dry_run {
        scope_3277.boolean(*var_3278);
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("Filter");
    if let Some(var_3280) = &input.filters {
        let mut list_3282 = scope_3279.start_list(true, Some("Filter"));
        for item_3281 in var_3280 {
            #[allow(unused_mut)]
            let mut entry_3283 = list_3282.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3283, item_3281)?;
        }
        list_3282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("MaxResults");
    if let Some(var_3285) = &input.max_results {
        scope_3284.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3285).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("NextToken");
    if let Some(var_3287) = &input.next_token {
        scope_3286.string(var_3287);
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3289) = &input.scheduled_instance_ids {
        let mut list_3291 = scope_3288.start_list(true, Some("ScheduledInstanceId"));
        for item_3290 in var_3289 {
            #[allow(unused_mut)]
            let mut entry_3292 = list_3291.entry();
            entry_3292.string(item_3290);
        }
        list_3291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3293 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3294) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3293, var_3294,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("DryRun");
    if let Some(var_3296) = &input.dry_run {
        scope_3295.boolean(*var_3296);
    }
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("GroupId");
    if let Some(var_3298) = &input.group_id {
        let mut list_3300 = scope_3297.start_list(true, Some("item"));
        for item_3299 in var_3298 {
            #[allow(unused_mut)]
            let mut entry_3301 = list_3300.entry();
            entry_3301.string(item_3299);
        }
        list_3300.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3302 = writer.prefix("Filter");
    if let Some(var_3303) = &input.filters {
        let mut list_3305 = scope_3302.start_list(true, Some("Filter"));
        for item_3304 in var_3303 {
            #[allow(unused_mut)]
            let mut entry_3306 = list_3305.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3306, item_3304)?;
        }
        list_3305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3308) = &input.security_group_rule_ids {
        let mut list_3310 = scope_3307.start_list(true, Some("item"));
        for item_3309 in var_3308 {
            #[allow(unused_mut)]
            let mut entry_3311 = list_3310.entry();
            entry_3311.string(item_3309);
        }
        list_3310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("DryRun");
    if let Some(var_3313) = &input.dry_run {
        scope_3312.boolean(*var_3313);
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("NextToken");
    if let Some(var_3315) = &input.next_token {
        scope_3314.string(var_3315);
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("MaxResults");
    if let Some(var_3317) = &input.max_results {
        scope_3316.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3317).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("Filter");
    if let Some(var_3319) = &input.filters {
        let mut list_3321 = scope_3318.start_list(true, Some("Filter"));
        for item_3320 in var_3319 {
            #[allow(unused_mut)]
            let mut entry_3322 = list_3321.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3322, item_3320)?;
        }
        list_3321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3323 = writer.prefix("GroupId");
    if let Some(var_3324) = &input.group_ids {
        let mut list_3326 = scope_3323.start_list(true, Some("groupId"));
        for item_3325 in var_3324 {
            #[allow(unused_mut)]
            let mut entry_3327 = list_3326.entry();
            entry_3327.string(item_3325);
        }
        list_3326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("GroupName");
    if let Some(var_3329) = &input.group_names {
        let mut list_3331 = scope_3328.start_list(true, Some("GroupName"));
        for item_3330 in var_3329 {
            #[allow(unused_mut)]
            let mut entry_3332 = list_3331.entry();
            entry_3332.string(item_3330);
        }
        list_3331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("DryRun");
    if let Some(var_3334) = &input.dry_run {
        scope_3333.boolean(*var_3334);
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("NextToken");
    if let Some(var_3336) = &input.next_token {
        scope_3335.string(var_3336);
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("MaxResults");
    if let Some(var_3338) = &input.max_results {
        scope_3337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3338).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("Attribute");
    if let Some(var_3340) = &input.attribute {
        scope_3339.string(var_3340.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("SnapshotId");
    if let Some(var_3342) = &input.snapshot_id {
        scope_3341.string(var_3342);
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("DryRun");
    if let Some(var_3344) = &input.dry_run {
        scope_3343.boolean(*var_3344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("Filter");
    if let Some(var_3346) = &input.filters {
        let mut list_3348 = scope_3345.start_list(true, Some("Filter"));
        for item_3347 in var_3346 {
            #[allow(unused_mut)]
            let mut entry_3349 = list_3348.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3349, item_3347)?;
        }
        list_3348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3350 = writer.prefix("MaxResults");
    if let Some(var_3351) = &input.max_results {
        scope_3350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("NextToken");
    if let Some(var_3353) = &input.next_token {
        scope_3352.string(var_3353);
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("Owner");
    if let Some(var_3355) = &input.owner_ids {
        let mut list_3357 = scope_3354.start_list(true, Some("Owner"));
        for item_3356 in var_3355 {
            #[allow(unused_mut)]
            let mut entry_3358 = list_3357.entry();
            entry_3358.string(item_3356);
        }
        list_3357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3359 = writer.prefix("RestorableBy");
    if let Some(var_3360) = &input.restorable_by_user_ids {
        let mut list_3362 = scope_3359.start_list(true, None);
        for item_3361 in var_3360 {
            #[allow(unused_mut)]
            let mut entry_3363 = list_3362.entry();
            entry_3363.string(item_3361);
        }
        list_3362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("SnapshotId");
    if let Some(var_3365) = &input.snapshot_ids {
        let mut list_3367 = scope_3364.start_list(true, Some("SnapshotId"));
        for item_3366 in var_3365 {
            #[allow(unused_mut)]
            let mut entry_3368 = list_3367.entry();
            entry_3368.string(item_3366);
        }
        list_3367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("DryRun");
    if let Some(var_3370) = &input.dry_run {
        scope_3369.boolean(*var_3370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("Filter");
    if let Some(var_3372) = &input.filters {
        let mut list_3374 = scope_3371.start_list(true, Some("Filter"));
        for item_3373 in var_3372 {
            #[allow(unused_mut)]
            let mut entry_3375 = list_3374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3375, item_3373)?;
        }
        list_3374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("DryRun");
    if let Some(var_3377) = &input.dry_run {
        scope_3376.boolean(*var_3377);
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("NextToken");
    if let Some(var_3379) = &input.next_token {
        scope_3378.string(var_3379);
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("MaxResults");
    if let Some(var_3381) = &input.max_results {
        scope_3380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3381).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("DryRun");
    if let Some(var_3383) = &input.dry_run {
        scope_3382.boolean(*var_3383);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3384 = writer.prefix("DryRun");
    if let Some(var_3385) = &input.dry_run {
        scope_3384.boolean(*var_3385);
    }
    #[allow(unused_mut)]
    let mut scope_3386 = writer.prefix("MaxResults");
    if let Some(var_3387) = &input.max_results {
        scope_3386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("NextToken");
    if let Some(var_3389) = &input.next_token {
        scope_3388.string(var_3389);
    }
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3391) = &input.spot_fleet_request_id {
        scope_3390.string(var_3391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("DryRun");
    if let Some(var_3393) = &input.dry_run {
        scope_3392.boolean(*var_3393);
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("EventType");
    if let Some(var_3395) = &input.event_type {
        scope_3394.string(var_3395.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("MaxResults");
    if let Some(var_3397) = &input.max_results {
        scope_3396.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3397).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("NextToken");
    if let Some(var_3399) = &input.next_token {
        scope_3398.string(var_3399);
    }
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3401) = &input.spot_fleet_request_id {
        scope_3400.string(var_3401);
    }
    #[allow(unused_mut)]
    let mut scope_3402 = writer.prefix("StartTime");
    if let Some(var_3403) = &input.start_time {
        scope_3402.date_time(var_3403, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("DryRun");
    if let Some(var_3405) = &input.dry_run {
        scope_3404.boolean(*var_3405);
    }
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("MaxResults");
    if let Some(var_3407) = &input.max_results {
        scope_3406.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3407).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("NextToken");
    if let Some(var_3409) = &input.next_token {
        scope_3408.string(var_3409);
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3411) = &input.spot_fleet_request_ids {
        let mut list_3413 = scope_3410.start_list(true, Some("item"));
        for item_3412 in var_3411 {
            #[allow(unused_mut)]
            let mut entry_3414 = list_3413.entry();
            entry_3414.string(item_3412);
        }
        list_3413.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("Filter");
    if let Some(var_3416) = &input.filters {
        let mut list_3418 = scope_3415.start_list(true, Some("Filter"));
        for item_3417 in var_3416 {
            #[allow(unused_mut)]
            let mut entry_3419 = list_3418.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3419, item_3417)?;
        }
        list_3418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("DryRun");
    if let Some(var_3421) = &input.dry_run {
        scope_3420.boolean(*var_3421);
    }
    #[allow(unused_mut)]
    let mut scope_3422 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3423) = &input.spot_instance_request_ids {
        let mut list_3425 = scope_3422.start_list(true, Some("SpotInstanceRequestId"));
        for item_3424 in var_3423 {
            #[allow(unused_mut)]
            let mut entry_3426 = list_3425.entry();
            entry_3426.string(item_3424);
        }
        list_3425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("NextToken");
    if let Some(var_3428) = &input.next_token {
        scope_3427.string(var_3428);
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("MaxResults");
    if let Some(var_3430) = &input.max_results {
        scope_3429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3430).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3431 = writer.prefix("Filter");
    if let Some(var_3432) = &input.filters {
        let mut list_3434 = scope_3431.start_list(true, Some("Filter"));
        for item_3433 in var_3432 {
            #[allow(unused_mut)]
            let mut entry_3435 = list_3434.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3435, item_3433)?;
        }
        list_3434.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("AvailabilityZone");
    if let Some(var_3437) = &input.availability_zone {
        scope_3436.string(var_3437);
    }
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("DryRun");
    if let Some(var_3439) = &input.dry_run {
        scope_3438.boolean(*var_3439);
    }
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("EndTime");
    if let Some(var_3441) = &input.end_time {
        scope_3440.date_time(var_3441, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3442 = writer.prefix("InstanceType");
    if let Some(var_3443) = &input.instance_types {
        let mut list_3445 = scope_3442.start_list(true, None);
        for item_3444 in var_3443 {
            #[allow(unused_mut)]
            let mut entry_3446 = list_3445.entry();
            entry_3446.string(item_3444.as_str());
        }
        list_3445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3447 = writer.prefix("MaxResults");
    if let Some(var_3448) = &input.max_results {
        scope_3447.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3448).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3449 = writer.prefix("NextToken");
    if let Some(var_3450) = &input.next_token {
        scope_3449.string(var_3450);
    }
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("ProductDescription");
    if let Some(var_3452) = &input.product_descriptions {
        let mut list_3454 = scope_3451.start_list(true, None);
        for item_3453 in var_3452 {
            #[allow(unused_mut)]
            let mut entry_3455 = list_3454.entry();
            entry_3455.string(item_3453);
        }
        list_3454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3456 = writer.prefix("StartTime");
    if let Some(var_3457) = &input.start_time {
        scope_3456.date_time(var_3457, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3458 = writer.prefix("DryRun");
    if let Some(var_3459) = &input.dry_run {
        scope_3458.boolean(*var_3459);
    }
    #[allow(unused_mut)]
    let mut scope_3460 = writer.prefix("MaxResults");
    if let Some(var_3461) = &input.max_results {
        scope_3460.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3461).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3462 = writer.prefix("NextToken");
    if let Some(var_3463) = &input.next_token {
        scope_3462.string(var_3463);
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("VpcId");
    if let Some(var_3465) = &input.vpc_id {
        scope_3464.string(var_3465);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("ImageId");
    if let Some(var_3467) = &input.image_ids {
        let mut list_3469 = scope_3466.start_list(true, Some("item"));
        for item_3468 in var_3467 {
            #[allow(unused_mut)]
            let mut entry_3470 = list_3469.entry();
            entry_3470.string(item_3468);
        }
        list_3469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3471 = writer.prefix("DryRun");
    if let Some(var_3472) = &input.dry_run {
        scope_3471.boolean(*var_3472);
    }
    #[allow(unused_mut)]
    let mut scope_3473 = writer.prefix("Filter");
    if let Some(var_3474) = &input.filters {
        let mut list_3476 = scope_3473.start_list(true, Some("Filter"));
        for item_3475 in var_3474 {
            #[allow(unused_mut)]
            let mut entry_3477 = list_3476.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3477, item_3475)?;
        }
        list_3476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3478 = writer.prefix("NextToken");
    if let Some(var_3479) = &input.next_token {
        scope_3478.string(var_3479);
    }
    #[allow(unused_mut)]
    let mut scope_3480 = writer.prefix("MaxResults");
    if let Some(var_3481) = &input.max_results {
        scope_3480.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3481).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("Filter");
    if let Some(var_3483) = &input.filters {
        let mut list_3485 = scope_3482.start_list(true, Some("Filter"));
        for item_3484 in var_3483 {
            #[allow(unused_mut)]
            let mut entry_3486 = list_3485.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3486, item_3484)?;
        }
        list_3485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3487 = writer.prefix("SubnetId");
    if let Some(var_3488) = &input.subnet_ids {
        let mut list_3490 = scope_3487.start_list(true, Some("SubnetId"));
        for item_3489 in var_3488 {
            #[allow(unused_mut)]
            let mut entry_3491 = list_3490.entry();
            entry_3491.string(item_3489);
        }
        list_3490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("DryRun");
    if let Some(var_3493) = &input.dry_run {
        scope_3492.boolean(*var_3493);
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("NextToken");
    if let Some(var_3495) = &input.next_token {
        scope_3494.string(var_3495);
    }
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("MaxResults");
    if let Some(var_3497) = &input.max_results {
        scope_3496.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3497).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("DryRun");
    if let Some(var_3499) = &input.dry_run {
        scope_3498.boolean(*var_3499);
    }
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("Filter");
    if let Some(var_3501) = &input.filters {
        let mut list_3503 = scope_3500.start_list(true, Some("Filter"));
        for item_3502 in var_3501 {
            #[allow(unused_mut)]
            let mut entry_3504 = list_3503.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3504, item_3502)?;
        }
        list_3503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3505 = writer.prefix("MaxResults");
    if let Some(var_3506) = &input.max_results {
        scope_3505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3507 = writer.prefix("NextToken");
    if let Some(var_3508) = &input.next_token {
        scope_3507.string(var_3508);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3509 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3510) = &input.traffic_mirror_filter_ids {
        let mut list_3512 = scope_3509.start_list(true, Some("item"));
        for item_3511 in var_3510 {
            #[allow(unused_mut)]
            let mut entry_3513 = list_3512.entry();
            entry_3513.string(item_3511);
        }
        list_3512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3514 = writer.prefix("DryRun");
    if let Some(var_3515) = &input.dry_run {
        scope_3514.boolean(*var_3515);
    }
    #[allow(unused_mut)]
    let mut scope_3516 = writer.prefix("Filter");
    if let Some(var_3517) = &input.filters {
        let mut list_3519 = scope_3516.start_list(true, Some("Filter"));
        for item_3518 in var_3517 {
            #[allow(unused_mut)]
            let mut entry_3520 = list_3519.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3520, item_3518)?;
        }
        list_3519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("MaxResults");
    if let Some(var_3522) = &input.max_results {
        scope_3521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3523 = writer.prefix("NextToken");
    if let Some(var_3524) = &input.next_token {
        scope_3523.string(var_3524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3525 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3526) = &input.traffic_mirror_session_ids {
        let mut list_3528 = scope_3525.start_list(true, Some("item"));
        for item_3527 in var_3526 {
            #[allow(unused_mut)]
            let mut entry_3529 = list_3528.entry();
            entry_3529.string(item_3527);
        }
        list_3528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3530 = writer.prefix("DryRun");
    if let Some(var_3531) = &input.dry_run {
        scope_3530.boolean(*var_3531);
    }
    #[allow(unused_mut)]
    let mut scope_3532 = writer.prefix("Filter");
    if let Some(var_3533) = &input.filters {
        let mut list_3535 = scope_3532.start_list(true, Some("Filter"));
        for item_3534 in var_3533 {
            #[allow(unused_mut)]
            let mut entry_3536 = list_3535.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3536, item_3534)?;
        }
        list_3535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("MaxResults");
    if let Some(var_3538) = &input.max_results {
        scope_3537.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3538).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("NextToken");
    if let Some(var_3540) = &input.next_token {
        scope_3539.string(var_3540);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3541 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3542) = &input.traffic_mirror_target_ids {
        let mut list_3544 = scope_3541.start_list(true, Some("item"));
        for item_3543 in var_3542 {
            #[allow(unused_mut)]
            let mut entry_3545 = list_3544.entry();
            entry_3545.string(item_3543);
        }
        list_3544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3546 = writer.prefix("DryRun");
    if let Some(var_3547) = &input.dry_run {
        scope_3546.boolean(*var_3547);
    }
    #[allow(unused_mut)]
    let mut scope_3548 = writer.prefix("Filter");
    if let Some(var_3549) = &input.filters {
        let mut list_3551 = scope_3548.start_list(true, Some("Filter"));
        for item_3550 in var_3549 {
            #[allow(unused_mut)]
            let mut entry_3552 = list_3551.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3552, item_3550)?;
        }
        list_3551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("MaxResults");
    if let Some(var_3554) = &input.max_results {
        scope_3553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("NextToken");
    if let Some(var_3556) = &input.next_token {
        scope_3555.string(var_3556);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3558) = &input.transit_gateway_attachment_ids {
        let mut list_3560 = scope_3557.start_list(true, None);
        for item_3559 in var_3558 {
            #[allow(unused_mut)]
            let mut entry_3561 = list_3560.entry();
            entry_3561.string(item_3559);
        }
        list_3560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("Filter");
    if let Some(var_3563) = &input.filters {
        let mut list_3565 = scope_3562.start_list(true, Some("Filter"));
        for item_3564 in var_3563 {
            #[allow(unused_mut)]
            let mut entry_3566 = list_3565.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3566, item_3564)?;
        }
        list_3565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("MaxResults");
    if let Some(var_3568) = &input.max_results {
        scope_3567.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3568).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("NextToken");
    if let Some(var_3570) = &input.next_token {
        scope_3569.string(var_3570);
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("DryRun");
    if let Some(var_3572) = &input.dry_run {
        scope_3571.boolean(*var_3572);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3574) = &input.transit_gateway_connect_peer_ids {
        let mut list_3576 = scope_3573.start_list(true, Some("item"));
        for item_3575 in var_3574 {
            #[allow(unused_mut)]
            let mut entry_3577 = list_3576.entry();
            entry_3577.string(item_3575);
        }
        list_3576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("Filter");
    if let Some(var_3579) = &input.filters {
        let mut list_3581 = scope_3578.start_list(true, Some("Filter"));
        for item_3580 in var_3579 {
            #[allow(unused_mut)]
            let mut entry_3582 = list_3581.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3582, item_3580)?;
        }
        list_3581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("MaxResults");
    if let Some(var_3584) = &input.max_results {
        scope_3583.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3584).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("NextToken");
    if let Some(var_3586) = &input.next_token {
        scope_3585.string(var_3586);
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("DryRun");
    if let Some(var_3588) = &input.dry_run {
        scope_3587.boolean(*var_3588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3590) = &input.transit_gateway_attachment_ids {
        let mut list_3592 = scope_3589.start_list(true, None);
        for item_3591 in var_3590 {
            #[allow(unused_mut)]
            let mut entry_3593 = list_3592.entry();
            entry_3593.string(item_3591);
        }
        list_3592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("Filter");
    if let Some(var_3595) = &input.filters {
        let mut list_3597 = scope_3594.start_list(true, Some("Filter"));
        for item_3596 in var_3595 {
            #[allow(unused_mut)]
            let mut entry_3598 = list_3597.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3598, item_3596)?;
        }
        list_3597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("MaxResults");
    if let Some(var_3600) = &input.max_results {
        scope_3599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("NextToken");
    if let Some(var_3602) = &input.next_token {
        scope_3601.string(var_3602);
    }
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("DryRun");
    if let Some(var_3604) = &input.dry_run {
        scope_3603.boolean(*var_3604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3606) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3608 = scope_3605.start_list(true, Some("item"));
        for item_3607 in var_3606 {
            #[allow(unused_mut)]
            let mut entry_3609 = list_3608.entry();
            entry_3609.string(item_3607);
        }
        list_3608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("Filter");
    if let Some(var_3611) = &input.filters {
        let mut list_3613 = scope_3610.start_list(true, Some("Filter"));
        for item_3612 in var_3611 {
            #[allow(unused_mut)]
            let mut entry_3614 = list_3613.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3614, item_3612)?;
        }
        list_3613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("MaxResults");
    if let Some(var_3616) = &input.max_results {
        scope_3615.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3616).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("NextToken");
    if let Some(var_3618) = &input.next_token {
        scope_3617.string(var_3618);
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("DryRun");
    if let Some(var_3620) = &input.dry_run {
        scope_3619.boolean(*var_3620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3622) = &input.transit_gateway_attachment_ids {
        let mut list_3624 = scope_3621.start_list(true, None);
        for item_3623 in var_3622 {
            #[allow(unused_mut)]
            let mut entry_3625 = list_3624.entry();
            entry_3625.string(item_3623);
        }
        list_3624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("Filter");
    if let Some(var_3627) = &input.filters {
        let mut list_3629 = scope_3626.start_list(true, Some("Filter"));
        for item_3628 in var_3627 {
            #[allow(unused_mut)]
            let mut entry_3630 = list_3629.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3630, item_3628)?;
        }
        list_3629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("MaxResults");
    if let Some(var_3632) = &input.max_results {
        scope_3631.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3632).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("NextToken");
    if let Some(var_3634) = &input.next_token {
        scope_3633.string(var_3634);
    }
    #[allow(unused_mut)]
    let mut scope_3635 = writer.prefix("DryRun");
    if let Some(var_3636) = &input.dry_run {
        scope_3635.boolean(*var_3636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3638) = &input.transit_gateway_route_table_ids {
        let mut list_3640 = scope_3637.start_list(true, Some("item"));
        for item_3639 in var_3638 {
            #[allow(unused_mut)]
            let mut entry_3641 = list_3640.entry();
            entry_3641.string(item_3639);
        }
        list_3640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("Filter");
    if let Some(var_3643) = &input.filters {
        let mut list_3645 = scope_3642.start_list(true, Some("Filter"));
        for item_3644 in var_3643 {
            #[allow(unused_mut)]
            let mut entry_3646 = list_3645.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3646, item_3644)?;
        }
        list_3645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3647 = writer.prefix("MaxResults");
    if let Some(var_3648) = &input.max_results {
        scope_3647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3649 = writer.prefix("NextToken");
    if let Some(var_3650) = &input.next_token {
        scope_3649.string(var_3650);
    }
    #[allow(unused_mut)]
    let mut scope_3651 = writer.prefix("DryRun");
    if let Some(var_3652) = &input.dry_run {
        scope_3651.boolean(*var_3652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("TransitGatewayIds");
    if let Some(var_3654) = &input.transit_gateway_ids {
        let mut list_3656 = scope_3653.start_list(true, Some("item"));
        for item_3655 in var_3654 {
            #[allow(unused_mut)]
            let mut entry_3657 = list_3656.entry();
            entry_3657.string(item_3655);
        }
        list_3656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("Filter");
    if let Some(var_3659) = &input.filters {
        let mut list_3661 = scope_3658.start_list(true, Some("Filter"));
        for item_3660 in var_3659 {
            #[allow(unused_mut)]
            let mut entry_3662 = list_3661.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3662, item_3660)?;
        }
        list_3661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3663 = writer.prefix("MaxResults");
    if let Some(var_3664) = &input.max_results {
        scope_3663.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3664).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3665 = writer.prefix("NextToken");
    if let Some(var_3666) = &input.next_token {
        scope_3665.string(var_3666);
    }
    #[allow(unused_mut)]
    let mut scope_3667 = writer.prefix("DryRun");
    if let Some(var_3668) = &input.dry_run {
        scope_3667.boolean(*var_3668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3670) = &input.transit_gateway_attachment_ids {
        let mut list_3672 = scope_3669.start_list(true, None);
        for item_3671 in var_3670 {
            #[allow(unused_mut)]
            let mut entry_3673 = list_3672.entry();
            entry_3673.string(item_3671);
        }
        list_3672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("Filter");
    if let Some(var_3675) = &input.filters {
        let mut list_3677 = scope_3674.start_list(true, Some("Filter"));
        for item_3676 in var_3675 {
            #[allow(unused_mut)]
            let mut entry_3678 = list_3677.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3678, item_3676)?;
        }
        list_3677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("MaxResults");
    if let Some(var_3680) = &input.max_results {
        scope_3679.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3680).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("NextToken");
    if let Some(var_3682) = &input.next_token {
        scope_3681.string(var_3682);
    }
    #[allow(unused_mut)]
    let mut scope_3683 = writer.prefix("DryRun");
    if let Some(var_3684) = &input.dry_run {
        scope_3683.boolean(*var_3684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("AssociationId");
    if let Some(var_3686) = &input.association_ids {
        let mut list_3688 = scope_3685.start_list(true, Some("item"));
        for item_3687 in var_3686 {
            #[allow(unused_mut)]
            let mut entry_3689 = list_3688.entry();
            entry_3689.string(item_3687);
        }
        list_3688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("DryRun");
    if let Some(var_3691) = &input.dry_run {
        scope_3690.boolean(*var_3691);
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("Filter");
    if let Some(var_3693) = &input.filters {
        let mut list_3695 = scope_3692.start_list(true, Some("Filter"));
        for item_3694 in var_3693 {
            #[allow(unused_mut)]
            let mut entry_3696 = list_3695.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3696, item_3694)?;
        }
        list_3695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3697 = writer.prefix("NextToken");
    if let Some(var_3698) = &input.next_token {
        scope_3697.string(var_3698);
    }
    #[allow(unused_mut)]
    let mut scope_3699 = writer.prefix("MaxResults");
    if let Some(var_3700) = &input.max_results {
        scope_3699.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3700).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("Attribute");
    if let Some(var_3702) = &input.attribute {
        scope_3701.string(var_3702.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("VolumeId");
    if let Some(var_3704) = &input.volume_id {
        scope_3703.string(var_3704);
    }
    #[allow(unused_mut)]
    let mut scope_3705 = writer.prefix("DryRun");
    if let Some(var_3706) = &input.dry_run {
        scope_3705.boolean(*var_3706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("Filter");
    if let Some(var_3708) = &input.filters {
        let mut list_3710 = scope_3707.start_list(true, Some("Filter"));
        for item_3709 in var_3708 {
            #[allow(unused_mut)]
            let mut entry_3711 = list_3710.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3711, item_3709)?;
        }
        list_3710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("VolumeId");
    if let Some(var_3713) = &input.volume_ids {
        let mut list_3715 = scope_3712.start_list(true, Some("VolumeId"));
        for item_3714 in var_3713 {
            #[allow(unused_mut)]
            let mut entry_3716 = list_3715.entry();
            entry_3716.string(item_3714);
        }
        list_3715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3717 = writer.prefix("DryRun");
    if let Some(var_3718) = &input.dry_run {
        scope_3717.boolean(*var_3718);
    }
    #[allow(unused_mut)]
    let mut scope_3719 = writer.prefix("MaxResults");
    if let Some(var_3720) = &input.max_results {
        scope_3719.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3720).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3721 = writer.prefix("NextToken");
    if let Some(var_3722) = &input.next_token {
        scope_3721.string(var_3722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("DryRun");
    if let Some(var_3724) = &input.dry_run {
        scope_3723.boolean(*var_3724);
    }
    #[allow(unused_mut)]
    let mut scope_3725 = writer.prefix("VolumeId");
    if let Some(var_3726) = &input.volume_ids {
        let mut list_3728 = scope_3725.start_list(true, Some("VolumeId"));
        for item_3727 in var_3726 {
            #[allow(unused_mut)]
            let mut entry_3729 = list_3728.entry();
            entry_3729.string(item_3727);
        }
        list_3728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("Filter");
    if let Some(var_3731) = &input.filters {
        let mut list_3733 = scope_3730.start_list(true, Some("Filter"));
        for item_3732 in var_3731 {
            #[allow(unused_mut)]
            let mut entry_3734 = list_3733.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3734, item_3732)?;
        }
        list_3733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3735 = writer.prefix("NextToken");
    if let Some(var_3736) = &input.next_token {
        scope_3735.string(var_3736);
    }
    #[allow(unused_mut)]
    let mut scope_3737 = writer.prefix("MaxResults");
    if let Some(var_3738) = &input.max_results {
        scope_3737.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3738).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3739 = writer.prefix("Filter");
    if let Some(var_3740) = &input.filters {
        let mut list_3742 = scope_3739.start_list(true, Some("Filter"));
        for item_3741 in var_3740 {
            #[allow(unused_mut)]
            let mut entry_3743 = list_3742.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3743, item_3741)?;
        }
        list_3742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("MaxResults");
    if let Some(var_3745) = &input.max_results {
        scope_3744.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3745).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("NextToken");
    if let Some(var_3747) = &input.next_token {
        scope_3746.string(var_3747);
    }
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("VolumeId");
    if let Some(var_3749) = &input.volume_ids {
        let mut list_3751 = scope_3748.start_list(true, Some("VolumeId"));
        for item_3750 in var_3749 {
            #[allow(unused_mut)]
            let mut entry_3752 = list_3751.entry();
            entry_3752.string(item_3750);
        }
        list_3751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("DryRun");
    if let Some(var_3754) = &input.dry_run {
        scope_3753.boolean(*var_3754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("Attribute");
    if let Some(var_3756) = &input.attribute {
        scope_3755.string(var_3756.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3757 = writer.prefix("VpcId");
    if let Some(var_3758) = &input.vpc_id {
        scope_3757.string(var_3758);
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("DryRun");
    if let Some(var_3760) = &input.dry_run {
        scope_3759.boolean(*var_3760);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("Filter");
    if let Some(var_3762) = &input.filters {
        let mut list_3764 = scope_3761.start_list(true, Some("Filter"));
        for item_3763 in var_3762 {
            #[allow(unused_mut)]
            let mut entry_3765 = list_3764.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3765, item_3763)?;
        }
        list_3764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3766 = writer.prefix("DryRun");
    if let Some(var_3767) = &input.dry_run {
        scope_3766.boolean(*var_3767);
    }
    #[allow(unused_mut)]
    let mut scope_3768 = writer.prefix("VpcId");
    if let Some(var_3769) = &input.vpc_ids {
        let mut list_3771 = scope_3768.start_list(true, Some("VpcId"));
        for item_3770 in var_3769 {
            #[allow(unused_mut)]
            let mut entry_3772 = list_3771.entry();
            entry_3772.string(item_3770);
        }
        list_3771.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3773 = writer.prefix("MaxResults");
    if let Some(var_3774) = &input.max_results {
        scope_3773.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3774).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3775 = writer.prefix("NextToken");
    if let Some(var_3776) = &input.next_token {
        scope_3775.string(var_3776);
    }
    #[allow(unused_mut)]
    let mut scope_3777 = writer.prefix("VpcIds");
    if let Some(var_3778) = &input.vpc_ids {
        let mut list_3780 = scope_3777.start_list(true, Some("VpcId"));
        for item_3779 in var_3778 {
            #[allow(unused_mut)]
            let mut entry_3781 = list_3780.entry();
            entry_3781.string(item_3779);
        }
        list_3780.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("DryRun");
    if let Some(var_3783) = &input.dry_run {
        scope_3782.boolean(*var_3783);
    }
    #[allow(unused_mut)]
    let mut scope_3784 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3785) = &input.connection_notification_id {
        scope_3784.string(var_3785);
    }
    #[allow(unused_mut)]
    let mut scope_3786 = writer.prefix("Filter");
    if let Some(var_3787) = &input.filters {
        let mut list_3789 = scope_3786.start_list(true, Some("Filter"));
        for item_3788 in var_3787 {
            #[allow(unused_mut)]
            let mut entry_3790 = list_3789.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3790, item_3788)?;
        }
        list_3789.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("MaxResults");
    if let Some(var_3792) = &input.max_results {
        scope_3791.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3792).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("NextToken");
    if let Some(var_3794) = &input.next_token {
        scope_3793.string(var_3794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3795 = writer.prefix("DryRun");
    if let Some(var_3796) = &input.dry_run {
        scope_3795.boolean(*var_3796);
    }
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("Filter");
    if let Some(var_3798) = &input.filters {
        let mut list_3800 = scope_3797.start_list(true, Some("Filter"));
        for item_3799 in var_3798 {
            #[allow(unused_mut)]
            let mut entry_3801 = list_3800.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3801, item_3799)?;
        }
        list_3800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3802 = writer.prefix("MaxResults");
    if let Some(var_3803) = &input.max_results {
        scope_3802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3803).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3804 = writer.prefix("NextToken");
    if let Some(var_3805) = &input.next_token {
        scope_3804.string(var_3805);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3806 = writer.prefix("DryRun");
    if let Some(var_3807) = &input.dry_run {
        scope_3806.boolean(*var_3807);
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("VpcEndpointId");
    if let Some(var_3809) = &input.vpc_endpoint_ids {
        let mut list_3811 = scope_3808.start_list(true, Some("item"));
        for item_3810 in var_3809 {
            #[allow(unused_mut)]
            let mut entry_3812 = list_3811.entry();
            entry_3812.string(item_3810);
        }
        list_3811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3813 = writer.prefix("Filter");
    if let Some(var_3814) = &input.filters {
        let mut list_3816 = scope_3813.start_list(true, Some("Filter"));
        for item_3815 in var_3814 {
            #[allow(unused_mut)]
            let mut entry_3817 = list_3816.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3817, item_3815)?;
        }
        list_3816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("MaxResults");
    if let Some(var_3819) = &input.max_results {
        scope_3818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3820 = writer.prefix("NextToken");
    if let Some(var_3821) = &input.next_token {
        scope_3820.string(var_3821);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3822 = writer.prefix("DryRun");
    if let Some(var_3823) = &input.dry_run {
        scope_3822.boolean(*var_3823);
    }
    #[allow(unused_mut)]
    let mut scope_3824 = writer.prefix("ServiceId");
    if let Some(var_3825) = &input.service_ids {
        let mut list_3827 = scope_3824.start_list(true, Some("item"));
        for item_3826 in var_3825 {
            #[allow(unused_mut)]
            let mut entry_3828 = list_3827.entry();
            entry_3828.string(item_3826);
        }
        list_3827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("Filter");
    if let Some(var_3830) = &input.filters {
        let mut list_3832 = scope_3829.start_list(true, Some("Filter"));
        for item_3831 in var_3830 {
            #[allow(unused_mut)]
            let mut entry_3833 = list_3832.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3833, item_3831)?;
        }
        list_3832.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3834 = writer.prefix("MaxResults");
    if let Some(var_3835) = &input.max_results {
        scope_3834.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3835).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("NextToken");
    if let Some(var_3837) = &input.next_token {
        scope_3836.string(var_3837);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3838 = writer.prefix("DryRun");
    if let Some(var_3839) = &input.dry_run {
        scope_3838.boolean(*var_3839);
    }
    #[allow(unused_mut)]
    let mut scope_3840 = writer.prefix("ServiceId");
    if let Some(var_3841) = &input.service_id {
        scope_3840.string(var_3841);
    }
    #[allow(unused_mut)]
    let mut scope_3842 = writer.prefix("Filter");
    if let Some(var_3843) = &input.filters {
        let mut list_3845 = scope_3842.start_list(true, Some("Filter"));
        for item_3844 in var_3843 {
            #[allow(unused_mut)]
            let mut entry_3846 = list_3845.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3846, item_3844)?;
        }
        list_3845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("MaxResults");
    if let Some(var_3848) = &input.max_results {
        scope_3847.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3848).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("NextToken");
    if let Some(var_3850) = &input.next_token {
        scope_3849.string(var_3850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("DryRun");
    if let Some(var_3852) = &input.dry_run {
        scope_3851.boolean(*var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("ServiceName");
    if let Some(var_3854) = &input.service_names {
        let mut list_3856 = scope_3853.start_list(true, Some("item"));
        for item_3855 in var_3854 {
            #[allow(unused_mut)]
            let mut entry_3857 = list_3856.entry();
            entry_3857.string(item_3855);
        }
        list_3856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3858 = writer.prefix("Filter");
    if let Some(var_3859) = &input.filters {
        let mut list_3861 = scope_3858.start_list(true, Some("Filter"));
        for item_3860 in var_3859 {
            #[allow(unused_mut)]
            let mut entry_3862 = list_3861.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3862, item_3860)?;
        }
        list_3861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("MaxResults");
    if let Some(var_3864) = &input.max_results {
        scope_3863.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("NextToken");
    if let Some(var_3866) = &input.next_token {
        scope_3865.string(var_3866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("Filter");
    if let Some(var_3868) = &input.filters {
        let mut list_3870 = scope_3867.start_list(true, Some("Filter"));
        for item_3869 in var_3868 {
            #[allow(unused_mut)]
            let mut entry_3871 = list_3870.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3871, item_3869)?;
        }
        list_3870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("DryRun");
    if let Some(var_3873) = &input.dry_run {
        scope_3872.boolean(*var_3873);
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3875) = &input.vpc_peering_connection_ids {
        let mut list_3877 = scope_3874.start_list(true, Some("item"));
        for item_3876 in var_3875 {
            #[allow(unused_mut)]
            let mut entry_3878 = list_3877.entry();
            entry_3878.string(item_3876);
        }
        list_3877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3879 = writer.prefix("NextToken");
    if let Some(var_3880) = &input.next_token {
        scope_3879.string(var_3880);
    }
    #[allow(unused_mut)]
    let mut scope_3881 = writer.prefix("MaxResults");
    if let Some(var_3882) = &input.max_results {
        scope_3881.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3882).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3883 = writer.prefix("Filter");
    if let Some(var_3884) = &input.filters {
        let mut list_3886 = scope_3883.start_list(true, Some("Filter"));
        for item_3885 in var_3884 {
            #[allow(unused_mut)]
            let mut entry_3887 = list_3886.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3887, item_3885)?;
        }
        list_3886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("VpcId");
    if let Some(var_3889) = &input.vpc_ids {
        let mut list_3891 = scope_3888.start_list(true, Some("VpcId"));
        for item_3890 in var_3889 {
            #[allow(unused_mut)]
            let mut entry_3892 = list_3891.entry();
            entry_3892.string(item_3890);
        }
        list_3891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3893 = writer.prefix("DryRun");
    if let Some(var_3894) = &input.dry_run {
        scope_3893.boolean(*var_3894);
    }
    #[allow(unused_mut)]
    let mut scope_3895 = writer.prefix("NextToken");
    if let Some(var_3896) = &input.next_token {
        scope_3895.string(var_3896);
    }
    #[allow(unused_mut)]
    let mut scope_3897 = writer.prefix("MaxResults");
    if let Some(var_3898) = &input.max_results {
        scope_3897.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3898).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("Filter");
    if let Some(var_3900) = &input.filters {
        let mut list_3902 = scope_3899.start_list(true, Some("Filter"));
        for item_3901 in var_3900 {
            #[allow(unused_mut)]
            let mut entry_3903 = list_3902.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3903, item_3901)?;
        }
        list_3902.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("VpnConnectionId");
    if let Some(var_3905) = &input.vpn_connection_ids {
        let mut list_3907 = scope_3904.start_list(true, Some("VpnConnectionId"));
        for item_3906 in var_3905 {
            #[allow(unused_mut)]
            let mut entry_3908 = list_3907.entry();
            entry_3908.string(item_3906);
        }
        list_3907.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3909 = writer.prefix("DryRun");
    if let Some(var_3910) = &input.dry_run {
        scope_3909.boolean(*var_3910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("Filter");
    if let Some(var_3912) = &input.filters {
        let mut list_3914 = scope_3911.start_list(true, Some("Filter"));
        for item_3913 in var_3912 {
            #[allow(unused_mut)]
            let mut entry_3915 = list_3914.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3915, item_3913)?;
        }
        list_3914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("VpnGatewayId");
    if let Some(var_3917) = &input.vpn_gateway_ids {
        let mut list_3919 = scope_3916.start_list(true, Some("VpnGatewayId"));
        for item_3918 in var_3917 {
            #[allow(unused_mut)]
            let mut entry_3920 = list_3919.entry();
            entry_3920.string(item_3918);
        }
        list_3919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("DryRun");
    if let Some(var_3922) = &input.dry_run {
        scope_3921.boolean(*var_3922);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("DryRun");
    if let Some(var_3924) = &input.dry_run {
        scope_3923.boolean(*var_3924);
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("InstanceId");
    if let Some(var_3926) = &input.instance_id {
        scope_3925.string(var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("VpcId");
    if let Some(var_3928) = &input.vpc_id {
        scope_3927.string(var_3928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("DryRun");
    if let Some(var_3930) = &input.dry_run {
        scope_3929.boolean(*var_3930);
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("InternetGatewayId");
    if let Some(var_3932) = &input.internet_gateway_id {
        scope_3931.string(var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("VpcId");
    if let Some(var_3934) = &input.vpc_id {
        scope_3933.string(var_3934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("AttachmentId");
    if let Some(var_3936) = &input.attachment_id {
        scope_3935.string(var_3936);
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("DryRun");
    if let Some(var_3938) = &input.dry_run {
        scope_3937.boolean(*var_3938);
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("Force");
    if let Some(var_3940) = &input.force {
        scope_3939.boolean(*var_3940);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("Device");
    if let Some(var_3942) = &input.device {
        scope_3941.string(var_3942);
    }
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("Force");
    if let Some(var_3944) = &input.force {
        scope_3943.boolean(*var_3944);
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("InstanceId");
    if let Some(var_3946) = &input.instance_id {
        scope_3945.string(var_3946);
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("VolumeId");
    if let Some(var_3948) = &input.volume_id {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("DryRun");
    if let Some(var_3950) = &input.dry_run {
        scope_3949.boolean(*var_3950);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("VpcId");
    if let Some(var_3952) = &input.vpc_id {
        scope_3951.string(var_3952);
    }
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("VpnGatewayId");
    if let Some(var_3954) = &input.vpn_gateway_id {
        scope_3953.string(var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("DryRun");
    if let Some(var_3956) = &input.dry_run {
        scope_3955.boolean(*var_3956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("DryRun");
    if let Some(var_3958) = &input.dry_run {
        scope_3957.boolean(*var_3958);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("ImageId");
    if let Some(var_3960) = &input.image_id {
        scope_3959.string(var_3960);
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("Force");
    if let Some(var_3962) = &input.force {
        scope_3961.boolean(*var_3962);
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("DryRun");
    if let Some(var_3964) = &input.dry_run {
        scope_3963.boolean(*var_3964);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("AvailabilityZone");
    if let Some(var_3966) = &input.availability_zones {
        let mut list_3968 = scope_3965.start_list(true, Some("AvailabilityZone"));
        for item_3967 in var_3966 {
            #[allow(unused_mut)]
            let mut entry_3969 = list_3968.entry();
            entry_3969.string(item_3967);
        }
        list_3968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("SourceSnapshotId");
    if let Some(var_3971) = &input.source_snapshot_ids {
        let mut list_3973 = scope_3970.start_list(true, Some("SnapshotId"));
        for item_3972 in var_3971 {
            #[allow(unused_mut)]
            let mut entry_3974 = list_3973.entry();
            entry_3974.string(item_3972);
        }
        list_3973.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3975 = writer.prefix("DryRun");
    if let Some(var_3976) = &input.dry_run {
        scope_3975.boolean(*var_3976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("ImageId");
    if let Some(var_3978) = &input.image_id {
        scope_3977.string(var_3978);
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("DryRun");
    if let Some(var_3980) = &input.dry_run {
        scope_3979.boolean(*var_3980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_3984) = &input.delegated_admin_account_id {
        scope_3983.string(var_3984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3985 = writer.prefix("DryRun");
    if let Some(var_3986) = &input.dry_run {
        scope_3985.boolean(*var_3986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3988) = &input.transit_gateway_route_table_id {
        scope_3987.string(var_3988);
    }
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3990) = &input.transit_gateway_attachment_id {
        scope_3989.string(var_3990);
    }
    #[allow(unused_mut)]
    let mut scope_3991 = writer.prefix("DryRun");
    if let Some(var_3992) = &input.dry_run {
        scope_3991.boolean(*var_3992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("GatewayId");
    if let Some(var_3994) = &input.gateway_id {
        scope_3993.string(var_3994);
    }
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("RouteTableId");
    if let Some(var_3996) = &input.route_table_id {
        scope_3995.string(var_3996);
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("DryRun");
    if let Some(var_3998) = &input.dry_run {
        scope_3997.boolean(*var_3998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("DryRun");
    if let Some(var_4000) = &input.dry_run {
        scope_3999.boolean(*var_4000);
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("VpcId");
    if let Some(var_4002) = &input.vpc_id {
        scope_4001.string(var_4002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("VpcId");
    if let Some(var_4004) = &input.vpc_id {
        scope_4003.string(var_4004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("AssociationId");
    if let Some(var_4006) = &input.association_id {
        scope_4005.string(var_4006);
    }
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("PublicIp");
    if let Some(var_4008) = &input.public_ip {
        scope_4007.string(var_4008);
    }
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("DryRun");
    if let Some(var_4010) = &input.dry_run {
        scope_4009.boolean(*var_4010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4012) = &input.client_vpn_endpoint_id {
        scope_4011.string(var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("AssociationId");
    if let Some(var_4014) = &input.association_id {
        scope_4013.string(var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("DryRun");
    if let Some(var_4016) = &input.dry_run {
        scope_4015.boolean(*var_4016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("CertificateArn");
    if let Some(var_4018) = &input.certificate_arn {
        scope_4017.string(var_4018);
    }
    #[allow(unused_mut)]
    let mut scope_4019 = writer.prefix("RoleArn");
    if let Some(var_4020) = &input.role_arn {
        scope_4019.string(var_4020);
    }
    #[allow(unused_mut)]
    let mut scope_4021 = writer.prefix("DryRun");
    if let Some(var_4022) = &input.dry_run {
        scope_4021.boolean(*var_4022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4023 = writer.prefix("AssociationId");
    if let Some(var_4024) = &input.association_id {
        scope_4023.string(var_4024);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4025 = writer.prefix("DryRun");
    if let Some(var_4026) = &input.dry_run {
        scope_4025.boolean(*var_4026);
    }
    #[allow(unused_mut)]
    let mut scope_4027 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4028) = &input.instance_event_window_id {
        scope_4027.string(var_4028);
    }
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("AssociationTarget");
    if let Some(var_4030) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4029, var_4030)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("AssociationId");
    if let Some(var_4032) = &input.association_id {
        scope_4031.string(var_4032);
    }
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("DryRun");
    if let Some(var_4034) = &input.dry_run {
        scope_4033.boolean(*var_4034);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("AssociationId");
    if let Some(var_4036) = &input.association_id {
        scope_4035.string(var_4036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4037 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4038) = &input.transit_gateway_multicast_domain_id {
        scope_4037.string(var_4038);
    }
    #[allow(unused_mut)]
    let mut scope_4039 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4040) = &input.transit_gateway_attachment_id {
        scope_4039.string(var_4040);
    }
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("SubnetIds");
    if let Some(var_4042) = &input.subnet_ids {
        let mut list_4044 = scope_4041.start_list(true, Some("item"));
        for item_4043 in var_4042 {
            #[allow(unused_mut)]
            let mut entry_4045 = list_4044.entry();
            entry_4045.string(item_4043);
        }
        list_4044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4049) = &input.transit_gateway_route_table_id {
        scope_4048.string(var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4051) = &input.transit_gateway_attachment_id {
        scope_4050.string(var_4051);
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("DryRun");
    if let Some(var_4053) = &input.dry_run {
        scope_4052.boolean(*var_4053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("AssociationId");
    if let Some(var_4055) = &input.association_id {
        scope_4054.string(var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("ClientToken");
    if let Some(var_4057) = &input.client_token {
        scope_4056.string(var_4057);
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("DryRun");
    if let Some(var_4059) = &input.dry_run {
        scope_4058.boolean(*var_4059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("AssociationId");
    if let Some(var_4061) = &input.association_id {
        scope_4060.string(var_4061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("DryRun");
    if let Some(var_4063) = &input.dry_run {
        scope_4062.boolean(*var_4063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("ImageId");
    if let Some(var_4065) = &input.image_id {
        scope_4064.string(var_4065);
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("ResourceType");
    if let Some(var_4067) = &input.resource_type {
        scope_4066.string(var_4067);
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4069) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4068, var_4069)?;
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("LaunchTemplate");
    if let Some(var_4071) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4070, var_4071)?;
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4073) = &input.max_parallel_launches {
        scope_4072.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4073).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("DryRun");
    if let Some(var_4075) = &input.dry_run {
        scope_4074.boolean(*var_4075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("AvailabilityZone");
    if let Some(var_4077) = &input.availability_zones {
        let mut list_4079 = scope_4076.start_list(true, Some("AvailabilityZone"));
        for item_4078 in var_4077 {
            #[allow(unused_mut)]
            let mut entry_4080 = list_4079.entry();
            entry_4080.string(item_4078);
        }
        list_4079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("SourceSnapshotId");
    if let Some(var_4082) = &input.source_snapshot_ids {
        let mut list_4084 = scope_4081.start_list(true, Some("SnapshotId"));
        for item_4083 in var_4082 {
            #[allow(unused_mut)]
            let mut entry_4085 = list_4084.entry();
            entry_4085.string(item_4083);
        }
        list_4084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("DryRun");
    if let Some(var_4087) = &input.dry_run {
        scope_4086.boolean(*var_4087);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("ImageId");
    if let Some(var_4089) = &input.image_id {
        scope_4088.string(var_4089);
    }
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("DeprecateAt");
    if let Some(var_4091) = &input.deprecate_at {
        scope_4090.date_time(var_4091, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("DryRun");
    if let Some(var_4093) = &input.dry_run {
        scope_4092.boolean(*var_4093);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("DryRun");
    if let Some(var_4095) = &input.dry_run {
        scope_4094.boolean(*var_4095);
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4097) = &input.delegated_admin_account_id {
        scope_4096.string(var_4097);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("DryRun");
    if let Some(var_4099) = &input.dry_run {
        scope_4098.boolean(*var_4099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4101) = &input.transit_gateway_route_table_id {
        scope_4100.string(var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4103) = &input.transit_gateway_attachment_id {
        scope_4102.string(var_4103);
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("DryRun");
    if let Some(var_4105) = &input.dry_run {
        scope_4104.boolean(*var_4105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("GatewayId");
    if let Some(var_4107) = &input.gateway_id {
        scope_4106.string(var_4107);
    }
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("RouteTableId");
    if let Some(var_4109) = &input.route_table_id {
        scope_4108.string(var_4109);
    }
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("DryRun");
    if let Some(var_4111) = &input.dry_run {
        scope_4110.boolean(*var_4111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("DryRun");
    if let Some(var_4113) = &input.dry_run {
        scope_4112.boolean(*var_4113);
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("VolumeId");
    if let Some(var_4115) = &input.volume_id {
        scope_4114.string(var_4115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("DryRun");
    if let Some(var_4117) = &input.dry_run {
        scope_4116.boolean(*var_4117);
    }
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("VpcId");
    if let Some(var_4119) = &input.vpc_id {
        scope_4118.string(var_4119);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("VpcId");
    if let Some(var_4121) = &input.vpc_id {
        scope_4120.string(var_4121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4123) = &input.client_vpn_endpoint_id {
        scope_4122.string(var_4123);
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("DryRun");
    if let Some(var_4125) = &input.dry_run {
        scope_4124.boolean(*var_4125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4127) = &input.client_vpn_endpoint_id {
        scope_4126.string(var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("DryRun");
    if let Some(var_4129) = &input.dry_run {
        scope_4128.boolean(*var_4129);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("ClientToken");
    if let Some(var_4131) = &input.client_token {
        scope_4130.string(var_4131);
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("Description");
    if let Some(var_4133) = &input.description {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("DiskImageFormat");
    if let Some(var_4135) = &input.disk_image_format {
        scope_4134.string(var_4135.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("DryRun");
    if let Some(var_4137) = &input.dry_run {
        scope_4136.boolean(*var_4137);
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("ImageId");
    if let Some(var_4139) = &input.image_id {
        scope_4138.string(var_4139);
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("S3ExportLocation");
    if let Some(var_4141) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4140, var_4141,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("RoleName");
    if let Some(var_4143) = &input.role_name {
        scope_4142.string(var_4143);
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("TagSpecification");
    if let Some(var_4145) = &input.tag_specifications {
        let mut list_4147 = scope_4144.start_list(true, Some("item"));
        for item_4146 in var_4145 {
            #[allow(unused_mut)]
            let mut entry_4148 = list_4147.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4148, item_4146,
            )?;
        }
        list_4147.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4150) = &input.transit_gateway_route_table_id {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("Filter");
    if let Some(var_4152) = &input.filters {
        let mut list_4154 = scope_4151.start_list(true, Some("Filter"));
        for item_4153 in var_4152 {
            #[allow(unused_mut)]
            let mut entry_4155 = list_4154.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4155, item_4153)?;
        }
        list_4154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4156 = writer.prefix("S3Bucket");
    if let Some(var_4157) = &input.s3_bucket {
        scope_4156.string(var_4157);
    }
    #[allow(unused_mut)]
    let mut scope_4158 = writer.prefix("DryRun");
    if let Some(var_4159) = &input.dry_run {
        scope_4158.boolean(*var_4159);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4160 = writer.prefix("CertificateArn");
    if let Some(var_4161) = &input.certificate_arn {
        scope_4160.string(var_4161);
    }
    #[allow(unused_mut)]
    let mut scope_4162 = writer.prefix("DryRun");
    if let Some(var_4163) = &input.dry_run {
        scope_4162.boolean(*var_4163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4164 = writer.prefix("PoolId");
    if let Some(var_4165) = &input.pool_id {
        scope_4164.string(var_4165);
    }
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("NextToken");
    if let Some(var_4167) = &input.next_token {
        scope_4166.string(var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("MaxResults");
    if let Some(var_4169) = &input.max_results {
        scope_4168.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("DryRun");
    if let Some(var_4171) = &input.dry_run {
        scope_4170.boolean(*var_4171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("CapacityReservationId");
    if let Some(var_4173) = &input.capacity_reservation_id {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("NextToken");
    if let Some(var_4175) = &input.next_token {
        scope_4174.string(var_4175);
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("MaxResults");
    if let Some(var_4177) = &input.max_results {
        scope_4176.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4177).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("DryRun");
    if let Some(var_4179) = &input.dry_run {
        scope_4178.boolean(*var_4179);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("PoolId");
    if let Some(var_4181) = &input.pool_id {
        scope_4180.string(var_4181);
    }
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("Filter");
    if let Some(var_4183) = &input.filters {
        let mut list_4185 = scope_4182.start_list(true, Some("Filter"));
        for item_4184 in var_4183 {
            #[allow(unused_mut)]
            let mut entry_4186 = list_4185.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4186, item_4184)?;
        }
        list_4185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("MaxResults");
    if let Some(var_4188) = &input.max_results {
        scope_4187.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4188).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("NextToken");
    if let Some(var_4190) = &input.next_token {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("DryRun");
    if let Some(var_4192) = &input.dry_run {
        scope_4191.boolean(*var_4192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("InstanceId");
    if let Some(var_4194) = &input.instance_id {
        scope_4193.string(var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DryRun");
    if let Some(var_4196) = &input.dry_run {
        scope_4195.boolean(*var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Latest");
    if let Some(var_4198) = &input.latest {
        scope_4197.boolean(*var_4198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("DryRun");
    if let Some(var_4200) = &input.dry_run {
        scope_4199.boolean(*var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("InstanceId");
    if let Some(var_4202) = &input.instance_id {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("WakeUp");
    if let Some(var_4204) = &input.wake_up {
        scope_4203.boolean(*var_4204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("DryRun");
    if let Some(var_4206) = &input.dry_run {
        scope_4205.boolean(*var_4206);
    }
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("InstanceFamily");
    if let Some(var_4208) = &input.instance_family {
        scope_4207.string(var_4208.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("DryRun");
    if let Some(var_4210) = &input.dry_run {
        scope_4209.boolean(*var_4210);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("DryRun");
    if let Some(var_4212) = &input.dry_run {
        scope_4211.boolean(*var_4212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("DryRun");
    if let Some(var_4214) = &input.dry_run {
        scope_4213.boolean(*var_4214);
    }
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("FlowLogId");
    if let Some(var_4216) = &input.flow_log_id {
        scope_4215.string(var_4216);
    }
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4218) = &input.config_delivery_s3_destination_arn {
        scope_4217.string(var_4218);
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("IntegrateService");
    if let Some(var_4220) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4219, var_4220)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("CapacityReservationId");
    if let Some(var_4222) = &input.capacity_reservation_id {
        scope_4221.string(var_4222);
    }
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("NextToken");
    if let Some(var_4224) = &input.next_token {
        scope_4223.string(var_4224);
    }
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("MaxResults");
    if let Some(var_4226) = &input.max_results {
        scope_4225.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("DryRun");
    if let Some(var_4228) = &input.dry_run {
        scope_4227.boolean(*var_4228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("HostIdSet");
    if let Some(var_4230) = &input.host_id_set {
        let mut list_4232 = scope_4229.start_list(true, Some("item"));
        for item_4231 in var_4230 {
            #[allow(unused_mut)]
            let mut entry_4233 = list_4232.entry();
            entry_4233.string(item_4231);
        }
        list_4232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("OfferingId");
    if let Some(var_4235) = &input.offering_id {
        scope_4234.string(var_4235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("DryRun");
    if let Some(var_4237) = &input.dry_run {
        scope_4236.boolean(*var_4237);
    }
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("ArchitectureType");
    if let Some(var_4239) = &input.architecture_types {
        let mut list_4241 = scope_4238.start_list(true, Some("item"));
        for item_4240 in var_4239 {
            #[allow(unused_mut)]
            let mut entry_4242 = list_4241.entry();
            entry_4242.string(item_4240.as_str());
        }
        list_4241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("VirtualizationType");
    if let Some(var_4244) = &input.virtualization_types {
        let mut list_4246 = scope_4243.start_list(true, Some("item"));
        for item_4245 in var_4244 {
            #[allow(unused_mut)]
            let mut entry_4247 = list_4246.entry();
            entry_4247.string(item_4245.as_str());
        }
        list_4246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4248 = writer.prefix("InstanceRequirements");
    if let Some(var_4249) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4248, var_4249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("MaxResults");
    if let Some(var_4251) = &input.max_results {
        scope_4250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("NextToken");
    if let Some(var_4253) = &input.next_token {
        scope_4252.string(var_4253);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("DryRun");
    if let Some(var_4255) = &input.dry_run {
        scope_4254.boolean(*var_4255);
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("Cidr");
    if let Some(var_4257) = &input.cidr {
        scope_4256.string(var_4257);
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("IpamScopeId");
    if let Some(var_4259) = &input.ipam_scope_id {
        scope_4258.string(var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("VpcId");
    if let Some(var_4261) = &input.vpc_id {
        scope_4260.string(var_4261);
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("StartTime");
    if let Some(var_4263) = &input.start_time {
        scope_4262.date_time(var_4263, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("EndTime");
    if let Some(var_4265) = &input.end_time {
        scope_4264.date_time(var_4265, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("MaxResults");
    if let Some(var_4267) = &input.max_results {
        scope_4266.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4267).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("NextToken");
    if let Some(var_4269) = &input.next_token {
        scope_4268.string(var_4269);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("DryRun");
    if let Some(var_4271) = &input.dry_run {
        scope_4270.boolean(*var_4271);
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("IpamPoolId");
    if let Some(var_4273) = &input.ipam_pool_id {
        scope_4272.string(var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4275) = &input.ipam_pool_allocation_id {
        scope_4274.string(var_4275);
    }
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("Filter");
    if let Some(var_4277) = &input.filters {
        let mut list_4279 = scope_4276.start_list(true, Some("Filter"));
        for item_4278 in var_4277 {
            #[allow(unused_mut)]
            let mut entry_4280 = list_4279.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4280, item_4278)?;
        }
        list_4279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("MaxResults");
    if let Some(var_4282) = &input.max_results {
        scope_4281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("NextToken");
    if let Some(var_4284) = &input.next_token {
        scope_4283.string(var_4284);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("DryRun");
    if let Some(var_4286) = &input.dry_run {
        scope_4285.boolean(*var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("IpamPoolId");
    if let Some(var_4288) = &input.ipam_pool_id {
        scope_4287.string(var_4288);
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("Filter");
    if let Some(var_4290) = &input.filters {
        let mut list_4292 = scope_4289.start_list(true, Some("Filter"));
        for item_4291 in var_4290 {
            #[allow(unused_mut)]
            let mut entry_4293 = list_4292.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4293, item_4291)?;
        }
        list_4292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4294 = writer.prefix("MaxResults");
    if let Some(var_4295) = &input.max_results {
        scope_4294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4296 = writer.prefix("NextToken");
    if let Some(var_4297) = &input.next_token {
        scope_4296.string(var_4297);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4298 = writer.prefix("DryRun");
    if let Some(var_4299) = &input.dry_run {
        scope_4298.boolean(*var_4299);
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("Filter");
    if let Some(var_4301) = &input.filters {
        let mut list_4303 = scope_4300.start_list(true, Some("Filter"));
        for item_4302 in var_4301 {
            #[allow(unused_mut)]
            let mut entry_4304 = list_4303.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4304, item_4302)?;
        }
        list_4303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4305 = writer.prefix("MaxResults");
    if let Some(var_4306) = &input.max_results {
        scope_4305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4307 = writer.prefix("NextToken");
    if let Some(var_4308) = &input.next_token {
        scope_4307.string(var_4308);
    }
    #[allow(unused_mut)]
    let mut scope_4309 = writer.prefix("IpamScopeId");
    if let Some(var_4310) = &input.ipam_scope_id {
        scope_4309.string(var_4310);
    }
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("IpamPoolId");
    if let Some(var_4312) = &input.ipam_pool_id {
        scope_4311.string(var_4312);
    }
    #[allow(unused_mut)]
    let mut scope_4313 = writer.prefix("ResourceId");
    if let Some(var_4314) = &input.resource_id {
        scope_4313.string(var_4314);
    }
    #[allow(unused_mut)]
    let mut scope_4315 = writer.prefix("ResourceType");
    if let Some(var_4316) = &input.resource_type {
        scope_4315.string(var_4316.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("ResourceTag");
    if let Some(var_4318) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4317, var_4318,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("ResourceOwner");
    if let Some(var_4320) = &input.resource_owner {
        scope_4319.string(var_4320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("DryRun");
    if let Some(var_4322) = &input.dry_run {
        scope_4321.boolean(*var_4322);
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("InstanceId");
    if let Some(var_4324) = &input.instance_id {
        scope_4323.string(var_4324);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("DryRun");
    if let Some(var_4326) = &input.dry_run {
        scope_4325.boolean(*var_4326);
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("PrefixListId");
    if let Some(var_4328) = &input.prefix_list_id {
        scope_4327.string(var_4328);
    }
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("MaxResults");
    if let Some(var_4330) = &input.max_results {
        scope_4329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("NextToken");
    if let Some(var_4332) = &input.next_token {
        scope_4331.string(var_4332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("DryRun");
    if let Some(var_4334) = &input.dry_run {
        scope_4333.boolean(*var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("PrefixListId");
    if let Some(var_4336) = &input.prefix_list_id {
        scope_4335.string(var_4336);
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("TargetVersion");
    if let Some(var_4338) = &input.target_version {
        scope_4337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("MaxResults");
    if let Some(var_4340) = &input.max_results {
        scope_4339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("NextToken");
    if let Some(var_4342) = &input.next_token {
        scope_4341.string(var_4342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4344) = &input.network_insights_access_scope_analysis_id {
        scope_4343.string(var_4344);
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("MaxResults");
    if let Some(var_4346) = &input.max_results {
        scope_4345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("NextToken");
    if let Some(var_4348) = &input.next_token {
        scope_4347.string(var_4348);
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("DryRun");
    if let Some(var_4350) = &input.dry_run {
        scope_4349.boolean(*var_4350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4352) = &input.network_insights_access_scope_id {
        scope_4351.string(var_4352);
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("DryRun");
    if let Some(var_4354) = &input.dry_run {
        scope_4353.boolean(*var_4354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("InstanceId");
    if let Some(var_4356) = &input.instance_id {
        scope_4355.string(var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("DryRun");
    if let Some(var_4358) = &input.dry_run {
        scope_4357.boolean(*var_4358);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("DryRun");
    if let Some(var_4360) = &input.dry_run {
        scope_4359.boolean(*var_4360);
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("ReservedInstanceId");
    if let Some(var_4362) = &input.reserved_instance_ids {
        let mut list_4364 = scope_4361.start_list(true, Some("ReservedInstanceId"));
        for item_4363 in var_4362 {
            #[allow(unused_mut)]
            let mut entry_4365 = list_4364.entry();
            entry_4365.string(item_4363);
        }
        list_4364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("TargetConfiguration");
    if let Some(var_4367) = &input.target_configurations {
        let mut list_4369 = scope_4366.start_list(true, Some("TargetConfigurationRequest"));
        for item_4368 in var_4367 {
            #[allow(unused_mut)]
            let mut entry_4370 = list_4369.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4370, item_4368,
            )?;
        }
        list_4369.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4371 = writer.prefix("DryRun");
    if let Some(var_4372) = &input.dry_run {
        scope_4371.boolean(*var_4372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("InstanceType");
    if let Some(var_4374) = &input.instance_types {
        let mut list_4376 = scope_4373.start_list(true, None);
        for item_4375 in var_4374 {
            #[allow(unused_mut)]
            let mut entry_4377 = list_4376.entry();
            entry_4377.string(item_4375);
        }
        list_4376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("TargetCapacity");
    if let Some(var_4379) = &input.target_capacity {
        scope_4378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4381) = &input.target_capacity_unit_type {
        scope_4380.string(var_4381.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4383) = &input.single_availability_zone {
        scope_4382.boolean(*var_4383);
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("RegionName");
    if let Some(var_4385) = &input.region_names {
        let mut list_4387 = scope_4384.start_list(true, None);
        for item_4386 in var_4385 {
            #[allow(unused_mut)]
            let mut entry_4388 = list_4387.entry();
            entry_4388.string(item_4386);
        }
        list_4387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4390) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4389, var_4390)?;
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("DryRun");
    if let Some(var_4392) = &input.dry_run {
        scope_4391.boolean(*var_4392);
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("MaxResults");
    if let Some(var_4394) = &input.max_results {
        scope_4393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("NextToken");
    if let Some(var_4396) = &input.next_token {
        scope_4395.string(var_4396);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4397 = writer.prefix("Filter");
    if let Some(var_4398) = &input.filters {
        let mut list_4400 = scope_4397.start_list(true, Some("Filter"));
        for item_4399 in var_4398 {
            #[allow(unused_mut)]
            let mut entry_4401 = list_4400.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4401, item_4399)?;
        }
        list_4400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4402 = writer.prefix("SubnetId");
    if let Some(var_4403) = &input.subnet_id {
        scope_4402.string(var_4403);
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("DryRun");
    if let Some(var_4405) = &input.dry_run {
        scope_4404.boolean(*var_4405);
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("NextToken");
    if let Some(var_4407) = &input.next_token {
        scope_4406.string(var_4407);
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("MaxResults");
    if let Some(var_4409) = &input.max_results {
        scope_4408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4409).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4411) = &input.transit_gateway_attachment_id {
        scope_4410.string(var_4411);
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("Filter");
    if let Some(var_4413) = &input.filters {
        let mut list_4415 = scope_4412.start_list(true, Some("Filter"));
        for item_4414 in var_4413 {
            #[allow(unused_mut)]
            let mut entry_4416 = list_4415.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4416, item_4414)?;
        }
        list_4415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4417 = writer.prefix("MaxResults");
    if let Some(var_4418) = &input.max_results {
        scope_4417.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4418).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4419 = writer.prefix("NextToken");
    if let Some(var_4420) = &input.next_token {
        scope_4419.string(var_4420);
    }
    #[allow(unused_mut)]
    let mut scope_4421 = writer.prefix("DryRun");
    if let Some(var_4422) = &input.dry_run {
        scope_4421.boolean(*var_4422);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4424) = &input.transit_gateway_multicast_domain_id {
        scope_4423.string(var_4424);
    }
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("Filter");
    if let Some(var_4426) = &input.filters {
        let mut list_4428 = scope_4425.start_list(true, Some("Filter"));
        for item_4427 in var_4426 {
            #[allow(unused_mut)]
            let mut entry_4429 = list_4428.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4429, item_4427)?;
        }
        list_4428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4430 = writer.prefix("MaxResults");
    if let Some(var_4431) = &input.max_results {
        scope_4430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4432 = writer.prefix("NextToken");
    if let Some(var_4433) = &input.next_token {
        scope_4432.string(var_4433);
    }
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("DryRun");
    if let Some(var_4435) = &input.dry_run {
        scope_4434.boolean(*var_4435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4437) = &input.transit_gateway_route_table_id {
        scope_4436.string(var_4437);
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("Filter");
    if let Some(var_4439) = &input.filters {
        let mut list_4441 = scope_4438.start_list(true, Some("Filter"));
        for item_4440 in var_4439 {
            #[allow(unused_mut)]
            let mut entry_4442 = list_4441.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4442, item_4440)?;
        }
        list_4441.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("MaxResults");
    if let Some(var_4444) = &input.max_results {
        scope_4443.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4444).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("NextToken");
    if let Some(var_4446) = &input.next_token {
        scope_4445.string(var_4446);
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("DryRun");
    if let Some(var_4448) = &input.dry_run {
        scope_4447.boolean(*var_4448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4450) = &input.transit_gateway_route_table_id {
        scope_4449.string(var_4450);
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("Filter");
    if let Some(var_4452) = &input.filters {
        let mut list_4454 = scope_4451.start_list(true, Some("Filter"));
        for item_4453 in var_4452 {
            #[allow(unused_mut)]
            let mut entry_4455 = list_4454.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4455, item_4453)?;
        }
        list_4454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("MaxResults");
    if let Some(var_4457) = &input.max_results {
        scope_4456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4457).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("NextToken");
    if let Some(var_4459) = &input.next_token {
        scope_4458.string(var_4459);
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("DryRun");
    if let Some(var_4461) = &input.dry_run {
        scope_4460.boolean(*var_4461);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4463) = &input.transit_gateway_route_table_id {
        scope_4462.string(var_4463);
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("Filter");
    if let Some(var_4465) = &input.filters {
        let mut list_4467 = scope_4464.start_list(true, Some("Filter"));
        for item_4466 in var_4465 {
            #[allow(unused_mut)]
            let mut entry_4468 = list_4467.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4468, item_4466)?;
        }
        list_4467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4469 = writer.prefix("MaxResults");
    if let Some(var_4470) = &input.max_results {
        scope_4469.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4470).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4471 = writer.prefix("NextToken");
    if let Some(var_4472) = &input.next_token {
        scope_4471.string(var_4472);
    }
    #[allow(unused_mut)]
    let mut scope_4473 = writer.prefix("DryRun");
    if let Some(var_4474) = &input.dry_run {
        scope_4473.boolean(*var_4474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4475 = writer.prefix("VpnConnectionId");
    if let Some(var_4476) = &input.vpn_connection_id {
        scope_4475.string(var_4476);
    }
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4478) = &input.vpn_connection_device_type_id {
        scope_4477.string(var_4478);
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4480) = &input.internet_key_exchange_version {
        scope_4479.string(var_4480);
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("DryRun");
    if let Some(var_4482) = &input.dry_run {
        scope_4481.boolean(*var_4482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("MaxResults");
    if let Some(var_4484) = &input.max_results {
        scope_4483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("NextToken");
    if let Some(var_4486) = &input.next_token {
        scope_4485.string(var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("DryRun");
    if let Some(var_4488) = &input.dry_run {
        scope_4487.boolean(*var_4488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4490) = &input.client_vpn_endpoint_id {
        scope_4489.string(var_4490);
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("CertificateRevocationList");
    if let Some(var_4492) = &input.certificate_revocation_list {
        scope_4491.string(var_4492);
    }
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("DryRun");
    if let Some(var_4494) = &input.dry_run {
        scope_4493.boolean(*var_4494);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("Architecture");
    if let Some(var_4496) = &input.architecture {
        scope_4495.string(var_4496);
    }
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("ClientData");
    if let Some(var_4498) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4497, var_4498)?;
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("ClientToken");
    if let Some(var_4500) = &input.client_token {
        scope_4499.string(var_4500);
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("Description");
    if let Some(var_4502) = &input.description {
        scope_4501.string(var_4502);
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("DiskContainer");
    if let Some(var_4504) = &input.disk_containers {
        let mut list_4506 = scope_4503.start_list(true, Some("item"));
        for item_4505 in var_4504 {
            #[allow(unused_mut)]
            let mut entry_4507 = list_4506.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4507, item_4505,
            )?;
        }
        list_4506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("DryRun");
    if let Some(var_4509) = &input.dry_run {
        scope_4508.boolean(*var_4509);
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("Encrypted");
    if let Some(var_4511) = &input.encrypted {
        scope_4510.boolean(*var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("Hypervisor");
    if let Some(var_4513) = &input.hypervisor {
        scope_4512.string(var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("KmsKeyId");
    if let Some(var_4515) = &input.kms_key_id {
        scope_4514.string(var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("LicenseType");
    if let Some(var_4517) = &input.license_type {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("Platform");
    if let Some(var_4519) = &input.platform {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("RoleName");
    if let Some(var_4521) = &input.role_name {
        scope_4520.string(var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("LicenseSpecifications");
    if let Some(var_4523) = &input.license_specifications {
        let mut list_4525 = scope_4522.start_list(true, Some("item"));
        for item_4524 in var_4523 {
            #[allow(unused_mut)]
            let mut entry_4526 = list_4525.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4526, item_4524)?;
        }
        list_4525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4527 = writer.prefix("TagSpecification");
    if let Some(var_4528) = &input.tag_specifications {
        let mut list_4530 = scope_4527.start_list(true, Some("item"));
        for item_4529 in var_4528 {
            #[allow(unused_mut)]
            let mut entry_4531 = list_4530.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4531, item_4529,
            )?;
        }
        list_4530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("UsageOperation");
    if let Some(var_4533) = &input.usage_operation {
        scope_4532.string(var_4533);
    }
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("BootMode");
    if let Some(var_4535) = &input.boot_mode {
        scope_4534.string(var_4535.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4536 = writer.prefix("Description");
    if let Some(var_4537) = &input.description {
        scope_4536.string(var_4537);
    }
    #[allow(unused_mut)]
    let mut scope_4538 = writer.prefix("DiskImage");
    if let Some(var_4539) = &input.disk_images {
        let mut list_4541 = scope_4538.start_list(true, None);
        for item_4540 in var_4539 {
            #[allow(unused_mut)]
            let mut entry_4542 = list_4541.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4542, item_4540)?;
        }
        list_4541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("DryRun");
    if let Some(var_4544) = &input.dry_run {
        scope_4543.boolean(*var_4544);
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("LaunchSpecification");
    if let Some(var_4546) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4545, var_4546,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("Platform");
    if let Some(var_4548) = &input.platform {
        scope_4547.string(var_4548.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("DryRun");
    if let Some(var_4550) = &input.dry_run {
        scope_4549.boolean(*var_4550);
    }
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("KeyName");
    if let Some(var_4552) = &input.key_name {
        scope_4551.string(var_4552);
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4554) = &input.public_key_material {
        scope_4553.string(&aws_smithy_types::base64::encode(var_4554));
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("TagSpecification");
    if let Some(var_4556) = &input.tag_specifications {
        let mut list_4558 = scope_4555.start_list(true, Some("item"));
        for item_4557 in var_4556 {
            #[allow(unused_mut)]
            let mut entry_4559 = list_4558.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4559, item_4557,
            )?;
        }
        list_4558.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4560 = writer.prefix("ClientData");
    if let Some(var_4561) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4560, var_4561)?;
    }
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("ClientToken");
    if let Some(var_4563) = &input.client_token {
        scope_4562.string(var_4563);
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("Description");
    if let Some(var_4565) = &input.description {
        scope_4564.string(var_4565);
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("DiskContainer");
    if let Some(var_4567) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4566, var_4567,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("DryRun");
    if let Some(var_4569) = &input.dry_run {
        scope_4568.boolean(*var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("Encrypted");
    if let Some(var_4571) = &input.encrypted {
        scope_4570.boolean(*var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("KmsKeyId");
    if let Some(var_4573) = &input.kms_key_id {
        scope_4572.string(var_4573);
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("RoleName");
    if let Some(var_4575) = &input.role_name {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("TagSpecification");
    if let Some(var_4577) = &input.tag_specifications {
        let mut list_4579 = scope_4576.start_list(true, Some("item"));
        for item_4578 in var_4577 {
            #[allow(unused_mut)]
            let mut entry_4580 = list_4579.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4580, item_4578,
            )?;
        }
        list_4579.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("AvailabilityZone");
    if let Some(var_4582) = &input.availability_zone {
        scope_4581.string(var_4582);
    }
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("Description");
    if let Some(var_4584) = &input.description {
        scope_4583.string(var_4584);
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("DryRun");
    if let Some(var_4586) = &input.dry_run {
        scope_4585.boolean(*var_4586);
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("Image");
    if let Some(var_4588) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4587, var_4588)?;
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("Volume");
    if let Some(var_4590) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4589, var_4590)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("ImageId");
    if let Some(var_4592) = &input.image_ids {
        let mut list_4594 = scope_4591.start_list(true, Some("ImageId"));
        for item_4593 in var_4592 {
            #[allow(unused_mut)]
            let mut entry_4595 = list_4594.entry();
            entry_4595.string(item_4593);
        }
        list_4594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4596 = writer.prefix("NextToken");
    if let Some(var_4597) = &input.next_token {
        scope_4596.string(var_4597);
    }
    #[allow(unused_mut)]
    let mut scope_4598 = writer.prefix("MaxResults");
    if let Some(var_4599) = &input.max_results {
        scope_4598.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4599).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("DryRun");
    if let Some(var_4601) = &input.dry_run {
        scope_4600.boolean(*var_4601);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("MaxResults");
    if let Some(var_4603) = &input.max_results {
        scope_4602.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4603).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("NextToken");
    if let Some(var_4605) = &input.next_token {
        scope_4604.string(var_4605);
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("SnapshotId");
    if let Some(var_4607) = &input.snapshot_ids {
        let mut list_4609 = scope_4606.start_list(true, Some("SnapshotId"));
        for item_4608 in var_4607 {
            #[allow(unused_mut)]
            let mut entry_4610 = list_4609.entry();
            entry_4610.string(item_4608);
        }
        list_4609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("DryRun");
    if let Some(var_4612) = &input.dry_run {
        scope_4611.boolean(*var_4612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("AllocationId");
    if let Some(var_4614) = &input.allocation_id {
        scope_4613.string(var_4614);
    }
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("DomainName");
    if let Some(var_4616) = &input.domain_name {
        scope_4615.string(var_4616);
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("DryRun");
    if let Some(var_4618) = &input.dry_run {
        scope_4617.boolean(*var_4618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("GroupName");
    if let Some(var_4620) = &input.group_name {
        scope_4619.string(var_4620);
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("OptInStatus");
    if let Some(var_4622) = &input.opt_in_status {
        scope_4621.string(var_4622.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("DryRun");
    if let Some(var_4624) = &input.dry_run {
        scope_4623.boolean(*var_4624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("CapacityReservationId");
    if let Some(var_4626) = &input.capacity_reservation_id {
        scope_4625.string(var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("InstanceCount");
    if let Some(var_4628) = &input.instance_count {
        scope_4627.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4628).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("EndDate");
    if let Some(var_4630) = &input.end_date {
        scope_4629.date_time(var_4630, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("EndDateType");
    if let Some(var_4632) = &input.end_date_type {
        scope_4631.string(var_4632.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("Accept");
    if let Some(var_4634) = &input.accept {
        scope_4633.boolean(*var_4634);
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("DryRun");
    if let Some(var_4636) = &input.dry_run {
        scope_4635.boolean(*var_4636);
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("AdditionalInfo");
    if let Some(var_4638) = &input.additional_info {
        scope_4637.string(var_4638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4640) = &input.capacity_reservation_fleet_id {
        scope_4639.string(var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4642) = &input.total_target_capacity {
        scope_4641.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4642).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("EndDate");
    if let Some(var_4644) = &input.end_date {
        scope_4643.date_time(var_4644, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("DryRun");
    if let Some(var_4646) = &input.dry_run {
        scope_4645.boolean(*var_4646);
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("RemoveEndDate");
    if let Some(var_4648) = &input.remove_end_date {
        scope_4647.boolean(*var_4648);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4650) = &input.client_vpn_endpoint_id {
        scope_4649.string(var_4650);
    }
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("ServerCertificateArn");
    if let Some(var_4652) = &input.server_certificate_arn {
        scope_4651.string(var_4652);
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4654) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4653, var_4654,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("DnsServers");
    if let Some(var_4656) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4655, var_4656,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("VpnPort");
    if let Some(var_4658) = &input.vpn_port {
        scope_4657.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4658).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("Description");
    if let Some(var_4660) = &input.description {
        scope_4659.string(var_4660);
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("SplitTunnel");
    if let Some(var_4662) = &input.split_tunnel {
        scope_4661.boolean(*var_4662);
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("DryRun");
    if let Some(var_4664) = &input.dry_run {
        scope_4663.boolean(*var_4664);
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("SecurityGroupId");
    if let Some(var_4666) = &input.security_group_ids {
        let mut list_4668 = scope_4665.start_list(true, Some("item"));
        for item_4667 in var_4666 {
            #[allow(unused_mut)]
            let mut entry_4669 = list_4668.entry();
            entry_4669.string(item_4667);
        }
        list_4668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("VpcId");
    if let Some(var_4671) = &input.vpc_id {
        scope_4670.string(var_4671);
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("SelfServicePortal");
    if let Some(var_4673) = &input.self_service_portal {
        scope_4672.string(var_4673.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("ClientConnectOptions");
    if let Some(var_4675) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4674, var_4675,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4677) = &input.session_timeout_hours {
        scope_4676.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4677).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4679) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4678, var_4679,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("DryRun");
    if let Some(var_4681) = &input.dry_run {
        scope_4680.boolean(*var_4681);
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("InstanceFamily");
    if let Some(var_4683) = &input.instance_family {
        scope_4682.string(var_4683.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("CpuCredits");
    if let Some(var_4685) = &input.cpu_credits {
        scope_4684.string(var_4685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("KmsKeyId");
    if let Some(var_4687) = &input.kms_key_id {
        scope_4686.string(var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("DryRun");
    if let Some(var_4689) = &input.dry_run {
        scope_4688.boolean(*var_4689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("DryRun");
    if let Some(var_4691) = &input.dry_run {
        scope_4690.boolean(*var_4691);
    }
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4693) = &input.excess_capacity_termination_policy {
        scope_4692.string(var_4693.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4695) = &input.launch_template_configs {
        let mut list_4697 = scope_4694.start_list(true, Some("item"));
        for item_4696 in var_4695 {
            #[allow(unused_mut)]
            let mut entry_4698 = list_4697.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4698, item_4696,
            )?;
        }
        list_4697.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("FleetId");
    if let Some(var_4700) = &input.fleet_id {
        scope_4699.string(var_4700);
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4702) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4701, var_4702,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("Context");
    if let Some(var_4704) = &input.context {
        scope_4703.string(var_4704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("DryRun");
    if let Some(var_4706) = &input.dry_run {
        scope_4705.boolean(*var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("FpgaImageId");
    if let Some(var_4708) = &input.fpga_image_id {
        scope_4707.string(var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("Attribute");
    if let Some(var_4710) = &input.attribute {
        scope_4709.string(var_4710.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("OperationType");
    if let Some(var_4712) = &input.operation_type {
        scope_4711.string(var_4712.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("UserId");
    if let Some(var_4714) = &input.user_ids {
        let mut list_4716 = scope_4713.start_list(true, Some("UserId"));
        for item_4715 in var_4714 {
            #[allow(unused_mut)]
            let mut entry_4717 = list_4716.entry();
            entry_4717.string(item_4715);
        }
        list_4716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4718 = writer.prefix("UserGroup");
    if let Some(var_4719) = &input.user_groups {
        let mut list_4721 = scope_4718.start_list(true, Some("UserGroup"));
        for item_4720 in var_4719 {
            #[allow(unused_mut)]
            let mut entry_4722 = list_4721.entry();
            entry_4722.string(item_4720);
        }
        list_4721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4723 = writer.prefix("ProductCode");
    if let Some(var_4724) = &input.product_codes {
        let mut list_4726 = scope_4723.start_list(true, Some("ProductCode"));
        for item_4725 in var_4724 {
            #[allow(unused_mut)]
            let mut entry_4727 = list_4726.entry();
            entry_4727.string(item_4725);
        }
        list_4726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("LoadPermission");
    if let Some(var_4729) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4728, var_4729,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("Description");
    if let Some(var_4731) = &input.description {
        scope_4730.string(var_4731);
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("Name");
    if let Some(var_4733) = &input.name {
        scope_4732.string(var_4733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("AutoPlacement");
    if let Some(var_4735) = &input.auto_placement {
        scope_4734.string(var_4735.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("HostId");
    if let Some(var_4737) = &input.host_ids {
        let mut list_4739 = scope_4736.start_list(true, Some("item"));
        for item_4738 in var_4737 {
            #[allow(unused_mut)]
            let mut entry_4740 = list_4739.entry();
            entry_4740.string(item_4738);
        }
        list_4739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4741 = writer.prefix("HostRecovery");
    if let Some(var_4742) = &input.host_recovery {
        scope_4741.string(var_4742.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("InstanceType");
    if let Some(var_4744) = &input.instance_type {
        scope_4743.string(var_4744);
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("InstanceFamily");
    if let Some(var_4746) = &input.instance_family {
        scope_4745.string(var_4746);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4747 = writer.prefix("PrincipalArn");
    if let Some(var_4748) = &input.principal_arn {
        scope_4747.string(var_4748);
    }
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("Resource");
    if let Some(var_4750) = &input.resource {
        scope_4749.string(var_4750);
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("UseLongIds");
    if let Some(var_4752) = &input.use_long_ids {
        scope_4751.boolean(*var_4752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("Resource");
    if let Some(var_4754) = &input.resource {
        scope_4753.string(var_4754);
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("UseLongIds");
    if let Some(var_4756) = &input.use_long_ids {
        scope_4755.boolean(*var_4756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("Attribute");
    if let Some(var_4758) = &input.attribute {
        scope_4757.string(var_4758);
    }
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("Description");
    if let Some(var_4760) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4759, var_4760)?;
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("ImageId");
    if let Some(var_4762) = &input.image_id {
        scope_4761.string(var_4762);
    }
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("LaunchPermission");
    if let Some(var_4764) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4763, var_4764,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("OperationType");
    if let Some(var_4766) = &input.operation_type {
        scope_4765.string(var_4766.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("ProductCode");
    if let Some(var_4768) = &input.product_codes {
        let mut list_4770 = scope_4767.start_list(true, Some("ProductCode"));
        for item_4769 in var_4768 {
            #[allow(unused_mut)]
            let mut entry_4771 = list_4770.entry();
            entry_4771.string(item_4769);
        }
        list_4770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("UserGroup");
    if let Some(var_4773) = &input.user_groups {
        let mut list_4775 = scope_4772.start_list(true, Some("UserGroup"));
        for item_4774 in var_4773 {
            #[allow(unused_mut)]
            let mut entry_4776 = list_4775.entry();
            entry_4776.string(item_4774);
        }
        list_4775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("UserId");
    if let Some(var_4778) = &input.user_ids {
        let mut list_4780 = scope_4777.start_list(true, Some("UserId"));
        for item_4779 in var_4778 {
            #[allow(unused_mut)]
            let mut entry_4781 = list_4780.entry();
            entry_4781.string(item_4779);
        }
        list_4780.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("Value");
    if let Some(var_4783) = &input.value {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("DryRun");
    if let Some(var_4785) = &input.dry_run {
        scope_4784.boolean(*var_4785);
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("OrganizationArn");
    if let Some(var_4787) = &input.organization_arns {
        let mut list_4789 = scope_4786.start_list(true, Some("OrganizationArn"));
        for item_4788 in var_4787 {
            #[allow(unused_mut)]
            let mut entry_4790 = list_4789.entry();
            entry_4790.string(item_4788);
        }
        list_4789.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4791 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4792) = &input.organizational_unit_arns {
        let mut list_4794 = scope_4791.start_list(true, Some("OrganizationalUnitArn"));
        for item_4793 in var_4792 {
            #[allow(unused_mut)]
            let mut entry_4795 = list_4794.entry();
            entry_4795.string(item_4793);
        }
        list_4794.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("SourceDestCheck");
    if let Some(var_4797) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4796, var_4797,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("Attribute");
    if let Some(var_4799) = &input.attribute {
        scope_4798.string(var_4799.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4801) = &input.block_device_mappings {
        let mut list_4803 = scope_4800.start_list(true, Some("item"));
        for item_4802 in var_4801 {
            #[allow(unused_mut)]
            let mut entry_4804 = list_4803.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4804, item_4802)?;
        }
        list_4803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("DisableApiTermination");
    if let Some(var_4806) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4805, var_4806,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("DryRun");
    if let Some(var_4808) = &input.dry_run {
        scope_4807.boolean(*var_4808);
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("EbsOptimized");
    if let Some(var_4810) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4809, var_4810,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("EnaSupport");
    if let Some(var_4812) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4811, var_4812,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("GroupId");
    if let Some(var_4814) = &input.groups {
        let mut list_4816 = scope_4813.start_list(true, Some("groupId"));
        for item_4815 in var_4814 {
            #[allow(unused_mut)]
            let mut entry_4817 = list_4816.entry();
            entry_4817.string(item_4815);
        }
        list_4816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("InstanceId");
    if let Some(var_4819) = &input.instance_id {
        scope_4818.string(var_4819);
    }
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4821) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4820, var_4821)?;
    }
    #[allow(unused_mut)]
    let mut scope_4822 = writer.prefix("InstanceType");
    if let Some(var_4823) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4822, var_4823)?;
    }
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("Kernel");
    if let Some(var_4825) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4824, var_4825)?;
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("Ramdisk");
    if let Some(var_4827) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4826, var_4827)?;
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("SriovNetSupport");
    if let Some(var_4829) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4828, var_4829)?;
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("UserData");
    if let Some(var_4831) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4830, var_4831,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("Value");
    if let Some(var_4833) = &input.value {
        scope_4832.string(var_4833);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("InstanceId");
    if let Some(var_4835) = &input.instance_id {
        scope_4834.string(var_4835);
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4837) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4836, var_4837,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("DryRun");
    if let Some(var_4839) = &input.dry_run {
        scope_4838.boolean(*var_4839);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("DryRun");
    if let Some(var_4841) = &input.dry_run {
        scope_4840.boolean(*var_4841);
    }
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("ClientToken");
    if let Some(var_4843) = &input.client_token {
        scope_4842.string(var_4843);
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4845) = &input.instance_credit_specifications {
        let mut list_4847 = scope_4844.start_list(true, Some("item"));
        for item_4846 in var_4845 {
            #[allow(unused_mut)]
            let mut entry_4848 = list_4847.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4848, item_4846)?;
        }
        list_4847.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("DryRun");
    if let Some(var_4850) = &input.dry_run {
        scope_4849.boolean(*var_4850);
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("InstanceId");
    if let Some(var_4852) = &input.instance_id {
        scope_4851.string(var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("InstanceEventId");
    if let Some(var_4854) = &input.instance_event_id {
        scope_4853.string(var_4854);
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("NotBefore");
    if let Some(var_4856) = &input.not_before {
        scope_4855.date_time(var_4856, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("DryRun");
    if let Some(var_4858) = &input.dry_run {
        scope_4857.boolean(*var_4858);
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("Name");
    if let Some(var_4860) = &input.name {
        scope_4859.string(var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4862) = &input.instance_event_window_id {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("TimeRange");
    if let Some(var_4864) = &input.time_ranges {
        let mut list_4866 = scope_4863.start_list(true, None);
        for item_4865 in var_4864 {
            #[allow(unused_mut)]
            let mut entry_4867 = list_4866.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4867, item_4865)?;
        }
        list_4866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4868 = writer.prefix("CronExpression");
    if let Some(var_4869) = &input.cron_expression {
        scope_4868.string(var_4869);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("InstanceId");
    if let Some(var_4871) = &input.instance_id {
        scope_4870.string(var_4871);
    }
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("HttpTokens");
    if let Some(var_4873) = &input.http_tokens {
        scope_4872.string(var_4873.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4875) = &input.http_put_response_hop_limit {
        scope_4874.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4875).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("HttpEndpoint");
    if let Some(var_4877) = &input.http_endpoint {
        scope_4876.string(var_4877.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("DryRun");
    if let Some(var_4879) = &input.dry_run {
        scope_4878.boolean(*var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4881) = &input.http_protocol_ipv6 {
        scope_4880.string(var_4881.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4883) = &input.instance_metadata_tags {
        scope_4882.string(var_4883.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("Affinity");
    if let Some(var_4885) = &input.affinity {
        scope_4884.string(var_4885.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("GroupName");
    if let Some(var_4887) = &input.group_name {
        scope_4886.string(var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("HostId");
    if let Some(var_4889) = &input.host_id {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("InstanceId");
    if let Some(var_4891) = &input.instance_id {
        scope_4890.string(var_4891);
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("Tenancy");
    if let Some(var_4893) = &input.tenancy {
        scope_4892.string(var_4893.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("PartitionNumber");
    if let Some(var_4895) = &input.partition_number {
        scope_4894.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4895).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4897) = &input.host_resource_group_arn {
        scope_4896.string(var_4897);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("DryRun");
    if let Some(var_4899) = &input.dry_run {
        scope_4898.boolean(*var_4899);
    }
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("IpamId");
    if let Some(var_4901) = &input.ipam_id {
        scope_4900.string(var_4901);
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("Description");
    if let Some(var_4903) = &input.description {
        scope_4902.string(var_4903);
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("AddOperatingRegion");
    if let Some(var_4905) = &input.add_operating_regions {
        let mut list_4907 = scope_4904.start_list(true, None);
        for item_4906 in var_4905 {
            #[allow(unused_mut)]
            let mut entry_4908 = list_4907.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4908, item_4906,
            )?;
        }
        list_4907.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4910) = &input.remove_operating_regions {
        let mut list_4912 = scope_4909.start_list(true, None);
        for item_4911 in var_4910 {
            #[allow(unused_mut)]
            let mut entry_4913 = list_4912.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4913, item_4911,
            )?;
        }
        list_4912.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("DryRun");
    if let Some(var_4915) = &input.dry_run {
        scope_4914.boolean(*var_4915);
    }
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("IpamPoolId");
    if let Some(var_4917) = &input.ipam_pool_id {
        scope_4916.string(var_4917);
    }
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("Description");
    if let Some(var_4919) = &input.description {
        scope_4918.string(var_4919);
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("AutoImport");
    if let Some(var_4921) = &input.auto_import {
        scope_4920.boolean(*var_4921);
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4923) = &input.allocation_min_netmask_length {
        scope_4922.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4923).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4925) = &input.allocation_max_netmask_length {
        scope_4924.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4925).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4927) = &input.allocation_default_netmask_length {
        scope_4926.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4927).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4929) = &input.clear_allocation_default_netmask_length {
        scope_4928.boolean(*var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4931) = &input.add_allocation_resource_tags {
        let mut list_4933 = scope_4930.start_list(true, Some("item"));
        for item_4932 in var_4931 {
            #[allow(unused_mut)]
            let mut entry_4934 = list_4933.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4934, item_4932,
            )?;
        }
        list_4933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4936) = &input.remove_allocation_resource_tags {
        let mut list_4938 = scope_4935.start_list(true, Some("item"));
        for item_4937 in var_4936 {
            #[allow(unused_mut)]
            let mut entry_4939 = list_4938.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4939, item_4937,
            )?;
        }
        list_4938.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("DryRun");
    if let Some(var_4941) = &input.dry_run {
        scope_4940.boolean(*var_4941);
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("ResourceId");
    if let Some(var_4943) = &input.resource_id {
        scope_4942.string(var_4943);
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("ResourceCidr");
    if let Some(var_4945) = &input.resource_cidr {
        scope_4944.string(var_4945);
    }
    #[allow(unused_mut)]
    let mut scope_4946 = writer.prefix("ResourceRegion");
    if let Some(var_4947) = &input.resource_region {
        scope_4946.string(var_4947);
    }
    #[allow(unused_mut)]
    let mut scope_4948 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4949) = &input.current_ipam_scope_id {
        scope_4948.string(var_4949);
    }
    #[allow(unused_mut)]
    let mut scope_4950 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4951) = &input.destination_ipam_scope_id {
        scope_4950.string(var_4951);
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("Monitored");
    if let Some(var_4953) = &input.monitored {
        scope_4952.boolean(*var_4953);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("DryRun");
    if let Some(var_4955) = &input.dry_run {
        scope_4954.boolean(*var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("IpamScopeId");
    if let Some(var_4957) = &input.ipam_scope_id {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("Description");
    if let Some(var_4959) = &input.description {
        scope_4958.string(var_4959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("DryRun");
    if let Some(var_4961) = &input.dry_run {
        scope_4960.boolean(*var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("ClientToken");
    if let Some(var_4963) = &input.client_token {
        scope_4962.string(var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("LaunchTemplateId");
    if let Some(var_4965) = &input.launch_template_id {
        scope_4964.string(var_4965);
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("LaunchTemplateName");
    if let Some(var_4967) = &input.launch_template_name {
        scope_4966.string(var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("SetDefaultVersion");
    if let Some(var_4969) = &input.default_version {
        scope_4968.string(var_4969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("DryRun");
    if let Some(var_4971) = &input.dry_run {
        scope_4970.boolean(*var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("PrefixListId");
    if let Some(var_4973) = &input.prefix_list_id {
        scope_4972.string(var_4973);
    }
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("CurrentVersion");
    if let Some(var_4975) = &input.current_version {
        scope_4974.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("PrefixListName");
    if let Some(var_4977) = &input.prefix_list_name {
        scope_4976.string(var_4977);
    }
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("AddEntry");
    if let Some(var_4979) = &input.add_entries {
        let mut list_4981 = scope_4978.start_list(true, None);
        for item_4980 in var_4979 {
            #[allow(unused_mut)]
            let mut entry_4982 = list_4981.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4982, item_4980,
            )?;
        }
        list_4981.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("RemoveEntry");
    if let Some(var_4984) = &input.remove_entries {
        let mut list_4986 = scope_4983.start_list(true, None);
        for item_4985 in var_4984 {
            #[allow(unused_mut)]
            let mut entry_4987 = list_4986.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4987, item_4985,
            )?;
        }
        list_4986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("MaxEntries");
    if let Some(var_4989) = &input.max_entries {
        scope_4988.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4989).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("Attachment");
    if let Some(var_4991) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4990, var_4991,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("Description");
    if let Some(var_4993) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4992, var_4993)?;
    }
    #[allow(unused_mut)]
    let mut scope_4994 = writer.prefix("DryRun");
    if let Some(var_4995) = &input.dry_run {
        scope_4994.boolean(*var_4995);
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("SecurityGroupId");
    if let Some(var_4997) = &input.groups {
        let mut list_4999 = scope_4996.start_list(true, Some("SecurityGroupId"));
        for item_4998 in var_4997 {
            #[allow(unused_mut)]
            let mut entry_5000 = list_4999.entry();
            entry_5000.string(item_4998);
        }
        list_4999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5002) = &input.network_interface_id {
        scope_5001.string(var_5002);
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("SourceDestCheck");
    if let Some(var_5004) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5003, var_5004,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("DryRun");
    if let Some(var_5006) = &input.dry_run {
        scope_5005.boolean(*var_5006);
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("InstanceId");
    if let Some(var_5008) = &input.instance_id {
        scope_5007.string(var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5010) = &input.private_dns_hostname_type {
        scope_5009.string(var_5010.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5012) = &input.enable_resource_name_dns_a_record {
        scope_5011.boolean(*var_5012);
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5014) = &input.enable_resource_name_dns_aaaa_record {
        scope_5013.boolean(*var_5014);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("ReservedInstancesId");
    if let Some(var_5016) = &input.reserved_instances_ids {
        let mut list_5018 = scope_5015.start_list(true, Some("ReservedInstancesId"));
        for item_5017 in var_5016 {
            #[allow(unused_mut)]
            let mut entry_5019 = list_5018.entry();
            entry_5019.string(item_5017);
        }
        list_5018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("ClientToken");
    if let Some(var_5021) = &input.client_token {
        scope_5020.string(var_5021);
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5023) = &input.target_configurations {
        let mut list_5025 = scope_5022.start_list(true, Some("item"));
        for item_5024 in var_5023 {
            #[allow(unused_mut)]
            let mut entry_5026 = list_5025.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5026, item_5024,
            )?;
        }
        list_5025.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("GroupId");
    if let Some(var_5028) = &input.group_id {
        scope_5027.string(var_5028);
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("SecurityGroupRule");
    if let Some(var_5030) = &input.security_group_rules {
        let mut list_5032 = scope_5029.start_list(true, Some("item"));
        for item_5031 in var_5030 {
            #[allow(unused_mut)]
            let mut entry_5033 = list_5032.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5033, item_5031,
            )?;
        }
        list_5032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("DryRun");
    if let Some(var_5035) = &input.dry_run {
        scope_5034.boolean(*var_5035);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("Attribute");
    if let Some(var_5037) = &input.attribute {
        scope_5036.string(var_5037.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("CreateVolumePermission");
    if let Some(var_5039) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5038, var_5039,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("UserGroup");
    if let Some(var_5041) = &input.group_names {
        let mut list_5043 = scope_5040.start_list(true, Some("GroupName"));
        for item_5042 in var_5041 {
            #[allow(unused_mut)]
            let mut entry_5044 = list_5043.entry();
            entry_5044.string(item_5042);
        }
        list_5043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("OperationType");
    if let Some(var_5046) = &input.operation_type {
        scope_5045.string(var_5046.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("SnapshotId");
    if let Some(var_5048) = &input.snapshot_id {
        scope_5047.string(var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("UserId");
    if let Some(var_5050) = &input.user_ids {
        let mut list_5052 = scope_5049.start_list(true, Some("UserId"));
        for item_5051 in var_5050 {
            #[allow(unused_mut)]
            let mut entry_5053 = list_5052.entry();
            entry_5053.string(item_5051);
        }
        list_5052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5054 = writer.prefix("DryRun");
    if let Some(var_5055) = &input.dry_run {
        scope_5054.boolean(*var_5055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5056 = writer.prefix("SnapshotId");
    if let Some(var_5057) = &input.snapshot_id {
        scope_5056.string(var_5057);
    }
    #[allow(unused_mut)]
    let mut scope_5058 = writer.prefix("StorageTier");
    if let Some(var_5059) = &input.storage_tier {
        scope_5058.string(var_5059.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5060 = writer.prefix("DryRun");
    if let Some(var_5061) = &input.dry_run {
        scope_5060.boolean(*var_5061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5063) = &input.excess_capacity_termination_policy {
        scope_5062.string(var_5063.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5064 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5065) = &input.launch_template_configs {
        let mut list_5067 = scope_5064.start_list(true, Some("item"));
        for item_5066 in var_5065 {
            #[allow(unused_mut)]
            let mut entry_5068 = list_5067.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5068, item_5066,
            )?;
        }
        list_5067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5070) = &input.spot_fleet_request_id {
        scope_5069.string(var_5070);
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("TargetCapacity");
    if let Some(var_5072) = &input.target_capacity {
        scope_5071.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5072).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5074) = &input.on_demand_target_capacity {
        scope_5073.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5074).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("Context");
    if let Some(var_5076) = &input.context {
        scope_5075.string(var_5076);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5078) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5077, var_5078,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5080) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5079, var_5080,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("SubnetId");
    if let Some(var_5082) = &input.subnet_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5084) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5083, var_5084,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5086) = &input.customer_owned_ipv4_pool {
        scope_5085.string(var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("EnableDns64");
    if let Some(var_5088) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5087, var_5088,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5090) = &input.private_dns_hostname_type_on_launch {
        scope_5089.string(var_5090.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5092) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5091, var_5092,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5094) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5093, var_5094,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5096) = &input.enable_lni_at_device_index {
        scope_5095.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5096).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5098) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5097, var_5098,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5100) = &input.traffic_mirror_filter_id {
        scope_5099.string(var_5100);
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("AddNetworkService");
    if let Some(var_5102) = &input.add_network_services {
        let mut list_5104 = scope_5101.start_list(true, Some("item"));
        for item_5103 in var_5102 {
            #[allow(unused_mut)]
            let mut entry_5105 = list_5104.entry();
            entry_5105.string(item_5103.as_str());
        }
        list_5104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("RemoveNetworkService");
    if let Some(var_5107) = &input.remove_network_services {
        let mut list_5109 = scope_5106.start_list(true, Some("item"));
        for item_5108 in var_5107 {
            #[allow(unused_mut)]
            let mut entry_5110 = list_5109.entry();
            entry_5110.string(item_5108.as_str());
        }
        list_5109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("DryRun");
    if let Some(var_5112) = &input.dry_run {
        scope_5111.boolean(*var_5112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5114) = &input.traffic_mirror_filter_rule_id {
        scope_5113.string(var_5114);
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("TrafficDirection");
    if let Some(var_5116) = &input.traffic_direction {
        scope_5115.string(var_5116.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("RuleNumber");
    if let Some(var_5118) = &input.rule_number {
        scope_5117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5119 = writer.prefix("RuleAction");
    if let Some(var_5120) = &input.rule_action {
        scope_5119.string(var_5120.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5121 = writer.prefix("DestinationPortRange");
    if let Some(var_5122) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5121, var_5122,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5123 = writer.prefix("SourcePortRange");
    if let Some(var_5124) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5123, var_5124,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5125 = writer.prefix("Protocol");
    if let Some(var_5126) = &input.protocol {
        scope_5125.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5128) = &input.destination_cidr_block {
        scope_5127.string(var_5128);
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("SourceCidrBlock");
    if let Some(var_5130) = &input.source_cidr_block {
        scope_5129.string(var_5130);
    }
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("Description");
    if let Some(var_5132) = &input.description {
        scope_5131.string(var_5132);
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("RemoveField");
    if let Some(var_5134) = &input.remove_fields {
        let mut list_5136 = scope_5133.start_list(true, None);
        for item_5135 in var_5134 {
            #[allow(unused_mut)]
            let mut entry_5137 = list_5136.entry();
            entry_5137.string(item_5135.as_str());
        }
        list_5136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("DryRun");
    if let Some(var_5139) = &input.dry_run {
        scope_5138.boolean(*var_5139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5141) = &input.traffic_mirror_session_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5143) = &input.traffic_mirror_target_id {
        scope_5142.string(var_5143);
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5145) = &input.traffic_mirror_filter_id {
        scope_5144.string(var_5145);
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("PacketLength");
    if let Some(var_5147) = &input.packet_length {
        scope_5146.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5147).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("SessionNumber");
    if let Some(var_5149) = &input.session_number {
        scope_5148.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5149).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("VirtualNetworkId");
    if let Some(var_5151) = &input.virtual_network_id {
        scope_5150.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5151).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("Description");
    if let Some(var_5153) = &input.description {
        scope_5152.string(var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("RemoveField");
    if let Some(var_5155) = &input.remove_fields {
        let mut list_5157 = scope_5154.start_list(true, None);
        for item_5156 in var_5155 {
            #[allow(unused_mut)]
            let mut entry_5158 = list_5157.entry();
            entry_5158.string(item_5156.as_str());
        }
        list_5157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5159 = writer.prefix("DryRun");
    if let Some(var_5160) = &input.dry_run {
        scope_5159.boolean(*var_5160);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5161 = writer.prefix("TransitGatewayId");
    if let Some(var_5162) = &input.transit_gateway_id {
        scope_5161.string(var_5162);
    }
    #[allow(unused_mut)]
    let mut scope_5163 = writer.prefix("Description");
    if let Some(var_5164) = &input.description {
        scope_5163.string(var_5164);
    }
    #[allow(unused_mut)]
    let mut scope_5165 = writer.prefix("Options");
    if let Some(var_5166) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5165, var_5166,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("DryRun");
    if let Some(var_5168) = &input.dry_run {
        scope_5167.boolean(*var_5168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5170) = &input.transit_gateway_route_table_id {
        scope_5169.string(var_5170);
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("PrefixListId");
    if let Some(var_5172) = &input.prefix_list_id {
        scope_5171.string(var_5172);
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5174) = &input.transit_gateway_attachment_id {
        scope_5173.string(var_5174);
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("Blackhole");
    if let Some(var_5176) = &input.blackhole {
        scope_5175.boolean(*var_5176);
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("DryRun");
    if let Some(var_5178) = &input.dry_run {
        scope_5177.boolean(*var_5178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5180) = &input.transit_gateway_attachment_id {
        scope_5179.string(var_5180);
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("AddSubnetIds");
    if let Some(var_5182) = &input.add_subnet_ids {
        let mut list_5184 = scope_5181.start_list(true, Some("item"));
        for item_5183 in var_5182 {
            #[allow(unused_mut)]
            let mut entry_5185 = list_5184.entry();
            entry_5185.string(item_5183);
        }
        list_5184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5187) = &input.remove_subnet_ids {
        let mut list_5189 = scope_5186.start_list(true, Some("item"));
        for item_5188 in var_5187 {
            #[allow(unused_mut)]
            let mut entry_5190 = list_5189.entry();
            entry_5190.string(item_5188);
        }
        list_5189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("Options");
    if let Some(var_5192) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5191, var_5192)?;
    }
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("DryRun");
    if let Some(var_5194) = &input.dry_run {
        scope_5193.boolean(*var_5194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5195 = writer.prefix("DryRun");
    if let Some(var_5196) = &input.dry_run {
        scope_5195.boolean(*var_5196);
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("VolumeId");
    if let Some(var_5198) = &input.volume_id {
        scope_5197.string(var_5198);
    }
    #[allow(unused_mut)]
    let mut scope_5199 = writer.prefix("Size");
    if let Some(var_5200) = &input.size {
        scope_5199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5201 = writer.prefix("VolumeType");
    if let Some(var_5202) = &input.volume_type {
        scope_5201.string(var_5202.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5203 = writer.prefix("Iops");
    if let Some(var_5204) = &input.iops {
        scope_5203.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5204).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5205 = writer.prefix("Throughput");
    if let Some(var_5206) = &input.throughput {
        scope_5205.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5206).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5207 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5208) = &input.multi_attach_enabled {
        scope_5207.boolean(*var_5208);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("AutoEnableIO");
    if let Some(var_5210) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5209, var_5210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("VolumeId");
    if let Some(var_5212) = &input.volume_id {
        scope_5211.string(var_5212);
    }
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("DryRun");
    if let Some(var_5214) = &input.dry_run {
        scope_5213.boolean(*var_5214);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5216) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5215, var_5216,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("EnableDnsSupport");
    if let Some(var_5218) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5217, var_5218,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("VpcId");
    if let Some(var_5220) = &input.vpc_id {
        scope_5219.string(var_5220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("DryRun");
    if let Some(var_5222) = &input.dry_run {
        scope_5221.boolean(*var_5222);
    }
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("VpcEndpointId");
    if let Some(var_5224) = &input.vpc_endpoint_id {
        scope_5223.string(var_5224);
    }
    #[allow(unused_mut)]
    let mut scope_5225 = writer.prefix("ResetPolicy");
    if let Some(var_5226) = &input.reset_policy {
        scope_5225.boolean(*var_5226);
    }
    #[allow(unused_mut)]
    let mut scope_5227 = writer.prefix("PolicyDocument");
    if let Some(var_5228) = &input.policy_document {
        scope_5227.string(var_5228);
    }
    #[allow(unused_mut)]
    let mut scope_5229 = writer.prefix("AddRouteTableId");
    if let Some(var_5230) = &input.add_route_table_ids {
        let mut list_5232 = scope_5229.start_list(true, Some("item"));
        for item_5231 in var_5230 {
            #[allow(unused_mut)]
            let mut entry_5233 = list_5232.entry();
            entry_5233.string(item_5231);
        }
        list_5232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5235) = &input.remove_route_table_ids {
        let mut list_5237 = scope_5234.start_list(true, Some("item"));
        for item_5236 in var_5235 {
            #[allow(unused_mut)]
            let mut entry_5238 = list_5237.entry();
            entry_5238.string(item_5236);
        }
        list_5237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5239 = writer.prefix("AddSubnetId");
    if let Some(var_5240) = &input.add_subnet_ids {
        let mut list_5242 = scope_5239.start_list(true, Some("item"));
        for item_5241 in var_5240 {
            #[allow(unused_mut)]
            let mut entry_5243 = list_5242.entry();
            entry_5243.string(item_5241);
        }
        list_5242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("RemoveSubnetId");
    if let Some(var_5245) = &input.remove_subnet_ids {
        let mut list_5247 = scope_5244.start_list(true, Some("item"));
        for item_5246 in var_5245 {
            #[allow(unused_mut)]
            let mut entry_5248 = list_5247.entry();
            entry_5248.string(item_5246);
        }
        list_5247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5249 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5250) = &input.add_security_group_ids {
        let mut list_5252 = scope_5249.start_list(true, Some("item"));
        for item_5251 in var_5250 {
            #[allow(unused_mut)]
            let mut entry_5253 = list_5252.entry();
            entry_5253.string(item_5251);
        }
        list_5252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5255) = &input.remove_security_group_ids {
        let mut list_5257 = scope_5254.start_list(true, Some("item"));
        for item_5256 in var_5255 {
            #[allow(unused_mut)]
            let mut entry_5258 = list_5257.entry();
            entry_5258.string(item_5256);
        }
        list_5257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5259 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5260) = &input.private_dns_enabled {
        scope_5259.boolean(*var_5260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5261 = writer.prefix("DryRun");
    if let Some(var_5262) = &input.dry_run {
        scope_5261.boolean(*var_5262);
    }
    #[allow(unused_mut)]
    let mut scope_5263 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5264) = &input.connection_notification_id {
        scope_5263.string(var_5264);
    }
    #[allow(unused_mut)]
    let mut scope_5265 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5266) = &input.connection_notification_arn {
        scope_5265.string(var_5266);
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("ConnectionEvents");
    if let Some(var_5268) = &input.connection_events {
        let mut list_5270 = scope_5267.start_list(true, Some("item"));
        for item_5269 in var_5268 {
            #[allow(unused_mut)]
            let mut entry_5271 = list_5270.entry();
            entry_5271.string(item_5269);
        }
        list_5270.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("DryRun");
    if let Some(var_5273) = &input.dry_run {
        scope_5272.boolean(*var_5273);
    }
    #[allow(unused_mut)]
    let mut scope_5274 = writer.prefix("ServiceId");
    if let Some(var_5275) = &input.service_id {
        scope_5274.string(var_5275);
    }
    #[allow(unused_mut)]
    let mut scope_5276 = writer.prefix("PrivateDnsName");
    if let Some(var_5277) = &input.private_dns_name {
        scope_5276.string(var_5277);
    }
    #[allow(unused_mut)]
    let mut scope_5278 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5279) = &input.remove_private_dns_name {
        scope_5278.boolean(*var_5279);
    }
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("AcceptanceRequired");
    if let Some(var_5281) = &input.acceptance_required {
        scope_5280.boolean(*var_5281);
    }
    #[allow(unused_mut)]
    let mut scope_5282 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5283) = &input.add_network_load_balancer_arns {
        let mut list_5285 = scope_5282.start_list(true, Some("item"));
        for item_5284 in var_5283 {
            #[allow(unused_mut)]
            let mut entry_5286 = list_5285.entry();
            entry_5286.string(item_5284);
        }
        list_5285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5288) = &input.remove_network_load_balancer_arns {
        let mut list_5290 = scope_5287.start_list(true, Some("item"));
        for item_5289 in var_5288 {
            #[allow(unused_mut)]
            let mut entry_5291 = list_5290.entry();
            entry_5291.string(item_5289);
        }
        list_5290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5293) = &input.add_gateway_load_balancer_arns {
        let mut list_5295 = scope_5292.start_list(true, Some("item"));
        for item_5294 in var_5293 {
            #[allow(unused_mut)]
            let mut entry_5296 = list_5295.entry();
            entry_5296.string(item_5294);
        }
        list_5295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5297 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5298) = &input.remove_gateway_load_balancer_arns {
        let mut list_5300 = scope_5297.start_list(true, Some("item"));
        for item_5299 in var_5298 {
            #[allow(unused_mut)]
            let mut entry_5301 = list_5300.entry();
            entry_5301.string(item_5299);
        }
        list_5300.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("DryRun");
    if let Some(var_5303) = &input.dry_run {
        scope_5302.boolean(*var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("ServiceId");
    if let Some(var_5305) = &input.service_id {
        scope_5304.string(var_5305);
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("PayerResponsibility");
    if let Some(var_5307) = &input.payer_responsibility {
        scope_5306.string(var_5307.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("DryRun");
    if let Some(var_5309) = &input.dry_run {
        scope_5308.boolean(*var_5309);
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("ServiceId");
    if let Some(var_5311) = &input.service_id {
        scope_5310.string(var_5311);
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5313) = &input.add_allowed_principals {
        let mut list_5315 = scope_5312.start_list(true, Some("item"));
        for item_5314 in var_5313 {
            #[allow(unused_mut)]
            let mut entry_5316 = list_5315.entry();
            entry_5316.string(item_5314);
        }
        list_5315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5317 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5318) = &input.remove_allowed_principals {
        let mut list_5320 = scope_5317.start_list(true, Some("item"));
        for item_5319 in var_5318 {
            #[allow(unused_mut)]
            let mut entry_5321 = list_5320.entry();
            entry_5321.string(item_5319);
        }
        list_5320.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5323) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5322, var_5323,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("DryRun");
    if let Some(var_5325) = &input.dry_run {
        scope_5324.boolean(*var_5325);
    }
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5327) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5326, var_5327,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5329) = &input.vpc_peering_connection_id {
        scope_5328.string(var_5329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("VpcId");
    if let Some(var_5331) = &input.vpc_id {
        scope_5330.string(var_5331);
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("InstanceTenancy");
    if let Some(var_5333) = &input.instance_tenancy {
        scope_5332.string(var_5333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("DryRun");
    if let Some(var_5335) = &input.dry_run {
        scope_5334.boolean(*var_5335);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("VpnConnectionId");
    if let Some(var_5337) = &input.vpn_connection_id {
        scope_5336.string(var_5337);
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("TransitGatewayId");
    if let Some(var_5339) = &input.transit_gateway_id {
        scope_5338.string(var_5339);
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("CustomerGatewayId");
    if let Some(var_5341) = &input.customer_gateway_id {
        scope_5340.string(var_5341);
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("VpnGatewayId");
    if let Some(var_5343) = &input.vpn_gateway_id {
        scope_5342.string(var_5343);
    }
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("DryRun");
    if let Some(var_5345) = &input.dry_run {
        scope_5344.boolean(*var_5345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("VpnConnectionId");
    if let Some(var_5347) = &input.vpn_connection_id {
        scope_5346.string(var_5347);
    }
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5349) = &input.local_ipv4_network_cidr {
        scope_5348.string(var_5349);
    }
    #[allow(unused_mut)]
    let mut scope_5350 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5351) = &input.remote_ipv4_network_cidr {
        scope_5350.string(var_5351);
    }
    #[allow(unused_mut)]
    let mut scope_5352 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5353) = &input.local_ipv6_network_cidr {
        scope_5352.string(var_5353);
    }
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5355) = &input.remote_ipv6_network_cidr {
        scope_5354.string(var_5355);
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("DryRun");
    if let Some(var_5357) = &input.dry_run {
        scope_5356.boolean(*var_5357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("VpnConnectionId");
    if let Some(var_5359) = &input.vpn_connection_id {
        scope_5358.string(var_5359);
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5361) = &input.vpn_tunnel_outside_ip_address {
        scope_5360.string(var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("DryRun");
    if let Some(var_5363) = &input.dry_run {
        scope_5362.boolean(*var_5363);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("VpnConnectionId");
    if let Some(var_5365) = &input.vpn_connection_id {
        scope_5364.string(var_5365);
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5367) = &input.vpn_tunnel_outside_ip_address {
        scope_5366.string(var_5367);
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("TunnelOptions");
    if let Some(var_5369) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5368, var_5369,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("DryRun");
    if let Some(var_5371) = &input.dry_run {
        scope_5370.boolean(*var_5371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("InstanceId");
    if let Some(var_5373) = &input.instance_ids {
        let mut list_5375 = scope_5372.start_list(true, Some("InstanceId"));
        for item_5374 in var_5373 {
            #[allow(unused_mut)]
            let mut entry_5376 = list_5375.entry();
            entry_5376.string(item_5374);
        }
        list_5375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("DryRun");
    if let Some(var_5378) = &input.dry_run {
        scope_5377.boolean(*var_5378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("DryRun");
    if let Some(var_5380) = &input.dry_run {
        scope_5379.boolean(*var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("PublicIp");
    if let Some(var_5382) = &input.public_ip {
        scope_5381.string(var_5382);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("DryRun");
    if let Some(var_5384) = &input.dry_run {
        scope_5383.boolean(*var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("Cidr");
    if let Some(var_5386) = &input.cidr {
        scope_5385.string(var_5386);
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("IpamPoolId");
    if let Some(var_5388) = &input.ipam_pool_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("IpamPoolOwner");
    if let Some(var_5390) = &input.ipam_pool_owner {
        scope_5389.string(var_5390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("Cidr");
    if let Some(var_5392) = &input.cidr {
        scope_5391.string(var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5394) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5393, var_5394,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5396) = &input.publicly_advertisable {
        scope_5395.boolean(*var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("Description");
    if let Some(var_5398) = &input.description {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("DryRun");
    if let Some(var_5400) = &input.dry_run {
        scope_5399.boolean(*var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("PoolTagSpecification");
    if let Some(var_5402) = &input.pool_tag_specifications {
        let mut list_5404 = scope_5401.start_list(true, Some("item"));
        for item_5403 in var_5402 {
            #[allow(unused_mut)]
            let mut entry_5405 = list_5404.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5405, item_5403,
            )?;
        }
        list_5404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5406 = writer.prefix("MultiRegion");
    if let Some(var_5407) = &input.multi_region {
        scope_5406.boolean(*var_5407);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5408 = writer.prefix("DryRun");
    if let Some(var_5409) = &input.dry_run {
        scope_5408.boolean(*var_5409);
    }
    #[allow(unused_mut)]
    let mut scope_5410 = writer.prefix("IpamPoolId");
    if let Some(var_5411) = &input.ipam_pool_id {
        scope_5410.string(var_5411);
    }
    #[allow(unused_mut)]
    let mut scope_5412 = writer.prefix("Cidr");
    if let Some(var_5413) = &input.cidr {
        scope_5412.string(var_5413);
    }
    #[allow(unused_mut)]
    let mut scope_5414 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5415) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5414, var_5415,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5416 = writer.prefix("DryRun");
    if let Some(var_5417) = &input.dry_run {
        scope_5416.boolean(*var_5417);
    }
    #[allow(unused_mut)]
    let mut scope_5418 = writer.prefix("IpamPoolId");
    if let Some(var_5419) = &input.ipam_pool_id {
        scope_5418.string(var_5419);
    }
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("PoolId");
    if let Some(var_5421) = &input.pool_id {
        scope_5420.string(var_5421);
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("NetmaskLength");
    if let Some(var_5423) = &input.netmask_length {
        scope_5422.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5423).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("ClientToken");
    if let Some(var_5425) = &input.client_token {
        scope_5424.string(var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("CurrencyCode");
    if let Some(var_5427) = &input.currency_code {
        scope_5426.string(var_5427.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("HostIdSet");
    if let Some(var_5429) = &input.host_id_set {
        let mut list_5431 = scope_5428.start_list(true, Some("item"));
        for item_5430 in var_5429 {
            #[allow(unused_mut)]
            let mut entry_5432 = list_5431.entry();
            entry_5432.string(item_5430);
        }
        list_5431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5433 = writer.prefix("LimitPrice");
    if let Some(var_5434) = &input.limit_price {
        scope_5433.string(var_5434);
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("OfferingId");
    if let Some(var_5436) = &input.offering_id {
        scope_5435.string(var_5436);
    }
    #[allow(unused_mut)]
    let mut scope_5437 = writer.prefix("TagSpecification");
    if let Some(var_5438) = &input.tag_specifications {
        let mut list_5440 = scope_5437.start_list(true, Some("item"));
        for item_5439 in var_5438 {
            #[allow(unused_mut)]
            let mut entry_5441 = list_5440.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5441, item_5439,
            )?;
        }
        list_5440.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5442 = writer.prefix("InstanceCount");
    if let Some(var_5443) = &input.instance_count {
        scope_5442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5444 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5445) = &input.reserved_instances_offering_id {
        scope_5444.string(var_5445);
    }
    #[allow(unused_mut)]
    let mut scope_5446 = writer.prefix("DryRun");
    if let Some(var_5447) = &input.dry_run {
        scope_5446.boolean(*var_5447);
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("LimitPrice");
    if let Some(var_5449) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5448, var_5449,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5450 = writer.prefix("PurchaseTime");
    if let Some(var_5451) = &input.purchase_time {
        scope_5450.date_time(var_5451, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5452 = writer.prefix("ClientToken");
    if let Some(var_5453) = &input.client_token {
        scope_5452.string(var_5453);
    }
    #[allow(unused_mut)]
    let mut scope_5454 = writer.prefix("DryRun");
    if let Some(var_5455) = &input.dry_run {
        scope_5454.boolean(*var_5455);
    }
    #[allow(unused_mut)]
    let mut scope_5456 = writer.prefix("PurchaseRequest");
    if let Some(var_5457) = &input.purchase_requests {
        let mut list_5459 = scope_5456.start_list(true, Some("PurchaseRequest"));
        for item_5458 in var_5457 {
            #[allow(unused_mut)]
            let mut entry_5460 = list_5459.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5460, item_5458,
            )?;
        }
        list_5459.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("InstanceId");
    if let Some(var_5462) = &input.instance_ids {
        let mut list_5464 = scope_5461.start_list(true, Some("InstanceId"));
        for item_5463 in var_5462 {
            #[allow(unused_mut)]
            let mut entry_5465 = list_5464.entry();
            entry_5465.string(item_5463);
        }
        list_5464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5466 = writer.prefix("DryRun");
    if let Some(var_5467) = &input.dry_run {
        scope_5466.boolean(*var_5467);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5468 = writer.prefix("ImageLocation");
    if let Some(var_5469) = &input.image_location {
        scope_5468.string(var_5469);
    }
    #[allow(unused_mut)]
    let mut scope_5470 = writer.prefix("Architecture");
    if let Some(var_5471) = &input.architecture {
        scope_5470.string(var_5471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5472 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5473) = &input.block_device_mappings {
        let mut list_5475 = scope_5472.start_list(true, Some("BlockDeviceMapping"));
        for item_5474 in var_5473 {
            #[allow(unused_mut)]
            let mut entry_5476 = list_5475.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5476, item_5474,
            )?;
        }
        list_5475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5477 = writer.prefix("Description");
    if let Some(var_5478) = &input.description {
        scope_5477.string(var_5478);
    }
    #[allow(unused_mut)]
    let mut scope_5479 = writer.prefix("DryRun");
    if let Some(var_5480) = &input.dry_run {
        scope_5479.boolean(*var_5480);
    }
    #[allow(unused_mut)]
    let mut scope_5481 = writer.prefix("EnaSupport");
    if let Some(var_5482) = &input.ena_support {
        scope_5481.boolean(*var_5482);
    }
    #[allow(unused_mut)]
    let mut scope_5483 = writer.prefix("KernelId");
    if let Some(var_5484) = &input.kernel_id {
        scope_5483.string(var_5484);
    }
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("Name");
    if let Some(var_5486) = &input.name {
        scope_5485.string(var_5486);
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("BillingProduct");
    if let Some(var_5488) = &input.billing_products {
        let mut list_5490 = scope_5487.start_list(true, Some("item"));
        for item_5489 in var_5488 {
            #[allow(unused_mut)]
            let mut entry_5491 = list_5490.entry();
            entry_5491.string(item_5489);
        }
        list_5490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5492 = writer.prefix("RamdiskId");
    if let Some(var_5493) = &input.ramdisk_id {
        scope_5492.string(var_5493);
    }
    #[allow(unused_mut)]
    let mut scope_5494 = writer.prefix("RootDeviceName");
    if let Some(var_5495) = &input.root_device_name {
        scope_5494.string(var_5495);
    }
    #[allow(unused_mut)]
    let mut scope_5496 = writer.prefix("SriovNetSupport");
    if let Some(var_5497) = &input.sriov_net_support {
        scope_5496.string(var_5497);
    }
    #[allow(unused_mut)]
    let mut scope_5498 = writer.prefix("VirtualizationType");
    if let Some(var_5499) = &input.virtualization_type {
        scope_5498.string(var_5499);
    }
    #[allow(unused_mut)]
    let mut scope_5500 = writer.prefix("BootMode");
    if let Some(var_5501) = &input.boot_mode {
        scope_5500.string(var_5501.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5502 = writer.prefix("DryRun");
    if let Some(var_5503) = &input.dry_run {
        scope_5502.boolean(*var_5503);
    }
    #[allow(unused_mut)]
    let mut scope_5504 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5505) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5504, var_5505,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5507) = &input.transit_gateway_multicast_domain_id {
        scope_5506.string(var_5507);
    }
    #[allow(unused_mut)]
    let mut scope_5508 = writer.prefix("GroupIpAddress");
    if let Some(var_5509) = &input.group_ip_address {
        scope_5508.string(var_5509);
    }
    #[allow(unused_mut)]
    let mut scope_5510 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5511) = &input.network_interface_ids {
        let mut list_5513 = scope_5510.start_list(true, Some("item"));
        for item_5512 in var_5511 {
            #[allow(unused_mut)]
            let mut entry_5514 = list_5513.entry();
            entry_5514.string(item_5512);
        }
        list_5513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("DryRun");
    if let Some(var_5516) = &input.dry_run {
        scope_5515.boolean(*var_5516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5518) = &input.transit_gateway_multicast_domain_id {
        scope_5517.string(var_5518);
    }
    #[allow(unused_mut)]
    let mut scope_5519 = writer.prefix("GroupIpAddress");
    if let Some(var_5520) = &input.group_ip_address {
        scope_5519.string(var_5520);
    }
    #[allow(unused_mut)]
    let mut scope_5521 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5522) = &input.network_interface_ids {
        let mut list_5524 = scope_5521.start_list(true, Some("item"));
        for item_5523 in var_5522 {
            #[allow(unused_mut)]
            let mut entry_5525 = list_5524.entry();
            entry_5525.string(item_5523);
        }
        list_5524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("DryRun");
    if let Some(var_5527) = &input.dry_run {
        scope_5526.boolean(*var_5527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5529) = &input.transit_gateway_multicast_domain_id {
        scope_5528.string(var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5531) = &input.transit_gateway_attachment_id {
        scope_5530.string(var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("SubnetIds");
    if let Some(var_5533) = &input.subnet_ids {
        let mut list_5535 = scope_5532.start_list(true, Some("item"));
        for item_5534 in var_5533 {
            #[allow(unused_mut)]
            let mut entry_5536 = list_5535.entry();
            entry_5536.string(item_5534);
        }
        list_5535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5537 = writer.prefix("DryRun");
    if let Some(var_5538) = &input.dry_run {
        scope_5537.boolean(*var_5538);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5539 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5540) = &input.transit_gateway_attachment_id {
        scope_5539.string(var_5540);
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("DryRun");
    if let Some(var_5542) = &input.dry_run {
        scope_5541.boolean(*var_5542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5544) = &input.transit_gateway_attachment_id {
        scope_5543.string(var_5544);
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("DryRun");
    if let Some(var_5546) = &input.dry_run {
        scope_5545.boolean(*var_5546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("DryRun");
    if let Some(var_5548) = &input.dry_run {
        scope_5547.boolean(*var_5548);
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("ServiceId");
    if let Some(var_5550) = &input.service_id {
        scope_5549.string(var_5550);
    }
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("VpcEndpointId");
    if let Some(var_5552) = &input.vpc_endpoint_ids {
        let mut list_5554 = scope_5551.start_list(true, Some("item"));
        for item_5553 in var_5552 {
            #[allow(unused_mut)]
            let mut entry_5555 = list_5554.entry();
            entry_5555.string(item_5553);
        }
        list_5554.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5556 = writer.prefix("DryRun");
    if let Some(var_5557) = &input.dry_run {
        scope_5556.boolean(*var_5557);
    }
    #[allow(unused_mut)]
    let mut scope_5558 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5559) = &input.vpc_peering_connection_id {
        scope_5558.string(var_5559);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5560 = writer.prefix("AllocationId");
    if let Some(var_5561) = &input.allocation_id {
        scope_5560.string(var_5561);
    }
    #[allow(unused_mut)]
    let mut scope_5562 = writer.prefix("PublicIp");
    if let Some(var_5563) = &input.public_ip {
        scope_5562.string(var_5563);
    }
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5565) = &input.network_border_group {
        scope_5564.string(var_5565);
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("DryRun");
    if let Some(var_5567) = &input.dry_run {
        scope_5566.boolean(*var_5567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("HostId");
    if let Some(var_5569) = &input.host_ids {
        let mut list_5571 = scope_5568.start_list(true, Some("item"));
        for item_5570 in var_5569 {
            #[allow(unused_mut)]
            let mut entry_5572 = list_5571.entry();
            entry_5572.string(item_5570);
        }
        list_5571.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5573 = writer.prefix("DryRun");
    if let Some(var_5574) = &input.dry_run {
        scope_5573.boolean(*var_5574);
    }
    #[allow(unused_mut)]
    let mut scope_5575 = writer.prefix("IpamPoolId");
    if let Some(var_5576) = &input.ipam_pool_id {
        scope_5575.string(var_5576);
    }
    #[allow(unused_mut)]
    let mut scope_5577 = writer.prefix("Cidr");
    if let Some(var_5578) = &input.cidr {
        scope_5577.string(var_5578);
    }
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5580) = &input.ipam_pool_allocation_id {
        scope_5579.string(var_5580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("IamInstanceProfile");
    if let Some(var_5582) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5581, var_5582,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5583 = writer.prefix("AssociationId");
    if let Some(var_5584) = &input.association_id {
        scope_5583.string(var_5584);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5585 = writer.prefix("AssociationId");
    if let Some(var_5586) = &input.association_id {
        scope_5585.string(var_5586);
    }
    #[allow(unused_mut)]
    let mut scope_5587 = writer.prefix("DryRun");
    if let Some(var_5588) = &input.dry_run {
        scope_5587.boolean(*var_5588);
    }
    #[allow(unused_mut)]
    let mut scope_5589 = writer.prefix("NetworkAclId");
    if let Some(var_5590) = &input.network_acl_id {
        scope_5589.string(var_5590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5591 = writer.prefix("CidrBlock");
    if let Some(var_5592) = &input.cidr_block {
        scope_5591.string(var_5592);
    }
    #[allow(unused_mut)]
    let mut scope_5593 = writer.prefix("DryRun");
    if let Some(var_5594) = &input.dry_run {
        scope_5593.boolean(*var_5594);
    }
    #[allow(unused_mut)]
    let mut scope_5595 = writer.prefix("Egress");
    if let Some(var_5596) = &input.egress {
        scope_5595.boolean(*var_5596);
    }
    #[allow(unused_mut)]
    let mut scope_5597 = writer.prefix("Icmp");
    if let Some(var_5598) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5597, var_5598)?;
    }
    #[allow(unused_mut)]
    let mut scope_5599 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5600) = &input.ipv6_cidr_block {
        scope_5599.string(var_5600);
    }
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("NetworkAclId");
    if let Some(var_5602) = &input.network_acl_id {
        scope_5601.string(var_5602);
    }
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("PortRange");
    if let Some(var_5604) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5603, var_5604)?;
    }
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("Protocol");
    if let Some(var_5606) = &input.protocol {
        scope_5605.string(var_5606);
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("RuleAction");
    if let Some(var_5608) = &input.rule_action {
        scope_5607.string(var_5608.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("RuleNumber");
    if let Some(var_5610) = &input.rule_number {
        scope_5609.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5610).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5612) = &input.destination_cidr_block {
        scope_5611.string(var_5612);
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5614) = &input.destination_ipv6_cidr_block {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5616) = &input.destination_prefix_list_id {
        scope_5615.string(var_5616);
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("DryRun");
    if let Some(var_5618) = &input.dry_run {
        scope_5617.boolean(*var_5618);
    }
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("VpcEndpointId");
    if let Some(var_5620) = &input.vpc_endpoint_id {
        scope_5619.string(var_5620);
    }
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5622) = &input.egress_only_internet_gateway_id {
        scope_5621.string(var_5622);
    }
    #[allow(unused_mut)]
    let mut scope_5623 = writer.prefix("GatewayId");
    if let Some(var_5624) = &input.gateway_id {
        scope_5623.string(var_5624);
    }
    #[allow(unused_mut)]
    let mut scope_5625 = writer.prefix("InstanceId");
    if let Some(var_5626) = &input.instance_id {
        scope_5625.string(var_5626);
    }
    #[allow(unused_mut)]
    let mut scope_5627 = writer.prefix("LocalTarget");
    if let Some(var_5628) = &input.local_target {
        scope_5627.boolean(*var_5628);
    }
    #[allow(unused_mut)]
    let mut scope_5629 = writer.prefix("NatGatewayId");
    if let Some(var_5630) = &input.nat_gateway_id {
        scope_5629.string(var_5630);
    }
    #[allow(unused_mut)]
    let mut scope_5631 = writer.prefix("TransitGatewayId");
    if let Some(var_5632) = &input.transit_gateway_id {
        scope_5631.string(var_5632);
    }
    #[allow(unused_mut)]
    let mut scope_5633 = writer.prefix("LocalGatewayId");
    if let Some(var_5634) = &input.local_gateway_id {
        scope_5633.string(var_5634);
    }
    #[allow(unused_mut)]
    let mut scope_5635 = writer.prefix("CarrierGatewayId");
    if let Some(var_5636) = &input.carrier_gateway_id {
        scope_5635.string(var_5636);
    }
    #[allow(unused_mut)]
    let mut scope_5637 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5638) = &input.network_interface_id {
        scope_5637.string(var_5638);
    }
    #[allow(unused_mut)]
    let mut scope_5639 = writer.prefix("RouteTableId");
    if let Some(var_5640) = &input.route_table_id {
        scope_5639.string(var_5640);
    }
    #[allow(unused_mut)]
    let mut scope_5641 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5642) = &input.vpc_peering_connection_id {
        scope_5641.string(var_5642);
    }
    #[allow(unused_mut)]
    let mut scope_5643 = writer.prefix("CoreNetworkArn");
    if let Some(var_5644) = &input.core_network_arn {
        scope_5643.string(var_5644);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5645 = writer.prefix("AssociationId");
    if let Some(var_5646) = &input.association_id {
        scope_5645.string(var_5646);
    }
    #[allow(unused_mut)]
    let mut scope_5647 = writer.prefix("DryRun");
    if let Some(var_5648) = &input.dry_run {
        scope_5647.boolean(*var_5648);
    }
    #[allow(unused_mut)]
    let mut scope_5649 = writer.prefix("RouteTableId");
    if let Some(var_5650) = &input.route_table_id {
        scope_5649.string(var_5650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5651 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5652) = &input.destination_cidr_block {
        scope_5651.string(var_5652);
    }
    #[allow(unused_mut)]
    let mut scope_5653 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5654) = &input.transit_gateway_route_table_id {
        scope_5653.string(var_5654);
    }
    #[allow(unused_mut)]
    let mut scope_5655 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5656) = &input.transit_gateway_attachment_id {
        scope_5655.string(var_5656);
    }
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("Blackhole");
    if let Some(var_5658) = &input.blackhole {
        scope_5657.boolean(*var_5658);
    }
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("DryRun");
    if let Some(var_5660) = &input.dry_run {
        scope_5659.boolean(*var_5660);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("Description");
    if let Some(var_5662) = &input.description {
        scope_5661.string(var_5662);
    }
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("DryRun");
    if let Some(var_5664) = &input.dry_run {
        scope_5663.boolean(*var_5664);
    }
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("EndTime");
    if let Some(var_5666) = &input.end_time {
        scope_5665.date_time(var_5666, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("InstanceId");
    if let Some(var_5668) = &input.instances {
        let mut list_5670 = scope_5667.start_list(true, Some("InstanceId"));
        for item_5669 in var_5668 {
            #[allow(unused_mut)]
            let mut entry_5671 = list_5670.entry();
            entry_5671.string(item_5669);
        }
        list_5670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("ReasonCode");
    if let Some(var_5673) = &input.reason_codes {
        let mut list_5675 = scope_5672.start_list(true, Some("item"));
        for item_5674 in var_5673 {
            #[allow(unused_mut)]
            let mut entry_5676 = list_5675.entry();
            entry_5676.string(item_5674.as_str());
        }
        list_5675.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5677 = writer.prefix("StartTime");
    if let Some(var_5678) = &input.start_time {
        scope_5677.date_time(var_5678, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5679 = writer.prefix("Status");
    if let Some(var_5680) = &input.status {
        scope_5679.string(var_5680.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5681 = writer.prefix("DryRun");
    if let Some(var_5682) = &input.dry_run {
        scope_5681.boolean(*var_5682);
    }
    #[allow(unused_mut)]
    let mut scope_5683 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5684) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5683, var_5684,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5685 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5686) = &input.availability_zone_group {
        scope_5685.string(var_5686);
    }
    #[allow(unused_mut)]
    let mut scope_5687 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5688) = &input.block_duration_minutes {
        scope_5687.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5688).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5689 = writer.prefix("ClientToken");
    if let Some(var_5690) = &input.client_token {
        scope_5689.string(var_5690);
    }
    #[allow(unused_mut)]
    let mut scope_5691 = writer.prefix("DryRun");
    if let Some(var_5692) = &input.dry_run {
        scope_5691.boolean(*var_5692);
    }
    #[allow(unused_mut)]
    let mut scope_5693 = writer.prefix("InstanceCount");
    if let Some(var_5694) = &input.instance_count {
        scope_5693.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5694).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5695 = writer.prefix("LaunchGroup");
    if let Some(var_5696) = &input.launch_group {
        scope_5695.string(var_5696);
    }
    #[allow(unused_mut)]
    let mut scope_5697 = writer.prefix("LaunchSpecification");
    if let Some(var_5698) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5697, var_5698,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5699 = writer.prefix("SpotPrice");
    if let Some(var_5700) = &input.spot_price {
        scope_5699.string(var_5700);
    }
    #[allow(unused_mut)]
    let mut scope_5701 = writer.prefix("Type");
    if let Some(var_5702) = &input.r#type {
        scope_5701.string(var_5702.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5703 = writer.prefix("ValidFrom");
    if let Some(var_5704) = &input.valid_from {
        scope_5703.date_time(var_5704, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5705 = writer.prefix("ValidUntil");
    if let Some(var_5706) = &input.valid_until {
        scope_5705.date_time(var_5706, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5707 = writer.prefix("TagSpecification");
    if let Some(var_5708) = &input.tag_specifications {
        let mut list_5710 = scope_5707.start_list(true, Some("item"));
        for item_5709 in var_5708 {
            #[allow(unused_mut)]
            let mut entry_5711 = list_5710.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5711, item_5709,
            )?;
        }
        list_5710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5712 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5713) = &input.instance_interruption_behavior {
        scope_5712.string(var_5713.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5714 = writer.prefix("AllocationId");
    if let Some(var_5715) = &input.allocation_id {
        scope_5714.string(var_5715);
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("Attribute");
    if let Some(var_5717) = &input.attribute {
        scope_5716.string(var_5717.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5718 = writer.prefix("DryRun");
    if let Some(var_5719) = &input.dry_run {
        scope_5718.boolean(*var_5719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5720 = writer.prefix("DryRun");
    if let Some(var_5721) = &input.dry_run {
        scope_5720.boolean(*var_5721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5722 = writer.prefix("DryRun");
    if let Some(var_5723) = &input.dry_run {
        scope_5722.boolean(*var_5723);
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("FpgaImageId");
    if let Some(var_5725) = &input.fpga_image_id {
        scope_5724.string(var_5725);
    }
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("Attribute");
    if let Some(var_5727) = &input.attribute {
        scope_5726.string(var_5727.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("Attribute");
    if let Some(var_5729) = &input.attribute {
        scope_5728.string(var_5729.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("ImageId");
    if let Some(var_5731) = &input.image_id {
        scope_5730.string(var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("DryRun");
    if let Some(var_5733) = &input.dry_run {
        scope_5732.boolean(*var_5733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("Attribute");
    if let Some(var_5735) = &input.attribute {
        scope_5734.string(var_5735.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("DryRun");
    if let Some(var_5737) = &input.dry_run {
        scope_5736.boolean(*var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("InstanceId");
    if let Some(var_5739) = &input.instance_id {
        scope_5738.string(var_5739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("DryRun");
    if let Some(var_5741) = &input.dry_run {
        scope_5740.boolean(*var_5741);
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5743) = &input.network_interface_id {
        scope_5742.string(var_5743);
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("SourceDestCheck");
    if let Some(var_5745) = &input.source_dest_check {
        scope_5744.string(var_5745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("Attribute");
    if let Some(var_5747) = &input.attribute {
        scope_5746.string(var_5747.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("SnapshotId");
    if let Some(var_5749) = &input.snapshot_id {
        scope_5748.string(var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("DryRun");
    if let Some(var_5751) = &input.dry_run {
        scope_5750.boolean(*var_5751);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("DryRun");
    if let Some(var_5753) = &input.dry_run {
        scope_5752.boolean(*var_5753);
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("PublicIp");
    if let Some(var_5755) = &input.public_ip {
        scope_5754.string(var_5755);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("ImageId");
    if let Some(var_5757) = &input.image_id {
        scope_5756.string(var_5757);
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("DryRun");
    if let Some(var_5759) = &input.dry_run {
        scope_5758.boolean(*var_5759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("DryRun");
    if let Some(var_5761) = &input.dry_run {
        scope_5760.boolean(*var_5761);
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("PrefixListId");
    if let Some(var_5763) = &input.prefix_list_id {
        scope_5762.string(var_5763);
    }
    #[allow(unused_mut)]
    let mut scope_5764 = writer.prefix("PreviousVersion");
    if let Some(var_5765) = &input.previous_version {
        scope_5764.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5765).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5766 = writer.prefix("CurrentVersion");
    if let Some(var_5767) = &input.current_version {
        scope_5766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5767).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("SnapshotId");
    if let Some(var_5769) = &input.snapshot_id {
        scope_5768.string(var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("DryRun");
    if let Some(var_5771) = &input.dry_run {
        scope_5770.boolean(*var_5771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("SnapshotId");
    if let Some(var_5773) = &input.snapshot_id {
        scope_5772.string(var_5773);
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5775) = &input.temporary_restore_days {
        scope_5774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5775).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("PermanentRestore");
    if let Some(var_5777) = &input.permanent_restore {
        scope_5776.boolean(*var_5777);
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("DryRun");
    if let Some(var_5779) = &input.dry_run {
        scope_5778.boolean(*var_5779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5780 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5781) = &input.client_vpn_endpoint_id {
        scope_5780.string(var_5781);
    }
    #[allow(unused_mut)]
    let mut scope_5782 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5783) = &input.target_network_cidr {
        scope_5782.string(var_5783);
    }
    #[allow(unused_mut)]
    let mut scope_5784 = writer.prefix("AccessGroupId");
    if let Some(var_5785) = &input.access_group_id {
        scope_5784.string(var_5785);
    }
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("RevokeAllGroups");
    if let Some(var_5787) = &input.revoke_all_groups {
        scope_5786.boolean(*var_5787);
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("DryRun");
    if let Some(var_5789) = &input.dry_run {
        scope_5788.boolean(*var_5789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("DryRun");
    if let Some(var_5791) = &input.dry_run {
        scope_5790.boolean(*var_5791);
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("GroupId");
    if let Some(var_5793) = &input.group_id {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("IpPermissions");
    if let Some(var_5795) = &input.ip_permissions {
        let mut list_5797 = scope_5794.start_list(true, Some("item"));
        for item_5796 in var_5795 {
            #[allow(unused_mut)]
            let mut entry_5798 = list_5797.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5798, item_5796)?;
        }
        list_5797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5800) = &input.security_group_rule_ids {
        let mut list_5802 = scope_5799.start_list(true, Some("item"));
        for item_5801 in var_5800 {
            #[allow(unused_mut)]
            let mut entry_5803 = list_5802.entry();
            entry_5803.string(item_5801);
        }
        list_5802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5804 = writer.prefix("CidrIp");
    if let Some(var_5805) = &input.cidr_ip {
        scope_5804.string(var_5805);
    }
    #[allow(unused_mut)]
    let mut scope_5806 = writer.prefix("FromPort");
    if let Some(var_5807) = &input.from_port {
        scope_5806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5807).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5808 = writer.prefix("IpProtocol");
    if let Some(var_5809) = &input.ip_protocol {
        scope_5808.string(var_5809);
    }
    #[allow(unused_mut)]
    let mut scope_5810 = writer.prefix("ToPort");
    if let Some(var_5811) = &input.to_port {
        scope_5810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5812 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5813) = &input.source_security_group_name {
        scope_5812.string(var_5813);
    }
    #[allow(unused_mut)]
    let mut scope_5814 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5815) = &input.source_security_group_owner_id {
        scope_5814.string(var_5815);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5816 = writer.prefix("CidrIp");
    if let Some(var_5817) = &input.cidr_ip {
        scope_5816.string(var_5817);
    }
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("FromPort");
    if let Some(var_5819) = &input.from_port {
        scope_5818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5820 = writer.prefix("GroupId");
    if let Some(var_5821) = &input.group_id {
        scope_5820.string(var_5821);
    }
    #[allow(unused_mut)]
    let mut scope_5822 = writer.prefix("GroupName");
    if let Some(var_5823) = &input.group_name {
        scope_5822.string(var_5823);
    }
    #[allow(unused_mut)]
    let mut scope_5824 = writer.prefix("IpPermissions");
    if let Some(var_5825) = &input.ip_permissions {
        let mut list_5827 = scope_5824.start_list(true, Some("item"));
        for item_5826 in var_5825 {
            #[allow(unused_mut)]
            let mut entry_5828 = list_5827.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5828, item_5826)?;
        }
        list_5827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("IpProtocol");
    if let Some(var_5830) = &input.ip_protocol {
        scope_5829.string(var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5832) = &input.source_security_group_name {
        scope_5831.string(var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5834) = &input.source_security_group_owner_id {
        scope_5833.string(var_5834);
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("ToPort");
    if let Some(var_5836) = &input.to_port {
        scope_5835.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5836).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("DryRun");
    if let Some(var_5838) = &input.dry_run {
        scope_5837.boolean(*var_5838);
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5840) = &input.security_group_rule_ids {
        let mut list_5842 = scope_5839.start_list(true, Some("item"));
        for item_5841 in var_5840 {
            #[allow(unused_mut)]
            let mut entry_5843 = list_5842.entry();
            entry_5843.string(item_5841);
        }
        list_5842.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5844 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5845) = &input.block_device_mappings {
        let mut list_5847 = scope_5844.start_list(true, Some("BlockDeviceMapping"));
        for item_5846 in var_5845 {
            #[allow(unused_mut)]
            let mut entry_5848 = list_5847.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5848, item_5846,
            )?;
        }
        list_5847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5849 = writer.prefix("ImageId");
    if let Some(var_5850) = &input.image_id {
        scope_5849.string(var_5850);
    }
    #[allow(unused_mut)]
    let mut scope_5851 = writer.prefix("InstanceType");
    if let Some(var_5852) = &input.instance_type {
        scope_5851.string(var_5852.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5853 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5854) = &input.ipv6_address_count {
        scope_5853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5855 = writer.prefix("Ipv6Address");
    if let Some(var_5856) = &input.ipv6_addresses {
        let mut list_5858 = scope_5855.start_list(true, Some("item"));
        for item_5857 in var_5856 {
            #[allow(unused_mut)]
            let mut entry_5859 = list_5858.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5859, item_5857,
            )?;
        }
        list_5858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5860 = writer.prefix("KernelId");
    if let Some(var_5861) = &input.kernel_id {
        scope_5860.string(var_5861);
    }
    #[allow(unused_mut)]
    let mut scope_5862 = writer.prefix("KeyName");
    if let Some(var_5863) = &input.key_name {
        scope_5862.string(var_5863);
    }
    #[allow(unused_mut)]
    let mut scope_5864 = writer.prefix("MaxCount");
    if let Some(var_5865) = &input.max_count {
        scope_5864.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5865).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5866 = writer.prefix("MinCount");
    if let Some(var_5867) = &input.min_count {
        scope_5866.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5867).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5868 = writer.prefix("Monitoring");
    if let Some(var_5869) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5868, var_5869,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5870 = writer.prefix("Placement");
    if let Some(var_5871) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5870, var_5871)?;
    }
    #[allow(unused_mut)]
    let mut scope_5872 = writer.prefix("RamdiskId");
    if let Some(var_5873) = &input.ramdisk_id {
        scope_5872.string(var_5873);
    }
    #[allow(unused_mut)]
    let mut scope_5874 = writer.prefix("SecurityGroupId");
    if let Some(var_5875) = &input.security_group_ids {
        let mut list_5877 = scope_5874.start_list(true, Some("SecurityGroupId"));
        for item_5876 in var_5875 {
            #[allow(unused_mut)]
            let mut entry_5878 = list_5877.entry();
            entry_5878.string(item_5876);
        }
        list_5877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5879 = writer.prefix("SecurityGroup");
    if let Some(var_5880) = &input.security_groups {
        let mut list_5882 = scope_5879.start_list(true, Some("SecurityGroup"));
        for item_5881 in var_5880 {
            #[allow(unused_mut)]
            let mut entry_5883 = list_5882.entry();
            entry_5883.string(item_5881);
        }
        list_5882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("SubnetId");
    if let Some(var_5885) = &input.subnet_id {
        scope_5884.string(var_5885);
    }
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("UserData");
    if let Some(var_5887) = &input.user_data {
        scope_5886.string(var_5887);
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("AdditionalInfo");
    if let Some(var_5889) = &input.additional_info {
        scope_5888.string(var_5889);
    }
    #[allow(unused_mut)]
    let mut scope_5890 = writer.prefix("ClientToken");
    if let Some(var_5891) = &input.client_token {
        scope_5890.string(var_5891);
    }
    #[allow(unused_mut)]
    let mut scope_5892 = writer.prefix("DisableApiTermination");
    if let Some(var_5893) = &input.disable_api_termination {
        scope_5892.boolean(*var_5893);
    }
    #[allow(unused_mut)]
    let mut scope_5894 = writer.prefix("DryRun");
    if let Some(var_5895) = &input.dry_run {
        scope_5894.boolean(*var_5895);
    }
    #[allow(unused_mut)]
    let mut scope_5896 = writer.prefix("EbsOptimized");
    if let Some(var_5897) = &input.ebs_optimized {
        scope_5896.boolean(*var_5897);
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("IamInstanceProfile");
    if let Some(var_5899) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5898, var_5899,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5901) = &input.instance_initiated_shutdown_behavior {
        scope_5900.string(var_5901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("NetworkInterface");
    if let Some(var_5903) = &input.network_interfaces {
        let mut list_5905 = scope_5902.start_list(true, Some("item"));
        for item_5904 in var_5903 {
            #[allow(unused_mut)]
            let mut entry_5906 = list_5905.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5906, item_5904)?;
        }
        list_5905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5907 = writer.prefix("PrivateIpAddress");
    if let Some(var_5908) = &input.private_ip_address {
        scope_5907.string(var_5908);
    }
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5910) = &input.elastic_gpu_specification {
        let mut list_5912 = scope_5909.start_list(true, Some("item"));
        for item_5911 in var_5910 {
            #[allow(unused_mut)]
            let mut entry_5913 = list_5912.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5913, item_5911,
            )?;
        }
        list_5912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5914 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5915) = &input.elastic_inference_accelerators {
        let mut list_5917 = scope_5914.start_list(true, Some("item"));
        for item_5916 in var_5915 {
            #[allow(unused_mut)]
            let mut entry_5918 = list_5917.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5918, item_5916,
            )?;
        }
        list_5917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("TagSpecification");
    if let Some(var_5920) = &input.tag_specifications {
        let mut list_5922 = scope_5919.start_list(true, Some("item"));
        for item_5921 in var_5920 {
            #[allow(unused_mut)]
            let mut entry_5923 = list_5922.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5923, item_5921,
            )?;
        }
        list_5922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5924 = writer.prefix("LaunchTemplate");
    if let Some(var_5925) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5924, var_5925,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5926 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5927) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5926, var_5927,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5928 = writer.prefix("CreditSpecification");
    if let Some(var_5929) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5928, var_5929,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5930 = writer.prefix("CpuOptions");
    if let Some(var_5931) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5930, var_5931,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5932 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5933) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5932, var_5933,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5934 = writer.prefix("HibernationOptions");
    if let Some(var_5935) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5934, var_5935,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5936 = writer.prefix("LicenseSpecification");
    if let Some(var_5937) = &input.license_specifications {
        let mut list_5939 = scope_5936.start_list(true, Some("item"));
        for item_5938 in var_5937 {
            #[allow(unused_mut)]
            let mut entry_5940 = list_5939.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5940, item_5938,
            )?;
        }
        list_5939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("MetadataOptions");
    if let Some(var_5942) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5941, var_5942,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("EnclaveOptions");
    if let Some(var_5944) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5943, var_5944,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5946) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5945, var_5946,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("ClientToken");
    if let Some(var_5948) = &input.client_token {
        scope_5947.string(var_5948);
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("DryRun");
    if let Some(var_5950) = &input.dry_run {
        scope_5949.boolean(*var_5950);
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("InstanceCount");
    if let Some(var_5952) = &input.instance_count {
        scope_5951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("LaunchSpecification");
    if let Some(var_5954) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5953, var_5954,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5956) = &input.scheduled_instance_id {
        scope_5955.string(var_5956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5957 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5958) = &input.local_gateway_route_table_id {
        scope_5957.string(var_5958);
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("Filter");
    if let Some(var_5960) = &input.filters {
        let mut list_5962 = scope_5959.start_list(true, Some("Filter"));
        for item_5961 in var_5960 {
            #[allow(unused_mut)]
            let mut entry_5963 = list_5962.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5963, item_5961)?;
        }
        list_5962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5964 = writer.prefix("MaxResults");
    if let Some(var_5965) = &input.max_results {
        scope_5964.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5965).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5966 = writer.prefix("NextToken");
    if let Some(var_5967) = &input.next_token {
        scope_5966.string(var_5967);
    }
    #[allow(unused_mut)]
    let mut scope_5968 = writer.prefix("DryRun");
    if let Some(var_5969) = &input.dry_run {
        scope_5968.boolean(*var_5969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5970 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5971) = &input.transit_gateway_multicast_domain_id {
        scope_5970.string(var_5971);
    }
    #[allow(unused_mut)]
    let mut scope_5972 = writer.prefix("Filter");
    if let Some(var_5973) = &input.filters {
        let mut list_5975 = scope_5972.start_list(true, Some("Filter"));
        for item_5974 in var_5973 {
            #[allow(unused_mut)]
            let mut entry_5976 = list_5975.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5976, item_5974)?;
        }
        list_5975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("MaxResults");
    if let Some(var_5978) = &input.max_results {
        scope_5977.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5978).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("NextToken");
    if let Some(var_5980) = &input.next_token {
        scope_5979.string(var_5980);
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("DryRun");
    if let Some(var_5982) = &input.dry_run {
        scope_5981.boolean(*var_5982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5983 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5984) = &input.transit_gateway_route_table_id {
        scope_5983.string(var_5984);
    }
    #[allow(unused_mut)]
    let mut scope_5985 = writer.prefix("Filter");
    if let Some(var_5986) = &input.filters {
        let mut list_5988 = scope_5985.start_list(true, Some("Filter"));
        for item_5987 in var_5986 {
            #[allow(unused_mut)]
            let mut entry_5989 = list_5988.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5989, item_5987)?;
        }
        list_5988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("MaxResults");
    if let Some(var_5991) = &input.max_results {
        scope_5990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5991).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("DryRun");
    if let Some(var_5993) = &input.dry_run {
        scope_5992.boolean(*var_5993);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("InstanceId");
    if let Some(var_5995) = &input.instance_id {
        scope_5994.string(var_5995);
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("DryRun");
    if let Some(var_5997) = &input.dry_run {
        scope_5996.boolean(*var_5997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("InstanceId");
    if let Some(var_5999) = &input.instance_ids {
        let mut list_6001 = scope_5998.start_list(true, Some("InstanceId"));
        for item_6000 in var_5999 {
            #[allow(unused_mut)]
            let mut entry_6002 = list_6001.entry();
            entry_6002.string(item_6000);
        }
        list_6001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6003 = writer.prefix("AdditionalInfo");
    if let Some(var_6004) = &input.additional_info {
        scope_6003.string(var_6004);
    }
    #[allow(unused_mut)]
    let mut scope_6005 = writer.prefix("DryRun");
    if let Some(var_6006) = &input.dry_run {
        scope_6005.boolean(*var_6006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6007 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6008) = &input.network_insights_access_scope_id {
        scope_6007.string(var_6008);
    }
    #[allow(unused_mut)]
    let mut scope_6009 = writer.prefix("DryRun");
    if let Some(var_6010) = &input.dry_run {
        scope_6009.boolean(*var_6010);
    }
    #[allow(unused_mut)]
    let mut scope_6011 = writer.prefix("TagSpecification");
    if let Some(var_6012) = &input.tag_specifications {
        let mut list_6014 = scope_6011.start_list(true, Some("item"));
        for item_6013 in var_6012 {
            #[allow(unused_mut)]
            let mut entry_6015 = list_6014.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6015, item_6013,
            )?;
        }
        list_6014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6016 = writer.prefix("ClientToken");
    if let Some(var_6017) = &input.client_token {
        scope_6016.string(var_6017);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6018 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6019) = &input.network_insights_path_id {
        scope_6018.string(var_6019);
    }
    #[allow(unused_mut)]
    let mut scope_6020 = writer.prefix("FilterInArn");
    if let Some(var_6021) = &input.filter_in_arns {
        let mut list_6023 = scope_6020.start_list(true, Some("item"));
        for item_6022 in var_6021 {
            #[allow(unused_mut)]
            let mut entry_6024 = list_6023.entry();
            entry_6024.string(item_6022);
        }
        list_6023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("DryRun");
    if let Some(var_6026) = &input.dry_run {
        scope_6025.boolean(*var_6026);
    }
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("TagSpecification");
    if let Some(var_6028) = &input.tag_specifications {
        let mut list_6030 = scope_6027.start_list(true, Some("item"));
        for item_6029 in var_6028 {
            #[allow(unused_mut)]
            let mut entry_6031 = list_6030.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6031, item_6029,
            )?;
        }
        list_6030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("ClientToken");
    if let Some(var_6033) = &input.client_token {
        scope_6032.string(var_6033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("DryRun");
    if let Some(var_6035) = &input.dry_run {
        scope_6034.boolean(*var_6035);
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("ServiceId");
    if let Some(var_6037) = &input.service_id {
        scope_6036.string(var_6037);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("InstanceId");
    if let Some(var_6039) = &input.instance_ids {
        let mut list_6041 = scope_6038.start_list(true, Some("InstanceId"));
        for item_6040 in var_6039 {
            #[allow(unused_mut)]
            let mut entry_6042 = list_6041.entry();
            entry_6042.string(item_6040);
        }
        list_6041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6043 = writer.prefix("Hibernate");
    if let Some(var_6044) = &input.hibernate {
        scope_6043.boolean(*var_6044);
    }
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("DryRun");
    if let Some(var_6046) = &input.dry_run {
        scope_6045.boolean(*var_6046);
    }
    #[allow(unused_mut)]
    let mut scope_6047 = writer.prefix("Force");
    if let Some(var_6048) = &input.force {
        scope_6047.boolean(*var_6048);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6049 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6050) = &input.client_vpn_endpoint_id {
        scope_6049.string(var_6050);
    }
    #[allow(unused_mut)]
    let mut scope_6051 = writer.prefix("ConnectionId");
    if let Some(var_6052) = &input.connection_id {
        scope_6051.string(var_6052);
    }
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("Username");
    if let Some(var_6054) = &input.username {
        scope_6053.string(var_6054);
    }
    #[allow(unused_mut)]
    let mut scope_6055 = writer.prefix("DryRun");
    if let Some(var_6056) = &input.dry_run {
        scope_6055.boolean(*var_6056);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6057 = writer.prefix("InstanceId");
    if let Some(var_6058) = &input.instance_ids {
        let mut list_6060 = scope_6057.start_list(true, Some("InstanceId"));
        for item_6059 in var_6058 {
            #[allow(unused_mut)]
            let mut entry_6061 = list_6060.entry();
            entry_6061.string(item_6059);
        }
        list_6060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6062 = writer.prefix("DryRun");
    if let Some(var_6063) = &input.dry_run {
        scope_6062.boolean(*var_6063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6064 = writer.prefix("Ipv6Addresses");
    if let Some(var_6065) = &input.ipv6_addresses {
        let mut list_6067 = scope_6064.start_list(true, Some("item"));
        for item_6066 in var_6065 {
            #[allow(unused_mut)]
            let mut entry_6068 = list_6067.entry();
            entry_6068.string(item_6066);
        }
        list_6067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6069 = writer.prefix("Ipv6Prefix");
    if let Some(var_6070) = &input.ipv6_prefixes {
        let mut list_6072 = scope_6069.start_list(true, Some("item"));
        for item_6071 in var_6070 {
            #[allow(unused_mut)]
            let mut entry_6073 = list_6072.entry();
            entry_6073.string(item_6071);
        }
        list_6072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6074 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6075) = &input.network_interface_id {
        scope_6074.string(var_6075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6076 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6077) = &input.network_interface_id {
        scope_6076.string(var_6077);
    }
    #[allow(unused_mut)]
    let mut scope_6078 = writer.prefix("PrivateIpAddress");
    if let Some(var_6079) = &input.private_ip_addresses {
        let mut list_6081 = scope_6078.start_list(true, Some("PrivateIpAddress"));
        for item_6080 in var_6079 {
            #[allow(unused_mut)]
            let mut entry_6082 = list_6081.entry();
            entry_6082.string(item_6080);
        }
        list_6081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6083 = writer.prefix("Ipv4Prefix");
    if let Some(var_6084) = &input.ipv4_prefixes {
        let mut list_6086 = scope_6083.start_list(true, Some("item"));
        for item_6085 in var_6084 {
            #[allow(unused_mut)]
            let mut entry_6087 = list_6086.entry();
            entry_6087.string(item_6085);
        }
        list_6086.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6088 = writer.prefix("InstanceId");
    if let Some(var_6089) = &input.instance_ids {
        let mut list_6091 = scope_6088.start_list(true, Some("InstanceId"));
        for item_6090 in var_6089 {
            #[allow(unused_mut)]
            let mut entry_6092 = list_6091.entry();
            entry_6092.string(item_6090);
        }
        list_6091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6093 = writer.prefix("DryRun");
    if let Some(var_6094) = &input.dry_run {
        scope_6093.boolean(*var_6094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6095 = writer.prefix("DryRun");
    if let Some(var_6096) = &input.dry_run {
        scope_6095.boolean(*var_6096);
    }
    #[allow(unused_mut)]
    let mut scope_6097 = writer.prefix("GroupId");
    if let Some(var_6098) = &input.group_id {
        scope_6097.string(var_6098);
    }
    #[allow(unused_mut)]
    let mut scope_6099 = writer.prefix("GroupName");
    if let Some(var_6100) = &input.group_name {
        scope_6099.string(var_6100);
    }
    #[allow(unused_mut)]
    let mut scope_6101 = writer.prefix("IpPermissions");
    if let Some(var_6102) = &input.ip_permissions {
        let mut list_6104 = scope_6101.start_list(true, Some("item"));
        for item_6103 in var_6102 {
            #[allow(unused_mut)]
            let mut entry_6105 = list_6104.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6105, item_6103)?;
        }
        list_6104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6106 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6107) = &input.security_group_rule_descriptions {
        let mut list_6109 = scope_6106.start_list(true, Some("item"));
        for item_6108 in var_6107 {
            #[allow(unused_mut)]
            let mut entry_6110 = list_6109.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6110, item_6108,
            )?;
        }
        list_6109.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6111 = writer.prefix("DryRun");
    if let Some(var_6112) = &input.dry_run {
        scope_6111.boolean(*var_6112);
    }
    #[allow(unused_mut)]
    let mut scope_6113 = writer.prefix("GroupId");
    if let Some(var_6114) = &input.group_id {
        scope_6113.string(var_6114);
    }
    #[allow(unused_mut)]
    let mut scope_6115 = writer.prefix("GroupName");
    if let Some(var_6116) = &input.group_name {
        scope_6115.string(var_6116);
    }
    #[allow(unused_mut)]
    let mut scope_6117 = writer.prefix("IpPermissions");
    if let Some(var_6118) = &input.ip_permissions {
        let mut list_6120 = scope_6117.start_list(true, Some("item"));
        for item_6119 in var_6118 {
            #[allow(unused_mut)]
            let mut entry_6121 = list_6120.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6121, item_6119)?;
        }
        list_6120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6122 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6123) = &input.security_group_rule_descriptions {
        let mut list_6125 = scope_6122.start_list(true, Some("item"));
        for item_6124 in var_6123 {
            #[allow(unused_mut)]
            let mut entry_6126 = list_6125.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6126, item_6124,
            )?;
        }
        list_6125.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("Cidr");
    if let Some(var_6128) = &input.cidr {
        scope_6127.string(var_6128);
    }
    #[allow(unused_mut)]
    let mut scope_6129 = writer.prefix("DryRun");
    if let Some(var_6130) = &input.dry_run {
        scope_6129.boolean(*var_6130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
