// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            );
        }
        list_11.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63);
        }
        list_64.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_104) = &input.ipv6_prefix_count {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Ipv6Prefix");
    if let Some(var_106) = &input.ipv6_prefixes {
        let mut list_108 = scope_105.start_list(true, Some("item"));
        for item_107 in var_106 {
            #[allow(unused_mut)]
            let mut entry_109 = list_108.entry();
            entry_109.string(item_107);
        }
        list_108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NetworkInterfaceId");
    if let Some(var_111) = &input.network_interface_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("AllowReassignment");
    if let Some(var_113) = &input.allow_reassignment {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("NetworkInterfaceId");
    if let Some(var_115) = &input.network_interface_id {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("PrivateIpAddress");
    if let Some(var_117) = &input.private_ip_addresses {
        let mut list_119 = scope_116.start_list(true, Some("PrivateIpAddress"));
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_122) = &input.secondary_private_ip_address_count {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("Ipv4Prefix");
    if let Some(var_124) = &input.ipv4_prefixes {
        let mut list_126 = scope_123.start_list(true, Some("item"));
        for item_125 in var_124 {
            #[allow(unused_mut)]
            let mut entry_127 = list_126.entry();
            entry_127.string(item_125);
        }
        list_126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_129) = &input.ipv4_prefix_count {
        scope_128.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("AllocationId");
    if let Some(var_131) = &input.allocation_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("InstanceId");
    if let Some(var_133) = &input.instance_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("PublicIp");
    if let Some(var_135) = &input.public_ip {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AllowReassociation");
    if let Some(var_137) = &input.allow_reassociation {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DryRun");
    if let Some(var_139) = &input.dry_run {
        scope_138.boolean(*var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("PrivateIpAddress");
    if let Some(var_143) = &input.private_ip_address {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_145) = &input.client_vpn_endpoint_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("SubnetId");
    if let Some(var_147) = &input.subnet_id {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ClientToken");
    if let Some(var_149) = &input.client_token {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("DryRun");
    if let Some(var_151) = &input.dry_run {
        scope_150.boolean(*var_151);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("DhcpOptionsId");
    if let Some(var_153) = &input.dhcp_options_id {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("VpcId");
    if let Some(var_155) = &input.vpc_id {
        scope_154.string(var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DryRun");
    if let Some(var_157) = &input.dry_run {
        scope_156.boolean(*var_157);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("CertificateArn");
    if let Some(var_159) = &input.certificate_arn {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("RoleArn");
    if let Some(var_161) = &input.role_arn {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("DryRun");
    if let Some(var_163) = &input.dry_run {
        scope_162.boolean(*var_163);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("IamInstanceProfile");
    if let Some(var_165) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_164, var_165,
        );
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("InstanceId");
    if let Some(var_167) = &input.instance_id {
        scope_166.string(var_167);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("InstanceEventWindowId");
    if let Some(var_171) = &input.instance_event_window_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("AssociationTarget");
    if let Some(var_173) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(
            scope_172, var_173,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("DryRun");
    if let Some(var_175) = &input.dry_run {
        scope_174.boolean(*var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("RouteTableId");
    if let Some(var_177) = &input.route_table_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("SubnetId");
    if let Some(var_179) = &input.subnet_id {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("GatewayId");
    if let Some(var_181) = &input.gateway_id {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_183) = &input.ipv6_cidr_block {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("SubnetId");
    if let Some(var_185) = &input.subnet_id {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_187) = &input.transit_gateway_multicast_domain_id {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_189) = &input.transit_gateway_attachment_id {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(true, Some("item"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_198) = &input.transit_gateway_route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_200) = &input.transit_gateway_attachment_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DryRun");
    if let Some(var_202) = &input.dry_run {
        scope_201.boolean(*var_202);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("BranchInterfaceId");
    if let Some(var_204) = &input.branch_interface_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TrunkInterfaceId");
    if let Some(var_206) = &input.trunk_interface_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("VlanId");
    if let Some(var_208) = &input.vlan_id {
        scope_207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("GreKey");
    if let Some(var_210) = &input.gre_key {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("ClientToken");
    if let Some(var_212) = &input.client_token {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("DryRun");
    if let Some(var_214) = &input.dry_run {
        scope_213.boolean(*var_214);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_216) = &input.amazon_provided_ipv6_cidr_block {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("CidrBlock");
    if let Some(var_218) = &input.cidr_block {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("VpcId");
    if let Some(var_220) = &input.vpc_id {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_222) = &input.ipv6_cidr_block_network_border_group {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("Ipv6Pool");
    if let Some(var_224) = &input.ipv6_pool {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_226) = &input.ipv6_cidr_block {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("DryRun");
    if let Some(var_228) = &input.dry_run {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SecurityGroupId");
    if let Some(var_230) = &input.groups {
        let mut list_232 = scope_229.start_list(true, Some("groupId"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("VpcId");
    if let Some(var_237) = &input.vpc_id {
        scope_236.string(var_237);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DryRun");
    if let Some(var_239) = &input.dry_run {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("InternetGatewayId");
    if let Some(var_241) = &input.internet_gateway_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("VpcId");
    if let Some(var_243) = &input.vpc_id {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DeviceIndex");
    if let Some(var_245) = &input.device_index {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DryRun");
    if let Some(var_247) = &input.dry_run {
        scope_246.boolean(*var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("InstanceId");
    if let Some(var_249) = &input.instance_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NetworkInterfaceId");
    if let Some(var_251) = &input.network_interface_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkCardIndex");
    if let Some(var_253) = &input.network_card_index {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Device");
    if let Some(var_255) = &input.device {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("InstanceId");
    if let Some(var_257) = &input.instance_id {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VolumeId");
    if let Some(var_259) = &input.volume_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DryRun");
    if let Some(var_261) = &input.dry_run {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("VpcId");
    if let Some(var_263) = &input.vpc_id {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("VpnGatewayId");
    if let Some(var_265) = &input.vpn_gateway_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DryRun");
    if let Some(var_267) = &input.dry_run {
        scope_266.boolean(*var_267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_269) = &input.client_vpn_endpoint_id {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("TargetNetworkCidr");
    if let Some(var_271) = &input.target_network_cidr {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AccessGroupId");
    if let Some(var_273) = &input.access_group_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_275) = &input.authorize_all_groups {
        scope_274.boolean(*var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Description");
    if let Some(var_277) = &input.description {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ClientToken");
    if let Some(var_279) = &input.client_token {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("DryRun");
    if let Some(var_281) = &input.dry_run {
        scope_280.boolean(*var_281);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("GroupId");
    if let Some(var_285) = &input.group_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IpPermissions");
    if let Some(var_287) = &input.ip_permissions {
        let mut list_289 = scope_286.start_list(true, Some("item"));
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_290, item_288);
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TagSpecification");
    if let Some(var_292) = &input.tag_specifications {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_295, item_293,
            );
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CidrIp");
    if let Some(var_297) = &input.cidr_ip {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("FromPort");
    if let Some(var_299) = &input.from_port {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("IpProtocol");
    if let Some(var_301) = &input.ip_protocol {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("ToPort");
    if let Some(var_303) = &input.to_port {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_305) = &input.source_security_group_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_307) = &input.source_security_group_owner_id {
        scope_306.string(var_307);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CidrIp");
    if let Some(var_309) = &input.cidr_ip {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FromPort");
    if let Some(var_311) = &input.from_port {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GroupId");
    if let Some(var_313) = &input.group_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GroupName");
    if let Some(var_315) = &input.group_name {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("IpPermissions");
    if let Some(var_317) = &input.ip_permissions {
        let mut list_319 = scope_316.start_list(true, Some("item"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_320, item_318);
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpProtocol");
    if let Some(var_322) = &input.ip_protocol {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_324) = &input.source_security_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_326) = &input.source_security_group_owner_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("ToPort");
    if let Some(var_328) = &input.to_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DryRun");
    if let Some(var_330) = &input.dry_run {
        scope_329.boolean(*var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TagSpecification");
    if let Some(var_332) = &input.tag_specifications {
        let mut list_334 = scope_331.start_list(true, Some("item"));
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_335, item_333,
            );
        }
        list_334.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("InstanceId");
    if let Some(var_337) = &input.instance_id {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Storage");
    if let Some(var_339) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_338, var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DryRun");
    if let Some(var_341) = &input.dry_run {
        scope_340.boolean(*var_341);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("BundleId");
    if let Some(var_343) = &input.bundle_id {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CapacityReservationId");
    if let Some(var_347) = &input.capacity_reservation_id {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DryRun");
    if let Some(var_349) = &input.dry_run {
        scope_348.boolean(*var_349);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("ConversionTaskId");
    if let Some(var_351) = &input.conversion_task_id {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("DryRun");
    if let Some(var_353) = &input.dry_run {
        scope_352.boolean(*var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ReasonMessage");
    if let Some(var_355) = &input.reason_message {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ExportTaskId");
    if let Some(var_357) = &input.export_task_id {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("CancelReason");
    if let Some(var_359) = &input.cancel_reason {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("DryRun");
    if let Some(var_361) = &input.dry_run {
        scope_360.boolean(*var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("ImportTaskId");
    if let Some(var_363) = &input.import_task_id {
        scope_362.string(var_363);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_365) = &input.reserved_instances_listing_id {
        scope_364.string(var_365);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("DryRun");
    if let Some(var_367) = &input.dry_run {
        scope_366.boolean(*var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("SpotFleetRequestId");
    if let Some(var_369) = &input.spot_fleet_request_ids {
        let mut list_371 = scope_368.start_list(true, Some("item"));
        for item_370 in var_369 {
            #[allow(unused_mut)]
            let mut entry_372 = list_371.entry();
            entry_372.string(item_370);
        }
        list_371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("TerminateInstances");
    if let Some(var_374) = &input.terminate_instances {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_378) = &input.spot_instance_request_ids {
        let mut list_380 = scope_377.start_list(true, Some("SpotInstanceRequestId"));
        for item_379 in var_378 {
            #[allow(unused_mut)]
            let mut entry_381 = list_380.entry();
            entry_381.string(item_379);
        }
        list_380.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("InstanceId");
    if let Some(var_383) = &input.instance_id {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ProductCode");
    if let Some(var_385) = &input.product_code {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("SourceFpgaImageId");
    if let Some(var_391) = &input.source_fpga_image_id {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("Description");
    if let Some(var_393) = &input.description {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("Name");
    if let Some(var_395) = &input.name {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("SourceRegion");
    if let Some(var_397) = &input.source_region {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ClientToken");
    if let Some(var_399) = &input.client_token {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ClientToken");
    if let Some(var_401) = &input.client_token {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("Description");
    if let Some(var_403) = &input.description {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Encrypted");
    if let Some(var_405) = &input.encrypted {
        scope_404.boolean(*var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("KmsKeyId");
    if let Some(var_407) = &input.kms_key_id {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Name");
    if let Some(var_409) = &input.name {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("SourceImageId");
    if let Some(var_411) = &input.source_image_id {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("SourceRegion");
    if let Some(var_413) = &input.source_region {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DestinationOutpostArn");
    if let Some(var_415) = &input.destination_outpost_arn {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("DryRun");
    if let Some(var_417) = &input.dry_run {
        scope_416.boolean(*var_417);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("Description");
    if let Some(var_419) = &input.description {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DestinationOutpostArn");
    if let Some(var_421) = &input.destination_outpost_arn {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DestinationRegion");
    if let Some(var_423) = &input.destination_region {
        scope_422.string(var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("Encrypted");
    if let Some(var_425) = &input.encrypted {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("KmsKeyId");
    if let Some(var_427) = &input.kms_key_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("PresignedUrl");
    if let Some(var_429) = &input.presigned_url {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceSnapshotId");
    if let Some(var_433) = &input.source_snapshot_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("TagSpecification");
    if let Some(var_435) = &input.tag_specifications {
        let mut list_437 = scope_434.start_list(true, Some("item"));
        for item_436 in var_435 {
            #[allow(unused_mut)]
            let mut entry_438 = list_437.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_438, item_436,
            );
        }
        list_437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("DryRun");
    if let Some(var_440) = &input.dry_run {
        scope_439.boolean(*var_440);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("ClientToken");
    if let Some(var_442) = &input.client_token {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("InstanceType");
    if let Some(var_444) = &input.instance_type {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("InstancePlatform");
    if let Some(var_446) = &input.instance_platform {
        scope_445.string(var_446.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("AvailabilityZone");
    if let Some(var_448) = &input.availability_zone {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("AvailabilityZoneId");
    if let Some(var_450) = &input.availability_zone_id {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("Tenancy");
    if let Some(var_452) = &input.tenancy {
        scope_451.string(var_452.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("InstanceCount");
    if let Some(var_454) = &input.instance_count {
        scope_453.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("EbsOptimized");
    if let Some(var_456) = &input.ebs_optimized {
        scope_455.boolean(*var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("EphemeralStorage");
    if let Some(var_458) = &input.ephemeral_storage {
        scope_457.boolean(*var_458);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("EndDate");
    if let Some(var_460) = &input.end_date {
        scope_459.instant(var_460, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("EndDateType");
    if let Some(var_462) = &input.end_date_type {
        scope_461.string(var_462.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_464) = &input.instance_match_criteria {
        scope_463.string(var_464.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("TagSpecifications");
    if let Some(var_466) = &input.tag_specifications {
        let mut list_468 = scope_465.start_list(true, Some("item"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_469, item_467,
            );
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("DryRun");
    if let Some(var_471) = &input.dry_run {
        scope_470.boolean(*var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("OutpostArn");
    if let Some(var_473) = &input.outpost_arn {
        scope_472.string(var_473);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("VpcId");
    if let Some(var_475) = &input.vpc_id {
        scope_474.string(var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("TagSpecification");
    if let Some(var_477) = &input.tag_specifications {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]
            let mut entry_480 = list_479.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_480, item_478,
            );
        }
        list_479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("DryRun");
    if let Some(var_482) = &input.dry_run {
        scope_481.boolean(*var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("ClientCidrBlock");
    if let Some(var_486) = &input.client_cidr_block {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("ServerCertificateArn");
    if let Some(var_488) = &input.server_certificate_arn {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Authentication");
    if let Some(var_490) = &input.authentication_options {
        let mut list_492 = scope_489.start_list(true, None);
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_493, item_491,
            );
        }
        list_492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ConnectionLogOptions");
    if let Some(var_495) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_494, var_495,
        );
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("DnsServers");
    if let Some(var_497) = &input.dns_servers {
        let mut list_499 = scope_496.start_list(true, Some("item"));
        for item_498 in var_497 {
            #[allow(unused_mut)]
            let mut entry_500 = list_499.entry();
            entry_500.string(item_498);
        }
        list_499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TransportProtocol");
    if let Some(var_502) = &input.transport_protocol {
        scope_501.string(var_502.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("VpnPort");
    if let Some(var_504) = &input.vpn_port {
        scope_503.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("Description");
    if let Some(var_506) = &input.description {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("SplitTunnel");
    if let Some(var_508) = &input.split_tunnel {
        scope_507.boolean(*var_508);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("DryRun");
    if let Some(var_510) = &input.dry_run {
        scope_509.boolean(*var_510);
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("ClientToken");
    if let Some(var_512) = &input.client_token {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("TagSpecification");
    if let Some(var_514) = &input.tag_specifications {
        let mut list_516 = scope_513.start_list(true, Some("item"));
        for item_515 in var_514 {
            #[allow(unused_mut)]
            let mut entry_517 = list_516.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_517, item_515,
            );
        }
        list_516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("SecurityGroupId");
    if let Some(var_519) = &input.security_group_ids {
        let mut list_521 = scope_518.start_list(true, Some("item"));
        for item_520 in var_519 {
            #[allow(unused_mut)]
            let mut entry_522 = list_521.entry();
            entry_522.string(item_520);
        }
        list_521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("VpcId");
    if let Some(var_524) = &input.vpc_id {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("SelfServicePortal");
    if let Some(var_526) = &input.self_service_portal {
        scope_525.string(var_526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("ClientConnectOptions");
    if let Some(var_528) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_527, var_528,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_530) = &input.client_vpn_endpoint_id {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("DestinationCidrBlock");
    if let Some(var_532) = &input.destination_cidr_block {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_534) = &input.target_vpc_subnet_id {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("Description");
    if let Some(var_536) = &input.description {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("ClientToken");
    if let Some(var_538) = &input.client_token {
        scope_537.string(var_538);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("DryRun");
    if let Some(var_540) = &input.dry_run {
        scope_539.boolean(*var_540);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("BgpAsn");
    if let Some(var_542) = &input.bgp_asn {
        scope_541.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_542).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("IpAddress");
    if let Some(var_544) = &input.public_ip {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("CertificateArn");
    if let Some(var_546) = &input.certificate_arn {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Type");
    if let Some(var_548) = &input.r#type {
        scope_547.string(var_548.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("TagSpecification");
    if let Some(var_550) = &input.tag_specifications {
        let mut list_552 = scope_549.start_list(true, Some("item"));
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_553, item_551,
            );
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("DeviceName");
    if let Some(var_555) = &input.device_name {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DryRun");
    if let Some(var_557) = &input.dry_run {
        scope_556.boolean(*var_557);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("AvailabilityZone");
    if let Some(var_559) = &input.availability_zone {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("DryRun");
    if let Some(var_561) = &input.dry_run {
        scope_560.boolean(*var_561);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("DryRun");
    if let Some(var_563) = &input.dry_run {
        scope_562.boolean(*var_563);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("DhcpConfiguration");
    if let Some(var_565) = &input.dhcp_configurations {
        let mut list_567 = scope_564.start_list(true, Some("item"));
        for item_566 in var_565 {
            #[allow(unused_mut)]
            let mut entry_568 = list_567.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_568, item_566,
            );
        }
        list_567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("TagSpecification");
    if let Some(var_570) = &input.tag_specifications {
        let mut list_572 = scope_569.start_list(true, Some("item"));
        for item_571 in var_570 {
            #[allow(unused_mut)]
            let mut entry_573 = list_572.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_573, item_571,
            );
        }
        list_572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("DryRun");
    if let Some(var_575) = &input.dry_run {
        scope_574.boolean(*var_575);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ClientToken");
    if let Some(var_577) = &input.client_token {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("DryRun");
    if let Some(var_579) = &input.dry_run {
        scope_578.boolean(*var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("VpcId");
    if let Some(var_581) = &input.vpc_id {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("TagSpecification");
    if let Some(var_583) = &input.tag_specifications {
        let mut list_585 = scope_582.start_list(true, Some("item"));
        for item_584 in var_583 {
            #[allow(unused_mut)]
            let mut entry_586 = list_585.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_586, item_584,
            );
        }
        list_585.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DryRun");
    if let Some(var_588) = &input.dry_run {
        scope_587.boolean(*var_588);
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientToken");
    if let Some(var_590) = &input.client_token {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SpotOptions");
    if let Some(var_592) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_591, var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("OnDemandOptions");
    if let Some(var_594) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_593, var_594,
        );
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_596) = &input.excess_capacity_termination_policy {
        scope_595.string(var_596.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_598) = &input.launch_template_configs {
        let mut list_600 = scope_597.start_list(true, Some("item"));
        for item_599 in var_598 {
            #[allow(unused_mut)]
            let mut entry_601 = list_600.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_601, item_599,
            );
        }
        list_600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_603) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_602, var_603,
        );
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_605) = &input.terminate_instances_with_expiration {
        scope_604.boolean(*var_605);
    }
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("Type");
    if let Some(var_607) = &input.r#type {
        scope_606.string(var_607.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("ValidFrom");
    if let Some(var_609) = &input.valid_from {
        scope_608.instant(var_609, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("ValidUntil");
    if let Some(var_611) = &input.valid_until {
        scope_610.instant(var_611, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_613) = &input.replace_unhealthy_instances {
        scope_612.boolean(*var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("TagSpecification");
    if let Some(var_615) = &input.tag_specifications {
        let mut list_617 = scope_614.start_list(true, Some("item"));
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_618, item_616,
            );
        }
        list_617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Context");
    if let Some(var_620) = &input.context {
        scope_619.string(var_620);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("DryRun");
    if let Some(var_622) = &input.dry_run {
        scope_621.boolean(*var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("ClientToken");
    if let Some(var_624) = &input.client_token {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_626) = &input.deliver_logs_permission_arn {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("LogGroupName");
    if let Some(var_628) = &input.log_group_name {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("ResourceId");
    if let Some(var_630) = &input.resource_ids {
        let mut list_632 = scope_629.start_list(true, Some("item"));
        for item_631 in var_630 {
            #[allow(unused_mut)]
            let mut entry_633 = list_632.entry();
            entry_633.string(item_631);
        }
        list_632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("ResourceType");
    if let Some(var_635) = &input.resource_type {
        scope_634.string(var_635.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("TrafficType");
    if let Some(var_637) = &input.traffic_type {
        scope_636.string(var_637.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("LogDestinationType");
    if let Some(var_639) = &input.log_destination_type {
        scope_638.string(var_639.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("LogDestination");
    if let Some(var_641) = &input.log_destination {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("LogFormat");
    if let Some(var_643) = &input.log_format {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("TagSpecification");
    if let Some(var_645) = &input.tag_specifications {
        let mut list_647 = scope_644.start_list(true, Some("item"));
        for item_646 in var_645 {
            #[allow(unused_mut)]
            let mut entry_648 = list_647.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_648, item_646,
            );
        }
        list_647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("MaxAggregationInterval");
    if let Some(var_650) = &input.max_aggregation_interval {
        scope_649.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_650).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("DryRun");
    if let Some(var_652) = &input.dry_run {
        scope_651.boolean(*var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("InputStorageLocation");
    if let Some(var_654) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_653, var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("LogsStorageLocation");
    if let Some(var_656) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_655, var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("Description");
    if let Some(var_658) = &input.description {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("Name");
    if let Some(var_660) = &input.name {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ClientToken");
    if let Some(var_662) = &input.client_token {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("TagSpecification");
    if let Some(var_664) = &input.tag_specifications {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_667, item_665,
            );
        }
        list_666.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("BlockDeviceMapping");
    if let Some(var_669) = &input.block_device_mappings {
        let mut list_671 = scope_668.start_list(true, Some("BlockDeviceMapping"));
        for item_670 in var_669 {
            #[allow(unused_mut)]
            let mut entry_672 = list_671.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_672, item_670,
            );
        }
        list_671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("Description");
    if let Some(var_674) = &input.description {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("DryRun");
    if let Some(var_676) = &input.dry_run {
        scope_675.boolean(*var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("InstanceId");
    if let Some(var_678) = &input.instance_id {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Name");
    if let Some(var_680) = &input.name {
        scope_679.string(var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("NoReboot");
    if let Some(var_682) = &input.no_reboot {
        scope_681.boolean(*var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TagSpecification");
    if let Some(var_684) = &input.tag_specifications {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_687, item_685,
            );
        }
        list_686.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("DryRun");
    if let Some(var_689) = &input.dry_run {
        scope_688.boolean(*var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("Name");
    if let Some(var_691) = &input.name {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("TimeRange");
    if let Some(var_693) = &input.time_ranges {
        let mut list_695 = scope_692.start_list(true, None);
        for item_694 in var_693 {
            #[allow(unused_mut)]
            let mut entry_696 = list_695.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_696, item_694);
        }
        list_695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("CronExpression");
    if let Some(var_698) = &input.cron_expression {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("TagSpecification");
    if let Some(var_700) = &input.tag_specifications {
        let mut list_702 = scope_699.start_list(true, Some("item"));
        for item_701 in var_700 {
            #[allow(unused_mut)]
            let mut entry_703 = list_702.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_703, item_701,
            );
        }
        list_702.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Description");
    if let Some(var_705) = &input.description {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("ExportToS3");
    if let Some(var_707) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_706, var_707,
        );
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("InstanceId");
    if let Some(var_709) = &input.instance_id {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TargetEnvironment");
    if let Some(var_711) = &input.target_environment {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("TagSpecification");
    if let Some(var_713) = &input.tag_specifications {
        let mut list_715 = scope_712.start_list(true, Some("item"));
        for item_714 in var_713 {
            #[allow(unused_mut)]
            let mut entry_716 = list_715.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_716, item_714,
            );
        }
        list_715.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("TagSpecification");
    if let Some(var_718) = &input.tag_specifications {
        let mut list_720 = scope_717.start_list(true, Some("item"));
        for item_719 in var_718 {
            #[allow(unused_mut)]
            let mut entry_721 = list_720.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_721, item_719,
            );
        }
        list_720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("DryRun");
    if let Some(var_723) = &input.dry_run {
        scope_722.boolean(*var_723);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("KeyName");
    if let Some(var_725) = &input.key_name {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("DryRun");
    if let Some(var_727) = &input.dry_run {
        scope_726.boolean(*var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("KeyType");
    if let Some(var_729) = &input.key_type {
        scope_728.string(var_729.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("TagSpecification");
    if let Some(var_731) = &input.tag_specifications {
        let mut list_733 = scope_730.start_list(true, Some("item"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_734, item_732,
            );
        }
        list_733.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("DryRun");
    if let Some(var_736) = &input.dry_run {
        scope_735.boolean(*var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("ClientToken");
    if let Some(var_738) = &input.client_token {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("LaunchTemplateName");
    if let Some(var_740) = &input.launch_template_name {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("VersionDescription");
    if let Some(var_742) = &input.version_description {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("LaunchTemplateData");
    if let Some(var_744) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_743, var_744,
        );
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("TagSpecification");
    if let Some(var_746) = &input.tag_specifications {
        let mut list_748 = scope_745.start_list(true, Some("item"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_749, item_747,
            );
        }
        list_748.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("DryRun");
    if let Some(var_751) = &input.dry_run {
        scope_750.boolean(*var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("ClientToken");
    if let Some(var_753) = &input.client_token {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("LaunchTemplateId");
    if let Some(var_755) = &input.launch_template_id {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("LaunchTemplateName");
    if let Some(var_757) = &input.launch_template_name {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("SourceVersion");
    if let Some(var_759) = &input.source_version {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("VersionDescription");
    if let Some(var_761) = &input.version_description {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("LaunchTemplateData");
    if let Some(var_763) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_762, var_763,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("DestinationCidrBlock");
    if let Some(var_765) = &input.destination_cidr_block {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_767) = &input.local_gateway_route_table_id {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("DryRun");
    if let Some(var_769) = &input.dry_run {
        scope_768.boolean(*var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_771) = &input.local_gateway_virtual_interface_group_id {
        scope_770.string(var_771);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_773) = &input.local_gateway_route_table_id {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("VpcId");
    if let Some(var_775) = &input.vpc_id {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("TagSpecification");
    if let Some(var_777) = &input.tag_specifications {
        let mut list_779 = scope_776.start_list(true, Some("item"));
        for item_778 in var_777 {
            #[allow(unused_mut)]
            let mut entry_780 = list_779.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_780, item_778,
            );
        }
        list_779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("DryRun");
    if let Some(var_782) = &input.dry_run {
        scope_781.boolean(*var_782);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("DryRun");
    if let Some(var_784) = &input.dry_run {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("PrefixListName");
    if let Some(var_786) = &input.prefix_list_name {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("Entry");
    if let Some(var_788) = &input.entries {
        let mut list_790 = scope_787.start_list(true, None);
        for item_789 in var_788 {
            #[allow(unused_mut)]
            let mut entry_791 = list_790.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_791, item_789,
            );
        }
        list_790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("MaxEntries");
    if let Some(var_793) = &input.max_entries {
        scope_792.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("TagSpecification");
    if let Some(var_795) = &input.tag_specifications {
        let mut list_797 = scope_794.start_list(true, Some("item"));
        for item_796 in var_795 {
            #[allow(unused_mut)]
            let mut entry_798 = list_797.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_798, item_796,
            );
        }
        list_797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("AddressFamily");
    if let Some(var_800) = &input.address_family {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("ClientToken");
    if let Some(var_802) = &input.client_token {
        scope_801.string(var_802);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("AllocationId");
    if let Some(var_804) = &input.allocation_id {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("ClientToken");
    if let Some(var_806) = &input.client_token {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("DryRun");
    if let Some(var_808) = &input.dry_run {
        scope_807.boolean(*var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("SubnetId");
    if let Some(var_810) = &input.subnet_id {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("TagSpecification");
    if let Some(var_812) = &input.tag_specifications {
        let mut list_814 = scope_811.start_list(true, Some("item"));
        for item_813 in var_812 {
            #[allow(unused_mut)]
            let mut entry_815 = list_814.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_815, item_813,
            );
        }
        list_814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("ConnectivityType");
    if let Some(var_817) = &input.connectivity_type {
        scope_816.string(var_817.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("DryRun");
    if let Some(var_819) = &input.dry_run {
        scope_818.boolean(*var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("VpcId");
    if let Some(var_821) = &input.vpc_id {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("TagSpecification");
    if let Some(var_823) = &input.tag_specifications {
        let mut list_825 = scope_822.start_list(true, Some("item"));
        for item_824 in var_823 {
            #[allow(unused_mut)]
            let mut entry_826 = list_825.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_826, item_824,
            );
        }
        list_825.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("CidrBlock");
    if let Some(var_828) = &input.cidr_block {
        scope_827.string(var_828);
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("DryRun");
    if let Some(var_830) = &input.dry_run {
        scope_829.boolean(*var_830);
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("Egress");
    if let Some(var_832) = &input.egress {
        scope_831.boolean(*var_832);
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("Icmp");
    if let Some(var_834) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_833, var_834);
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_836) = &input.ipv6_cidr_block {
        scope_835.string(var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("NetworkAclId");
    if let Some(var_838) = &input.network_acl_id {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("PortRange");
    if let Some(var_840) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_839, var_840);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("Protocol");
    if let Some(var_842) = &input.protocol {
        scope_841.string(var_842);
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("RuleAction");
    if let Some(var_844) = &input.rule_action {
        scope_843.string(var_844.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("RuleNumber");
    if let Some(var_846) = &input.rule_number {
        scope_845.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_846).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("SourceIp");
    if let Some(var_848) = &input.source_ip {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("DestinationIp");
    if let Some(var_850) = &input.destination_ip {
        scope_849.string(var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("Source");
    if let Some(var_852) = &input.source {
        scope_851.string(var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("Destination");
    if let Some(var_854) = &input.destination {
        scope_853.string(var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("Protocol");
    if let Some(var_856) = &input.protocol {
        scope_855.string(var_856.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("DestinationPort");
    if let Some(var_858) = &input.destination_port {
        scope_857.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("TagSpecification");
    if let Some(var_860) = &input.tag_specifications {
        let mut list_862 = scope_859.start_list(true, Some("item"));
        for item_861 in var_860 {
            #[allow(unused_mut)]
            let mut entry_863 = list_862.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_863, item_861,
            );
        }
        list_862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("DryRun");
    if let Some(var_865) = &input.dry_run {
        scope_864.boolean(*var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("ClientToken");
    if let Some(var_867) = &input.client_token {
        scope_866.string(var_867);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Description");
    if let Some(var_869) = &input.description {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("DryRun");
    if let Some(var_871) = &input.dry_run {
        scope_870.boolean(*var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("SecurityGroupId");
    if let Some(var_873) = &input.groups {
        let mut list_875 = scope_872.start_list(true, Some("SecurityGroupId"));
        for item_874 in var_873 {
            #[allow(unused_mut)]
            let mut entry_876 = list_875.entry();
            entry_876.string(item_874);
        }
        list_875.finish();
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("Ipv6AddressCount");
    if let Some(var_878) = &input.ipv6_address_count {
        scope_877.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_878).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("Ipv6Addresses");
    if let Some(var_880) = &input.ipv6_addresses {
        let mut list_882 = scope_879.start_list(true, Some("item"));
        for item_881 in var_880 {
            #[allow(unused_mut)]
            let mut entry_883 = list_882.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_883, item_881,
            );
        }
        list_882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("PrivateIpAddress");
    if let Some(var_885) = &input.private_ip_address {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("PrivateIpAddresses");
    if let Some(var_887) = &input.private_ip_addresses {
        let mut list_889 = scope_886.start_list(true, Some("item"));
        for item_888 in var_887 {
            #[allow(unused_mut)]
            let mut entry_890 = list_889.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_890, item_888,
            );
        }
        list_889.finish();
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_892) = &input.secondary_private_ip_address_count {
        scope_891.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_892).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("Ipv4Prefix");
    if let Some(var_894) = &input.ipv4_prefixes {
        let mut list_896 = scope_893.start_list(true, Some("item"));
        for item_895 in var_894 {
            #[allow(unused_mut)]
            let mut entry_897 = list_896.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_897, item_895,
            );
        }
        list_896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_899) = &input.ipv4_prefix_count {
        scope_898.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_899).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("Ipv6Prefix");
    if let Some(var_901) = &input.ipv6_prefixes {
        let mut list_903 = scope_900.start_list(true, Some("item"));
        for item_902 in var_901 {
            #[allow(unused_mut)]
            let mut entry_904 = list_903.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_904, item_902,
            );
        }
        list_903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_906) = &input.ipv6_prefix_count {
        scope_905.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_906).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("InterfaceType");
    if let Some(var_908) = &input.interface_type {
        scope_907.string(var_908.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("SubnetId");
    if let Some(var_910) = &input.subnet_id {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("TagSpecification");
    if let Some(var_912) = &input.tag_specifications {
        let mut list_914 = scope_911.start_list(true, Some("item"));
        for item_913 in var_912 {
            #[allow(unused_mut)]
            let mut entry_915 = list_914.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_915, item_913,
            );
        }
        list_914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("ClientToken");
    if let Some(var_917) = &input.client_token {
        scope_916.string(var_917);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("NetworkInterfaceId");
    if let Some(var_919) = &input.network_interface_id {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("AwsAccountId");
    if let Some(var_921) = &input.aws_account_id {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("AwsService");
    if let Some(var_923) = &input.aws_service {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("Permission");
    if let Some(var_925) = &input.permission {
        scope_924.string(var_925.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("DryRun");
    if let Some(var_927) = &input.dry_run {
        scope_926.boolean(*var_927);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("DryRun");
    if let Some(var_929) = &input.dry_run {
        scope_928.boolean(*var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("GroupName");
    if let Some(var_931) = &input.group_name {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("Strategy");
    if let Some(var_933) = &input.strategy {
        scope_932.string(var_933.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("PartitionCount");
    if let Some(var_935) = &input.partition_count {
        scope_934.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("TagSpecification");
    if let Some(var_937) = &input.tag_specifications {
        let mut list_939 = scope_936.start_list(true, Some("item"));
        for item_938 in var_937 {
            #[allow(unused_mut)]
            let mut entry_940 = list_939.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_940, item_938,
            );
        }
        list_939.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("InstanceId");
    if let Some(var_942) = &input.instance_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("SnapshotId");
    if let Some(var_944) = &input.snapshot_id {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("ClientToken");
    if let Some(var_946) = &input.client_token {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("DryRun");
    if let Some(var_948) = &input.dry_run {
        scope_947.boolean(*var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("TagSpecification");
    if let Some(var_950) = &input.tag_specifications {
        let mut list_952 = scope_949.start_list(true, Some("item"));
        for item_951 in var_950 {
            #[allow(unused_mut)]
            let mut entry_953 = list_952.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_953, item_951,
            );
        }
        list_952.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("ClientToken");
    if let Some(var_955) = &input.client_token {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("InstanceCount");
    if let Some(var_957) = &input.instance_count {
        scope_956.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_957).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("PriceSchedules");
    if let Some(var_959) = &input.price_schedules {
        let mut list_961 = scope_958.start_list(true, Some("item"));
        for item_960 in var_959 {
            #[allow(unused_mut)]
            let mut entry_962 = list_961.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_962, item_960,
            );
        }
        list_961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("ReservedInstancesId");
    if let Some(var_964) = &input.reserved_instances_id {
        scope_963.string(var_964);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Bucket");
    if let Some(var_966) = &input.bucket {
        scope_965.string(var_966);
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("ObjectKey");
    if let Some(var_968) = &input.object_key {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("Name");
    if let Some(var_970) = &input.name {
        scope_969.string(var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("TagSpecification");
    if let Some(var_972) = &input.tag_specifications {
        let mut list_974 = scope_971.start_list(true, Some("item"));
        for item_973 in var_972 {
            #[allow(unused_mut)]
            let mut entry_975 = list_974.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_975, item_973,
            );
        }
        list_974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("DryRun");
    if let Some(var_977) = &input.dry_run {
        scope_976.boolean(*var_977);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("DestinationCidrBlock");
    if let Some(var_979) = &input.destination_cidr_block {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_981) = &input.destination_ipv6_cidr_block {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("DestinationPrefixListId");
    if let Some(var_983) = &input.destination_prefix_list_id {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("DryRun");
    if let Some(var_985) = &input.dry_run {
        scope_984.boolean(*var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("VpcEndpointId");
    if let Some(var_987) = &input.vpc_endpoint_id {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_989) = &input.egress_only_internet_gateway_id {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("GatewayId");
    if let Some(var_991) = &input.gateway_id {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("InstanceId");
    if let Some(var_993) = &input.instance_id {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("NatGatewayId");
    if let Some(var_995) = &input.nat_gateway_id {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("TransitGatewayId");
    if let Some(var_997) = &input.transit_gateway_id {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("LocalGatewayId");
    if let Some(var_999) = &input.local_gateway_id {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("CarrierGatewayId");
    if let Some(var_1001) = &input.carrier_gateway_id {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1003) = &input.network_interface_id {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("RouteTableId");
    if let Some(var_1005) = &input.route_table_id {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1007) = &input.vpc_peering_connection_id {
        scope_1006.string(var_1007);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("DryRun");
    if let Some(var_1009) = &input.dry_run {
        scope_1008.boolean(*var_1009);
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("VpcId");
    if let Some(var_1011) = &input.vpc_id {
        scope_1010.string(var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("TagSpecification");
    if let Some(var_1013) = &input.tag_specifications {
        let mut list_1015 = scope_1012.start_list(true, Some("item"));
        for item_1014 in var_1013 {
            #[allow(unused_mut)]
            let mut entry_1016 = list_1015.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1016, item_1014,
            );
        }
        list_1015.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("GroupDescription");
    if let Some(var_1018) = &input.description {
        scope_1017.string(var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("GroupName");
    if let Some(var_1020) = &input.group_name {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("VpcId");
    if let Some(var_1022) = &input.vpc_id {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("TagSpecification");
    if let Some(var_1024) = &input.tag_specifications {
        let mut list_1026 = scope_1023.start_list(true, Some("item"));
        for item_1025 in var_1024 {
            #[allow(unused_mut)]
            let mut entry_1027 = list_1026.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1027, item_1025,
            );
        }
        list_1026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("DryRun");
    if let Some(var_1029) = &input.dry_run {
        scope_1028.boolean(*var_1029);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("Description");
    if let Some(var_1031) = &input.description {
        scope_1030.string(var_1031);
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("OutpostArn");
    if let Some(var_1033) = &input.outpost_arn {
        scope_1032.string(var_1033);
    }
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("VolumeId");
    if let Some(var_1035) = &input.volume_id {
        scope_1034.string(var_1035);
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("TagSpecification");
    if let Some(var_1037) = &input.tag_specifications {
        let mut list_1039 = scope_1036.start_list(true, Some("item"));
        for item_1038 in var_1037 {
            #[allow(unused_mut)]
            let mut entry_1040 = list_1039.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1040, item_1038,
            );
        }
        list_1039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("DryRun");
    if let Some(var_1042) = &input.dry_run {
        scope_1041.boolean(*var_1042);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("Description");
    if let Some(var_1044) = &input.description {
        scope_1043.string(var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("InstanceSpecification");
    if let Some(var_1046) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1045, var_1046,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("OutpostArn");
    if let Some(var_1048) = &input.outpost_arn {
        scope_1047.string(var_1048);
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("TagSpecification");
    if let Some(var_1050) = &input.tag_specifications {
        let mut list_1052 = scope_1049.start_list(true, Some("item"));
        for item_1051 in var_1050 {
            #[allow(unused_mut)]
            let mut entry_1053 = list_1052.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1053, item_1051,
            );
        }
        list_1052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("DryRun");
    if let Some(var_1055) = &input.dry_run {
        scope_1054.boolean(*var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1057) = &input.copy_tags_from_source {
        scope_1056.string(var_1057.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Bucket");
    if let Some(var_1059) = &input.bucket {
        scope_1058.string(var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("DryRun");
    if let Some(var_1061) = &input.dry_run {
        scope_1060.boolean(*var_1061);
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("Prefix");
    if let Some(var_1063) = &input.prefix {
        scope_1062.string(var_1063);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("ImageId");
    if let Some(var_1065) = &input.image_id {
        scope_1064.string(var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("Bucket");
    if let Some(var_1067) = &input.bucket {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("S3ObjectTag");
    if let Some(var_1069) = &input.s3_object_tags {
        let mut list_1071 = scope_1068.start_list(true, Some("item"));
        for item_1070 in var_1069 {
            #[allow(unused_mut)]
            let mut entry_1072 = list_1071.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1072, item_1070);
        }
        list_1071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("DryRun");
    if let Some(var_1074) = &input.dry_run {
        scope_1073.boolean(*var_1074);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("TagSpecification");
    if let Some(var_1076) = &input.tag_specifications {
        let mut list_1078 = scope_1075.start_list(true, Some("item"));
        for item_1077 in var_1076 {
            #[allow(unused_mut)]
            let mut entry_1079 = list_1078.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1079, item_1077,
            );
        }
        list_1078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("AvailabilityZone");
    if let Some(var_1081) = &input.availability_zone {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1083) = &input.availability_zone_id {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1085) = &input.ipv6_cidr_block {
        scope_1084.string(var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("OutpostArn");
    if let Some(var_1087) = &input.outpost_arn {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("VpcId");
    if let Some(var_1089) = &input.vpc_id {
        scope_1088.string(var_1089);
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("DryRun");
    if let Some(var_1091) = &input.dry_run {
        scope_1090.boolean(*var_1091);
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("CidrBlock");
    if let Some(var_1093) = &input.cidr_block {
        scope_1092.string(var_1093);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("TagSpecification");
    if let Some(var_1095) = &input.tag_specifications {
        let mut list_1097 = scope_1094.start_list(true, Some("item"));
        for item_1096 in var_1095 {
            #[allow(unused_mut)]
            let mut entry_1098 = list_1097.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1098, item_1096,
            );
        }
        list_1097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("SubnetId");
    if let Some(var_1100) = &input.subnet_id {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("Cidr");
    if let Some(var_1102) = &input.cidr {
        scope_1101.string(var_1102);
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("ReservationType");
    if let Some(var_1104) = &input.reservation_type {
        scope_1103.string(var_1104.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("Description");
    if let Some(var_1106) = &input.description {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("DryRun");
    if let Some(var_1108) = &input.dry_run {
        scope_1107.boolean(*var_1108);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("DryRun");
    if let Some(var_1110) = &input.dry_run {
        scope_1109.boolean(*var_1110);
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("ResourceId");
    if let Some(var_1112) = &input.resources {
        let mut list_1114 = scope_1111.start_list(true, None);
        for item_1113 in var_1112 {
            #[allow(unused_mut)]
            let mut entry_1115 = list_1114.entry();
            entry_1115.string(item_1113);
        }
        list_1114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("Tag");
    if let Some(var_1117) = &input.tags {
        let mut list_1119 = scope_1116.start_list(true, Some("item"));
        for item_1118 in var_1117 {
            #[allow(unused_mut)]
            let mut entry_1120 = list_1119.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1120, item_1118);
        }
        list_1119.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("Description");
    if let Some(var_1122) = &input.description {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("TagSpecification");
    if let Some(var_1124) = &input.tag_specifications {
        let mut list_1126 = scope_1123.start_list(true, Some("item"));
        for item_1125 in var_1124 {
            #[allow(unused_mut)]
            let mut entry_1127 = list_1126.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1127, item_1125,
            );
        }
        list_1126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("DryRun");
    if let Some(var_1129) = &input.dry_run {
        scope_1128.boolean(*var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("ClientToken");
    if let Some(var_1131) = &input.client_token {
        scope_1130.string(var_1131);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1133) = &input.traffic_mirror_filter_id {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("TrafficDirection");
    if let Some(var_1135) = &input.traffic_direction {
        scope_1134.string(var_1135.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("RuleNumber");
    if let Some(var_1137) = &input.rule_number {
        scope_1136.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1137).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("RuleAction");
    if let Some(var_1139) = &input.rule_action {
        scope_1138.string(var_1139.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("DestinationPortRange");
    if let Some(var_1141) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1140, var_1141,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("SourcePortRange");
    if let Some(var_1143) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1142, var_1143,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("Protocol");
    if let Some(var_1145) = &input.protocol {
        scope_1144.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1145).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1147) = &input.destination_cidr_block {
        scope_1146.string(var_1147);
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("SourceCidrBlock");
    if let Some(var_1149) = &input.source_cidr_block {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("Description");
    if let Some(var_1151) = &input.description {
        scope_1150.string(var_1151);
    }
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("DryRun");
    if let Some(var_1153) = &input.dry_run {
        scope_1152.boolean(*var_1153);
    }
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("ClientToken");
    if let Some(var_1155) = &input.client_token {
        scope_1154.string(var_1155);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1157) = &input.network_interface_id {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1159) = &input.traffic_mirror_target_id {
        scope_1158.string(var_1159);
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1161) = &input.traffic_mirror_filter_id {
        scope_1160.string(var_1161);
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("PacketLength");
    if let Some(var_1163) = &input.packet_length {
        scope_1162.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("SessionNumber");
    if let Some(var_1165) = &input.session_number {
        scope_1164.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1165).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("VirtualNetworkId");
    if let Some(var_1167) = &input.virtual_network_id {
        scope_1166.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1167).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("Description");
    if let Some(var_1169) = &input.description {
        scope_1168.string(var_1169);
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("TagSpecification");
    if let Some(var_1171) = &input.tag_specifications {
        let mut list_1173 = scope_1170.start_list(true, Some("item"));
        for item_1172 in var_1171 {
            #[allow(unused_mut)]
            let mut entry_1174 = list_1173.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1174, item_1172,
            );
        }
        list_1173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("DryRun");
    if let Some(var_1176) = &input.dry_run {
        scope_1175.boolean(*var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("ClientToken");
    if let Some(var_1178) = &input.client_token {
        scope_1177.string(var_1178);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1180) = &input.network_interface_id {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1182) = &input.network_load_balancer_arn {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("Description");
    if let Some(var_1184) = &input.description {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("TagSpecification");
    if let Some(var_1186) = &input.tag_specifications {
        let mut list_1188 = scope_1185.start_list(true, Some("item"));
        for item_1187 in var_1186 {
            #[allow(unused_mut)]
            let mut entry_1189 = list_1188.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1189, item_1187,
            );
        }
        list_1188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("DryRun");
    if let Some(var_1191) = &input.dry_run {
        scope_1190.boolean(*var_1191);
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("ClientToken");
    if let Some(var_1193) = &input.client_token {
        scope_1192.string(var_1193);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("Description");
    if let Some(var_1195) = &input.description {
        scope_1194.string(var_1195);
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("Options");
    if let Some(var_1197) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1196, var_1197,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("TagSpecification");
    if let Some(var_1199) = &input.tag_specifications {
        let mut list_1201 = scope_1198.start_list(true, Some("item"));
        for item_1200 in var_1199 {
            #[allow(unused_mut)]
            let mut entry_1202 = list_1201.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1202, item_1200,
            );
        }
        list_1201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("DryRun");
    if let Some(var_1204) = &input.dry_run {
        scope_1203.boolean(*var_1204);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1206) = &input.transport_transit_gateway_attachment_id {
        scope_1205.string(var_1206);
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("Options");
    if let Some(var_1208) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1207, var_1208);
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("TagSpecification");
    if let Some(var_1210) = &input.tag_specifications {
        let mut list_1212 = scope_1209.start_list(true, Some("item"));
        for item_1211 in var_1210 {
            #[allow(unused_mut)]
            let mut entry_1213 = list_1212.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1213, item_1211,
            );
        }
        list_1212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("DryRun");
    if let Some(var_1215) = &input.dry_run {
        scope_1214.boolean(*var_1215);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1217) = &input.transit_gateway_attachment_id {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1219) = &input.transit_gateway_address {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("PeerAddress");
    if let Some(var_1221) = &input.peer_address {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("BgpOptions");
    if let Some(var_1223) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1222, var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1225) = &input.inside_cidr_blocks {
        let mut list_1227 = scope_1224.start_list(true, Some("item"));
        for item_1226 in var_1225 {
            #[allow(unused_mut)]
            let mut entry_1228 = list_1227.entry();
            entry_1228.string(item_1226);
        }
        list_1227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("TagSpecification");
    if let Some(var_1230) = &input.tag_specifications {
        let mut list_1232 = scope_1229.start_list(true, Some("item"));
        for item_1231 in var_1230 {
            #[allow(unused_mut)]
            let mut entry_1233 = list_1232.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1233, item_1231,
            );
        }
        list_1232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("DryRun");
    if let Some(var_1235) = &input.dry_run {
        scope_1234.boolean(*var_1235);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("TransitGatewayId");
    if let Some(var_1237) = &input.transit_gateway_id {
        scope_1236.string(var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("Options");
    if let Some(var_1239) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1238, var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("TagSpecification");
    if let Some(var_1241) = &input.tag_specifications {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1244, item_1242,
            );
        }
        list_1243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("DryRun");
    if let Some(var_1246) = &input.dry_run {
        scope_1245.boolean(*var_1246);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("TransitGatewayId");
    if let Some(var_1248) = &input.transit_gateway_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1250) = &input.peer_transit_gateway_id {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("PeerAccountId");
    if let Some(var_1252) = &input.peer_account_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("PeerRegion");
    if let Some(var_1254) = &input.peer_region {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("TagSpecification");
    if let Some(var_1256) = &input.tag_specifications {
        let mut list_1258 = scope_1255.start_list(true, Some("item"));
        for item_1257 in var_1256 {
            #[allow(unused_mut)]
            let mut entry_1259 = list_1258.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1259, item_1257,
            );
        }
        list_1258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("DryRun");
    if let Some(var_1261) = &input.dry_run {
        scope_1260.boolean(*var_1261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1263) = &input.transit_gateway_route_table_id {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("PrefixListId");
    if let Some(var_1265) = &input.prefix_list_id {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1267) = &input.transit_gateway_attachment_id {
        scope_1266.string(var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("Blackhole");
    if let Some(var_1269) = &input.blackhole {
        scope_1268.boolean(*var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DryRun");
    if let Some(var_1271) = &input.dry_run {
        scope_1270.boolean(*var_1271);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1273) = &input.destination_cidr_block {
        scope_1272.string(var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1275) = &input.transit_gateway_route_table_id {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1277) = &input.transit_gateway_attachment_id {
        scope_1276.string(var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("Blackhole");
    if let Some(var_1279) = &input.blackhole {
        scope_1278.boolean(*var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("DryRun");
    if let Some(var_1281) = &input.dry_run {
        scope_1280.boolean(*var_1281);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("TransitGatewayId");
    if let Some(var_1283) = &input.transit_gateway_id {
        scope_1282.string(var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("TagSpecifications");
    if let Some(var_1285) = &input.tag_specifications {
        let mut list_1287 = scope_1284.start_list(true, Some("item"));
        for item_1286 in var_1285 {
            #[allow(unused_mut)]
            let mut entry_1288 = list_1287.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1288, item_1286,
            );
        }
        list_1287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("DryRun");
    if let Some(var_1290) = &input.dry_run {
        scope_1289.boolean(*var_1290);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("TransitGatewayId");
    if let Some(var_1292) = &input.transit_gateway_id {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("VpcId");
    if let Some(var_1294) = &input.vpc_id {
        scope_1293.string(var_1294);
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("SubnetIds");
    if let Some(var_1296) = &input.subnet_ids {
        let mut list_1298 = scope_1295.start_list(true, Some("item"));
        for item_1297 in var_1296 {
            #[allow(unused_mut)]
            let mut entry_1299 = list_1298.entry();
            entry_1299.string(item_1297);
        }
        list_1298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("Options");
    if let Some(var_1301) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1300, var_1301);
    }
    #[allow(unused_mut)]
    let mut scope_1302 = writer.prefix("TagSpecifications");
    if let Some(var_1303) = &input.tag_specifications {
        let mut list_1305 = scope_1302.start_list(true, Some("item"));
        for item_1304 in var_1303 {
            #[allow(unused_mut)]
            let mut entry_1306 = list_1305.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1306, item_1304,
            );
        }
        list_1305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DryRun");
    if let Some(var_1308) = &input.dry_run {
        scope_1307.boolean(*var_1308);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("AvailabilityZone");
    if let Some(var_1310) = &input.availability_zone {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Encrypted");
    if let Some(var_1312) = &input.encrypted {
        scope_1311.boolean(*var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Iops");
    if let Some(var_1314) = &input.iops {
        scope_1313.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("KmsKeyId");
    if let Some(var_1316) = &input.kms_key_id {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("OutpostArn");
    if let Some(var_1318) = &input.outpost_arn {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("Size");
    if let Some(var_1320) = &input.size {
        scope_1319.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1320).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("SnapshotId");
    if let Some(var_1322) = &input.snapshot_id {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("VolumeType");
    if let Some(var_1324) = &input.volume_type {
        scope_1323.string(var_1324.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("DryRun");
    if let Some(var_1326) = &input.dry_run {
        scope_1325.boolean(*var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TagSpecification");
    if let Some(var_1328) = &input.tag_specifications {
        let mut list_1330 = scope_1327.start_list(true, Some("item"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]
            let mut entry_1331 = list_1330.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1331, item_1329,
            );
        }
        list_1330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1333) = &input.multi_attach_enabled {
        scope_1332.boolean(*var_1333);
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("Throughput");
    if let Some(var_1335) = &input.throughput {
        scope_1334.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1335).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("ClientToken");
    if let Some(var_1337) = &input.client_token {
        scope_1336.string(var_1337);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("CidrBlock");
    if let Some(var_1339) = &input.cidr_block {
        scope_1338.string(var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1341) = &input.amazon_provided_ipv6_cidr_block {
        scope_1340.boolean(*var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("Ipv6Pool");
    if let Some(var_1343) = &input.ipv6_pool {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1345) = &input.ipv6_cidr_block {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("DryRun");
    if let Some(var_1347) = &input.dry_run {
        scope_1346.boolean(*var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("InstanceTenancy");
    if let Some(var_1349) = &input.instance_tenancy {
        scope_1348.string(var_1349.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1351) = &input.ipv6_cidr_block_network_border_group {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("TagSpecification");
    if let Some(var_1353) = &input.tag_specifications {
        let mut list_1355 = scope_1352.start_list(true, Some("item"));
        for item_1354 in var_1353 {
            #[allow(unused_mut)]
            let mut entry_1356 = list_1355.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1356, item_1354,
            );
        }
        list_1355.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("DryRun");
    if let Some(var_1358) = &input.dry_run {
        scope_1357.boolean(*var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("VpcEndpointType");
    if let Some(var_1360) = &input.vpc_endpoint_type {
        scope_1359.string(var_1360.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("VpcId");
    if let Some(var_1362) = &input.vpc_id {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("ServiceName");
    if let Some(var_1364) = &input.service_name {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("PolicyDocument");
    if let Some(var_1366) = &input.policy_document {
        scope_1365.string(var_1366);
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("RouteTableId");
    if let Some(var_1368) = &input.route_table_ids {
        let mut list_1370 = scope_1367.start_list(true, Some("item"));
        for item_1369 in var_1368 {
            #[allow(unused_mut)]
            let mut entry_1371 = list_1370.entry();
            entry_1371.string(item_1369);
        }
        list_1370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("SubnetId");
    if let Some(var_1373) = &input.subnet_ids {
        let mut list_1375 = scope_1372.start_list(true, Some("item"));
        for item_1374 in var_1373 {
            #[allow(unused_mut)]
            let mut entry_1376 = list_1375.entry();
            entry_1376.string(item_1374);
        }
        list_1375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("SecurityGroupId");
    if let Some(var_1378) = &input.security_group_ids {
        let mut list_1380 = scope_1377.start_list(true, Some("item"));
        for item_1379 in var_1378 {
            #[allow(unused_mut)]
            let mut entry_1381 = list_1380.entry();
            entry_1381.string(item_1379);
        }
        list_1380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("ClientToken");
    if let Some(var_1383) = &input.client_token {
        scope_1382.string(var_1383);
    }
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1385) = &input.private_dns_enabled {
        scope_1384.boolean(*var_1385);
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("TagSpecification");
    if let Some(var_1387) = &input.tag_specifications {
        let mut list_1389 = scope_1386.start_list(true, Some("item"));
        for item_1388 in var_1387 {
            #[allow(unused_mut)]
            let mut entry_1390 = list_1389.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1390, item_1388,
            );
        }
        list_1389.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("DryRun");
    if let Some(var_1392) = &input.dry_run {
        scope_1391.boolean(*var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("ServiceId");
    if let Some(var_1394) = &input.service_id {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("VpcEndpointId");
    if let Some(var_1396) = &input.vpc_endpoint_id {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1398) = &input.connection_notification_arn {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("ConnectionEvents");
    if let Some(var_1400) = &input.connection_events {
        let mut list_1402 = scope_1399.start_list(true, Some("item"));
        for item_1401 in var_1400 {
            #[allow(unused_mut)]
            let mut entry_1403 = list_1402.entry();
            entry_1403.string(item_1401);
        }
        list_1402.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("ClientToken");
    if let Some(var_1405) = &input.client_token {
        scope_1404.string(var_1405);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("DryRun");
    if let Some(var_1407) = &input.dry_run {
        scope_1406.boolean(*var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("AcceptanceRequired");
    if let Some(var_1409) = &input.acceptance_required {
        scope_1408.boolean(*var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("PrivateDnsName");
    if let Some(var_1411) = &input.private_dns_name {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1413) = &input.network_load_balancer_arns {
        let mut list_1415 = scope_1412.start_list(true, Some("item"));
        for item_1414 in var_1413 {
            #[allow(unused_mut)]
            let mut entry_1416 = list_1415.entry();
            entry_1416.string(item_1414);
        }
        list_1415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1418) = &input.gateway_load_balancer_arns {
        let mut list_1420 = scope_1417.start_list(true, Some("item"));
        for item_1419 in var_1418 {
            #[allow(unused_mut)]
            let mut entry_1421 = list_1420.entry();
            entry_1421.string(item_1419);
        }
        list_1420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("ClientToken");
    if let Some(var_1423) = &input.client_token {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("TagSpecification");
    if let Some(var_1425) = &input.tag_specifications {
        let mut list_1427 = scope_1424.start_list(true, Some("item"));
        for item_1426 in var_1425 {
            #[allow(unused_mut)]
            let mut entry_1428 = list_1427.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1428, item_1426,
            );
        }
        list_1427.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("DryRun");
    if let Some(var_1430) = &input.dry_run {
        scope_1429.boolean(*var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("PeerOwnerId");
    if let Some(var_1432) = &input.peer_owner_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("PeerVpcId");
    if let Some(var_1434) = &input.peer_vpc_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("VpcId");
    if let Some(var_1436) = &input.vpc_id {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("PeerRegion");
    if let Some(var_1438) = &input.peer_region {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TagSpecification");
    if let Some(var_1440) = &input.tag_specifications {
        let mut list_1442 = scope_1439.start_list(true, Some("item"));
        for item_1441 in var_1440 {
            #[allow(unused_mut)]
            let mut entry_1443 = list_1442.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1443, item_1441,
            );
        }
        list_1442.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("CustomerGatewayId");
    if let Some(var_1445) = &input.customer_gateway_id {
        scope_1444.string(var_1445);
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("Type");
    if let Some(var_1447) = &input.r#type {
        scope_1446.string(var_1447);
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("VpnGatewayId");
    if let Some(var_1449) = &input.vpn_gateway_id {
        scope_1448.string(var_1449);
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("TransitGatewayId");
    if let Some(var_1451) = &input.transit_gateway_id {
        scope_1450.string(var_1451);
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("DryRun");
    if let Some(var_1453) = &input.dry_run {
        scope_1452.boolean(*var_1453);
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Options");
    if let Some(var_1455) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1454, var_1455,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("TagSpecification");
    if let Some(var_1457) = &input.tag_specifications {
        let mut list_1459 = scope_1456.start_list(true, Some("item"));
        for item_1458 in var_1457 {
            #[allow(unused_mut)]
            let mut entry_1460 = list_1459.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1460, item_1458,
            );
        }
        list_1459.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1461 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1462) = &input.destination_cidr_block {
        scope_1461.string(var_1462);
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("VpnConnectionId");
    if let Some(var_1464) = &input.vpn_connection_id {
        scope_1463.string(var_1464);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("AvailabilityZone");
    if let Some(var_1466) = &input.availability_zone {
        scope_1465.string(var_1466);
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("Type");
    if let Some(var_1468) = &input.r#type {
        scope_1467.string(var_1468.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("TagSpecification");
    if let Some(var_1470) = &input.tag_specifications {
        let mut list_1472 = scope_1469.start_list(true, Some("item"));
        for item_1471 in var_1470 {
            #[allow(unused_mut)]
            let mut entry_1473 = list_1472.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1473, item_1471,
            );
        }
        list_1472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("AmazonSideAsn");
    if let Some(var_1475) = &input.amazon_side_asn {
        scope_1474.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("DryRun");
    if let Some(var_1477) = &input.dry_run {
        scope_1476.boolean(*var_1477);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("CarrierGatewayId");
    if let Some(var_1479) = &input.carrier_gateway_id {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("DryRun");
    if let Some(var_1481) = &input.dry_run {
        scope_1480.boolean(*var_1481);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1483) = &input.client_vpn_endpoint_id {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("DryRun");
    if let Some(var_1485) = &input.dry_run {
        scope_1484.boolean(*var_1485);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1487) = &input.client_vpn_endpoint_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1489) = &input.target_vpc_subnet_id {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1491) = &input.destination_cidr_block {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("DryRun");
    if let Some(var_1493) = &input.dry_run {
        scope_1492.boolean(*var_1493);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("CustomerGatewayId");
    if let Some(var_1495) = &input.customer_gateway_id {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("DryRun");
    if let Some(var_1497) = &input.dry_run {
        scope_1496.boolean(*var_1497);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("DhcpOptionsId");
    if let Some(var_1499) = &input.dhcp_options_id {
        scope_1498.string(var_1499);
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("DryRun");
    if let Some(var_1501) = &input.dry_run {
        scope_1500.boolean(*var_1501);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("DryRun");
    if let Some(var_1503) = &input.dry_run {
        scope_1502.boolean(*var_1503);
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1505) = &input.egress_only_internet_gateway_id {
        scope_1504.string(var_1505);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("DryRun");
    if let Some(var_1507) = &input.dry_run {
        scope_1506.boolean(*var_1507);
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("FleetId");
    if let Some(var_1509) = &input.fleet_ids {
        let mut list_1511 = scope_1508.start_list(true, None);
        for item_1510 in var_1509 {
            #[allow(unused_mut)]
            let mut entry_1512 = list_1511.entry();
            entry_1512.string(item_1510);
        }
        list_1511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("TerminateInstances");
    if let Some(var_1514) = &input.terminate_instances {
        scope_1513.boolean(*var_1514);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("DryRun");
    if let Some(var_1516) = &input.dry_run {
        scope_1515.boolean(*var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("FlowLogId");
    if let Some(var_1518) = &input.flow_log_ids {
        let mut list_1520 = scope_1517.start_list(true, Some("item"));
        for item_1519 in var_1518 {
            #[allow(unused_mut)]
            let mut entry_1521 = list_1520.entry();
            entry_1521.string(item_1519);
        }
        list_1520.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("DryRun");
    if let Some(var_1523) = &input.dry_run {
        scope_1522.boolean(*var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("FpgaImageId");
    if let Some(var_1525) = &input.fpga_image_id {
        scope_1524.string(var_1525);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("DryRun");
    if let Some(var_1527) = &input.dry_run {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("ForceDelete");
    if let Some(var_1529) = &input.force_delete {
        scope_1528.boolean(*var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1531) = &input.instance_event_window_id {
        scope_1530.string(var_1531);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("DryRun");
    if let Some(var_1533) = &input.dry_run {
        scope_1532.boolean(*var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("InternetGatewayId");
    if let Some(var_1535) = &input.internet_gateway_id {
        scope_1534.string(var_1535);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("KeyName");
    if let Some(var_1537) = &input.key_name {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("KeyPairId");
    if let Some(var_1539) = &input.key_pair_id {
        scope_1538.string(var_1539);
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("DryRun");
    if let Some(var_1541) = &input.dry_run {
        scope_1540.boolean(*var_1541);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("DryRun");
    if let Some(var_1543) = &input.dry_run {
        scope_1542.boolean(*var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("LaunchTemplateId");
    if let Some(var_1545) = &input.launch_template_id {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("LaunchTemplateName");
    if let Some(var_1547) = &input.launch_template_name {
        scope_1546.string(var_1547);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("DryRun");
    if let Some(var_1549) = &input.dry_run {
        scope_1548.boolean(*var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("LaunchTemplateId");
    if let Some(var_1551) = &input.launch_template_id {
        scope_1550.string(var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("LaunchTemplateName");
    if let Some(var_1553) = &input.launch_template_name {
        scope_1552.string(var_1553);
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1555) = &input.versions {
        let mut list_1557 = scope_1554.start_list(true, Some("item"));
        for item_1556 in var_1555 {
            #[allow(unused_mut)]
            let mut entry_1558 = list_1557.entry();
            entry_1558.string(item_1556);
        }
        list_1557.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1560) = &input.destination_cidr_block {
        scope_1559.string(var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1562) = &input.local_gateway_route_table_id {
        scope_1561.string(var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("DryRun");
    if let Some(var_1564) = &input.dry_run {
        scope_1563.boolean(*var_1564);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1566) = &input.local_gateway_route_table_vpc_association_id {
        scope_1565.string(var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DryRun");
    if let Some(var_1568) = &input.dry_run {
        scope_1567.boolean(*var_1568);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("DryRun");
    if let Some(var_1570) = &input.dry_run {
        scope_1569.boolean(*var_1570);
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("PrefixListId");
    if let Some(var_1572) = &input.prefix_list_id {
        scope_1571.string(var_1572);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("DryRun");
    if let Some(var_1574) = &input.dry_run {
        scope_1573.boolean(*var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("NatGatewayId");
    if let Some(var_1576) = &input.nat_gateway_id {
        scope_1575.string(var_1576);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("DryRun");
    if let Some(var_1578) = &input.dry_run {
        scope_1577.boolean(*var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("NetworkAclId");
    if let Some(var_1580) = &input.network_acl_id {
        scope_1579.string(var_1580);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("DryRun");
    if let Some(var_1582) = &input.dry_run {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("Egress");
    if let Some(var_1584) = &input.egress {
        scope_1583.boolean(*var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("NetworkAclId");
    if let Some(var_1586) = &input.network_acl_id {
        scope_1585.string(var_1586);
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("RuleNumber");
    if let Some(var_1588) = &input.rule_number {
        scope_1587.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1588).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("DryRun");
    if let Some(var_1590) = &input.dry_run {
        scope_1589.boolean(*var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1592) = &input.network_insights_analysis_id {
        scope_1591.string(var_1592);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("DryRun");
    if let Some(var_1594) = &input.dry_run {
        scope_1593.boolean(*var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1596) = &input.network_insights_path_id {
        scope_1595.string(var_1596);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("DryRun");
    if let Some(var_1598) = &input.dry_run {
        scope_1597.boolean(*var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1600) = &input.network_interface_id {
        scope_1599.string(var_1600);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1602) = &input.network_interface_permission_id {
        scope_1601.string(var_1602);
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("Force");
    if let Some(var_1604) = &input.force {
        scope_1603.boolean(*var_1604);
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("DryRun");
    if let Some(var_1606) = &input.dry_run {
        scope_1605.boolean(*var_1606);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("DryRun");
    if let Some(var_1608) = &input.dry_run {
        scope_1607.boolean(*var_1608);
    }
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("GroupName");
    if let Some(var_1610) = &input.group_name {
        scope_1609.string(var_1610);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("DryRun");
    if let Some(var_1612) = &input.dry_run {
        scope_1611.boolean(*var_1612);
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("ReservedInstancesId");
    if let Some(var_1614) = &input.reserved_instances_ids {
        let mut list_1616 = scope_1613.start_list(true, Some("item"));
        for item_1615 in var_1614 {
            #[allow(unused_mut)]
            let mut entry_1617 = list_1616.entry();
            entry_1617.string(item_1615);
        }
        list_1616.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1619) = &input.destination_cidr_block {
        scope_1618.string(var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1621) = &input.destination_ipv6_cidr_block {
        scope_1620.string(var_1621);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1623) = &input.destination_prefix_list_id {
        scope_1622.string(var_1623);
    }
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("DryRun");
    if let Some(var_1625) = &input.dry_run {
        scope_1624.boolean(*var_1625);
    }
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("RouteTableId");
    if let Some(var_1627) = &input.route_table_id {
        scope_1626.string(var_1627);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("DryRun");
    if let Some(var_1629) = &input.dry_run {
        scope_1628.boolean(*var_1629);
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("RouteTableId");
    if let Some(var_1631) = &input.route_table_id {
        scope_1630.string(var_1631);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("GroupId");
    if let Some(var_1633) = &input.group_id {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("GroupName");
    if let Some(var_1635) = &input.group_name {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("DryRun");
    if let Some(var_1637) = &input.dry_run {
        scope_1636.boolean(*var_1637);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("SnapshotId");
    if let Some(var_1639) = &input.snapshot_id {
        scope_1638.string(var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DryRun");
    if let Some(var_1643) = &input.dry_run {
        scope_1642.boolean(*var_1643);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("SubnetId");
    if let Some(var_1645) = &input.subnet_id {
        scope_1644.string(var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("DryRun");
    if let Some(var_1647) = &input.dry_run {
        scope_1646.boolean(*var_1647);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1649) = &input.subnet_cidr_reservation_id {
        scope_1648.string(var_1649);
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("DryRun");
    if let Some(var_1651) = &input.dry_run {
        scope_1650.boolean(*var_1651);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("DryRun");
    if let Some(var_1653) = &input.dry_run {
        scope_1652.boolean(*var_1653);
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("ResourceId");
    if let Some(var_1655) = &input.resources {
        let mut list_1657 = scope_1654.start_list(true, None);
        for item_1656 in var_1655 {
            #[allow(unused_mut)]
            let mut entry_1658 = list_1657.entry();
            entry_1658.string(item_1656);
        }
        list_1657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("Tag");
    if let Some(var_1660) = &input.tags {
        let mut list_1662 = scope_1659.start_list(true, Some("item"));
        for item_1661 in var_1660 {
            #[allow(unused_mut)]
            let mut entry_1663 = list_1662.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1663, item_1661);
        }
        list_1662.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1665) = &input.traffic_mirror_filter_id {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("DryRun");
    if let Some(var_1667) = &input.dry_run {
        scope_1666.boolean(*var_1667);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1669) = &input.traffic_mirror_filter_rule_id {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("DryRun");
    if let Some(var_1671) = &input.dry_run {
        scope_1670.boolean(*var_1671);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1673) = &input.traffic_mirror_session_id {
        scope_1672.string(var_1673);
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("DryRun");
    if let Some(var_1675) = &input.dry_run {
        scope_1674.boolean(*var_1675);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1677) = &input.traffic_mirror_target_id {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("DryRun");
    if let Some(var_1679) = &input.dry_run {
        scope_1678.boolean(*var_1679);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("TransitGatewayId");
    if let Some(var_1681) = &input.transit_gateway_id {
        scope_1680.string(var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("DryRun");
    if let Some(var_1683) = &input.dry_run {
        scope_1682.boolean(*var_1683);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1685) = &input.transit_gateway_attachment_id {
        scope_1684.string(var_1685);
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1689) = &input.transit_gateway_connect_peer_id {
        scope_1688.string(var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("DryRun");
    if let Some(var_1691) = &input.dry_run {
        scope_1690.boolean(*var_1691);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1693) = &input.transit_gateway_multicast_domain_id {
        scope_1692.string(var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("DryRun");
    if let Some(var_1695) = &input.dry_run {
        scope_1694.boolean(*var_1695);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1697) = &input.transit_gateway_attachment_id {
        scope_1696.string(var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("DryRun");
    if let Some(var_1699) = &input.dry_run {
        scope_1698.boolean(*var_1699);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1701) = &input.transit_gateway_route_table_id {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("PrefixListId");
    if let Some(var_1703) = &input.prefix_list_id {
        scope_1702.string(var_1703);
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("DryRun");
    if let Some(var_1705) = &input.dry_run {
        scope_1704.boolean(*var_1705);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1706 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1707) = &input.transit_gateway_route_table_id {
        scope_1706.string(var_1707);
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1709) = &input.destination_cidr_block {
        scope_1708.string(var_1709);
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("DryRun");
    if let Some(var_1711) = &input.dry_run {
        scope_1710.boolean(*var_1711);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1713) = &input.transit_gateway_route_table_id {
        scope_1712.string(var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("DryRun");
    if let Some(var_1715) = &input.dry_run {
        scope_1714.boolean(*var_1715);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1717) = &input.transit_gateway_attachment_id {
        scope_1716.string(var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("DryRun");
    if let Some(var_1719) = &input.dry_run {
        scope_1718.boolean(*var_1719);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("VolumeId");
    if let Some(var_1721) = &input.volume_id {
        scope_1720.string(var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("DryRun");
    if let Some(var_1723) = &input.dry_run {
        scope_1722.boolean(*var_1723);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("VpcId");
    if let Some(var_1725) = &input.vpc_id {
        scope_1724.string(var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("DryRun");
    if let Some(var_1727) = &input.dry_run {
        scope_1726.boolean(*var_1727);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("DryRun");
    if let Some(var_1729) = &input.dry_run {
        scope_1728.boolean(*var_1729);
    }
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1731) = &input.connection_notification_ids {
        let mut list_1733 = scope_1730.start_list(true, Some("item"));
        for item_1732 in var_1731 {
            #[allow(unused_mut)]
            let mut entry_1734 = list_1733.entry();
            entry_1734.string(item_1732);
        }
        list_1733.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("DryRun");
    if let Some(var_1736) = &input.dry_run {
        scope_1735.boolean(*var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("VpcEndpointId");
    if let Some(var_1738) = &input.vpc_endpoint_ids {
        let mut list_1740 = scope_1737.start_list(true, Some("item"));
        for item_1739 in var_1738 {
            #[allow(unused_mut)]
            let mut entry_1741 = list_1740.entry();
            entry_1741.string(item_1739);
        }
        list_1740.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("DryRun");
    if let Some(var_1743) = &input.dry_run {
        scope_1742.boolean(*var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("ServiceId");
    if let Some(var_1745) = &input.service_ids {
        let mut list_1747 = scope_1744.start_list(true, Some("item"));
        for item_1746 in var_1745 {
            #[allow(unused_mut)]
            let mut entry_1748 = list_1747.entry();
            entry_1748.string(item_1746);
        }
        list_1747.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("DryRun");
    if let Some(var_1750) = &input.dry_run {
        scope_1749.boolean(*var_1750);
    }
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1752) = &input.vpc_peering_connection_id {
        scope_1751.string(var_1752);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("VpnConnectionId");
    if let Some(var_1754) = &input.vpn_connection_id {
        scope_1753.string(var_1754);
    }
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("DryRun");
    if let Some(var_1756) = &input.dry_run {
        scope_1755.boolean(*var_1756);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1758) = &input.destination_cidr_block {
        scope_1757.string(var_1758);
    }
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("VpnConnectionId");
    if let Some(var_1760) = &input.vpn_connection_id {
        scope_1759.string(var_1760);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("VpnGatewayId");
    if let Some(var_1762) = &input.vpn_gateway_id {
        scope_1761.string(var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("DryRun");
    if let Some(var_1764) = &input.dry_run {
        scope_1763.boolean(*var_1764);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("Cidr");
    if let Some(var_1766) = &input.cidr {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("DryRun");
    if let Some(var_1768) = &input.dry_run {
        scope_1767.boolean(*var_1768);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("ImageId");
    if let Some(var_1770) = &input.image_id {
        scope_1769.string(var_1770);
    }
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DryRun");
    if let Some(var_1774) = &input.dry_run {
        scope_1773.boolean(*var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1776) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(
            scope_1775, var_1776,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1778) = &input.transit_gateway_multicast_domain_id {
        scope_1777.string(var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("GroupIpAddress");
    if let Some(var_1780) = &input.group_ip_address {
        scope_1779.string(var_1780);
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1782) = &input.network_interface_ids {
        let mut list_1784 = scope_1781.start_list(true, Some("item"));
        for item_1783 in var_1782 {
            #[allow(unused_mut)]
            let mut entry_1785 = list_1784.entry();
            entry_1785.string(item_1783);
        }
        list_1784.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("DryRun");
    if let Some(var_1787) = &input.dry_run {
        scope_1786.boolean(*var_1787);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1789) = &input.transit_gateway_multicast_domain_id {
        scope_1788.string(var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("GroupIpAddress");
    if let Some(var_1791) = &input.group_ip_address {
        scope_1790.string(var_1791);
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1793) = &input.network_interface_ids {
        let mut list_1795 = scope_1792.start_list(true, Some("item"));
        for item_1794 in var_1793 {
            #[allow(unused_mut)]
            let mut entry_1796 = list_1795.entry();
            entry_1796.string(item_1794);
        }
        list_1795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("DryRun");
    if let Some(var_1798) = &input.dry_run {
        scope_1797.boolean(*var_1798);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("AttributeName");
    if let Some(var_1800) = &input.attribute_names {
        let mut list_1802 = scope_1799.start_list(true, Some("attributeName"));
        for item_1801 in var_1800 {
            #[allow(unused_mut)]
            let mut entry_1803 = list_1802.entry();
            entry_1803.string(item_1801.as_str());
        }
        list_1802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("DryRun");
    if let Some(var_1805) = &input.dry_run {
        scope_1804.boolean(*var_1805);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("Filter");
    if let Some(var_1807) = &input.filters {
        let mut list_1809 = scope_1806.start_list(true, Some("Filter"));
        for item_1808 in var_1807 {
            #[allow(unused_mut)]
            let mut entry_1810 = list_1809.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1810, item_1808);
        }
        list_1809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("PublicIp");
    if let Some(var_1812) = &input.public_ips {
        let mut list_1814 = scope_1811.start_list(true, Some("PublicIp"));
        for item_1813 in var_1812 {
            #[allow(unused_mut)]
            let mut entry_1815 = list_1814.entry();
            entry_1815.string(item_1813);
        }
        list_1814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1816 = writer.prefix("AllocationId");
    if let Some(var_1817) = &input.allocation_ids {
        let mut list_1819 = scope_1816.start_list(true, Some("AllocationId"));
        for item_1818 in var_1817 {
            #[allow(unused_mut)]
            let mut entry_1820 = list_1819.entry();
            entry_1820.string(item_1818);
        }
        list_1819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("AllocationId");
    if let Some(var_1824) = &input.allocation_ids {
        let mut list_1826 = scope_1823.start_list(true, Some("item"));
        for item_1825 in var_1824 {
            #[allow(unused_mut)]
            let mut entry_1827 = list_1826.entry();
            entry_1827.string(item_1825);
        }
        list_1826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1828 = writer.prefix("Attribute");
    if let Some(var_1829) = &input.attribute {
        scope_1828.string(var_1829.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("NextToken");
    if let Some(var_1831) = &input.next_token {
        scope_1830.string(var_1831);
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("MaxResults");
    if let Some(var_1833) = &input.max_results {
        scope_1832.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1833).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DryRun");
    if let Some(var_1835) = &input.dry_run {
        scope_1834.boolean(*var_1835);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("DryRun");
    if let Some(var_1837) = &input.dry_run {
        scope_1836.boolean(*var_1837);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("Filter");
    if let Some(var_1839) = &input.filters {
        let mut list_1841 = scope_1838.start_list(true, Some("Filter"));
        for item_1840 in var_1839 {
            #[allow(unused_mut)]
            let mut entry_1842 = list_1841.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1842, item_1840);
        }
        list_1841.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("ZoneName");
    if let Some(var_1844) = &input.zone_names {
        let mut list_1846 = scope_1843.start_list(true, Some("ZoneName"));
        for item_1845 in var_1844 {
            #[allow(unused_mut)]
            let mut entry_1847 = list_1846.entry();
            entry_1847.string(item_1845);
        }
        list_1846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("ZoneId");
    if let Some(var_1849) = &input.zone_ids {
        let mut list_1851 = scope_1848.start_list(true, Some("ZoneId"));
        for item_1850 in var_1849 {
            #[allow(unused_mut)]
            let mut entry_1852 = list_1851.entry();
            entry_1852.string(item_1850);
        }
        list_1851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1854) = &input.all_availability_zones {
        scope_1853.boolean(*var_1854);
    }
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("DryRun");
    if let Some(var_1856) = &input.dry_run {
        scope_1855.boolean(*var_1856);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("BundleId");
    if let Some(var_1858) = &input.bundle_ids {
        let mut list_1860 = scope_1857.start_list(true, Some("BundleId"));
        for item_1859 in var_1858 {
            #[allow(unused_mut)]
            let mut entry_1861 = list_1860.entry();
            entry_1861.string(item_1859);
        }
        list_1860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("Filter");
    if let Some(var_1863) = &input.filters {
        let mut list_1865 = scope_1862.start_list(true, Some("Filter"));
        for item_1864 in var_1863 {
            #[allow(unused_mut)]
            let mut entry_1866 = list_1865.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1866, item_1864);
        }
        list_1865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("DryRun");
    if let Some(var_1870) = &input.dry_run {
        scope_1869.boolean(*var_1870);
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("MaxResults");
    if let Some(var_1872) = &input.max_results {
        scope_1871.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1872).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("NextToken");
    if let Some(var_1874) = &input.next_token {
        scope_1873.string(var_1874);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("CapacityReservationId");
    if let Some(var_1876) = &input.capacity_reservation_ids {
        let mut list_1878 = scope_1875.start_list(true, Some("item"));
        for item_1877 in var_1876 {
            #[allow(unused_mut)]
            let mut entry_1879 = list_1878.entry();
            entry_1879.string(item_1877);
        }
        list_1878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("NextToken");
    if let Some(var_1881) = &input.next_token {
        scope_1880.string(var_1881);
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("MaxResults");
    if let Some(var_1883) = &input.max_results {
        scope_1882.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("Filter");
    if let Some(var_1885) = &input.filters {
        let mut list_1887 = scope_1884.start_list(true, Some("Filter"));
        for item_1886 in var_1885 {
            #[allow(unused_mut)]
            let mut entry_1888 = list_1887.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1888, item_1886);
        }
        list_1887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("DryRun");
    if let Some(var_1890) = &input.dry_run {
        scope_1889.boolean(*var_1890);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("CarrierGatewayId");
    if let Some(var_1892) = &input.carrier_gateway_ids {
        let mut list_1894 = scope_1891.start_list(true, None);
        for item_1893 in var_1892 {
            #[allow(unused_mut)]
            let mut entry_1895 = list_1894.entry();
            entry_1895.string(item_1893);
        }
        list_1894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("Filter");
    if let Some(var_1897) = &input.filters {
        let mut list_1899 = scope_1896.start_list(true, Some("Filter"));
        for item_1898 in var_1897 {
            #[allow(unused_mut)]
            let mut entry_1900 = list_1899.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1900, item_1898);
        }
        list_1899.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("MaxResults");
    if let Some(var_1902) = &input.max_results {
        scope_1901.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1902).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("NextToken");
    if let Some(var_1904) = &input.next_token {
        scope_1903.string(var_1904);
    }
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("DryRun");
    if let Some(var_1906) = &input.dry_run {
        scope_1905.boolean(*var_1906);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("Filter");
    if let Some(var_1908) = &input.filters {
        let mut list_1910 = scope_1907.start_list(true, Some("Filter"));
        for item_1909 in var_1908 {
            #[allow(unused_mut)]
            let mut entry_1911 = list_1910.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1911, item_1909);
        }
        list_1910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("DryRun");
    if let Some(var_1913) = &input.dry_run {
        scope_1912.boolean(*var_1913);
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("InstanceId");
    if let Some(var_1915) = &input.instance_ids {
        let mut list_1917 = scope_1914.start_list(true, Some("InstanceId"));
        for item_1916 in var_1915 {
            #[allow(unused_mut)]
            let mut entry_1918 = list_1917.entry();
            entry_1918.string(item_1916);
        }
        list_1917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("MaxResults");
    if let Some(var_1920) = &input.max_results {
        scope_1919.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1920).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("NextToken");
    if let Some(var_1922) = &input.next_token {
        scope_1921.string(var_1922);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1924) = &input.client_vpn_endpoint_id {
        scope_1923.string(var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("DryRun");
    if let Some(var_1926) = &input.dry_run {
        scope_1925.boolean(*var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("NextToken");
    if let Some(var_1928) = &input.next_token {
        scope_1927.string(var_1928);
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("Filter");
    if let Some(var_1930) = &input.filters {
        let mut list_1932 = scope_1929.start_list(true, Some("Filter"));
        for item_1931 in var_1930 {
            #[allow(unused_mut)]
            let mut entry_1933 = list_1932.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1933, item_1931);
        }
        list_1932.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("MaxResults");
    if let Some(var_1935) = &input.max_results {
        scope_1934.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1935).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1937) = &input.client_vpn_endpoint_id {
        scope_1936.string(var_1937);
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("Filter");
    if let Some(var_1939) = &input.filters {
        let mut list_1941 = scope_1938.start_list(true, Some("Filter"));
        for item_1940 in var_1939 {
            #[allow(unused_mut)]
            let mut entry_1942 = list_1941.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1942, item_1940);
        }
        list_1941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("NextToken");
    if let Some(var_1944) = &input.next_token {
        scope_1943.string(var_1944);
    }
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("MaxResults");
    if let Some(var_1946) = &input.max_results {
        scope_1945.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1946).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("DryRun");
    if let Some(var_1948) = &input.dry_run {
        scope_1947.boolean(*var_1948);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1950) = &input.client_vpn_endpoint_ids {
        let mut list_1952 = scope_1949.start_list(true, Some("item"));
        for item_1951 in var_1950 {
            #[allow(unused_mut)]
            let mut entry_1953 = list_1952.entry();
            entry_1953.string(item_1951);
        }
        list_1952.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("MaxResults");
    if let Some(var_1955) = &input.max_results {
        scope_1954.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1955).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("NextToken");
    if let Some(var_1957) = &input.next_token {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("Filter");
    if let Some(var_1959) = &input.filters {
        let mut list_1961 = scope_1958.start_list(true, Some("Filter"));
        for item_1960 in var_1959 {
            #[allow(unused_mut)]
            let mut entry_1962 = list_1961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1962, item_1960);
        }
        list_1961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("DryRun");
    if let Some(var_1964) = &input.dry_run {
        scope_1963.boolean(*var_1964);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1966) = &input.client_vpn_endpoint_id {
        scope_1965.string(var_1966);
    }
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("Filter");
    if let Some(var_1968) = &input.filters {
        let mut list_1970 = scope_1967.start_list(true, Some("Filter"));
        for item_1969 in var_1968 {
            #[allow(unused_mut)]
            let mut entry_1971 = list_1970.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1971, item_1969);
        }
        list_1970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("MaxResults");
    if let Some(var_1973) = &input.max_results {
        scope_1972.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1973).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("NextToken");
    if let Some(var_1975) = &input.next_token {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("DryRun");
    if let Some(var_1977) = &input.dry_run {
        scope_1976.boolean(*var_1977);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1979) = &input.client_vpn_endpoint_id {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("AssociationIds");
    if let Some(var_1981) = &input.association_ids {
        let mut list_1983 = scope_1980.start_list(true, Some("item"));
        for item_1982 in var_1981 {
            #[allow(unused_mut)]
            let mut entry_1984 = list_1983.entry();
            entry_1984.string(item_1982);
        }
        list_1983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("MaxResults");
    if let Some(var_1986) = &input.max_results {
        scope_1985.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1986).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("NextToken");
    if let Some(var_1988) = &input.next_token {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("Filter");
    if let Some(var_1990) = &input.filters {
        let mut list_1992 = scope_1989.start_list(true, Some("Filter"));
        for item_1991 in var_1990 {
            #[allow(unused_mut)]
            let mut entry_1993 = list_1992.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1993, item_1991);
        }
        list_1992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("DryRun");
    if let Some(var_1995) = &input.dry_run {
        scope_1994.boolean(*var_1995);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("PoolId");
    if let Some(var_1997) = &input.pool_ids {
        let mut list_1999 = scope_1996.start_list(true, Some("item"));
        for item_1998 in var_1997 {
            #[allow(unused_mut)]
            let mut entry_2000 = list_1999.entry();
            entry_2000.string(item_1998);
        }
        list_1999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("Filter");
    if let Some(var_2002) = &input.filters {
        let mut list_2004 = scope_2001.start_list(true, Some("Filter"));
        for item_2003 in var_2002 {
            #[allow(unused_mut)]
            let mut entry_2005 = list_2004.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2005, item_2003);
        }
        list_2004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("MaxResults");
    if let Some(var_2007) = &input.max_results {
        scope_2006.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("NextToken");
    if let Some(var_2009) = &input.next_token {
        scope_2008.string(var_2009);
    }
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("DryRun");
    if let Some(var_2011) = &input.dry_run {
        scope_2010.boolean(*var_2011);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("ConversionTaskId");
    if let Some(var_2013) = &input.conversion_task_ids {
        let mut list_2015 = scope_2012.start_list(true, Some("item"));
        for item_2014 in var_2013 {
            #[allow(unused_mut)]
            let mut entry_2016 = list_2015.entry();
            entry_2016.string(item_2014);
        }
        list_2015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("DryRun");
    if let Some(var_2018) = &input.dry_run {
        scope_2017.boolean(*var_2018);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("CustomerGatewayId");
    if let Some(var_2020) = &input.customer_gateway_ids {
        let mut list_2022 = scope_2019.start_list(true, Some("CustomerGatewayId"));
        for item_2021 in var_2020 {
            #[allow(unused_mut)]
            let mut entry_2023 = list_2022.entry();
            entry_2023.string(item_2021);
        }
        list_2022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2024 = writer.prefix("Filter");
    if let Some(var_2025) = &input.filters {
        let mut list_2027 = scope_2024.start_list(true, Some("Filter"));
        for item_2026 in var_2025 {
            #[allow(unused_mut)]
            let mut entry_2028 = list_2027.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2028, item_2026);
        }
        list_2027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("DryRun");
    if let Some(var_2030) = &input.dry_run {
        scope_2029.boolean(*var_2030);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("DhcpOptionsId");
    if let Some(var_2032) = &input.dhcp_options_ids {
        let mut list_2034 = scope_2031.start_list(true, Some("DhcpOptionsId"));
        for item_2033 in var_2032 {
            #[allow(unused_mut)]
            let mut entry_2035 = list_2034.entry();
            entry_2035.string(item_2033);
        }
        list_2034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2036 = writer.prefix("Filter");
    if let Some(var_2037) = &input.filters {
        let mut list_2039 = scope_2036.start_list(true, Some("Filter"));
        for item_2038 in var_2037 {
            #[allow(unused_mut)]
            let mut entry_2040 = list_2039.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2040, item_2038);
        }
        list_2039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("DryRun");
    if let Some(var_2042) = &input.dry_run {
        scope_2041.boolean(*var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("NextToken");
    if let Some(var_2044) = &input.next_token {
        scope_2043.string(var_2044);
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("MaxResults");
    if let Some(var_2046) = &input.max_results {
        scope_2045.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2046).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("DryRun");
    if let Some(var_2048) = &input.dry_run {
        scope_2047.boolean(*var_2048);
    }
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2050) = &input.egress_only_internet_gateway_ids {
        let mut list_2052 = scope_2049.start_list(true, Some("item"));
        for item_2051 in var_2050 {
            #[allow(unused_mut)]
            let mut entry_2053 = list_2052.entry();
            entry_2053.string(item_2051);
        }
        list_2052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("MaxResults");
    if let Some(var_2055) = &input.max_results {
        scope_2054.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2055).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("NextToken");
    if let Some(var_2057) = &input.next_token {
        scope_2056.string(var_2057);
    }
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("Filter");
    if let Some(var_2059) = &input.filters {
        let mut list_2061 = scope_2058.start_list(true, Some("Filter"));
        for item_2060 in var_2059 {
            #[allow(unused_mut)]
            let mut entry_2062 = list_2061.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2062, item_2060);
        }
        list_2061.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("ElasticGpuId");
    if let Some(var_2064) = &input.elastic_gpu_ids {
        let mut list_2066 = scope_2063.start_list(true, Some("item"));
        for item_2065 in var_2064 {
            #[allow(unused_mut)]
            let mut entry_2067 = list_2066.entry();
            entry_2067.string(item_2065);
        }
        list_2066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("DryRun");
    if let Some(var_2069) = &input.dry_run {
        scope_2068.boolean(*var_2069);
    }
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("Filter");
    if let Some(var_2071) = &input.filters {
        let mut list_2073 = scope_2070.start_list(true, Some("Filter"));
        for item_2072 in var_2071 {
            #[allow(unused_mut)]
            let mut entry_2074 = list_2073.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2074, item_2072);
        }
        list_2073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("MaxResults");
    if let Some(var_2076) = &input.max_results {
        scope_2075.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2076).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("NextToken");
    if let Some(var_2078) = &input.next_token {
        scope_2077.string(var_2078);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("DryRun");
    if let Some(var_2080) = &input.dry_run {
        scope_2079.boolean(*var_2080);
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("Filter");
    if let Some(var_2082) = &input.filters {
        let mut list_2084 = scope_2081.start_list(true, Some("Filter"));
        for item_2083 in var_2082 {
            #[allow(unused_mut)]
            let mut entry_2085 = list_2084.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2085, item_2083);
        }
        list_2084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2086 = writer.prefix("ExportImageTaskId");
    if let Some(var_2087) = &input.export_image_task_ids {
        let mut list_2089 = scope_2086.start_list(true, Some("ExportImageTaskId"));
        for item_2088 in var_2087 {
            #[allow(unused_mut)]
            let mut entry_2090 = list_2089.entry();
            entry_2090.string(item_2088);
        }
        list_2089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("MaxResults");
    if let Some(var_2092) = &input.max_results {
        scope_2091.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2092).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("NextToken");
    if let Some(var_2094) = &input.next_token {
        scope_2093.string(var_2094);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("ExportTaskId");
    if let Some(var_2096) = &input.export_task_ids {
        let mut list_2098 = scope_2095.start_list(true, Some("ExportTaskId"));
        for item_2097 in var_2096 {
            #[allow(unused_mut)]
            let mut entry_2099 = list_2098.entry();
            entry_2099.string(item_2097);
        }
        list_2098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("Filter");
    if let Some(var_2101) = &input.filters {
        let mut list_2103 = scope_2100.start_list(true, Some("Filter"));
        for item_2102 in var_2101 {
            #[allow(unused_mut)]
            let mut entry_2104 = list_2103.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2104, item_2102);
        }
        list_2103.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("Filter");
    if let Some(var_2106) = &input.filters {
        let mut list_2108 = scope_2105.start_list(true, Some("Filter"));
        for item_2107 in var_2106 {
            #[allow(unused_mut)]
            let mut entry_2109 = list_2108.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2109, item_2107);
        }
        list_2108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("MaxResults");
    if let Some(var_2111) = &input.max_results {
        scope_2110.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("NextToken");
    if let Some(var_2113) = &input.next_token {
        scope_2112.string(var_2113);
    }
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("DryRun");
    if let Some(var_2115) = &input.dry_run {
        scope_2114.boolean(*var_2115);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2116 = writer.prefix("DryRun");
    if let Some(var_2117) = &input.dry_run {
        scope_2116.boolean(*var_2117);
    }
    #[allow(unused_mut)]
    let mut scope_2118 = writer.prefix("EventType");
    if let Some(var_2119) = &input.event_type {
        scope_2118.string(var_2119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("MaxResults");
    if let Some(var_2121) = &input.max_results {
        scope_2120.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("NextToken");
    if let Some(var_2123) = &input.next_token {
        scope_2122.string(var_2123);
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("FleetId");
    if let Some(var_2125) = &input.fleet_id {
        scope_2124.string(var_2125);
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("StartTime");
    if let Some(var_2127) = &input.start_time {
        scope_2126.instant(var_2127, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("DryRun");
    if let Some(var_2129) = &input.dry_run {
        scope_2128.boolean(*var_2129);
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("MaxResults");
    if let Some(var_2131) = &input.max_results {
        scope_2130.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2131).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("NextToken");
    if let Some(var_2133) = &input.next_token {
        scope_2132.string(var_2133);
    }
    #[allow(unused_mut)]
    let mut scope_2134 = writer.prefix("FleetId");
    if let Some(var_2135) = &input.fleet_id {
        scope_2134.string(var_2135);
    }
    #[allow(unused_mut)]
    let mut scope_2136 = writer.prefix("Filter");
    if let Some(var_2137) = &input.filters {
        let mut list_2139 = scope_2136.start_list(true, Some("Filter"));
        for item_2138 in var_2137 {
            #[allow(unused_mut)]
            let mut entry_2140 = list_2139.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2140, item_2138);
        }
        list_2139.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2141 = writer.prefix("DryRun");
    if let Some(var_2142) = &input.dry_run {
        scope_2141.boolean(*var_2142);
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("MaxResults");
    if let Some(var_2144) = &input.max_results {
        scope_2143.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("NextToken");
    if let Some(var_2146) = &input.next_token {
        scope_2145.string(var_2146);
    }
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("FleetId");
    if let Some(var_2148) = &input.fleet_ids {
        let mut list_2150 = scope_2147.start_list(true, None);
        for item_2149 in var_2148 {
            #[allow(unused_mut)]
            let mut entry_2151 = list_2150.entry();
            entry_2151.string(item_2149);
        }
        list_2150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("Filter");
    if let Some(var_2153) = &input.filters {
        let mut list_2155 = scope_2152.start_list(true, Some("Filter"));
        for item_2154 in var_2153 {
            #[allow(unused_mut)]
            let mut entry_2156 = list_2155.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2156, item_2154);
        }
        list_2155.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("DryRun");
    if let Some(var_2158) = &input.dry_run {
        scope_2157.boolean(*var_2158);
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("Filter");
    if let Some(var_2160) = &input.filter {
        let mut list_2162 = scope_2159.start_list(true, Some("Filter"));
        for item_2161 in var_2160 {
            #[allow(unused_mut)]
            let mut entry_2163 = list_2162.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2163, item_2161);
        }
        list_2162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2164 = writer.prefix("FlowLogId");
    if let Some(var_2165) = &input.flow_log_ids {
        let mut list_2167 = scope_2164.start_list(true, Some("item"));
        for item_2166 in var_2165 {
            #[allow(unused_mut)]
            let mut entry_2168 = list_2167.entry();
            entry_2168.string(item_2166);
        }
        list_2167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("MaxResults");
    if let Some(var_2170) = &input.max_results {
        scope_2169.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("NextToken");
    if let Some(var_2172) = &input.next_token {
        scope_2171.string(var_2172);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("DryRun");
    if let Some(var_2174) = &input.dry_run {
        scope_2173.boolean(*var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("FpgaImageId");
    if let Some(var_2176) = &input.fpga_image_id {
        scope_2175.string(var_2176);
    }
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("Attribute");
    if let Some(var_2178) = &input.attribute {
        scope_2177.string(var_2178.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("DryRun");
    if let Some(var_2180) = &input.dry_run {
        scope_2179.boolean(*var_2180);
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("FpgaImageId");
    if let Some(var_2182) = &input.fpga_image_ids {
        let mut list_2184 = scope_2181.start_list(true, Some("item"));
        for item_2183 in var_2182 {
            #[allow(unused_mut)]
            let mut entry_2185 = list_2184.entry();
            entry_2185.string(item_2183);
        }
        list_2184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2186 = writer.prefix("Owner");
    if let Some(var_2187) = &input.owners {
        let mut list_2189 = scope_2186.start_list(true, Some("Owner"));
        for item_2188 in var_2187 {
            #[allow(unused_mut)]
            let mut entry_2190 = list_2189.entry();
            entry_2190.string(item_2188);
        }
        list_2189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2191 = writer.prefix("Filter");
    if let Some(var_2192) = &input.filters {
        let mut list_2194 = scope_2191.start_list(true, Some("Filter"));
        for item_2193 in var_2192 {
            #[allow(unused_mut)]
            let mut entry_2195 = list_2194.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2195, item_2193);
        }
        list_2194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("NextToken");
    if let Some(var_2197) = &input.next_token {
        scope_2196.string(var_2197);
    }
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("MaxResults");
    if let Some(var_2199) = &input.max_results {
        scope_2198.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2199).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2200 = writer.prefix("Filter");
    if let Some(var_2201) = &input.filter {
        let mut list_2203 = scope_2200.start_list(true, Some("Filter"));
        for item_2202 in var_2201 {
            #[allow(unused_mut)]
            let mut entry_2204 = list_2203.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2204, item_2202);
        }
        list_2203.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("MaxDuration");
    if let Some(var_2206) = &input.max_duration {
        scope_2205.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2206).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("MaxResults");
    if let Some(var_2208) = &input.max_results {
        scope_2207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2209 = writer.prefix("MinDuration");
    if let Some(var_2210) = &input.min_duration {
        scope_2209.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("NextToken");
    if let Some(var_2212) = &input.next_token {
        scope_2211.string(var_2212);
    }
    #[allow(unused_mut)]
    let mut scope_2213 = writer.prefix("OfferingId");
    if let Some(var_2214) = &input.offering_id {
        scope_2213.string(var_2214);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2215 = writer.prefix("Filter");
    if let Some(var_2216) = &input.filter {
        let mut list_2218 = scope_2215.start_list(true, Some("Filter"));
        for item_2217 in var_2216 {
            #[allow(unused_mut)]
            let mut entry_2219 = list_2218.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2219, item_2217);
        }
        list_2218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("HostReservationIdSet");
    if let Some(var_2221) = &input.host_reservation_id_set {
        let mut list_2223 = scope_2220.start_list(true, Some("item"));
        for item_2222 in var_2221 {
            #[allow(unused_mut)]
            let mut entry_2224 = list_2223.entry();
            entry_2224.string(item_2222);
        }
        list_2223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("MaxResults");
    if let Some(var_2226) = &input.max_results {
        scope_2225.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("NextToken");
    if let Some(var_2228) = &input.next_token {
        scope_2227.string(var_2228);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("Filter");
    if let Some(var_2230) = &input.filter {
        let mut list_2232 = scope_2229.start_list(true, Some("Filter"));
        for item_2231 in var_2230 {
            #[allow(unused_mut)]
            let mut entry_2233 = list_2232.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2233, item_2231);
        }
        list_2232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("HostId");
    if let Some(var_2235) = &input.host_ids {
        let mut list_2237 = scope_2234.start_list(true, Some("item"));
        for item_2236 in var_2235 {
            #[allow(unused_mut)]
            let mut entry_2238 = list_2237.entry();
            entry_2238.string(item_2236);
        }
        list_2237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2239 = writer.prefix("MaxResults");
    if let Some(var_2240) = &input.max_results {
        scope_2239.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2241 = writer.prefix("NextToken");
    if let Some(var_2242) = &input.next_token {
        scope_2241.string(var_2242);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2243 = writer.prefix("AssociationId");
    if let Some(var_2244) = &input.association_ids {
        let mut list_2246 = scope_2243.start_list(true, Some("AssociationId"));
        for item_2245 in var_2244 {
            #[allow(unused_mut)]
            let mut entry_2247 = list_2246.entry();
            entry_2247.string(item_2245);
        }
        list_2246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2248 = writer.prefix("Filter");
    if let Some(var_2249) = &input.filters {
        let mut list_2251 = scope_2248.start_list(true, Some("Filter"));
        for item_2250 in var_2249 {
            #[allow(unused_mut)]
            let mut entry_2252 = list_2251.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2252, item_2250);
        }
        list_2251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2253 = writer.prefix("MaxResults");
    if let Some(var_2254) = &input.max_results {
        scope_2253.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2254).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2255 = writer.prefix("NextToken");
    if let Some(var_2256) = &input.next_token {
        scope_2255.string(var_2256);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2257 = writer.prefix("PrincipalArn");
    if let Some(var_2258) = &input.principal_arn {
        scope_2257.string(var_2258);
    }
    #[allow(unused_mut)]
    let mut scope_2259 = writer.prefix("Resource");
    if let Some(var_2260) = &input.resource {
        scope_2259.string(var_2260);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2261 = writer.prefix("Resource");
    if let Some(var_2262) = &input.resource {
        scope_2261.string(var_2262);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2263 = writer.prefix("Attribute");
    if let Some(var_2264) = &input.attribute {
        scope_2263.string(var_2264.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2265 = writer.prefix("ImageId");
    if let Some(var_2266) = &input.image_id {
        scope_2265.string(var_2266);
    }
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("DryRun");
    if let Some(var_2268) = &input.dry_run {
        scope_2267.boolean(*var_2268);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2269 = writer.prefix("ExecutableBy");
    if let Some(var_2270) = &input.executable_users {
        let mut list_2272 = scope_2269.start_list(true, Some("ExecutableBy"));
        for item_2271 in var_2270 {
            #[allow(unused_mut)]
            let mut entry_2273 = list_2272.entry();
            entry_2273.string(item_2271);
        }
        list_2272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("Filter");
    if let Some(var_2275) = &input.filters {
        let mut list_2277 = scope_2274.start_list(true, Some("Filter"));
        for item_2276 in var_2275 {
            #[allow(unused_mut)]
            let mut entry_2278 = list_2277.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2278, item_2276);
        }
        list_2277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2279 = writer.prefix("ImageId");
    if let Some(var_2280) = &input.image_ids {
        let mut list_2282 = scope_2279.start_list(true, Some("ImageId"));
        for item_2281 in var_2280 {
            #[allow(unused_mut)]
            let mut entry_2283 = list_2282.entry();
            entry_2283.string(item_2281);
        }
        list_2282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2284 = writer.prefix("Owner");
    if let Some(var_2285) = &input.owners {
        let mut list_2287 = scope_2284.start_list(true, Some("Owner"));
        for item_2286 in var_2285 {
            #[allow(unused_mut)]
            let mut entry_2288 = list_2287.entry();
            entry_2288.string(item_2286);
        }
        list_2287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("IncludeDeprecated");
    if let Some(var_2290) = &input.include_deprecated {
        scope_2289.boolean(*var_2290);
    }
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("DryRun");
    if let Some(var_2292) = &input.dry_run {
        scope_2291.boolean(*var_2292);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("DryRun");
    if let Some(var_2294) = &input.dry_run {
        scope_2293.boolean(*var_2294);
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("Filters");
    if let Some(var_2296) = &input.filters {
        let mut list_2298 = scope_2295.start_list(true, Some("Filter"));
        for item_2297 in var_2296 {
            #[allow(unused_mut)]
            let mut entry_2299 = list_2298.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2299, item_2297);
        }
        list_2298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("ImportTaskId");
    if let Some(var_2301) = &input.import_task_ids {
        let mut list_2303 = scope_2300.start_list(true, Some("ImportTaskId"));
        for item_2302 in var_2301 {
            #[allow(unused_mut)]
            let mut entry_2304 = list_2303.entry();
            entry_2304.string(item_2302);
        }
        list_2303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2305 = writer.prefix("MaxResults");
    if let Some(var_2306) = &input.max_results {
        scope_2305.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2307 = writer.prefix("NextToken");
    if let Some(var_2308) = &input.next_token {
        scope_2307.string(var_2308);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2309 = writer.prefix("DryRun");
    if let Some(var_2310) = &input.dry_run {
        scope_2309.boolean(*var_2310);
    }
    #[allow(unused_mut)]
    let mut scope_2311 = writer.prefix("Filters");
    if let Some(var_2312) = &input.filters {
        let mut list_2314 = scope_2311.start_list(true, Some("Filter"));
        for item_2313 in var_2312 {
            #[allow(unused_mut)]
            let mut entry_2315 = list_2314.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2315, item_2313);
        }
        list_2314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("ImportTaskId");
    if let Some(var_2317) = &input.import_task_ids {
        let mut list_2319 = scope_2316.start_list(true, Some("ImportTaskId"));
        for item_2318 in var_2317 {
            #[allow(unused_mut)]
            let mut entry_2320 = list_2319.entry();
            entry_2320.string(item_2318);
        }
        list_2319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("MaxResults");
    if let Some(var_2322) = &input.max_results {
        scope_2321.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2322).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("NextToken");
    if let Some(var_2324) = &input.next_token {
        scope_2323.string(var_2324);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("Attribute");
    if let Some(var_2326) = &input.attribute {
        scope_2325.string(var_2326.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("DryRun");
    if let Some(var_2328) = &input.dry_run {
        scope_2327.boolean(*var_2328);
    }
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("InstanceId");
    if let Some(var_2330) = &input.instance_id {
        scope_2329.string(var_2330);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("DryRun");
    if let Some(var_2332) = &input.dry_run {
        scope_2331.boolean(*var_2332);
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("Filter");
    if let Some(var_2334) = &input.filters {
        let mut list_2336 = scope_2333.start_list(true, Some("Filter"));
        for item_2335 in var_2334 {
            #[allow(unused_mut)]
            let mut entry_2337 = list_2336.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2337, item_2335);
        }
        list_2336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("InstanceId");
    if let Some(var_2339) = &input.instance_ids {
        let mut list_2341 = scope_2338.start_list(true, Some("InstanceId"));
        for item_2340 in var_2339 {
            #[allow(unused_mut)]
            let mut entry_2342 = list_2341.entry();
            entry_2342.string(item_2340);
        }
        list_2341.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2343 = writer.prefix("MaxResults");
    if let Some(var_2344) = &input.max_results {
        scope_2343.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("NextToken");
    if let Some(var_2346) = &input.next_token {
        scope_2345.string(var_2346);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("DryRun");
    if let Some(var_2348) = &input.dry_run {
        scope_2347.boolean(*var_2348);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("DryRun");
    if let Some(var_2350) = &input.dry_run {
        scope_2349.boolean(*var_2350);
    }
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2352) = &input.instance_event_window_ids {
        let mut list_2354 = scope_2351.start_list(true, Some("InstanceEventWindowId"));
        for item_2353 in var_2352 {
            #[allow(unused_mut)]
            let mut entry_2355 = list_2354.entry();
            entry_2355.string(item_2353);
        }
        list_2354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("Filter");
    if let Some(var_2357) = &input.filters {
        let mut list_2359 = scope_2356.start_list(true, Some("Filter"));
        for item_2358 in var_2357 {
            #[allow(unused_mut)]
            let mut entry_2360 = list_2359.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2360, item_2358);
        }
        list_2359.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("MaxResults");
    if let Some(var_2362) = &input.max_results {
        scope_2361.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2362).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("NextToken");
    if let Some(var_2364) = &input.next_token {
        scope_2363.string(var_2364);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("Filter");
    if let Some(var_2366) = &input.filters {
        let mut list_2368 = scope_2365.start_list(true, Some("Filter"));
        for item_2367 in var_2366 {
            #[allow(unused_mut)]
            let mut entry_2369 = list_2368.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2369, item_2367);
        }
        list_2368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("InstanceId");
    if let Some(var_2371) = &input.instance_ids {
        let mut list_2373 = scope_2370.start_list(true, Some("InstanceId"));
        for item_2372 in var_2371 {
            #[allow(unused_mut)]
            let mut entry_2374 = list_2373.entry();
            entry_2374.string(item_2372);
        }
        list_2373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("DryRun");
    if let Some(var_2376) = &input.dry_run {
        scope_2375.boolean(*var_2376);
    }
    #[allow(unused_mut)]
    let mut scope_2377 = writer.prefix("MaxResults");
    if let Some(var_2378) = &input.max_results {
        scope_2377.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2378).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2379 = writer.prefix("NextToken");
    if let Some(var_2380) = &input.next_token {
        scope_2379.string(var_2380);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2381 = writer.prefix("Filter");
    if let Some(var_2382) = &input.filters {
        let mut list_2384 = scope_2381.start_list(true, Some("Filter"));
        for item_2383 in var_2382 {
            #[allow(unused_mut)]
            let mut entry_2385 = list_2384.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2385, item_2383);
        }
        list_2384.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("InstanceId");
    if let Some(var_2387) = &input.instance_ids {
        let mut list_2389 = scope_2386.start_list(true, Some("InstanceId"));
        for item_2388 in var_2387 {
            #[allow(unused_mut)]
            let mut entry_2390 = list_2389.entry();
            entry_2390.string(item_2388);
        }
        list_2389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2391 = writer.prefix("MaxResults");
    if let Some(var_2392) = &input.max_results {
        scope_2391.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2392).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2393 = writer.prefix("NextToken");
    if let Some(var_2394) = &input.next_token {
        scope_2393.string(var_2394);
    }
    #[allow(unused_mut)]
    let mut scope_2395 = writer.prefix("DryRun");
    if let Some(var_2396) = &input.dry_run {
        scope_2395.boolean(*var_2396);
    }
    #[allow(unused_mut)]
    let mut scope_2397 = writer.prefix("IncludeAllInstances");
    if let Some(var_2398) = &input.include_all_instances {
        scope_2397.boolean(*var_2398);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("DryRun");
    if let Some(var_2400) = &input.dry_run {
        scope_2399.boolean(*var_2400);
    }
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("LocationType");
    if let Some(var_2402) = &input.location_type {
        scope_2401.string(var_2402.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("Filter");
    if let Some(var_2404) = &input.filters {
        let mut list_2406 = scope_2403.start_list(true, Some("Filter"));
        for item_2405 in var_2404 {
            #[allow(unused_mut)]
            let mut entry_2407 = list_2406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2407, item_2405);
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("MaxResults");
    if let Some(var_2409) = &input.max_results {
        scope_2408.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("NextToken");
    if let Some(var_2411) = &input.next_token {
        scope_2410.string(var_2411);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("DryRun");
    if let Some(var_2413) = &input.dry_run {
        scope_2412.boolean(*var_2413);
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("InstanceType");
    if let Some(var_2415) = &input.instance_types {
        let mut list_2417 = scope_2414.start_list(true, None);
        for item_2416 in var_2415 {
            #[allow(unused_mut)]
            let mut entry_2418 = list_2417.entry();
            entry_2418.string(item_2416.as_str());
        }
        list_2417.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2419 = writer.prefix("Filter");
    if let Some(var_2420) = &input.filters {
        let mut list_2422 = scope_2419.start_list(true, Some("Filter"));
        for item_2421 in var_2420 {
            #[allow(unused_mut)]
            let mut entry_2423 = list_2422.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2423, item_2421);
        }
        list_2422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("MaxResults");
    if let Some(var_2425) = &input.max_results {
        scope_2424.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2425).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("NextToken");
    if let Some(var_2427) = &input.next_token {
        scope_2426.string(var_2427);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("Filter");
    if let Some(var_2429) = &input.filters {
        let mut list_2431 = scope_2428.start_list(true, Some("Filter"));
        for item_2430 in var_2429 {
            #[allow(unused_mut)]
            let mut entry_2432 = list_2431.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2432, item_2430);
        }
        list_2431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("DryRun");
    if let Some(var_2434) = &input.dry_run {
        scope_2433.boolean(*var_2434);
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("InternetGatewayId");
    if let Some(var_2436) = &input.internet_gateway_ids {
        let mut list_2438 = scope_2435.start_list(true, Some("item"));
        for item_2437 in var_2436 {
            #[allow(unused_mut)]
            let mut entry_2439 = list_2438.entry();
            entry_2439.string(item_2437);
        }
        list_2438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2440 = writer.prefix("NextToken");
    if let Some(var_2441) = &input.next_token {
        scope_2440.string(var_2441);
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("MaxResults");
    if let Some(var_2443) = &input.max_results {
        scope_2442.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2443).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("PoolId");
    if let Some(var_2445) = &input.pool_ids {
        let mut list_2447 = scope_2444.start_list(true, Some("item"));
        for item_2446 in var_2445 {
            #[allow(unused_mut)]
            let mut entry_2448 = list_2447.entry();
            entry_2448.string(item_2446);
        }
        list_2447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2449 = writer.prefix("NextToken");
    if let Some(var_2450) = &input.next_token {
        scope_2449.string(var_2450);
    }
    #[allow(unused_mut)]
    let mut scope_2451 = writer.prefix("MaxResults");
    if let Some(var_2452) = &input.max_results {
        scope_2451.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2452).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2453 = writer.prefix("DryRun");
    if let Some(var_2454) = &input.dry_run {
        scope_2453.boolean(*var_2454);
    }
    #[allow(unused_mut)]
    let mut scope_2455 = writer.prefix("Filter");
    if let Some(var_2456) = &input.filters {
        let mut list_2458 = scope_2455.start_list(true, Some("Filter"));
        for item_2457 in var_2456 {
            #[allow(unused_mut)]
            let mut entry_2459 = list_2458.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2459, item_2457);
        }
        list_2458.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2460 = writer.prefix("Filter");
    if let Some(var_2461) = &input.filters {
        let mut list_2463 = scope_2460.start_list(true, Some("Filter"));
        for item_2462 in var_2461 {
            #[allow(unused_mut)]
            let mut entry_2464 = list_2463.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2464, item_2462);
        }
        list_2463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("KeyName");
    if let Some(var_2466) = &input.key_names {
        let mut list_2468 = scope_2465.start_list(true, Some("KeyName"));
        for item_2467 in var_2466 {
            #[allow(unused_mut)]
            let mut entry_2469 = list_2468.entry();
            entry_2469.string(item_2467);
        }
        list_2468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("KeyPairId");
    if let Some(var_2471) = &input.key_pair_ids {
        let mut list_2473 = scope_2470.start_list(true, Some("KeyPairId"));
        for item_2472 in var_2471 {
            #[allow(unused_mut)]
            let mut entry_2474 = list_2473.entry();
            entry_2474.string(item_2472);
        }
        list_2473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("DryRun");
    if let Some(var_2476) = &input.dry_run {
        scope_2475.boolean(*var_2476);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("DryRun");
    if let Some(var_2478) = &input.dry_run {
        scope_2477.boolean(*var_2478);
    }
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("LaunchTemplateId");
    if let Some(var_2480) = &input.launch_template_ids {
        let mut list_2482 = scope_2479.start_list(true, Some("item"));
        for item_2481 in var_2480 {
            #[allow(unused_mut)]
            let mut entry_2483 = list_2482.entry();
            entry_2483.string(item_2481);
        }
        list_2482.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("LaunchTemplateName");
    if let Some(var_2485) = &input.launch_template_names {
        let mut list_2487 = scope_2484.start_list(true, Some("item"));
        for item_2486 in var_2485 {
            #[allow(unused_mut)]
            let mut entry_2488 = list_2487.entry();
            entry_2488.string(item_2486);
        }
        list_2487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("Filter");
    if let Some(var_2490) = &input.filters {
        let mut list_2492 = scope_2489.start_list(true, Some("Filter"));
        for item_2491 in var_2490 {
            #[allow(unused_mut)]
            let mut entry_2493 = list_2492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2493, item_2491);
        }
        list_2492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("NextToken");
    if let Some(var_2495) = &input.next_token {
        scope_2494.string(var_2495);
    }
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("MaxResults");
    if let Some(var_2497) = &input.max_results {
        scope_2496.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2497).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("DryRun");
    if let Some(var_2499) = &input.dry_run {
        scope_2498.boolean(*var_2499);
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("LaunchTemplateId");
    if let Some(var_2501) = &input.launch_template_id {
        scope_2500.string(var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("LaunchTemplateName");
    if let Some(var_2503) = &input.launch_template_name {
        scope_2502.string(var_2503);
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2505) = &input.versions {
        let mut list_2507 = scope_2504.start_list(true, Some("item"));
        for item_2506 in var_2505 {
            #[allow(unused_mut)]
            let mut entry_2508 = list_2507.entry();
            entry_2508.string(item_2506);
        }
        list_2507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("MinVersion");
    if let Some(var_2510) = &input.min_version {
        scope_2509.string(var_2510);
    }
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("MaxVersion");
    if let Some(var_2512) = &input.max_version {
        scope_2511.string(var_2512);
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("NextToken");
    if let Some(var_2514) = &input.next_token {
        scope_2513.string(var_2514);
    }
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("MaxResults");
    if let Some(var_2516) = &input.max_results {
        scope_2515.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("Filter");
    if let Some(var_2518) = &input.filters {
        let mut list_2520 = scope_2517.start_list(true, Some("Filter"));
        for item_2519 in var_2518 {
            #[allow(unused_mut)]
            let mut entry_2521 = list_2520.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2521, item_2519);
        }
        list_2520.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2522 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2523) = &input.local_gateway_route_table_ids {
        let mut list_2525 = scope_2522.start_list(true, Some("item"));
        for item_2524 in var_2523 {
            #[allow(unused_mut)]
            let mut entry_2526 = list_2525.entry();
            entry_2526.string(item_2524);
        }
        list_2525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2527 = writer.prefix("Filter");
    if let Some(var_2528) = &input.filters {
        let mut list_2530 = scope_2527.start_list(true, Some("Filter"));
        for item_2529 in var_2528 {
            #[allow(unused_mut)]
            let mut entry_2531 = list_2530.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2531, item_2529);
        }
        list_2530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("MaxResults");
    if let Some(var_2533) = &input.max_results {
        scope_2532.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2533).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("NextToken");
    if let Some(var_2535) = &input.next_token {
        scope_2534.string(var_2535);
    }
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("DryRun");
    if let Some(var_2537) = &input.dry_run {
        scope_2536.boolean(*var_2537);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2539) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2541 = scope_2538.start_list(true, Some("item"));
        for item_2540 in var_2539 {
            #[allow(unused_mut)]
            let mut entry_2542 = list_2541.entry();
            entry_2542.string(item_2540);
        }
        list_2541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("Filter");
    if let Some(var_2544) = &input.filters {
        let mut list_2546 = scope_2543.start_list(true, Some("Filter"));
        for item_2545 in var_2544 {
            #[allow(unused_mut)]
            let mut entry_2547 = list_2546.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2547, item_2545);
        }
        list_2546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("MaxResults");
    if let Some(var_2549) = &input.max_results {
        scope_2548.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("NextToken");
    if let Some(var_2551) = &input.next_token {
        scope_2550.string(var_2551);
    }
    #[allow(unused_mut)]
    let mut scope_2552 = writer.prefix("DryRun");
    if let Some(var_2553) = &input.dry_run {
        scope_2552.boolean(*var_2553);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2554 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2555) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2557 = scope_2554.start_list(true, Some("item"));
        for item_2556 in var_2555 {
            #[allow(unused_mut)]
            let mut entry_2558 = list_2557.entry();
            entry_2558.string(item_2556);
        }
        list_2557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2559 = writer.prefix("Filter");
    if let Some(var_2560) = &input.filters {
        let mut list_2562 = scope_2559.start_list(true, Some("Filter"));
        for item_2561 in var_2560 {
            #[allow(unused_mut)]
            let mut entry_2563 = list_2562.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2563, item_2561);
        }
        list_2562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("MaxResults");
    if let Some(var_2565) = &input.max_results {
        scope_2564.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("NextToken");
    if let Some(var_2567) = &input.next_token {
        scope_2566.string(var_2567);
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("DryRun");
    if let Some(var_2569) = &input.dry_run {
        scope_2568.boolean(*var_2569);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("LocalGatewayId");
    if let Some(var_2571) = &input.local_gateway_ids {
        let mut list_2573 = scope_2570.start_list(true, Some("item"));
        for item_2572 in var_2571 {
            #[allow(unused_mut)]
            let mut entry_2574 = list_2573.entry();
            entry_2574.string(item_2572);
        }
        list_2573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2575 = writer.prefix("Filter");
    if let Some(var_2576) = &input.filters {
        let mut list_2578 = scope_2575.start_list(true, Some("Filter"));
        for item_2577 in var_2576 {
            #[allow(unused_mut)]
            let mut entry_2579 = list_2578.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2579, item_2577);
        }
        list_2578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("MaxResults");
    if let Some(var_2581) = &input.max_results {
        scope_2580.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2581).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2582 = writer.prefix("NextToken");
    if let Some(var_2583) = &input.next_token {
        scope_2582.string(var_2583);
    }
    #[allow(unused_mut)]
    let mut scope_2584 = writer.prefix("DryRun");
    if let Some(var_2585) = &input.dry_run {
        scope_2584.boolean(*var_2585);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2586 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2587) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2589 = scope_2586.start_list(true, Some("item"));
        for item_2588 in var_2587 {
            #[allow(unused_mut)]
            let mut entry_2590 = list_2589.entry();
            entry_2590.string(item_2588);
        }
        list_2589.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2591 = writer.prefix("Filter");
    if let Some(var_2592) = &input.filters {
        let mut list_2594 = scope_2591.start_list(true, Some("Filter"));
        for item_2593 in var_2592 {
            #[allow(unused_mut)]
            let mut entry_2595 = list_2594.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2595, item_2593);
        }
        list_2594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("MaxResults");
    if let Some(var_2597) = &input.max_results {
        scope_2596.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2597).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2598 = writer.prefix("NextToken");
    if let Some(var_2599) = &input.next_token {
        scope_2598.string(var_2599);
    }
    #[allow(unused_mut)]
    let mut scope_2600 = writer.prefix("DryRun");
    if let Some(var_2601) = &input.dry_run {
        scope_2600.boolean(*var_2601);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2602 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2603) = &input.local_gateway_virtual_interface_ids {
        let mut list_2605 = scope_2602.start_list(true, Some("item"));
        for item_2604 in var_2603 {
            #[allow(unused_mut)]
            let mut entry_2606 = list_2605.entry();
            entry_2606.string(item_2604);
        }
        list_2605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2607 = writer.prefix("Filter");
    if let Some(var_2608) = &input.filters {
        let mut list_2610 = scope_2607.start_list(true, Some("Filter"));
        for item_2609 in var_2608 {
            #[allow(unused_mut)]
            let mut entry_2611 = list_2610.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2611, item_2609);
        }
        list_2610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("MaxResults");
    if let Some(var_2613) = &input.max_results {
        scope_2612.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2613).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("NextToken");
    if let Some(var_2615) = &input.next_token {
        scope_2614.string(var_2615);
    }
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("DryRun");
    if let Some(var_2617) = &input.dry_run {
        scope_2616.boolean(*var_2617);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("DryRun");
    if let Some(var_2619) = &input.dry_run {
        scope_2618.boolean(*var_2619);
    }
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("Filter");
    if let Some(var_2621) = &input.filters {
        let mut list_2623 = scope_2620.start_list(true, Some("Filter"));
        for item_2622 in var_2621 {
            #[allow(unused_mut)]
            let mut entry_2624 = list_2623.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2624, item_2622);
        }
        list_2623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("MaxResults");
    if let Some(var_2626) = &input.max_results {
        scope_2625.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("NextToken");
    if let Some(var_2628) = &input.next_token {
        scope_2627.string(var_2628);
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("PrefixListId");
    if let Some(var_2630) = &input.prefix_list_ids {
        let mut list_2632 = scope_2629.start_list(true, Some("item"));
        for item_2631 in var_2630 {
            #[allow(unused_mut)]
            let mut entry_2633 = list_2632.entry();
            entry_2633.string(item_2631);
        }
        list_2632.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("Filter");
    if let Some(var_2635) = &input.filters {
        let mut list_2637 = scope_2634.start_list(true, Some("Filter"));
        for item_2636 in var_2635 {
            #[allow(unused_mut)]
            let mut entry_2638 = list_2637.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2638, item_2636);
        }
        list_2637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("DryRun");
    if let Some(var_2640) = &input.dry_run {
        scope_2639.boolean(*var_2640);
    }
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("MaxResults");
    if let Some(var_2642) = &input.max_results {
        scope_2641.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2642).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("NextToken");
    if let Some(var_2644) = &input.next_token {
        scope_2643.string(var_2644);
    }
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("PublicIp");
    if let Some(var_2646) = &input.public_ips {
        let mut list_2648 = scope_2645.start_list(true, Some("item"));
        for item_2647 in var_2646 {
            #[allow(unused_mut)]
            let mut entry_2649 = list_2648.entry();
            entry_2649.string(item_2647);
        }
        list_2648.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2650 = writer.prefix("DryRun");
    if let Some(var_2651) = &input.dry_run {
        scope_2650.boolean(*var_2651);
    }
    #[allow(unused_mut)]
    let mut scope_2652 = writer.prefix("Filter");
    if let Some(var_2653) = &input.filter {
        let mut list_2655 = scope_2652.start_list(true, Some("Filter"));
        for item_2654 in var_2653 {
            #[allow(unused_mut)]
            let mut entry_2656 = list_2655.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2656, item_2654);
        }
        list_2655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("MaxResults");
    if let Some(var_2658) = &input.max_results {
        scope_2657.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2658).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("NatGatewayId");
    if let Some(var_2660) = &input.nat_gateway_ids {
        let mut list_2662 = scope_2659.start_list(true, Some("item"));
        for item_2661 in var_2660 {
            #[allow(unused_mut)]
            let mut entry_2663 = list_2662.entry();
            entry_2663.string(item_2661);
        }
        list_2662.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2664 = writer.prefix("NextToken");
    if let Some(var_2665) = &input.next_token {
        scope_2664.string(var_2665);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("Filter");
    if let Some(var_2667) = &input.filters {
        let mut list_2669 = scope_2666.start_list(true, Some("Filter"));
        for item_2668 in var_2667 {
            #[allow(unused_mut)]
            let mut entry_2670 = list_2669.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2670, item_2668);
        }
        list_2669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("DryRun");
    if let Some(var_2672) = &input.dry_run {
        scope_2671.boolean(*var_2672);
    }
    #[allow(unused_mut)]
    let mut scope_2673 = writer.prefix("NetworkAclId");
    if let Some(var_2674) = &input.network_acl_ids {
        let mut list_2676 = scope_2673.start_list(true, Some("item"));
        for item_2675 in var_2674 {
            #[allow(unused_mut)]
            let mut entry_2677 = list_2676.entry();
            entry_2677.string(item_2675);
        }
        list_2676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("NextToken");
    if let Some(var_2679) = &input.next_token {
        scope_2678.string(var_2679);
    }
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("MaxResults");
    if let Some(var_2681) = &input.max_results {
        scope_2680.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2681).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2683) = &input.network_insights_analysis_ids {
        let mut list_2685 = scope_2682.start_list(true, Some("item"));
        for item_2684 in var_2683 {
            #[allow(unused_mut)]
            let mut entry_2686 = list_2685.entry();
            entry_2686.string(item_2684);
        }
        list_2685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2688) = &input.network_insights_path_id {
        scope_2687.string(var_2688);
    }
    #[allow(unused_mut)]
    let mut scope_2689 = writer.prefix("AnalysisStartTime");
    if let Some(var_2690) = &input.analysis_start_time {
        scope_2689.instant(var_2690, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2691 = writer.prefix("AnalysisEndTime");
    if let Some(var_2692) = &input.analysis_end_time {
        scope_2691.instant(var_2692, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("Filter");
    if let Some(var_2694) = &input.filters {
        let mut list_2696 = scope_2693.start_list(true, Some("Filter"));
        for item_2695 in var_2694 {
            #[allow(unused_mut)]
            let mut entry_2697 = list_2696.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2697, item_2695);
        }
        list_2696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("MaxResults");
    if let Some(var_2699) = &input.max_results {
        scope_2698.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2699).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("DryRun");
    if let Some(var_2701) = &input.dry_run {
        scope_2700.boolean(*var_2701);
    }
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("NextToken");
    if let Some(var_2703) = &input.next_token {
        scope_2702.string(var_2703);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2705) = &input.network_insights_path_ids {
        let mut list_2707 = scope_2704.start_list(true, Some("item"));
        for item_2706 in var_2705 {
            #[allow(unused_mut)]
            let mut entry_2708 = list_2707.entry();
            entry_2708.string(item_2706);
        }
        list_2707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2709 = writer.prefix("Filter");
    if let Some(var_2710) = &input.filters {
        let mut list_2712 = scope_2709.start_list(true, Some("Filter"));
        for item_2711 in var_2710 {
            #[allow(unused_mut)]
            let mut entry_2713 = list_2712.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2713, item_2711);
        }
        list_2712.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2714 = writer.prefix("MaxResults");
    if let Some(var_2715) = &input.max_results {
        scope_2714.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2715).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("DryRun");
    if let Some(var_2717) = &input.dry_run {
        scope_2716.boolean(*var_2717);
    }
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("NextToken");
    if let Some(var_2719) = &input.next_token {
        scope_2718.string(var_2719);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("Attribute");
    if let Some(var_2721) = &input.attribute {
        scope_2720.string(var_2721.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("DryRun");
    if let Some(var_2723) = &input.dry_run {
        scope_2722.boolean(*var_2723);
    }
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2725) = &input.network_interface_id {
        scope_2724.string(var_2725);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2726 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2727) = &input.network_interface_permission_ids {
        let mut list_2729 = scope_2726.start_list(true, None);
        for item_2728 in var_2727 {
            #[allow(unused_mut)]
            let mut entry_2730 = list_2729.entry();
            entry_2730.string(item_2728);
        }
        list_2729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("Filter");
    if let Some(var_2732) = &input.filters {
        let mut list_2734 = scope_2731.start_list(true, Some("Filter"));
        for item_2733 in var_2732 {
            #[allow(unused_mut)]
            let mut entry_2735 = list_2734.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2735, item_2733);
        }
        list_2734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("NextToken");
    if let Some(var_2737) = &input.next_token {
        scope_2736.string(var_2737);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("MaxResults");
    if let Some(var_2739) = &input.max_results {
        scope_2738.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2739).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("Filter");
    if let Some(var_2741) = &input.filters {
        let mut list_2743 = scope_2740.start_list(true, Some("Filter"));
        for item_2742 in var_2741 {
            #[allow(unused_mut)]
            let mut entry_2744 = list_2743.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2744, item_2742);
        }
        list_2743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2745 = writer.prefix("DryRun");
    if let Some(var_2746) = &input.dry_run {
        scope_2745.boolean(*var_2746);
    }
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2748) = &input.network_interface_ids {
        let mut list_2750 = scope_2747.start_list(true, Some("item"));
        for item_2749 in var_2748 {
            #[allow(unused_mut)]
            let mut entry_2751 = list_2750.entry();
            entry_2751.string(item_2749);
        }
        list_2750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2752 = writer.prefix("NextToken");
    if let Some(var_2753) = &input.next_token {
        scope_2752.string(var_2753);
    }
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("MaxResults");
    if let Some(var_2755) = &input.max_results {
        scope_2754.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2755).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("Filter");
    if let Some(var_2757) = &input.filters {
        let mut list_2759 = scope_2756.start_list(true, Some("Filter"));
        for item_2758 in var_2757 {
            #[allow(unused_mut)]
            let mut entry_2760 = list_2759.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2760, item_2758);
        }
        list_2759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("DryRun");
    if let Some(var_2762) = &input.dry_run {
        scope_2761.boolean(*var_2762);
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("GroupName");
    if let Some(var_2764) = &input.group_names {
        let mut list_2766 = scope_2763.start_list(true, None);
        for item_2765 in var_2764 {
            #[allow(unused_mut)]
            let mut entry_2767 = list_2766.entry();
            entry_2767.string(item_2765);
        }
        list_2766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2768 = writer.prefix("GroupId");
    if let Some(var_2769) = &input.group_ids {
        let mut list_2771 = scope_2768.start_list(true, Some("GroupId"));
        for item_2770 in var_2769 {
            #[allow(unused_mut)]
            let mut entry_2772 = list_2771.entry();
            entry_2772.string(item_2770);
        }
        list_2771.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("DryRun");
    if let Some(var_2774) = &input.dry_run {
        scope_2773.boolean(*var_2774);
    }
    #[allow(unused_mut)]
    let mut scope_2775 = writer.prefix("Filter");
    if let Some(var_2776) = &input.filters {
        let mut list_2778 = scope_2775.start_list(true, Some("Filter"));
        for item_2777 in var_2776 {
            #[allow(unused_mut)]
            let mut entry_2779 = list_2778.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2779, item_2777);
        }
        list_2778.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2780 = writer.prefix("MaxResults");
    if let Some(var_2781) = &input.max_results {
        scope_2780.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("NextToken");
    if let Some(var_2783) = &input.next_token {
        scope_2782.string(var_2783);
    }
    #[allow(unused_mut)]
    let mut scope_2784 = writer.prefix("PrefixListId");
    if let Some(var_2785) = &input.prefix_list_ids {
        let mut list_2787 = scope_2784.start_list(true, Some("item"));
        for item_2786 in var_2785 {
            #[allow(unused_mut)]
            let mut entry_2788 = list_2787.entry();
            entry_2788.string(item_2786);
        }
        list_2787.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("DryRun");
    if let Some(var_2790) = &input.dry_run {
        scope_2789.boolean(*var_2790);
    }
    #[allow(unused_mut)]
    let mut scope_2791 = writer.prefix("Resource");
    if let Some(var_2792) = &input.resources {
        let mut list_2794 = scope_2791.start_list(true, Some("item"));
        for item_2793 in var_2792 {
            #[allow(unused_mut)]
            let mut entry_2795 = list_2794.entry();
            entry_2795.string(item_2793);
        }
        list_2794.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("MaxResults");
    if let Some(var_2797) = &input.max_results {
        scope_2796.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("NextToken");
    if let Some(var_2799) = &input.next_token {
        scope_2798.string(var_2799);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2800 = writer.prefix("PoolId");
    if let Some(var_2801) = &input.pool_ids {
        let mut list_2803 = scope_2800.start_list(true, Some("item"));
        for item_2802 in var_2801 {
            #[allow(unused_mut)]
            let mut entry_2804 = list_2803.entry();
            entry_2804.string(item_2802);
        }
        list_2803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2805 = writer.prefix("NextToken");
    if let Some(var_2806) = &input.next_token {
        scope_2805.string(var_2806);
    }
    #[allow(unused_mut)]
    let mut scope_2807 = writer.prefix("MaxResults");
    if let Some(var_2808) = &input.max_results {
        scope_2807.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2808).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2809 = writer.prefix("Filter");
    if let Some(var_2810) = &input.filters {
        let mut list_2812 = scope_2809.start_list(true, Some("Filter"));
        for item_2811 in var_2810 {
            #[allow(unused_mut)]
            let mut entry_2813 = list_2812.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2813, item_2811);
        }
        list_2812.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("Filter");
    if let Some(var_2815) = &input.filters {
        let mut list_2817 = scope_2814.start_list(true, Some("Filter"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2818, item_2816);
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("RegionName");
    if let Some(var_2820) = &input.region_names {
        let mut list_2822 = scope_2819.start_list(true, Some("RegionName"));
        for item_2821 in var_2820 {
            #[allow(unused_mut)]
            let mut entry_2823 = list_2822.entry();
            entry_2823.string(item_2821);
        }
        list_2822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("DryRun");
    if let Some(var_2825) = &input.dry_run {
        scope_2824.boolean(*var_2825);
    }
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("AllRegions");
    if let Some(var_2827) = &input.all_regions {
        scope_2826.boolean(*var_2827);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2828 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2829) = &input.replace_root_volume_task_ids {
        let mut list_2831 = scope_2828.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2830 in var_2829 {
            #[allow(unused_mut)]
            let mut entry_2832 = list_2831.entry();
            entry_2832.string(item_2830);
        }
        list_2831.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("Filter");
    if let Some(var_2834) = &input.filters {
        let mut list_2836 = scope_2833.start_list(true, Some("Filter"));
        for item_2835 in var_2834 {
            #[allow(unused_mut)]
            let mut entry_2837 = list_2836.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2837, item_2835);
        }
        list_2836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("MaxResults");
    if let Some(var_2839) = &input.max_results {
        scope_2838.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("NextToken");
    if let Some(var_2841) = &input.next_token {
        scope_2840.string(var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("DryRun");
    if let Some(var_2843) = &input.dry_run {
        scope_2842.boolean(*var_2843);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("Filter");
    if let Some(var_2845) = &input.filters {
        let mut list_2847 = scope_2844.start_list(true, Some("Filter"));
        for item_2846 in var_2845 {
            #[allow(unused_mut)]
            let mut entry_2848 = list_2847.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2848, item_2846);
        }
        list_2847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("OfferingClass");
    if let Some(var_2850) = &input.offering_class {
        scope_2849.string(var_2850.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("ReservedInstancesId");
    if let Some(var_2852) = &input.reserved_instances_ids {
        let mut list_2854 = scope_2851.start_list(true, Some("ReservedInstancesId"));
        for item_2853 in var_2852 {
            #[allow(unused_mut)]
            let mut entry_2855 = list_2854.entry();
            entry_2855.string(item_2853);
        }
        list_2854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("DryRun");
    if let Some(var_2857) = &input.dry_run {
        scope_2856.boolean(*var_2857);
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("OfferingType");
    if let Some(var_2859) = &input.offering_type {
        scope_2858.string(var_2859.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2860 = writer.prefix("Filter");
    if let Some(var_2861) = &input.filters {
        let mut list_2863 = scope_2860.start_list(true, Some("Filter"));
        for item_2862 in var_2861 {
            #[allow(unused_mut)]
            let mut entry_2864 = list_2863.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2864, item_2862);
        }
        list_2863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2865 = writer.prefix("ReservedInstancesId");
    if let Some(var_2866) = &input.reserved_instances_id {
        scope_2865.string(var_2866);
    }
    #[allow(unused_mut)]
    let mut scope_2867 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2868) = &input.reserved_instances_listing_id {
        scope_2867.string(var_2868);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2869 = writer.prefix("Filter");
    if let Some(var_2870) = &input.filters {
        let mut list_2872 = scope_2869.start_list(true, Some("Filter"));
        for item_2871 in var_2870 {
            #[allow(unused_mut)]
            let mut entry_2873 = list_2872.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2873, item_2871);
        }
        list_2872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2874 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2875) = &input.reserved_instances_modification_ids {
        let mut list_2877 = scope_2874.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2876 in var_2875 {
            #[allow(unused_mut)]
            let mut entry_2878 = list_2877.entry();
            entry_2878.string(item_2876);
        }
        list_2877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("NextToken");
    if let Some(var_2880) = &input.next_token {
        scope_2879.string(var_2880);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2881 = writer.prefix("AvailabilityZone");
    if let Some(var_2882) = &input.availability_zone {
        scope_2881.string(var_2882);
    }
    #[allow(unused_mut)]
    let mut scope_2883 = writer.prefix("Filter");
    if let Some(var_2884) = &input.filters {
        let mut list_2886 = scope_2883.start_list(true, Some("Filter"));
        for item_2885 in var_2884 {
            #[allow(unused_mut)]
            let mut entry_2887 = list_2886.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2887, item_2885);
        }
        list_2886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("IncludeMarketplace");
    if let Some(var_2889) = &input.include_marketplace {
        scope_2888.boolean(*var_2889);
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("InstanceType");
    if let Some(var_2891) = &input.instance_type {
        scope_2890.string(var_2891.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("MaxDuration");
    if let Some(var_2893) = &input.max_duration {
        scope_2892.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2893).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("MaxInstanceCount");
    if let Some(var_2895) = &input.max_instance_count {
        scope_2894.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2895).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("MinDuration");
    if let Some(var_2897) = &input.min_duration {
        scope_2896.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2897).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("OfferingClass");
    if let Some(var_2899) = &input.offering_class {
        scope_2898.string(var_2899.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("ProductDescription");
    if let Some(var_2901) = &input.product_description {
        scope_2900.string(var_2901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2902 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2903) = &input.reserved_instances_offering_ids {
        let mut list_2905 = scope_2902.start_list(true, None);
        for item_2904 in var_2903 {
            #[allow(unused_mut)]
            let mut entry_2906 = list_2905.entry();
            entry_2906.string(item_2904);
        }
        list_2905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("DryRun");
    if let Some(var_2908) = &input.dry_run {
        scope_2907.boolean(*var_2908);
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("InstanceTenancy");
    if let Some(var_2910) = &input.instance_tenancy {
        scope_2909.string(var_2910.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("MaxResults");
    if let Some(var_2912) = &input.max_results {
        scope_2911.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2912).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2913 = writer.prefix("NextToken");
    if let Some(var_2914) = &input.next_token {
        scope_2913.string(var_2914);
    }
    #[allow(unused_mut)]
    let mut scope_2915 = writer.prefix("OfferingType");
    if let Some(var_2916) = &input.offering_type {
        scope_2915.string(var_2916.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2917 = writer.prefix("Filter");
    if let Some(var_2918) = &input.filters {
        let mut list_2920 = scope_2917.start_list(true, Some("Filter"));
        for item_2919 in var_2918 {
            #[allow(unused_mut)]
            let mut entry_2921 = list_2920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2921, item_2919);
        }
        list_2920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("DryRun");
    if let Some(var_2923) = &input.dry_run {
        scope_2922.boolean(*var_2923);
    }
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("RouteTableId");
    if let Some(var_2925) = &input.route_table_ids {
        let mut list_2927 = scope_2924.start_list(true, Some("item"));
        for item_2926 in var_2925 {
            #[allow(unused_mut)]
            let mut entry_2928 = list_2927.entry();
            entry_2928.string(item_2926);
        }
        list_2927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("NextToken");
    if let Some(var_2930) = &input.next_token {
        scope_2929.string(var_2930);
    }
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("MaxResults");
    if let Some(var_2932) = &input.max_results {
        scope_2931.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2932).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("DryRun");
    if let Some(var_2934) = &input.dry_run {
        scope_2933.boolean(*var_2934);
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("Filter");
    if let Some(var_2936) = &input.filters {
        let mut list_2938 = scope_2935.start_list(true, Some("Filter"));
        for item_2937 in var_2936 {
            #[allow(unused_mut)]
            let mut entry_2939 = list_2938.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2939, item_2937);
        }
        list_2938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2940 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2941) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_2940, var_2941,
        );
    }
    #[allow(unused_mut)]
    let mut scope_2942 = writer.prefix("MaxResults");
    if let Some(var_2943) = &input.max_results {
        scope_2942.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2943).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2944 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2945) = &input.max_slot_duration_in_hours {
        scope_2944.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2945).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2946 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2947) = &input.min_slot_duration_in_hours {
        scope_2946.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2947).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2948 = writer.prefix("NextToken");
    if let Some(var_2949) = &input.next_token {
        scope_2948.string(var_2949);
    }
    #[allow(unused_mut)]
    let mut scope_2950 = writer.prefix("Recurrence");
    if let Some(var_2951) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_2950, var_2951,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2952 = writer.prefix("DryRun");
    if let Some(var_2953) = &input.dry_run {
        scope_2952.boolean(*var_2953);
    }
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("Filter");
    if let Some(var_2955) = &input.filters {
        let mut list_2957 = scope_2954.start_list(true, Some("Filter"));
        for item_2956 in var_2955 {
            #[allow(unused_mut)]
            let mut entry_2958 = list_2957.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2958, item_2956);
        }
        list_2957.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2959 = writer.prefix("MaxResults");
    if let Some(var_2960) = &input.max_results {
        scope_2959.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2960).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2961 = writer.prefix("NextToken");
    if let Some(var_2962) = &input.next_token {
        scope_2961.string(var_2962);
    }
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("ScheduledInstanceId");
    if let Some(var_2964) = &input.scheduled_instance_ids {
        let mut list_2966 = scope_2963.start_list(true, Some("ScheduledInstanceId"));
        for item_2965 in var_2964 {
            #[allow(unused_mut)]
            let mut entry_2967 = list_2966.entry();
            entry_2967.string(item_2965);
        }
        list_2966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2968 = writer.prefix("SlotStartTimeRange");
    if let Some(var_2969) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_2968, var_2969,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2970 = writer.prefix("DryRun");
    if let Some(var_2971) = &input.dry_run {
        scope_2970.boolean(*var_2971);
    }
    #[allow(unused_mut)]
    let mut scope_2972 = writer.prefix("GroupId");
    if let Some(var_2973) = &input.group_id {
        let mut list_2975 = scope_2972.start_list(true, Some("item"));
        for item_2974 in var_2973 {
            #[allow(unused_mut)]
            let mut entry_2976 = list_2975.entry();
            entry_2976.string(item_2974);
        }
        list_2975.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2977 = writer.prefix("Filter");
    if let Some(var_2978) = &input.filters {
        let mut list_2980 = scope_2977.start_list(true, Some("Filter"));
        for item_2979 in var_2978 {
            #[allow(unused_mut)]
            let mut entry_2981 = list_2980.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2981, item_2979);
        }
        list_2980.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_2983) = &input.security_group_rule_ids {
        let mut list_2985 = scope_2982.start_list(true, Some("item"));
        for item_2984 in var_2983 {
            #[allow(unused_mut)]
            let mut entry_2986 = list_2985.entry();
            entry_2986.string(item_2984);
        }
        list_2985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("DryRun");
    if let Some(var_2988) = &input.dry_run {
        scope_2987.boolean(*var_2988);
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("NextToken");
    if let Some(var_2990) = &input.next_token {
        scope_2989.string(var_2990);
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("MaxResults");
    if let Some(var_2992) = &input.max_results {
        scope_2991.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2992).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("Filter");
    if let Some(var_2994) = &input.filters {
        let mut list_2996 = scope_2993.start_list(true, Some("Filter"));
        for item_2995 in var_2994 {
            #[allow(unused_mut)]
            let mut entry_2997 = list_2996.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2997, item_2995);
        }
        list_2996.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2998 = writer.prefix("GroupId");
    if let Some(var_2999) = &input.group_ids {
        let mut list_3001 = scope_2998.start_list(true, Some("groupId"));
        for item_3000 in var_2999 {
            #[allow(unused_mut)]
            let mut entry_3002 = list_3001.entry();
            entry_3002.string(item_3000);
        }
        list_3001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("GroupName");
    if let Some(var_3004) = &input.group_names {
        let mut list_3006 = scope_3003.start_list(true, Some("GroupName"));
        for item_3005 in var_3004 {
            #[allow(unused_mut)]
            let mut entry_3007 = list_3006.entry();
            entry_3007.string(item_3005);
        }
        list_3006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("DryRun");
    if let Some(var_3009) = &input.dry_run {
        scope_3008.boolean(*var_3009);
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("NextToken");
    if let Some(var_3011) = &input.next_token {
        scope_3010.string(var_3011);
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("MaxResults");
    if let Some(var_3013) = &input.max_results {
        scope_3012.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3013).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("Attribute");
    if let Some(var_3015) = &input.attribute {
        scope_3014.string(var_3015.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3016 = writer.prefix("SnapshotId");
    if let Some(var_3017) = &input.snapshot_id {
        scope_3016.string(var_3017);
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("DryRun");
    if let Some(var_3019) = &input.dry_run {
        scope_3018.boolean(*var_3019);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("Filter");
    if let Some(var_3021) = &input.filters {
        let mut list_3023 = scope_3020.start_list(true, Some("Filter"));
        for item_3022 in var_3021 {
            #[allow(unused_mut)]
            let mut entry_3024 = list_3023.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3024, item_3022);
        }
        list_3023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("MaxResults");
    if let Some(var_3026) = &input.max_results {
        scope_3025.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3026).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("NextToken");
    if let Some(var_3028) = &input.next_token {
        scope_3027.string(var_3028);
    }
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("Owner");
    if let Some(var_3030) = &input.owner_ids {
        let mut list_3032 = scope_3029.start_list(true, Some("Owner"));
        for item_3031 in var_3030 {
            #[allow(unused_mut)]
            let mut entry_3033 = list_3032.entry();
            entry_3033.string(item_3031);
        }
        list_3032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("RestorableBy");
    if let Some(var_3035) = &input.restorable_by_user_ids {
        let mut list_3037 = scope_3034.start_list(true, None);
        for item_3036 in var_3035 {
            #[allow(unused_mut)]
            let mut entry_3038 = list_3037.entry();
            entry_3038.string(item_3036);
        }
        list_3037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("SnapshotId");
    if let Some(var_3040) = &input.snapshot_ids {
        let mut list_3042 = scope_3039.start_list(true, Some("SnapshotId"));
        for item_3041 in var_3040 {
            #[allow(unused_mut)]
            let mut entry_3043 = list_3042.entry();
            entry_3043.string(item_3041);
        }
        list_3042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("DryRun");
    if let Some(var_3045) = &input.dry_run {
        scope_3044.boolean(*var_3045);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("DryRun");
    if let Some(var_3047) = &input.dry_run {
        scope_3046.boolean(*var_3047);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("DryRun");
    if let Some(var_3049) = &input.dry_run {
        scope_3048.boolean(*var_3049);
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("MaxResults");
    if let Some(var_3051) = &input.max_results {
        scope_3050.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3051).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3052 = writer.prefix("NextToken");
    if let Some(var_3053) = &input.next_token {
        scope_3052.string(var_3053);
    }
    #[allow(unused_mut)]
    let mut scope_3054 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3055) = &input.spot_fleet_request_id {
        scope_3054.string(var_3055);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3056 = writer.prefix("DryRun");
    if let Some(var_3057) = &input.dry_run {
        scope_3056.boolean(*var_3057);
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("EventType");
    if let Some(var_3059) = &input.event_type {
        scope_3058.string(var_3059.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("MaxResults");
    if let Some(var_3061) = &input.max_results {
        scope_3060.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("NextToken");
    if let Some(var_3063) = &input.next_token {
        scope_3062.string(var_3063);
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3065) = &input.spot_fleet_request_id {
        scope_3064.string(var_3065);
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("StartTime");
    if let Some(var_3067) = &input.start_time {
        scope_3066.instant(var_3067, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("DryRun");
    if let Some(var_3069) = &input.dry_run {
        scope_3068.boolean(*var_3069);
    }
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("MaxResults");
    if let Some(var_3071) = &input.max_results {
        scope_3070.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3071).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("NextToken");
    if let Some(var_3073) = &input.next_token {
        scope_3072.string(var_3073);
    }
    #[allow(unused_mut)]
    let mut scope_3074 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3075) = &input.spot_fleet_request_ids {
        let mut list_3077 = scope_3074.start_list(true, Some("item"));
        for item_3076 in var_3075 {
            #[allow(unused_mut)]
            let mut entry_3078 = list_3077.entry();
            entry_3078.string(item_3076);
        }
        list_3077.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3079 = writer.prefix("Filter");
    if let Some(var_3080) = &input.filters {
        let mut list_3082 = scope_3079.start_list(true, Some("Filter"));
        for item_3081 in var_3080 {
            #[allow(unused_mut)]
            let mut entry_3083 = list_3082.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3083, item_3081);
        }
        list_3082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("DryRun");
    if let Some(var_3085) = &input.dry_run {
        scope_3084.boolean(*var_3085);
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3087) = &input.spot_instance_request_ids {
        let mut list_3089 = scope_3086.start_list(true, Some("SpotInstanceRequestId"));
        for item_3088 in var_3087 {
            #[allow(unused_mut)]
            let mut entry_3090 = list_3089.entry();
            entry_3090.string(item_3088);
        }
        list_3089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("NextToken");
    if let Some(var_3092) = &input.next_token {
        scope_3091.string(var_3092);
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("MaxResults");
    if let Some(var_3094) = &input.max_results {
        scope_3093.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3094).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("Filter");
    if let Some(var_3096) = &input.filters {
        let mut list_3098 = scope_3095.start_list(true, Some("Filter"));
        for item_3097 in var_3096 {
            #[allow(unused_mut)]
            let mut entry_3099 = list_3098.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3099, item_3097);
        }
        list_3098.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("AvailabilityZone");
    if let Some(var_3101) = &input.availability_zone {
        scope_3100.string(var_3101);
    }
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("DryRun");
    if let Some(var_3103) = &input.dry_run {
        scope_3102.boolean(*var_3103);
    }
    #[allow(unused_mut)]
    let mut scope_3104 = writer.prefix("EndTime");
    if let Some(var_3105) = &input.end_time {
        scope_3104.instant(var_3105, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3106 = writer.prefix("InstanceType");
    if let Some(var_3107) = &input.instance_types {
        let mut list_3109 = scope_3106.start_list(true, None);
        for item_3108 in var_3107 {
            #[allow(unused_mut)]
            let mut entry_3110 = list_3109.entry();
            entry_3110.string(item_3108.as_str());
        }
        list_3109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("MaxResults");
    if let Some(var_3112) = &input.max_results {
        scope_3111.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3112).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("NextToken");
    if let Some(var_3114) = &input.next_token {
        scope_3113.string(var_3114);
    }
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("ProductDescription");
    if let Some(var_3116) = &input.product_descriptions {
        let mut list_3118 = scope_3115.start_list(true, None);
        for item_3117 in var_3116 {
            #[allow(unused_mut)]
            let mut entry_3119 = list_3118.entry();
            entry_3119.string(item_3117);
        }
        list_3118.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3120 = writer.prefix("StartTime");
    if let Some(var_3121) = &input.start_time {
        scope_3120.instant(var_3121, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("DryRun");
    if let Some(var_3123) = &input.dry_run {
        scope_3122.boolean(*var_3123);
    }
    #[allow(unused_mut)]
    let mut scope_3124 = writer.prefix("MaxResults");
    if let Some(var_3125) = &input.max_results {
        scope_3124.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("NextToken");
    if let Some(var_3127) = &input.next_token {
        scope_3126.string(var_3127);
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("VpcId");
    if let Some(var_3129) = &input.vpc_id {
        scope_3128.string(var_3129);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("ImageId");
    if let Some(var_3131) = &input.image_ids {
        let mut list_3133 = scope_3130.start_list(true, Some("item"));
        for item_3132 in var_3131 {
            #[allow(unused_mut)]
            let mut entry_3134 = list_3133.entry();
            entry_3134.string(item_3132);
        }
        list_3133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("DryRun");
    if let Some(var_3136) = &input.dry_run {
        scope_3135.boolean(*var_3136);
    }
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("Filter");
    if let Some(var_3138) = &input.filters {
        let mut list_3140 = scope_3137.start_list(true, Some("Filter"));
        for item_3139 in var_3138 {
            #[allow(unused_mut)]
            let mut entry_3141 = list_3140.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3141, item_3139);
        }
        list_3140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("NextToken");
    if let Some(var_3143) = &input.next_token {
        scope_3142.string(var_3143);
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("MaxResults");
    if let Some(var_3145) = &input.max_results {
        scope_3144.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3145).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("Filter");
    if let Some(var_3147) = &input.filters {
        let mut list_3149 = scope_3146.start_list(true, Some("Filter"));
        for item_3148 in var_3147 {
            #[allow(unused_mut)]
            let mut entry_3150 = list_3149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3150, item_3148);
        }
        list_3149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("SubnetId");
    if let Some(var_3152) = &input.subnet_ids {
        let mut list_3154 = scope_3151.start_list(true, Some("SubnetId"));
        for item_3153 in var_3152 {
            #[allow(unused_mut)]
            let mut entry_3155 = list_3154.entry();
            entry_3155.string(item_3153);
        }
        list_3154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3156 = writer.prefix("DryRun");
    if let Some(var_3157) = &input.dry_run {
        scope_3156.boolean(*var_3157);
    }
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("NextToken");
    if let Some(var_3159) = &input.next_token {
        scope_3158.string(var_3159);
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("MaxResults");
    if let Some(var_3161) = &input.max_results {
        scope_3160.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3161).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("DryRun");
    if let Some(var_3163) = &input.dry_run {
        scope_3162.boolean(*var_3163);
    }
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("Filter");
    if let Some(var_3165) = &input.filters {
        let mut list_3167 = scope_3164.start_list(true, Some("Filter"));
        for item_3166 in var_3165 {
            #[allow(unused_mut)]
            let mut entry_3168 = list_3167.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3168, item_3166);
        }
        list_3167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("MaxResults");
    if let Some(var_3170) = &input.max_results {
        scope_3169.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("NextToken");
    if let Some(var_3172) = &input.next_token {
        scope_3171.string(var_3172);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3174) = &input.traffic_mirror_filter_ids {
        let mut list_3176 = scope_3173.start_list(true, Some("item"));
        for item_3175 in var_3174 {
            #[allow(unused_mut)]
            let mut entry_3177 = list_3176.entry();
            entry_3177.string(item_3175);
        }
        list_3176.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3178 = writer.prefix("DryRun");
    if let Some(var_3179) = &input.dry_run {
        scope_3178.boolean(*var_3179);
    }
    #[allow(unused_mut)]
    let mut scope_3180 = writer.prefix("Filter");
    if let Some(var_3181) = &input.filters {
        let mut list_3183 = scope_3180.start_list(true, Some("Filter"));
        for item_3182 in var_3181 {
            #[allow(unused_mut)]
            let mut entry_3184 = list_3183.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3184, item_3182);
        }
        list_3183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("MaxResults");
    if let Some(var_3186) = &input.max_results {
        scope_3185.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3187 = writer.prefix("NextToken");
    if let Some(var_3188) = &input.next_token {
        scope_3187.string(var_3188);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3189 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3190) = &input.traffic_mirror_session_ids {
        let mut list_3192 = scope_3189.start_list(true, Some("item"));
        for item_3191 in var_3190 {
            #[allow(unused_mut)]
            let mut entry_3193 = list_3192.entry();
            entry_3193.string(item_3191);
        }
        list_3192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("DryRun");
    if let Some(var_3195) = &input.dry_run {
        scope_3194.boolean(*var_3195);
    }
    #[allow(unused_mut)]
    let mut scope_3196 = writer.prefix("Filter");
    if let Some(var_3197) = &input.filters {
        let mut list_3199 = scope_3196.start_list(true, Some("Filter"));
        for item_3198 in var_3197 {
            #[allow(unused_mut)]
            let mut entry_3200 = list_3199.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3200, item_3198);
        }
        list_3199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3201 = writer.prefix("MaxResults");
    if let Some(var_3202) = &input.max_results {
        scope_3201.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3202).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("NextToken");
    if let Some(var_3204) = &input.next_token {
        scope_3203.string(var_3204);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3205 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3206) = &input.traffic_mirror_target_ids {
        let mut list_3208 = scope_3205.start_list(true, Some("item"));
        for item_3207 in var_3206 {
            #[allow(unused_mut)]
            let mut entry_3209 = list_3208.entry();
            entry_3209.string(item_3207);
        }
        list_3208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("DryRun");
    if let Some(var_3211) = &input.dry_run {
        scope_3210.boolean(*var_3211);
    }
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("Filter");
    if let Some(var_3213) = &input.filters {
        let mut list_3215 = scope_3212.start_list(true, Some("Filter"));
        for item_3214 in var_3213 {
            #[allow(unused_mut)]
            let mut entry_3216 = list_3215.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3216, item_3214);
        }
        list_3215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("MaxResults");
    if let Some(var_3218) = &input.max_results {
        scope_3217.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3218).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("NextToken");
    if let Some(var_3220) = &input.next_token {
        scope_3219.string(var_3220);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3222) = &input.transit_gateway_attachment_ids {
        let mut list_3224 = scope_3221.start_list(true, None);
        for item_3223 in var_3222 {
            #[allow(unused_mut)]
            let mut entry_3225 = list_3224.entry();
            entry_3225.string(item_3223);
        }
        list_3224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3226 = writer.prefix("Filter");
    if let Some(var_3227) = &input.filters {
        let mut list_3229 = scope_3226.start_list(true, Some("Filter"));
        for item_3228 in var_3227 {
            #[allow(unused_mut)]
            let mut entry_3230 = list_3229.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3230, item_3228);
        }
        list_3229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3231 = writer.prefix("MaxResults");
    if let Some(var_3232) = &input.max_results {
        scope_3231.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3233 = writer.prefix("NextToken");
    if let Some(var_3234) = &input.next_token {
        scope_3233.string(var_3234);
    }
    #[allow(unused_mut)]
    let mut scope_3235 = writer.prefix("DryRun");
    if let Some(var_3236) = &input.dry_run {
        scope_3235.boolean(*var_3236);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3237 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3238) = &input.transit_gateway_connect_peer_ids {
        let mut list_3240 = scope_3237.start_list(true, Some("item"));
        for item_3239 in var_3238 {
            #[allow(unused_mut)]
            let mut entry_3241 = list_3240.entry();
            entry_3241.string(item_3239);
        }
        list_3240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("Filter");
    if let Some(var_3243) = &input.filters {
        let mut list_3245 = scope_3242.start_list(true, Some("Filter"));
        for item_3244 in var_3243 {
            #[allow(unused_mut)]
            let mut entry_3246 = list_3245.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3246, item_3244);
        }
        list_3245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("MaxResults");
    if let Some(var_3248) = &input.max_results {
        scope_3247.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3248).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("NextToken");
    if let Some(var_3250) = &input.next_token {
        scope_3249.string(var_3250);
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("DryRun");
    if let Some(var_3252) = &input.dry_run {
        scope_3251.boolean(*var_3252);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3254) = &input.transit_gateway_attachment_ids {
        let mut list_3256 = scope_3253.start_list(true, None);
        for item_3255 in var_3254 {
            #[allow(unused_mut)]
            let mut entry_3257 = list_3256.entry();
            entry_3257.string(item_3255);
        }
        list_3256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3258 = writer.prefix("Filter");
    if let Some(var_3259) = &input.filters {
        let mut list_3261 = scope_3258.start_list(true, Some("Filter"));
        for item_3260 in var_3259 {
            #[allow(unused_mut)]
            let mut entry_3262 = list_3261.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3262, item_3260);
        }
        list_3261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("MaxResults");
    if let Some(var_3264) = &input.max_results {
        scope_3263.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3264).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3265 = writer.prefix("NextToken");
    if let Some(var_3266) = &input.next_token {
        scope_3265.string(var_3266);
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("DryRun");
    if let Some(var_3268) = &input.dry_run {
        scope_3267.boolean(*var_3268);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3269 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3270) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3272 = scope_3269.start_list(true, Some("item"));
        for item_3271 in var_3270 {
            #[allow(unused_mut)]
            let mut entry_3273 = list_3272.entry();
            entry_3273.string(item_3271);
        }
        list_3272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3274 = writer.prefix("Filter");
    if let Some(var_3275) = &input.filters {
        let mut list_3277 = scope_3274.start_list(true, Some("Filter"));
        for item_3276 in var_3275 {
            #[allow(unused_mut)]
            let mut entry_3278 = list_3277.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3278, item_3276);
        }
        list_3277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("MaxResults");
    if let Some(var_3280) = &input.max_results {
        scope_3279.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("NextToken");
    if let Some(var_3282) = &input.next_token {
        scope_3281.string(var_3282);
    }
    #[allow(unused_mut)]
    let mut scope_3283 = writer.prefix("DryRun");
    if let Some(var_3284) = &input.dry_run {
        scope_3283.boolean(*var_3284);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3285 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3286) = &input.transit_gateway_attachment_ids {
        let mut list_3288 = scope_3285.start_list(true, None);
        for item_3287 in var_3286 {
            #[allow(unused_mut)]
            let mut entry_3289 = list_3288.entry();
            entry_3289.string(item_3287);
        }
        list_3288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("Filter");
    if let Some(var_3291) = &input.filters {
        let mut list_3293 = scope_3290.start_list(true, Some("Filter"));
        for item_3292 in var_3291 {
            #[allow(unused_mut)]
            let mut entry_3294 = list_3293.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3294, item_3292);
        }
        list_3293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("MaxResults");
    if let Some(var_3296) = &input.max_results {
        scope_3295.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("NextToken");
    if let Some(var_3298) = &input.next_token {
        scope_3297.string(var_3298);
    }
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("DryRun");
    if let Some(var_3300) = &input.dry_run {
        scope_3299.boolean(*var_3300);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3302) = &input.transit_gateway_route_table_ids {
        let mut list_3304 = scope_3301.start_list(true, Some("item"));
        for item_3303 in var_3302 {
            #[allow(unused_mut)]
            let mut entry_3305 = list_3304.entry();
            entry_3305.string(item_3303);
        }
        list_3304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3306 = writer.prefix("Filter");
    if let Some(var_3307) = &input.filters {
        let mut list_3309 = scope_3306.start_list(true, Some("Filter"));
        for item_3308 in var_3307 {
            #[allow(unused_mut)]
            let mut entry_3310 = list_3309.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3310, item_3308);
        }
        list_3309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3311 = writer.prefix("MaxResults");
    if let Some(var_3312) = &input.max_results {
        scope_3311.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("NextToken");
    if let Some(var_3314) = &input.next_token {
        scope_3313.string(var_3314);
    }
    #[allow(unused_mut)]
    let mut scope_3315 = writer.prefix("DryRun");
    if let Some(var_3316) = &input.dry_run {
        scope_3315.boolean(*var_3316);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3317 = writer.prefix("TransitGatewayIds");
    if let Some(var_3318) = &input.transit_gateway_ids {
        let mut list_3320 = scope_3317.start_list(true, Some("item"));
        for item_3319 in var_3318 {
            #[allow(unused_mut)]
            let mut entry_3321 = list_3320.entry();
            entry_3321.string(item_3319);
        }
        list_3320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3322 = writer.prefix("Filter");
    if let Some(var_3323) = &input.filters {
        let mut list_3325 = scope_3322.start_list(true, Some("Filter"));
        for item_3324 in var_3323 {
            #[allow(unused_mut)]
            let mut entry_3326 = list_3325.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3326, item_3324);
        }
        list_3325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3327 = writer.prefix("MaxResults");
    if let Some(var_3328) = &input.max_results {
        scope_3327.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("NextToken");
    if let Some(var_3330) = &input.next_token {
        scope_3329.string(var_3330);
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("DryRun");
    if let Some(var_3332) = &input.dry_run {
        scope_3331.boolean(*var_3332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3334) = &input.transit_gateway_attachment_ids {
        let mut list_3336 = scope_3333.start_list(true, None);
        for item_3335 in var_3334 {
            #[allow(unused_mut)]
            let mut entry_3337 = list_3336.entry();
            entry_3337.string(item_3335);
        }
        list_3336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3338 = writer.prefix("Filter");
    if let Some(var_3339) = &input.filters {
        let mut list_3341 = scope_3338.start_list(true, Some("Filter"));
        for item_3340 in var_3339 {
            #[allow(unused_mut)]
            let mut entry_3342 = list_3341.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3342, item_3340);
        }
        list_3341.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("MaxResults");
    if let Some(var_3344) = &input.max_results {
        scope_3343.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("NextToken");
    if let Some(var_3346) = &input.next_token {
        scope_3345.string(var_3346);
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("DryRun");
    if let Some(var_3348) = &input.dry_run {
        scope_3347.boolean(*var_3348);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3349 = writer.prefix("AssociationId");
    if let Some(var_3350) = &input.association_ids {
        let mut list_3352 = scope_3349.start_list(true, Some("item"));
        for item_3351 in var_3350 {
            #[allow(unused_mut)]
            let mut entry_3353 = list_3352.entry();
            entry_3353.string(item_3351);
        }
        list_3352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("DryRun");
    if let Some(var_3355) = &input.dry_run {
        scope_3354.boolean(*var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("Filter");
    if let Some(var_3357) = &input.filters {
        let mut list_3359 = scope_3356.start_list(true, Some("Filter"));
        for item_3358 in var_3357 {
            #[allow(unused_mut)]
            let mut entry_3360 = list_3359.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3360, item_3358);
        }
        list_3359.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3361 = writer.prefix("NextToken");
    if let Some(var_3362) = &input.next_token {
        scope_3361.string(var_3362);
    }
    #[allow(unused_mut)]
    let mut scope_3363 = writer.prefix("MaxResults");
    if let Some(var_3364) = &input.max_results {
        scope_3363.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3364).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3365 = writer.prefix("Attribute");
    if let Some(var_3366) = &input.attribute {
        scope_3365.string(var_3366.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3367 = writer.prefix("VolumeId");
    if let Some(var_3368) = &input.volume_id {
        scope_3367.string(var_3368);
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("DryRun");
    if let Some(var_3370) = &input.dry_run {
        scope_3369.boolean(*var_3370);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("Filter");
    if let Some(var_3372) = &input.filters {
        let mut list_3374 = scope_3371.start_list(true, Some("Filter"));
        for item_3373 in var_3372 {
            #[allow(unused_mut)]
            let mut entry_3375 = list_3374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3375, item_3373);
        }
        list_3374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("VolumeId");
    if let Some(var_3377) = &input.volume_ids {
        let mut list_3379 = scope_3376.start_list(true, Some("VolumeId"));
        for item_3378 in var_3377 {
            #[allow(unused_mut)]
            let mut entry_3380 = list_3379.entry();
            entry_3380.string(item_3378);
        }
        list_3379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3381 = writer.prefix("DryRun");
    if let Some(var_3382) = &input.dry_run {
        scope_3381.boolean(*var_3382);
    }
    #[allow(unused_mut)]
    let mut scope_3383 = writer.prefix("MaxResults");
    if let Some(var_3384) = &input.max_results {
        scope_3383.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("NextToken");
    if let Some(var_3386) = &input.next_token {
        scope_3385.string(var_3386);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("DryRun");
    if let Some(var_3388) = &input.dry_run {
        scope_3387.boolean(*var_3388);
    }
    #[allow(unused_mut)]
    let mut scope_3389 = writer.prefix("VolumeId");
    if let Some(var_3390) = &input.volume_ids {
        let mut list_3392 = scope_3389.start_list(true, Some("VolumeId"));
        for item_3391 in var_3390 {
            #[allow(unused_mut)]
            let mut entry_3393 = list_3392.entry();
            entry_3393.string(item_3391);
        }
        list_3392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("Filter");
    if let Some(var_3395) = &input.filters {
        let mut list_3397 = scope_3394.start_list(true, Some("Filter"));
        for item_3396 in var_3395 {
            #[allow(unused_mut)]
            let mut entry_3398 = list_3397.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3398, item_3396);
        }
        list_3397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("NextToken");
    if let Some(var_3400) = &input.next_token {
        scope_3399.string(var_3400);
    }
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("MaxResults");
    if let Some(var_3402) = &input.max_results {
        scope_3401.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3402).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("Filter");
    if let Some(var_3404) = &input.filters {
        let mut list_3406 = scope_3403.start_list(true, Some("Filter"));
        for item_3405 in var_3404 {
            #[allow(unused_mut)]
            let mut entry_3407 = list_3406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3407, item_3405);
        }
        list_3406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("MaxResults");
    if let Some(var_3409) = &input.max_results {
        scope_3408.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("NextToken");
    if let Some(var_3411) = &input.next_token {
        scope_3410.string(var_3411);
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("VolumeId");
    if let Some(var_3413) = &input.volume_ids {
        let mut list_3415 = scope_3412.start_list(true, Some("VolumeId"));
        for item_3414 in var_3413 {
            #[allow(unused_mut)]
            let mut entry_3416 = list_3415.entry();
            entry_3416.string(item_3414);
        }
        list_3415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("DryRun");
    if let Some(var_3418) = &input.dry_run {
        scope_3417.boolean(*var_3418);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("Attribute");
    if let Some(var_3420) = &input.attribute {
        scope_3419.string(var_3420.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("VpcId");
    if let Some(var_3422) = &input.vpc_id {
        scope_3421.string(var_3422);
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("DryRun");
    if let Some(var_3424) = &input.dry_run {
        scope_3423.boolean(*var_3424);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("Filter");
    if let Some(var_3426) = &input.filters {
        let mut list_3428 = scope_3425.start_list(true, Some("Filter"));
        for item_3427 in var_3426 {
            #[allow(unused_mut)]
            let mut entry_3429 = list_3428.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3429, item_3427);
        }
        list_3428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("DryRun");
    if let Some(var_3431) = &input.dry_run {
        scope_3430.boolean(*var_3431);
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("VpcId");
    if let Some(var_3433) = &input.vpc_ids {
        let mut list_3435 = scope_3432.start_list(true, Some("VpcId"));
        for item_3434 in var_3433 {
            #[allow(unused_mut)]
            let mut entry_3436 = list_3435.entry();
            entry_3436.string(item_3434);
        }
        list_3435.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3437 = writer.prefix("MaxResults");
    if let Some(var_3438) = &input.max_results {
        scope_3437.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3439 = writer.prefix("NextToken");
    if let Some(var_3440) = &input.next_token {
        scope_3439.string(var_3440);
    }
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("VpcIds");
    if let Some(var_3442) = &input.vpc_ids {
        let mut list_3444 = scope_3441.start_list(true, Some("VpcId"));
        for item_3443 in var_3442 {
            #[allow(unused_mut)]
            let mut entry_3445 = list_3444.entry();
            entry_3445.string(item_3443);
        }
        list_3444.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("DryRun");
    if let Some(var_3447) = &input.dry_run {
        scope_3446.boolean(*var_3447);
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3449) = &input.connection_notification_id {
        scope_3448.string(var_3449);
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("Filter");
    if let Some(var_3451) = &input.filters {
        let mut list_3453 = scope_3450.start_list(true, Some("Filter"));
        for item_3452 in var_3451 {
            #[allow(unused_mut)]
            let mut entry_3454 = list_3453.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3454, item_3452);
        }
        list_3453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("MaxResults");
    if let Some(var_3456) = &input.max_results {
        scope_3455.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("NextToken");
    if let Some(var_3458) = &input.next_token {
        scope_3457.string(var_3458);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("DryRun");
    if let Some(var_3460) = &input.dry_run {
        scope_3459.boolean(*var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("Filter");
    if let Some(var_3462) = &input.filters {
        let mut list_3464 = scope_3461.start_list(true, Some("Filter"));
        for item_3463 in var_3462 {
            #[allow(unused_mut)]
            let mut entry_3465 = list_3464.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3465, item_3463);
        }
        list_3464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("MaxResults");
    if let Some(var_3467) = &input.max_results {
        scope_3466.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("NextToken");
    if let Some(var_3469) = &input.next_token {
        scope_3468.string(var_3469);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("DryRun");
    if let Some(var_3471) = &input.dry_run {
        scope_3470.boolean(*var_3471);
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("VpcEndpointId");
    if let Some(var_3473) = &input.vpc_endpoint_ids {
        let mut list_3475 = scope_3472.start_list(true, Some("item"));
        for item_3474 in var_3473 {
            #[allow(unused_mut)]
            let mut entry_3476 = list_3475.entry();
            entry_3476.string(item_3474);
        }
        list_3475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("Filter");
    if let Some(var_3478) = &input.filters {
        let mut list_3480 = scope_3477.start_list(true, Some("Filter"));
        for item_3479 in var_3478 {
            #[allow(unused_mut)]
            let mut entry_3481 = list_3480.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3481, item_3479);
        }
        list_3480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("MaxResults");
    if let Some(var_3483) = &input.max_results {
        scope_3482.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("NextToken");
    if let Some(var_3485) = &input.next_token {
        scope_3484.string(var_3485);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("DryRun");
    if let Some(var_3487) = &input.dry_run {
        scope_3486.boolean(*var_3487);
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("ServiceId");
    if let Some(var_3489) = &input.service_ids {
        let mut list_3491 = scope_3488.start_list(true, Some("item"));
        for item_3490 in var_3489 {
            #[allow(unused_mut)]
            let mut entry_3492 = list_3491.entry();
            entry_3492.string(item_3490);
        }
        list_3491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3493 = writer.prefix("Filter");
    if let Some(var_3494) = &input.filters {
        let mut list_3496 = scope_3493.start_list(true, Some("Filter"));
        for item_3495 in var_3494 {
            #[allow(unused_mut)]
            let mut entry_3497 = list_3496.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3497, item_3495);
        }
        list_3496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("MaxResults");
    if let Some(var_3499) = &input.max_results {
        scope_3498.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3499).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("NextToken");
    if let Some(var_3501) = &input.next_token {
        scope_3500.string(var_3501);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("DryRun");
    if let Some(var_3503) = &input.dry_run {
        scope_3502.boolean(*var_3503);
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("ServiceId");
    if let Some(var_3505) = &input.service_id {
        scope_3504.string(var_3505);
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("Filter");
    if let Some(var_3507) = &input.filters {
        let mut list_3509 = scope_3506.start_list(true, Some("Filter"));
        for item_3508 in var_3507 {
            #[allow(unused_mut)]
            let mut entry_3510 = list_3509.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3510, item_3508);
        }
        list_3509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("MaxResults");
    if let Some(var_3512) = &input.max_results {
        scope_3511.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("NextToken");
    if let Some(var_3514) = &input.next_token {
        scope_3513.string(var_3514);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("DryRun");
    if let Some(var_3516) = &input.dry_run {
        scope_3515.boolean(*var_3516);
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("ServiceName");
    if let Some(var_3518) = &input.service_names {
        let mut list_3520 = scope_3517.start_list(true, Some("item"));
        for item_3519 in var_3518 {
            #[allow(unused_mut)]
            let mut entry_3521 = list_3520.entry();
            entry_3521.string(item_3519);
        }
        list_3520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("Filter");
    if let Some(var_3523) = &input.filters {
        let mut list_3525 = scope_3522.start_list(true, Some("Filter"));
        for item_3524 in var_3523 {
            #[allow(unused_mut)]
            let mut entry_3526 = list_3525.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3526, item_3524);
        }
        list_3525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3527 = writer.prefix("MaxResults");
    if let Some(var_3528) = &input.max_results {
        scope_3527.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3528).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3529 = writer.prefix("NextToken");
    if let Some(var_3530) = &input.next_token {
        scope_3529.string(var_3530);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("Filter");
    if let Some(var_3532) = &input.filters {
        let mut list_3534 = scope_3531.start_list(true, Some("Filter"));
        for item_3533 in var_3532 {
            #[allow(unused_mut)]
            let mut entry_3535 = list_3534.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3535, item_3533);
        }
        list_3534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3536 = writer.prefix("DryRun");
    if let Some(var_3537) = &input.dry_run {
        scope_3536.boolean(*var_3537);
    }
    #[allow(unused_mut)]
    let mut scope_3538 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3539) = &input.vpc_peering_connection_ids {
        let mut list_3541 = scope_3538.start_list(true, Some("item"));
        for item_3540 in var_3539 {
            #[allow(unused_mut)]
            let mut entry_3542 = list_3541.entry();
            entry_3542.string(item_3540);
        }
        list_3541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3543 = writer.prefix("NextToken");
    if let Some(var_3544) = &input.next_token {
        scope_3543.string(var_3544);
    }
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("MaxResults");
    if let Some(var_3546) = &input.max_results {
        scope_3545.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3546).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("Filter");
    if let Some(var_3548) = &input.filters {
        let mut list_3550 = scope_3547.start_list(true, Some("Filter"));
        for item_3549 in var_3548 {
            #[allow(unused_mut)]
            let mut entry_3551 = list_3550.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3551, item_3549);
        }
        list_3550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3552 = writer.prefix("VpcId");
    if let Some(var_3553) = &input.vpc_ids {
        let mut list_3555 = scope_3552.start_list(true, Some("VpcId"));
        for item_3554 in var_3553 {
            #[allow(unused_mut)]
            let mut entry_3556 = list_3555.entry();
            entry_3556.string(item_3554);
        }
        list_3555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("DryRun");
    if let Some(var_3558) = &input.dry_run {
        scope_3557.boolean(*var_3558);
    }
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("NextToken");
    if let Some(var_3560) = &input.next_token {
        scope_3559.string(var_3560);
    }
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("MaxResults");
    if let Some(var_3562) = &input.max_results {
        scope_3561.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3562).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3563 = writer.prefix("Filter");
    if let Some(var_3564) = &input.filters {
        let mut list_3566 = scope_3563.start_list(true, Some("Filter"));
        for item_3565 in var_3564 {
            #[allow(unused_mut)]
            let mut entry_3567 = list_3566.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3567, item_3565);
        }
        list_3566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3568 = writer.prefix("VpnConnectionId");
    if let Some(var_3569) = &input.vpn_connection_ids {
        let mut list_3571 = scope_3568.start_list(true, Some("VpnConnectionId"));
        for item_3570 in var_3569 {
            #[allow(unused_mut)]
            let mut entry_3572 = list_3571.entry();
            entry_3572.string(item_3570);
        }
        list_3571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("DryRun");
    if let Some(var_3574) = &input.dry_run {
        scope_3573.boolean(*var_3574);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("Filter");
    if let Some(var_3576) = &input.filters {
        let mut list_3578 = scope_3575.start_list(true, Some("Filter"));
        for item_3577 in var_3576 {
            #[allow(unused_mut)]
            let mut entry_3579 = list_3578.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3579, item_3577);
        }
        list_3578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("VpnGatewayId");
    if let Some(var_3581) = &input.vpn_gateway_ids {
        let mut list_3583 = scope_3580.start_list(true, Some("VpnGatewayId"));
        for item_3582 in var_3581 {
            #[allow(unused_mut)]
            let mut entry_3584 = list_3583.entry();
            entry_3584.string(item_3582);
        }
        list_3583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("DryRun");
    if let Some(var_3586) = &input.dry_run {
        scope_3585.boolean(*var_3586);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("DryRun");
    if let Some(var_3588) = &input.dry_run {
        scope_3587.boolean(*var_3588);
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("InstanceId");
    if let Some(var_3590) = &input.instance_id {
        scope_3589.string(var_3590);
    }
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("VpcId");
    if let Some(var_3592) = &input.vpc_id {
        scope_3591.string(var_3592);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3593 = writer.prefix("DryRun");
    if let Some(var_3594) = &input.dry_run {
        scope_3593.boolean(*var_3594);
    }
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("InternetGatewayId");
    if let Some(var_3596) = &input.internet_gateway_id {
        scope_3595.string(var_3596);
    }
    #[allow(unused_mut)]
    let mut scope_3597 = writer.prefix("VpcId");
    if let Some(var_3598) = &input.vpc_id {
        scope_3597.string(var_3598);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("AttachmentId");
    if let Some(var_3600) = &input.attachment_id {
        scope_3599.string(var_3600);
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("DryRun");
    if let Some(var_3602) = &input.dry_run {
        scope_3601.boolean(*var_3602);
    }
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("Force");
    if let Some(var_3604) = &input.force {
        scope_3603.boolean(*var_3604);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("Device");
    if let Some(var_3606) = &input.device {
        scope_3605.string(var_3606);
    }
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("Force");
    if let Some(var_3608) = &input.force {
        scope_3607.boolean(*var_3608);
    }
    #[allow(unused_mut)]
    let mut scope_3609 = writer.prefix("InstanceId");
    if let Some(var_3610) = &input.instance_id {
        scope_3609.string(var_3610);
    }
    #[allow(unused_mut)]
    let mut scope_3611 = writer.prefix("VolumeId");
    if let Some(var_3612) = &input.volume_id {
        scope_3611.string(var_3612);
    }
    #[allow(unused_mut)]
    let mut scope_3613 = writer.prefix("DryRun");
    if let Some(var_3614) = &input.dry_run {
        scope_3613.boolean(*var_3614);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("VpcId");
    if let Some(var_3616) = &input.vpc_id {
        scope_3615.string(var_3616);
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("VpnGatewayId");
    if let Some(var_3618) = &input.vpn_gateway_id {
        scope_3617.string(var_3618);
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("DryRun");
    if let Some(var_3620) = &input.dry_run {
        scope_3619.boolean(*var_3620);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("DryRun");
    if let Some(var_3622) = &input.dry_run {
        scope_3621.boolean(*var_3622);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("AvailabilityZone");
    if let Some(var_3624) = &input.availability_zones {
        let mut list_3626 = scope_3623.start_list(true, Some("AvailabilityZone"));
        for item_3625 in var_3624 {
            #[allow(unused_mut)]
            let mut entry_3627 = list_3626.entry();
            entry_3627.string(item_3625);
        }
        list_3626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3628 = writer.prefix("SourceSnapshotId");
    if let Some(var_3629) = &input.source_snapshot_ids {
        let mut list_3631 = scope_3628.start_list(true, Some("SnapshotId"));
        for item_3630 in var_3629 {
            #[allow(unused_mut)]
            let mut entry_3632 = list_3631.entry();
            entry_3632.string(item_3630);
        }
        list_3631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("DryRun");
    if let Some(var_3634) = &input.dry_run {
        scope_3633.boolean(*var_3634);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3635 = writer.prefix("ImageId");
    if let Some(var_3636) = &input.image_id {
        scope_3635.string(var_3636);
    }
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("DryRun");
    if let Some(var_3638) = &input.dry_run {
        scope_3637.boolean(*var_3638);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("DryRun");
    if let Some(var_3640) = &input.dry_run {
        scope_3639.boolean(*var_3640);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3642) = &input.transit_gateway_route_table_id {
        scope_3641.string(var_3642);
    }
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3644) = &input.transit_gateway_attachment_id {
        scope_3643.string(var_3644);
    }
    #[allow(unused_mut)]
    let mut scope_3645 = writer.prefix("DryRun");
    if let Some(var_3646) = &input.dry_run {
        scope_3645.boolean(*var_3646);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3647 = writer.prefix("GatewayId");
    if let Some(var_3648) = &input.gateway_id {
        scope_3647.string(var_3648);
    }
    #[allow(unused_mut)]
    let mut scope_3649 = writer.prefix("RouteTableId");
    if let Some(var_3650) = &input.route_table_id {
        scope_3649.string(var_3650);
    }
    #[allow(unused_mut)]
    let mut scope_3651 = writer.prefix("DryRun");
    if let Some(var_3652) = &input.dry_run {
        scope_3651.boolean(*var_3652);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("DryRun");
    if let Some(var_3654) = &input.dry_run {
        scope_3653.boolean(*var_3654);
    }
    #[allow(unused_mut)]
    let mut scope_3655 = writer.prefix("VpcId");
    if let Some(var_3656) = &input.vpc_id {
        scope_3655.string(var_3656);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3657 = writer.prefix("VpcId");
    if let Some(var_3658) = &input.vpc_id {
        scope_3657.string(var_3658);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("AssociationId");
    if let Some(var_3660) = &input.association_id {
        scope_3659.string(var_3660);
    }
    #[allow(unused_mut)]
    let mut scope_3661 = writer.prefix("PublicIp");
    if let Some(var_3662) = &input.public_ip {
        scope_3661.string(var_3662);
    }
    #[allow(unused_mut)]
    let mut scope_3663 = writer.prefix("DryRun");
    if let Some(var_3664) = &input.dry_run {
        scope_3663.boolean(*var_3664);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3665 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3666) = &input.client_vpn_endpoint_id {
        scope_3665.string(var_3666);
    }
    #[allow(unused_mut)]
    let mut scope_3667 = writer.prefix("AssociationId");
    if let Some(var_3668) = &input.association_id {
        scope_3667.string(var_3668);
    }
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("DryRun");
    if let Some(var_3670) = &input.dry_run {
        scope_3669.boolean(*var_3670);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3671 = writer.prefix("CertificateArn");
    if let Some(var_3672) = &input.certificate_arn {
        scope_3671.string(var_3672);
    }
    #[allow(unused_mut)]
    let mut scope_3673 = writer.prefix("RoleArn");
    if let Some(var_3674) = &input.role_arn {
        scope_3673.string(var_3674);
    }
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("DryRun");
    if let Some(var_3676) = &input.dry_run {
        scope_3675.boolean(*var_3676);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3677 = writer.prefix("AssociationId");
    if let Some(var_3678) = &input.association_id {
        scope_3677.string(var_3678);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("DryRun");
    if let Some(var_3680) = &input.dry_run {
        scope_3679.boolean(*var_3680);
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("InstanceEventWindowId");
    if let Some(var_3682) = &input.instance_event_window_id {
        scope_3681.string(var_3682);
    }
    #[allow(unused_mut)]
    let mut scope_3683 = writer.prefix("AssociationTarget");
    if let Some(var_3684) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_3683, var_3684);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("AssociationId");
    if let Some(var_3686) = &input.association_id {
        scope_3685.string(var_3686);
    }
    #[allow(unused_mut)]
    let mut scope_3687 = writer.prefix("DryRun");
    if let Some(var_3688) = &input.dry_run {
        scope_3687.boolean(*var_3688);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3689 = writer.prefix("AssociationId");
    if let Some(var_3690) = &input.association_id {
        scope_3689.string(var_3690);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3691 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3692) = &input.transit_gateway_multicast_domain_id {
        scope_3691.string(var_3692);
    }
    #[allow(unused_mut)]
    let mut scope_3693 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3694) = &input.transit_gateway_attachment_id {
        scope_3693.string(var_3694);
    }
    #[allow(unused_mut)]
    let mut scope_3695 = writer.prefix("SubnetIds");
    if let Some(var_3696) = &input.subnet_ids {
        let mut list_3698 = scope_3695.start_list(true, Some("item"));
        for item_3697 in var_3696 {
            #[allow(unused_mut)]
            let mut entry_3699 = list_3698.entry();
            entry_3699.string(item_3697);
        }
        list_3698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("DryRun");
    if let Some(var_3701) = &input.dry_run {
        scope_3700.boolean(*var_3701);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3703) = &input.transit_gateway_route_table_id {
        scope_3702.string(var_3703);
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3705) = &input.transit_gateway_attachment_id {
        scope_3704.string(var_3705);
    }
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("DryRun");
    if let Some(var_3707) = &input.dry_run {
        scope_3706.boolean(*var_3707);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("AssociationId");
    if let Some(var_3709) = &input.association_id {
        scope_3708.string(var_3709);
    }
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("ClientToken");
    if let Some(var_3711) = &input.client_token {
        scope_3710.string(var_3711);
    }
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("DryRun");
    if let Some(var_3713) = &input.dry_run {
        scope_3712.boolean(*var_3713);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("AssociationId");
    if let Some(var_3715) = &input.association_id {
        scope_3714.string(var_3715);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("DryRun");
    if let Some(var_3717) = &input.dry_run {
        scope_3716.boolean(*var_3717);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("AvailabilityZone");
    if let Some(var_3719) = &input.availability_zones {
        let mut list_3721 = scope_3718.start_list(true, Some("AvailabilityZone"));
        for item_3720 in var_3719 {
            #[allow(unused_mut)]
            let mut entry_3722 = list_3721.entry();
            entry_3722.string(item_3720);
        }
        list_3721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("SourceSnapshotId");
    if let Some(var_3724) = &input.source_snapshot_ids {
        let mut list_3726 = scope_3723.start_list(true, Some("SnapshotId"));
        for item_3725 in var_3724 {
            #[allow(unused_mut)]
            let mut entry_3727 = list_3726.entry();
            entry_3727.string(item_3725);
        }
        list_3726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("DryRun");
    if let Some(var_3729) = &input.dry_run {
        scope_3728.boolean(*var_3729);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("ImageId");
    if let Some(var_3731) = &input.image_id {
        scope_3730.string(var_3731);
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("DeprecateAt");
    if let Some(var_3733) = &input.deprecate_at {
        scope_3732.instant(var_3733, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("DryRun");
    if let Some(var_3735) = &input.dry_run {
        scope_3734.boolean(*var_3735);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("DryRun");
    if let Some(var_3737) = &input.dry_run {
        scope_3736.boolean(*var_3737);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3739) = &input.transit_gateway_route_table_id {
        scope_3738.string(var_3739);
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3741) = &input.transit_gateway_attachment_id {
        scope_3740.string(var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("DryRun");
    if let Some(var_3743) = &input.dry_run {
        scope_3742.boolean(*var_3743);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("GatewayId");
    if let Some(var_3745) = &input.gateway_id {
        scope_3744.string(var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("RouteTableId");
    if let Some(var_3747) = &input.route_table_id {
        scope_3746.string(var_3747);
    }
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("DryRun");
    if let Some(var_3749) = &input.dry_run {
        scope_3748.boolean(*var_3749);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3750 = writer.prefix("DryRun");
    if let Some(var_3751) = &input.dry_run {
        scope_3750.boolean(*var_3751);
    }
    #[allow(unused_mut)]
    let mut scope_3752 = writer.prefix("VolumeId");
    if let Some(var_3753) = &input.volume_id {
        scope_3752.string(var_3753);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("DryRun");
    if let Some(var_3755) = &input.dry_run {
        scope_3754.boolean(*var_3755);
    }
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("VpcId");
    if let Some(var_3757) = &input.vpc_id {
        scope_3756.string(var_3757);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("VpcId");
    if let Some(var_3759) = &input.vpc_id {
        scope_3758.string(var_3759);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3761) = &input.client_vpn_endpoint_id {
        scope_3760.string(var_3761);
    }
    #[allow(unused_mut)]
    let mut scope_3762 = writer.prefix("DryRun");
    if let Some(var_3763) = &input.dry_run {
        scope_3762.boolean(*var_3763);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3764 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3765) = &input.client_vpn_endpoint_id {
        scope_3764.string(var_3765);
    }
    #[allow(unused_mut)]
    let mut scope_3766 = writer.prefix("DryRun");
    if let Some(var_3767) = &input.dry_run {
        scope_3766.boolean(*var_3767);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3768 = writer.prefix("ClientToken");
    if let Some(var_3769) = &input.client_token {
        scope_3768.string(var_3769);
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("Description");
    if let Some(var_3771) = &input.description {
        scope_3770.string(var_3771);
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("DiskImageFormat");
    if let Some(var_3773) = &input.disk_image_format {
        scope_3772.string(var_3773.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("DryRun");
    if let Some(var_3775) = &input.dry_run {
        scope_3774.boolean(*var_3775);
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("ImageId");
    if let Some(var_3777) = &input.image_id {
        scope_3776.string(var_3777);
    }
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("S3ExportLocation");
    if let Some(var_3779) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_3778, var_3779,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("RoleName");
    if let Some(var_3781) = &input.role_name {
        scope_3780.string(var_3781);
    }
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("TagSpecification");
    if let Some(var_3783) = &input.tag_specifications {
        let mut list_3785 = scope_3782.start_list(true, Some("item"));
        for item_3784 in var_3783 {
            #[allow(unused_mut)]
            let mut entry_3786 = list_3785.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_3786, item_3784,
            );
        }
        list_3785.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3788) = &input.transit_gateway_route_table_id {
        scope_3787.string(var_3788);
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("Filter");
    if let Some(var_3790) = &input.filters {
        let mut list_3792 = scope_3789.start_list(true, Some("Filter"));
        for item_3791 in var_3790 {
            #[allow(unused_mut)]
            let mut entry_3793 = list_3792.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3793, item_3791);
        }
        list_3792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("S3Bucket");
    if let Some(var_3795) = &input.s3_bucket {
        scope_3794.string(var_3795);
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("DryRun");
    if let Some(var_3797) = &input.dry_run {
        scope_3796.boolean(*var_3797);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("CertificateArn");
    if let Some(var_3799) = &input.certificate_arn {
        scope_3798.string(var_3799);
    }
    #[allow(unused_mut)]
    let mut scope_3800 = writer.prefix("DryRun");
    if let Some(var_3801) = &input.dry_run {
        scope_3800.boolean(*var_3801);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3802 = writer.prefix("PoolId");
    if let Some(var_3803) = &input.pool_id {
        scope_3802.string(var_3803);
    }
    #[allow(unused_mut)]
    let mut scope_3804 = writer.prefix("NextToken");
    if let Some(var_3805) = &input.next_token {
        scope_3804.string(var_3805);
    }
    #[allow(unused_mut)]
    let mut scope_3806 = writer.prefix("MaxResults");
    if let Some(var_3807) = &input.max_results {
        scope_3806.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3807).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("DryRun");
    if let Some(var_3809) = &input.dry_run {
        scope_3808.boolean(*var_3809);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("CapacityReservationId");
    if let Some(var_3811) = &input.capacity_reservation_id {
        scope_3810.string(var_3811);
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("NextToken");
    if let Some(var_3813) = &input.next_token {
        scope_3812.string(var_3813);
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("MaxResults");
    if let Some(var_3815) = &input.max_results {
        scope_3814.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3815).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("DryRun");
    if let Some(var_3817) = &input.dry_run {
        scope_3816.boolean(*var_3817);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("PoolId");
    if let Some(var_3819) = &input.pool_id {
        scope_3818.string(var_3819);
    }
    #[allow(unused_mut)]
    let mut scope_3820 = writer.prefix("Filter");
    if let Some(var_3821) = &input.filters {
        let mut list_3823 = scope_3820.start_list(true, Some("Filter"));
        for item_3822 in var_3821 {
            #[allow(unused_mut)]
            let mut entry_3824 = list_3823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3824, item_3822);
        }
        list_3823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("MaxResults");
    if let Some(var_3826) = &input.max_results {
        scope_3825.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("NextToken");
    if let Some(var_3828) = &input.next_token {
        scope_3827.string(var_3828);
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("DryRun");
    if let Some(var_3830) = &input.dry_run {
        scope_3829.boolean(*var_3830);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("InstanceId");
    if let Some(var_3832) = &input.instance_id {
        scope_3831.string(var_3832);
    }
    #[allow(unused_mut)]
    let mut scope_3833 = writer.prefix("DryRun");
    if let Some(var_3834) = &input.dry_run {
        scope_3833.boolean(*var_3834);
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("Latest");
    if let Some(var_3836) = &input.latest {
        scope_3835.boolean(*var_3836);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("DryRun");
    if let Some(var_3838) = &input.dry_run {
        scope_3837.boolean(*var_3838);
    }
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("InstanceId");
    if let Some(var_3840) = &input.instance_id {
        scope_3839.string(var_3840);
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("WakeUp");
    if let Some(var_3842) = &input.wake_up {
        scope_3841.boolean(*var_3842);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("DryRun");
    if let Some(var_3844) = &input.dry_run {
        scope_3843.boolean(*var_3844);
    }
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("InstanceFamily");
    if let Some(var_3846) = &input.instance_family {
        scope_3845.string(var_3846.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("DryRun");
    if let Some(var_3848) = &input.dry_run {
        scope_3847.boolean(*var_3848);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("DryRun");
    if let Some(var_3850) = &input.dry_run {
        scope_3849.boolean(*var_3850);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("DryRun");
    if let Some(var_3852) = &input.dry_run {
        scope_3851.boolean(*var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("FlowLogId");
    if let Some(var_3854) = &input.flow_log_id {
        scope_3853.string(var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3856) = &input.config_delivery_s3_destination_arn {
        scope_3855.string(var_3856);
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("IntegrateService");
    if let Some(var_3858) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_3857, var_3858);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("CapacityReservationId");
    if let Some(var_3860) = &input.capacity_reservation_id {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("NextToken");
    if let Some(var_3862) = &input.next_token {
        scope_3861.string(var_3862);
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("MaxResults");
    if let Some(var_3864) = &input.max_results {
        scope_3863.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("DryRun");
    if let Some(var_3866) = &input.dry_run {
        scope_3865.boolean(*var_3866);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("HostIdSet");
    if let Some(var_3868) = &input.host_id_set {
        let mut list_3870 = scope_3867.start_list(true, Some("item"));
        for item_3869 in var_3868 {
            #[allow(unused_mut)]
            let mut entry_3871 = list_3870.entry();
            entry_3871.string(item_3869);
        }
        list_3870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("OfferingId");
    if let Some(var_3873) = &input.offering_id {
        scope_3872.string(var_3873);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("DryRun");
    if let Some(var_3875) = &input.dry_run {
        scope_3874.boolean(*var_3875);
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("InstanceId");
    if let Some(var_3877) = &input.instance_id {
        scope_3876.string(var_3877);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("DryRun");
    if let Some(var_3879) = &input.dry_run {
        scope_3878.boolean(*var_3879);
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("PrefixListId");
    if let Some(var_3881) = &input.prefix_list_id {
        scope_3880.string(var_3881);
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("MaxResults");
    if let Some(var_3883) = &input.max_results {
        scope_3882.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("NextToken");
    if let Some(var_3885) = &input.next_token {
        scope_3884.string(var_3885);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("DryRun");
    if let Some(var_3887) = &input.dry_run {
        scope_3886.boolean(*var_3887);
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("PrefixListId");
    if let Some(var_3889) = &input.prefix_list_id {
        scope_3888.string(var_3889);
    }
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("TargetVersion");
    if let Some(var_3891) = &input.target_version {
        scope_3890.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("MaxResults");
    if let Some(var_3893) = &input.max_results {
        scope_3892.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3893).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("NextToken");
    if let Some(var_3895) = &input.next_token {
        scope_3894.string(var_3895);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("InstanceId");
    if let Some(var_3897) = &input.instance_id {
        scope_3896.string(var_3897);
    }
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("DryRun");
    if let Some(var_3899) = &input.dry_run {
        scope_3898.boolean(*var_3899);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("DryRun");
    if let Some(var_3901) = &input.dry_run {
        scope_3900.boolean(*var_3901);
    }
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("ReservedInstanceId");
    if let Some(var_3903) = &input.reserved_instance_ids {
        let mut list_3905 = scope_3902.start_list(true, Some("ReservedInstanceId"));
        for item_3904 in var_3903 {
            #[allow(unused_mut)]
            let mut entry_3906 = list_3905.entry();
            entry_3906.string(item_3904);
        }
        list_3905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3907 = writer.prefix("TargetConfiguration");
    if let Some(var_3908) = &input.target_configurations {
        let mut list_3910 = scope_3907.start_list(true, Some("TargetConfigurationRequest"));
        for item_3909 in var_3908 {
            #[allow(unused_mut)]
            let mut entry_3911 = list_3910.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_3911, item_3909,
            );
        }
        list_3910.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("DryRun");
    if let Some(var_3913) = &input.dry_run {
        scope_3912.boolean(*var_3913);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("Filter");
    if let Some(var_3915) = &input.filters {
        let mut list_3917 = scope_3914.start_list(true, Some("Filter"));
        for item_3916 in var_3915 {
            #[allow(unused_mut)]
            let mut entry_3918 = list_3917.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3918, item_3916);
        }
        list_3917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3919 = writer.prefix("SubnetId");
    if let Some(var_3920) = &input.subnet_id {
        scope_3919.string(var_3920);
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("DryRun");
    if let Some(var_3922) = &input.dry_run {
        scope_3921.boolean(*var_3922);
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("NextToken");
    if let Some(var_3924) = &input.next_token {
        scope_3923.string(var_3924);
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("MaxResults");
    if let Some(var_3926) = &input.max_results {
        scope_3925.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3926).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3928) = &input.transit_gateway_attachment_id {
        scope_3927.string(var_3928);
    }
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("Filter");
    if let Some(var_3930) = &input.filters {
        let mut list_3932 = scope_3929.start_list(true, Some("Filter"));
        for item_3931 in var_3930 {
            #[allow(unused_mut)]
            let mut entry_3933 = list_3932.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3933, item_3931);
        }
        list_3932.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3934 = writer.prefix("MaxResults");
    if let Some(var_3935) = &input.max_results {
        scope_3934.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3936 = writer.prefix("NextToken");
    if let Some(var_3937) = &input.next_token {
        scope_3936.string(var_3937);
    }
    #[allow(unused_mut)]
    let mut scope_3938 = writer.prefix("DryRun");
    if let Some(var_3939) = &input.dry_run {
        scope_3938.boolean(*var_3939);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3941) = &input.transit_gateway_multicast_domain_id {
        scope_3940.string(var_3941);
    }
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("Filter");
    if let Some(var_3943) = &input.filters {
        let mut list_3945 = scope_3942.start_list(true, Some("Filter"));
        for item_3944 in var_3943 {
            #[allow(unused_mut)]
            let mut entry_3946 = list_3945.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3946, item_3944);
        }
        list_3945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("MaxResults");
    if let Some(var_3948) = &input.max_results {
        scope_3947.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3948).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("NextToken");
    if let Some(var_3950) = &input.next_token {
        scope_3949.string(var_3950);
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("DryRun");
    if let Some(var_3952) = &input.dry_run {
        scope_3951.boolean(*var_3952);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3954) = &input.transit_gateway_route_table_id {
        scope_3953.string(var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("Filter");
    if let Some(var_3956) = &input.filters {
        let mut list_3958 = scope_3955.start_list(true, Some("Filter"));
        for item_3957 in var_3956 {
            #[allow(unused_mut)]
            let mut entry_3959 = list_3958.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3959, item_3957);
        }
        list_3958.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("MaxResults");
    if let Some(var_3961) = &input.max_results {
        scope_3960.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3961).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("NextToken");
    if let Some(var_3963) = &input.next_token {
        scope_3962.string(var_3963);
    }
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("DryRun");
    if let Some(var_3965) = &input.dry_run {
        scope_3964.boolean(*var_3965);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3967) = &input.transit_gateway_route_table_id {
        scope_3966.string(var_3967);
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("Filter");
    if let Some(var_3969) = &input.filters {
        let mut list_3971 = scope_3968.start_list(true, Some("Filter"));
        for item_3970 in var_3969 {
            #[allow(unused_mut)]
            let mut entry_3972 = list_3971.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3972, item_3970);
        }
        list_3971.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3973 = writer.prefix("MaxResults");
    if let Some(var_3974) = &input.max_results {
        scope_3973.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3974).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3975 = writer.prefix("NextToken");
    if let Some(var_3976) = &input.next_token {
        scope_3975.string(var_3976);
    }
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("DryRun");
    if let Some(var_3978) = &input.dry_run {
        scope_3977.boolean(*var_3978);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3980) = &input.transit_gateway_route_table_id {
        scope_3979.string(var_3980);
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("Filter");
    if let Some(var_3982) = &input.filters {
        let mut list_3984 = scope_3981.start_list(true, Some("Filter"));
        for item_3983 in var_3982 {
            #[allow(unused_mut)]
            let mut entry_3985 = list_3984.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3985, item_3983);
        }
        list_3984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("MaxResults");
    if let Some(var_3987) = &input.max_results {
        scope_3986.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3987).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("NextToken");
    if let Some(var_3989) = &input.next_token {
        scope_3988.string(var_3989);
    }
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("DryRun");
    if let Some(var_3991) = &input.dry_run {
        scope_3990.boolean(*var_3991);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3993) = &input.client_vpn_endpoint_id {
        scope_3992.string(var_3993);
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("CertificateRevocationList");
    if let Some(var_3995) = &input.certificate_revocation_list {
        scope_3994.string(var_3995);
    }
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("DryRun");
    if let Some(var_3997) = &input.dry_run {
        scope_3996.boolean(*var_3997);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("Architecture");
    if let Some(var_3999) = &input.architecture {
        scope_3998.string(var_3999);
    }
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("ClientData");
    if let Some(var_4001) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4000, var_4001);
    }
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("ClientToken");
    if let Some(var_4003) = &input.client_token {
        scope_4002.string(var_4003);
    }
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("Description");
    if let Some(var_4005) = &input.description {
        scope_4004.string(var_4005);
    }
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("DiskContainer");
    if let Some(var_4007) = &input.disk_containers {
        let mut list_4009 = scope_4006.start_list(true, Some("item"));
        for item_4008 in var_4007 {
            #[allow(unused_mut)]
            let mut entry_4010 = list_4009.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4010, item_4008,
            );
        }
        list_4009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("DryRun");
    if let Some(var_4012) = &input.dry_run {
        scope_4011.boolean(*var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("Encrypted");
    if let Some(var_4014) = &input.encrypted {
        scope_4013.boolean(*var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("Hypervisor");
    if let Some(var_4016) = &input.hypervisor {
        scope_4015.string(var_4016);
    }
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("KmsKeyId");
    if let Some(var_4018) = &input.kms_key_id {
        scope_4017.string(var_4018);
    }
    #[allow(unused_mut)]
    let mut scope_4019 = writer.prefix("LicenseType");
    if let Some(var_4020) = &input.license_type {
        scope_4019.string(var_4020);
    }
    #[allow(unused_mut)]
    let mut scope_4021 = writer.prefix("Platform");
    if let Some(var_4022) = &input.platform {
        scope_4021.string(var_4022);
    }
    #[allow(unused_mut)]
    let mut scope_4023 = writer.prefix("RoleName");
    if let Some(var_4024) = &input.role_name {
        scope_4023.string(var_4024);
    }
    #[allow(unused_mut)]
    let mut scope_4025 = writer.prefix("LicenseSpecifications");
    if let Some(var_4026) = &input.license_specifications {
        let mut list_4028 = scope_4025.start_list(true, Some("item"));
        for item_4027 in var_4026 {
            #[allow(unused_mut)]
            let mut entry_4029 = list_4028.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4029, item_4027);
        }
        list_4028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("TagSpecification");
    if let Some(var_4031) = &input.tag_specifications {
        let mut list_4033 = scope_4030.start_list(true, Some("item"));
        for item_4032 in var_4031 {
            #[allow(unused_mut)]
            let mut entry_4034 = list_4033.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4034, item_4032,
            );
        }
        list_4033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("UsageOperation");
    if let Some(var_4036) = &input.usage_operation {
        scope_4035.string(var_4036);
    }
    #[allow(unused_mut)]
    let mut scope_4037 = writer.prefix("BootMode");
    if let Some(var_4038) = &input.boot_mode {
        scope_4037.string(var_4038.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4039 = writer.prefix("Description");
    if let Some(var_4040) = &input.description {
        scope_4039.string(var_4040);
    }
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("DiskImage");
    if let Some(var_4042) = &input.disk_images {
        let mut list_4044 = scope_4041.start_list(true, None);
        for item_4043 in var_4042 {
            #[allow(unused_mut)]
            let mut entry_4045 = list_4044.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4045, item_4043);
        }
        list_4044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("LaunchSpecification");
    if let Some(var_4049) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4048, var_4049,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("Platform");
    if let Some(var_4051) = &input.platform {
        scope_4050.string(var_4051.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("DryRun");
    if let Some(var_4053) = &input.dry_run {
        scope_4052.boolean(*var_4053);
    }
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("KeyName");
    if let Some(var_4055) = &input.key_name {
        scope_4054.string(var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4057) = &input.public_key_material {
        scope_4056.string(&smithy_types::base64::encode(var_4057));
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("TagSpecification");
    if let Some(var_4059) = &input.tag_specifications {
        let mut list_4061 = scope_4058.start_list(true, Some("item"));
        for item_4060 in var_4059 {
            #[allow(unused_mut)]
            let mut entry_4062 = list_4061.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4062, item_4060,
            );
        }
        list_4061.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4063 = writer.prefix("ClientData");
    if let Some(var_4064) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4063, var_4064);
    }
    #[allow(unused_mut)]
    let mut scope_4065 = writer.prefix("ClientToken");
    if let Some(var_4066) = &input.client_token {
        scope_4065.string(var_4066);
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("Description");
    if let Some(var_4068) = &input.description {
        scope_4067.string(var_4068);
    }
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("DiskContainer");
    if let Some(var_4070) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4069, var_4070,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("DryRun");
    if let Some(var_4072) = &input.dry_run {
        scope_4071.boolean(*var_4072);
    }
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("Encrypted");
    if let Some(var_4074) = &input.encrypted {
        scope_4073.boolean(*var_4074);
    }
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("KmsKeyId");
    if let Some(var_4076) = &input.kms_key_id {
        scope_4075.string(var_4076);
    }
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("RoleName");
    if let Some(var_4078) = &input.role_name {
        scope_4077.string(var_4078);
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("TagSpecification");
    if let Some(var_4080) = &input.tag_specifications {
        let mut list_4082 = scope_4079.start_list(true, Some("item"));
        for item_4081 in var_4080 {
            #[allow(unused_mut)]
            let mut entry_4083 = list_4082.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4083, item_4081,
            );
        }
        list_4082.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4084 = writer.prefix("AvailabilityZone");
    if let Some(var_4085) = &input.availability_zone {
        scope_4084.string(var_4085);
    }
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("Description");
    if let Some(var_4087) = &input.description {
        scope_4086.string(var_4087);
    }
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("DryRun");
    if let Some(var_4089) = &input.dry_run {
        scope_4088.boolean(*var_4089);
    }
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("Image");
    if let Some(var_4091) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4090, var_4091);
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("Volume");
    if let Some(var_4093) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4092, var_4093);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("AllocationId");
    if let Some(var_4095) = &input.allocation_id {
        scope_4094.string(var_4095);
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("DomainName");
    if let Some(var_4097) = &input.domain_name {
        scope_4096.string(var_4097);
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("DryRun");
    if let Some(var_4099) = &input.dry_run {
        scope_4098.boolean(*var_4099);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("GroupName");
    if let Some(var_4101) = &input.group_name {
        scope_4100.string(var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("OptInStatus");
    if let Some(var_4103) = &input.opt_in_status {
        scope_4102.string(var_4103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("DryRun");
    if let Some(var_4105) = &input.dry_run {
        scope_4104.boolean(*var_4105);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("CapacityReservationId");
    if let Some(var_4107) = &input.capacity_reservation_id {
        scope_4106.string(var_4107);
    }
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("InstanceCount");
    if let Some(var_4109) = &input.instance_count {
        scope_4108.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("EndDate");
    if let Some(var_4111) = &input.end_date {
        scope_4110.instant(var_4111, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("EndDateType");
    if let Some(var_4113) = &input.end_date_type {
        scope_4112.string(var_4113.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("Accept");
    if let Some(var_4115) = &input.accept {
        scope_4114.boolean(*var_4115);
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("DryRun");
    if let Some(var_4117) = &input.dry_run {
        scope_4116.boolean(*var_4117);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4119) = &input.client_vpn_endpoint_id {
        scope_4118.string(var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("ServerCertificateArn");
    if let Some(var_4121) = &input.server_certificate_arn {
        scope_4120.string(var_4121);
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4123) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4122, var_4123,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("DnsServers");
    if let Some(var_4125) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4124, var_4125,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("VpnPort");
    if let Some(var_4127) = &input.vpn_port {
        scope_4126.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("Description");
    if let Some(var_4129) = &input.description {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("SplitTunnel");
    if let Some(var_4131) = &input.split_tunnel {
        scope_4130.boolean(*var_4131);
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("DryRun");
    if let Some(var_4133) = &input.dry_run {
        scope_4132.boolean(*var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("SecurityGroupId");
    if let Some(var_4135) = &input.security_group_ids {
        let mut list_4137 = scope_4134.start_list(true, Some("item"));
        for item_4136 in var_4135 {
            #[allow(unused_mut)]
            let mut entry_4138 = list_4137.entry();
            entry_4138.string(item_4136);
        }
        list_4137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("VpcId");
    if let Some(var_4140) = &input.vpc_id {
        scope_4139.string(var_4140);
    }
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("SelfServicePortal");
    if let Some(var_4142) = &input.self_service_portal {
        scope_4141.string(var_4142.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("ClientConnectOptions");
    if let Some(var_4144) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4143, var_4144,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("DryRun");
    if let Some(var_4146) = &input.dry_run {
        scope_4145.boolean(*var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("InstanceFamily");
    if let Some(var_4148) = &input.instance_family {
        scope_4147.string(var_4148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("CpuCredits");
    if let Some(var_4150) = &input.cpu_credits {
        scope_4149.string(var_4150);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("KmsKeyId");
    if let Some(var_4152) = &input.kms_key_id {
        scope_4151.string(var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("DryRun");
    if let Some(var_4154) = &input.dry_run {
        scope_4153.boolean(*var_4154);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("DryRun");
    if let Some(var_4156) = &input.dry_run {
        scope_4155.boolean(*var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4158) = &input.excess_capacity_termination_policy {
        scope_4157.string(var_4158.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4160) = &input.launch_template_configs {
        let mut list_4162 = scope_4159.start_list(true, Some("item"));
        for item_4161 in var_4160 {
            #[allow(unused_mut)]
            let mut entry_4163 = list_4162.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4163, item_4161,
            );
        }
        list_4162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4164 = writer.prefix("FleetId");
    if let Some(var_4165) = &input.fleet_id {
        scope_4164.string(var_4165);
    }
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4167) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4166, var_4167,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("Context");
    if let Some(var_4169) = &input.context {
        scope_4168.string(var_4169);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("DryRun");
    if let Some(var_4171) = &input.dry_run {
        scope_4170.boolean(*var_4171);
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("FpgaImageId");
    if let Some(var_4173) = &input.fpga_image_id {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("Attribute");
    if let Some(var_4175) = &input.attribute {
        scope_4174.string(var_4175.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("OperationType");
    if let Some(var_4177) = &input.operation_type {
        scope_4176.string(var_4177.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("UserId");
    if let Some(var_4179) = &input.user_ids {
        let mut list_4181 = scope_4178.start_list(true, Some("UserId"));
        for item_4180 in var_4179 {
            #[allow(unused_mut)]
            let mut entry_4182 = list_4181.entry();
            entry_4182.string(item_4180);
        }
        list_4181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("UserGroup");
    if let Some(var_4184) = &input.user_groups {
        let mut list_4186 = scope_4183.start_list(true, Some("UserGroup"));
        for item_4185 in var_4184 {
            #[allow(unused_mut)]
            let mut entry_4187 = list_4186.entry();
            entry_4187.string(item_4185);
        }
        list_4186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4188 = writer.prefix("ProductCode");
    if let Some(var_4189) = &input.product_codes {
        let mut list_4191 = scope_4188.start_list(true, Some("ProductCode"));
        for item_4190 in var_4189 {
            #[allow(unused_mut)]
            let mut entry_4192 = list_4191.entry();
            entry_4192.string(item_4190);
        }
        list_4191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("LoadPermission");
    if let Some(var_4194) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4193, var_4194,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("Description");
    if let Some(var_4196) = &input.description {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Name");
    if let Some(var_4198) = &input.name {
        scope_4197.string(var_4198);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("AutoPlacement");
    if let Some(var_4200) = &input.auto_placement {
        scope_4199.string(var_4200.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("HostId");
    if let Some(var_4202) = &input.host_ids {
        let mut list_4204 = scope_4201.start_list(true, Some("item"));
        for item_4203 in var_4202 {
            #[allow(unused_mut)]
            let mut entry_4205 = list_4204.entry();
            entry_4205.string(item_4203);
        }
        list_4204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("HostRecovery");
    if let Some(var_4207) = &input.host_recovery {
        scope_4206.string(var_4207.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("InstanceType");
    if let Some(var_4209) = &input.instance_type {
        scope_4208.string(var_4209);
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("InstanceFamily");
    if let Some(var_4211) = &input.instance_family {
        scope_4210.string(var_4211);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("PrincipalArn");
    if let Some(var_4213) = &input.principal_arn {
        scope_4212.string(var_4213);
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("Resource");
    if let Some(var_4215) = &input.resource {
        scope_4214.string(var_4215);
    }
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("UseLongIds");
    if let Some(var_4217) = &input.use_long_ids {
        scope_4216.boolean(*var_4217);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("Resource");
    if let Some(var_4219) = &input.resource {
        scope_4218.string(var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("UseLongIds");
    if let Some(var_4221) = &input.use_long_ids {
        scope_4220.boolean(*var_4221);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("Attribute");
    if let Some(var_4223) = &input.attribute {
        scope_4222.string(var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("Description");
    if let Some(var_4225) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4224, var_4225);
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("ImageId");
    if let Some(var_4227) = &input.image_id {
        scope_4226.string(var_4227);
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("LaunchPermission");
    if let Some(var_4229) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4228, var_4229,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("OperationType");
    if let Some(var_4231) = &input.operation_type {
        scope_4230.string(var_4231.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("ProductCode");
    if let Some(var_4233) = &input.product_codes {
        let mut list_4235 = scope_4232.start_list(true, Some("ProductCode"));
        for item_4234 in var_4233 {
            #[allow(unused_mut)]
            let mut entry_4236 = list_4235.entry();
            entry_4236.string(item_4234);
        }
        list_4235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4237 = writer.prefix("UserGroup");
    if let Some(var_4238) = &input.user_groups {
        let mut list_4240 = scope_4237.start_list(true, Some("UserGroup"));
        for item_4239 in var_4238 {
            #[allow(unused_mut)]
            let mut entry_4241 = list_4240.entry();
            entry_4241.string(item_4239);
        }
        list_4240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("UserId");
    if let Some(var_4243) = &input.user_ids {
        let mut list_4245 = scope_4242.start_list(true, Some("UserId"));
        for item_4244 in var_4243 {
            #[allow(unused_mut)]
            let mut entry_4246 = list_4245.entry();
            entry_4246.string(item_4244);
        }
        list_4245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("Value");
    if let Some(var_4248) = &input.value {
        scope_4247.string(var_4248);
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("DryRun");
    if let Some(var_4250) = &input.dry_run {
        scope_4249.boolean(*var_4250);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4251 = writer.prefix("SourceDestCheck");
    if let Some(var_4252) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4251, var_4252,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4253 = writer.prefix("Attribute");
    if let Some(var_4254) = &input.attribute {
        scope_4253.string(var_4254.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4255 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4256) = &input.block_device_mappings {
        let mut list_4258 = scope_4255.start_list(true, Some("item"));
        for item_4257 in var_4256 {
            #[allow(unused_mut)]
            let mut entry_4259 = list_4258.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4259, item_4257);
        }
        list_4258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("DisableApiTermination");
    if let Some(var_4261) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4260, var_4261,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("DryRun");
    if let Some(var_4263) = &input.dry_run {
        scope_4262.boolean(*var_4263);
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("EbsOptimized");
    if let Some(var_4265) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4264, var_4265,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("EnaSupport");
    if let Some(var_4267) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4266, var_4267,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("GroupId");
    if let Some(var_4269) = &input.groups {
        let mut list_4271 = scope_4268.start_list(true, Some("groupId"));
        for item_4270 in var_4269 {
            #[allow(unused_mut)]
            let mut entry_4272 = list_4271.entry();
            entry_4272.string(item_4270);
        }
        list_4271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("InstanceId");
    if let Some(var_4274) = &input.instance_id {
        scope_4273.string(var_4274);
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4276) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4275, var_4276);
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("InstanceType");
    if let Some(var_4278) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4277, var_4278);
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("Kernel");
    if let Some(var_4280) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4279, var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("Ramdisk");
    if let Some(var_4282) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4281, var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("SriovNetSupport");
    if let Some(var_4284) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4283, var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("UserData");
    if let Some(var_4286) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4285, var_4286,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("Value");
    if let Some(var_4288) = &input.value {
        scope_4287.string(var_4288);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("InstanceId");
    if let Some(var_4290) = &input.instance_id {
        scope_4289.string(var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4292) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4291, var_4292,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("DryRun");
    if let Some(var_4294) = &input.dry_run {
        scope_4293.boolean(*var_4294);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("DryRun");
    if let Some(var_4296) = &input.dry_run {
        scope_4295.boolean(*var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("ClientToken");
    if let Some(var_4298) = &input.client_token {
        scope_4297.string(var_4298);
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4300) = &input.instance_credit_specifications {
        let mut list_4302 = scope_4299.start_list(true, Some("item"));
        for item_4301 in var_4300 {
            #[allow(unused_mut)]
            let mut entry_4303 = list_4302.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(
                entry_4303, item_4301,
            );
        }
        list_4302.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("DryRun");
    if let Some(var_4305) = &input.dry_run {
        scope_4304.boolean(*var_4305);
    }
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("InstanceId");
    if let Some(var_4307) = &input.instance_id {
        scope_4306.string(var_4307);
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("InstanceEventId");
    if let Some(var_4309) = &input.instance_event_id {
        scope_4308.string(var_4309);
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("NotBefore");
    if let Some(var_4311) = &input.not_before {
        scope_4310.instant(var_4311, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("DryRun");
    if let Some(var_4313) = &input.dry_run {
        scope_4312.boolean(*var_4313);
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("Name");
    if let Some(var_4315) = &input.name {
        scope_4314.string(var_4315);
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4317) = &input.instance_event_window_id {
        scope_4316.string(var_4317);
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("TimeRange");
    if let Some(var_4319) = &input.time_ranges {
        let mut list_4321 = scope_4318.start_list(true, None);
        for item_4320 in var_4319 {
            #[allow(unused_mut)]
            let mut entry_4322 = list_4321.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4322, item_4320);
        }
        list_4321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("CronExpression");
    if let Some(var_4324) = &input.cron_expression {
        scope_4323.string(var_4324);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("InstanceId");
    if let Some(var_4326) = &input.instance_id {
        scope_4325.string(var_4326);
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("HttpTokens");
    if let Some(var_4328) = &input.http_tokens {
        scope_4327.string(var_4328.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4330) = &input.http_put_response_hop_limit {
        scope_4329.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("HttpEndpoint");
    if let Some(var_4332) = &input.http_endpoint {
        scope_4331.string(var_4332.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("DryRun");
    if let Some(var_4334) = &input.dry_run {
        scope_4333.boolean(*var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4336) = &input.http_protocol_ipv6 {
        scope_4335.string(var_4336.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("Affinity");
    if let Some(var_4338) = &input.affinity {
        scope_4337.string(var_4338.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("GroupName");
    if let Some(var_4340) = &input.group_name {
        scope_4339.string(var_4340);
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("HostId");
    if let Some(var_4342) = &input.host_id {
        scope_4341.string(var_4342);
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("InstanceId");
    if let Some(var_4344) = &input.instance_id {
        scope_4343.string(var_4344);
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("Tenancy");
    if let Some(var_4346) = &input.tenancy {
        scope_4345.string(var_4346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("PartitionNumber");
    if let Some(var_4348) = &input.partition_number {
        scope_4347.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4350) = &input.host_resource_group_arn {
        scope_4349.string(var_4350);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("DryRun");
    if let Some(var_4352) = &input.dry_run {
        scope_4351.boolean(*var_4352);
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("ClientToken");
    if let Some(var_4354) = &input.client_token {
        scope_4353.string(var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("LaunchTemplateId");
    if let Some(var_4356) = &input.launch_template_id {
        scope_4355.string(var_4356);
    }
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("LaunchTemplateName");
    if let Some(var_4358) = &input.launch_template_name {
        scope_4357.string(var_4358);
    }
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("SetDefaultVersion");
    if let Some(var_4360) = &input.default_version {
        scope_4359.string(var_4360);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("DryRun");
    if let Some(var_4362) = &input.dry_run {
        scope_4361.boolean(*var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("PrefixListId");
    if let Some(var_4364) = &input.prefix_list_id {
        scope_4363.string(var_4364);
    }
    #[allow(unused_mut)]
    let mut scope_4365 = writer.prefix("CurrentVersion");
    if let Some(var_4366) = &input.current_version {
        scope_4365.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4367 = writer.prefix("PrefixListName");
    if let Some(var_4368) = &input.prefix_list_name {
        scope_4367.string(var_4368);
    }
    #[allow(unused_mut)]
    let mut scope_4369 = writer.prefix("AddEntry");
    if let Some(var_4370) = &input.add_entries {
        let mut list_4372 = scope_4369.start_list(true, None);
        for item_4371 in var_4370 {
            #[allow(unused_mut)]
            let mut entry_4373 = list_4372.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4373, item_4371,
            );
        }
        list_4372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4374 = writer.prefix("RemoveEntry");
    if let Some(var_4375) = &input.remove_entries {
        let mut list_4377 = scope_4374.start_list(true, None);
        for item_4376 in var_4375 {
            #[allow(unused_mut)]
            let mut entry_4378 = list_4377.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4378, item_4376,
            );
        }
        list_4377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("MaxEntries");
    if let Some(var_4380) = &input.max_entries {
        scope_4379.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4380).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("Attachment");
    if let Some(var_4382) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4381, var_4382,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4383 = writer.prefix("Description");
    if let Some(var_4384) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4383, var_4384);
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("DryRun");
    if let Some(var_4386) = &input.dry_run {
        scope_4385.boolean(*var_4386);
    }
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("SecurityGroupId");
    if let Some(var_4388) = &input.groups {
        let mut list_4390 = scope_4387.start_list(true, Some("SecurityGroupId"));
        for item_4389 in var_4388 {
            #[allow(unused_mut)]
            let mut entry_4391 = list_4390.entry();
            entry_4391.string(item_4389);
        }
        list_4390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4392 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4393) = &input.network_interface_id {
        scope_4392.string(var_4393);
    }
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("SourceDestCheck");
    if let Some(var_4395) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4394, var_4395,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("ReservedInstancesId");
    if let Some(var_4397) = &input.reserved_instances_ids {
        let mut list_4399 = scope_4396.start_list(true, Some("ReservedInstancesId"));
        for item_4398 in var_4397 {
            #[allow(unused_mut)]
            let mut entry_4400 = list_4399.entry();
            entry_4400.string(item_4398);
        }
        list_4399.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4401 = writer.prefix("ClientToken");
    if let Some(var_4402) = &input.client_token {
        scope_4401.string(var_4402);
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4404) = &input.target_configurations {
        let mut list_4406 = scope_4403.start_list(true, Some("item"));
        for item_4405 in var_4404 {
            #[allow(unused_mut)]
            let mut entry_4407 = list_4406.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_4407, item_4405,
            );
        }
        list_4406.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("GroupId");
    if let Some(var_4409) = &input.group_id {
        scope_4408.string(var_4409);
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("SecurityGroupRule");
    if let Some(var_4411) = &input.security_group_rules {
        let mut list_4413 = scope_4410.start_list(true, Some("item"));
        for item_4412 in var_4411 {
            #[allow(unused_mut)]
            let mut entry_4414 = list_4413.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_4414, item_4412,
            );
        }
        list_4413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4415 = writer.prefix("DryRun");
    if let Some(var_4416) = &input.dry_run {
        scope_4415.boolean(*var_4416);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4417 = writer.prefix("Attribute");
    if let Some(var_4418) = &input.attribute {
        scope_4417.string(var_4418.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4419 = writer.prefix("CreateVolumePermission");
    if let Some(var_4420) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_4419, var_4420,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4421 = writer.prefix("UserGroup");
    if let Some(var_4422) = &input.group_names {
        let mut list_4424 = scope_4421.start_list(true, Some("GroupName"));
        for item_4423 in var_4422 {
            #[allow(unused_mut)]
            let mut entry_4425 = list_4424.entry();
            entry_4425.string(item_4423);
        }
        list_4424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("OperationType");
    if let Some(var_4427) = &input.operation_type {
        scope_4426.string(var_4427.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("SnapshotId");
    if let Some(var_4429) = &input.snapshot_id {
        scope_4428.string(var_4429);
    }
    #[allow(unused_mut)]
    let mut scope_4430 = writer.prefix("UserId");
    if let Some(var_4431) = &input.user_ids {
        let mut list_4433 = scope_4430.start_list(true, Some("UserId"));
        for item_4432 in var_4431 {
            #[allow(unused_mut)]
            let mut entry_4434 = list_4433.entry();
            entry_4434.string(item_4432);
        }
        list_4433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("DryRun");
    if let Some(var_4436) = &input.dry_run {
        scope_4435.boolean(*var_4436);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4438) = &input.excess_capacity_termination_policy {
        scope_4437.string(var_4438.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4440) = &input.launch_template_configs {
        let mut list_4442 = scope_4439.start_list(true, Some("item"));
        for item_4441 in var_4440 {
            #[allow(unused_mut)]
            let mut entry_4443 = list_4442.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_4443, item_4441,
            );
        }
        list_4442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4445) = &input.spot_fleet_request_id {
        scope_4444.string(var_4445);
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("TargetCapacity");
    if let Some(var_4447) = &input.target_capacity {
        scope_4446.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4447).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4449) = &input.on_demand_target_capacity {
        scope_4448.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("Context");
    if let Some(var_4451) = &input.context {
        scope_4450.string(var_4451);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4453) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4452, var_4453,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4455) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4454, var_4455,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("SubnetId");
    if let Some(var_4457) = &input.subnet_id {
        scope_4456.string(var_4457);
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4459) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4458, var_4459,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4461) = &input.customer_owned_ipv4_pool {
        scope_4460.string(var_4461);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4463) = &input.traffic_mirror_filter_id {
        scope_4462.string(var_4463);
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("AddNetworkService");
    if let Some(var_4465) = &input.add_network_services {
        let mut list_4467 = scope_4464.start_list(true, Some("item"));
        for item_4466 in var_4465 {
            #[allow(unused_mut)]
            let mut entry_4468 = list_4467.entry();
            entry_4468.string(item_4466.as_str());
        }
        list_4467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4469 = writer.prefix("RemoveNetworkService");
    if let Some(var_4470) = &input.remove_network_services {
        let mut list_4472 = scope_4469.start_list(true, Some("item"));
        for item_4471 in var_4470 {
            #[allow(unused_mut)]
            let mut entry_4473 = list_4472.entry();
            entry_4473.string(item_4471.as_str());
        }
        list_4472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("DryRun");
    if let Some(var_4475) = &input.dry_run {
        scope_4474.boolean(*var_4475);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4477) = &input.traffic_mirror_filter_rule_id {
        scope_4476.string(var_4477);
    }
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("TrafficDirection");
    if let Some(var_4479) = &input.traffic_direction {
        scope_4478.string(var_4479.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("RuleNumber");
    if let Some(var_4481) = &input.rule_number {
        scope_4480.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("RuleAction");
    if let Some(var_4483) = &input.rule_action {
        scope_4482.string(var_4483.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4484 = writer.prefix("DestinationPortRange");
    if let Some(var_4485) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4484, var_4485,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("SourcePortRange");
    if let Some(var_4487) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4486, var_4487,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4488 = writer.prefix("Protocol");
    if let Some(var_4489) = &input.protocol {
        scope_4488.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4489).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4491) = &input.destination_cidr_block {
        scope_4490.string(var_4491);
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("SourceCidrBlock");
    if let Some(var_4493) = &input.source_cidr_block {
        scope_4492.string(var_4493);
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("Description");
    if let Some(var_4495) = &input.description {
        scope_4494.string(var_4495);
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("RemoveField");
    if let Some(var_4497) = &input.remove_fields {
        let mut list_4499 = scope_4496.start_list(true, None);
        for item_4498 in var_4497 {
            #[allow(unused_mut)]
            let mut entry_4500 = list_4499.entry();
            entry_4500.string(item_4498.as_str());
        }
        list_4499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("DryRun");
    if let Some(var_4502) = &input.dry_run {
        scope_4501.boolean(*var_4502);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4504) = &input.traffic_mirror_session_id {
        scope_4503.string(var_4504);
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4506) = &input.traffic_mirror_target_id {
        scope_4505.string(var_4506);
    }
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4508) = &input.traffic_mirror_filter_id {
        scope_4507.string(var_4508);
    }
    #[allow(unused_mut)]
    let mut scope_4509 = writer.prefix("PacketLength");
    if let Some(var_4510) = &input.packet_length {
        scope_4509.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4511 = writer.prefix("SessionNumber");
    if let Some(var_4512) = &input.session_number {
        scope_4511.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4513 = writer.prefix("VirtualNetworkId");
    if let Some(var_4514) = &input.virtual_network_id {
        scope_4513.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4514).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4515 = writer.prefix("Description");
    if let Some(var_4516) = &input.description {
        scope_4515.string(var_4516);
    }
    #[allow(unused_mut)]
    let mut scope_4517 = writer.prefix("RemoveField");
    if let Some(var_4518) = &input.remove_fields {
        let mut list_4520 = scope_4517.start_list(true, None);
        for item_4519 in var_4518 {
            #[allow(unused_mut)]
            let mut entry_4521 = list_4520.entry();
            entry_4521.string(item_4519.as_str());
        }
        list_4520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("DryRun");
    if let Some(var_4523) = &input.dry_run {
        scope_4522.boolean(*var_4523);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("TransitGatewayId");
    if let Some(var_4525) = &input.transit_gateway_id {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("Description");
    if let Some(var_4527) = &input.description {
        scope_4526.string(var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("Options");
    if let Some(var_4529) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_4528, var_4529,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("DryRun");
    if let Some(var_4531) = &input.dry_run {
        scope_4530.boolean(*var_4531);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4533) = &input.transit_gateway_route_table_id {
        scope_4532.string(var_4533);
    }
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("PrefixListId");
    if let Some(var_4535) = &input.prefix_list_id {
        scope_4534.string(var_4535);
    }
    #[allow(unused_mut)]
    let mut scope_4536 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4537) = &input.transit_gateway_attachment_id {
        scope_4536.string(var_4537);
    }
    #[allow(unused_mut)]
    let mut scope_4538 = writer.prefix("Blackhole");
    if let Some(var_4539) = &input.blackhole {
        scope_4538.boolean(*var_4539);
    }
    #[allow(unused_mut)]
    let mut scope_4540 = writer.prefix("DryRun");
    if let Some(var_4541) = &input.dry_run {
        scope_4540.boolean(*var_4541);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4543) = &input.transit_gateway_attachment_id {
        scope_4542.string(var_4543);
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("AddSubnetIds");
    if let Some(var_4545) = &input.add_subnet_ids {
        let mut list_4547 = scope_4544.start_list(true, Some("item"));
        for item_4546 in var_4545 {
            #[allow(unused_mut)]
            let mut entry_4548 = list_4547.entry();
            entry_4548.string(item_4546);
        }
        list_4547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4550) = &input.remove_subnet_ids {
        let mut list_4552 = scope_4549.start_list(true, Some("item"));
        for item_4551 in var_4550 {
            #[allow(unused_mut)]
            let mut entry_4553 = list_4552.entry();
            entry_4553.string(item_4551);
        }
        list_4552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4554 = writer.prefix("Options");
    if let Some(var_4555) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_4554, var_4555);
    }
    #[allow(unused_mut)]
    let mut scope_4556 = writer.prefix("DryRun");
    if let Some(var_4557) = &input.dry_run {
        scope_4556.boolean(*var_4557);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4558 = writer.prefix("DryRun");
    if let Some(var_4559) = &input.dry_run {
        scope_4558.boolean(*var_4559);
    }
    #[allow(unused_mut)]
    let mut scope_4560 = writer.prefix("VolumeId");
    if let Some(var_4561) = &input.volume_id {
        scope_4560.string(var_4561);
    }
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("Size");
    if let Some(var_4563) = &input.size {
        scope_4562.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("VolumeType");
    if let Some(var_4565) = &input.volume_type {
        scope_4564.string(var_4565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("Iops");
    if let Some(var_4567) = &input.iops {
        scope_4566.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4567).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("Throughput");
    if let Some(var_4569) = &input.throughput {
        scope_4568.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4569).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4571) = &input.multi_attach_enabled {
        scope_4570.boolean(*var_4571);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("AutoEnableIO");
    if let Some(var_4573) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4572, var_4573,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("VolumeId");
    if let Some(var_4575) = &input.volume_id {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("DryRun");
    if let Some(var_4577) = &input.dry_run {
        scope_4576.boolean(*var_4577);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4579) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4578, var_4579,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("EnableDnsSupport");
    if let Some(var_4581) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4580, var_4581,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("VpcId");
    if let Some(var_4583) = &input.vpc_id {
        scope_4582.string(var_4583);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4584 = writer.prefix("DryRun");
    if let Some(var_4585) = &input.dry_run {
        scope_4584.boolean(*var_4585);
    }
    #[allow(unused_mut)]
    let mut scope_4586 = writer.prefix("VpcEndpointId");
    if let Some(var_4587) = &input.vpc_endpoint_id {
        scope_4586.string(var_4587);
    }
    #[allow(unused_mut)]
    let mut scope_4588 = writer.prefix("ResetPolicy");
    if let Some(var_4589) = &input.reset_policy {
        scope_4588.boolean(*var_4589);
    }
    #[allow(unused_mut)]
    let mut scope_4590 = writer.prefix("PolicyDocument");
    if let Some(var_4591) = &input.policy_document {
        scope_4590.string(var_4591);
    }
    #[allow(unused_mut)]
    let mut scope_4592 = writer.prefix("AddRouteTableId");
    if let Some(var_4593) = &input.add_route_table_ids {
        let mut list_4595 = scope_4592.start_list(true, Some("item"));
        for item_4594 in var_4593 {
            #[allow(unused_mut)]
            let mut entry_4596 = list_4595.entry();
            entry_4596.string(item_4594);
        }
        list_4595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4598) = &input.remove_route_table_ids {
        let mut list_4600 = scope_4597.start_list(true, Some("item"));
        for item_4599 in var_4598 {
            #[allow(unused_mut)]
            let mut entry_4601 = list_4600.entry();
            entry_4601.string(item_4599);
        }
        list_4600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("AddSubnetId");
    if let Some(var_4603) = &input.add_subnet_ids {
        let mut list_4605 = scope_4602.start_list(true, Some("item"));
        for item_4604 in var_4603 {
            #[allow(unused_mut)]
            let mut entry_4606 = list_4605.entry();
            entry_4606.string(item_4604);
        }
        list_4605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("RemoveSubnetId");
    if let Some(var_4608) = &input.remove_subnet_ids {
        let mut list_4610 = scope_4607.start_list(true, Some("item"));
        for item_4609 in var_4608 {
            #[allow(unused_mut)]
            let mut entry_4611 = list_4610.entry();
            entry_4611.string(item_4609);
        }
        list_4610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4613) = &input.add_security_group_ids {
        let mut list_4615 = scope_4612.start_list(true, Some("item"));
        for item_4614 in var_4613 {
            #[allow(unused_mut)]
            let mut entry_4616 = list_4615.entry();
            entry_4616.string(item_4614);
        }
        list_4615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4618) = &input.remove_security_group_ids {
        let mut list_4620 = scope_4617.start_list(true, Some("item"));
        for item_4619 in var_4618 {
            #[allow(unused_mut)]
            let mut entry_4621 = list_4620.entry();
            entry_4621.string(item_4619);
        }
        list_4620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4622 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4623) = &input.private_dns_enabled {
        scope_4622.boolean(*var_4623);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4624 = writer.prefix("DryRun");
    if let Some(var_4625) = &input.dry_run {
        scope_4624.boolean(*var_4625);
    }
    #[allow(unused_mut)]
    let mut scope_4626 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4627) = &input.connection_notification_id {
        scope_4626.string(var_4627);
    }
    #[allow(unused_mut)]
    let mut scope_4628 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4629) = &input.connection_notification_arn {
        scope_4628.string(var_4629);
    }
    #[allow(unused_mut)]
    let mut scope_4630 = writer.prefix("ConnectionEvents");
    if let Some(var_4631) = &input.connection_events {
        let mut list_4633 = scope_4630.start_list(true, Some("item"));
        for item_4632 in var_4631 {
            #[allow(unused_mut)]
            let mut entry_4634 = list_4633.entry();
            entry_4634.string(item_4632);
        }
        list_4633.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("DryRun");
    if let Some(var_4636) = &input.dry_run {
        scope_4635.boolean(*var_4636);
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("ServiceId");
    if let Some(var_4638) = &input.service_id {
        scope_4637.string(var_4638);
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("PrivateDnsName");
    if let Some(var_4640) = &input.private_dns_name {
        scope_4639.string(var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4642) = &input.remove_private_dns_name {
        scope_4641.boolean(*var_4642);
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("AcceptanceRequired");
    if let Some(var_4644) = &input.acceptance_required {
        scope_4643.boolean(*var_4644);
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4646) = &input.add_network_load_balancer_arns {
        let mut list_4648 = scope_4645.start_list(true, Some("item"));
        for item_4647 in var_4646 {
            #[allow(unused_mut)]
            let mut entry_4649 = list_4648.entry();
            entry_4649.string(item_4647);
        }
        list_4648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4651) = &input.remove_network_load_balancer_arns {
        let mut list_4653 = scope_4650.start_list(true, Some("item"));
        for item_4652 in var_4651 {
            #[allow(unused_mut)]
            let mut entry_4654 = list_4653.entry();
            entry_4654.string(item_4652);
        }
        list_4653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4656) = &input.add_gateway_load_balancer_arns {
        let mut list_4658 = scope_4655.start_list(true, Some("item"));
        for item_4657 in var_4656 {
            #[allow(unused_mut)]
            let mut entry_4659 = list_4658.entry();
            entry_4659.string(item_4657);
        }
        list_4658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4661) = &input.remove_gateway_load_balancer_arns {
        let mut list_4663 = scope_4660.start_list(true, Some("item"));
        for item_4662 in var_4661 {
            #[allow(unused_mut)]
            let mut entry_4664 = list_4663.entry();
            entry_4664.string(item_4662);
        }
        list_4663.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("DryRun");
    if let Some(var_4666) = &input.dry_run {
        scope_4665.boolean(*var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("ServiceId");
    if let Some(var_4668) = &input.service_id {
        scope_4667.string(var_4668);
    }
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4670) = &input.add_allowed_principals {
        let mut list_4672 = scope_4669.start_list(true, Some("item"));
        for item_4671 in var_4670 {
            #[allow(unused_mut)]
            let mut entry_4673 = list_4672.entry();
            entry_4673.string(item_4671);
        }
        list_4672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4675) = &input.remove_allowed_principals {
        let mut list_4677 = scope_4674.start_list(true, Some("item"));
        for item_4676 in var_4675 {
            #[allow(unused_mut)]
            let mut entry_4678 = list_4677.entry();
            entry_4678.string(item_4676);
        }
        list_4677.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4679 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4680) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4679, var_4680,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4681 = writer.prefix("DryRun");
    if let Some(var_4682) = &input.dry_run {
        scope_4681.boolean(*var_4682);
    }
    #[allow(unused_mut)]
    let mut scope_4683 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4684) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4683, var_4684,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4685 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4686) = &input.vpc_peering_connection_id {
        scope_4685.string(var_4686);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4687 = writer.prefix("VpcId");
    if let Some(var_4688) = &input.vpc_id {
        scope_4687.string(var_4688);
    }
    #[allow(unused_mut)]
    let mut scope_4689 = writer.prefix("InstanceTenancy");
    if let Some(var_4690) = &input.instance_tenancy {
        scope_4689.string(var_4690.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("DryRun");
    if let Some(var_4692) = &input.dry_run {
        scope_4691.boolean(*var_4692);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("VpnConnectionId");
    if let Some(var_4694) = &input.vpn_connection_id {
        scope_4693.string(var_4694);
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("TransitGatewayId");
    if let Some(var_4696) = &input.transit_gateway_id {
        scope_4695.string(var_4696);
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("CustomerGatewayId");
    if let Some(var_4698) = &input.customer_gateway_id {
        scope_4697.string(var_4698);
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("VpnGatewayId");
    if let Some(var_4700) = &input.vpn_gateway_id {
        scope_4699.string(var_4700);
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("DryRun");
    if let Some(var_4702) = &input.dry_run {
        scope_4701.boolean(*var_4702);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("VpnConnectionId");
    if let Some(var_4704) = &input.vpn_connection_id {
        scope_4703.string(var_4704);
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4706) = &input.local_ipv4_network_cidr {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4708) = &input.remote_ipv4_network_cidr {
        scope_4707.string(var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4710) = &input.local_ipv6_network_cidr {
        scope_4709.string(var_4710);
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4712) = &input.remote_ipv6_network_cidr {
        scope_4711.string(var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("DryRun");
    if let Some(var_4714) = &input.dry_run {
        scope_4713.boolean(*var_4714);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("VpnConnectionId");
    if let Some(var_4716) = &input.vpn_connection_id {
        scope_4715.string(var_4716);
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4718) = &input.vpn_tunnel_outside_ip_address {
        scope_4717.string(var_4718);
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("DryRun");
    if let Some(var_4720) = &input.dry_run {
        scope_4719.boolean(*var_4720);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4721 = writer.prefix("VpnConnectionId");
    if let Some(var_4722) = &input.vpn_connection_id {
        scope_4721.string(var_4722);
    }
    #[allow(unused_mut)]
    let mut scope_4723 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4724) = &input.vpn_tunnel_outside_ip_address {
        scope_4723.string(var_4724);
    }
    #[allow(unused_mut)]
    let mut scope_4725 = writer.prefix("TunnelOptions");
    if let Some(var_4726) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_4725, var_4726,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4727 = writer.prefix("DryRun");
    if let Some(var_4728) = &input.dry_run {
        scope_4727.boolean(*var_4728);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("InstanceId");
    if let Some(var_4730) = &input.instance_ids {
        let mut list_4732 = scope_4729.start_list(true, Some("InstanceId"));
        for item_4731 in var_4730 {
            #[allow(unused_mut)]
            let mut entry_4733 = list_4732.entry();
            entry_4733.string(item_4731);
        }
        list_4732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("DryRun");
    if let Some(var_4735) = &input.dry_run {
        scope_4734.boolean(*var_4735);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("DryRun");
    if let Some(var_4737) = &input.dry_run {
        scope_4736.boolean(*var_4737);
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("PublicIp");
    if let Some(var_4739) = &input.public_ip {
        scope_4738.string(var_4739);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("Cidr");
    if let Some(var_4741) = &input.cidr {
        scope_4740.string(var_4741);
    }
    #[allow(unused_mut)]
    let mut scope_4742 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4743) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_4742, var_4743,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4744 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4745) = &input.publicly_advertisable {
        scope_4744.boolean(*var_4745);
    }
    #[allow(unused_mut)]
    let mut scope_4746 = writer.prefix("Description");
    if let Some(var_4747) = &input.description {
        scope_4746.string(var_4747);
    }
    #[allow(unused_mut)]
    let mut scope_4748 = writer.prefix("DryRun");
    if let Some(var_4749) = &input.dry_run {
        scope_4748.boolean(*var_4749);
    }
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("PoolTagSpecification");
    if let Some(var_4751) = &input.pool_tag_specifications {
        let mut list_4753 = scope_4750.start_list(true, Some("item"));
        for item_4752 in var_4751 {
            #[allow(unused_mut)]
            let mut entry_4754 = list_4753.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4754, item_4752,
            );
        }
        list_4753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("MultiRegion");
    if let Some(var_4756) = &input.multi_region {
        scope_4755.boolean(*var_4756);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("ClientToken");
    if let Some(var_4758) = &input.client_token {
        scope_4757.string(var_4758);
    }
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("CurrencyCode");
    if let Some(var_4760) = &input.currency_code {
        scope_4759.string(var_4760.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("HostIdSet");
    if let Some(var_4762) = &input.host_id_set {
        let mut list_4764 = scope_4761.start_list(true, Some("item"));
        for item_4763 in var_4762 {
            #[allow(unused_mut)]
            let mut entry_4765 = list_4764.entry();
            entry_4765.string(item_4763);
        }
        list_4764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("LimitPrice");
    if let Some(var_4767) = &input.limit_price {
        scope_4766.string(var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("OfferingId");
    if let Some(var_4769) = &input.offering_id {
        scope_4768.string(var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("TagSpecification");
    if let Some(var_4771) = &input.tag_specifications {
        let mut list_4773 = scope_4770.start_list(true, Some("item"));
        for item_4772 in var_4771 {
            #[allow(unused_mut)]
            let mut entry_4774 = list_4773.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4774, item_4772,
            );
        }
        list_4773.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4775 = writer.prefix("InstanceCount");
    if let Some(var_4776) = &input.instance_count {
        scope_4775.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4776).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4778) = &input.reserved_instances_offering_id {
        scope_4777.string(var_4778);
    }
    #[allow(unused_mut)]
    let mut scope_4779 = writer.prefix("DryRun");
    if let Some(var_4780) = &input.dry_run {
        scope_4779.boolean(*var_4780);
    }
    #[allow(unused_mut)]
    let mut scope_4781 = writer.prefix("LimitPrice");
    if let Some(var_4782) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_4781, var_4782,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4783 = writer.prefix("PurchaseTime");
    if let Some(var_4784) = &input.purchase_time {
        scope_4783.instant(var_4784, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4785 = writer.prefix("ClientToken");
    if let Some(var_4786) = &input.client_token {
        scope_4785.string(var_4786);
    }
    #[allow(unused_mut)]
    let mut scope_4787 = writer.prefix("DryRun");
    if let Some(var_4788) = &input.dry_run {
        scope_4787.boolean(*var_4788);
    }
    #[allow(unused_mut)]
    let mut scope_4789 = writer.prefix("PurchaseRequest");
    if let Some(var_4790) = &input.purchase_requests {
        let mut list_4792 = scope_4789.start_list(true, Some("PurchaseRequest"));
        for item_4791 in var_4790 {
            #[allow(unused_mut)]
            let mut entry_4793 = list_4792.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_4793, item_4791,
            );
        }
        list_4792.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("InstanceId");
    if let Some(var_4795) = &input.instance_ids {
        let mut list_4797 = scope_4794.start_list(true, Some("InstanceId"));
        for item_4796 in var_4795 {
            #[allow(unused_mut)]
            let mut entry_4798 = list_4797.entry();
            entry_4798.string(item_4796);
        }
        list_4797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4799 = writer.prefix("DryRun");
    if let Some(var_4800) = &input.dry_run {
        scope_4799.boolean(*var_4800);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4801 = writer.prefix("ImageLocation");
    if let Some(var_4802) = &input.image_location {
        scope_4801.string(var_4802);
    }
    #[allow(unused_mut)]
    let mut scope_4803 = writer.prefix("Architecture");
    if let Some(var_4804) = &input.architecture {
        scope_4803.string(var_4804.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4806) = &input.block_device_mappings {
        let mut list_4808 = scope_4805.start_list(true, Some("BlockDeviceMapping"));
        for item_4807 in var_4806 {
            #[allow(unused_mut)]
            let mut entry_4809 = list_4808.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_4809, item_4807,
            );
        }
        list_4808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4810 = writer.prefix("Description");
    if let Some(var_4811) = &input.description {
        scope_4810.string(var_4811);
    }
    #[allow(unused_mut)]
    let mut scope_4812 = writer.prefix("DryRun");
    if let Some(var_4813) = &input.dry_run {
        scope_4812.boolean(*var_4813);
    }
    #[allow(unused_mut)]
    let mut scope_4814 = writer.prefix("EnaSupport");
    if let Some(var_4815) = &input.ena_support {
        scope_4814.boolean(*var_4815);
    }
    #[allow(unused_mut)]
    let mut scope_4816 = writer.prefix("KernelId");
    if let Some(var_4817) = &input.kernel_id {
        scope_4816.string(var_4817);
    }
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("Name");
    if let Some(var_4819) = &input.name {
        scope_4818.string(var_4819);
    }
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("BillingProduct");
    if let Some(var_4821) = &input.billing_products {
        let mut list_4823 = scope_4820.start_list(true, Some("item"));
        for item_4822 in var_4821 {
            #[allow(unused_mut)]
            let mut entry_4824 = list_4823.entry();
            entry_4824.string(item_4822);
        }
        list_4823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("RamdiskId");
    if let Some(var_4826) = &input.ramdisk_id {
        scope_4825.string(var_4826);
    }
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("RootDeviceName");
    if let Some(var_4828) = &input.root_device_name {
        scope_4827.string(var_4828);
    }
    #[allow(unused_mut)]
    let mut scope_4829 = writer.prefix("SriovNetSupport");
    if let Some(var_4830) = &input.sriov_net_support {
        scope_4829.string(var_4830);
    }
    #[allow(unused_mut)]
    let mut scope_4831 = writer.prefix("VirtualizationType");
    if let Some(var_4832) = &input.virtualization_type {
        scope_4831.string(var_4832);
    }
    #[allow(unused_mut)]
    let mut scope_4833 = writer.prefix("BootMode");
    if let Some(var_4834) = &input.boot_mode {
        scope_4833.string(var_4834.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4835 = writer.prefix("DryRun");
    if let Some(var_4836) = &input.dry_run {
        scope_4835.boolean(*var_4836);
    }
    #[allow(unused_mut)]
    let mut scope_4837 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4838) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_4837, var_4838,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4840) = &input.transit_gateway_multicast_domain_id {
        scope_4839.string(var_4840);
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("GroupIpAddress");
    if let Some(var_4842) = &input.group_ip_address {
        scope_4841.string(var_4842);
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4844) = &input.network_interface_ids {
        let mut list_4846 = scope_4843.start_list(true, Some("item"));
        for item_4845 in var_4844 {
            #[allow(unused_mut)]
            let mut entry_4847 = list_4846.entry();
            entry_4847.string(item_4845);
        }
        list_4846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4848 = writer.prefix("DryRun");
    if let Some(var_4849) = &input.dry_run {
        scope_4848.boolean(*var_4849);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4850 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4851) = &input.transit_gateway_multicast_domain_id {
        scope_4850.string(var_4851);
    }
    #[allow(unused_mut)]
    let mut scope_4852 = writer.prefix("GroupIpAddress");
    if let Some(var_4853) = &input.group_ip_address {
        scope_4852.string(var_4853);
    }
    #[allow(unused_mut)]
    let mut scope_4854 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4855) = &input.network_interface_ids {
        let mut list_4857 = scope_4854.start_list(true, Some("item"));
        for item_4856 in var_4855 {
            #[allow(unused_mut)]
            let mut entry_4858 = list_4857.entry();
            entry_4858.string(item_4856);
        }
        list_4857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("DryRun");
    if let Some(var_4860) = &input.dry_run {
        scope_4859.boolean(*var_4860);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4862) = &input.transit_gateway_multicast_domain_id {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4864) = &input.transit_gateway_attachment_id {
        scope_4863.string(var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("SubnetIds");
    if let Some(var_4866) = &input.subnet_ids {
        let mut list_4868 = scope_4865.start_list(true, Some("item"));
        for item_4867 in var_4866 {
            #[allow(unused_mut)]
            let mut entry_4869 = list_4868.entry();
            entry_4869.string(item_4867);
        }
        list_4868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("DryRun");
    if let Some(var_4871) = &input.dry_run {
        scope_4870.boolean(*var_4871);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4873) = &input.transit_gateway_attachment_id {
        scope_4872.string(var_4873);
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("DryRun");
    if let Some(var_4875) = &input.dry_run {
        scope_4874.boolean(*var_4875);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4877) = &input.transit_gateway_attachment_id {
        scope_4876.string(var_4877);
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("DryRun");
    if let Some(var_4879) = &input.dry_run {
        scope_4878.boolean(*var_4879);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("DryRun");
    if let Some(var_4881) = &input.dry_run {
        scope_4880.boolean(*var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("ServiceId");
    if let Some(var_4883) = &input.service_id {
        scope_4882.string(var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("VpcEndpointId");
    if let Some(var_4885) = &input.vpc_endpoint_ids {
        let mut list_4887 = scope_4884.start_list(true, Some("item"));
        for item_4886 in var_4885 {
            #[allow(unused_mut)]
            let mut entry_4888 = list_4887.entry();
            entry_4888.string(item_4886);
        }
        list_4887.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("DryRun");
    if let Some(var_4890) = &input.dry_run {
        scope_4889.boolean(*var_4890);
    }
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4892) = &input.vpc_peering_connection_id {
        scope_4891.string(var_4892);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("AllocationId");
    if let Some(var_4894) = &input.allocation_id {
        scope_4893.string(var_4894);
    }
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("PublicIp");
    if let Some(var_4896) = &input.public_ip {
        scope_4895.string(var_4896);
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("NetworkBorderGroup");
    if let Some(var_4898) = &input.network_border_group {
        scope_4897.string(var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("DryRun");
    if let Some(var_4900) = &input.dry_run {
        scope_4899.boolean(*var_4900);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("HostId");
    if let Some(var_4902) = &input.host_ids {
        let mut list_4904 = scope_4901.start_list(true, Some("item"));
        for item_4903 in var_4902 {
            #[allow(unused_mut)]
            let mut entry_4905 = list_4904.entry();
            entry_4905.string(item_4903);
        }
        list_4904.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("IamInstanceProfile");
    if let Some(var_4907) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_4906, var_4907,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("AssociationId");
    if let Some(var_4909) = &input.association_id {
        scope_4908.string(var_4909);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("AssociationId");
    if let Some(var_4911) = &input.association_id {
        scope_4910.string(var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("DryRun");
    if let Some(var_4913) = &input.dry_run {
        scope_4912.boolean(*var_4913);
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("NetworkAclId");
    if let Some(var_4915) = &input.network_acl_id {
        scope_4914.string(var_4915);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("CidrBlock");
    if let Some(var_4917) = &input.cidr_block {
        scope_4916.string(var_4917);
    }
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("DryRun");
    if let Some(var_4919) = &input.dry_run {
        scope_4918.boolean(*var_4919);
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("Egress");
    if let Some(var_4921) = &input.egress {
        scope_4920.boolean(*var_4921);
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("Icmp");
    if let Some(var_4923) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_4922, var_4923);
    }
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_4925) = &input.ipv6_cidr_block {
        scope_4924.string(var_4925);
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("NetworkAclId");
    if let Some(var_4927) = &input.network_acl_id {
        scope_4926.string(var_4927);
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("PortRange");
    if let Some(var_4929) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_4928, var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("Protocol");
    if let Some(var_4931) = &input.protocol {
        scope_4930.string(var_4931);
    }
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("RuleAction");
    if let Some(var_4933) = &input.rule_action {
        scope_4932.string(var_4933.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("RuleNumber");
    if let Some(var_4935) = &input.rule_number {
        scope_4934.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4935).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4937) = &input.destination_cidr_block {
        scope_4936.string(var_4937);
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_4939) = &input.destination_ipv6_cidr_block {
        scope_4938.string(var_4939);
    }
    #[allow(unused_mut)]
    let mut scope_4940 = writer.prefix("DestinationPrefixListId");
    if let Some(var_4941) = &input.destination_prefix_list_id {
        scope_4940.string(var_4941);
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("DryRun");
    if let Some(var_4943) = &input.dry_run {
        scope_4942.boolean(*var_4943);
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("VpcEndpointId");
    if let Some(var_4945) = &input.vpc_endpoint_id {
        scope_4944.string(var_4945);
    }
    #[allow(unused_mut)]
    let mut scope_4946 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_4947) = &input.egress_only_internet_gateway_id {
        scope_4946.string(var_4947);
    }
    #[allow(unused_mut)]
    let mut scope_4948 = writer.prefix("GatewayId");
    if let Some(var_4949) = &input.gateway_id {
        scope_4948.string(var_4949);
    }
    #[allow(unused_mut)]
    let mut scope_4950 = writer.prefix("InstanceId");
    if let Some(var_4951) = &input.instance_id {
        scope_4950.string(var_4951);
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("LocalTarget");
    if let Some(var_4953) = &input.local_target {
        scope_4952.boolean(*var_4953);
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("NatGatewayId");
    if let Some(var_4955) = &input.nat_gateway_id {
        scope_4954.string(var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("TransitGatewayId");
    if let Some(var_4957) = &input.transit_gateway_id {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("LocalGatewayId");
    if let Some(var_4959) = &input.local_gateway_id {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("CarrierGatewayId");
    if let Some(var_4961) = &input.carrier_gateway_id {
        scope_4960.string(var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4963) = &input.network_interface_id {
        scope_4962.string(var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("RouteTableId");
    if let Some(var_4965) = &input.route_table_id {
        scope_4964.string(var_4965);
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4967) = &input.vpc_peering_connection_id {
        scope_4966.string(var_4967);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("AssociationId");
    if let Some(var_4969) = &input.association_id {
        scope_4968.string(var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("DryRun");
    if let Some(var_4971) = &input.dry_run {
        scope_4970.boolean(*var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("RouteTableId");
    if let Some(var_4973) = &input.route_table_id {
        scope_4972.string(var_4973);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4975) = &input.destination_cidr_block {
        scope_4974.string(var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4977) = &input.transit_gateway_route_table_id {
        scope_4976.string(var_4977);
    }
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4979) = &input.transit_gateway_attachment_id {
        scope_4978.string(var_4979);
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("Blackhole");
    if let Some(var_4981) = &input.blackhole {
        scope_4980.boolean(*var_4981);
    }
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("DryRun");
    if let Some(var_4983) = &input.dry_run {
        scope_4982.boolean(*var_4983);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4984 = writer.prefix("Description");
    if let Some(var_4985) = &input.description {
        scope_4984.string(var_4985);
    }
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("DryRun");
    if let Some(var_4987) = &input.dry_run {
        scope_4986.boolean(*var_4987);
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("EndTime");
    if let Some(var_4989) = &input.end_time {
        scope_4988.instant(var_4989, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("InstanceId");
    if let Some(var_4991) = &input.instances {
        let mut list_4993 = scope_4990.start_list(true, Some("InstanceId"));
        for item_4992 in var_4991 {
            #[allow(unused_mut)]
            let mut entry_4994 = list_4993.entry();
            entry_4994.string(item_4992);
        }
        list_4993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("ReasonCode");
    if let Some(var_4996) = &input.reason_codes {
        let mut list_4998 = scope_4995.start_list(true, Some("item"));
        for item_4997 in var_4996 {
            #[allow(unused_mut)]
            let mut entry_4999 = list_4998.entry();
            entry_4999.string(item_4997.as_str());
        }
        list_4998.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5000 = writer.prefix("StartTime");
    if let Some(var_5001) = &input.start_time {
        scope_5000.instant(var_5001, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5002 = writer.prefix("Status");
    if let Some(var_5003) = &input.status {
        scope_5002.string(var_5003.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5004 = writer.prefix("DryRun");
    if let Some(var_5005) = &input.dry_run {
        scope_5004.boolean(*var_5005);
    }
    #[allow(unused_mut)]
    let mut scope_5006 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5007) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5006, var_5007,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5008 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5009) = &input.availability_zone_group {
        scope_5008.string(var_5009);
    }
    #[allow(unused_mut)]
    let mut scope_5010 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5011) = &input.block_duration_minutes {
        scope_5010.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5011).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5012 = writer.prefix("ClientToken");
    if let Some(var_5013) = &input.client_token {
        scope_5012.string(var_5013);
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("DryRun");
    if let Some(var_5015) = &input.dry_run {
        scope_5014.boolean(*var_5015);
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("InstanceCount");
    if let Some(var_5017) = &input.instance_count {
        scope_5016.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5017).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("LaunchGroup");
    if let Some(var_5019) = &input.launch_group {
        scope_5018.string(var_5019);
    }
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("LaunchSpecification");
    if let Some(var_5021) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5020, var_5021,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("SpotPrice");
    if let Some(var_5023) = &input.spot_price {
        scope_5022.string(var_5023);
    }
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("Type");
    if let Some(var_5025) = &input.r#type {
        scope_5024.string(var_5025.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("ValidFrom");
    if let Some(var_5027) = &input.valid_from {
        scope_5026.instant(var_5027, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("ValidUntil");
    if let Some(var_5029) = &input.valid_until {
        scope_5028.instant(var_5029, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("TagSpecification");
    if let Some(var_5031) = &input.tag_specifications {
        let mut list_5033 = scope_5030.start_list(true, Some("item"));
        for item_5032 in var_5031 {
            #[allow(unused_mut)]
            let mut entry_5034 = list_5033.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5034, item_5032,
            );
        }
        list_5033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5036) = &input.instance_interruption_behavior {
        scope_5035.string(var_5036.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("AllocationId");
    if let Some(var_5038) = &input.allocation_id {
        scope_5037.string(var_5038);
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("Attribute");
    if let Some(var_5040) = &input.attribute {
        scope_5039.string(var_5040.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("DryRun");
    if let Some(var_5042) = &input.dry_run {
        scope_5041.boolean(*var_5042);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("DryRun");
    if let Some(var_5044) = &input.dry_run {
        scope_5043.boolean(*var_5044);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("DryRun");
    if let Some(var_5046) = &input.dry_run {
        scope_5045.boolean(*var_5046);
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("FpgaImageId");
    if let Some(var_5048) = &input.fpga_image_id {
        scope_5047.string(var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("Attribute");
    if let Some(var_5050) = &input.attribute {
        scope_5049.string(var_5050.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("Attribute");
    if let Some(var_5052) = &input.attribute {
        scope_5051.string(var_5052.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("ImageId");
    if let Some(var_5054) = &input.image_id {
        scope_5053.string(var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("DryRun");
    if let Some(var_5056) = &input.dry_run {
        scope_5055.boolean(*var_5056);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("Attribute");
    if let Some(var_5058) = &input.attribute {
        scope_5057.string(var_5058.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("DryRun");
    if let Some(var_5060) = &input.dry_run {
        scope_5059.boolean(*var_5060);
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("InstanceId");
    if let Some(var_5062) = &input.instance_id {
        scope_5061.string(var_5062);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("DryRun");
    if let Some(var_5064) = &input.dry_run {
        scope_5063.boolean(*var_5064);
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5066) = &input.network_interface_id {
        scope_5065.string(var_5066);
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("SourceDestCheck");
    if let Some(var_5068) = &input.source_dest_check {
        scope_5067.string(var_5068);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("Attribute");
    if let Some(var_5070) = &input.attribute {
        scope_5069.string(var_5070.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("SnapshotId");
    if let Some(var_5072) = &input.snapshot_id {
        scope_5071.string(var_5072);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("DryRun");
    if let Some(var_5074) = &input.dry_run {
        scope_5073.boolean(*var_5074);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("DryRun");
    if let Some(var_5076) = &input.dry_run {
        scope_5075.boolean(*var_5076);
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("PublicIp");
    if let Some(var_5078) = &input.public_ip {
        scope_5077.string(var_5078);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("DryRun");
    if let Some(var_5080) = &input.dry_run {
        scope_5079.boolean(*var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("PrefixListId");
    if let Some(var_5082) = &input.prefix_list_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("PreviousVersion");
    if let Some(var_5084) = &input.previous_version {
        scope_5083.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("CurrentVersion");
    if let Some(var_5086) = &input.current_version {
        scope_5085.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5086).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5088) = &input.client_vpn_endpoint_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5090) = &input.target_network_cidr {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("AccessGroupId");
    if let Some(var_5092) = &input.access_group_id {
        scope_5091.string(var_5092);
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("RevokeAllGroups");
    if let Some(var_5094) = &input.revoke_all_groups {
        scope_5093.boolean(*var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("DryRun");
    if let Some(var_5096) = &input.dry_run {
        scope_5095.boolean(*var_5096);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("DryRun");
    if let Some(var_5098) = &input.dry_run {
        scope_5097.boolean(*var_5098);
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("GroupId");
    if let Some(var_5100) = &input.group_id {
        scope_5099.string(var_5100);
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("IpPermissions");
    if let Some(var_5102) = &input.ip_permissions {
        let mut list_5104 = scope_5101.start_list(true, Some("item"));
        for item_5103 in var_5102 {
            #[allow(unused_mut)]
            let mut entry_5105 = list_5104.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5105, item_5103);
        }
        list_5104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5107) = &input.security_group_rule_ids {
        let mut list_5109 = scope_5106.start_list(true, Some("item"));
        for item_5108 in var_5107 {
            #[allow(unused_mut)]
            let mut entry_5110 = list_5109.entry();
            entry_5110.string(item_5108);
        }
        list_5109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("CidrIp");
    if let Some(var_5112) = &input.cidr_ip {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("FromPort");
    if let Some(var_5114) = &input.from_port {
        scope_5113.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5114).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("IpProtocol");
    if let Some(var_5116) = &input.ip_protocol {
        scope_5115.string(var_5116);
    }
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("ToPort");
    if let Some(var_5118) = &input.to_port {
        scope_5117.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5119 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5120) = &input.source_security_group_name {
        scope_5119.string(var_5120);
    }
    #[allow(unused_mut)]
    let mut scope_5121 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5122) = &input.source_security_group_owner_id {
        scope_5121.string(var_5122);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5123 = writer.prefix("CidrIp");
    if let Some(var_5124) = &input.cidr_ip {
        scope_5123.string(var_5124);
    }
    #[allow(unused_mut)]
    let mut scope_5125 = writer.prefix("FromPort");
    if let Some(var_5126) = &input.from_port {
        scope_5125.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("GroupId");
    if let Some(var_5128) = &input.group_id {
        scope_5127.string(var_5128);
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("GroupName");
    if let Some(var_5130) = &input.group_name {
        scope_5129.string(var_5130);
    }
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("IpPermissions");
    if let Some(var_5132) = &input.ip_permissions {
        let mut list_5134 = scope_5131.start_list(true, Some("item"));
        for item_5133 in var_5132 {
            #[allow(unused_mut)]
            let mut entry_5135 = list_5134.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5135, item_5133);
        }
        list_5134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("IpProtocol");
    if let Some(var_5137) = &input.ip_protocol {
        scope_5136.string(var_5137);
    }
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5139) = &input.source_security_group_name {
        scope_5138.string(var_5139);
    }
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5141) = &input.source_security_group_owner_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("ToPort");
    if let Some(var_5143) = &input.to_port {
        scope_5142.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("DryRun");
    if let Some(var_5145) = &input.dry_run {
        scope_5144.boolean(*var_5145);
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5147) = &input.security_group_rule_ids {
        let mut list_5149 = scope_5146.start_list(true, Some("item"));
        for item_5148 in var_5147 {
            #[allow(unused_mut)]
            let mut entry_5150 = list_5149.entry();
            entry_5150.string(item_5148);
        }
        list_5149.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5151 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5152) = &input.block_device_mappings {
        let mut list_5154 = scope_5151.start_list(true, Some("BlockDeviceMapping"));
        for item_5153 in var_5152 {
            #[allow(unused_mut)]
            let mut entry_5155 = list_5154.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5155, item_5153,
            );
        }
        list_5154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("ImageId");
    if let Some(var_5157) = &input.image_id {
        scope_5156.string(var_5157);
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("InstanceType");
    if let Some(var_5159) = &input.instance_type {
        scope_5158.string(var_5159.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5161) = &input.ipv6_address_count {
        scope_5160.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5161).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("Ipv6Address");
    if let Some(var_5163) = &input.ipv6_addresses {
        let mut list_5165 = scope_5162.start_list(true, Some("item"));
        for item_5164 in var_5163 {
            #[allow(unused_mut)]
            let mut entry_5166 = list_5165.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5166, item_5164,
            );
        }
        list_5165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("KernelId");
    if let Some(var_5168) = &input.kernel_id {
        scope_5167.string(var_5168);
    }
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("KeyName");
    if let Some(var_5170) = &input.key_name {
        scope_5169.string(var_5170);
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("MaxCount");
    if let Some(var_5172) = &input.max_count {
        scope_5171.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("MinCount");
    if let Some(var_5174) = &input.min_count {
        scope_5173.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5174).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("Monitoring");
    if let Some(var_5176) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5175, var_5176,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("Placement");
    if let Some(var_5178) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5177, var_5178);
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("RamdiskId");
    if let Some(var_5180) = &input.ramdisk_id {
        scope_5179.string(var_5180);
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("SecurityGroupId");
    if let Some(var_5182) = &input.security_group_ids {
        let mut list_5184 = scope_5181.start_list(true, Some("SecurityGroupId"));
        for item_5183 in var_5182 {
            #[allow(unused_mut)]
            let mut entry_5185 = list_5184.entry();
            entry_5185.string(item_5183);
        }
        list_5184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("SecurityGroup");
    if let Some(var_5187) = &input.security_groups {
        let mut list_5189 = scope_5186.start_list(true, Some("SecurityGroup"));
        for item_5188 in var_5187 {
            #[allow(unused_mut)]
            let mut entry_5190 = list_5189.entry();
            entry_5190.string(item_5188);
        }
        list_5189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5191 = writer.prefix("SubnetId");
    if let Some(var_5192) = &input.subnet_id {
        scope_5191.string(var_5192);
    }
    #[allow(unused_mut)]
    let mut scope_5193 = writer.prefix("UserData");
    if let Some(var_5194) = &input.user_data {
        scope_5193.string(var_5194);
    }
    #[allow(unused_mut)]
    let mut scope_5195 = writer.prefix("AdditionalInfo");
    if let Some(var_5196) = &input.additional_info {
        scope_5195.string(var_5196);
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("ClientToken");
    if let Some(var_5198) = &input.client_token {
        scope_5197.string(var_5198);
    }
    #[allow(unused_mut)]
    let mut scope_5199 = writer.prefix("DisableApiTermination");
    if let Some(var_5200) = &input.disable_api_termination {
        scope_5199.boolean(*var_5200);
    }
    #[allow(unused_mut)]
    let mut scope_5201 = writer.prefix("DryRun");
    if let Some(var_5202) = &input.dry_run {
        scope_5201.boolean(*var_5202);
    }
    #[allow(unused_mut)]
    let mut scope_5203 = writer.prefix("EbsOptimized");
    if let Some(var_5204) = &input.ebs_optimized {
        scope_5203.boolean(*var_5204);
    }
    #[allow(unused_mut)]
    let mut scope_5205 = writer.prefix("IamInstanceProfile");
    if let Some(var_5206) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5205, var_5206,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5207 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5208) = &input.instance_initiated_shutdown_behavior {
        scope_5207.string(var_5208.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("NetworkInterface");
    if let Some(var_5210) = &input.network_interfaces {
        let mut list_5212 = scope_5209.start_list(true, Some("item"));
        for item_5211 in var_5210 {
            #[allow(unused_mut)]
            let mut entry_5213 = list_5212.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5213, item_5211);
        }
        list_5212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("PrivateIpAddress");
    if let Some(var_5215) = &input.private_ip_address {
        scope_5214.string(var_5215);
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5217) = &input.elastic_gpu_specification {
        let mut list_5219 = scope_5216.start_list(true, Some("item"));
        for item_5218 in var_5217 {
            #[allow(unused_mut)]
            let mut entry_5220 = list_5219.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5220, item_5218,
            );
        }
        list_5219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5222) = &input.elastic_inference_accelerators {
        let mut list_5224 = scope_5221.start_list(true, Some("item"));
        for item_5223 in var_5222 {
            #[allow(unused_mut)]
            let mut entry_5225 = list_5224.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5225, item_5223,
            );
        }
        list_5224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("TagSpecification");
    if let Some(var_5227) = &input.tag_specifications {
        let mut list_5229 = scope_5226.start_list(true, Some("item"));
        for item_5228 in var_5227 {
            #[allow(unused_mut)]
            let mut entry_5230 = list_5229.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5230, item_5228,
            );
        }
        list_5229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("LaunchTemplate");
    if let Some(var_5232) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5231, var_5232,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5234) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5233, var_5234,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("CreditSpecification");
    if let Some(var_5236) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5235, var_5236,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5237 = writer.prefix("CpuOptions");
    if let Some(var_5238) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_5237, var_5238);
    }
    #[allow(unused_mut)]
    let mut scope_5239 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5240) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5239, var_5240,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5241 = writer.prefix("HibernationOptions");
    if let Some(var_5242) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5241, var_5242,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5243 = writer.prefix("LicenseSpecification");
    if let Some(var_5244) = &input.license_specifications {
        let mut list_5246 = scope_5243.start_list(true, Some("item"));
        for item_5245 in var_5244 {
            #[allow(unused_mut)]
            let mut entry_5247 = list_5246.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5247, item_5245,
            );
        }
        list_5246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("MetadataOptions");
    if let Some(var_5249) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5248, var_5249,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("EnclaveOptions");
    if let Some(var_5251) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5250, var_5251,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("ClientToken");
    if let Some(var_5253) = &input.client_token {
        scope_5252.string(var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("DryRun");
    if let Some(var_5255) = &input.dry_run {
        scope_5254.boolean(*var_5255);
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("InstanceCount");
    if let Some(var_5257) = &input.instance_count {
        scope_5256.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("LaunchSpecification");
    if let Some(var_5259) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5258, var_5259,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5261) = &input.scheduled_instance_id {
        scope_5260.string(var_5261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5263) = &input.local_gateway_route_table_id {
        scope_5262.string(var_5263);
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("Filter");
    if let Some(var_5265) = &input.filters {
        let mut list_5267 = scope_5264.start_list(true, Some("Filter"));
        for item_5266 in var_5265 {
            #[allow(unused_mut)]
            let mut entry_5268 = list_5267.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5268, item_5266);
        }
        list_5267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("MaxResults");
    if let Some(var_5270) = &input.max_results {
        scope_5269.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("NextToken");
    if let Some(var_5272) = &input.next_token {
        scope_5271.string(var_5272);
    }
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("DryRun");
    if let Some(var_5274) = &input.dry_run {
        scope_5273.boolean(*var_5274);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5276) = &input.transit_gateway_multicast_domain_id {
        scope_5275.string(var_5276);
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("Filter");
    if let Some(var_5278) = &input.filters {
        let mut list_5280 = scope_5277.start_list(true, Some("Filter"));
        for item_5279 in var_5278 {
            #[allow(unused_mut)]
            let mut entry_5281 = list_5280.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5281, item_5279);
        }
        list_5280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5282 = writer.prefix("MaxResults");
    if let Some(var_5283) = &input.max_results {
        scope_5282.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5283).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5284 = writer.prefix("NextToken");
    if let Some(var_5285) = &input.next_token {
        scope_5284.string(var_5285);
    }
    #[allow(unused_mut)]
    let mut scope_5286 = writer.prefix("DryRun");
    if let Some(var_5287) = &input.dry_run {
        scope_5286.boolean(*var_5287);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5288 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5289) = &input.transit_gateway_route_table_id {
        scope_5288.string(var_5289);
    }
    #[allow(unused_mut)]
    let mut scope_5290 = writer.prefix("Filter");
    if let Some(var_5291) = &input.filters {
        let mut list_5293 = scope_5290.start_list(true, Some("Filter"));
        for item_5292 in var_5291 {
            #[allow(unused_mut)]
            let mut entry_5294 = list_5293.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5294, item_5292);
        }
        list_5293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5295 = writer.prefix("MaxResults");
    if let Some(var_5296) = &input.max_results {
        scope_5295.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5297 = writer.prefix("DryRun");
    if let Some(var_5298) = &input.dry_run {
        scope_5297.boolean(*var_5298);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5299 = writer.prefix("InstanceId");
    if let Some(var_5300) = &input.instance_id {
        scope_5299.string(var_5300);
    }
    #[allow(unused_mut)]
    let mut scope_5301 = writer.prefix("DryRun");
    if let Some(var_5302) = &input.dry_run {
        scope_5301.boolean(*var_5302);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5303 = writer.prefix("InstanceId");
    if let Some(var_5304) = &input.instance_ids {
        let mut list_5306 = scope_5303.start_list(true, Some("InstanceId"));
        for item_5305 in var_5304 {
            #[allow(unused_mut)]
            let mut entry_5307 = list_5306.entry();
            entry_5307.string(item_5305);
        }
        list_5306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("AdditionalInfo");
    if let Some(var_5309) = &input.additional_info {
        scope_5308.string(var_5309);
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("DryRun");
    if let Some(var_5311) = &input.dry_run {
        scope_5310.boolean(*var_5311);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5313) = &input.network_insights_path_id {
        scope_5312.string(var_5313);
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("FilterInArn");
    if let Some(var_5315) = &input.filter_in_arns {
        let mut list_5317 = scope_5314.start_list(true, Some("item"));
        for item_5316 in var_5315 {
            #[allow(unused_mut)]
            let mut entry_5318 = list_5317.entry();
            entry_5318.string(item_5316);
        }
        list_5317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("DryRun");
    if let Some(var_5320) = &input.dry_run {
        scope_5319.boolean(*var_5320);
    }
    #[allow(unused_mut)]
    let mut scope_5321 = writer.prefix("TagSpecification");
    if let Some(var_5322) = &input.tag_specifications {
        let mut list_5324 = scope_5321.start_list(true, Some("item"));
        for item_5323 in var_5322 {
            #[allow(unused_mut)]
            let mut entry_5325 = list_5324.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5325, item_5323,
            );
        }
        list_5324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("ClientToken");
    if let Some(var_5327) = &input.client_token {
        scope_5326.string(var_5327);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("DryRun");
    if let Some(var_5329) = &input.dry_run {
        scope_5328.boolean(*var_5329);
    }
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("ServiceId");
    if let Some(var_5331) = &input.service_id {
        scope_5330.string(var_5331);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("InstanceId");
    if let Some(var_5333) = &input.instance_ids {
        let mut list_5335 = scope_5332.start_list(true, Some("InstanceId"));
        for item_5334 in var_5333 {
            #[allow(unused_mut)]
            let mut entry_5336 = list_5335.entry();
            entry_5336.string(item_5334);
        }
        list_5335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("Hibernate");
    if let Some(var_5338) = &input.hibernate {
        scope_5337.boolean(*var_5338);
    }
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("DryRun");
    if let Some(var_5340) = &input.dry_run {
        scope_5339.boolean(*var_5340);
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("Force");
    if let Some(var_5342) = &input.force {
        scope_5341.boolean(*var_5342);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5343 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5344) = &input.client_vpn_endpoint_id {
        scope_5343.string(var_5344);
    }
    #[allow(unused_mut)]
    let mut scope_5345 = writer.prefix("ConnectionId");
    if let Some(var_5346) = &input.connection_id {
        scope_5345.string(var_5346);
    }
    #[allow(unused_mut)]
    let mut scope_5347 = writer.prefix("Username");
    if let Some(var_5348) = &input.username {
        scope_5347.string(var_5348);
    }
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("DryRun");
    if let Some(var_5350) = &input.dry_run {
        scope_5349.boolean(*var_5350);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("InstanceId");
    if let Some(var_5352) = &input.instance_ids {
        let mut list_5354 = scope_5351.start_list(true, Some("InstanceId"));
        for item_5353 in var_5352 {
            #[allow(unused_mut)]
            let mut entry_5355 = list_5354.entry();
            entry_5355.string(item_5353);
        }
        list_5354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("DryRun");
    if let Some(var_5357) = &input.dry_run {
        scope_5356.boolean(*var_5357);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("Ipv6Addresses");
    if let Some(var_5359) = &input.ipv6_addresses {
        let mut list_5361 = scope_5358.start_list(true, Some("item"));
        for item_5360 in var_5359 {
            #[allow(unused_mut)]
            let mut entry_5362 = list_5361.entry();
            entry_5362.string(item_5360);
        }
        list_5361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5363 = writer.prefix("Ipv6Prefix");
    if let Some(var_5364) = &input.ipv6_prefixes {
        let mut list_5366 = scope_5363.start_list(true, Some("item"));
        for item_5365 in var_5364 {
            #[allow(unused_mut)]
            let mut entry_5367 = list_5366.entry();
            entry_5367.string(item_5365);
        }
        list_5366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5369) = &input.network_interface_id {
        scope_5368.string(var_5369);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5371) = &input.network_interface_id {
        scope_5370.string(var_5371);
    }
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("PrivateIpAddress");
    if let Some(var_5373) = &input.private_ip_addresses {
        let mut list_5375 = scope_5372.start_list(true, Some("PrivateIpAddress"));
        for item_5374 in var_5373 {
            #[allow(unused_mut)]
            let mut entry_5376 = list_5375.entry();
            entry_5376.string(item_5374);
        }
        list_5375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("Ipv4Prefix");
    if let Some(var_5378) = &input.ipv4_prefixes {
        let mut list_5380 = scope_5377.start_list(true, Some("item"));
        for item_5379 in var_5378 {
            #[allow(unused_mut)]
            let mut entry_5381 = list_5380.entry();
            entry_5381.string(item_5379);
        }
        list_5380.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5382 = writer.prefix("InstanceId");
    if let Some(var_5383) = &input.instance_ids {
        let mut list_5385 = scope_5382.start_list(true, Some("InstanceId"));
        for item_5384 in var_5383 {
            #[allow(unused_mut)]
            let mut entry_5386 = list_5385.entry();
            entry_5386.string(item_5384);
        }
        list_5385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("DryRun");
    if let Some(var_5388) = &input.dry_run {
        scope_5387.boolean(*var_5388);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("DryRun");
    if let Some(var_5390) = &input.dry_run {
        scope_5389.boolean(*var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("GroupId");
    if let Some(var_5392) = &input.group_id {
        scope_5391.string(var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("GroupName");
    if let Some(var_5394) = &input.group_name {
        scope_5393.string(var_5394);
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("IpPermissions");
    if let Some(var_5396) = &input.ip_permissions {
        let mut list_5398 = scope_5395.start_list(true, Some("item"));
        for item_5397 in var_5396 {
            #[allow(unused_mut)]
            let mut entry_5399 = list_5398.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5399, item_5397);
        }
        list_5398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5400 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5401) = &input.security_group_rule_descriptions {
        let mut list_5403 = scope_5400.start_list(true, Some("item"));
        for item_5402 in var_5401 {
            #[allow(unused_mut)]
            let mut entry_5404 = list_5403.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5404, item_5402,
            );
        }
        list_5403.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("DryRun");
    if let Some(var_5406) = &input.dry_run {
        scope_5405.boolean(*var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("GroupId");
    if let Some(var_5408) = &input.group_id {
        scope_5407.string(var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("GroupName");
    if let Some(var_5410) = &input.group_name {
        scope_5409.string(var_5410);
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("IpPermissions");
    if let Some(var_5412) = &input.ip_permissions {
        let mut list_5414 = scope_5411.start_list(true, Some("item"));
        for item_5413 in var_5412 {
            #[allow(unused_mut)]
            let mut entry_5415 = list_5414.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5415, item_5413);
        }
        list_5414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5416 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5417) = &input.security_group_rule_descriptions {
        let mut list_5419 = scope_5416.start_list(true, Some("item"));
        for item_5418 in var_5417 {
            #[allow(unused_mut)]
            let mut entry_5420 = list_5419.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5420, item_5418,
            );
        }
        list_5419.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5421 = writer.prefix("Cidr");
    if let Some(var_5422) = &input.cidr {
        scope_5421.string(var_5422);
    }
    #[allow(unused_mut)]
    let mut scope_5423 = writer.prefix("DryRun");
    if let Some(var_5424) = &input.dry_run {
        scope_5423.boolean(*var_5424);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
