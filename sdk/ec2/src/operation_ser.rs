// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("DryRun");
    if let Some(var_86) = &input.dry_run {
        scope_85.boolean(*var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("IpamPoolId");
    if let Some(var_88) = &input.ipam_pool_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Cidr");
    if let Some(var_90) = &input.cidr {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("NetmaskLength");
    if let Some(var_92) = &input.netmask_length {
        scope_91.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("ClientToken");
    if let Some(var_94) = &input.client_token {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Description");
    if let Some(var_96) = &input.description {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreviewNextCidr");
    if let Some(var_98) = &input.preview_next_cidr {
        scope_97.boolean(*var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("DisallowedCidr");
    if let Some(var_100) = &input.disallowed_cidrs {
        let mut list_102 = scope_99.start_list(true, Some("item"));
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            entry_103.string(item_101);
        }
        list_102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_105) = &input.client_vpn_endpoint_id {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("VpcId");
    if let Some(var_107) = &input.vpc_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SecurityGroupId");
    if let Some(var_109) = &input.security_group_ids {
        let mut list_111 = scope_108.start_list(true, Some("item"));
        for item_110 in var_109 {
            #[allow(unused_mut)]
            let mut entry_112 = list_111.entry();
            entry_112.string(item_110);
        }
        list_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("DryRun");
    if let Some(var_114) = &input.dry_run {
        scope_113.boolean(*var_114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Ipv6AddressCount");
    if let Some(var_116) = &input.ipv6_address_count {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6Addresses");
    if let Some(var_118) = &input.ipv6_addresses {
        let mut list_120 = scope_117.start_list(true, Some("item"));
        for item_119 in var_118 {
            #[allow(unused_mut)]
            let mut entry_121 = list_120.entry();
            entry_121.string(item_119);
        }
        list_120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_123) = &input.ipv6_prefix_count {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6Prefix");
    if let Some(var_125) = &input.ipv6_prefixes {
        let mut list_127 = scope_124.start_list(true, Some("item"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            entry_128.string(item_126);
        }
        list_127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_130) = &input.network_interface_id {
        scope_129.string(var_130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("AllowReassignment");
    if let Some(var_132) = &input.allow_reassignment {
        scope_131.boolean(*var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("NetworkInterfaceId");
    if let Some(var_134) = &input.network_interface_id {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PrivateIpAddress");
    if let Some(var_136) = &input.private_ip_addresses {
        let mut list_138 = scope_135.start_list(true, Some("PrivateIpAddress"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_141) = &input.secondary_private_ip_address_count {
        scope_140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Ipv4Prefix");
    if let Some(var_143) = &input.ipv4_prefixes {
        let mut list_145 = scope_142.start_list(true, Some("item"));
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            entry_146.string(item_144);
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_148) = &input.ipv4_prefix_count {
        scope_147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AllocationId");
    if let Some(var_150) = &input.allocation_id {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("InstanceId");
    if let Some(var_152) = &input.instance_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("PublicIp");
    if let Some(var_154) = &input.public_ip {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AllowReassociation");
    if let Some(var_156) = &input.allow_reassociation {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DryRun");
    if let Some(var_158) = &input.dry_run {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NetworkInterfaceId");
    if let Some(var_160) = &input.network_interface_id {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("PrivateIpAddress");
    if let Some(var_162) = &input.private_ip_address {
        scope_161.string(var_162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_164) = &input.client_vpn_endpoint_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("SubnetId");
    if let Some(var_166) = &input.subnet_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("ClientToken");
    if let Some(var_168) = &input.client_token {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("DryRun");
    if let Some(var_170) = &input.dry_run {
        scope_169.boolean(*var_170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DhcpOptionsId");
    if let Some(var_172) = &input.dhcp_options_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("VpcId");
    if let Some(var_174) = &input.vpc_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DryRun");
    if let Some(var_176) = &input.dry_run {
        scope_175.boolean(*var_176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("CertificateArn");
    if let Some(var_178) = &input.certificate_arn {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("RoleArn");
    if let Some(var_180) = &input.role_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("DryRun");
    if let Some(var_182) = &input.dry_run {
        scope_181.boolean(*var_182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("IamInstanceProfile");
    if let Some(var_184) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_183, var_184,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("InstanceId");
    if let Some(var_186) = &input.instance_id {
        scope_185.string(var_186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("DryRun");
    if let Some(var_188) = &input.dry_run {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("InstanceEventWindowId");
    if let Some(var_190) = &input.instance_event_window_id {
        scope_189.string(var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("AssociationTarget");
    if let Some(var_192) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_191, var_192)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("DryRun");
    if let Some(var_194) = &input.dry_run {
        scope_193.boolean(*var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("RouteTableId");
    if let Some(var_196) = &input.route_table_id {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SubnetId");
    if let Some(var_198) = &input.subnet_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("GatewayId");
    if let Some(var_200) = &input.gateway_id {
        scope_199.string(var_200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_202) = &input.ipv6_cidr_block {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("SubnetId");
    if let Some(var_204) = &input.subnet_id {
        scope_203.string(var_204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_206) = &input.transit_gateway_multicast_domain_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_208) = &input.transit_gateway_attachment_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SubnetIds");
    if let Some(var_210) = &input.subnet_ids {
        let mut list_212 = scope_209.start_list(true, Some("item"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DryRun");
    if let Some(var_215) = &input.dry_run {
        scope_214.boolean(*var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_217) = &input.transit_gateway_route_table_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("DryRun");
    if let Some(var_221) = &input.dry_run {
        scope_220.boolean(*var_221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("BranchInterfaceId");
    if let Some(var_223) = &input.branch_interface_id {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TrunkInterfaceId");
    if let Some(var_225) = &input.trunk_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("VlanId");
    if let Some(var_227) = &input.vlan_id {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("GreKey");
    if let Some(var_229) = &input.gre_key {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("ClientToken");
    if let Some(var_231) = &input.client_token {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("DryRun");
    if let Some(var_233) = &input.dry_run {
        scope_232.boolean(*var_233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_235) = &input.amazon_provided_ipv6_cidr_block {
        scope_234.boolean(*var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("CidrBlock");
    if let Some(var_237) = &input.cidr_block {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("VpcId");
    if let Some(var_239) = &input.vpc_id {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_241) = &input.ipv6_cidr_block_network_border_group {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6Pool");
    if let Some(var_243) = &input.ipv6_pool {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_245) = &input.ipv6_cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_247) = &input.ipv4_ipam_pool_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_249) = &input.ipv4_netmask_length {
        scope_248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_251) = &input.ipv6_ipam_pool_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_253) = &input.ipv6_netmask_length {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("DryRun");
    if let Some(var_255) = &input.dry_run {
        scope_254.boolean(*var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("SecurityGroupId");
    if let Some(var_257) = &input.groups {
        let mut list_259 = scope_256.start_list(true, Some("groupId"));
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            entry_260.string(item_258);
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceId");
    if let Some(var_262) = &input.instance_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("VpcId");
    if let Some(var_264) = &input.vpc_id {
        scope_263.string(var_264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("DryRun");
    if let Some(var_266) = &input.dry_run {
        scope_265.boolean(*var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("InternetGatewayId");
    if let Some(var_268) = &input.internet_gateway_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("VpcId");
    if let Some(var_270) = &input.vpc_id {
        scope_269.string(var_270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DeviceIndex");
    if let Some(var_272) = &input.device_index {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InstanceId");
    if let Some(var_276) = &input.instance_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("NetworkInterfaceId");
    if let Some(var_278) = &input.network_interface_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkCardIndex");
    if let Some(var_280) = &input.network_card_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Device");
    if let Some(var_282) = &input.device {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("VolumeId");
    if let Some(var_286) = &input.volume_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DryRun");
    if let Some(var_288) = &input.dry_run {
        scope_287.boolean(*var_288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("VpcId");
    if let Some(var_290) = &input.vpc_id {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpnGatewayId");
    if let Some(var_292) = &input.vpn_gateway_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DryRun");
    if let Some(var_294) = &input.dry_run {
        scope_293.boolean(*var_294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_296) = &input.client_vpn_endpoint_id {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("TargetNetworkCidr");
    if let Some(var_298) = &input.target_network_cidr {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("AccessGroupId");
    if let Some(var_300) = &input.access_group_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_302) = &input.authorize_all_groups {
        scope_301.boolean(*var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Description");
    if let Some(var_304) = &input.description {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("ClientToken");
    if let Some(var_306) = &input.client_token {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("DryRun");
    if let Some(var_308) = &input.dry_run {
        scope_307.boolean(*var_308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("GroupId");
    if let Some(var_312) = &input.group_id {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("IpPermissions");
    if let Some(var_314) = &input.ip_permissions {
        let mut list_316 = scope_313.start_list(true, Some("item"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_317, item_315)?;
        }
        list_316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("TagSpecification");
    if let Some(var_319) = &input.tag_specifications {
        let mut list_321 = scope_318.start_list(true, Some("item"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_322, item_320,
            )?;
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("CidrIp");
    if let Some(var_324) = &input.cidr_ip {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("FromPort");
    if let Some(var_326) = &input.from_port {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("IpProtocol");
    if let Some(var_328) = &input.ip_protocol {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ToPort");
    if let Some(var_330) = &input.to_port {
        scope_329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_332) = &input.source_security_group_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_334) = &input.source_security_group_owner_id {
        scope_333.string(var_334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CidrIp");
    if let Some(var_336) = &input.cidr_ip {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FromPort");
    if let Some(var_338) = &input.from_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("GroupId");
    if let Some(var_340) = &input.group_id {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupName");
    if let Some(var_342) = &input.group_name {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("IpPermissions");
    if let Some(var_344) = &input.ip_permissions {
        let mut list_346 = scope_343.start_list(true, Some("item"));
        for item_345 in var_344 {
            #[allow(unused_mut)]
            let mut entry_347 = list_346.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_347, item_345)?;
        }
        list_346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("IpProtocol");
    if let Some(var_349) = &input.ip_protocol {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_351) = &input.source_security_group_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_353) = &input.source_security_group_owner_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ToPort");
    if let Some(var_355) = &input.to_port {
        scope_354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DryRun");
    if let Some(var_357) = &input.dry_run {
        scope_356.boolean(*var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("TagSpecification");
    if let Some(var_359) = &input.tag_specifications {
        let mut list_361 = scope_358.start_list(true, Some("item"));
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_362, item_360,
            )?;
        }
        list_361.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("InstanceId");
    if let Some(var_364) = &input.instance_id {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("Storage");
    if let Some(var_366) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_365, var_366)?;
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("BundleId");
    if let Some(var_370) = &input.bundle_id {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("DryRun");
    if let Some(var_372) = &input.dry_run {
        scope_371.boolean(*var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("CapacityReservationId");
    if let Some(var_374) = &input.capacity_reservation_id {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_380) = &input.capacity_reservation_fleet_ids {
        let mut list_382 = scope_379.start_list(true, Some("item"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            entry_383.string(item_381);
        }
        list_382.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ConversionTaskId");
    if let Some(var_385) = &input.conversion_task_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("ReasonMessage");
    if let Some(var_389) = &input.reason_message {
        scope_388.string(var_389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ExportTaskId");
    if let Some(var_391) = &input.export_task_id {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("CancelReason");
    if let Some(var_393) = &input.cancel_reason {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ImportTaskId");
    if let Some(var_397) = &input.import_task_id {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_399) = &input.reserved_instances_listing_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DryRun");
    if let Some(var_401) = &input.dry_run {
        scope_400.boolean(*var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SpotFleetRequestId");
    if let Some(var_403) = &input.spot_fleet_request_ids {
        let mut list_405 = scope_402.start_list(true, Some("item"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("TerminateInstances");
    if let Some(var_408) = &input.terminate_instances {
        scope_407.boolean(*var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("DryRun");
    if let Some(var_410) = &input.dry_run {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_412) = &input.spot_instance_request_ids {
        let mut list_414 = scope_411.start_list(true, Some("SpotInstanceRequestId"));
        for item_413 in var_412 {
            #[allow(unused_mut)]
            let mut entry_415 = list_414.entry();
            entry_415.string(item_413);
        }
        list_414.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("InstanceId");
    if let Some(var_417) = &input.instance_id {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("ProductCode");
    if let Some(var_419) = &input.product_code {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DryRun");
    if let Some(var_421) = &input.dry_run {
        scope_420.boolean(*var_421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("SourceFpgaImageId");
    if let Some(var_425) = &input.source_fpga_image_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("Description");
    if let Some(var_427) = &input.description {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Name");
    if let Some(var_429) = &input.name {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("ClientToken");
    if let Some(var_433) = &input.client_token {
        scope_432.string(var_433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Description");
    if let Some(var_437) = &input.description {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Encrypted");
    if let Some(var_439) = &input.encrypted {
        scope_438.boolean(*var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("KmsKeyId");
    if let Some(var_441) = &input.kms_key_id {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("Name");
    if let Some(var_443) = &input.name {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("SourceImageId");
    if let Some(var_445) = &input.source_image_id {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceRegion");
    if let Some(var_447) = &input.source_region {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("DestinationOutpostArn");
    if let Some(var_449) = &input.destination_outpost_arn {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DryRun");
    if let Some(var_451) = &input.dry_run {
        scope_450.boolean(*var_451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Description");
    if let Some(var_453) = &input.description {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DestinationOutpostArn");
    if let Some(var_455) = &input.destination_outpost_arn {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationRegion");
    if let Some(var_457) = &input.destination_region {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Encrypted");
    if let Some(var_459) = &input.encrypted {
        scope_458.boolean(*var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("KmsKeyId");
    if let Some(var_461) = &input.kms_key_id {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("PresignedUrl");
    if let Some(var_463) = &input.presigned_url {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("SourceRegion");
    if let Some(var_465) = &input.source_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceSnapshotId");
    if let Some(var_467) = &input.source_snapshot_id {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("TagSpecification");
    if let Some(var_469) = &input.tag_specifications {
        let mut list_471 = scope_468.start_list(true, Some("item"));
        for item_470 in var_469 {
            #[allow(unused_mut)]
            let mut entry_472 = list_471.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_472, item_470,
            )?;
        }
        list_471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("DryRun");
    if let Some(var_474) = &input.dry_run {
        scope_473.boolean(*var_474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ClientToken");
    if let Some(var_476) = &input.client_token {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("InstanceType");
    if let Some(var_478) = &input.instance_type {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstancePlatform");
    if let Some(var_480) = &input.instance_platform {
        scope_479.string(var_480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AvailabilityZone");
    if let Some(var_482) = &input.availability_zone {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZoneId");
    if let Some(var_484) = &input.availability_zone_id {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Tenancy");
    if let Some(var_486) = &input.tenancy {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstanceCount");
    if let Some(var_488) = &input.instance_count {
        scope_487.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("EbsOptimized");
    if let Some(var_490) = &input.ebs_optimized {
        scope_489.boolean(*var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EphemeralStorage");
    if let Some(var_492) = &input.ephemeral_storage {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EndDate");
    if let Some(var_494) = &input.end_date {
        scope_493.date_time(var_494, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDateType");
    if let Some(var_496) = &input.end_date_type {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_498) = &input.instance_match_criteria {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("TagSpecifications");
    if let Some(var_500) = &input.tag_specifications {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_503, item_501,
            )?;
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("DryRun");
    if let Some(var_505) = &input.dry_run {
        scope_504.boolean(*var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("OutpostArn");
    if let Some(var_507) = &input.outpost_arn {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("PlacementGroupArn");
    if let Some(var_509) = &input.placement_group_arn {
        scope_508.string(var_509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("AllocationStrategy");
    if let Some(var_511) = &input.allocation_strategy {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("ClientToken");
    if let Some(var_513) = &input.client_token {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_515) = &input.instance_type_specifications {
        let mut list_517 = scope_514.start_list(true, None);
        for item_516 in var_515 {
            #[allow(unused_mut)]
            let mut entry_518 = list_517.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_518, item_516)?;
        }
        list_517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("Tenancy");
    if let Some(var_520) = &input.tenancy {
        scope_519.string(var_520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("TotalTargetCapacity");
    if let Some(var_522) = &input.total_target_capacity {
        scope_521.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_522).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("EndDate");
    if let Some(var_524) = &input.end_date {
        scope_523.date_time(var_524, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_526) = &input.instance_match_criteria {
        scope_525.string(var_526.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("TagSpecification");
    if let Some(var_528) = &input.tag_specifications {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_531, item_529,
            )?;
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("DryRun");
    if let Some(var_533) = &input.dry_run {
        scope_532.boolean(*var_533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpcId");
    if let Some(var_535) = &input.vpc_id {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("TagSpecification");
    if let Some(var_537) = &input.tag_specifications {
        let mut list_539 = scope_536.start_list(true, Some("item"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_540, item_538,
            )?;
        }
        list_539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("DryRun");
    if let Some(var_542) = &input.dry_run {
        scope_541.boolean(*var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("ClientToken");
    if let Some(var_544) = &input.client_token {
        scope_543.string(var_544);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientCidrBlock");
    if let Some(var_546) = &input.client_cidr_block {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ServerCertificateArn");
    if let Some(var_548) = &input.server_certificate_arn {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Authentication");
    if let Some(var_550) = &input.authentication_options {
        let mut list_552 = scope_549.start_list(true, None);
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_553, item_551,
            )?;
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("ConnectionLogOptions");
    if let Some(var_555) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_554, var_555,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DnsServers");
    if let Some(var_557) = &input.dns_servers {
        let mut list_559 = scope_556.start_list(true, Some("item"));
        for item_558 in var_557 {
            #[allow(unused_mut)]
            let mut entry_560 = list_559.entry();
            entry_560.string(item_558);
        }
        list_559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("TransportProtocol");
    if let Some(var_562) = &input.transport_protocol {
        scope_561.string(var_562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("VpnPort");
    if let Some(var_564) = &input.vpn_port {
        scope_563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("Description");
    if let Some(var_566) = &input.description {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("SplitTunnel");
    if let Some(var_568) = &input.split_tunnel {
        scope_567.boolean(*var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("DryRun");
    if let Some(var_570) = &input.dry_run {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("ClientToken");
    if let Some(var_572) = &input.client_token {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("TagSpecification");
    if let Some(var_574) = &input.tag_specifications {
        let mut list_576 = scope_573.start_list(true, Some("item"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_577, item_575,
            )?;
        }
        list_576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("SecurityGroupId");
    if let Some(var_579) = &input.security_group_ids {
        let mut list_581 = scope_578.start_list(true, Some("item"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            entry_582.string(item_580);
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("VpcId");
    if let Some(var_584) = &input.vpc_id {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("SelfServicePortal");
    if let Some(var_586) = &input.self_service_portal {
        scope_585.string(var_586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("ClientConnectOptions");
    if let Some(var_588) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_587, var_588,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("SessionTimeoutHours");
    if let Some(var_590) = &input.session_timeout_hours {
        scope_589.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_590).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_592) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_591, var_592,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_594) = &input.client_vpn_endpoint_id {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DestinationCidrBlock");
    if let Some(var_596) = &input.destination_cidr_block {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_598) = &input.target_vpc_subnet_id {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Description");
    if let Some(var_600) = &input.description {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("ClientToken");
    if let Some(var_602) = &input.client_token {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DryRun");
    if let Some(var_604) = &input.dry_run {
        scope_603.boolean(*var_604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("BgpAsn");
    if let Some(var_606) = &input.bgp_asn {
        scope_605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_606).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("IpAddress");
    if let Some(var_608) = &input.public_ip {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("CertificateArn");
    if let Some(var_610) = &input.certificate_arn {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Type");
    if let Some(var_612) = &input.r#type {
        scope_611.string(var_612.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            )?;
        }
        list_616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DeviceName");
    if let Some(var_619) = &input.device_name {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DryRun");
    if let Some(var_621) = &input.dry_run {
        scope_620.boolean(*var_621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("AvailabilityZone");
    if let Some(var_623) = &input.availability_zone {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("Ipv6Native");
    if let Some(var_627) = &input.ipv6_native {
        scope_626.boolean(*var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DryRun");
    if let Some(var_629) = &input.dry_run {
        scope_628.boolean(*var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("DhcpConfiguration");
    if let Some(var_631) = &input.dhcp_configurations {
        let mut list_633 = scope_630.start_list(true, Some("item"));
        for item_632 in var_631 {
            #[allow(unused_mut)]
            let mut entry_634 = list_633.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_634, item_632,
            )?;
        }
        list_633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TagSpecification");
    if let Some(var_636) = &input.tag_specifications {
        let mut list_638 = scope_635.start_list(true, Some("item"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_639, item_637,
            )?;
        }
        list_638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DryRun");
    if let Some(var_641) = &input.dry_run {
        scope_640.boolean(*var_641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("ClientToken");
    if let Some(var_643) = &input.client_token {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DryRun");
    if let Some(var_645) = &input.dry_run {
        scope_644.boolean(*var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("VpcId");
    if let Some(var_647) = &input.vpc_id {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("TagSpecification");
    if let Some(var_649) = &input.tag_specifications {
        let mut list_651 = scope_648.start_list(true, Some("item"));
        for item_650 in var_649 {
            #[allow(unused_mut)]
            let mut entry_652 = list_651.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_652, item_650,
            )?;
        }
        list_651.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("DryRun");
    if let Some(var_654) = &input.dry_run {
        scope_653.boolean(*var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("ClientToken");
    if let Some(var_656) = &input.client_token {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("SpotOptions");
    if let Some(var_658) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_657, var_658)?;
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("OnDemandOptions");
    if let Some(var_660) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_659, var_660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_662) = &input.excess_capacity_termination_policy {
        scope_661.string(var_662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_664) = &input.launch_template_configs {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_667, item_665,
            )?;
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_669) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_668, var_669,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_671) = &input.terminate_instances_with_expiration {
        scope_670.boolean(*var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("Type");
    if let Some(var_673) = &input.r#type {
        scope_672.string(var_673.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("ValidFrom");
    if let Some(var_675) = &input.valid_from {
        scope_674.date_time(var_675, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("ValidUntil");
    if let Some(var_677) = &input.valid_until {
        scope_676.date_time(var_677, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_679) = &input.replace_unhealthy_instances {
        scope_678.boolean(*var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("TagSpecification");
    if let Some(var_681) = &input.tag_specifications {
        let mut list_683 = scope_680.start_list(true, Some("item"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_684, item_682,
            )?;
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("Context");
    if let Some(var_686) = &input.context {
        scope_685.string(var_686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("DryRun");
    if let Some(var_688) = &input.dry_run {
        scope_687.boolean(*var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("ClientToken");
    if let Some(var_690) = &input.client_token {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_692) = &input.deliver_logs_permission_arn {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("LogGroupName");
    if let Some(var_694) = &input.log_group_name {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("ResourceId");
    if let Some(var_696) = &input.resource_ids {
        let mut list_698 = scope_695.start_list(true, Some("item"));
        for item_697 in var_696 {
            #[allow(unused_mut)]
            let mut entry_699 = list_698.entry();
            entry_699.string(item_697);
        }
        list_698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("ResourceType");
    if let Some(var_701) = &input.resource_type {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("TrafficType");
    if let Some(var_703) = &input.traffic_type {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("LogDestinationType");
    if let Some(var_705) = &input.log_destination_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("LogDestination");
    if let Some(var_707) = &input.log_destination {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogFormat");
    if let Some(var_709) = &input.log_format {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("TagSpecification");
    if let Some(var_711) = &input.tag_specifications {
        let mut list_713 = scope_710.start_list(true, Some("item"));
        for item_712 in var_711 {
            #[allow(unused_mut)]
            let mut entry_714 = list_713.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_714, item_712,
            )?;
        }
        list_713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("MaxAggregationInterval");
    if let Some(var_716) = &input.max_aggregation_interval {
        scope_715.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_716).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("DestinationOptions");
    if let Some(var_718) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_717, var_718,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DryRun");
    if let Some(var_720) = &input.dry_run {
        scope_719.boolean(*var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("InputStorageLocation");
    if let Some(var_722) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_721, var_722)?;
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("LogsStorageLocation");
    if let Some(var_724) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_723, var_724)?;
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("Description");
    if let Some(var_726) = &input.description {
        scope_725.string(var_726);
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Name");
    if let Some(var_728) = &input.name {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("ClientToken");
    if let Some(var_730) = &input.client_token {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("TagSpecification");
    if let Some(var_732) = &input.tag_specifications {
        let mut list_734 = scope_731.start_list(true, Some("item"));
        for item_733 in var_732 {
            #[allow(unused_mut)]
            let mut entry_735 = list_734.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_735, item_733,
            )?;
        }
        list_734.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("BlockDeviceMapping");
    if let Some(var_737) = &input.block_device_mappings {
        let mut list_739 = scope_736.start_list(true, Some("BlockDeviceMapping"));
        for item_738 in var_737 {
            #[allow(unused_mut)]
            let mut entry_740 = list_739.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_740, item_738,
            )?;
        }
        list_739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Description");
    if let Some(var_742) = &input.description {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("DryRun");
    if let Some(var_744) = &input.dry_run {
        scope_743.boolean(*var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("InstanceId");
    if let Some(var_746) = &input.instance_id {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("Name");
    if let Some(var_748) = &input.name {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("NoReboot");
    if let Some(var_750) = &input.no_reboot {
        scope_749.boolean(*var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("TagSpecification");
    if let Some(var_752) = &input.tag_specifications {
        let mut list_754 = scope_751.start_list(true, Some("item"));
        for item_753 in var_752 {
            #[allow(unused_mut)]
            let mut entry_755 = list_754.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_755, item_753,
            )?;
        }
        list_754.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DryRun");
    if let Some(var_757) = &input.dry_run {
        scope_756.boolean(*var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Name");
    if let Some(var_759) = &input.name {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("TimeRange");
    if let Some(var_761) = &input.time_ranges {
        let mut list_763 = scope_760.start_list(true, None);
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_764, item_762)?;
        }
        list_763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("CronExpression");
    if let Some(var_766) = &input.cron_expression {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("TagSpecification");
    if let Some(var_768) = &input.tag_specifications {
        let mut list_770 = scope_767.start_list(true, Some("item"));
        for item_769 in var_768 {
            #[allow(unused_mut)]
            let mut entry_771 = list_770.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_771, item_769,
            )?;
        }
        list_770.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Description");
    if let Some(var_773) = &input.description {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("ExportToS3");
    if let Some(var_775) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_774, var_775,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("InstanceId");
    if let Some(var_777) = &input.instance_id {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TargetEnvironment");
    if let Some(var_779) = &input.target_environment {
        scope_778.string(var_779.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("TagSpecification");
    if let Some(var_781) = &input.tag_specifications {
        let mut list_783 = scope_780.start_list(true, Some("item"));
        for item_782 in var_781 {
            #[allow(unused_mut)]
            let mut entry_784 = list_783.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_784, item_782,
            )?;
        }
        list_783.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("TagSpecification");
    if let Some(var_786) = &input.tag_specifications {
        let mut list_788 = scope_785.start_list(true, Some("item"));
        for item_787 in var_786 {
            #[allow(unused_mut)]
            let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_789, item_787,
            )?;
        }
        list_788.finish();
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("DryRun");
    if let Some(var_791) = &input.dry_run {
        scope_790.boolean(*var_791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DryRun");
    if let Some(var_793) = &input.dry_run {
        scope_792.boolean(*var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Description");
    if let Some(var_795) = &input.description {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("OperatingRegion");
    if let Some(var_797) = &input.operating_regions {
        let mut list_799 = scope_796.start_list(true, None);
        for item_798 in var_797 {
            #[allow(unused_mut)]
            let mut entry_800 = list_799.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_800, item_798,
            )?;
        }
        list_799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("TagSpecification");
    if let Some(var_802) = &input.tag_specifications {
        let mut list_804 = scope_801.start_list(true, Some("item"));
        for item_803 in var_802 {
            #[allow(unused_mut)]
            let mut entry_805 = list_804.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_805, item_803,
            )?;
        }
        list_804.finish();
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("ClientToken");
    if let Some(var_807) = &input.client_token {
        scope_806.string(var_807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DryRun");
    if let Some(var_809) = &input.dry_run {
        scope_808.boolean(*var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("IpamScopeId");
    if let Some(var_811) = &input.ipam_scope_id {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("Locale");
    if let Some(var_813) = &input.locale {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("SourceIpamPoolId");
    if let Some(var_815) = &input.source_ipam_pool_id {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Description");
    if let Some(var_817) = &input.description {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("AddressFamily");
    if let Some(var_819) = &input.address_family {
        scope_818.string(var_819.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AutoImport");
    if let Some(var_821) = &input.auto_import {
        scope_820.boolean(*var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_823) = &input.publicly_advertisable {
        scope_822.boolean(*var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_825) = &input.allocation_min_netmask_length {
        scope_824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_827) = &input.allocation_max_netmask_length {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_829) = &input.allocation_default_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationResourceTag");
    if let Some(var_831) = &input.allocation_resource_tags {
        let mut list_833 = scope_830.start_list(true, Some("item"));
        for item_832 in var_831 {
            #[allow(unused_mut)]
            let mut entry_834 = list_833.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_834, item_832,
            )?;
        }
        list_833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("TagSpecification");
    if let Some(var_836) = &input.tag_specifications {
        let mut list_838 = scope_835.start_list(true, Some("item"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_839, item_837,
            )?;
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ClientToken");
    if let Some(var_841) = &input.client_token {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("AwsService");
    if let Some(var_843) = &input.aws_service {
        scope_842.string(var_843.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DryRun");
    if let Some(var_845) = &input.dry_run {
        scope_844.boolean(*var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("IpamId");
    if let Some(var_847) = &input.ipam_id {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Description");
    if let Some(var_849) = &input.description {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("TagSpecification");
    if let Some(var_851) = &input.tag_specifications {
        let mut list_853 = scope_850.start_list(true, Some("item"));
        for item_852 in var_851 {
            #[allow(unused_mut)]
            let mut entry_854 = list_853.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_854, item_852,
            )?;
        }
        list_853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("ClientToken");
    if let Some(var_856) = &input.client_token {
        scope_855.string(var_856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("KeyName");
    if let Some(var_858) = &input.key_name {
        scope_857.string(var_858);
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("DryRun");
    if let Some(var_860) = &input.dry_run {
        scope_859.boolean(*var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KeyType");
    if let Some(var_862) = &input.key_type {
        scope_861.string(var_862.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("TagSpecification");
    if let Some(var_864) = &input.tag_specifications {
        let mut list_866 = scope_863.start_list(true, Some("item"));
        for item_865 in var_864 {
            #[allow(unused_mut)]
            let mut entry_867 = list_866.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_867, item_865,
            )?;
        }
        list_866.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("DryRun");
    if let Some(var_869) = &input.dry_run {
        scope_868.boolean(*var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("ClientToken");
    if let Some(var_871) = &input.client_token {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("LaunchTemplateName");
    if let Some(var_873) = &input.launch_template_name {
        scope_872.string(var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("VersionDescription");
    if let Some(var_875) = &input.version_description {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("LaunchTemplateData");
    if let Some(var_877) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_876, var_877,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("TagSpecification");
    if let Some(var_879) = &input.tag_specifications {
        let mut list_881 = scope_878.start_list(true, Some("item"));
        for item_880 in var_879 {
            #[allow(unused_mut)]
            let mut entry_882 = list_881.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_882, item_880,
            )?;
        }
        list_881.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("DryRun");
    if let Some(var_884) = &input.dry_run {
        scope_883.boolean(*var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("ClientToken");
    if let Some(var_886) = &input.client_token {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("LaunchTemplateId");
    if let Some(var_888) = &input.launch_template_id {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("LaunchTemplateName");
    if let Some(var_890) = &input.launch_template_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("SourceVersion");
    if let Some(var_892) = &input.source_version {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("VersionDescription");
    if let Some(var_894) = &input.version_description {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("LaunchTemplateData");
    if let Some(var_896) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_895, var_896,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DestinationCidrBlock");
    if let Some(var_898) = &input.destination_cidr_block {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_900) = &input.local_gateway_route_table_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_902) = &input.local_gateway_virtual_interface_group_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DryRun");
    if let Some(var_904) = &input.dry_run {
        scope_903.boolean(*var_904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_906) = &input.local_gateway_route_table_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("VpcId");
    if let Some(var_908) = &input.vpc_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("TagSpecification");
    if let Some(var_910) = &input.tag_specifications {
        let mut list_912 = scope_909.start_list(true, Some("item"));
        for item_911 in var_910 {
            #[allow(unused_mut)]
            let mut entry_913 = list_912.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_913, item_911,
            )?;
        }
        list_912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("DryRun");
    if let Some(var_915) = &input.dry_run {
        scope_914.boolean(*var_915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("DryRun");
    if let Some(var_917) = &input.dry_run {
        scope_916.boolean(*var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("PrefixListName");
    if let Some(var_919) = &input.prefix_list_name {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("Entry");
    if let Some(var_921) = &input.entries {
        let mut list_923 = scope_920.start_list(true, None);
        for item_922 in var_921 {
            #[allow(unused_mut)]
            let mut entry_924 = list_923.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_924, item_922,
            )?;
        }
        list_923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("MaxEntries");
    if let Some(var_926) = &input.max_entries {
        scope_925.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_926).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("TagSpecification");
    if let Some(var_928) = &input.tag_specifications {
        let mut list_930 = scope_927.start_list(true, Some("item"));
        for item_929 in var_928 {
            #[allow(unused_mut)]
            let mut entry_931 = list_930.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_931, item_929,
            )?;
        }
        list_930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("AddressFamily");
    if let Some(var_933) = &input.address_family {
        scope_932.string(var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("ClientToken");
    if let Some(var_935) = &input.client_token {
        scope_934.string(var_935);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("AllocationId");
    if let Some(var_937) = &input.allocation_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("ClientToken");
    if let Some(var_939) = &input.client_token {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("DryRun");
    if let Some(var_941) = &input.dry_run {
        scope_940.boolean(*var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("SubnetId");
    if let Some(var_943) = &input.subnet_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("TagSpecification");
    if let Some(var_945) = &input.tag_specifications {
        let mut list_947 = scope_944.start_list(true, Some("item"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_948, item_946,
            )?;
        }
        list_947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ConnectivityType");
    if let Some(var_950) = &input.connectivity_type {
        scope_949.string(var_950.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("DryRun");
    if let Some(var_952) = &input.dry_run {
        scope_951.boolean(*var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("VpcId");
    if let Some(var_954) = &input.vpc_id {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("TagSpecification");
    if let Some(var_956) = &input.tag_specifications {
        let mut list_958 = scope_955.start_list(true, Some("item"));
        for item_957 in var_956 {
            #[allow(unused_mut)]
            let mut entry_959 = list_958.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_959, item_957,
            )?;
        }
        list_958.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("CidrBlock");
    if let Some(var_961) = &input.cidr_block {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("DryRun");
    if let Some(var_963) = &input.dry_run {
        scope_962.boolean(*var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("Egress");
    if let Some(var_965) = &input.egress {
        scope_964.boolean(*var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Icmp");
    if let Some(var_967) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_966, var_967)?;
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_969) = &input.ipv6_cidr_block {
        scope_968.string(var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("NetworkAclId");
    if let Some(var_971) = &input.network_acl_id {
        scope_970.string(var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("PortRange");
    if let Some(var_973) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_972, var_973)?;
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Protocol");
    if let Some(var_975) = &input.protocol {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("RuleAction");
    if let Some(var_977) = &input.rule_action {
        scope_976.string(var_977.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("RuleNumber");
    if let Some(var_979) = &input.rule_number {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("MatchPath");
    if let Some(var_981) = &input.match_paths {
        let mut list_983 = scope_980.start_list(true, Some("item"));
        for item_982 in var_981 {
            #[allow(unused_mut)]
            let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_984, item_982,
            )?;
        }
        list_983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("ExcludePath");
    if let Some(var_986) = &input.exclude_paths {
        let mut list_988 = scope_985.start_list(true, Some("item"));
        for item_987 in var_986 {
            #[allow(unused_mut)]
            let mut entry_989 = list_988.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_989, item_987,
            )?;
        }
        list_988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("ClientToken");
    if let Some(var_991) = &input.client_token {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("TagSpecification");
    if let Some(var_993) = &input.tag_specifications {
        let mut list_995 = scope_992.start_list(true, Some("item"));
        for item_994 in var_993 {
            #[allow(unused_mut)]
            let mut entry_996 = list_995.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_996, item_994,
            )?;
        }
        list_995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("DryRun");
    if let Some(var_998) = &input.dry_run {
        scope_997.boolean(*var_998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("SourceIp");
    if let Some(var_1000) = &input.source_ip {
        scope_999.string(var_1000);
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("DestinationIp");
    if let Some(var_1002) = &input.destination_ip {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("Source");
    if let Some(var_1004) = &input.source {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Destination");
    if let Some(var_1006) = &input.destination {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Protocol");
    if let Some(var_1008) = &input.protocol {
        scope_1007.string(var_1008.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DestinationPort");
    if let Some(var_1010) = &input.destination_port {
        scope_1009.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1010).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("TagSpecification");
    if let Some(var_1012) = &input.tag_specifications {
        let mut list_1014 = scope_1011.start_list(true, Some("item"));
        for item_1013 in var_1012 {
            #[allow(unused_mut)]
            let mut entry_1015 = list_1014.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1015, item_1013,
            )?;
        }
        list_1014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("DryRun");
    if let Some(var_1017) = &input.dry_run {
        scope_1016.boolean(*var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("ClientToken");
    if let Some(var_1019) = &input.client_token {
        scope_1018.string(var_1019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("Description");
    if let Some(var_1021) = &input.description {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("DryRun");
    if let Some(var_1023) = &input.dry_run {
        scope_1022.boolean(*var_1023);
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("SecurityGroupId");
    if let Some(var_1025) = &input.groups {
        let mut list_1027 = scope_1024.start_list(true, Some("SecurityGroupId"));
        for item_1026 in var_1025 {
            #[allow(unused_mut)]
            let mut entry_1028 = list_1027.entry();
            entry_1028.string(item_1026);
        }
        list_1027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1030) = &input.ipv6_address_count {
        scope_1029.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1030).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Ipv6Addresses");
    if let Some(var_1032) = &input.ipv6_addresses {
        let mut list_1034 = scope_1031.start_list(true, Some("item"));
        for item_1033 in var_1032 {
            #[allow(unused_mut)]
            let mut entry_1035 = list_1034.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1035, item_1033,
            )?;
        }
        list_1034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("PrivateIpAddress");
    if let Some(var_1037) = &input.private_ip_address {
        scope_1036.string(var_1037);
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1039) = &input.private_ip_addresses {
        let mut list_1041 = scope_1038.start_list(true, Some("item"));
        for item_1040 in var_1039 {
            #[allow(unused_mut)]
            let mut entry_1042 = list_1041.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1042, item_1040,
            )?;
        }
        list_1041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1044) = &input.secondary_private_ip_address_count {
        scope_1043.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("Ipv4Prefix");
    if let Some(var_1046) = &input.ipv4_prefixes {
        let mut list_1048 = scope_1045.start_list(true, Some("item"));
        for item_1047 in var_1046 {
            #[allow(unused_mut)]
            let mut entry_1049 = list_1048.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1049, item_1047,
            )?;
        }
        list_1048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1051) = &input.ipv4_prefix_count {
        scope_1050.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1051).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("Ipv6Prefix");
    if let Some(var_1053) = &input.ipv6_prefixes {
        let mut list_1055 = scope_1052.start_list(true, Some("item"));
        for item_1054 in var_1053 {
            #[allow(unused_mut)]
            let mut entry_1056 = list_1055.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1056, item_1054,
            )?;
        }
        list_1055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1058) = &input.ipv6_prefix_count {
        scope_1057.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1058).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("InterfaceType");
    if let Some(var_1060) = &input.interface_type {
        scope_1059.string(var_1060.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("SubnetId");
    if let Some(var_1062) = &input.subnet_id {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("TagSpecification");
    if let Some(var_1064) = &input.tag_specifications {
        let mut list_1066 = scope_1063.start_list(true, Some("item"));
        for item_1065 in var_1064 {
            #[allow(unused_mut)]
            let mut entry_1067 = list_1066.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1067, item_1065,
            )?;
        }
        list_1066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("ClientToken");
    if let Some(var_1069) = &input.client_token {
        scope_1068.string(var_1069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1071) = &input.network_interface_id {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("AwsAccountId");
    if let Some(var_1073) = &input.aws_account_id {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("AwsService");
    if let Some(var_1075) = &input.aws_service {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("Permission");
    if let Some(var_1077) = &input.permission {
        scope_1076.string(var_1077.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("DryRun");
    if let Some(var_1079) = &input.dry_run {
        scope_1078.boolean(*var_1079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("DryRun");
    if let Some(var_1081) = &input.dry_run {
        scope_1080.boolean(*var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("GroupName");
    if let Some(var_1083) = &input.group_name {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("Strategy");
    if let Some(var_1085) = &input.strategy {
        scope_1084.string(var_1085.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("PartitionCount");
    if let Some(var_1087) = &input.partition_count {
        scope_1086.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1087).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("TagSpecification");
    if let Some(var_1089) = &input.tag_specifications {
        let mut list_1091 = scope_1088.start_list(true, Some("item"));
        for item_1090 in var_1089 {
            #[allow(unused_mut)]
            let mut entry_1092 = list_1091.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1092, item_1090,
            )?;
        }
        list_1091.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("DryRun");
    if let Some(var_1094) = &input.dry_run {
        scope_1093.boolean(*var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("TagSpecification");
    if let Some(var_1096) = &input.tag_specifications {
        let mut list_1098 = scope_1095.start_list(true, Some("item"));
        for item_1097 in var_1096 {
            #[allow(unused_mut)]
            let mut entry_1099 = list_1098.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1099, item_1097,
            )?;
        }
        list_1098.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("InstanceId");
    if let Some(var_1101) = &input.instance_id {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("SnapshotId");
    if let Some(var_1103) = &input.snapshot_id {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("ClientToken");
    if let Some(var_1105) = &input.client_token {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("DryRun");
    if let Some(var_1107) = &input.dry_run {
        scope_1106.boolean(*var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("TagSpecification");
    if let Some(var_1109) = &input.tag_specifications {
        let mut list_1111 = scope_1108.start_list(true, Some("item"));
        for item_1110 in var_1109 {
            #[allow(unused_mut)]
            let mut entry_1112 = list_1111.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1112, item_1110,
            )?;
        }
        list_1111.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("ClientToken");
    if let Some(var_1114) = &input.client_token {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("InstanceCount");
    if let Some(var_1116) = &input.instance_count {
        scope_1115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("PriceSchedules");
    if let Some(var_1118) = &input.price_schedules {
        let mut list_1120 = scope_1117.start_list(true, Some("item"));
        for item_1119 in var_1118 {
            #[allow(unused_mut)]
            let mut entry_1121 = list_1120.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1121, item_1119,
            )?;
        }
        list_1120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("ReservedInstancesId");
    if let Some(var_1123) = &input.reserved_instances_id {
        scope_1122.string(var_1123);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("Bucket");
    if let Some(var_1125) = &input.bucket {
        scope_1124.string(var_1125);
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("ObjectKey");
    if let Some(var_1127) = &input.object_key {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("Name");
    if let Some(var_1129) = &input.name {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("TagSpecification");
    if let Some(var_1131) = &input.tag_specifications {
        let mut list_1133 = scope_1130.start_list(true, Some("item"));
        for item_1132 in var_1131 {
            #[allow(unused_mut)]
            let mut entry_1134 = list_1133.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1134, item_1132,
            )?;
        }
        list_1133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("DryRun");
    if let Some(var_1136) = &input.dry_run {
        scope_1135.boolean(*var_1136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1138) = &input.destination_cidr_block {
        scope_1137.string(var_1138);
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1140) = &input.destination_ipv6_cidr_block {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1142) = &input.destination_prefix_list_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DryRun");
    if let Some(var_1144) = &input.dry_run {
        scope_1143.boolean(*var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("VpcEndpointId");
    if let Some(var_1146) = &input.vpc_endpoint_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1148) = &input.egress_only_internet_gateway_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("GatewayId");
    if let Some(var_1150) = &input.gateway_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("InstanceId");
    if let Some(var_1152) = &input.instance_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("NatGatewayId");
    if let Some(var_1154) = &input.nat_gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("TransitGatewayId");
    if let Some(var_1156) = &input.transit_gateway_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("LocalGatewayId");
    if let Some(var_1158) = &input.local_gateway_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("CarrierGatewayId");
    if let Some(var_1160) = &input.carrier_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1162) = &input.network_interface_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("RouteTableId");
    if let Some(var_1164) = &input.route_table_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1166) = &input.vpc_peering_connection_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("CoreNetworkArn");
    if let Some(var_1168) = &input.core_network_arn {
        scope_1167.string(var_1168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("DryRun");
    if let Some(var_1170) = &input.dry_run {
        scope_1169.boolean(*var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("VpcId");
    if let Some(var_1172) = &input.vpc_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("TagSpecification");
    if let Some(var_1174) = &input.tag_specifications {
        let mut list_1176 = scope_1173.start_list(true, Some("item"));
        for item_1175 in var_1174 {
            #[allow(unused_mut)]
            let mut entry_1177 = list_1176.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1177, item_1175,
            )?;
        }
        list_1176.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("GroupDescription");
    if let Some(var_1179) = &input.description {
        scope_1178.string(var_1179);
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("GroupName");
    if let Some(var_1181) = &input.group_name {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("VpcId");
    if let Some(var_1183) = &input.vpc_id {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("TagSpecification");
    if let Some(var_1185) = &input.tag_specifications {
        let mut list_1187 = scope_1184.start_list(true, Some("item"));
        for item_1186 in var_1185 {
            #[allow(unused_mut)]
            let mut entry_1188 = list_1187.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1188, item_1186,
            )?;
        }
        list_1187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("DryRun");
    if let Some(var_1190) = &input.dry_run {
        scope_1189.boolean(*var_1190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("Description");
    if let Some(var_1192) = &input.description {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("OutpostArn");
    if let Some(var_1194) = &input.outpost_arn {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("VolumeId");
    if let Some(var_1196) = &input.volume_id {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("TagSpecification");
    if let Some(var_1198) = &input.tag_specifications {
        let mut list_1200 = scope_1197.start_list(true, Some("item"));
        for item_1199 in var_1198 {
            #[allow(unused_mut)]
            let mut entry_1201 = list_1200.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1201, item_1199,
            )?;
        }
        list_1200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("DryRun");
    if let Some(var_1203) = &input.dry_run {
        scope_1202.boolean(*var_1203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("Description");
    if let Some(var_1205) = &input.description {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("InstanceSpecification");
    if let Some(var_1207) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1206, var_1207,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("OutpostArn");
    if let Some(var_1209) = &input.outpost_arn {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("TagSpecification");
    if let Some(var_1211) = &input.tag_specifications {
        let mut list_1213 = scope_1210.start_list(true, Some("item"));
        for item_1212 in var_1211 {
            #[allow(unused_mut)]
            let mut entry_1214 = list_1213.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1214, item_1212,
            )?;
        }
        list_1213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1215 = writer.prefix("DryRun");
    if let Some(var_1216) = &input.dry_run {
        scope_1215.boolean(*var_1216);
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1218) = &input.copy_tags_from_source {
        scope_1217.string(var_1218.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("Bucket");
    if let Some(var_1220) = &input.bucket {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DryRun");
    if let Some(var_1222) = &input.dry_run {
        scope_1221.boolean(*var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Prefix");
    if let Some(var_1224) = &input.prefix {
        scope_1223.string(var_1224);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("ImageId");
    if let Some(var_1226) = &input.image_id {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Bucket");
    if let Some(var_1228) = &input.bucket {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("S3ObjectTag");
    if let Some(var_1230) = &input.s3_object_tags {
        let mut list_1232 = scope_1229.start_list(true, Some("item"));
        for item_1231 in var_1230 {
            #[allow(unused_mut)]
            let mut entry_1233 = list_1232.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1233, item_1231)?;
        }
        list_1232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("DryRun");
    if let Some(var_1235) = &input.dry_run {
        scope_1234.boolean(*var_1235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("TagSpecification");
    if let Some(var_1237) = &input.tag_specifications {
        let mut list_1239 = scope_1236.start_list(true, Some("item"));
        for item_1238 in var_1237 {
            #[allow(unused_mut)]
            let mut entry_1240 = list_1239.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1240, item_1238,
            )?;
        }
        list_1239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("AvailabilityZone");
    if let Some(var_1242) = &input.availability_zone {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1244) = &input.availability_zone_id {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CidrBlock");
    if let Some(var_1246) = &input.cidr_block {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1248) = &input.ipv6_cidr_block {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("OutpostArn");
    if let Some(var_1250) = &input.outpost_arn {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("VpcId");
    if let Some(var_1252) = &input.vpc_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("DryRun");
    if let Some(var_1254) = &input.dry_run {
        scope_1253.boolean(*var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Ipv6Native");
    if let Some(var_1256) = &input.ipv6_native {
        scope_1255.boolean(*var_1256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("TagSpecification");
    if let Some(var_1258) = &input.tag_specifications {
        let mut list_1260 = scope_1257.start_list(true, Some("item"));
        for item_1259 in var_1258 {
            #[allow(unused_mut)]
            let mut entry_1261 = list_1260.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1261, item_1259,
            )?;
        }
        list_1260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("SubnetId");
    if let Some(var_1263) = &input.subnet_id {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("Cidr");
    if let Some(var_1265) = &input.cidr {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("ReservationType");
    if let Some(var_1267) = &input.reservation_type {
        scope_1266.string(var_1267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("Description");
    if let Some(var_1269) = &input.description {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DryRun");
    if let Some(var_1271) = &input.dry_run {
        scope_1270.boolean(*var_1271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("DryRun");
    if let Some(var_1273) = &input.dry_run {
        scope_1272.boolean(*var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("ResourceId");
    if let Some(var_1275) = &input.resources {
        let mut list_1277 = scope_1274.start_list(true, None);
        for item_1276 in var_1275 {
            #[allow(unused_mut)]
            let mut entry_1278 = list_1277.entry();
            entry_1278.string(item_1276);
        }
        list_1277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("Tag");
    if let Some(var_1280) = &input.tags {
        let mut list_1282 = scope_1279.start_list(true, Some("item"));
        for item_1281 in var_1280 {
            #[allow(unused_mut)]
            let mut entry_1283 = list_1282.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1283, item_1281)?;
        }
        list_1282.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("Description");
    if let Some(var_1285) = &input.description {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("TagSpecification");
    if let Some(var_1287) = &input.tag_specifications {
        let mut list_1289 = scope_1286.start_list(true, Some("item"));
        for item_1288 in var_1287 {
            #[allow(unused_mut)]
            let mut entry_1290 = list_1289.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1290, item_1288,
            )?;
        }
        list_1289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("DryRun");
    if let Some(var_1292) = &input.dry_run {
        scope_1291.boolean(*var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("ClientToken");
    if let Some(var_1294) = &input.client_token {
        scope_1293.string(var_1294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1296) = &input.traffic_mirror_filter_id {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("TrafficDirection");
    if let Some(var_1298) = &input.traffic_direction {
        scope_1297.string(var_1298.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("RuleNumber");
    if let Some(var_1300) = &input.rule_number {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("RuleAction");
    if let Some(var_1302) = &input.rule_action {
        scope_1301.string(var_1302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DestinationPortRange");
    if let Some(var_1304) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1303, var_1304,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("SourcePortRange");
    if let Some(var_1306) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1305, var_1306,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Protocol");
    if let Some(var_1308) = &input.protocol {
        scope_1307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1310) = &input.destination_cidr_block {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("SourceCidrBlock");
    if let Some(var_1312) = &input.source_cidr_block {
        scope_1311.string(var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Description");
    if let Some(var_1314) = &input.description {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("DryRun");
    if let Some(var_1316) = &input.dry_run {
        scope_1315.boolean(*var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("ClientToken");
    if let Some(var_1318) = &input.client_token {
        scope_1317.string(var_1318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1320) = &input.network_interface_id {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1322) = &input.traffic_mirror_target_id {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1324) = &input.traffic_mirror_filter_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("PacketLength");
    if let Some(var_1326) = &input.packet_length {
        scope_1325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("SessionNumber");
    if let Some(var_1328) = &input.session_number {
        scope_1327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("VirtualNetworkId");
    if let Some(var_1330) = &input.virtual_network_id {
        scope_1329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("Description");
    if let Some(var_1332) = &input.description {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("TagSpecification");
    if let Some(var_1334) = &input.tag_specifications {
        let mut list_1336 = scope_1333.start_list(true, Some("item"));
        for item_1335 in var_1334 {
            #[allow(unused_mut)]
            let mut entry_1337 = list_1336.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1337, item_1335,
            )?;
        }
        list_1336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("DryRun");
    if let Some(var_1339) = &input.dry_run {
        scope_1338.boolean(*var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("ClientToken");
    if let Some(var_1341) = &input.client_token {
        scope_1340.string(var_1341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1343) = &input.network_interface_id {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1345) = &input.network_load_balancer_arn {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Description");
    if let Some(var_1347) = &input.description {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("TagSpecification");
    if let Some(var_1349) = &input.tag_specifications {
        let mut list_1351 = scope_1348.start_list(true, Some("item"));
        for item_1350 in var_1349 {
            #[allow(unused_mut)]
            let mut entry_1352 = list_1351.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1352, item_1350,
            )?;
        }
        list_1351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("DryRun");
    if let Some(var_1354) = &input.dry_run {
        scope_1353.boolean(*var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("ClientToken");
    if let Some(var_1356) = &input.client_token {
        scope_1355.string(var_1356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("Description");
    if let Some(var_1358) = &input.description {
        scope_1357.string(var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("Options");
    if let Some(var_1360) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1359, var_1360,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("TagSpecification");
    if let Some(var_1362) = &input.tag_specifications {
        let mut list_1364 = scope_1361.start_list(true, Some("item"));
        for item_1363 in var_1362 {
            #[allow(unused_mut)]
            let mut entry_1365 = list_1364.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1365, item_1363,
            )?;
        }
        list_1364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("DryRun");
    if let Some(var_1367) = &input.dry_run {
        scope_1366.boolean(*var_1367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1369) = &input.transport_transit_gateway_attachment_id {
        scope_1368.string(var_1369);
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Options");
    if let Some(var_1371) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1370, var_1371)?;
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("TagSpecification");
    if let Some(var_1373) = &input.tag_specifications {
        let mut list_1375 = scope_1372.start_list(true, Some("item"));
        for item_1374 in var_1373 {
            #[allow(unused_mut)]
            let mut entry_1376 = list_1375.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1376, item_1374,
            )?;
        }
        list_1375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("DryRun");
    if let Some(var_1378) = &input.dry_run {
        scope_1377.boolean(*var_1378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1380) = &input.transit_gateway_attachment_id {
        scope_1379.string(var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1382) = &input.transit_gateway_address {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("PeerAddress");
    if let Some(var_1384) = &input.peer_address {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("BgpOptions");
    if let Some(var_1386) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1385, var_1386)?;
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1388) = &input.inside_cidr_blocks {
        let mut list_1390 = scope_1387.start_list(true, Some("item"));
        for item_1389 in var_1388 {
            #[allow(unused_mut)]
            let mut entry_1391 = list_1390.entry();
            entry_1391.string(item_1389);
        }
        list_1390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("TagSpecification");
    if let Some(var_1393) = &input.tag_specifications {
        let mut list_1395 = scope_1392.start_list(true, Some("item"));
        for item_1394 in var_1393 {
            #[allow(unused_mut)]
            let mut entry_1396 = list_1395.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1396, item_1394,
            )?;
        }
        list_1395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("DryRun");
    if let Some(var_1398) = &input.dry_run {
        scope_1397.boolean(*var_1398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("TransitGatewayId");
    if let Some(var_1400) = &input.transit_gateway_id {
        scope_1399.string(var_1400);
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("Options");
    if let Some(var_1402) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1401, var_1402)?;
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("TagSpecification");
    if let Some(var_1404) = &input.tag_specifications {
        let mut list_1406 = scope_1403.start_list(true, Some("item"));
        for item_1405 in var_1404 {
            #[allow(unused_mut)]
            let mut entry_1407 = list_1406.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1407, item_1405,
            )?;
        }
        list_1406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("DryRun");
    if let Some(var_1409) = &input.dry_run {
        scope_1408.boolean(*var_1409);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("TransitGatewayId");
    if let Some(var_1411) = &input.transit_gateway_id {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1413) = &input.peer_transit_gateway_id {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("PeerAccountId");
    if let Some(var_1415) = &input.peer_account_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("PeerRegion");
    if let Some(var_1417) = &input.peer_region {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("TagSpecification");
    if let Some(var_1419) = &input.tag_specifications {
        let mut list_1421 = scope_1418.start_list(true, Some("item"));
        for item_1420 in var_1419 {
            #[allow(unused_mut)]
            let mut entry_1422 = list_1421.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1422, item_1420,
            )?;
        }
        list_1421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("DryRun");
    if let Some(var_1424) = &input.dry_run {
        scope_1423.boolean(*var_1424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1426) = &input.transit_gateway_route_table_id {
        scope_1425.string(var_1426);
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("PrefixListId");
    if let Some(var_1428) = &input.prefix_list_id {
        scope_1427.string(var_1428);
    }
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1430) = &input.transit_gateway_attachment_id {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("Blackhole");
    if let Some(var_1432) = &input.blackhole {
        scope_1431.boolean(*var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("DryRun");
    if let Some(var_1434) = &input.dry_run {
        scope_1433.boolean(*var_1434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1436) = &input.destination_cidr_block {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1438) = &input.transit_gateway_route_table_id {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1440) = &input.transit_gateway_attachment_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("Blackhole");
    if let Some(var_1442) = &input.blackhole {
        scope_1441.boolean(*var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("DryRun");
    if let Some(var_1444) = &input.dry_run {
        scope_1443.boolean(*var_1444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("TransitGatewayId");
    if let Some(var_1446) = &input.transit_gateway_id {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("TagSpecifications");
    if let Some(var_1448) = &input.tag_specifications {
        let mut list_1450 = scope_1447.start_list(true, Some("item"));
        for item_1449 in var_1448 {
            #[allow(unused_mut)]
            let mut entry_1451 = list_1450.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1451, item_1449,
            )?;
        }
        list_1450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("DryRun");
    if let Some(var_1453) = &input.dry_run {
        scope_1452.boolean(*var_1453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("TransitGatewayId");
    if let Some(var_1455) = &input.transit_gateway_id {
        scope_1454.string(var_1455);
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("VpcId");
    if let Some(var_1457) = &input.vpc_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("SubnetIds");
    if let Some(var_1459) = &input.subnet_ids {
        let mut list_1461 = scope_1458.start_list(true, Some("item"));
        for item_1460 in var_1459 {
            #[allow(unused_mut)]
            let mut entry_1462 = list_1461.entry();
            entry_1462.string(item_1460);
        }
        list_1461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("Options");
    if let Some(var_1464) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1463, var_1464)?;
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("TagSpecifications");
    if let Some(var_1466) = &input.tag_specifications {
        let mut list_1468 = scope_1465.start_list(true, Some("item"));
        for item_1467 in var_1466 {
            #[allow(unused_mut)]
            let mut entry_1469 = list_1468.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1469, item_1467,
            )?;
        }
        list_1468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("DryRun");
    if let Some(var_1471) = &input.dry_run {
        scope_1470.boolean(*var_1471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("AvailabilityZone");
    if let Some(var_1473) = &input.availability_zone {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("Encrypted");
    if let Some(var_1475) = &input.encrypted {
        scope_1474.boolean(*var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("Iops");
    if let Some(var_1477) = &input.iops {
        scope_1476.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1477).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("KmsKeyId");
    if let Some(var_1479) = &input.kms_key_id {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("OutpostArn");
    if let Some(var_1481) = &input.outpost_arn {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("Size");
    if let Some(var_1483) = &input.size {
        scope_1482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("SnapshotId");
    if let Some(var_1485) = &input.snapshot_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("VolumeType");
    if let Some(var_1487) = &input.volume_type {
        scope_1486.string(var_1487.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("DryRun");
    if let Some(var_1489) = &input.dry_run {
        scope_1488.boolean(*var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("TagSpecification");
    if let Some(var_1491) = &input.tag_specifications {
        let mut list_1493 = scope_1490.start_list(true, Some("item"));
        for item_1492 in var_1491 {
            #[allow(unused_mut)]
            let mut entry_1494 = list_1493.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1494, item_1492,
            )?;
        }
        list_1493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1496) = &input.multi_attach_enabled {
        scope_1495.boolean(*var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("Throughput");
    if let Some(var_1498) = &input.throughput {
        scope_1497.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1498).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("ClientToken");
    if let Some(var_1500) = &input.client_token {
        scope_1499.string(var_1500);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("CidrBlock");
    if let Some(var_1502) = &input.cidr_block {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1504) = &input.amazon_provided_ipv6_cidr_block {
        scope_1503.boolean(*var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("Ipv6Pool");
    if let Some(var_1506) = &input.ipv6_pool {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1508) = &input.ipv6_cidr_block {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1510) = &input.ipv4_ipam_pool_id {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1512) = &input.ipv4_netmask_length {
        scope_1511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1514) = &input.ipv6_ipam_pool_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1516) = &input.ipv6_netmask_length {
        scope_1515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("DryRun");
    if let Some(var_1518) = &input.dry_run {
        scope_1517.boolean(*var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("InstanceTenancy");
    if let Some(var_1520) = &input.instance_tenancy {
        scope_1519.string(var_1520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1522) = &input.ipv6_cidr_block_network_border_group {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("TagSpecification");
    if let Some(var_1524) = &input.tag_specifications {
        let mut list_1526 = scope_1523.start_list(true, Some("item"));
        for item_1525 in var_1524 {
            #[allow(unused_mut)]
            let mut entry_1527 = list_1526.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1527, item_1525,
            )?;
        }
        list_1526.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("DryRun");
    if let Some(var_1529) = &input.dry_run {
        scope_1528.boolean(*var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("VpcEndpointType");
    if let Some(var_1531) = &input.vpc_endpoint_type {
        scope_1530.string(var_1531.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("VpcId");
    if let Some(var_1533) = &input.vpc_id {
        scope_1532.string(var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("ServiceName");
    if let Some(var_1535) = &input.service_name {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("PolicyDocument");
    if let Some(var_1537) = &input.policy_document {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("RouteTableId");
    if let Some(var_1539) = &input.route_table_ids {
        let mut list_1541 = scope_1538.start_list(true, Some("item"));
        for item_1540 in var_1539 {
            #[allow(unused_mut)]
            let mut entry_1542 = list_1541.entry();
            entry_1542.string(item_1540);
        }
        list_1541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1543 = writer.prefix("SubnetId");
    if let Some(var_1544) = &input.subnet_ids {
        let mut list_1546 = scope_1543.start_list(true, Some("item"));
        for item_1545 in var_1544 {
            #[allow(unused_mut)]
            let mut entry_1547 = list_1546.entry();
            entry_1547.string(item_1545);
        }
        list_1546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("SecurityGroupId");
    if let Some(var_1549) = &input.security_group_ids {
        let mut list_1551 = scope_1548.start_list(true, Some("item"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            entry_1552.string(item_1550);
        }
        list_1551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("ClientToken");
    if let Some(var_1554) = &input.client_token {
        scope_1553.string(var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1556) = &input.private_dns_enabled {
        scope_1555.boolean(*var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("TagSpecification");
    if let Some(var_1558) = &input.tag_specifications {
        let mut list_1560 = scope_1557.start_list(true, Some("item"));
        for item_1559 in var_1558 {
            #[allow(unused_mut)]
            let mut entry_1561 = list_1560.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1561, item_1559,
            )?;
        }
        list_1560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("DryRun");
    if let Some(var_1563) = &input.dry_run {
        scope_1562.boolean(*var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("ServiceId");
    if let Some(var_1565) = &input.service_id {
        scope_1564.string(var_1565);
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("VpcEndpointId");
    if let Some(var_1567) = &input.vpc_endpoint_id {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1569) = &input.connection_notification_arn {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("ConnectionEvents");
    if let Some(var_1571) = &input.connection_events {
        let mut list_1573 = scope_1570.start_list(true, Some("item"));
        for item_1572 in var_1571 {
            #[allow(unused_mut)]
            let mut entry_1574 = list_1573.entry();
            entry_1574.string(item_1572);
        }
        list_1573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("ClientToken");
    if let Some(var_1576) = &input.client_token {
        scope_1575.string(var_1576);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("DryRun");
    if let Some(var_1578) = &input.dry_run {
        scope_1577.boolean(*var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("AcceptanceRequired");
    if let Some(var_1580) = &input.acceptance_required {
        scope_1579.boolean(*var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("PrivateDnsName");
    if let Some(var_1582) = &input.private_dns_name {
        scope_1581.string(var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1584) = &input.network_load_balancer_arns {
        let mut list_1586 = scope_1583.start_list(true, Some("item"));
        for item_1585 in var_1584 {
            #[allow(unused_mut)]
            let mut entry_1587 = list_1586.entry();
            entry_1587.string(item_1585);
        }
        list_1586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1588 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1589) = &input.gateway_load_balancer_arns {
        let mut list_1591 = scope_1588.start_list(true, Some("item"));
        for item_1590 in var_1589 {
            #[allow(unused_mut)]
            let mut entry_1592 = list_1591.entry();
            entry_1592.string(item_1590);
        }
        list_1591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("ClientToken");
    if let Some(var_1594) = &input.client_token {
        scope_1593.string(var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("TagSpecification");
    if let Some(var_1596) = &input.tag_specifications {
        let mut list_1598 = scope_1595.start_list(true, Some("item"));
        for item_1597 in var_1596 {
            #[allow(unused_mut)]
            let mut entry_1599 = list_1598.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1599, item_1597,
            )?;
        }
        list_1598.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("DryRun");
    if let Some(var_1601) = &input.dry_run {
        scope_1600.boolean(*var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("PeerOwnerId");
    if let Some(var_1603) = &input.peer_owner_id {
        scope_1602.string(var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("PeerVpcId");
    if let Some(var_1605) = &input.peer_vpc_id {
        scope_1604.string(var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("VpcId");
    if let Some(var_1607) = &input.vpc_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("PeerRegion");
    if let Some(var_1609) = &input.peer_region {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("TagSpecification");
    if let Some(var_1611) = &input.tag_specifications {
        let mut list_1613 = scope_1610.start_list(true, Some("item"));
        for item_1612 in var_1611 {
            #[allow(unused_mut)]
            let mut entry_1614 = list_1613.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1614, item_1612,
            )?;
        }
        list_1613.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("CustomerGatewayId");
    if let Some(var_1616) = &input.customer_gateway_id {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("Type");
    if let Some(var_1618) = &input.r#type {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("VpnGatewayId");
    if let Some(var_1620) = &input.vpn_gateway_id {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("TransitGatewayId");
    if let Some(var_1622) = &input.transit_gateway_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("DryRun");
    if let Some(var_1624) = &input.dry_run {
        scope_1623.boolean(*var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("Options");
    if let Some(var_1626) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1625, var_1626,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("TagSpecification");
    if let Some(var_1628) = &input.tag_specifications {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1631, item_1629,
            )?;
        }
        list_1630.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1633) = &input.destination_cidr_block {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("VpnConnectionId");
    if let Some(var_1635) = &input.vpn_connection_id {
        scope_1634.string(var_1635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("AvailabilityZone");
    if let Some(var_1637) = &input.availability_zone {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("Type");
    if let Some(var_1639) = &input.r#type {
        scope_1638.string(var_1639.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("TagSpecification");
    if let Some(var_1641) = &input.tag_specifications {
        let mut list_1643 = scope_1640.start_list(true, Some("item"));
        for item_1642 in var_1641 {
            #[allow(unused_mut)]
            let mut entry_1644 = list_1643.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1644, item_1642,
            )?;
        }
        list_1643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("AmazonSideAsn");
    if let Some(var_1646) = &input.amazon_side_asn {
        scope_1645.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1646).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("DryRun");
    if let Some(var_1648) = &input.dry_run {
        scope_1647.boolean(*var_1648);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("CarrierGatewayId");
    if let Some(var_1650) = &input.carrier_gateway_id {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("DryRun");
    if let Some(var_1652) = &input.dry_run {
        scope_1651.boolean(*var_1652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1654) = &input.client_vpn_endpoint_id {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DryRun");
    if let Some(var_1656) = &input.dry_run {
        scope_1655.boolean(*var_1656);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1658) = &input.client_vpn_endpoint_id {
        scope_1657.string(var_1658);
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1660) = &input.target_vpc_subnet_id {
        scope_1659.string(var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1662) = &input.destination_cidr_block {
        scope_1661.string(var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DryRun");
    if let Some(var_1664) = &input.dry_run {
        scope_1663.boolean(*var_1664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("CustomerGatewayId");
    if let Some(var_1666) = &input.customer_gateway_id {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("DryRun");
    if let Some(var_1668) = &input.dry_run {
        scope_1667.boolean(*var_1668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("DhcpOptionsId");
    if let Some(var_1670) = &input.dhcp_options_id {
        scope_1669.string(var_1670);
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DryRun");
    if let Some(var_1672) = &input.dry_run {
        scope_1671.boolean(*var_1672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("DryRun");
    if let Some(var_1674) = &input.dry_run {
        scope_1673.boolean(*var_1674);
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1676) = &input.egress_only_internet_gateway_id {
        scope_1675.string(var_1676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("DryRun");
    if let Some(var_1678) = &input.dry_run {
        scope_1677.boolean(*var_1678);
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("FleetId");
    if let Some(var_1680) = &input.fleet_ids {
        let mut list_1682 = scope_1679.start_list(true, None);
        for item_1681 in var_1680 {
            #[allow(unused_mut)]
            let mut entry_1683 = list_1682.entry();
            entry_1683.string(item_1681);
        }
        list_1682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("TerminateInstances");
    if let Some(var_1685) = &input.terminate_instances {
        scope_1684.boolean(*var_1685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DryRun");
    if let Some(var_1687) = &input.dry_run {
        scope_1686.boolean(*var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("FlowLogId");
    if let Some(var_1689) = &input.flow_log_ids {
        let mut list_1691 = scope_1688.start_list(true, Some("item"));
        for item_1690 in var_1689 {
            #[allow(unused_mut)]
            let mut entry_1692 = list_1691.entry();
            entry_1692.string(item_1690);
        }
        list_1691.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("DryRun");
    if let Some(var_1694) = &input.dry_run {
        scope_1693.boolean(*var_1694);
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("FpgaImageId");
    if let Some(var_1696) = &input.fpga_image_id {
        scope_1695.string(var_1696);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("DryRun");
    if let Some(var_1698) = &input.dry_run {
        scope_1697.boolean(*var_1698);
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("ForceDelete");
    if let Some(var_1700) = &input.force_delete {
        scope_1699.boolean(*var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1702) = &input.instance_event_window_id {
        scope_1701.string(var_1702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("DryRun");
    if let Some(var_1704) = &input.dry_run {
        scope_1703.boolean(*var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("InternetGatewayId");
    if let Some(var_1706) = &input.internet_gateway_id {
        scope_1705.string(var_1706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("DryRun");
    if let Some(var_1708) = &input.dry_run {
        scope_1707.boolean(*var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("IpamId");
    if let Some(var_1710) = &input.ipam_id {
        scope_1709.string(var_1710);
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("Cascade");
    if let Some(var_1712) = &input.cascade {
        scope_1711.boolean(*var_1712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("DryRun");
    if let Some(var_1714) = &input.dry_run {
        scope_1713.boolean(*var_1714);
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("IpamPoolId");
    if let Some(var_1716) = &input.ipam_pool_id {
        scope_1715.string(var_1716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DryRun");
    if let Some(var_1718) = &input.dry_run {
        scope_1717.boolean(*var_1718);
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("IpamScopeId");
    if let Some(var_1720) = &input.ipam_scope_id {
        scope_1719.string(var_1720);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("KeyName");
    if let Some(var_1722) = &input.key_name {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("KeyPairId");
    if let Some(var_1724) = &input.key_pair_id {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DryRun");
    if let Some(var_1726) = &input.dry_run {
        scope_1725.boolean(*var_1726);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("DryRun");
    if let Some(var_1728) = &input.dry_run {
        scope_1727.boolean(*var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("LaunchTemplateId");
    if let Some(var_1730) = &input.launch_template_id {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("LaunchTemplateName");
    if let Some(var_1732) = &input.launch_template_name {
        scope_1731.string(var_1732);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("DryRun");
    if let Some(var_1734) = &input.dry_run {
        scope_1733.boolean(*var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("LaunchTemplateId");
    if let Some(var_1736) = &input.launch_template_id {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("LaunchTemplateName");
    if let Some(var_1738) = &input.launch_template_name {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1740) = &input.versions {
        let mut list_1742 = scope_1739.start_list(true, Some("item"));
        for item_1741 in var_1740 {
            #[allow(unused_mut)]
            let mut entry_1743 = list_1742.entry();
            entry_1743.string(item_1741);
        }
        list_1742.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1745) = &input.destination_cidr_block {
        scope_1744.string(var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1747) = &input.local_gateway_route_table_id {
        scope_1746.string(var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("DryRun");
    if let Some(var_1749) = &input.dry_run {
        scope_1748.boolean(*var_1749);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1751) = &input.local_gateway_route_table_vpc_association_id {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("DryRun");
    if let Some(var_1753) = &input.dry_run {
        scope_1752.boolean(*var_1753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("DryRun");
    if let Some(var_1755) = &input.dry_run {
        scope_1754.boolean(*var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("PrefixListId");
    if let Some(var_1757) = &input.prefix_list_id {
        scope_1756.string(var_1757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("DryRun");
    if let Some(var_1759) = &input.dry_run {
        scope_1758.boolean(*var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("NatGatewayId");
    if let Some(var_1761) = &input.nat_gateway_id {
        scope_1760.string(var_1761);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("DryRun");
    if let Some(var_1763) = &input.dry_run {
        scope_1762.boolean(*var_1763);
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("NetworkAclId");
    if let Some(var_1765) = &input.network_acl_id {
        scope_1764.string(var_1765);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("DryRun");
    if let Some(var_1767) = &input.dry_run {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("Egress");
    if let Some(var_1769) = &input.egress {
        scope_1768.boolean(*var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("NetworkAclId");
    if let Some(var_1771) = &input.network_acl_id {
        scope_1770.string(var_1771);
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("RuleNumber");
    if let Some(var_1773) = &input.rule_number {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1773).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("DryRun");
    if let Some(var_1775) = &input.dry_run {
        scope_1774.boolean(*var_1775);
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1777) = &input.network_insights_access_scope_id {
        scope_1776.string(var_1777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1779) = &input.network_insights_access_scope_analysis_id {
        scope_1778.string(var_1779);
    }
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("DryRun");
    if let Some(var_1781) = &input.dry_run {
        scope_1780.boolean(*var_1781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("DryRun");
    if let Some(var_1783) = &input.dry_run {
        scope_1782.boolean(*var_1783);
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1785) = &input.network_insights_analysis_id {
        scope_1784.string(var_1785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("DryRun");
    if let Some(var_1787) = &input.dry_run {
        scope_1786.boolean(*var_1787);
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1789) = &input.network_insights_path_id {
        scope_1788.string(var_1789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("DryRun");
    if let Some(var_1791) = &input.dry_run {
        scope_1790.boolean(*var_1791);
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1793) = &input.network_interface_id {
        scope_1792.string(var_1793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1795) = &input.network_interface_permission_id {
        scope_1794.string(var_1795);
    }
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Force");
    if let Some(var_1797) = &input.force {
        scope_1796.boolean(*var_1797);
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("DryRun");
    if let Some(var_1799) = &input.dry_run {
        scope_1798.boolean(*var_1799);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("DryRun");
    if let Some(var_1801) = &input.dry_run {
        scope_1800.boolean(*var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("GroupName");
    if let Some(var_1803) = &input.group_name {
        scope_1802.string(var_1803);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("DryRun");
    if let Some(var_1805) = &input.dry_run {
        scope_1804.boolean(*var_1805);
    }
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("PoolId");
    if let Some(var_1807) = &input.pool_id {
        scope_1806.string(var_1807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("DryRun");
    if let Some(var_1809) = &input.dry_run {
        scope_1808.boolean(*var_1809);
    }
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("ReservedInstancesId");
    if let Some(var_1811) = &input.reserved_instances_ids {
        let mut list_1813 = scope_1810.start_list(true, Some("item"));
        for item_1812 in var_1811 {
            #[allow(unused_mut)]
            let mut entry_1814 = list_1813.entry();
            entry_1814.string(item_1812);
        }
        list_1813.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1816) = &input.destination_cidr_block {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1818) = &input.destination_ipv6_cidr_block {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1820) = &input.destination_prefix_list_id {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("RouteTableId");
    if let Some(var_1824) = &input.route_table_id {
        scope_1823.string(var_1824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("DryRun");
    if let Some(var_1826) = &input.dry_run {
        scope_1825.boolean(*var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("RouteTableId");
    if let Some(var_1828) = &input.route_table_id {
        scope_1827.string(var_1828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("GroupId");
    if let Some(var_1830) = &input.group_id {
        scope_1829.string(var_1830);
    }
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("GroupName");
    if let Some(var_1832) = &input.group_name {
        scope_1831.string(var_1832);
    }
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("DryRun");
    if let Some(var_1834) = &input.dry_run {
        scope_1833.boolean(*var_1834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("SnapshotId");
    if let Some(var_1836) = &input.snapshot_id {
        scope_1835.string(var_1836);
    }
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("DryRun");
    if let Some(var_1838) = &input.dry_run {
        scope_1837.boolean(*var_1838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("DryRun");
    if let Some(var_1840) = &input.dry_run {
        scope_1839.boolean(*var_1840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("SubnetId");
    if let Some(var_1842) = &input.subnet_id {
        scope_1841.string(var_1842);
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("DryRun");
    if let Some(var_1844) = &input.dry_run {
        scope_1843.boolean(*var_1844);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1846) = &input.subnet_cidr_reservation_id {
        scope_1845.string(var_1846);
    }
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("DryRun");
    if let Some(var_1848) = &input.dry_run {
        scope_1847.boolean(*var_1848);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("DryRun");
    if let Some(var_1850) = &input.dry_run {
        scope_1849.boolean(*var_1850);
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("ResourceId");
    if let Some(var_1852) = &input.resources {
        let mut list_1854 = scope_1851.start_list(true, None);
        for item_1853 in var_1852 {
            #[allow(unused_mut)]
            let mut entry_1855 = list_1854.entry();
            entry_1855.string(item_1853);
        }
        list_1854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("Tag");
    if let Some(var_1857) = &input.tags {
        let mut list_1859 = scope_1856.start_list(true, Some("item"));
        for item_1858 in var_1857 {
            #[allow(unused_mut)]
            let mut entry_1860 = list_1859.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1860, item_1858)?;
        }
        list_1859.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1862) = &input.traffic_mirror_filter_id {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("DryRun");
    if let Some(var_1864) = &input.dry_run {
        scope_1863.boolean(*var_1864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1866) = &input.traffic_mirror_filter_rule_id {
        scope_1865.string(var_1866);
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1870) = &input.traffic_mirror_session_id {
        scope_1869.string(var_1870);
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DryRun");
    if let Some(var_1872) = &input.dry_run {
        scope_1871.boolean(*var_1872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1874) = &input.traffic_mirror_target_id {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("DryRun");
    if let Some(var_1876) = &input.dry_run {
        scope_1875.boolean(*var_1876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("TransitGatewayId");
    if let Some(var_1878) = &input.transit_gateway_id {
        scope_1877.string(var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("DryRun");
    if let Some(var_1880) = &input.dry_run {
        scope_1879.boolean(*var_1880);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1882) = &input.transit_gateway_attachment_id {
        scope_1881.string(var_1882);
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("DryRun");
    if let Some(var_1884) = &input.dry_run {
        scope_1883.boolean(*var_1884);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1886) = &input.transit_gateway_connect_peer_id {
        scope_1885.string(var_1886);
    }
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("DryRun");
    if let Some(var_1888) = &input.dry_run {
        scope_1887.boolean(*var_1888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1890) = &input.transit_gateway_multicast_domain_id {
        scope_1889.string(var_1890);
    }
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("DryRun");
    if let Some(var_1892) = &input.dry_run {
        scope_1891.boolean(*var_1892);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1894) = &input.transit_gateway_attachment_id {
        scope_1893.string(var_1894);
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("DryRun");
    if let Some(var_1896) = &input.dry_run {
        scope_1895.boolean(*var_1896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1898) = &input.transit_gateway_route_table_id {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("PrefixListId");
    if let Some(var_1900) = &input.prefix_list_id {
        scope_1899.string(var_1900);
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("DryRun");
    if let Some(var_1902) = &input.dry_run {
        scope_1901.boolean(*var_1902);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1904) = &input.transit_gateway_route_table_id {
        scope_1903.string(var_1904);
    }
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1906) = &input.destination_cidr_block {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("DryRun");
    if let Some(var_1908) = &input.dry_run {
        scope_1907.boolean(*var_1908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1910) = &input.transit_gateway_route_table_id {
        scope_1909.string(var_1910);
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("DryRun");
    if let Some(var_1912) = &input.dry_run {
        scope_1911.boolean(*var_1912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1914) = &input.transit_gateway_attachment_id {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("DryRun");
    if let Some(var_1916) = &input.dry_run {
        scope_1915.boolean(*var_1916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("VolumeId");
    if let Some(var_1918) = &input.volume_id {
        scope_1917.string(var_1918);
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("DryRun");
    if let Some(var_1920) = &input.dry_run {
        scope_1919.boolean(*var_1920);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("VpcId");
    if let Some(var_1922) = &input.vpc_id {
        scope_1921.string(var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("DryRun");
    if let Some(var_1924) = &input.dry_run {
        scope_1923.boolean(*var_1924);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("DryRun");
    if let Some(var_1926) = &input.dry_run {
        scope_1925.boolean(*var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1928) = &input.connection_notification_ids {
        let mut list_1930 = scope_1927.start_list(true, Some("item"));
        for item_1929 in var_1928 {
            #[allow(unused_mut)]
            let mut entry_1931 = list_1930.entry();
            entry_1931.string(item_1929);
        }
        list_1930.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("DryRun");
    if let Some(var_1933) = &input.dry_run {
        scope_1932.boolean(*var_1933);
    }
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("VpcEndpointId");
    if let Some(var_1935) = &input.vpc_endpoint_ids {
        let mut list_1937 = scope_1934.start_list(true, Some("item"));
        for item_1936 in var_1935 {
            #[allow(unused_mut)]
            let mut entry_1938 = list_1937.entry();
            entry_1938.string(item_1936);
        }
        list_1937.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("DryRun");
    if let Some(var_1940) = &input.dry_run {
        scope_1939.boolean(*var_1940);
    }
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("ServiceId");
    if let Some(var_1942) = &input.service_ids {
        let mut list_1944 = scope_1941.start_list(true, Some("item"));
        for item_1943 in var_1942 {
            #[allow(unused_mut)]
            let mut entry_1945 = list_1944.entry();
            entry_1945.string(item_1943);
        }
        list_1944.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("DryRun");
    if let Some(var_1947) = &input.dry_run {
        scope_1946.boolean(*var_1947);
    }
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1949) = &input.vpc_peering_connection_id {
        scope_1948.string(var_1949);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("VpnConnectionId");
    if let Some(var_1951) = &input.vpn_connection_id {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DryRun");
    if let Some(var_1953) = &input.dry_run {
        scope_1952.boolean(*var_1953);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1955) = &input.destination_cidr_block {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("VpnConnectionId");
    if let Some(var_1957) = &input.vpn_connection_id {
        scope_1956.string(var_1957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("VpnGatewayId");
    if let Some(var_1959) = &input.vpn_gateway_id {
        scope_1958.string(var_1959);
    }
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("DryRun");
    if let Some(var_1961) = &input.dry_run {
        scope_1960.boolean(*var_1961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("Cidr");
    if let Some(var_1963) = &input.cidr {
        scope_1962.string(var_1963);
    }
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("DryRun");
    if let Some(var_1965) = &input.dry_run {
        scope_1964.boolean(*var_1965);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("DryRun");
    if let Some(var_1967) = &input.dry_run {
        scope_1966.boolean(*var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("IpamPoolId");
    if let Some(var_1969) = &input.ipam_pool_id {
        scope_1968.string(var_1969);
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("Cidr");
    if let Some(var_1971) = &input.cidr {
        scope_1970.string(var_1971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("DryRun");
    if let Some(var_1973) = &input.dry_run {
        scope_1972.boolean(*var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("PoolId");
    if let Some(var_1975) = &input.pool_id {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("Cidr");
    if let Some(var_1977) = &input.cidr {
        scope_1976.string(var_1977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("ImageId");
    if let Some(var_1979) = &input.image_id {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("DryRun");
    if let Some(var_1981) = &input.dry_run {
        scope_1980.boolean(*var_1981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("DryRun");
    if let Some(var_1983) = &input.dry_run {
        scope_1982.boolean(*var_1983);
    }
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1985) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1984, var_1985)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1987) = &input.transit_gateway_multicast_domain_id {
        scope_1986.string(var_1987);
    }
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("GroupIpAddress");
    if let Some(var_1989) = &input.group_ip_address {
        scope_1988.string(var_1989);
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1991) = &input.network_interface_ids {
        let mut list_1993 = scope_1990.start_list(true, Some("item"));
        for item_1992 in var_1991 {
            #[allow(unused_mut)]
            let mut entry_1994 = list_1993.entry();
            entry_1994.string(item_1992);
        }
        list_1993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("DryRun");
    if let Some(var_1996) = &input.dry_run {
        scope_1995.boolean(*var_1996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1998) = &input.transit_gateway_multicast_domain_id {
        scope_1997.string(var_1998);
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("GroupIpAddress");
    if let Some(var_2000) = &input.group_ip_address {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2002) = &input.network_interface_ids {
        let mut list_2004 = scope_2001.start_list(true, Some("item"));
        for item_2003 in var_2002 {
            #[allow(unused_mut)]
            let mut entry_2005 = list_2004.entry();
            entry_2005.string(item_2003);
        }
        list_2004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("DryRun");
    if let Some(var_2007) = &input.dry_run {
        scope_2006.boolean(*var_2007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("AttributeName");
    if let Some(var_2009) = &input.attribute_names {
        let mut list_2011 = scope_2008.start_list(true, Some("attributeName"));
        for item_2010 in var_2009 {
            #[allow(unused_mut)]
            let mut entry_2012 = list_2011.entry();
            entry_2012.string(item_2010.as_str());
        }
        list_2011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("DryRun");
    if let Some(var_2014) = &input.dry_run {
        scope_2013.boolean(*var_2014);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("Filter");
    if let Some(var_2016) = &input.filters {
        let mut list_2018 = scope_2015.start_list(true, Some("Filter"));
        for item_2017 in var_2016 {
            #[allow(unused_mut)]
            let mut entry_2019 = list_2018.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2019, item_2017)?;
        }
        list_2018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2020 = writer.prefix("PublicIp");
    if let Some(var_2021) = &input.public_ips {
        let mut list_2023 = scope_2020.start_list(true, Some("PublicIp"));
        for item_2022 in var_2021 {
            #[allow(unused_mut)]
            let mut entry_2024 = list_2023.entry();
            entry_2024.string(item_2022);
        }
        list_2023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("AllocationId");
    if let Some(var_2026) = &input.allocation_ids {
        let mut list_2028 = scope_2025.start_list(true, Some("AllocationId"));
        for item_2027 in var_2026 {
            #[allow(unused_mut)]
            let mut entry_2029 = list_2028.entry();
            entry_2029.string(item_2027);
        }
        list_2028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("DryRun");
    if let Some(var_2031) = &input.dry_run {
        scope_2030.boolean(*var_2031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("AllocationId");
    if let Some(var_2033) = &input.allocation_ids {
        let mut list_2035 = scope_2032.start_list(true, Some("item"));
        for item_2034 in var_2033 {
            #[allow(unused_mut)]
            let mut entry_2036 = list_2035.entry();
            entry_2036.string(item_2034);
        }
        list_2035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("Attribute");
    if let Some(var_2038) = &input.attribute {
        scope_2037.string(var_2038.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("NextToken");
    if let Some(var_2040) = &input.next_token {
        scope_2039.string(var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("MaxResults");
    if let Some(var_2042) = &input.max_results {
        scope_2041.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2042).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("DryRun");
    if let Some(var_2044) = &input.dry_run {
        scope_2043.boolean(*var_2044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("Filter");
    if let Some(var_2048) = &input.filters {
        let mut list_2050 = scope_2047.start_list(true, Some("Filter"));
        for item_2049 in var_2048 {
            #[allow(unused_mut)]
            let mut entry_2051 = list_2050.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2051, item_2049)?;
        }
        list_2050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("ZoneName");
    if let Some(var_2053) = &input.zone_names {
        let mut list_2055 = scope_2052.start_list(true, Some("ZoneName"));
        for item_2054 in var_2053 {
            #[allow(unused_mut)]
            let mut entry_2056 = list_2055.entry();
            entry_2056.string(item_2054);
        }
        list_2055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("ZoneId");
    if let Some(var_2058) = &input.zone_ids {
        let mut list_2060 = scope_2057.start_list(true, Some("ZoneId"));
        for item_2059 in var_2058 {
            #[allow(unused_mut)]
            let mut entry_2061 = list_2060.entry();
            entry_2061.string(item_2059);
        }
        list_2060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2063) = &input.all_availability_zones {
        scope_2062.boolean(*var_2063);
    }
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("DryRun");
    if let Some(var_2065) = &input.dry_run {
        scope_2064.boolean(*var_2065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("BundleId");
    if let Some(var_2067) = &input.bundle_ids {
        let mut list_2069 = scope_2066.start_list(true, Some("BundleId"));
        for item_2068 in var_2067 {
            #[allow(unused_mut)]
            let mut entry_2070 = list_2069.entry();
            entry_2070.string(item_2068);
        }
        list_2069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("Filter");
    if let Some(var_2072) = &input.filters {
        let mut list_2074 = scope_2071.start_list(true, Some("Filter"));
        for item_2073 in var_2072 {
            #[allow(unused_mut)]
            let mut entry_2075 = list_2074.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2075, item_2073)?;
        }
        list_2074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("DryRun");
    if let Some(var_2077) = &input.dry_run {
        scope_2076.boolean(*var_2077);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("DryRun");
    if let Some(var_2079) = &input.dry_run {
        scope_2078.boolean(*var_2079);
    }
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("MaxResults");
    if let Some(var_2081) = &input.max_results {
        scope_2080.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2081).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2082 = writer.prefix("NextToken");
    if let Some(var_2083) = &input.next_token {
        scope_2082.string(var_2083);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2084 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2085) = &input.capacity_reservation_fleet_ids {
        let mut list_2087 = scope_2084.start_list(true, Some("item"));
        for item_2086 in var_2085 {
            #[allow(unused_mut)]
            let mut entry_2088 = list_2087.entry();
            entry_2088.string(item_2086);
        }
        list_2087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("NextToken");
    if let Some(var_2090) = &input.next_token {
        scope_2089.string(var_2090);
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("MaxResults");
    if let Some(var_2092) = &input.max_results {
        scope_2091.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2092).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("Filter");
    if let Some(var_2094) = &input.filters {
        let mut list_2096 = scope_2093.start_list(true, Some("Filter"));
        for item_2095 in var_2094 {
            #[allow(unused_mut)]
            let mut entry_2097 = list_2096.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2097, item_2095)?;
        }
        list_2096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("DryRun");
    if let Some(var_2099) = &input.dry_run {
        scope_2098.boolean(*var_2099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("CapacityReservationId");
    if let Some(var_2101) = &input.capacity_reservation_ids {
        let mut list_2103 = scope_2100.start_list(true, Some("item"));
        for item_2102 in var_2101 {
            #[allow(unused_mut)]
            let mut entry_2104 = list_2103.entry();
            entry_2104.string(item_2102);
        }
        list_2103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("NextToken");
    if let Some(var_2106) = &input.next_token {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("MaxResults");
    if let Some(var_2108) = &input.max_results {
        scope_2107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("Filter");
    if let Some(var_2110) = &input.filters {
        let mut list_2112 = scope_2109.start_list(true, Some("Filter"));
        for item_2111 in var_2110 {
            #[allow(unused_mut)]
            let mut entry_2113 = list_2112.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2113, item_2111)?;
        }
        list_2112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("DryRun");
    if let Some(var_2115) = &input.dry_run {
        scope_2114.boolean(*var_2115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2116 = writer.prefix("CarrierGatewayId");
    if let Some(var_2117) = &input.carrier_gateway_ids {
        let mut list_2119 = scope_2116.start_list(true, None);
        for item_2118 in var_2117 {
            #[allow(unused_mut)]
            let mut entry_2120 = list_2119.entry();
            entry_2120.string(item_2118);
        }
        list_2119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2121 = writer.prefix("Filter");
    if let Some(var_2122) = &input.filters {
        let mut list_2124 = scope_2121.start_list(true, Some("Filter"));
        for item_2123 in var_2122 {
            #[allow(unused_mut)]
            let mut entry_2125 = list_2124.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2125, item_2123)?;
        }
        list_2124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("MaxResults");
    if let Some(var_2127) = &input.max_results {
        scope_2126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("NextToken");
    if let Some(var_2129) = &input.next_token {
        scope_2128.string(var_2129);
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("DryRun");
    if let Some(var_2131) = &input.dry_run {
        scope_2130.boolean(*var_2131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("Filter");
    if let Some(var_2133) = &input.filters {
        let mut list_2135 = scope_2132.start_list(true, Some("Filter"));
        for item_2134 in var_2133 {
            #[allow(unused_mut)]
            let mut entry_2136 = list_2135.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2136, item_2134)?;
        }
        list_2135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2137 = writer.prefix("DryRun");
    if let Some(var_2138) = &input.dry_run {
        scope_2137.boolean(*var_2138);
    }
    #[allow(unused_mut)]
    let mut scope_2139 = writer.prefix("InstanceId");
    if let Some(var_2140) = &input.instance_ids {
        let mut list_2142 = scope_2139.start_list(true, Some("InstanceId"));
        for item_2141 in var_2140 {
            #[allow(unused_mut)]
            let mut entry_2143 = list_2142.entry();
            entry_2143.string(item_2141);
        }
        list_2142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("MaxResults");
    if let Some(var_2145) = &input.max_results {
        scope_2144.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2145).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("NextToken");
    if let Some(var_2147) = &input.next_token {
        scope_2146.string(var_2147);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2148 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2149) = &input.client_vpn_endpoint_id {
        scope_2148.string(var_2149);
    }
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("DryRun");
    if let Some(var_2151) = &input.dry_run {
        scope_2150.boolean(*var_2151);
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("NextToken");
    if let Some(var_2153) = &input.next_token {
        scope_2152.string(var_2153);
    }
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("Filter");
    if let Some(var_2155) = &input.filters {
        let mut list_2157 = scope_2154.start_list(true, Some("Filter"));
        for item_2156 in var_2155 {
            #[allow(unused_mut)]
            let mut entry_2158 = list_2157.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2158, item_2156)?;
        }
        list_2157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("MaxResults");
    if let Some(var_2160) = &input.max_results {
        scope_2159.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2160).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2162) = &input.client_vpn_endpoint_id {
        scope_2161.string(var_2162);
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("Filter");
    if let Some(var_2164) = &input.filters {
        let mut list_2166 = scope_2163.start_list(true, Some("Filter"));
        for item_2165 in var_2164 {
            #[allow(unused_mut)]
            let mut entry_2167 = list_2166.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2167, item_2165)?;
        }
        list_2166.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2168 = writer.prefix("NextToken");
    if let Some(var_2169) = &input.next_token {
        scope_2168.string(var_2169);
    }
    #[allow(unused_mut)]
    let mut scope_2170 = writer.prefix("MaxResults");
    if let Some(var_2171) = &input.max_results {
        scope_2170.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2171).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2172 = writer.prefix("DryRun");
    if let Some(var_2173) = &input.dry_run {
        scope_2172.boolean(*var_2173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2174 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2175) = &input.client_vpn_endpoint_ids {
        let mut list_2177 = scope_2174.start_list(true, Some("item"));
        for item_2176 in var_2175 {
            #[allow(unused_mut)]
            let mut entry_2178 = list_2177.entry();
            entry_2178.string(item_2176);
        }
        list_2177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("MaxResults");
    if let Some(var_2180) = &input.max_results {
        scope_2179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("NextToken");
    if let Some(var_2182) = &input.next_token {
        scope_2181.string(var_2182);
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("Filter");
    if let Some(var_2184) = &input.filters {
        let mut list_2186 = scope_2183.start_list(true, Some("Filter"));
        for item_2185 in var_2184 {
            #[allow(unused_mut)]
            let mut entry_2187 = list_2186.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2187, item_2185)?;
        }
        list_2186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2188 = writer.prefix("DryRun");
    if let Some(var_2189) = &input.dry_run {
        scope_2188.boolean(*var_2189);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2191) = &input.client_vpn_endpoint_id {
        scope_2190.string(var_2191);
    }
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("Filter");
    if let Some(var_2193) = &input.filters {
        let mut list_2195 = scope_2192.start_list(true, Some("Filter"));
        for item_2194 in var_2193 {
            #[allow(unused_mut)]
            let mut entry_2196 = list_2195.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2196, item_2194)?;
        }
        list_2195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2197 = writer.prefix("MaxResults");
    if let Some(var_2198) = &input.max_results {
        scope_2197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2199 = writer.prefix("NextToken");
    if let Some(var_2200) = &input.next_token {
        scope_2199.string(var_2200);
    }
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("DryRun");
    if let Some(var_2202) = &input.dry_run {
        scope_2201.boolean(*var_2202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2204) = &input.client_vpn_endpoint_id {
        scope_2203.string(var_2204);
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("AssociationIds");
    if let Some(var_2206) = &input.association_ids {
        let mut list_2208 = scope_2205.start_list(true, Some("item"));
        for item_2207 in var_2206 {
            #[allow(unused_mut)]
            let mut entry_2209 = list_2208.entry();
            entry_2209.string(item_2207);
        }
        list_2208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2210 = writer.prefix("MaxResults");
    if let Some(var_2211) = &input.max_results {
        scope_2210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2212 = writer.prefix("NextToken");
    if let Some(var_2213) = &input.next_token {
        scope_2212.string(var_2213);
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("Filter");
    if let Some(var_2215) = &input.filters {
        let mut list_2217 = scope_2214.start_list(true, Some("Filter"));
        for item_2216 in var_2215 {
            #[allow(unused_mut)]
            let mut entry_2218 = list_2217.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2218, item_2216)?;
        }
        list_2217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2219 = writer.prefix("DryRun");
    if let Some(var_2220) = &input.dry_run {
        scope_2219.boolean(*var_2220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2221 = writer.prefix("PoolId");
    if let Some(var_2222) = &input.pool_ids {
        let mut list_2224 = scope_2221.start_list(true, Some("item"));
        for item_2223 in var_2222 {
            #[allow(unused_mut)]
            let mut entry_2225 = list_2224.entry();
            entry_2225.string(item_2223);
        }
        list_2224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("Filter");
    if let Some(var_2227) = &input.filters {
        let mut list_2229 = scope_2226.start_list(true, Some("Filter"));
        for item_2228 in var_2227 {
            #[allow(unused_mut)]
            let mut entry_2230 = list_2229.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2230, item_2228)?;
        }
        list_2229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2231 = writer.prefix("MaxResults");
    if let Some(var_2232) = &input.max_results {
        scope_2231.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("NextToken");
    if let Some(var_2234) = &input.next_token {
        scope_2233.string(var_2234);
    }
    #[allow(unused_mut)]
    let mut scope_2235 = writer.prefix("DryRun");
    if let Some(var_2236) = &input.dry_run {
        scope_2235.boolean(*var_2236);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2237 = writer.prefix("ConversionTaskId");
    if let Some(var_2238) = &input.conversion_task_ids {
        let mut list_2240 = scope_2237.start_list(true, Some("item"));
        for item_2239 in var_2238 {
            #[allow(unused_mut)]
            let mut entry_2241 = list_2240.entry();
            entry_2241.string(item_2239);
        }
        list_2240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("DryRun");
    if let Some(var_2243) = &input.dry_run {
        scope_2242.boolean(*var_2243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2244 = writer.prefix("CustomerGatewayId");
    if let Some(var_2245) = &input.customer_gateway_ids {
        let mut list_2247 = scope_2244.start_list(true, Some("CustomerGatewayId"));
        for item_2246 in var_2245 {
            #[allow(unused_mut)]
            let mut entry_2248 = list_2247.entry();
            entry_2248.string(item_2246);
        }
        list_2247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2249 = writer.prefix("Filter");
    if let Some(var_2250) = &input.filters {
        let mut list_2252 = scope_2249.start_list(true, Some("Filter"));
        for item_2251 in var_2250 {
            #[allow(unused_mut)]
            let mut entry_2253 = list_2252.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2253, item_2251)?;
        }
        list_2252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("DryRun");
    if let Some(var_2255) = &input.dry_run {
        scope_2254.boolean(*var_2255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("DhcpOptionsId");
    if let Some(var_2257) = &input.dhcp_options_ids {
        let mut list_2259 = scope_2256.start_list(true, Some("DhcpOptionsId"));
        for item_2258 in var_2257 {
            #[allow(unused_mut)]
            let mut entry_2260 = list_2259.entry();
            entry_2260.string(item_2258);
        }
        list_2259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2261 = writer.prefix("Filter");
    if let Some(var_2262) = &input.filters {
        let mut list_2264 = scope_2261.start_list(true, Some("Filter"));
        for item_2263 in var_2262 {
            #[allow(unused_mut)]
            let mut entry_2265 = list_2264.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2265, item_2263)?;
        }
        list_2264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("DryRun");
    if let Some(var_2267) = &input.dry_run {
        scope_2266.boolean(*var_2267);
    }
    #[allow(unused_mut)]
    let mut scope_2268 = writer.prefix("NextToken");
    if let Some(var_2269) = &input.next_token {
        scope_2268.string(var_2269);
    }
    #[allow(unused_mut)]
    let mut scope_2270 = writer.prefix("MaxResults");
    if let Some(var_2271) = &input.max_results {
        scope_2270.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2271).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("DryRun");
    if let Some(var_2273) = &input.dry_run {
        scope_2272.boolean(*var_2273);
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2275) = &input.egress_only_internet_gateway_ids {
        let mut list_2277 = scope_2274.start_list(true, Some("item"));
        for item_2276 in var_2275 {
            #[allow(unused_mut)]
            let mut entry_2278 = list_2277.entry();
            entry_2278.string(item_2276);
        }
        list_2277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2279 = writer.prefix("MaxResults");
    if let Some(var_2280) = &input.max_results {
        scope_2279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("NextToken");
    if let Some(var_2282) = &input.next_token {
        scope_2281.string(var_2282);
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("Filter");
    if let Some(var_2284) = &input.filters {
        let mut list_2286 = scope_2283.start_list(true, Some("Filter"));
        for item_2285 in var_2284 {
            #[allow(unused_mut)]
            let mut entry_2287 = list_2286.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2287, item_2285)?;
        }
        list_2286.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2288 = writer.prefix("ElasticGpuId");
    if let Some(var_2289) = &input.elastic_gpu_ids {
        let mut list_2291 = scope_2288.start_list(true, Some("item"));
        for item_2290 in var_2289 {
            #[allow(unused_mut)]
            let mut entry_2292 = list_2291.entry();
            entry_2292.string(item_2290);
        }
        list_2291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("DryRun");
    if let Some(var_2294) = &input.dry_run {
        scope_2293.boolean(*var_2294);
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("Filter");
    if let Some(var_2296) = &input.filters {
        let mut list_2298 = scope_2295.start_list(true, Some("Filter"));
        for item_2297 in var_2296 {
            #[allow(unused_mut)]
            let mut entry_2299 = list_2298.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2299, item_2297)?;
        }
        list_2298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("MaxResults");
    if let Some(var_2301) = &input.max_results {
        scope_2300.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2301).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("NextToken");
    if let Some(var_2303) = &input.next_token {
        scope_2302.string(var_2303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("DryRun");
    if let Some(var_2305) = &input.dry_run {
        scope_2304.boolean(*var_2305);
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("Filter");
    if let Some(var_2307) = &input.filters {
        let mut list_2309 = scope_2306.start_list(true, Some("Filter"));
        for item_2308 in var_2307 {
            #[allow(unused_mut)]
            let mut entry_2310 = list_2309.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2310, item_2308)?;
        }
        list_2309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2311 = writer.prefix("ExportImageTaskId");
    if let Some(var_2312) = &input.export_image_task_ids {
        let mut list_2314 = scope_2311.start_list(true, Some("ExportImageTaskId"));
        for item_2313 in var_2312 {
            #[allow(unused_mut)]
            let mut entry_2315 = list_2314.entry();
            entry_2315.string(item_2313);
        }
        list_2314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("MaxResults");
    if let Some(var_2317) = &input.max_results {
        scope_2316.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2317).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2318 = writer.prefix("NextToken");
    if let Some(var_2319) = &input.next_token {
        scope_2318.string(var_2319);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2320 = writer.prefix("ExportTaskId");
    if let Some(var_2321) = &input.export_task_ids {
        let mut list_2323 = scope_2320.start_list(true, Some("ExportTaskId"));
        for item_2322 in var_2321 {
            #[allow(unused_mut)]
            let mut entry_2324 = list_2323.entry();
            entry_2324.string(item_2322);
        }
        list_2323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("Filter");
    if let Some(var_2326) = &input.filters {
        let mut list_2328 = scope_2325.start_list(true, Some("Filter"));
        for item_2327 in var_2326 {
            #[allow(unused_mut)]
            let mut entry_2329 = list_2328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2329, item_2327)?;
        }
        list_2328.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2330 = writer.prefix("ImageId");
    if let Some(var_2331) = &input.image_ids {
        let mut list_2333 = scope_2330.start_list(true, Some("ImageId"));
        for item_2332 in var_2331 {
            #[allow(unused_mut)]
            let mut entry_2334 = list_2333.entry();
            entry_2334.string(item_2332);
        }
        list_2333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("Filter");
    if let Some(var_2336) = &input.filters {
        let mut list_2338 = scope_2335.start_list(true, Some("Filter"));
        for item_2337 in var_2336 {
            #[allow(unused_mut)]
            let mut entry_2339 = list_2338.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2339, item_2337)?;
        }
        list_2338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("MaxResults");
    if let Some(var_2341) = &input.max_results {
        scope_2340.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2341).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("NextToken");
    if let Some(var_2343) = &input.next_token {
        scope_2342.string(var_2343);
    }
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("DryRun");
    if let Some(var_2345) = &input.dry_run {
        scope_2344.boolean(*var_2345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2346 = writer.prefix("Filter");
    if let Some(var_2347) = &input.filters {
        let mut list_2349 = scope_2346.start_list(true, Some("Filter"));
        for item_2348 in var_2347 {
            #[allow(unused_mut)]
            let mut entry_2350 = list_2349.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2350, item_2348)?;
        }
        list_2349.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("MaxResults");
    if let Some(var_2352) = &input.max_results {
        scope_2351.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2352).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2353 = writer.prefix("NextToken");
    if let Some(var_2354) = &input.next_token {
        scope_2353.string(var_2354);
    }
    #[allow(unused_mut)]
    let mut scope_2355 = writer.prefix("DryRun");
    if let Some(var_2356) = &input.dry_run {
        scope_2355.boolean(*var_2356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("DryRun");
    if let Some(var_2358) = &input.dry_run {
        scope_2357.boolean(*var_2358);
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("EventType");
    if let Some(var_2360) = &input.event_type {
        scope_2359.string(var_2360.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("MaxResults");
    if let Some(var_2362) = &input.max_results {
        scope_2361.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2362).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("NextToken");
    if let Some(var_2364) = &input.next_token {
        scope_2363.string(var_2364);
    }
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("FleetId");
    if let Some(var_2366) = &input.fleet_id {
        scope_2365.string(var_2366);
    }
    #[allow(unused_mut)]
    let mut scope_2367 = writer.prefix("StartTime");
    if let Some(var_2368) = &input.start_time {
        scope_2367.date_time(var_2368, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2369 = writer.prefix("DryRun");
    if let Some(var_2370) = &input.dry_run {
        scope_2369.boolean(*var_2370);
    }
    #[allow(unused_mut)]
    let mut scope_2371 = writer.prefix("MaxResults");
    if let Some(var_2372) = &input.max_results {
        scope_2371.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2372).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("NextToken");
    if let Some(var_2374) = &input.next_token {
        scope_2373.string(var_2374);
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("FleetId");
    if let Some(var_2376) = &input.fleet_id {
        scope_2375.string(var_2376);
    }
    #[allow(unused_mut)]
    let mut scope_2377 = writer.prefix("Filter");
    if let Some(var_2378) = &input.filters {
        let mut list_2380 = scope_2377.start_list(true, Some("Filter"));
        for item_2379 in var_2378 {
            #[allow(unused_mut)]
            let mut entry_2381 = list_2380.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2381, item_2379)?;
        }
        list_2380.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("DryRun");
    if let Some(var_2383) = &input.dry_run {
        scope_2382.boolean(*var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("MaxResults");
    if let Some(var_2385) = &input.max_results {
        scope_2384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("NextToken");
    if let Some(var_2387) = &input.next_token {
        scope_2386.string(var_2387);
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("FleetId");
    if let Some(var_2389) = &input.fleet_ids {
        let mut list_2391 = scope_2388.start_list(true, None);
        for item_2390 in var_2389 {
            #[allow(unused_mut)]
            let mut entry_2392 = list_2391.entry();
            entry_2392.string(item_2390);
        }
        list_2391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2393 = writer.prefix("Filter");
    if let Some(var_2394) = &input.filters {
        let mut list_2396 = scope_2393.start_list(true, Some("Filter"));
        for item_2395 in var_2394 {
            #[allow(unused_mut)]
            let mut entry_2397 = list_2396.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2397, item_2395)?;
        }
        list_2396.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("DryRun");
    if let Some(var_2399) = &input.dry_run {
        scope_2398.boolean(*var_2399);
    }
    #[allow(unused_mut)]
    let mut scope_2400 = writer.prefix("Filter");
    if let Some(var_2401) = &input.filter {
        let mut list_2403 = scope_2400.start_list(true, Some("Filter"));
        for item_2402 in var_2401 {
            #[allow(unused_mut)]
            let mut entry_2404 = list_2403.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2404, item_2402)?;
        }
        list_2403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2405 = writer.prefix("FlowLogId");
    if let Some(var_2406) = &input.flow_log_ids {
        let mut list_2408 = scope_2405.start_list(true, Some("item"));
        for item_2407 in var_2406 {
            #[allow(unused_mut)]
            let mut entry_2409 = list_2408.entry();
            entry_2409.string(item_2407);
        }
        list_2408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("MaxResults");
    if let Some(var_2411) = &input.max_results {
        scope_2410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("NextToken");
    if let Some(var_2413) = &input.next_token {
        scope_2412.string(var_2413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("DryRun");
    if let Some(var_2415) = &input.dry_run {
        scope_2414.boolean(*var_2415);
    }
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("FpgaImageId");
    if let Some(var_2417) = &input.fpga_image_id {
        scope_2416.string(var_2417);
    }
    #[allow(unused_mut)]
    let mut scope_2418 = writer.prefix("Attribute");
    if let Some(var_2419) = &input.attribute {
        scope_2418.string(var_2419.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2420 = writer.prefix("DryRun");
    if let Some(var_2421) = &input.dry_run {
        scope_2420.boolean(*var_2421);
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("FpgaImageId");
    if let Some(var_2423) = &input.fpga_image_ids {
        let mut list_2425 = scope_2422.start_list(true, Some("item"));
        for item_2424 in var_2423 {
            #[allow(unused_mut)]
            let mut entry_2426 = list_2425.entry();
            entry_2426.string(item_2424);
        }
        list_2425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2427 = writer.prefix("Owner");
    if let Some(var_2428) = &input.owners {
        let mut list_2430 = scope_2427.start_list(true, Some("Owner"));
        for item_2429 in var_2428 {
            #[allow(unused_mut)]
            let mut entry_2431 = list_2430.entry();
            entry_2431.string(item_2429);
        }
        list_2430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2432 = writer.prefix("Filter");
    if let Some(var_2433) = &input.filters {
        let mut list_2435 = scope_2432.start_list(true, Some("Filter"));
        for item_2434 in var_2433 {
            #[allow(unused_mut)]
            let mut entry_2436 = list_2435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2436, item_2434)?;
        }
        list_2435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("NextToken");
    if let Some(var_2438) = &input.next_token {
        scope_2437.string(var_2438);
    }
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("MaxResults");
    if let Some(var_2440) = &input.max_results {
        scope_2439.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2440).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2441 = writer.prefix("Filter");
    if let Some(var_2442) = &input.filter {
        let mut list_2444 = scope_2441.start_list(true, Some("Filter"));
        for item_2443 in var_2442 {
            #[allow(unused_mut)]
            let mut entry_2445 = list_2444.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2445, item_2443)?;
        }
        list_2444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("MaxDuration");
    if let Some(var_2447) = &input.max_duration {
        scope_2446.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2447).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("MaxResults");
    if let Some(var_2449) = &input.max_results {
        scope_2448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("MinDuration");
    if let Some(var_2451) = &input.min_duration {
        scope_2450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("NextToken");
    if let Some(var_2453) = &input.next_token {
        scope_2452.string(var_2453);
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("OfferingId");
    if let Some(var_2455) = &input.offering_id {
        scope_2454.string(var_2455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("Filter");
    if let Some(var_2457) = &input.filter {
        let mut list_2459 = scope_2456.start_list(true, Some("Filter"));
        for item_2458 in var_2457 {
            #[allow(unused_mut)]
            let mut entry_2460 = list_2459.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2460, item_2458)?;
        }
        list_2459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("HostReservationIdSet");
    if let Some(var_2462) = &input.host_reservation_id_set {
        let mut list_2464 = scope_2461.start_list(true, Some("item"));
        for item_2463 in var_2462 {
            #[allow(unused_mut)]
            let mut entry_2465 = list_2464.entry();
            entry_2465.string(item_2463);
        }
        list_2464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2466 = writer.prefix("MaxResults");
    if let Some(var_2467) = &input.max_results {
        scope_2466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2468 = writer.prefix("NextToken");
    if let Some(var_2469) = &input.next_token {
        scope_2468.string(var_2469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("Filter");
    if let Some(var_2471) = &input.filter {
        let mut list_2473 = scope_2470.start_list(true, Some("Filter"));
        for item_2472 in var_2471 {
            #[allow(unused_mut)]
            let mut entry_2474 = list_2473.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2474, item_2472)?;
        }
        list_2473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("HostId");
    if let Some(var_2476) = &input.host_ids {
        let mut list_2478 = scope_2475.start_list(true, Some("item"));
        for item_2477 in var_2476 {
            #[allow(unused_mut)]
            let mut entry_2479 = list_2478.entry();
            entry_2479.string(item_2477);
        }
        list_2478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2480 = writer.prefix("MaxResults");
    if let Some(var_2481) = &input.max_results {
        scope_2480.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("NextToken");
    if let Some(var_2483) = &input.next_token {
        scope_2482.string(var_2483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("AssociationId");
    if let Some(var_2485) = &input.association_ids {
        let mut list_2487 = scope_2484.start_list(true, Some("AssociationId"));
        for item_2486 in var_2485 {
            #[allow(unused_mut)]
            let mut entry_2488 = list_2487.entry();
            entry_2488.string(item_2486);
        }
        list_2487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("Filter");
    if let Some(var_2490) = &input.filters {
        let mut list_2492 = scope_2489.start_list(true, Some("Filter"));
        for item_2491 in var_2490 {
            #[allow(unused_mut)]
            let mut entry_2493 = list_2492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2493, item_2491)?;
        }
        list_2492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2494 = writer.prefix("MaxResults");
    if let Some(var_2495) = &input.max_results {
        scope_2494.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2495).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("NextToken");
    if let Some(var_2497) = &input.next_token {
        scope_2496.string(var_2497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("PrincipalArn");
    if let Some(var_2499) = &input.principal_arn {
        scope_2498.string(var_2499);
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("Resource");
    if let Some(var_2501) = &input.resource {
        scope_2500.string(var_2501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("Resource");
    if let Some(var_2503) = &input.resource {
        scope_2502.string(var_2503);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("Attribute");
    if let Some(var_2505) = &input.attribute {
        scope_2504.string(var_2505.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("ImageId");
    if let Some(var_2507) = &input.image_id {
        scope_2506.string(var_2507);
    }
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("DryRun");
    if let Some(var_2509) = &input.dry_run {
        scope_2508.boolean(*var_2509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2510 = writer.prefix("ExecutableBy");
    if let Some(var_2511) = &input.executable_users {
        let mut list_2513 = scope_2510.start_list(true, Some("ExecutableBy"));
        for item_2512 in var_2511 {
            #[allow(unused_mut)]
            let mut entry_2514 = list_2513.entry();
            entry_2514.string(item_2512);
        }
        list_2513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("Filter");
    if let Some(var_2516) = &input.filters {
        let mut list_2518 = scope_2515.start_list(true, Some("Filter"));
        for item_2517 in var_2516 {
            #[allow(unused_mut)]
            let mut entry_2519 = list_2518.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2519, item_2517)?;
        }
        list_2518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2520 = writer.prefix("ImageId");
    if let Some(var_2521) = &input.image_ids {
        let mut list_2523 = scope_2520.start_list(true, Some("ImageId"));
        for item_2522 in var_2521 {
            #[allow(unused_mut)]
            let mut entry_2524 = list_2523.entry();
            entry_2524.string(item_2522);
        }
        list_2523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("Owner");
    if let Some(var_2526) = &input.owners {
        let mut list_2528 = scope_2525.start_list(true, Some("Owner"));
        for item_2527 in var_2526 {
            #[allow(unused_mut)]
            let mut entry_2529 = list_2528.entry();
            entry_2529.string(item_2527);
        }
        list_2528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("IncludeDeprecated");
    if let Some(var_2531) = &input.include_deprecated {
        scope_2530.boolean(*var_2531);
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("DryRun");
    if let Some(var_2533) = &input.dry_run {
        scope_2532.boolean(*var_2533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2534 = writer.prefix("DryRun");
    if let Some(var_2535) = &input.dry_run {
        scope_2534.boolean(*var_2535);
    }
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("Filters");
    if let Some(var_2537) = &input.filters {
        let mut list_2539 = scope_2536.start_list(true, Some("Filter"));
        for item_2538 in var_2537 {
            #[allow(unused_mut)]
            let mut entry_2540 = list_2539.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2540, item_2538)?;
        }
        list_2539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2541 = writer.prefix("ImportTaskId");
    if let Some(var_2542) = &input.import_task_ids {
        let mut list_2544 = scope_2541.start_list(true, Some("ImportTaskId"));
        for item_2543 in var_2542 {
            #[allow(unused_mut)]
            let mut entry_2545 = list_2544.entry();
            entry_2545.string(item_2543);
        }
        list_2544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("MaxResults");
    if let Some(var_2547) = &input.max_results {
        scope_2546.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("NextToken");
    if let Some(var_2549) = &input.next_token {
        scope_2548.string(var_2549);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("DryRun");
    if let Some(var_2551) = &input.dry_run {
        scope_2550.boolean(*var_2551);
    }
    #[allow(unused_mut)]
    let mut scope_2552 = writer.prefix("Filters");
    if let Some(var_2553) = &input.filters {
        let mut list_2555 = scope_2552.start_list(true, Some("Filter"));
        for item_2554 in var_2553 {
            #[allow(unused_mut)]
            let mut entry_2556 = list_2555.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2556, item_2554)?;
        }
        list_2555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2557 = writer.prefix("ImportTaskId");
    if let Some(var_2558) = &input.import_task_ids {
        let mut list_2560 = scope_2557.start_list(true, Some("ImportTaskId"));
        for item_2559 in var_2558 {
            #[allow(unused_mut)]
            let mut entry_2561 = list_2560.entry();
            entry_2561.string(item_2559);
        }
        list_2560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("MaxResults");
    if let Some(var_2563) = &input.max_results {
        scope_2562.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("NextToken");
    if let Some(var_2565) = &input.next_token {
        scope_2564.string(var_2565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("Attribute");
    if let Some(var_2567) = &input.attribute {
        scope_2566.string(var_2567.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("DryRun");
    if let Some(var_2569) = &input.dry_run {
        scope_2568.boolean(*var_2569);
    }
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("InstanceId");
    if let Some(var_2571) = &input.instance_id {
        scope_2570.string(var_2571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2572 = writer.prefix("DryRun");
    if let Some(var_2573) = &input.dry_run {
        scope_2572.boolean(*var_2573);
    }
    #[allow(unused_mut)]
    let mut scope_2574 = writer.prefix("Filter");
    if let Some(var_2575) = &input.filters {
        let mut list_2577 = scope_2574.start_list(true, Some("Filter"));
        for item_2576 in var_2575 {
            #[allow(unused_mut)]
            let mut entry_2578 = list_2577.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2578, item_2576)?;
        }
        list_2577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("InstanceId");
    if let Some(var_2580) = &input.instance_ids {
        let mut list_2582 = scope_2579.start_list(true, Some("InstanceId"));
        for item_2581 in var_2580 {
            #[allow(unused_mut)]
            let mut entry_2583 = list_2582.entry();
            entry_2583.string(item_2581);
        }
        list_2582.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2584 = writer.prefix("MaxResults");
    if let Some(var_2585) = &input.max_results {
        scope_2584.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2585).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2586 = writer.prefix("NextToken");
    if let Some(var_2587) = &input.next_token {
        scope_2586.string(var_2587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2588 = writer.prefix("DryRun");
    if let Some(var_2589) = &input.dry_run {
        scope_2588.boolean(*var_2589);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2590 = writer.prefix("DryRun");
    if let Some(var_2591) = &input.dry_run {
        scope_2590.boolean(*var_2591);
    }
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2593) = &input.instance_event_window_ids {
        let mut list_2595 = scope_2592.start_list(true, Some("InstanceEventWindowId"));
        for item_2594 in var_2593 {
            #[allow(unused_mut)]
            let mut entry_2596 = list_2595.entry();
            entry_2596.string(item_2594);
        }
        list_2595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2597 = writer.prefix("Filter");
    if let Some(var_2598) = &input.filters {
        let mut list_2600 = scope_2597.start_list(true, Some("Filter"));
        for item_2599 in var_2598 {
            #[allow(unused_mut)]
            let mut entry_2601 = list_2600.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2601, item_2599)?;
        }
        list_2600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2602 = writer.prefix("MaxResults");
    if let Some(var_2603) = &input.max_results {
        scope_2602.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2603).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2604 = writer.prefix("NextToken");
    if let Some(var_2605) = &input.next_token {
        scope_2604.string(var_2605);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2606 = writer.prefix("Filter");
    if let Some(var_2607) = &input.filters {
        let mut list_2609 = scope_2606.start_list(true, Some("Filter"));
        for item_2608 in var_2607 {
            #[allow(unused_mut)]
            let mut entry_2610 = list_2609.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2610, item_2608)?;
        }
        list_2609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2611 = writer.prefix("InstanceId");
    if let Some(var_2612) = &input.instance_ids {
        let mut list_2614 = scope_2611.start_list(true, Some("InstanceId"));
        for item_2613 in var_2612 {
            #[allow(unused_mut)]
            let mut entry_2615 = list_2614.entry();
            entry_2615.string(item_2613);
        }
        list_2614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("DryRun");
    if let Some(var_2617) = &input.dry_run {
        scope_2616.boolean(*var_2617);
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("MaxResults");
    if let Some(var_2619) = &input.max_results {
        scope_2618.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2619).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("NextToken");
    if let Some(var_2621) = &input.next_token {
        scope_2620.string(var_2621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2622 = writer.prefix("Filter");
    if let Some(var_2623) = &input.filters {
        let mut list_2625 = scope_2622.start_list(true, Some("Filter"));
        for item_2624 in var_2623 {
            #[allow(unused_mut)]
            let mut entry_2626 = list_2625.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2626, item_2624)?;
        }
        list_2625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("InstanceId");
    if let Some(var_2628) = &input.instance_ids {
        let mut list_2630 = scope_2627.start_list(true, Some("InstanceId"));
        for item_2629 in var_2628 {
            #[allow(unused_mut)]
            let mut entry_2631 = list_2630.entry();
            entry_2631.string(item_2629);
        }
        list_2630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2632 = writer.prefix("MaxResults");
    if let Some(var_2633) = &input.max_results {
        scope_2632.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2633).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2634 = writer.prefix("NextToken");
    if let Some(var_2635) = &input.next_token {
        scope_2634.string(var_2635);
    }
    #[allow(unused_mut)]
    let mut scope_2636 = writer.prefix("DryRun");
    if let Some(var_2637) = &input.dry_run {
        scope_2636.boolean(*var_2637);
    }
    #[allow(unused_mut)]
    let mut scope_2638 = writer.prefix("IncludeAllInstances");
    if let Some(var_2639) = &input.include_all_instances {
        scope_2638.boolean(*var_2639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("DryRun");
    if let Some(var_2641) = &input.dry_run {
        scope_2640.boolean(*var_2641);
    }
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("LocationType");
    if let Some(var_2643) = &input.location_type {
        scope_2642.string(var_2643.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2644 = writer.prefix("Filter");
    if let Some(var_2645) = &input.filters {
        let mut list_2647 = scope_2644.start_list(true, Some("Filter"));
        for item_2646 in var_2645 {
            #[allow(unused_mut)]
            let mut entry_2648 = list_2647.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2648, item_2646)?;
        }
        list_2647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("MaxResults");
    if let Some(var_2650) = &input.max_results {
        scope_2649.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("NextToken");
    if let Some(var_2652) = &input.next_token {
        scope_2651.string(var_2652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("DryRun");
    if let Some(var_2654) = &input.dry_run {
        scope_2653.boolean(*var_2654);
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("InstanceType");
    if let Some(var_2656) = &input.instance_types {
        let mut list_2658 = scope_2655.start_list(true, None);
        for item_2657 in var_2656 {
            #[allow(unused_mut)]
            let mut entry_2659 = list_2658.entry();
            entry_2659.string(item_2657.as_str());
        }
        list_2658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2660 = writer.prefix("Filter");
    if let Some(var_2661) = &input.filters {
        let mut list_2663 = scope_2660.start_list(true, Some("Filter"));
        for item_2662 in var_2661 {
            #[allow(unused_mut)]
            let mut entry_2664 = list_2663.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2664, item_2662)?;
        }
        list_2663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2665 = writer.prefix("MaxResults");
    if let Some(var_2666) = &input.max_results {
        scope_2665.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2666).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("NextToken");
    if let Some(var_2668) = &input.next_token {
        scope_2667.string(var_2668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2669 = writer.prefix("Filter");
    if let Some(var_2670) = &input.filters {
        let mut list_2672 = scope_2669.start_list(true, Some("Filter"));
        for item_2671 in var_2670 {
            #[allow(unused_mut)]
            let mut entry_2673 = list_2672.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2673, item_2671)?;
        }
        list_2672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("DryRun");
    if let Some(var_2675) = &input.dry_run {
        scope_2674.boolean(*var_2675);
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("InternetGatewayId");
    if let Some(var_2677) = &input.internet_gateway_ids {
        let mut list_2679 = scope_2676.start_list(true, Some("item"));
        for item_2678 in var_2677 {
            #[allow(unused_mut)]
            let mut entry_2680 = list_2679.entry();
            entry_2680.string(item_2678);
        }
        list_2679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2681 = writer.prefix("NextToken");
    if let Some(var_2682) = &input.next_token {
        scope_2681.string(var_2682);
    }
    #[allow(unused_mut)]
    let mut scope_2683 = writer.prefix("MaxResults");
    if let Some(var_2684) = &input.max_results {
        scope_2683.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2684).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2685 = writer.prefix("DryRun");
    if let Some(var_2686) = &input.dry_run {
        scope_2685.boolean(*var_2686);
    }
    #[allow(unused_mut)]
    let mut scope_2687 = writer.prefix("Filter");
    if let Some(var_2688) = &input.filters {
        let mut list_2690 = scope_2687.start_list(true, Some("Filter"));
        for item_2689 in var_2688 {
            #[allow(unused_mut)]
            let mut entry_2691 = list_2690.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2691, item_2689)?;
        }
        list_2690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("MaxResults");
    if let Some(var_2693) = &input.max_results {
        scope_2692.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2693).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("NextToken");
    if let Some(var_2695) = &input.next_token {
        scope_2694.string(var_2695);
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("IpamPoolId");
    if let Some(var_2697) = &input.ipam_pool_ids {
        let mut list_2699 = scope_2696.start_list(true, Some("item"));
        for item_2698 in var_2697 {
            #[allow(unused_mut)]
            let mut entry_2700 = list_2699.entry();
            entry_2700.string(item_2698);
        }
        list_2699.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2701 = writer.prefix("DryRun");
    if let Some(var_2702) = &input.dry_run {
        scope_2701.boolean(*var_2702);
    }
    #[allow(unused_mut)]
    let mut scope_2703 = writer.prefix("Filter");
    if let Some(var_2704) = &input.filters {
        let mut list_2706 = scope_2703.start_list(true, Some("Filter"));
        for item_2705 in var_2704 {
            #[allow(unused_mut)]
            let mut entry_2707 = list_2706.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2707, item_2705)?;
        }
        list_2706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2708 = writer.prefix("MaxResults");
    if let Some(var_2709) = &input.max_results {
        scope_2708.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2709).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2710 = writer.prefix("NextToken");
    if let Some(var_2711) = &input.next_token {
        scope_2710.string(var_2711);
    }
    #[allow(unused_mut)]
    let mut scope_2712 = writer.prefix("IpamId");
    if let Some(var_2713) = &input.ipam_ids {
        let mut list_2715 = scope_2712.start_list(true, Some("item"));
        for item_2714 in var_2713 {
            #[allow(unused_mut)]
            let mut entry_2716 = list_2715.entry();
            entry_2716.string(item_2714);
        }
        list_2715.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2717 = writer.prefix("DryRun");
    if let Some(var_2718) = &input.dry_run {
        scope_2717.boolean(*var_2718);
    }
    #[allow(unused_mut)]
    let mut scope_2719 = writer.prefix("Filter");
    if let Some(var_2720) = &input.filters {
        let mut list_2722 = scope_2719.start_list(true, Some("Filter"));
        for item_2721 in var_2720 {
            #[allow(unused_mut)]
            let mut entry_2723 = list_2722.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2723, item_2721)?;
        }
        list_2722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("MaxResults");
    if let Some(var_2725) = &input.max_results {
        scope_2724.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2725).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2726 = writer.prefix("NextToken");
    if let Some(var_2727) = &input.next_token {
        scope_2726.string(var_2727);
    }
    #[allow(unused_mut)]
    let mut scope_2728 = writer.prefix("IpamScopeId");
    if let Some(var_2729) = &input.ipam_scope_ids {
        let mut list_2731 = scope_2728.start_list(true, Some("item"));
        for item_2730 in var_2729 {
            #[allow(unused_mut)]
            let mut entry_2732 = list_2731.entry();
            entry_2732.string(item_2730);
        }
        list_2731.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2733 = writer.prefix("PoolId");
    if let Some(var_2734) = &input.pool_ids {
        let mut list_2736 = scope_2733.start_list(true, Some("item"));
        for item_2735 in var_2734 {
            #[allow(unused_mut)]
            let mut entry_2737 = list_2736.entry();
            entry_2737.string(item_2735);
        }
        list_2736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("NextToken");
    if let Some(var_2739) = &input.next_token {
        scope_2738.string(var_2739);
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("MaxResults");
    if let Some(var_2741) = &input.max_results {
        scope_2740.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("DryRun");
    if let Some(var_2743) = &input.dry_run {
        scope_2742.boolean(*var_2743);
    }
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("Filter");
    if let Some(var_2745) = &input.filters {
        let mut list_2747 = scope_2744.start_list(true, Some("Filter"));
        for item_2746 in var_2745 {
            #[allow(unused_mut)]
            let mut entry_2748 = list_2747.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2748, item_2746)?;
        }
        list_2747.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("Filter");
    if let Some(var_2750) = &input.filters {
        let mut list_2752 = scope_2749.start_list(true, Some("Filter"));
        for item_2751 in var_2750 {
            #[allow(unused_mut)]
            let mut entry_2753 = list_2752.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2753, item_2751)?;
        }
        list_2752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("KeyName");
    if let Some(var_2755) = &input.key_names {
        let mut list_2757 = scope_2754.start_list(true, Some("KeyName"));
        for item_2756 in var_2755 {
            #[allow(unused_mut)]
            let mut entry_2758 = list_2757.entry();
            entry_2758.string(item_2756);
        }
        list_2757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("KeyPairId");
    if let Some(var_2760) = &input.key_pair_ids {
        let mut list_2762 = scope_2759.start_list(true, Some("KeyPairId"));
        for item_2761 in var_2760 {
            #[allow(unused_mut)]
            let mut entry_2763 = list_2762.entry();
            entry_2763.string(item_2761);
        }
        list_2762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2764 = writer.prefix("DryRun");
    if let Some(var_2765) = &input.dry_run {
        scope_2764.boolean(*var_2765);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2766 = writer.prefix("DryRun");
    if let Some(var_2767) = &input.dry_run {
        scope_2766.boolean(*var_2767);
    }
    #[allow(unused_mut)]
    let mut scope_2768 = writer.prefix("LaunchTemplateId");
    if let Some(var_2769) = &input.launch_template_ids {
        let mut list_2771 = scope_2768.start_list(true, Some("item"));
        for item_2770 in var_2769 {
            #[allow(unused_mut)]
            let mut entry_2772 = list_2771.entry();
            entry_2772.string(item_2770);
        }
        list_2771.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("LaunchTemplateName");
    if let Some(var_2774) = &input.launch_template_names {
        let mut list_2776 = scope_2773.start_list(true, Some("item"));
        for item_2775 in var_2774 {
            #[allow(unused_mut)]
            let mut entry_2777 = list_2776.entry();
            entry_2777.string(item_2775);
        }
        list_2776.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("Filter");
    if let Some(var_2779) = &input.filters {
        let mut list_2781 = scope_2778.start_list(true, Some("Filter"));
        for item_2780 in var_2779 {
            #[allow(unused_mut)]
            let mut entry_2782 = list_2781.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2782, item_2780)?;
        }
        list_2781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("NextToken");
    if let Some(var_2784) = &input.next_token {
        scope_2783.string(var_2784);
    }
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("MaxResults");
    if let Some(var_2786) = &input.max_results {
        scope_2785.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2786).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("DryRun");
    if let Some(var_2788) = &input.dry_run {
        scope_2787.boolean(*var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("LaunchTemplateId");
    if let Some(var_2790) = &input.launch_template_id {
        scope_2789.string(var_2790);
    }
    #[allow(unused_mut)]
    let mut scope_2791 = writer.prefix("LaunchTemplateName");
    if let Some(var_2792) = &input.launch_template_name {
        scope_2791.string(var_2792);
    }
    #[allow(unused_mut)]
    let mut scope_2793 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2794) = &input.versions {
        let mut list_2796 = scope_2793.start_list(true, Some("item"));
        for item_2795 in var_2794 {
            #[allow(unused_mut)]
            let mut entry_2797 = list_2796.entry();
            entry_2797.string(item_2795);
        }
        list_2796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("MinVersion");
    if let Some(var_2799) = &input.min_version {
        scope_2798.string(var_2799);
    }
    #[allow(unused_mut)]
    let mut scope_2800 = writer.prefix("MaxVersion");
    if let Some(var_2801) = &input.max_version {
        scope_2800.string(var_2801);
    }
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("NextToken");
    if let Some(var_2803) = &input.next_token {
        scope_2802.string(var_2803);
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("MaxResults");
    if let Some(var_2805) = &input.max_results {
        scope_2804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2805).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("Filter");
    if let Some(var_2807) = &input.filters {
        let mut list_2809 = scope_2806.start_list(true, Some("Filter"));
        for item_2808 in var_2807 {
            #[allow(unused_mut)]
            let mut entry_2810 = list_2809.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2810, item_2808)?;
        }
        list_2809.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2811 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2812) = &input.local_gateway_route_table_ids {
        let mut list_2814 = scope_2811.start_list(true, Some("item"));
        for item_2813 in var_2812 {
            #[allow(unused_mut)]
            let mut entry_2815 = list_2814.entry();
            entry_2815.string(item_2813);
        }
        list_2814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2816 = writer.prefix("Filter");
    if let Some(var_2817) = &input.filters {
        let mut list_2819 = scope_2816.start_list(true, Some("Filter"));
        for item_2818 in var_2817 {
            #[allow(unused_mut)]
            let mut entry_2820 = list_2819.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2820, item_2818)?;
        }
        list_2819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("MaxResults");
    if let Some(var_2822) = &input.max_results {
        scope_2821.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2822).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("NextToken");
    if let Some(var_2824) = &input.next_token {
        scope_2823.string(var_2824);
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("DryRun");
    if let Some(var_2826) = &input.dry_run {
        scope_2825.boolean(*var_2826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2827 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2828) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2830 = scope_2827.start_list(true, Some("item"));
        for item_2829 in var_2828 {
            #[allow(unused_mut)]
            let mut entry_2831 = list_2830.entry();
            entry_2831.string(item_2829);
        }
        list_2830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2832 = writer.prefix("Filter");
    if let Some(var_2833) = &input.filters {
        let mut list_2835 = scope_2832.start_list(true, Some("Filter"));
        for item_2834 in var_2833 {
            #[allow(unused_mut)]
            let mut entry_2836 = list_2835.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2836, item_2834)?;
        }
        list_2835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2837 = writer.prefix("MaxResults");
    if let Some(var_2838) = &input.max_results {
        scope_2837.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2838).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2839 = writer.prefix("NextToken");
    if let Some(var_2840) = &input.next_token {
        scope_2839.string(var_2840);
    }
    #[allow(unused_mut)]
    let mut scope_2841 = writer.prefix("DryRun");
    if let Some(var_2842) = &input.dry_run {
        scope_2841.boolean(*var_2842);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2843 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2844) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2846 = scope_2843.start_list(true, Some("item"));
        for item_2845 in var_2844 {
            #[allow(unused_mut)]
            let mut entry_2847 = list_2846.entry();
            entry_2847.string(item_2845);
        }
        list_2846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2848 = writer.prefix("Filter");
    if let Some(var_2849) = &input.filters {
        let mut list_2851 = scope_2848.start_list(true, Some("Filter"));
        for item_2850 in var_2849 {
            #[allow(unused_mut)]
            let mut entry_2852 = list_2851.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2852, item_2850)?;
        }
        list_2851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2853 = writer.prefix("MaxResults");
    if let Some(var_2854) = &input.max_results {
        scope_2853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2855 = writer.prefix("NextToken");
    if let Some(var_2856) = &input.next_token {
        scope_2855.string(var_2856);
    }
    #[allow(unused_mut)]
    let mut scope_2857 = writer.prefix("DryRun");
    if let Some(var_2858) = &input.dry_run {
        scope_2857.boolean(*var_2858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2859 = writer.prefix("LocalGatewayId");
    if let Some(var_2860) = &input.local_gateway_ids {
        let mut list_2862 = scope_2859.start_list(true, Some("item"));
        for item_2861 in var_2860 {
            #[allow(unused_mut)]
            let mut entry_2863 = list_2862.entry();
            entry_2863.string(item_2861);
        }
        list_2862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2864 = writer.prefix("Filter");
    if let Some(var_2865) = &input.filters {
        let mut list_2867 = scope_2864.start_list(true, Some("Filter"));
        for item_2866 in var_2865 {
            #[allow(unused_mut)]
            let mut entry_2868 = list_2867.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2868, item_2866)?;
        }
        list_2867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2869 = writer.prefix("MaxResults");
    if let Some(var_2870) = &input.max_results {
        scope_2869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2871 = writer.prefix("NextToken");
    if let Some(var_2872) = &input.next_token {
        scope_2871.string(var_2872);
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("DryRun");
    if let Some(var_2874) = &input.dry_run {
        scope_2873.boolean(*var_2874);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2876) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2878 = scope_2875.start_list(true, Some("item"));
        for item_2877 in var_2876 {
            #[allow(unused_mut)]
            let mut entry_2879 = list_2878.entry();
            entry_2879.string(item_2877);
        }
        list_2878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("Filter");
    if let Some(var_2881) = &input.filters {
        let mut list_2883 = scope_2880.start_list(true, Some("Filter"));
        for item_2882 in var_2881 {
            #[allow(unused_mut)]
            let mut entry_2884 = list_2883.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2884, item_2882)?;
        }
        list_2883.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2885 = writer.prefix("MaxResults");
    if let Some(var_2886) = &input.max_results {
        scope_2885.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2886).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2887 = writer.prefix("NextToken");
    if let Some(var_2888) = &input.next_token {
        scope_2887.string(var_2888);
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("DryRun");
    if let Some(var_2890) = &input.dry_run {
        scope_2889.boolean(*var_2890);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2891 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2892) = &input.local_gateway_virtual_interface_ids {
        let mut list_2894 = scope_2891.start_list(true, Some("item"));
        for item_2893 in var_2892 {
            #[allow(unused_mut)]
            let mut entry_2895 = list_2894.entry();
            entry_2895.string(item_2893);
        }
        list_2894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("Filter");
    if let Some(var_2897) = &input.filters {
        let mut list_2899 = scope_2896.start_list(true, Some("Filter"));
        for item_2898 in var_2897 {
            #[allow(unused_mut)]
            let mut entry_2900 = list_2899.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2900, item_2898)?;
        }
        list_2899.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2901 = writer.prefix("MaxResults");
    if let Some(var_2902) = &input.max_results {
        scope_2901.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2902).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2903 = writer.prefix("NextToken");
    if let Some(var_2904) = &input.next_token {
        scope_2903.string(var_2904);
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("DryRun");
    if let Some(var_2906) = &input.dry_run {
        scope_2905.boolean(*var_2906);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("DryRun");
    if let Some(var_2908) = &input.dry_run {
        scope_2907.boolean(*var_2908);
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("Filter");
    if let Some(var_2910) = &input.filters {
        let mut list_2912 = scope_2909.start_list(true, Some("Filter"));
        for item_2911 in var_2910 {
            #[allow(unused_mut)]
            let mut entry_2913 = list_2912.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2913, item_2911)?;
        }
        list_2912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("MaxResults");
    if let Some(var_2915) = &input.max_results {
        scope_2914.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2915).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("NextToken");
    if let Some(var_2917) = &input.next_token {
        scope_2916.string(var_2917);
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("PrefixListId");
    if let Some(var_2919) = &input.prefix_list_ids {
        let mut list_2921 = scope_2918.start_list(true, Some("item"));
        for item_2920 in var_2919 {
            #[allow(unused_mut)]
            let mut entry_2922 = list_2921.entry();
            entry_2922.string(item_2920);
        }
        list_2921.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2923 = writer.prefix("Filter");
    if let Some(var_2924) = &input.filters {
        let mut list_2926 = scope_2923.start_list(true, Some("Filter"));
        for item_2925 in var_2924 {
            #[allow(unused_mut)]
            let mut entry_2927 = list_2926.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2927, item_2925)?;
        }
        list_2926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("DryRun");
    if let Some(var_2929) = &input.dry_run {
        scope_2928.boolean(*var_2929);
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("MaxResults");
    if let Some(var_2931) = &input.max_results {
        scope_2930.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2931).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("NextToken");
    if let Some(var_2933) = &input.next_token {
        scope_2932.string(var_2933);
    }
    #[allow(unused_mut)]
    let mut scope_2934 = writer.prefix("PublicIp");
    if let Some(var_2935) = &input.public_ips {
        let mut list_2937 = scope_2934.start_list(true, Some("item"));
        for item_2936 in var_2935 {
            #[allow(unused_mut)]
            let mut entry_2938 = list_2937.entry();
            entry_2938.string(item_2936);
        }
        list_2937.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("DryRun");
    if let Some(var_2940) = &input.dry_run {
        scope_2939.boolean(*var_2940);
    }
    #[allow(unused_mut)]
    let mut scope_2941 = writer.prefix("Filter");
    if let Some(var_2942) = &input.filter {
        let mut list_2944 = scope_2941.start_list(true, Some("Filter"));
        for item_2943 in var_2942 {
            #[allow(unused_mut)]
            let mut entry_2945 = list_2944.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2945, item_2943)?;
        }
        list_2944.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2946 = writer.prefix("MaxResults");
    if let Some(var_2947) = &input.max_results {
        scope_2946.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2947).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2948 = writer.prefix("NatGatewayId");
    if let Some(var_2949) = &input.nat_gateway_ids {
        let mut list_2951 = scope_2948.start_list(true, Some("item"));
        for item_2950 in var_2949 {
            #[allow(unused_mut)]
            let mut entry_2952 = list_2951.entry();
            entry_2952.string(item_2950);
        }
        list_2951.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("NextToken");
    if let Some(var_2954) = &input.next_token {
        scope_2953.string(var_2954);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2955 = writer.prefix("Filter");
    if let Some(var_2956) = &input.filters {
        let mut list_2958 = scope_2955.start_list(true, Some("Filter"));
        for item_2957 in var_2956 {
            #[allow(unused_mut)]
            let mut entry_2959 = list_2958.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2959, item_2957)?;
        }
        list_2958.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("DryRun");
    if let Some(var_2961) = &input.dry_run {
        scope_2960.boolean(*var_2961);
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("NetworkAclId");
    if let Some(var_2963) = &input.network_acl_ids {
        let mut list_2965 = scope_2962.start_list(true, Some("item"));
        for item_2964 in var_2963 {
            #[allow(unused_mut)]
            let mut entry_2966 = list_2965.entry();
            entry_2966.string(item_2964);
        }
        list_2965.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("NextToken");
    if let Some(var_2968) = &input.next_token {
        scope_2967.string(var_2968);
    }
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("MaxResults");
    if let Some(var_2970) = &input.max_results {
        scope_2969.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2970).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2972) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2974 = scope_2971.start_list(true, Some("item"));
        for item_2973 in var_2972 {
            #[allow(unused_mut)]
            let mut entry_2975 = list_2974.entry();
            entry_2975.string(item_2973);
        }
        list_2974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2976 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2977) = &input.network_insights_access_scope_id {
        scope_2976.string(var_2977);
    }
    #[allow(unused_mut)]
    let mut scope_2978 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2979) = &input.analysis_start_time_begin {
        scope_2978.date_time(var_2979, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2981) = &input.analysis_start_time_end {
        scope_2980.date_time(var_2981, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("Filter");
    if let Some(var_2983) = &input.filters {
        let mut list_2985 = scope_2982.start_list(true, Some("Filter"));
        for item_2984 in var_2983 {
            #[allow(unused_mut)]
            let mut entry_2986 = list_2985.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2986, item_2984)?;
        }
        list_2985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("MaxResults");
    if let Some(var_2988) = &input.max_results {
        scope_2987.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("DryRun");
    if let Some(var_2990) = &input.dry_run {
        scope_2989.boolean(*var_2990);
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("NextToken");
    if let Some(var_2992) = &input.next_token {
        scope_2991.string(var_2992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2994) = &input.network_insights_access_scope_ids {
        let mut list_2996 = scope_2993.start_list(true, Some("item"));
        for item_2995 in var_2994 {
            #[allow(unused_mut)]
            let mut entry_2997 = list_2996.entry();
            entry_2997.string(item_2995);
        }
        list_2996.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2998 = writer.prefix("Filter");
    if let Some(var_2999) = &input.filters {
        let mut list_3001 = scope_2998.start_list(true, Some("Filter"));
        for item_3000 in var_2999 {
            #[allow(unused_mut)]
            let mut entry_3002 = list_3001.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3002, item_3000)?;
        }
        list_3001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("MaxResults");
    if let Some(var_3004) = &input.max_results {
        scope_3003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3004).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("DryRun");
    if let Some(var_3006) = &input.dry_run {
        scope_3005.boolean(*var_3006);
    }
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("NextToken");
    if let Some(var_3008) = &input.next_token {
        scope_3007.string(var_3008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3009 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3010) = &input.network_insights_analysis_ids {
        let mut list_3012 = scope_3009.start_list(true, Some("item"));
        for item_3011 in var_3010 {
            #[allow(unused_mut)]
            let mut entry_3013 = list_3012.entry();
            entry_3013.string(item_3011);
        }
        list_3012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3015) = &input.network_insights_path_id {
        scope_3014.string(var_3015);
    }
    #[allow(unused_mut)]
    let mut scope_3016 = writer.prefix("AnalysisStartTime");
    if let Some(var_3017) = &input.analysis_start_time {
        scope_3016.date_time(var_3017, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3018 = writer.prefix("AnalysisEndTime");
    if let Some(var_3019) = &input.analysis_end_time {
        scope_3018.date_time(var_3019, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3020 = writer.prefix("Filter");
    if let Some(var_3021) = &input.filters {
        let mut list_3023 = scope_3020.start_list(true, Some("Filter"));
        for item_3022 in var_3021 {
            #[allow(unused_mut)]
            let mut entry_3024 = list_3023.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3024, item_3022)?;
        }
        list_3023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("MaxResults");
    if let Some(var_3026) = &input.max_results {
        scope_3025.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3026).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("DryRun");
    if let Some(var_3028) = &input.dry_run {
        scope_3027.boolean(*var_3028);
    }
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("NextToken");
    if let Some(var_3030) = &input.next_token {
        scope_3029.string(var_3030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3031 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3032) = &input.network_insights_path_ids {
        let mut list_3034 = scope_3031.start_list(true, Some("item"));
        for item_3033 in var_3032 {
            #[allow(unused_mut)]
            let mut entry_3035 = list_3034.entry();
            entry_3035.string(item_3033);
        }
        list_3034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3036 = writer.prefix("Filter");
    if let Some(var_3037) = &input.filters {
        let mut list_3039 = scope_3036.start_list(true, Some("Filter"));
        for item_3038 in var_3037 {
            #[allow(unused_mut)]
            let mut entry_3040 = list_3039.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3040, item_3038)?;
        }
        list_3039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3041 = writer.prefix("MaxResults");
    if let Some(var_3042) = &input.max_results {
        scope_3041.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3042).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3043 = writer.prefix("DryRun");
    if let Some(var_3044) = &input.dry_run {
        scope_3043.boolean(*var_3044);
    }
    #[allow(unused_mut)]
    let mut scope_3045 = writer.prefix("NextToken");
    if let Some(var_3046) = &input.next_token {
        scope_3045.string(var_3046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3047 = writer.prefix("Attribute");
    if let Some(var_3048) = &input.attribute {
        scope_3047.string(var_3048.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3049 = writer.prefix("DryRun");
    if let Some(var_3050) = &input.dry_run {
        scope_3049.boolean(*var_3050);
    }
    #[allow(unused_mut)]
    let mut scope_3051 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3052) = &input.network_interface_id {
        scope_3051.string(var_3052);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3053 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3054) = &input.network_interface_permission_ids {
        let mut list_3056 = scope_3053.start_list(true, None);
        for item_3055 in var_3054 {
            #[allow(unused_mut)]
            let mut entry_3057 = list_3056.entry();
            entry_3057.string(item_3055);
        }
        list_3056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3058 = writer.prefix("Filter");
    if let Some(var_3059) = &input.filters {
        let mut list_3061 = scope_3058.start_list(true, Some("Filter"));
        for item_3060 in var_3059 {
            #[allow(unused_mut)]
            let mut entry_3062 = list_3061.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3062, item_3060)?;
        }
        list_3061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("NextToken");
    if let Some(var_3064) = &input.next_token {
        scope_3063.string(var_3064);
    }
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("MaxResults");
    if let Some(var_3066) = &input.max_results {
        scope_3065.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3066).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("Filter");
    if let Some(var_3068) = &input.filters {
        let mut list_3070 = scope_3067.start_list(true, Some("Filter"));
        for item_3069 in var_3068 {
            #[allow(unused_mut)]
            let mut entry_3071 = list_3070.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3071, item_3069)?;
        }
        list_3070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("DryRun");
    if let Some(var_3073) = &input.dry_run {
        scope_3072.boolean(*var_3073);
    }
    #[allow(unused_mut)]
    let mut scope_3074 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3075) = &input.network_interface_ids {
        let mut list_3077 = scope_3074.start_list(true, Some("item"));
        for item_3076 in var_3075 {
            #[allow(unused_mut)]
            let mut entry_3078 = list_3077.entry();
            entry_3078.string(item_3076);
        }
        list_3077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3079 = writer.prefix("NextToken");
    if let Some(var_3080) = &input.next_token {
        scope_3079.string(var_3080);
    }
    #[allow(unused_mut)]
    let mut scope_3081 = writer.prefix("MaxResults");
    if let Some(var_3082) = &input.max_results {
        scope_3081.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3082).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3083 = writer.prefix("Filter");
    if let Some(var_3084) = &input.filters {
        let mut list_3086 = scope_3083.start_list(true, Some("Filter"));
        for item_3085 in var_3084 {
            #[allow(unused_mut)]
            let mut entry_3087 = list_3086.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3087, item_3085)?;
        }
        list_3086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3088 = writer.prefix("DryRun");
    if let Some(var_3089) = &input.dry_run {
        scope_3088.boolean(*var_3089);
    }
    #[allow(unused_mut)]
    let mut scope_3090 = writer.prefix("GroupName");
    if let Some(var_3091) = &input.group_names {
        let mut list_3093 = scope_3090.start_list(true, None);
        for item_3092 in var_3091 {
            #[allow(unused_mut)]
            let mut entry_3094 = list_3093.entry();
            entry_3094.string(item_3092);
        }
        list_3093.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("GroupId");
    if let Some(var_3096) = &input.group_ids {
        let mut list_3098 = scope_3095.start_list(true, Some("GroupId"));
        for item_3097 in var_3096 {
            #[allow(unused_mut)]
            let mut entry_3099 = list_3098.entry();
            entry_3099.string(item_3097);
        }
        list_3098.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("DryRun");
    if let Some(var_3101) = &input.dry_run {
        scope_3100.boolean(*var_3101);
    }
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("Filter");
    if let Some(var_3103) = &input.filters {
        let mut list_3105 = scope_3102.start_list(true, Some("Filter"));
        for item_3104 in var_3103 {
            #[allow(unused_mut)]
            let mut entry_3106 = list_3105.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3106, item_3104)?;
        }
        list_3105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("MaxResults");
    if let Some(var_3108) = &input.max_results {
        scope_3107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("NextToken");
    if let Some(var_3110) = &input.next_token {
        scope_3109.string(var_3110);
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("PrefixListId");
    if let Some(var_3112) = &input.prefix_list_ids {
        let mut list_3114 = scope_3111.start_list(true, Some("item"));
        for item_3113 in var_3112 {
            #[allow(unused_mut)]
            let mut entry_3115 = list_3114.entry();
            entry_3115.string(item_3113);
        }
        list_3114.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3116 = writer.prefix("DryRun");
    if let Some(var_3117) = &input.dry_run {
        scope_3116.boolean(*var_3117);
    }
    #[allow(unused_mut)]
    let mut scope_3118 = writer.prefix("Resource");
    if let Some(var_3119) = &input.resources {
        let mut list_3121 = scope_3118.start_list(true, Some("item"));
        for item_3120 in var_3119 {
            #[allow(unused_mut)]
            let mut entry_3122 = list_3121.entry();
            entry_3122.string(item_3120);
        }
        list_3121.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("MaxResults");
    if let Some(var_3124) = &input.max_results {
        scope_3123.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3125 = writer.prefix("NextToken");
    if let Some(var_3126) = &input.next_token {
        scope_3125.string(var_3126);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3127 = writer.prefix("PoolId");
    if let Some(var_3128) = &input.pool_ids {
        let mut list_3130 = scope_3127.start_list(true, Some("item"));
        for item_3129 in var_3128 {
            #[allow(unused_mut)]
            let mut entry_3131 = list_3130.entry();
            entry_3131.string(item_3129);
        }
        list_3130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3132 = writer.prefix("NextToken");
    if let Some(var_3133) = &input.next_token {
        scope_3132.string(var_3133);
    }
    #[allow(unused_mut)]
    let mut scope_3134 = writer.prefix("MaxResults");
    if let Some(var_3135) = &input.max_results {
        scope_3134.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3135).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3136 = writer.prefix("Filter");
    if let Some(var_3137) = &input.filters {
        let mut list_3139 = scope_3136.start_list(true, Some("Filter"));
        for item_3138 in var_3137 {
            #[allow(unused_mut)]
            let mut entry_3140 = list_3139.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3140, item_3138)?;
        }
        list_3139.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3141 = writer.prefix("Filter");
    if let Some(var_3142) = &input.filters {
        let mut list_3144 = scope_3141.start_list(true, Some("Filter"));
        for item_3143 in var_3142 {
            #[allow(unused_mut)]
            let mut entry_3145 = list_3144.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3145, item_3143)?;
        }
        list_3144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("RegionName");
    if let Some(var_3147) = &input.region_names {
        let mut list_3149 = scope_3146.start_list(true, Some("RegionName"));
        for item_3148 in var_3147 {
            #[allow(unused_mut)]
            let mut entry_3150 = list_3149.entry();
            entry_3150.string(item_3148);
        }
        list_3149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("DryRun");
    if let Some(var_3152) = &input.dry_run {
        scope_3151.boolean(*var_3152);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("AllRegions");
    if let Some(var_3154) = &input.all_regions {
        scope_3153.boolean(*var_3154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3156) = &input.replace_root_volume_task_ids {
        let mut list_3158 = scope_3155.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3157 in var_3156 {
            #[allow(unused_mut)]
            let mut entry_3159 = list_3158.entry();
            entry_3159.string(item_3157);
        }
        list_3158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("Filter");
    if let Some(var_3161) = &input.filters {
        let mut list_3163 = scope_3160.start_list(true, Some("Filter"));
        for item_3162 in var_3161 {
            #[allow(unused_mut)]
            let mut entry_3164 = list_3163.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3164, item_3162)?;
        }
        list_3163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3165 = writer.prefix("MaxResults");
    if let Some(var_3166) = &input.max_results {
        scope_3165.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3166).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("NextToken");
    if let Some(var_3168) = &input.next_token {
        scope_3167.string(var_3168);
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("DryRun");
    if let Some(var_3170) = &input.dry_run {
        scope_3169.boolean(*var_3170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("Filter");
    if let Some(var_3172) = &input.filters {
        let mut list_3174 = scope_3171.start_list(true, Some("Filter"));
        for item_3173 in var_3172 {
            #[allow(unused_mut)]
            let mut entry_3175 = list_3174.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3175, item_3173)?;
        }
        list_3174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("OfferingClass");
    if let Some(var_3177) = &input.offering_class {
        scope_3176.string(var_3177.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3178 = writer.prefix("ReservedInstancesId");
    if let Some(var_3179) = &input.reserved_instances_ids {
        let mut list_3181 = scope_3178.start_list(true, Some("ReservedInstancesId"));
        for item_3180 in var_3179 {
            #[allow(unused_mut)]
            let mut entry_3182 = list_3181.entry();
            entry_3182.string(item_3180);
        }
        list_3181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3183 = writer.prefix("DryRun");
    if let Some(var_3184) = &input.dry_run {
        scope_3183.boolean(*var_3184);
    }
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("OfferingType");
    if let Some(var_3186) = &input.offering_type {
        scope_3185.string(var_3186.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3187 = writer.prefix("Filter");
    if let Some(var_3188) = &input.filters {
        let mut list_3190 = scope_3187.start_list(true, Some("Filter"));
        for item_3189 in var_3188 {
            #[allow(unused_mut)]
            let mut entry_3191 = list_3190.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3191, item_3189)?;
        }
        list_3190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3192 = writer.prefix("ReservedInstancesId");
    if let Some(var_3193) = &input.reserved_instances_id {
        scope_3192.string(var_3193);
    }
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3195) = &input.reserved_instances_listing_id {
        scope_3194.string(var_3195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3196 = writer.prefix("Filter");
    if let Some(var_3197) = &input.filters {
        let mut list_3199 = scope_3196.start_list(true, Some("Filter"));
        for item_3198 in var_3197 {
            #[allow(unused_mut)]
            let mut entry_3200 = list_3199.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3200, item_3198)?;
        }
        list_3199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3201 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3202) = &input.reserved_instances_modification_ids {
        let mut list_3204 = scope_3201.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3203 in var_3202 {
            #[allow(unused_mut)]
            let mut entry_3205 = list_3204.entry();
            entry_3205.string(item_3203);
        }
        list_3204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("NextToken");
    if let Some(var_3207) = &input.next_token {
        scope_3206.string(var_3207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("AvailabilityZone");
    if let Some(var_3209) = &input.availability_zone {
        scope_3208.string(var_3209);
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("Filter");
    if let Some(var_3211) = &input.filters {
        let mut list_3213 = scope_3210.start_list(true, Some("Filter"));
        for item_3212 in var_3211 {
            #[allow(unused_mut)]
            let mut entry_3214 = list_3213.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3214, item_3212)?;
        }
        list_3213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("IncludeMarketplace");
    if let Some(var_3216) = &input.include_marketplace {
        scope_3215.boolean(*var_3216);
    }
    #[allow(unused_mut)]
    let mut scope_3217 = writer.prefix("InstanceType");
    if let Some(var_3218) = &input.instance_type {
        scope_3217.string(var_3218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3219 = writer.prefix("MaxDuration");
    if let Some(var_3220) = &input.max_duration {
        scope_3219.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3220).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3221 = writer.prefix("MaxInstanceCount");
    if let Some(var_3222) = &input.max_instance_count {
        scope_3221.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3222).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("MinDuration");
    if let Some(var_3224) = &input.min_duration {
        scope_3223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("OfferingClass");
    if let Some(var_3226) = &input.offering_class {
        scope_3225.string(var_3226.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("ProductDescription");
    if let Some(var_3228) = &input.product_description {
        scope_3227.string(var_3228.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3230) = &input.reserved_instances_offering_ids {
        let mut list_3232 = scope_3229.start_list(true, None);
        for item_3231 in var_3230 {
            #[allow(unused_mut)]
            let mut entry_3233 = list_3232.entry();
            entry_3233.string(item_3231);
        }
        list_3232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("DryRun");
    if let Some(var_3235) = &input.dry_run {
        scope_3234.boolean(*var_3235);
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("InstanceTenancy");
    if let Some(var_3237) = &input.instance_tenancy {
        scope_3236.string(var_3237.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("MaxResults");
    if let Some(var_3239) = &input.max_results {
        scope_3238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("NextToken");
    if let Some(var_3241) = &input.next_token {
        scope_3240.string(var_3241);
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("OfferingType");
    if let Some(var_3243) = &input.offering_type {
        scope_3242.string(var_3243.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("Filter");
    if let Some(var_3245) = &input.filters {
        let mut list_3247 = scope_3244.start_list(true, Some("Filter"));
        for item_3246 in var_3245 {
            #[allow(unused_mut)]
            let mut entry_3248 = list_3247.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3248, item_3246)?;
        }
        list_3247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("DryRun");
    if let Some(var_3250) = &input.dry_run {
        scope_3249.boolean(*var_3250);
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("RouteTableId");
    if let Some(var_3252) = &input.route_table_ids {
        let mut list_3254 = scope_3251.start_list(true, Some("item"));
        for item_3253 in var_3252 {
            #[allow(unused_mut)]
            let mut entry_3255 = list_3254.entry();
            entry_3255.string(item_3253);
        }
        list_3254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3256 = writer.prefix("NextToken");
    if let Some(var_3257) = &input.next_token {
        scope_3256.string(var_3257);
    }
    #[allow(unused_mut)]
    let mut scope_3258 = writer.prefix("MaxResults");
    if let Some(var_3259) = &input.max_results {
        scope_3258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3259).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3260 = writer.prefix("DryRun");
    if let Some(var_3261) = &input.dry_run {
        scope_3260.boolean(*var_3261);
    }
    #[allow(unused_mut)]
    let mut scope_3262 = writer.prefix("Filter");
    if let Some(var_3263) = &input.filters {
        let mut list_3265 = scope_3262.start_list(true, Some("Filter"));
        for item_3264 in var_3263 {
            #[allow(unused_mut)]
            let mut entry_3266 = list_3265.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3266, item_3264)?;
        }
        list_3265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3267 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3268) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3267, var_3268,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3269 = writer.prefix("MaxResults");
    if let Some(var_3270) = &input.max_results {
        scope_3269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3272) = &input.max_slot_duration_in_hours {
        scope_3271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3274) = &input.min_slot_duration_in_hours {
        scope_3273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("NextToken");
    if let Some(var_3276) = &input.next_token {
        scope_3275.string(var_3276);
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("Recurrence");
    if let Some(var_3278) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3277, var_3278,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("DryRun");
    if let Some(var_3280) = &input.dry_run {
        scope_3279.boolean(*var_3280);
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("Filter");
    if let Some(var_3282) = &input.filters {
        let mut list_3284 = scope_3281.start_list(true, Some("Filter"));
        for item_3283 in var_3282 {
            #[allow(unused_mut)]
            let mut entry_3285 = list_3284.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3285, item_3283)?;
        }
        list_3284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("MaxResults");
    if let Some(var_3287) = &input.max_results {
        scope_3286.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3287).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("NextToken");
    if let Some(var_3289) = &input.next_token {
        scope_3288.string(var_3289);
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3291) = &input.scheduled_instance_ids {
        let mut list_3293 = scope_3290.start_list(true, Some("ScheduledInstanceId"));
        for item_3292 in var_3291 {
            #[allow(unused_mut)]
            let mut entry_3294 = list_3293.entry();
            entry_3294.string(item_3292);
        }
        list_3293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3296) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3295, var_3296,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("DryRun");
    if let Some(var_3298) = &input.dry_run {
        scope_3297.boolean(*var_3298);
    }
    #[allow(unused_mut)]
    let mut scope_3299 = writer.prefix("GroupId");
    if let Some(var_3300) = &input.group_id {
        let mut list_3302 = scope_3299.start_list(true, Some("item"));
        for item_3301 in var_3300 {
            #[allow(unused_mut)]
            let mut entry_3303 = list_3302.entry();
            entry_3303.string(item_3301);
        }
        list_3302.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3304 = writer.prefix("Filter");
    if let Some(var_3305) = &input.filters {
        let mut list_3307 = scope_3304.start_list(true, Some("Filter"));
        for item_3306 in var_3305 {
            #[allow(unused_mut)]
            let mut entry_3308 = list_3307.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3308, item_3306)?;
        }
        list_3307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3310) = &input.security_group_rule_ids {
        let mut list_3312 = scope_3309.start_list(true, Some("item"));
        for item_3311 in var_3310 {
            #[allow(unused_mut)]
            let mut entry_3313 = list_3312.entry();
            entry_3313.string(item_3311);
        }
        list_3312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("DryRun");
    if let Some(var_3315) = &input.dry_run {
        scope_3314.boolean(*var_3315);
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("NextToken");
    if let Some(var_3317) = &input.next_token {
        scope_3316.string(var_3317);
    }
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("MaxResults");
    if let Some(var_3319) = &input.max_results {
        scope_3318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3319).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3320 = writer.prefix("Filter");
    if let Some(var_3321) = &input.filters {
        let mut list_3323 = scope_3320.start_list(true, Some("Filter"));
        for item_3322 in var_3321 {
            #[allow(unused_mut)]
            let mut entry_3324 = list_3323.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3324, item_3322)?;
        }
        list_3323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3325 = writer.prefix("GroupId");
    if let Some(var_3326) = &input.group_ids {
        let mut list_3328 = scope_3325.start_list(true, Some("groupId"));
        for item_3327 in var_3326 {
            #[allow(unused_mut)]
            let mut entry_3329 = list_3328.entry();
            entry_3329.string(item_3327);
        }
        list_3328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("GroupName");
    if let Some(var_3331) = &input.group_names {
        let mut list_3333 = scope_3330.start_list(true, Some("GroupName"));
        for item_3332 in var_3331 {
            #[allow(unused_mut)]
            let mut entry_3334 = list_3333.entry();
            entry_3334.string(item_3332);
        }
        list_3333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("DryRun");
    if let Some(var_3336) = &input.dry_run {
        scope_3335.boolean(*var_3336);
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("NextToken");
    if let Some(var_3338) = &input.next_token {
        scope_3337.string(var_3338);
    }
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("MaxResults");
    if let Some(var_3340) = &input.max_results {
        scope_3339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3340).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("Attribute");
    if let Some(var_3342) = &input.attribute {
        scope_3341.string(var_3342.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3343 = writer.prefix("SnapshotId");
    if let Some(var_3344) = &input.snapshot_id {
        scope_3343.string(var_3344);
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("DryRun");
    if let Some(var_3346) = &input.dry_run {
        scope_3345.boolean(*var_3346);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("Filter");
    if let Some(var_3348) = &input.filters {
        let mut list_3350 = scope_3347.start_list(true, Some("Filter"));
        for item_3349 in var_3348 {
            #[allow(unused_mut)]
            let mut entry_3351 = list_3350.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3351, item_3349)?;
        }
        list_3350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("MaxResults");
    if let Some(var_3353) = &input.max_results {
        scope_3352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("NextToken");
    if let Some(var_3355) = &input.next_token {
        scope_3354.string(var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("Owner");
    if let Some(var_3357) = &input.owner_ids {
        let mut list_3359 = scope_3356.start_list(true, Some("Owner"));
        for item_3358 in var_3357 {
            #[allow(unused_mut)]
            let mut entry_3360 = list_3359.entry();
            entry_3360.string(item_3358);
        }
        list_3359.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3361 = writer.prefix("RestorableBy");
    if let Some(var_3362) = &input.restorable_by_user_ids {
        let mut list_3364 = scope_3361.start_list(true, None);
        for item_3363 in var_3362 {
            #[allow(unused_mut)]
            let mut entry_3365 = list_3364.entry();
            entry_3365.string(item_3363);
        }
        list_3364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("SnapshotId");
    if let Some(var_3367) = &input.snapshot_ids {
        let mut list_3369 = scope_3366.start_list(true, Some("SnapshotId"));
        for item_3368 in var_3367 {
            #[allow(unused_mut)]
            let mut entry_3370 = list_3369.entry();
            entry_3370.string(item_3368);
        }
        list_3369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("DryRun");
    if let Some(var_3372) = &input.dry_run {
        scope_3371.boolean(*var_3372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("Filter");
    if let Some(var_3374) = &input.filters {
        let mut list_3376 = scope_3373.start_list(true, Some("Filter"));
        for item_3375 in var_3374 {
            #[allow(unused_mut)]
            let mut entry_3377 = list_3376.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3377, item_3375)?;
        }
        list_3376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("DryRun");
    if let Some(var_3379) = &input.dry_run {
        scope_3378.boolean(*var_3379);
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("NextToken");
    if let Some(var_3381) = &input.next_token {
        scope_3380.string(var_3381);
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("MaxResults");
    if let Some(var_3383) = &input.max_results {
        scope_3382.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3383).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3384 = writer.prefix("DryRun");
    if let Some(var_3385) = &input.dry_run {
        scope_3384.boolean(*var_3385);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3386 = writer.prefix("DryRun");
    if let Some(var_3387) = &input.dry_run {
        scope_3386.boolean(*var_3387);
    }
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("MaxResults");
    if let Some(var_3389) = &input.max_results {
        scope_3388.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3389).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("NextToken");
    if let Some(var_3391) = &input.next_token {
        scope_3390.string(var_3391);
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3393) = &input.spot_fleet_request_id {
        scope_3392.string(var_3393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("DryRun");
    if let Some(var_3395) = &input.dry_run {
        scope_3394.boolean(*var_3395);
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("EventType");
    if let Some(var_3397) = &input.event_type {
        scope_3396.string(var_3397.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("MaxResults");
    if let Some(var_3399) = &input.max_results {
        scope_3398.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3399).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("NextToken");
    if let Some(var_3401) = &input.next_token {
        scope_3400.string(var_3401);
    }
    #[allow(unused_mut)]
    let mut scope_3402 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3403) = &input.spot_fleet_request_id {
        scope_3402.string(var_3403);
    }
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("StartTime");
    if let Some(var_3405) = &input.start_time {
        scope_3404.date_time(var_3405, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("DryRun");
    if let Some(var_3407) = &input.dry_run {
        scope_3406.boolean(*var_3407);
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("MaxResults");
    if let Some(var_3409) = &input.max_results {
        scope_3408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("NextToken");
    if let Some(var_3411) = &input.next_token {
        scope_3410.string(var_3411);
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3413) = &input.spot_fleet_request_ids {
        let mut list_3415 = scope_3412.start_list(true, Some("item"));
        for item_3414 in var_3413 {
            #[allow(unused_mut)]
            let mut entry_3416 = list_3415.entry();
            entry_3416.string(item_3414);
        }
        list_3415.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("Filter");
    if let Some(var_3418) = &input.filters {
        let mut list_3420 = scope_3417.start_list(true, Some("Filter"));
        for item_3419 in var_3418 {
            #[allow(unused_mut)]
            let mut entry_3421 = list_3420.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3421, item_3419)?;
        }
        list_3420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3422 = writer.prefix("DryRun");
    if let Some(var_3423) = &input.dry_run {
        scope_3422.boolean(*var_3423);
    }
    #[allow(unused_mut)]
    let mut scope_3424 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3425) = &input.spot_instance_request_ids {
        let mut list_3427 = scope_3424.start_list(true, Some("SpotInstanceRequestId"));
        for item_3426 in var_3425 {
            #[allow(unused_mut)]
            let mut entry_3428 = list_3427.entry();
            entry_3428.string(item_3426);
        }
        list_3427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("NextToken");
    if let Some(var_3430) = &input.next_token {
        scope_3429.string(var_3430);
    }
    #[allow(unused_mut)]
    let mut scope_3431 = writer.prefix("MaxResults");
    if let Some(var_3432) = &input.max_results {
        scope_3431.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3432).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3433 = writer.prefix("Filter");
    if let Some(var_3434) = &input.filters {
        let mut list_3436 = scope_3433.start_list(true, Some("Filter"));
        for item_3435 in var_3434 {
            #[allow(unused_mut)]
            let mut entry_3437 = list_3436.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3437, item_3435)?;
        }
        list_3436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("AvailabilityZone");
    if let Some(var_3439) = &input.availability_zone {
        scope_3438.string(var_3439);
    }
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("DryRun");
    if let Some(var_3441) = &input.dry_run {
        scope_3440.boolean(*var_3441);
    }
    #[allow(unused_mut)]
    let mut scope_3442 = writer.prefix("EndTime");
    if let Some(var_3443) = &input.end_time {
        scope_3442.date_time(var_3443, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("InstanceType");
    if let Some(var_3445) = &input.instance_types {
        let mut list_3447 = scope_3444.start_list(true, None);
        for item_3446 in var_3445 {
            #[allow(unused_mut)]
            let mut entry_3448 = list_3447.entry();
            entry_3448.string(item_3446.as_str());
        }
        list_3447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3449 = writer.prefix("MaxResults");
    if let Some(var_3450) = &input.max_results {
        scope_3449.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3450).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("NextToken");
    if let Some(var_3452) = &input.next_token {
        scope_3451.string(var_3452);
    }
    #[allow(unused_mut)]
    let mut scope_3453 = writer.prefix("ProductDescription");
    if let Some(var_3454) = &input.product_descriptions {
        let mut list_3456 = scope_3453.start_list(true, None);
        for item_3455 in var_3454 {
            #[allow(unused_mut)]
            let mut entry_3457 = list_3456.entry();
            entry_3457.string(item_3455);
        }
        list_3456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3458 = writer.prefix("StartTime");
    if let Some(var_3459) = &input.start_time {
        scope_3458.date_time(var_3459, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3460 = writer.prefix("DryRun");
    if let Some(var_3461) = &input.dry_run {
        scope_3460.boolean(*var_3461);
    }
    #[allow(unused_mut)]
    let mut scope_3462 = writer.prefix("MaxResults");
    if let Some(var_3463) = &input.max_results {
        scope_3462.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3463).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("NextToken");
    if let Some(var_3465) = &input.next_token {
        scope_3464.string(var_3465);
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("VpcId");
    if let Some(var_3467) = &input.vpc_id {
        scope_3466.string(var_3467);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("ImageId");
    if let Some(var_3469) = &input.image_ids {
        let mut list_3471 = scope_3468.start_list(true, Some("item"));
        for item_3470 in var_3469 {
            #[allow(unused_mut)]
            let mut entry_3472 = list_3471.entry();
            entry_3472.string(item_3470);
        }
        list_3471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3473 = writer.prefix("DryRun");
    if let Some(var_3474) = &input.dry_run {
        scope_3473.boolean(*var_3474);
    }
    #[allow(unused_mut)]
    let mut scope_3475 = writer.prefix("Filter");
    if let Some(var_3476) = &input.filters {
        let mut list_3478 = scope_3475.start_list(true, Some("Filter"));
        for item_3477 in var_3476 {
            #[allow(unused_mut)]
            let mut entry_3479 = list_3478.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3479, item_3477)?;
        }
        list_3478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3480 = writer.prefix("NextToken");
    if let Some(var_3481) = &input.next_token {
        scope_3480.string(var_3481);
    }
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("MaxResults");
    if let Some(var_3483) = &input.max_results {
        scope_3482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3483).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("Filter");
    if let Some(var_3485) = &input.filters {
        let mut list_3487 = scope_3484.start_list(true, Some("Filter"));
        for item_3486 in var_3485 {
            #[allow(unused_mut)]
            let mut entry_3488 = list_3487.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3488, item_3486)?;
        }
        list_3487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3489 = writer.prefix("SubnetId");
    if let Some(var_3490) = &input.subnet_ids {
        let mut list_3492 = scope_3489.start_list(true, Some("SubnetId"));
        for item_3491 in var_3490 {
            #[allow(unused_mut)]
            let mut entry_3493 = list_3492.entry();
            entry_3493.string(item_3491);
        }
        list_3492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("DryRun");
    if let Some(var_3495) = &input.dry_run {
        scope_3494.boolean(*var_3495);
    }
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("NextToken");
    if let Some(var_3497) = &input.next_token {
        scope_3496.string(var_3497);
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("MaxResults");
    if let Some(var_3499) = &input.max_results {
        scope_3498.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3499).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("DryRun");
    if let Some(var_3501) = &input.dry_run {
        scope_3500.boolean(*var_3501);
    }
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("Filter");
    if let Some(var_3503) = &input.filters {
        let mut list_3505 = scope_3502.start_list(true, Some("Filter"));
        for item_3504 in var_3503 {
            #[allow(unused_mut)]
            let mut entry_3506 = list_3505.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3506, item_3504)?;
        }
        list_3505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3507 = writer.prefix("MaxResults");
    if let Some(var_3508) = &input.max_results {
        scope_3507.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3508).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3509 = writer.prefix("NextToken");
    if let Some(var_3510) = &input.next_token {
        scope_3509.string(var_3510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3511 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3512) = &input.traffic_mirror_filter_ids {
        let mut list_3514 = scope_3511.start_list(true, Some("item"));
        for item_3513 in var_3512 {
            #[allow(unused_mut)]
            let mut entry_3515 = list_3514.entry();
            entry_3515.string(item_3513);
        }
        list_3514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3516 = writer.prefix("DryRun");
    if let Some(var_3517) = &input.dry_run {
        scope_3516.boolean(*var_3517);
    }
    #[allow(unused_mut)]
    let mut scope_3518 = writer.prefix("Filter");
    if let Some(var_3519) = &input.filters {
        let mut list_3521 = scope_3518.start_list(true, Some("Filter"));
        for item_3520 in var_3519 {
            #[allow(unused_mut)]
            let mut entry_3522 = list_3521.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3522, item_3520)?;
        }
        list_3521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3523 = writer.prefix("MaxResults");
    if let Some(var_3524) = &input.max_results {
        scope_3523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3525 = writer.prefix("NextToken");
    if let Some(var_3526) = &input.next_token {
        scope_3525.string(var_3526);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3527 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3528) = &input.traffic_mirror_session_ids {
        let mut list_3530 = scope_3527.start_list(true, Some("item"));
        for item_3529 in var_3528 {
            #[allow(unused_mut)]
            let mut entry_3531 = list_3530.entry();
            entry_3531.string(item_3529);
        }
        list_3530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3532 = writer.prefix("DryRun");
    if let Some(var_3533) = &input.dry_run {
        scope_3532.boolean(*var_3533);
    }
    #[allow(unused_mut)]
    let mut scope_3534 = writer.prefix("Filter");
    if let Some(var_3535) = &input.filters {
        let mut list_3537 = scope_3534.start_list(true, Some("Filter"));
        for item_3536 in var_3535 {
            #[allow(unused_mut)]
            let mut entry_3538 = list_3537.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3538, item_3536)?;
        }
        list_3537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("MaxResults");
    if let Some(var_3540) = &input.max_results {
        scope_3539.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3540).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3541 = writer.prefix("NextToken");
    if let Some(var_3542) = &input.next_token {
        scope_3541.string(var_3542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3543 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3544) = &input.traffic_mirror_target_ids {
        let mut list_3546 = scope_3543.start_list(true, Some("item"));
        for item_3545 in var_3544 {
            #[allow(unused_mut)]
            let mut entry_3547 = list_3546.entry();
            entry_3547.string(item_3545);
        }
        list_3546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3548 = writer.prefix("DryRun");
    if let Some(var_3549) = &input.dry_run {
        scope_3548.boolean(*var_3549);
    }
    #[allow(unused_mut)]
    let mut scope_3550 = writer.prefix("Filter");
    if let Some(var_3551) = &input.filters {
        let mut list_3553 = scope_3550.start_list(true, Some("Filter"));
        for item_3552 in var_3551 {
            #[allow(unused_mut)]
            let mut entry_3554 = list_3553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3554, item_3552)?;
        }
        list_3553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("MaxResults");
    if let Some(var_3556) = &input.max_results {
        scope_3555.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3556).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("NextToken");
    if let Some(var_3558) = &input.next_token {
        scope_3557.string(var_3558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3560) = &input.transit_gateway_attachment_ids {
        let mut list_3562 = scope_3559.start_list(true, None);
        for item_3561 in var_3560 {
            #[allow(unused_mut)]
            let mut entry_3563 = list_3562.entry();
            entry_3563.string(item_3561);
        }
        list_3562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("Filter");
    if let Some(var_3565) = &input.filters {
        let mut list_3567 = scope_3564.start_list(true, Some("Filter"));
        for item_3566 in var_3565 {
            #[allow(unused_mut)]
            let mut entry_3568 = list_3567.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3568, item_3566)?;
        }
        list_3567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("MaxResults");
    if let Some(var_3570) = &input.max_results {
        scope_3569.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3570).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("NextToken");
    if let Some(var_3572) = &input.next_token {
        scope_3571.string(var_3572);
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("DryRun");
    if let Some(var_3574) = &input.dry_run {
        scope_3573.boolean(*var_3574);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3576) = &input.transit_gateway_connect_peer_ids {
        let mut list_3578 = scope_3575.start_list(true, Some("item"));
        for item_3577 in var_3576 {
            #[allow(unused_mut)]
            let mut entry_3579 = list_3578.entry();
            entry_3579.string(item_3577);
        }
        list_3578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("Filter");
    if let Some(var_3581) = &input.filters {
        let mut list_3583 = scope_3580.start_list(true, Some("Filter"));
        for item_3582 in var_3581 {
            #[allow(unused_mut)]
            let mut entry_3584 = list_3583.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3584, item_3582)?;
        }
        list_3583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("MaxResults");
    if let Some(var_3586) = &input.max_results {
        scope_3585.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3586).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("NextToken");
    if let Some(var_3588) = &input.next_token {
        scope_3587.string(var_3588);
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("DryRun");
    if let Some(var_3590) = &input.dry_run {
        scope_3589.boolean(*var_3590);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3592) = &input.transit_gateway_attachment_ids {
        let mut list_3594 = scope_3591.start_list(true, None);
        for item_3593 in var_3592 {
            #[allow(unused_mut)]
            let mut entry_3595 = list_3594.entry();
            entry_3595.string(item_3593);
        }
        list_3594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("Filter");
    if let Some(var_3597) = &input.filters {
        let mut list_3599 = scope_3596.start_list(true, Some("Filter"));
        for item_3598 in var_3597 {
            #[allow(unused_mut)]
            let mut entry_3600 = list_3599.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3600, item_3598)?;
        }
        list_3599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("MaxResults");
    if let Some(var_3602) = &input.max_results {
        scope_3601.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3602).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("NextToken");
    if let Some(var_3604) = &input.next_token {
        scope_3603.string(var_3604);
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("DryRun");
    if let Some(var_3606) = &input.dry_run {
        scope_3605.boolean(*var_3606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3608) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3610 = scope_3607.start_list(true, Some("item"));
        for item_3609 in var_3608 {
            #[allow(unused_mut)]
            let mut entry_3611 = list_3610.entry();
            entry_3611.string(item_3609);
        }
        list_3610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("Filter");
    if let Some(var_3613) = &input.filters {
        let mut list_3615 = scope_3612.start_list(true, Some("Filter"));
        for item_3614 in var_3613 {
            #[allow(unused_mut)]
            let mut entry_3616 = list_3615.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3616, item_3614)?;
        }
        list_3615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("MaxResults");
    if let Some(var_3618) = &input.max_results {
        scope_3617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3618).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("NextToken");
    if let Some(var_3620) = &input.next_token {
        scope_3619.string(var_3620);
    }
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("DryRun");
    if let Some(var_3622) = &input.dry_run {
        scope_3621.boolean(*var_3622);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3624) = &input.transit_gateway_attachment_ids {
        let mut list_3626 = scope_3623.start_list(true, None);
        for item_3625 in var_3624 {
            #[allow(unused_mut)]
            let mut entry_3627 = list_3626.entry();
            entry_3627.string(item_3625);
        }
        list_3626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3628 = writer.prefix("Filter");
    if let Some(var_3629) = &input.filters {
        let mut list_3631 = scope_3628.start_list(true, Some("Filter"));
        for item_3630 in var_3629 {
            #[allow(unused_mut)]
            let mut entry_3632 = list_3631.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3632, item_3630)?;
        }
        list_3631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("MaxResults");
    if let Some(var_3634) = &input.max_results {
        scope_3633.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3634).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3635 = writer.prefix("NextToken");
    if let Some(var_3636) = &input.next_token {
        scope_3635.string(var_3636);
    }
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("DryRun");
    if let Some(var_3638) = &input.dry_run {
        scope_3637.boolean(*var_3638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3640) = &input.transit_gateway_route_table_ids {
        let mut list_3642 = scope_3639.start_list(true, Some("item"));
        for item_3641 in var_3640 {
            #[allow(unused_mut)]
            let mut entry_3643 = list_3642.entry();
            entry_3643.string(item_3641);
        }
        list_3642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("Filter");
    if let Some(var_3645) = &input.filters {
        let mut list_3647 = scope_3644.start_list(true, Some("Filter"));
        for item_3646 in var_3645 {
            #[allow(unused_mut)]
            let mut entry_3648 = list_3647.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3648, item_3646)?;
        }
        list_3647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3649 = writer.prefix("MaxResults");
    if let Some(var_3650) = &input.max_results {
        scope_3649.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3651 = writer.prefix("NextToken");
    if let Some(var_3652) = &input.next_token {
        scope_3651.string(var_3652);
    }
    #[allow(unused_mut)]
    let mut scope_3653 = writer.prefix("DryRun");
    if let Some(var_3654) = &input.dry_run {
        scope_3653.boolean(*var_3654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3655 = writer.prefix("TransitGatewayIds");
    if let Some(var_3656) = &input.transit_gateway_ids {
        let mut list_3658 = scope_3655.start_list(true, Some("item"));
        for item_3657 in var_3656 {
            #[allow(unused_mut)]
            let mut entry_3659 = list_3658.entry();
            entry_3659.string(item_3657);
        }
        list_3658.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("Filter");
    if let Some(var_3661) = &input.filters {
        let mut list_3663 = scope_3660.start_list(true, Some("Filter"));
        for item_3662 in var_3661 {
            #[allow(unused_mut)]
            let mut entry_3664 = list_3663.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3664, item_3662)?;
        }
        list_3663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3665 = writer.prefix("MaxResults");
    if let Some(var_3666) = &input.max_results {
        scope_3665.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3666).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3667 = writer.prefix("NextToken");
    if let Some(var_3668) = &input.next_token {
        scope_3667.string(var_3668);
    }
    #[allow(unused_mut)]
    let mut scope_3669 = writer.prefix("DryRun");
    if let Some(var_3670) = &input.dry_run {
        scope_3669.boolean(*var_3670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3671 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3672) = &input.transit_gateway_attachment_ids {
        let mut list_3674 = scope_3671.start_list(true, None);
        for item_3673 in var_3672 {
            #[allow(unused_mut)]
            let mut entry_3675 = list_3674.entry();
            entry_3675.string(item_3673);
        }
        list_3674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3676 = writer.prefix("Filter");
    if let Some(var_3677) = &input.filters {
        let mut list_3679 = scope_3676.start_list(true, Some("Filter"));
        for item_3678 in var_3677 {
            #[allow(unused_mut)]
            let mut entry_3680 = list_3679.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3680, item_3678)?;
        }
        list_3679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("MaxResults");
    if let Some(var_3682) = &input.max_results {
        scope_3681.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3682).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3683 = writer.prefix("NextToken");
    if let Some(var_3684) = &input.next_token {
        scope_3683.string(var_3684);
    }
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("DryRun");
    if let Some(var_3686) = &input.dry_run {
        scope_3685.boolean(*var_3686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3687 = writer.prefix("AssociationId");
    if let Some(var_3688) = &input.association_ids {
        let mut list_3690 = scope_3687.start_list(true, Some("item"));
        for item_3689 in var_3688 {
            #[allow(unused_mut)]
            let mut entry_3691 = list_3690.entry();
            entry_3691.string(item_3689);
        }
        list_3690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("DryRun");
    if let Some(var_3693) = &input.dry_run {
        scope_3692.boolean(*var_3693);
    }
    #[allow(unused_mut)]
    let mut scope_3694 = writer.prefix("Filter");
    if let Some(var_3695) = &input.filters {
        let mut list_3697 = scope_3694.start_list(true, Some("Filter"));
        for item_3696 in var_3695 {
            #[allow(unused_mut)]
            let mut entry_3698 = list_3697.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3698, item_3696)?;
        }
        list_3697.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3699 = writer.prefix("NextToken");
    if let Some(var_3700) = &input.next_token {
        scope_3699.string(var_3700);
    }
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("MaxResults");
    if let Some(var_3702) = &input.max_results {
        scope_3701.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3702).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("Attribute");
    if let Some(var_3704) = &input.attribute {
        scope_3703.string(var_3704.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3705 = writer.prefix("VolumeId");
    if let Some(var_3706) = &input.volume_id {
        scope_3705.string(var_3706);
    }
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("DryRun");
    if let Some(var_3708) = &input.dry_run {
        scope_3707.boolean(*var_3708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("Filter");
    if let Some(var_3710) = &input.filters {
        let mut list_3712 = scope_3709.start_list(true, Some("Filter"));
        for item_3711 in var_3710 {
            #[allow(unused_mut)]
            let mut entry_3713 = list_3712.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3713, item_3711)?;
        }
        list_3712.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("VolumeId");
    if let Some(var_3715) = &input.volume_ids {
        let mut list_3717 = scope_3714.start_list(true, Some("VolumeId"));
        for item_3716 in var_3715 {
            #[allow(unused_mut)]
            let mut entry_3718 = list_3717.entry();
            entry_3718.string(item_3716);
        }
        list_3717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3719 = writer.prefix("DryRun");
    if let Some(var_3720) = &input.dry_run {
        scope_3719.boolean(*var_3720);
    }
    #[allow(unused_mut)]
    let mut scope_3721 = writer.prefix("MaxResults");
    if let Some(var_3722) = &input.max_results {
        scope_3721.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3722).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("NextToken");
    if let Some(var_3724) = &input.next_token {
        scope_3723.string(var_3724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3725 = writer.prefix("DryRun");
    if let Some(var_3726) = &input.dry_run {
        scope_3725.boolean(*var_3726);
    }
    #[allow(unused_mut)]
    let mut scope_3727 = writer.prefix("VolumeId");
    if let Some(var_3728) = &input.volume_ids {
        let mut list_3730 = scope_3727.start_list(true, Some("VolumeId"));
        for item_3729 in var_3728 {
            #[allow(unused_mut)]
            let mut entry_3731 = list_3730.entry();
            entry_3731.string(item_3729);
        }
        list_3730.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("Filter");
    if let Some(var_3733) = &input.filters {
        let mut list_3735 = scope_3732.start_list(true, Some("Filter"));
        for item_3734 in var_3733 {
            #[allow(unused_mut)]
            let mut entry_3736 = list_3735.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3736, item_3734)?;
        }
        list_3735.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3737 = writer.prefix("NextToken");
    if let Some(var_3738) = &input.next_token {
        scope_3737.string(var_3738);
    }
    #[allow(unused_mut)]
    let mut scope_3739 = writer.prefix("MaxResults");
    if let Some(var_3740) = &input.max_results {
        scope_3739.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3740).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3741 = writer.prefix("Filter");
    if let Some(var_3742) = &input.filters {
        let mut list_3744 = scope_3741.start_list(true, Some("Filter"));
        for item_3743 in var_3742 {
            #[allow(unused_mut)]
            let mut entry_3745 = list_3744.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3745, item_3743)?;
        }
        list_3744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("MaxResults");
    if let Some(var_3747) = &input.max_results {
        scope_3746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("NextToken");
    if let Some(var_3749) = &input.next_token {
        scope_3748.string(var_3749);
    }
    #[allow(unused_mut)]
    let mut scope_3750 = writer.prefix("VolumeId");
    if let Some(var_3751) = &input.volume_ids {
        let mut list_3753 = scope_3750.start_list(true, Some("VolumeId"));
        for item_3752 in var_3751 {
            #[allow(unused_mut)]
            let mut entry_3754 = list_3753.entry();
            entry_3754.string(item_3752);
        }
        list_3753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("DryRun");
    if let Some(var_3756) = &input.dry_run {
        scope_3755.boolean(*var_3756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3757 = writer.prefix("Attribute");
    if let Some(var_3758) = &input.attribute {
        scope_3757.string(var_3758.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("VpcId");
    if let Some(var_3760) = &input.vpc_id {
        scope_3759.string(var_3760);
    }
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("DryRun");
    if let Some(var_3762) = &input.dry_run {
        scope_3761.boolean(*var_3762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("Filter");
    if let Some(var_3764) = &input.filters {
        let mut list_3766 = scope_3763.start_list(true, Some("Filter"));
        for item_3765 in var_3764 {
            #[allow(unused_mut)]
            let mut entry_3767 = list_3766.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3767, item_3765)?;
        }
        list_3766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3768 = writer.prefix("DryRun");
    if let Some(var_3769) = &input.dry_run {
        scope_3768.boolean(*var_3769);
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("VpcId");
    if let Some(var_3771) = &input.vpc_ids {
        let mut list_3773 = scope_3770.start_list(true, Some("VpcId"));
        for item_3772 in var_3771 {
            #[allow(unused_mut)]
            let mut entry_3774 = list_3773.entry();
            entry_3774.string(item_3772);
        }
        list_3773.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3775 = writer.prefix("MaxResults");
    if let Some(var_3776) = &input.max_results {
        scope_3775.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3776).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3777 = writer.prefix("NextToken");
    if let Some(var_3778) = &input.next_token {
        scope_3777.string(var_3778);
    }
    #[allow(unused_mut)]
    let mut scope_3779 = writer.prefix("VpcIds");
    if let Some(var_3780) = &input.vpc_ids {
        let mut list_3782 = scope_3779.start_list(true, Some("VpcId"));
        for item_3781 in var_3780 {
            #[allow(unused_mut)]
            let mut entry_3783 = list_3782.entry();
            entry_3783.string(item_3781);
        }
        list_3782.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3784 = writer.prefix("DryRun");
    if let Some(var_3785) = &input.dry_run {
        scope_3784.boolean(*var_3785);
    }
    #[allow(unused_mut)]
    let mut scope_3786 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3787) = &input.connection_notification_id {
        scope_3786.string(var_3787);
    }
    #[allow(unused_mut)]
    let mut scope_3788 = writer.prefix("Filter");
    if let Some(var_3789) = &input.filters {
        let mut list_3791 = scope_3788.start_list(true, Some("Filter"));
        for item_3790 in var_3789 {
            #[allow(unused_mut)]
            let mut entry_3792 = list_3791.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3792, item_3790)?;
        }
        list_3791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("MaxResults");
    if let Some(var_3794) = &input.max_results {
        scope_3793.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3794).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3795 = writer.prefix("NextToken");
    if let Some(var_3796) = &input.next_token {
        scope_3795.string(var_3796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("DryRun");
    if let Some(var_3798) = &input.dry_run {
        scope_3797.boolean(*var_3798);
    }
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("Filter");
    if let Some(var_3800) = &input.filters {
        let mut list_3802 = scope_3799.start_list(true, Some("Filter"));
        for item_3801 in var_3800 {
            #[allow(unused_mut)]
            let mut entry_3803 = list_3802.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3803, item_3801)?;
        }
        list_3802.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3804 = writer.prefix("MaxResults");
    if let Some(var_3805) = &input.max_results {
        scope_3804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3805).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3806 = writer.prefix("NextToken");
    if let Some(var_3807) = &input.next_token {
        scope_3806.string(var_3807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("DryRun");
    if let Some(var_3809) = &input.dry_run {
        scope_3808.boolean(*var_3809);
    }
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("VpcEndpointId");
    if let Some(var_3811) = &input.vpc_endpoint_ids {
        let mut list_3813 = scope_3810.start_list(true, Some("item"));
        for item_3812 in var_3811 {
            #[allow(unused_mut)]
            let mut entry_3814 = list_3813.entry();
            entry_3814.string(item_3812);
        }
        list_3813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3815 = writer.prefix("Filter");
    if let Some(var_3816) = &input.filters {
        let mut list_3818 = scope_3815.start_list(true, Some("Filter"));
        for item_3817 in var_3816 {
            #[allow(unused_mut)]
            let mut entry_3819 = list_3818.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3819, item_3817)?;
        }
        list_3818.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3820 = writer.prefix("MaxResults");
    if let Some(var_3821) = &input.max_results {
        scope_3820.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3821).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3822 = writer.prefix("NextToken");
    if let Some(var_3823) = &input.next_token {
        scope_3822.string(var_3823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3824 = writer.prefix("DryRun");
    if let Some(var_3825) = &input.dry_run {
        scope_3824.boolean(*var_3825);
    }
    #[allow(unused_mut)]
    let mut scope_3826 = writer.prefix("ServiceId");
    if let Some(var_3827) = &input.service_ids {
        let mut list_3829 = scope_3826.start_list(true, Some("item"));
        for item_3828 in var_3827 {
            #[allow(unused_mut)]
            let mut entry_3830 = list_3829.entry();
            entry_3830.string(item_3828);
        }
        list_3829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("Filter");
    if let Some(var_3832) = &input.filters {
        let mut list_3834 = scope_3831.start_list(true, Some("Filter"));
        for item_3833 in var_3832 {
            #[allow(unused_mut)]
            let mut entry_3835 = list_3834.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3835, item_3833)?;
        }
        list_3834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("MaxResults");
    if let Some(var_3837) = &input.max_results {
        scope_3836.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3837).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3838 = writer.prefix("NextToken");
    if let Some(var_3839) = &input.next_token {
        scope_3838.string(var_3839);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3840 = writer.prefix("DryRun");
    if let Some(var_3841) = &input.dry_run {
        scope_3840.boolean(*var_3841);
    }
    #[allow(unused_mut)]
    let mut scope_3842 = writer.prefix("ServiceId");
    if let Some(var_3843) = &input.service_id {
        scope_3842.string(var_3843);
    }
    #[allow(unused_mut)]
    let mut scope_3844 = writer.prefix("Filter");
    if let Some(var_3845) = &input.filters {
        let mut list_3847 = scope_3844.start_list(true, Some("Filter"));
        for item_3846 in var_3845 {
            #[allow(unused_mut)]
            let mut entry_3848 = list_3847.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3848, item_3846)?;
        }
        list_3847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("MaxResults");
    if let Some(var_3850) = &input.max_results {
        scope_3849.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3850).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("NextToken");
    if let Some(var_3852) = &input.next_token {
        scope_3851.string(var_3852);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("DryRun");
    if let Some(var_3854) = &input.dry_run {
        scope_3853.boolean(*var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("ServiceName");
    if let Some(var_3856) = &input.service_names {
        let mut list_3858 = scope_3855.start_list(true, Some("item"));
        for item_3857 in var_3856 {
            #[allow(unused_mut)]
            let mut entry_3859 = list_3858.entry();
            entry_3859.string(item_3857);
        }
        list_3858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3860 = writer.prefix("Filter");
    if let Some(var_3861) = &input.filters {
        let mut list_3863 = scope_3860.start_list(true, Some("Filter"));
        for item_3862 in var_3861 {
            #[allow(unused_mut)]
            let mut entry_3864 = list_3863.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3864, item_3862)?;
        }
        list_3863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("MaxResults");
    if let Some(var_3866) = &input.max_results {
        scope_3865.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3866).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("NextToken");
    if let Some(var_3868) = &input.next_token {
        scope_3867.string(var_3868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("Filter");
    if let Some(var_3870) = &input.filters {
        let mut list_3872 = scope_3869.start_list(true, Some("Filter"));
        for item_3871 in var_3870 {
            #[allow(unused_mut)]
            let mut entry_3873 = list_3872.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3873, item_3871)?;
        }
        list_3872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("DryRun");
    if let Some(var_3875) = &input.dry_run {
        scope_3874.boolean(*var_3875);
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3877) = &input.vpc_peering_connection_ids {
        let mut list_3879 = scope_3876.start_list(true, Some("item"));
        for item_3878 in var_3877 {
            #[allow(unused_mut)]
            let mut entry_3880 = list_3879.entry();
            entry_3880.string(item_3878);
        }
        list_3879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3881 = writer.prefix("NextToken");
    if let Some(var_3882) = &input.next_token {
        scope_3881.string(var_3882);
    }
    #[allow(unused_mut)]
    let mut scope_3883 = writer.prefix("MaxResults");
    if let Some(var_3884) = &input.max_results {
        scope_3883.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3884).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3885 = writer.prefix("Filter");
    if let Some(var_3886) = &input.filters {
        let mut list_3888 = scope_3885.start_list(true, Some("Filter"));
        for item_3887 in var_3886 {
            #[allow(unused_mut)]
            let mut entry_3889 = list_3888.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3889, item_3887)?;
        }
        list_3888.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("VpcId");
    if let Some(var_3891) = &input.vpc_ids {
        let mut list_3893 = scope_3890.start_list(true, Some("VpcId"));
        for item_3892 in var_3891 {
            #[allow(unused_mut)]
            let mut entry_3894 = list_3893.entry();
            entry_3894.string(item_3892);
        }
        list_3893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3895 = writer.prefix("DryRun");
    if let Some(var_3896) = &input.dry_run {
        scope_3895.boolean(*var_3896);
    }
    #[allow(unused_mut)]
    let mut scope_3897 = writer.prefix("NextToken");
    if let Some(var_3898) = &input.next_token {
        scope_3897.string(var_3898);
    }
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("MaxResults");
    if let Some(var_3900) = &input.max_results {
        scope_3899.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3900).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3901 = writer.prefix("Filter");
    if let Some(var_3902) = &input.filters {
        let mut list_3904 = scope_3901.start_list(true, Some("Filter"));
        for item_3903 in var_3902 {
            #[allow(unused_mut)]
            let mut entry_3905 = list_3904.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3905, item_3903)?;
        }
        list_3904.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("VpnConnectionId");
    if let Some(var_3907) = &input.vpn_connection_ids {
        let mut list_3909 = scope_3906.start_list(true, Some("VpnConnectionId"));
        for item_3908 in var_3907 {
            #[allow(unused_mut)]
            let mut entry_3910 = list_3909.entry();
            entry_3910.string(item_3908);
        }
        list_3909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("DryRun");
    if let Some(var_3912) = &input.dry_run {
        scope_3911.boolean(*var_3912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3913 = writer.prefix("Filter");
    if let Some(var_3914) = &input.filters {
        let mut list_3916 = scope_3913.start_list(true, Some("Filter"));
        for item_3915 in var_3914 {
            #[allow(unused_mut)]
            let mut entry_3917 = list_3916.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3917, item_3915)?;
        }
        list_3916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("VpnGatewayId");
    if let Some(var_3919) = &input.vpn_gateway_ids {
        let mut list_3921 = scope_3918.start_list(true, Some("VpnGatewayId"));
        for item_3920 in var_3919 {
            #[allow(unused_mut)]
            let mut entry_3922 = list_3921.entry();
            entry_3922.string(item_3920);
        }
        list_3921.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("DryRun");
    if let Some(var_3924) = &input.dry_run {
        scope_3923.boolean(*var_3924);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("DryRun");
    if let Some(var_3926) = &input.dry_run {
        scope_3925.boolean(*var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("InstanceId");
    if let Some(var_3928) = &input.instance_id {
        scope_3927.string(var_3928);
    }
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("VpcId");
    if let Some(var_3930) = &input.vpc_id {
        scope_3929.string(var_3930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("DryRun");
    if let Some(var_3932) = &input.dry_run {
        scope_3931.boolean(*var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("InternetGatewayId");
    if let Some(var_3934) = &input.internet_gateway_id {
        scope_3933.string(var_3934);
    }
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("VpcId");
    if let Some(var_3936) = &input.vpc_id {
        scope_3935.string(var_3936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("AttachmentId");
    if let Some(var_3938) = &input.attachment_id {
        scope_3937.string(var_3938);
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("DryRun");
    if let Some(var_3940) = &input.dry_run {
        scope_3939.boolean(*var_3940);
    }
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("Force");
    if let Some(var_3942) = &input.force {
        scope_3941.boolean(*var_3942);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("Device");
    if let Some(var_3944) = &input.device {
        scope_3943.string(var_3944);
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("Force");
    if let Some(var_3946) = &input.force {
        scope_3945.boolean(*var_3946);
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("InstanceId");
    if let Some(var_3948) = &input.instance_id {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("VolumeId");
    if let Some(var_3950) = &input.volume_id {
        scope_3949.string(var_3950);
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("DryRun");
    if let Some(var_3952) = &input.dry_run {
        scope_3951.boolean(*var_3952);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("VpcId");
    if let Some(var_3954) = &input.vpc_id {
        scope_3953.string(var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("VpnGatewayId");
    if let Some(var_3956) = &input.vpn_gateway_id {
        scope_3955.string(var_3956);
    }
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("DryRun");
    if let Some(var_3958) = &input.dry_run {
        scope_3957.boolean(*var_3958);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("DryRun");
    if let Some(var_3960) = &input.dry_run {
        scope_3959.boolean(*var_3960);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("ImageId");
    if let Some(var_3962) = &input.image_id {
        scope_3961.string(var_3962);
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("Force");
    if let Some(var_3964) = &input.force {
        scope_3963.boolean(*var_3964);
    }
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("DryRun");
    if let Some(var_3966) = &input.dry_run {
        scope_3965.boolean(*var_3966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("AvailabilityZone");
    if let Some(var_3968) = &input.availability_zones {
        let mut list_3970 = scope_3967.start_list(true, Some("AvailabilityZone"));
        for item_3969 in var_3968 {
            #[allow(unused_mut)]
            let mut entry_3971 = list_3970.entry();
            entry_3971.string(item_3969);
        }
        list_3970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("SourceSnapshotId");
    if let Some(var_3973) = &input.source_snapshot_ids {
        let mut list_3975 = scope_3972.start_list(true, Some("SnapshotId"));
        for item_3974 in var_3973 {
            #[allow(unused_mut)]
            let mut entry_3976 = list_3975.entry();
            entry_3976.string(item_3974);
        }
        list_3975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("DryRun");
    if let Some(var_3978) = &input.dry_run {
        scope_3977.boolean(*var_3978);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("ImageId");
    if let Some(var_3980) = &input.image_id {
        scope_3979.string(var_3980);
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("DryRun");
    if let Some(var_3984) = &input.dry_run {
        scope_3983.boolean(*var_3984);
    }
    #[allow(unused_mut)]
    let mut scope_3985 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_3986) = &input.delegated_admin_account_id {
        scope_3985.string(var_3986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("DryRun");
    if let Some(var_3988) = &input.dry_run {
        scope_3987.boolean(*var_3988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3990) = &input.transit_gateway_route_table_id {
        scope_3989.string(var_3990);
    }
    #[allow(unused_mut)]
    let mut scope_3991 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3992) = &input.transit_gateway_attachment_id {
        scope_3991.string(var_3992);
    }
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("DryRun");
    if let Some(var_3994) = &input.dry_run {
        scope_3993.boolean(*var_3994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("GatewayId");
    if let Some(var_3996) = &input.gateway_id {
        scope_3995.string(var_3996);
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("RouteTableId");
    if let Some(var_3998) = &input.route_table_id {
        scope_3997.string(var_3998);
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("DryRun");
    if let Some(var_4000) = &input.dry_run {
        scope_3999.boolean(*var_4000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("DryRun");
    if let Some(var_4002) = &input.dry_run {
        scope_4001.boolean(*var_4002);
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("VpcId");
    if let Some(var_4004) = &input.vpc_id {
        scope_4003.string(var_4004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("VpcId");
    if let Some(var_4006) = &input.vpc_id {
        scope_4005.string(var_4006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("AssociationId");
    if let Some(var_4008) = &input.association_id {
        scope_4007.string(var_4008);
    }
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("PublicIp");
    if let Some(var_4010) = &input.public_ip {
        scope_4009.string(var_4010);
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("DryRun");
    if let Some(var_4012) = &input.dry_run {
        scope_4011.boolean(*var_4012);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4014) = &input.client_vpn_endpoint_id {
        scope_4013.string(var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("AssociationId");
    if let Some(var_4016) = &input.association_id {
        scope_4015.string(var_4016);
    }
    #[allow(unused_mut)]
    let mut scope_4017 = writer.prefix("DryRun");
    if let Some(var_4018) = &input.dry_run {
        scope_4017.boolean(*var_4018);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4019 = writer.prefix("CertificateArn");
    if let Some(var_4020) = &input.certificate_arn {
        scope_4019.string(var_4020);
    }
    #[allow(unused_mut)]
    let mut scope_4021 = writer.prefix("RoleArn");
    if let Some(var_4022) = &input.role_arn {
        scope_4021.string(var_4022);
    }
    #[allow(unused_mut)]
    let mut scope_4023 = writer.prefix("DryRun");
    if let Some(var_4024) = &input.dry_run {
        scope_4023.boolean(*var_4024);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4025 = writer.prefix("AssociationId");
    if let Some(var_4026) = &input.association_id {
        scope_4025.string(var_4026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4027 = writer.prefix("DryRun");
    if let Some(var_4028) = &input.dry_run {
        scope_4027.boolean(*var_4028);
    }
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4030) = &input.instance_event_window_id {
        scope_4029.string(var_4030);
    }
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("AssociationTarget");
    if let Some(var_4032) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4031, var_4032)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("AssociationId");
    if let Some(var_4034) = &input.association_id {
        scope_4033.string(var_4034);
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("DryRun");
    if let Some(var_4036) = &input.dry_run {
        scope_4035.boolean(*var_4036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4037 = writer.prefix("AssociationId");
    if let Some(var_4038) = &input.association_id {
        scope_4037.string(var_4038);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4039 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4040) = &input.transit_gateway_multicast_domain_id {
        scope_4039.string(var_4040);
    }
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4042) = &input.transit_gateway_attachment_id {
        scope_4041.string(var_4042);
    }
    #[allow(unused_mut)]
    let mut scope_4043 = writer.prefix("SubnetIds");
    if let Some(var_4044) = &input.subnet_ids {
        let mut list_4046 = scope_4043.start_list(true, Some("item"));
        for item_4045 in var_4044 {
            #[allow(unused_mut)]
            let mut entry_4047 = list_4046.entry();
            entry_4047.string(item_4045);
        }
        list_4046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("DryRun");
    if let Some(var_4049) = &input.dry_run {
        scope_4048.boolean(*var_4049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4051) = &input.transit_gateway_route_table_id {
        scope_4050.string(var_4051);
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4053) = &input.transit_gateway_attachment_id {
        scope_4052.string(var_4053);
    }
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("DryRun");
    if let Some(var_4055) = &input.dry_run {
        scope_4054.boolean(*var_4055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("AssociationId");
    if let Some(var_4057) = &input.association_id {
        scope_4056.string(var_4057);
    }
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("ClientToken");
    if let Some(var_4059) = &input.client_token {
        scope_4058.string(var_4059);
    }
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("DryRun");
    if let Some(var_4061) = &input.dry_run {
        scope_4060.boolean(*var_4061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("AssociationId");
    if let Some(var_4063) = &input.association_id {
        scope_4062.string(var_4063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("DryRun");
    if let Some(var_4065) = &input.dry_run {
        scope_4064.boolean(*var_4065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("ImageId");
    if let Some(var_4067) = &input.image_id {
        scope_4066.string(var_4067);
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("ResourceType");
    if let Some(var_4069) = &input.resource_type {
        scope_4068.string(var_4069);
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4071) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4070, var_4071)?;
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("LaunchTemplate");
    if let Some(var_4073) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4072, var_4073)?;
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4075) = &input.max_parallel_launches {
        scope_4074.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4075).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("DryRun");
    if let Some(var_4077) = &input.dry_run {
        scope_4076.boolean(*var_4077);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("AvailabilityZone");
    if let Some(var_4079) = &input.availability_zones {
        let mut list_4081 = scope_4078.start_list(true, Some("AvailabilityZone"));
        for item_4080 in var_4079 {
            #[allow(unused_mut)]
            let mut entry_4082 = list_4081.entry();
            entry_4082.string(item_4080);
        }
        list_4081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("SourceSnapshotId");
    if let Some(var_4084) = &input.source_snapshot_ids {
        let mut list_4086 = scope_4083.start_list(true, Some("SnapshotId"));
        for item_4085 in var_4084 {
            #[allow(unused_mut)]
            let mut entry_4087 = list_4086.entry();
            entry_4087.string(item_4085);
        }
        list_4086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("DryRun");
    if let Some(var_4089) = &input.dry_run {
        scope_4088.boolean(*var_4089);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("ImageId");
    if let Some(var_4091) = &input.image_id {
        scope_4090.string(var_4091);
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("DeprecateAt");
    if let Some(var_4093) = &input.deprecate_at {
        scope_4092.date_time(var_4093, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("DryRun");
    if let Some(var_4095) = &input.dry_run {
        scope_4094.boolean(*var_4095);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("DryRun");
    if let Some(var_4097) = &input.dry_run {
        scope_4096.boolean(*var_4097);
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4099) = &input.delegated_admin_account_id {
        scope_4098.string(var_4099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("DryRun");
    if let Some(var_4101) = &input.dry_run {
        scope_4100.boolean(*var_4101);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4103) = &input.transit_gateway_route_table_id {
        scope_4102.string(var_4103);
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4105) = &input.transit_gateway_attachment_id {
        scope_4104.string(var_4105);
    }
    #[allow(unused_mut)]
    let mut scope_4106 = writer.prefix("DryRun");
    if let Some(var_4107) = &input.dry_run {
        scope_4106.boolean(*var_4107);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4108 = writer.prefix("GatewayId");
    if let Some(var_4109) = &input.gateway_id {
        scope_4108.string(var_4109);
    }
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("RouteTableId");
    if let Some(var_4111) = &input.route_table_id {
        scope_4110.string(var_4111);
    }
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("DryRun");
    if let Some(var_4113) = &input.dry_run {
        scope_4112.boolean(*var_4113);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("DryRun");
    if let Some(var_4115) = &input.dry_run {
        scope_4114.boolean(*var_4115);
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("VolumeId");
    if let Some(var_4117) = &input.volume_id {
        scope_4116.string(var_4117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DryRun");
    if let Some(var_4119) = &input.dry_run {
        scope_4118.boolean(*var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("VpcId");
    if let Some(var_4121) = &input.vpc_id {
        scope_4120.string(var_4121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("VpcId");
    if let Some(var_4123) = &input.vpc_id {
        scope_4122.string(var_4123);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4125) = &input.client_vpn_endpoint_id {
        scope_4124.string(var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("DryRun");
    if let Some(var_4127) = &input.dry_run {
        scope_4126.boolean(*var_4127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4129) = &input.client_vpn_endpoint_id {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("DryRun");
    if let Some(var_4131) = &input.dry_run {
        scope_4130.boolean(*var_4131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("ClientToken");
    if let Some(var_4133) = &input.client_token {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("Description");
    if let Some(var_4135) = &input.description {
        scope_4134.string(var_4135);
    }
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("DiskImageFormat");
    if let Some(var_4137) = &input.disk_image_format {
        scope_4136.string(var_4137.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("DryRun");
    if let Some(var_4139) = &input.dry_run {
        scope_4138.boolean(*var_4139);
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("ImageId");
    if let Some(var_4141) = &input.image_id {
        scope_4140.string(var_4141);
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("S3ExportLocation");
    if let Some(var_4143) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4142, var_4143,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("RoleName");
    if let Some(var_4145) = &input.role_name {
        scope_4144.string(var_4145);
    }
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("TagSpecification");
    if let Some(var_4147) = &input.tag_specifications {
        let mut list_4149 = scope_4146.start_list(true, Some("item"));
        for item_4148 in var_4147 {
            #[allow(unused_mut)]
            let mut entry_4150 = list_4149.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4150, item_4148,
            )?;
        }
        list_4149.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4152) = &input.transit_gateway_route_table_id {
        scope_4151.string(var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("Filter");
    if let Some(var_4154) = &input.filters {
        let mut list_4156 = scope_4153.start_list(true, Some("Filter"));
        for item_4155 in var_4154 {
            #[allow(unused_mut)]
            let mut entry_4157 = list_4156.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4157, item_4155)?;
        }
        list_4156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4158 = writer.prefix("S3Bucket");
    if let Some(var_4159) = &input.s3_bucket {
        scope_4158.string(var_4159);
    }
    #[allow(unused_mut)]
    let mut scope_4160 = writer.prefix("DryRun");
    if let Some(var_4161) = &input.dry_run {
        scope_4160.boolean(*var_4161);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4162 = writer.prefix("CertificateArn");
    if let Some(var_4163) = &input.certificate_arn {
        scope_4162.string(var_4163);
    }
    #[allow(unused_mut)]
    let mut scope_4164 = writer.prefix("DryRun");
    if let Some(var_4165) = &input.dry_run {
        scope_4164.boolean(*var_4165);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4166 = writer.prefix("PoolId");
    if let Some(var_4167) = &input.pool_id {
        scope_4166.string(var_4167);
    }
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("NextToken");
    if let Some(var_4169) = &input.next_token {
        scope_4168.string(var_4169);
    }
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("MaxResults");
    if let Some(var_4171) = &input.max_results {
        scope_4170.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4171).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("DryRun");
    if let Some(var_4173) = &input.dry_run {
        scope_4172.boolean(*var_4173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("CapacityReservationId");
    if let Some(var_4175) = &input.capacity_reservation_id {
        scope_4174.string(var_4175);
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("NextToken");
    if let Some(var_4177) = &input.next_token {
        scope_4176.string(var_4177);
    }
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("MaxResults");
    if let Some(var_4179) = &input.max_results {
        scope_4178.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4179).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("DryRun");
    if let Some(var_4181) = &input.dry_run {
        scope_4180.boolean(*var_4181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("PoolId");
    if let Some(var_4183) = &input.pool_id {
        scope_4182.string(var_4183);
    }
    #[allow(unused_mut)]
    let mut scope_4184 = writer.prefix("Filter");
    if let Some(var_4185) = &input.filters {
        let mut list_4187 = scope_4184.start_list(true, Some("Filter"));
        for item_4186 in var_4185 {
            #[allow(unused_mut)]
            let mut entry_4188 = list_4187.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4188, item_4186)?;
        }
        list_4187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("MaxResults");
    if let Some(var_4190) = &input.max_results {
        scope_4189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("NextToken");
    if let Some(var_4192) = &input.next_token {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("DryRun");
    if let Some(var_4194) = &input.dry_run {
        scope_4193.boolean(*var_4194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("InstanceId");
    if let Some(var_4196) = &input.instance_id {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("DryRun");
    if let Some(var_4198) = &input.dry_run {
        scope_4197.boolean(*var_4198);
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("Latest");
    if let Some(var_4200) = &input.latest {
        scope_4199.boolean(*var_4200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("DryRun");
    if let Some(var_4202) = &input.dry_run {
        scope_4201.boolean(*var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("InstanceId");
    if let Some(var_4204) = &input.instance_id {
        scope_4203.string(var_4204);
    }
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("WakeUp");
    if let Some(var_4206) = &input.wake_up {
        scope_4205.boolean(*var_4206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("DryRun");
    if let Some(var_4208) = &input.dry_run {
        scope_4207.boolean(*var_4208);
    }
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("InstanceFamily");
    if let Some(var_4210) = &input.instance_family {
        scope_4209.string(var_4210.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("DryRun");
    if let Some(var_4212) = &input.dry_run {
        scope_4211.boolean(*var_4212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("DryRun");
    if let Some(var_4214) = &input.dry_run {
        scope_4213.boolean(*var_4214);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("DryRun");
    if let Some(var_4216) = &input.dry_run {
        scope_4215.boolean(*var_4216);
    }
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("FlowLogId");
    if let Some(var_4218) = &input.flow_log_id {
        scope_4217.string(var_4218);
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4220) = &input.config_delivery_s3_destination_arn {
        scope_4219.string(var_4220);
    }
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("IntegrateService");
    if let Some(var_4222) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4221, var_4222)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("CapacityReservationId");
    if let Some(var_4224) = &input.capacity_reservation_id {
        scope_4223.string(var_4224);
    }
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("NextToken");
    if let Some(var_4226) = &input.next_token {
        scope_4225.string(var_4226);
    }
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("MaxResults");
    if let Some(var_4228) = &input.max_results {
        scope_4227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("DryRun");
    if let Some(var_4230) = &input.dry_run {
        scope_4229.boolean(*var_4230);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("HostIdSet");
    if let Some(var_4232) = &input.host_id_set {
        let mut list_4234 = scope_4231.start_list(true, Some("item"));
        for item_4233 in var_4232 {
            #[allow(unused_mut)]
            let mut entry_4235 = list_4234.entry();
            entry_4235.string(item_4233);
        }
        list_4234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("OfferingId");
    if let Some(var_4237) = &input.offering_id {
        scope_4236.string(var_4237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("DryRun");
    if let Some(var_4239) = &input.dry_run {
        scope_4238.boolean(*var_4239);
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("ArchitectureType");
    if let Some(var_4241) = &input.architecture_types {
        let mut list_4243 = scope_4240.start_list(true, Some("item"));
        for item_4242 in var_4241 {
            #[allow(unused_mut)]
            let mut entry_4244 = list_4243.entry();
            entry_4244.string(item_4242.as_str());
        }
        list_4243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("VirtualizationType");
    if let Some(var_4246) = &input.virtualization_types {
        let mut list_4248 = scope_4245.start_list(true, Some("item"));
        for item_4247 in var_4246 {
            #[allow(unused_mut)]
            let mut entry_4249 = list_4248.entry();
            entry_4249.string(item_4247.as_str());
        }
        list_4248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("InstanceRequirements");
    if let Some(var_4251) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4250, var_4251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("MaxResults");
    if let Some(var_4253) = &input.max_results {
        scope_4252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4253).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("NextToken");
    if let Some(var_4255) = &input.next_token {
        scope_4254.string(var_4255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("DryRun");
    if let Some(var_4257) = &input.dry_run {
        scope_4256.boolean(*var_4257);
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("Cidr");
    if let Some(var_4259) = &input.cidr {
        scope_4258.string(var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("IpamScopeId");
    if let Some(var_4261) = &input.ipam_scope_id {
        scope_4260.string(var_4261);
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("VpcId");
    if let Some(var_4263) = &input.vpc_id {
        scope_4262.string(var_4263);
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("StartTime");
    if let Some(var_4265) = &input.start_time {
        scope_4264.date_time(var_4265, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("EndTime");
    if let Some(var_4267) = &input.end_time {
        scope_4266.date_time(var_4267, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("MaxResults");
    if let Some(var_4269) = &input.max_results {
        scope_4268.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4269).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("NextToken");
    if let Some(var_4271) = &input.next_token {
        scope_4270.string(var_4271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("DryRun");
    if let Some(var_4273) = &input.dry_run {
        scope_4272.boolean(*var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("IpamPoolId");
    if let Some(var_4275) = &input.ipam_pool_id {
        scope_4274.string(var_4275);
    }
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4277) = &input.ipam_pool_allocation_id {
        scope_4276.string(var_4277);
    }
    #[allow(unused_mut)]
    let mut scope_4278 = writer.prefix("Filter");
    if let Some(var_4279) = &input.filters {
        let mut list_4281 = scope_4278.start_list(true, Some("Filter"));
        for item_4280 in var_4279 {
            #[allow(unused_mut)]
            let mut entry_4282 = list_4281.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4282, item_4280)?;
        }
        list_4281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("MaxResults");
    if let Some(var_4284) = &input.max_results {
        scope_4283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4284).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("NextToken");
    if let Some(var_4286) = &input.next_token {
        scope_4285.string(var_4286);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("DryRun");
    if let Some(var_4288) = &input.dry_run {
        scope_4287.boolean(*var_4288);
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("IpamPoolId");
    if let Some(var_4290) = &input.ipam_pool_id {
        scope_4289.string(var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("Filter");
    if let Some(var_4292) = &input.filters {
        let mut list_4294 = scope_4291.start_list(true, Some("Filter"));
        for item_4293 in var_4292 {
            #[allow(unused_mut)]
            let mut entry_4295 = list_4294.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4295, item_4293)?;
        }
        list_4294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4296 = writer.prefix("MaxResults");
    if let Some(var_4297) = &input.max_results {
        scope_4296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4298 = writer.prefix("NextToken");
    if let Some(var_4299) = &input.next_token {
        scope_4298.string(var_4299);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("DryRun");
    if let Some(var_4301) = &input.dry_run {
        scope_4300.boolean(*var_4301);
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("Filter");
    if let Some(var_4303) = &input.filters {
        let mut list_4305 = scope_4302.start_list(true, Some("Filter"));
        for item_4304 in var_4303 {
            #[allow(unused_mut)]
            let mut entry_4306 = list_4305.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4306, item_4304)?;
        }
        list_4305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4307 = writer.prefix("MaxResults");
    if let Some(var_4308) = &input.max_results {
        scope_4307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4309 = writer.prefix("NextToken");
    if let Some(var_4310) = &input.next_token {
        scope_4309.string(var_4310);
    }
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("IpamScopeId");
    if let Some(var_4312) = &input.ipam_scope_id {
        scope_4311.string(var_4312);
    }
    #[allow(unused_mut)]
    let mut scope_4313 = writer.prefix("IpamPoolId");
    if let Some(var_4314) = &input.ipam_pool_id {
        scope_4313.string(var_4314);
    }
    #[allow(unused_mut)]
    let mut scope_4315 = writer.prefix("ResourceId");
    if let Some(var_4316) = &input.resource_id {
        scope_4315.string(var_4316);
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("ResourceType");
    if let Some(var_4318) = &input.resource_type {
        scope_4317.string(var_4318.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("ResourceTag");
    if let Some(var_4320) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4319, var_4320,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("ResourceOwner");
    if let Some(var_4322) = &input.resource_owner {
        scope_4321.string(var_4322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("DryRun");
    if let Some(var_4324) = &input.dry_run {
        scope_4323.boolean(*var_4324);
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("InstanceId");
    if let Some(var_4326) = &input.instance_id {
        scope_4325.string(var_4326);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("DryRun");
    if let Some(var_4328) = &input.dry_run {
        scope_4327.boolean(*var_4328);
    }
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("PrefixListId");
    if let Some(var_4330) = &input.prefix_list_id {
        scope_4329.string(var_4330);
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("MaxResults");
    if let Some(var_4332) = &input.max_results {
        scope_4331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("NextToken");
    if let Some(var_4334) = &input.next_token {
        scope_4333.string(var_4334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("DryRun");
    if let Some(var_4336) = &input.dry_run {
        scope_4335.boolean(*var_4336);
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("PrefixListId");
    if let Some(var_4338) = &input.prefix_list_id {
        scope_4337.string(var_4338);
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("TargetVersion");
    if let Some(var_4340) = &input.target_version {
        scope_4339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("MaxResults");
    if let Some(var_4342) = &input.max_results {
        scope_4341.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4342).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("NextToken");
    if let Some(var_4344) = &input.next_token {
        scope_4343.string(var_4344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4346) = &input.network_insights_access_scope_analysis_id {
        scope_4345.string(var_4346);
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("MaxResults");
    if let Some(var_4348) = &input.max_results {
        scope_4347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("NextToken");
    if let Some(var_4350) = &input.next_token {
        scope_4349.string(var_4350);
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("DryRun");
    if let Some(var_4352) = &input.dry_run {
        scope_4351.boolean(*var_4352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4354) = &input.network_insights_access_scope_id {
        scope_4353.string(var_4354);
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("DryRun");
    if let Some(var_4356) = &input.dry_run {
        scope_4355.boolean(*var_4356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("InstanceId");
    if let Some(var_4358) = &input.instance_id {
        scope_4357.string(var_4358);
    }
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("DryRun");
    if let Some(var_4360) = &input.dry_run {
        scope_4359.boolean(*var_4360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("DryRun");
    if let Some(var_4362) = &input.dry_run {
        scope_4361.boolean(*var_4362);
    }
    #[allow(unused_mut)]
    let mut scope_4363 = writer.prefix("ReservedInstanceId");
    if let Some(var_4364) = &input.reserved_instance_ids {
        let mut list_4366 = scope_4363.start_list(true, Some("ReservedInstanceId"));
        for item_4365 in var_4364 {
            #[allow(unused_mut)]
            let mut entry_4367 = list_4366.entry();
            entry_4367.string(item_4365);
        }
        list_4366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("TargetConfiguration");
    if let Some(var_4369) = &input.target_configurations {
        let mut list_4371 = scope_4368.start_list(true, Some("TargetConfigurationRequest"));
        for item_4370 in var_4369 {
            #[allow(unused_mut)]
            let mut entry_4372 = list_4371.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4372, item_4370,
            )?;
        }
        list_4371.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("DryRun");
    if let Some(var_4374) = &input.dry_run {
        scope_4373.boolean(*var_4374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("InstanceType");
    if let Some(var_4376) = &input.instance_types {
        let mut list_4378 = scope_4375.start_list(true, None);
        for item_4377 in var_4376 {
            #[allow(unused_mut)]
            let mut entry_4379 = list_4378.entry();
            entry_4379.string(item_4377);
        }
        list_4378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("TargetCapacity");
    if let Some(var_4381) = &input.target_capacity {
        scope_4380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4383) = &input.target_capacity_unit_type {
        scope_4382.string(var_4383.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4385) = &input.single_availability_zone {
        scope_4384.boolean(*var_4385);
    }
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("RegionName");
    if let Some(var_4387) = &input.region_names {
        let mut list_4389 = scope_4386.start_list(true, None);
        for item_4388 in var_4387 {
            #[allow(unused_mut)]
            let mut entry_4390 = list_4389.entry();
            entry_4390.string(item_4388);
        }
        list_4389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4392) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4391, var_4392)?;
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("DryRun");
    if let Some(var_4394) = &input.dry_run {
        scope_4393.boolean(*var_4394);
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("MaxResults");
    if let Some(var_4396) = &input.max_results {
        scope_4395.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4397 = writer.prefix("NextToken");
    if let Some(var_4398) = &input.next_token {
        scope_4397.string(var_4398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4399 = writer.prefix("Filter");
    if let Some(var_4400) = &input.filters {
        let mut list_4402 = scope_4399.start_list(true, Some("Filter"));
        for item_4401 in var_4400 {
            #[allow(unused_mut)]
            let mut entry_4403 = list_4402.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4403, item_4401)?;
        }
        list_4402.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("SubnetId");
    if let Some(var_4405) = &input.subnet_id {
        scope_4404.string(var_4405);
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("DryRun");
    if let Some(var_4407) = &input.dry_run {
        scope_4406.boolean(*var_4407);
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("NextToken");
    if let Some(var_4409) = &input.next_token {
        scope_4408.string(var_4409);
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("MaxResults");
    if let Some(var_4411) = &input.max_results {
        scope_4410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4411).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4413) = &input.transit_gateway_attachment_id {
        scope_4412.string(var_4413);
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("Filter");
    if let Some(var_4415) = &input.filters {
        let mut list_4417 = scope_4414.start_list(true, Some("Filter"));
        for item_4416 in var_4415 {
            #[allow(unused_mut)]
            let mut entry_4418 = list_4417.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4418, item_4416)?;
        }
        list_4417.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4419 = writer.prefix("MaxResults");
    if let Some(var_4420) = &input.max_results {
        scope_4419.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4420).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4421 = writer.prefix("NextToken");
    if let Some(var_4422) = &input.next_token {
        scope_4421.string(var_4422);
    }
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("DryRun");
    if let Some(var_4424) = &input.dry_run {
        scope_4423.boolean(*var_4424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4425 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4426) = &input.transit_gateway_multicast_domain_id {
        scope_4425.string(var_4426);
    }
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("Filter");
    if let Some(var_4428) = &input.filters {
        let mut list_4430 = scope_4427.start_list(true, Some("Filter"));
        for item_4429 in var_4428 {
            #[allow(unused_mut)]
            let mut entry_4431 = list_4430.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4431, item_4429)?;
        }
        list_4430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4432 = writer.prefix("MaxResults");
    if let Some(var_4433) = &input.max_results {
        scope_4432.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4433).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("NextToken");
    if let Some(var_4435) = &input.next_token {
        scope_4434.string(var_4435);
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("DryRun");
    if let Some(var_4437) = &input.dry_run {
        scope_4436.boolean(*var_4437);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4439) = &input.transit_gateway_route_table_id {
        scope_4438.string(var_4439);
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("Filter");
    if let Some(var_4441) = &input.filters {
        let mut list_4443 = scope_4440.start_list(true, Some("Filter"));
        for item_4442 in var_4441 {
            #[allow(unused_mut)]
            let mut entry_4444 = list_4443.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4444, item_4442)?;
        }
        list_4443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("MaxResults");
    if let Some(var_4446) = &input.max_results {
        scope_4445.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4446).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("NextToken");
    if let Some(var_4448) = &input.next_token {
        scope_4447.string(var_4448);
    }
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("DryRun");
    if let Some(var_4450) = &input.dry_run {
        scope_4449.boolean(*var_4450);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4452) = &input.transit_gateway_route_table_id {
        scope_4451.string(var_4452);
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("Filter");
    if let Some(var_4454) = &input.filters {
        let mut list_4456 = scope_4453.start_list(true, Some("Filter"));
        for item_4455 in var_4454 {
            #[allow(unused_mut)]
            let mut entry_4457 = list_4456.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4457, item_4455)?;
        }
        list_4456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("MaxResults");
    if let Some(var_4459) = &input.max_results {
        scope_4458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4459).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("NextToken");
    if let Some(var_4461) = &input.next_token {
        scope_4460.string(var_4461);
    }
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("DryRun");
    if let Some(var_4463) = &input.dry_run {
        scope_4462.boolean(*var_4463);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4465) = &input.transit_gateway_route_table_id {
        scope_4464.string(var_4465);
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("Filter");
    if let Some(var_4467) = &input.filters {
        let mut list_4469 = scope_4466.start_list(true, Some("Filter"));
        for item_4468 in var_4467 {
            #[allow(unused_mut)]
            let mut entry_4470 = list_4469.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4470, item_4468)?;
        }
        list_4469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4471 = writer.prefix("MaxResults");
    if let Some(var_4472) = &input.max_results {
        scope_4471.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4472).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4473 = writer.prefix("NextToken");
    if let Some(var_4474) = &input.next_token {
        scope_4473.string(var_4474);
    }
    #[allow(unused_mut)]
    let mut scope_4475 = writer.prefix("DryRun");
    if let Some(var_4476) = &input.dry_run {
        scope_4475.boolean(*var_4476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("VpnConnectionId");
    if let Some(var_4478) = &input.vpn_connection_id {
        scope_4477.string(var_4478);
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4480) = &input.vpn_connection_device_type_id {
        scope_4479.string(var_4480);
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4482) = &input.internet_key_exchange_version {
        scope_4481.string(var_4482);
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("DryRun");
    if let Some(var_4484) = &input.dry_run {
        scope_4483.boolean(*var_4484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("MaxResults");
    if let Some(var_4486) = &input.max_results {
        scope_4485.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4486).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("NextToken");
    if let Some(var_4488) = &input.next_token {
        scope_4487.string(var_4488);
    }
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("DryRun");
    if let Some(var_4490) = &input.dry_run {
        scope_4489.boolean(*var_4490);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4492) = &input.client_vpn_endpoint_id {
        scope_4491.string(var_4492);
    }
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("CertificateRevocationList");
    if let Some(var_4494) = &input.certificate_revocation_list {
        scope_4493.string(var_4494);
    }
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("DryRun");
    if let Some(var_4496) = &input.dry_run {
        scope_4495.boolean(*var_4496);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("Architecture");
    if let Some(var_4498) = &input.architecture {
        scope_4497.string(var_4498);
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("ClientData");
    if let Some(var_4500) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4499, var_4500)?;
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("ClientToken");
    if let Some(var_4502) = &input.client_token {
        scope_4501.string(var_4502);
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("Description");
    if let Some(var_4504) = &input.description {
        scope_4503.string(var_4504);
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("DiskContainer");
    if let Some(var_4506) = &input.disk_containers {
        let mut list_4508 = scope_4505.start_list(true, Some("item"));
        for item_4507 in var_4506 {
            #[allow(unused_mut)]
            let mut entry_4509 = list_4508.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4509, item_4507,
            )?;
        }
        list_4508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("DryRun");
    if let Some(var_4511) = &input.dry_run {
        scope_4510.boolean(*var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("Encrypted");
    if let Some(var_4513) = &input.encrypted {
        scope_4512.boolean(*var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("Hypervisor");
    if let Some(var_4515) = &input.hypervisor {
        scope_4514.string(var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("KmsKeyId");
    if let Some(var_4517) = &input.kms_key_id {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("LicenseType");
    if let Some(var_4519) = &input.license_type {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("Platform");
    if let Some(var_4521) = &input.platform {
        scope_4520.string(var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("RoleName");
    if let Some(var_4523) = &input.role_name {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("LicenseSpecifications");
    if let Some(var_4525) = &input.license_specifications {
        let mut list_4527 = scope_4524.start_list(true, Some("item"));
        for item_4526 in var_4525 {
            #[allow(unused_mut)]
            let mut entry_4528 = list_4527.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4528, item_4526)?;
        }
        list_4527.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4529 = writer.prefix("TagSpecification");
    if let Some(var_4530) = &input.tag_specifications {
        let mut list_4532 = scope_4529.start_list(true, Some("item"));
        for item_4531 in var_4530 {
            #[allow(unused_mut)]
            let mut entry_4533 = list_4532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4533, item_4531,
            )?;
        }
        list_4532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("UsageOperation");
    if let Some(var_4535) = &input.usage_operation {
        scope_4534.string(var_4535);
    }
    #[allow(unused_mut)]
    let mut scope_4536 = writer.prefix("BootMode");
    if let Some(var_4537) = &input.boot_mode {
        scope_4536.string(var_4537.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4538 = writer.prefix("Description");
    if let Some(var_4539) = &input.description {
        scope_4538.string(var_4539);
    }
    #[allow(unused_mut)]
    let mut scope_4540 = writer.prefix("DiskImage");
    if let Some(var_4541) = &input.disk_images {
        let mut list_4543 = scope_4540.start_list(true, None);
        for item_4542 in var_4541 {
            #[allow(unused_mut)]
            let mut entry_4544 = list_4543.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4544, item_4542)?;
        }
        list_4543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("DryRun");
    if let Some(var_4546) = &input.dry_run {
        scope_4545.boolean(*var_4546);
    }
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("LaunchSpecification");
    if let Some(var_4548) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4547, var_4548,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("Platform");
    if let Some(var_4550) = &input.platform {
        scope_4549.string(var_4550.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("DryRun");
    if let Some(var_4552) = &input.dry_run {
        scope_4551.boolean(*var_4552);
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("KeyName");
    if let Some(var_4554) = &input.key_name {
        scope_4553.string(var_4554);
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4556) = &input.public_key_material {
        scope_4555.string(&aws_smithy_types::base64::encode(var_4556));
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("TagSpecification");
    if let Some(var_4558) = &input.tag_specifications {
        let mut list_4560 = scope_4557.start_list(true, Some("item"));
        for item_4559 in var_4558 {
            #[allow(unused_mut)]
            let mut entry_4561 = list_4560.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4561, item_4559,
            )?;
        }
        list_4560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("ClientData");
    if let Some(var_4563) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4562, var_4563)?;
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("ClientToken");
    if let Some(var_4565) = &input.client_token {
        scope_4564.string(var_4565);
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("Description");
    if let Some(var_4567) = &input.description {
        scope_4566.string(var_4567);
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("DiskContainer");
    if let Some(var_4569) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4568, var_4569,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("DryRun");
    if let Some(var_4571) = &input.dry_run {
        scope_4570.boolean(*var_4571);
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("Encrypted");
    if let Some(var_4573) = &input.encrypted {
        scope_4572.boolean(*var_4573);
    }
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("KmsKeyId");
    if let Some(var_4575) = &input.kms_key_id {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("RoleName");
    if let Some(var_4577) = &input.role_name {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("TagSpecification");
    if let Some(var_4579) = &input.tag_specifications {
        let mut list_4581 = scope_4578.start_list(true, Some("item"));
        for item_4580 in var_4579 {
            #[allow(unused_mut)]
            let mut entry_4582 = list_4581.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4582, item_4580,
            )?;
        }
        list_4581.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("AvailabilityZone");
    if let Some(var_4584) = &input.availability_zone {
        scope_4583.string(var_4584);
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("Description");
    if let Some(var_4586) = &input.description {
        scope_4585.string(var_4586);
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("DryRun");
    if let Some(var_4588) = &input.dry_run {
        scope_4587.boolean(*var_4588);
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("Image");
    if let Some(var_4590) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4589, var_4590)?;
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("Volume");
    if let Some(var_4592) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4591, var_4592)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("ImageId");
    if let Some(var_4594) = &input.image_ids {
        let mut list_4596 = scope_4593.start_list(true, Some("ImageId"));
        for item_4595 in var_4594 {
            #[allow(unused_mut)]
            let mut entry_4597 = list_4596.entry();
            entry_4597.string(item_4595);
        }
        list_4596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4598 = writer.prefix("NextToken");
    if let Some(var_4599) = &input.next_token {
        scope_4598.string(var_4599);
    }
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("MaxResults");
    if let Some(var_4601) = &input.max_results {
        scope_4600.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("DryRun");
    if let Some(var_4603) = &input.dry_run {
        scope_4602.boolean(*var_4603);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("MaxResults");
    if let Some(var_4605) = &input.max_results {
        scope_4604.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4605).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("NextToken");
    if let Some(var_4607) = &input.next_token {
        scope_4606.string(var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("SnapshotId");
    if let Some(var_4609) = &input.snapshot_ids {
        let mut list_4611 = scope_4608.start_list(true, Some("SnapshotId"));
        for item_4610 in var_4609 {
            #[allow(unused_mut)]
            let mut entry_4612 = list_4611.entry();
            entry_4612.string(item_4610);
        }
        list_4611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("DryRun");
    if let Some(var_4614) = &input.dry_run {
        scope_4613.boolean(*var_4614);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("AllocationId");
    if let Some(var_4616) = &input.allocation_id {
        scope_4615.string(var_4616);
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("DomainName");
    if let Some(var_4618) = &input.domain_name {
        scope_4617.string(var_4618);
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("DryRun");
    if let Some(var_4620) = &input.dry_run {
        scope_4619.boolean(*var_4620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("GroupName");
    if let Some(var_4622) = &input.group_name {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("OptInStatus");
    if let Some(var_4624) = &input.opt_in_status {
        scope_4623.string(var_4624.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("DryRun");
    if let Some(var_4626) = &input.dry_run {
        scope_4625.boolean(*var_4626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("CapacityReservationId");
    if let Some(var_4628) = &input.capacity_reservation_id {
        scope_4627.string(var_4628);
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("InstanceCount");
    if let Some(var_4630) = &input.instance_count {
        scope_4629.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4630).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("EndDate");
    if let Some(var_4632) = &input.end_date {
        scope_4631.date_time(var_4632, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("EndDateType");
    if let Some(var_4634) = &input.end_date_type {
        scope_4633.string(var_4634.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("Accept");
    if let Some(var_4636) = &input.accept {
        scope_4635.boolean(*var_4636);
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("DryRun");
    if let Some(var_4638) = &input.dry_run {
        scope_4637.boolean(*var_4638);
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("AdditionalInfo");
    if let Some(var_4640) = &input.additional_info {
        scope_4639.string(var_4640);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4642) = &input.capacity_reservation_fleet_id {
        scope_4641.string(var_4642);
    }
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4644) = &input.total_target_capacity {
        scope_4643.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4644).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("EndDate");
    if let Some(var_4646) = &input.end_date {
        scope_4645.date_time(var_4646, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("DryRun");
    if let Some(var_4648) = &input.dry_run {
        scope_4647.boolean(*var_4648);
    }
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("RemoveEndDate");
    if let Some(var_4650) = &input.remove_end_date {
        scope_4649.boolean(*var_4650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4652) = &input.client_vpn_endpoint_id {
        scope_4651.string(var_4652);
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("ServerCertificateArn");
    if let Some(var_4654) = &input.server_certificate_arn {
        scope_4653.string(var_4654);
    }
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4656) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4655, var_4656,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("DnsServers");
    if let Some(var_4658) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4657, var_4658,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("VpnPort");
    if let Some(var_4660) = &input.vpn_port {
        scope_4659.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("Description");
    if let Some(var_4662) = &input.description {
        scope_4661.string(var_4662);
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("SplitTunnel");
    if let Some(var_4664) = &input.split_tunnel {
        scope_4663.boolean(*var_4664);
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("DryRun");
    if let Some(var_4666) = &input.dry_run {
        scope_4665.boolean(*var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("SecurityGroupId");
    if let Some(var_4668) = &input.security_group_ids {
        let mut list_4670 = scope_4667.start_list(true, Some("item"));
        for item_4669 in var_4668 {
            #[allow(unused_mut)]
            let mut entry_4671 = list_4670.entry();
            entry_4671.string(item_4669);
        }
        list_4670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("VpcId");
    if let Some(var_4673) = &input.vpc_id {
        scope_4672.string(var_4673);
    }
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("SelfServicePortal");
    if let Some(var_4675) = &input.self_service_portal {
        scope_4674.string(var_4675.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("ClientConnectOptions");
    if let Some(var_4677) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4676, var_4677,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4679) = &input.session_timeout_hours {
        scope_4678.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4679).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4681) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4680, var_4681,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("DryRun");
    if let Some(var_4683) = &input.dry_run {
        scope_4682.boolean(*var_4683);
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("InstanceFamily");
    if let Some(var_4685) = &input.instance_family {
        scope_4684.string(var_4685.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("CpuCredits");
    if let Some(var_4687) = &input.cpu_credits {
        scope_4686.string(var_4687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("KmsKeyId");
    if let Some(var_4689) = &input.kms_key_id {
        scope_4688.string(var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("DryRun");
    if let Some(var_4691) = &input.dry_run {
        scope_4690.boolean(*var_4691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("DryRun");
    if let Some(var_4693) = &input.dry_run {
        scope_4692.boolean(*var_4693);
    }
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4695) = &input.excess_capacity_termination_policy {
        scope_4694.string(var_4695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4696 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4697) = &input.launch_template_configs {
        let mut list_4699 = scope_4696.start_list(true, Some("item"));
        for item_4698 in var_4697 {
            #[allow(unused_mut)]
            let mut entry_4700 = list_4699.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4700, item_4698,
            )?;
        }
        list_4699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("FleetId");
    if let Some(var_4702) = &input.fleet_id {
        scope_4701.string(var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4704) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4703, var_4704,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("Context");
    if let Some(var_4706) = &input.context {
        scope_4705.string(var_4706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("DryRun");
    if let Some(var_4708) = &input.dry_run {
        scope_4707.boolean(*var_4708);
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("FpgaImageId");
    if let Some(var_4710) = &input.fpga_image_id {
        scope_4709.string(var_4710);
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("Attribute");
    if let Some(var_4712) = &input.attribute {
        scope_4711.string(var_4712.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("OperationType");
    if let Some(var_4714) = &input.operation_type {
        scope_4713.string(var_4714.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("UserId");
    if let Some(var_4716) = &input.user_ids {
        let mut list_4718 = scope_4715.start_list(true, Some("UserId"));
        for item_4717 in var_4716 {
            #[allow(unused_mut)]
            let mut entry_4719 = list_4718.entry();
            entry_4719.string(item_4717);
        }
        list_4718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4720 = writer.prefix("UserGroup");
    if let Some(var_4721) = &input.user_groups {
        let mut list_4723 = scope_4720.start_list(true, Some("UserGroup"));
        for item_4722 in var_4721 {
            #[allow(unused_mut)]
            let mut entry_4724 = list_4723.entry();
            entry_4724.string(item_4722);
        }
        list_4723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4725 = writer.prefix("ProductCode");
    if let Some(var_4726) = &input.product_codes {
        let mut list_4728 = scope_4725.start_list(true, Some("ProductCode"));
        for item_4727 in var_4726 {
            #[allow(unused_mut)]
            let mut entry_4729 = list_4728.entry();
            entry_4729.string(item_4727);
        }
        list_4728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("LoadPermission");
    if let Some(var_4731) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4730, var_4731,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("Description");
    if let Some(var_4733) = &input.description {
        scope_4732.string(var_4733);
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("Name");
    if let Some(var_4735) = &input.name {
        scope_4734.string(var_4735);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("AutoPlacement");
    if let Some(var_4737) = &input.auto_placement {
        scope_4736.string(var_4737.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("HostId");
    if let Some(var_4739) = &input.host_ids {
        let mut list_4741 = scope_4738.start_list(true, Some("item"));
        for item_4740 in var_4739 {
            #[allow(unused_mut)]
            let mut entry_4742 = list_4741.entry();
            entry_4742.string(item_4740);
        }
        list_4741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("HostRecovery");
    if let Some(var_4744) = &input.host_recovery {
        scope_4743.string(var_4744.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("InstanceType");
    if let Some(var_4746) = &input.instance_type {
        scope_4745.string(var_4746);
    }
    #[allow(unused_mut)]
    let mut scope_4747 = writer.prefix("InstanceFamily");
    if let Some(var_4748) = &input.instance_family {
        scope_4747.string(var_4748);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("PrincipalArn");
    if let Some(var_4750) = &input.principal_arn {
        scope_4749.string(var_4750);
    }
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("Resource");
    if let Some(var_4752) = &input.resource {
        scope_4751.string(var_4752);
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("UseLongIds");
    if let Some(var_4754) = &input.use_long_ids {
        scope_4753.boolean(*var_4754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("Resource");
    if let Some(var_4756) = &input.resource {
        scope_4755.string(var_4756);
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("UseLongIds");
    if let Some(var_4758) = &input.use_long_ids {
        scope_4757.boolean(*var_4758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("Attribute");
    if let Some(var_4760) = &input.attribute {
        scope_4759.string(var_4760);
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("Description");
    if let Some(var_4762) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4761, var_4762)?;
    }
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("ImageId");
    if let Some(var_4764) = &input.image_id {
        scope_4763.string(var_4764);
    }
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("LaunchPermission");
    if let Some(var_4766) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4765, var_4766,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("OperationType");
    if let Some(var_4768) = &input.operation_type {
        scope_4767.string(var_4768.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4769 = writer.prefix("ProductCode");
    if let Some(var_4770) = &input.product_codes {
        let mut list_4772 = scope_4769.start_list(true, Some("ProductCode"));
        for item_4771 in var_4770 {
            #[allow(unused_mut)]
            let mut entry_4773 = list_4772.entry();
            entry_4773.string(item_4771);
        }
        list_4772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("UserGroup");
    if let Some(var_4775) = &input.user_groups {
        let mut list_4777 = scope_4774.start_list(true, Some("UserGroup"));
        for item_4776 in var_4775 {
            #[allow(unused_mut)]
            let mut entry_4778 = list_4777.entry();
            entry_4778.string(item_4776);
        }
        list_4777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4779 = writer.prefix("UserId");
    if let Some(var_4780) = &input.user_ids {
        let mut list_4782 = scope_4779.start_list(true, Some("UserId"));
        for item_4781 in var_4780 {
            #[allow(unused_mut)]
            let mut entry_4783 = list_4782.entry();
            entry_4783.string(item_4781);
        }
        list_4782.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("Value");
    if let Some(var_4785) = &input.value {
        scope_4784.string(var_4785);
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("DryRun");
    if let Some(var_4787) = &input.dry_run {
        scope_4786.boolean(*var_4787);
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("OrganizationArn");
    if let Some(var_4789) = &input.organization_arns {
        let mut list_4791 = scope_4788.start_list(true, Some("OrganizationArn"));
        for item_4790 in var_4789 {
            #[allow(unused_mut)]
            let mut entry_4792 = list_4791.entry();
            entry_4792.string(item_4790);
        }
        list_4791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4793 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4794) = &input.organizational_unit_arns {
        let mut list_4796 = scope_4793.start_list(true, Some("OrganizationalUnitArn"));
        for item_4795 in var_4794 {
            #[allow(unused_mut)]
            let mut entry_4797 = list_4796.entry();
            entry_4797.string(item_4795);
        }
        list_4796.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("SourceDestCheck");
    if let Some(var_4799) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4798, var_4799,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("Attribute");
    if let Some(var_4801) = &input.attribute {
        scope_4800.string(var_4801.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4803) = &input.block_device_mappings {
        let mut list_4805 = scope_4802.start_list(true, Some("item"));
        for item_4804 in var_4803 {
            #[allow(unused_mut)]
            let mut entry_4806 = list_4805.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4806, item_4804)?;
        }
        list_4805.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("DisableApiTermination");
    if let Some(var_4808) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4807, var_4808,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("DryRun");
    if let Some(var_4810) = &input.dry_run {
        scope_4809.boolean(*var_4810);
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("EbsOptimized");
    if let Some(var_4812) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4811, var_4812,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("EnaSupport");
    if let Some(var_4814) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4813, var_4814,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("GroupId");
    if let Some(var_4816) = &input.groups {
        let mut list_4818 = scope_4815.start_list(true, Some("groupId"));
        for item_4817 in var_4816 {
            #[allow(unused_mut)]
            let mut entry_4819 = list_4818.entry();
            entry_4819.string(item_4817);
        }
        list_4818.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("InstanceId");
    if let Some(var_4821) = &input.instance_id {
        scope_4820.string(var_4821);
    }
    #[allow(unused_mut)]
    let mut scope_4822 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4823) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4822, var_4823)?;
    }
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("InstanceType");
    if let Some(var_4825) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4824, var_4825)?;
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("Kernel");
    if let Some(var_4827) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4826, var_4827)?;
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("Ramdisk");
    if let Some(var_4829) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4828, var_4829)?;
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("SriovNetSupport");
    if let Some(var_4831) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4830, var_4831)?;
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("UserData");
    if let Some(var_4833) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4832, var_4833,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("Value");
    if let Some(var_4835) = &input.value {
        scope_4834.string(var_4835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("InstanceId");
    if let Some(var_4837) = &input.instance_id {
        scope_4836.string(var_4837);
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4839) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4838, var_4839,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("DryRun");
    if let Some(var_4841) = &input.dry_run {
        scope_4840.boolean(*var_4841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("DryRun");
    if let Some(var_4843) = &input.dry_run {
        scope_4842.boolean(*var_4843);
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("ClientToken");
    if let Some(var_4845) = &input.client_token {
        scope_4844.string(var_4845);
    }
    #[allow(unused_mut)]
    let mut scope_4846 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4847) = &input.instance_credit_specifications {
        let mut list_4849 = scope_4846.start_list(true, Some("item"));
        for item_4848 in var_4847 {
            #[allow(unused_mut)]
            let mut entry_4850 = list_4849.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4850, item_4848)?;
        }
        list_4849.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("DryRun");
    if let Some(var_4852) = &input.dry_run {
        scope_4851.boolean(*var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("InstanceId");
    if let Some(var_4854) = &input.instance_id {
        scope_4853.string(var_4854);
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("InstanceEventId");
    if let Some(var_4856) = &input.instance_event_id {
        scope_4855.string(var_4856);
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("NotBefore");
    if let Some(var_4858) = &input.not_before {
        scope_4857.date_time(var_4858, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("DryRun");
    if let Some(var_4860) = &input.dry_run {
        scope_4859.boolean(*var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("Name");
    if let Some(var_4862) = &input.name {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4864) = &input.instance_event_window_id {
        scope_4863.string(var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("TimeRange");
    if let Some(var_4866) = &input.time_ranges {
        let mut list_4868 = scope_4865.start_list(true, None);
        for item_4867 in var_4866 {
            #[allow(unused_mut)]
            let mut entry_4869 = list_4868.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4869, item_4867)?;
        }
        list_4868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("CronExpression");
    if let Some(var_4871) = &input.cron_expression {
        scope_4870.string(var_4871);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("InstanceId");
    if let Some(var_4873) = &input.instance_id {
        scope_4872.string(var_4873);
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("AutoRecovery");
    if let Some(var_4875) = &input.auto_recovery {
        scope_4874.string(var_4875.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("DryRun");
    if let Some(var_4877) = &input.dry_run {
        scope_4876.boolean(*var_4877);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("InstanceId");
    if let Some(var_4879) = &input.instance_id {
        scope_4878.string(var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("HttpTokens");
    if let Some(var_4881) = &input.http_tokens {
        scope_4880.string(var_4881.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4883) = &input.http_put_response_hop_limit {
        scope_4882.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("HttpEndpoint");
    if let Some(var_4885) = &input.http_endpoint {
        scope_4884.string(var_4885.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("DryRun");
    if let Some(var_4887) = &input.dry_run {
        scope_4886.boolean(*var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4889) = &input.http_protocol_ipv6 {
        scope_4888.string(var_4889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4891) = &input.instance_metadata_tags {
        scope_4890.string(var_4891.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("Affinity");
    if let Some(var_4893) = &input.affinity {
        scope_4892.string(var_4893.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("GroupName");
    if let Some(var_4895) = &input.group_name {
        scope_4894.string(var_4895);
    }
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("HostId");
    if let Some(var_4897) = &input.host_id {
        scope_4896.string(var_4897);
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("InstanceId");
    if let Some(var_4899) = &input.instance_id {
        scope_4898.string(var_4899);
    }
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("Tenancy");
    if let Some(var_4901) = &input.tenancy {
        scope_4900.string(var_4901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("PartitionNumber");
    if let Some(var_4903) = &input.partition_number {
        scope_4902.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4903).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4905) = &input.host_resource_group_arn {
        scope_4904.string(var_4905);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("DryRun");
    if let Some(var_4907) = &input.dry_run {
        scope_4906.boolean(*var_4907);
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("IpamId");
    if let Some(var_4909) = &input.ipam_id {
        scope_4908.string(var_4909);
    }
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("Description");
    if let Some(var_4911) = &input.description {
        scope_4910.string(var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("AddOperatingRegion");
    if let Some(var_4913) = &input.add_operating_regions {
        let mut list_4915 = scope_4912.start_list(true, None);
        for item_4914 in var_4913 {
            #[allow(unused_mut)]
            let mut entry_4916 = list_4915.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4916, item_4914,
            )?;
        }
        list_4915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4918) = &input.remove_operating_regions {
        let mut list_4920 = scope_4917.start_list(true, None);
        for item_4919 in var_4918 {
            #[allow(unused_mut)]
            let mut entry_4921 = list_4920.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4921, item_4919,
            )?;
        }
        list_4920.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("DryRun");
    if let Some(var_4923) = &input.dry_run {
        scope_4922.boolean(*var_4923);
    }
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("IpamPoolId");
    if let Some(var_4925) = &input.ipam_pool_id {
        scope_4924.string(var_4925);
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("Description");
    if let Some(var_4927) = &input.description {
        scope_4926.string(var_4927);
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("AutoImport");
    if let Some(var_4929) = &input.auto_import {
        scope_4928.boolean(*var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4931) = &input.allocation_min_netmask_length {
        scope_4930.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4931).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4933) = &input.allocation_max_netmask_length {
        scope_4932.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4933).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4935) = &input.allocation_default_netmask_length {
        scope_4934.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4937) = &input.clear_allocation_default_netmask_length {
        scope_4936.boolean(*var_4937);
    }
    #[allow(unused_mut)]
    let mut scope_4938 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4939) = &input.add_allocation_resource_tags {
        let mut list_4941 = scope_4938.start_list(true, Some("item"));
        for item_4940 in var_4939 {
            #[allow(unused_mut)]
            let mut entry_4942 = list_4941.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4942, item_4940,
            )?;
        }
        list_4941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4944) = &input.remove_allocation_resource_tags {
        let mut list_4946 = scope_4943.start_list(true, Some("item"));
        for item_4945 in var_4944 {
            #[allow(unused_mut)]
            let mut entry_4947 = list_4946.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4947, item_4945,
            )?;
        }
        list_4946.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4948 = writer.prefix("DryRun");
    if let Some(var_4949) = &input.dry_run {
        scope_4948.boolean(*var_4949);
    }
    #[allow(unused_mut)]
    let mut scope_4950 = writer.prefix("ResourceId");
    if let Some(var_4951) = &input.resource_id {
        scope_4950.string(var_4951);
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("ResourceCidr");
    if let Some(var_4953) = &input.resource_cidr {
        scope_4952.string(var_4953);
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("ResourceRegion");
    if let Some(var_4955) = &input.resource_region {
        scope_4954.string(var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4957) = &input.current_ipam_scope_id {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4959) = &input.destination_ipam_scope_id {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("Monitored");
    if let Some(var_4961) = &input.monitored {
        scope_4960.boolean(*var_4961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("DryRun");
    if let Some(var_4963) = &input.dry_run {
        scope_4962.boolean(*var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("IpamScopeId");
    if let Some(var_4965) = &input.ipam_scope_id {
        scope_4964.string(var_4965);
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("Description");
    if let Some(var_4967) = &input.description {
        scope_4966.string(var_4967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("DryRun");
    if let Some(var_4969) = &input.dry_run {
        scope_4968.boolean(*var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("ClientToken");
    if let Some(var_4971) = &input.client_token {
        scope_4970.string(var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("LaunchTemplateId");
    if let Some(var_4973) = &input.launch_template_id {
        scope_4972.string(var_4973);
    }
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("LaunchTemplateName");
    if let Some(var_4975) = &input.launch_template_name {
        scope_4974.string(var_4975);
    }
    #[allow(unused_mut)]
    let mut scope_4976 = writer.prefix("SetDefaultVersion");
    if let Some(var_4977) = &input.default_version {
        scope_4976.string(var_4977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4978 = writer.prefix("DryRun");
    if let Some(var_4979) = &input.dry_run {
        scope_4978.boolean(*var_4979);
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("PrefixListId");
    if let Some(var_4981) = &input.prefix_list_id {
        scope_4980.string(var_4981);
    }
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("CurrentVersion");
    if let Some(var_4983) = &input.current_version {
        scope_4982.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4983).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4984 = writer.prefix("PrefixListName");
    if let Some(var_4985) = &input.prefix_list_name {
        scope_4984.string(var_4985);
    }
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("AddEntry");
    if let Some(var_4987) = &input.add_entries {
        let mut list_4989 = scope_4986.start_list(true, None);
        for item_4988 in var_4987 {
            #[allow(unused_mut)]
            let mut entry_4990 = list_4989.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4990, item_4988,
            )?;
        }
        list_4989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("RemoveEntry");
    if let Some(var_4992) = &input.remove_entries {
        let mut list_4994 = scope_4991.start_list(true, None);
        for item_4993 in var_4992 {
            #[allow(unused_mut)]
            let mut entry_4995 = list_4994.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4995, item_4993,
            )?;
        }
        list_4994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("MaxEntries");
    if let Some(var_4997) = &input.max_entries {
        scope_4996.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4997).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4998 = writer.prefix("Attachment");
    if let Some(var_4999) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4998, var_4999,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5000 = writer.prefix("Description");
    if let Some(var_5001) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5000, var_5001)?;
    }
    #[allow(unused_mut)]
    let mut scope_5002 = writer.prefix("DryRun");
    if let Some(var_5003) = &input.dry_run {
        scope_5002.boolean(*var_5003);
    }
    #[allow(unused_mut)]
    let mut scope_5004 = writer.prefix("SecurityGroupId");
    if let Some(var_5005) = &input.groups {
        let mut list_5007 = scope_5004.start_list(true, Some("SecurityGroupId"));
        for item_5006 in var_5005 {
            #[allow(unused_mut)]
            let mut entry_5008 = list_5007.entry();
            entry_5008.string(item_5006);
        }
        list_5007.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5010) = &input.network_interface_id {
        scope_5009.string(var_5010);
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("SourceDestCheck");
    if let Some(var_5012) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5011, var_5012,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("DryRun");
    if let Some(var_5014) = &input.dry_run {
        scope_5013.boolean(*var_5014);
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("InstanceId");
    if let Some(var_5016) = &input.instance_id {
        scope_5015.string(var_5016);
    }
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5018) = &input.private_dns_hostname_type {
        scope_5017.string(var_5018.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5020) = &input.enable_resource_name_dns_a_record {
        scope_5019.boolean(*var_5020);
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5022) = &input.enable_resource_name_dns_aaaa_record {
        scope_5021.boolean(*var_5022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("ReservedInstancesId");
    if let Some(var_5024) = &input.reserved_instances_ids {
        let mut list_5026 = scope_5023.start_list(true, Some("ReservedInstancesId"));
        for item_5025 in var_5024 {
            #[allow(unused_mut)]
            let mut entry_5027 = list_5026.entry();
            entry_5027.string(item_5025);
        }
        list_5026.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("ClientToken");
    if let Some(var_5029) = &input.client_token {
        scope_5028.string(var_5029);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5031) = &input.target_configurations {
        let mut list_5033 = scope_5030.start_list(true, Some("item"));
        for item_5032 in var_5031 {
            #[allow(unused_mut)]
            let mut entry_5034 = list_5033.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5034, item_5032,
            )?;
        }
        list_5033.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("GroupId");
    if let Some(var_5036) = &input.group_id {
        scope_5035.string(var_5036);
    }
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("SecurityGroupRule");
    if let Some(var_5038) = &input.security_group_rules {
        let mut list_5040 = scope_5037.start_list(true, Some("item"));
        for item_5039 in var_5038 {
            #[allow(unused_mut)]
            let mut entry_5041 = list_5040.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5041, item_5039,
            )?;
        }
        list_5040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("DryRun");
    if let Some(var_5043) = &input.dry_run {
        scope_5042.boolean(*var_5043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5044 = writer.prefix("Attribute");
    if let Some(var_5045) = &input.attribute {
        scope_5044.string(var_5045.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("CreateVolumePermission");
    if let Some(var_5047) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5046, var_5047,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("UserGroup");
    if let Some(var_5049) = &input.group_names {
        let mut list_5051 = scope_5048.start_list(true, Some("GroupName"));
        for item_5050 in var_5049 {
            #[allow(unused_mut)]
            let mut entry_5052 = list_5051.entry();
            entry_5052.string(item_5050);
        }
        list_5051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("OperationType");
    if let Some(var_5054) = &input.operation_type {
        scope_5053.string(var_5054.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("SnapshotId");
    if let Some(var_5056) = &input.snapshot_id {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("UserId");
    if let Some(var_5058) = &input.user_ids {
        let mut list_5060 = scope_5057.start_list(true, Some("UserId"));
        for item_5059 in var_5058 {
            #[allow(unused_mut)]
            let mut entry_5061 = list_5060.entry();
            entry_5061.string(item_5059);
        }
        list_5060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("DryRun");
    if let Some(var_5063) = &input.dry_run {
        scope_5062.boolean(*var_5063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5064 = writer.prefix("SnapshotId");
    if let Some(var_5065) = &input.snapshot_id {
        scope_5064.string(var_5065);
    }
    #[allow(unused_mut)]
    let mut scope_5066 = writer.prefix("StorageTier");
    if let Some(var_5067) = &input.storage_tier {
        scope_5066.string(var_5067.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5068 = writer.prefix("DryRun");
    if let Some(var_5069) = &input.dry_run {
        scope_5068.boolean(*var_5069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5070 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5071) = &input.excess_capacity_termination_policy {
        scope_5070.string(var_5071.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5072 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5073) = &input.launch_template_configs {
        let mut list_5075 = scope_5072.start_list(true, Some("item"));
        for item_5074 in var_5073 {
            #[allow(unused_mut)]
            let mut entry_5076 = list_5075.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5076, item_5074,
            )?;
        }
        list_5075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5078) = &input.spot_fleet_request_id {
        scope_5077.string(var_5078);
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("TargetCapacity");
    if let Some(var_5080) = &input.target_capacity {
        scope_5079.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5080).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5082) = &input.on_demand_target_capacity {
        scope_5081.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5082).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("Context");
    if let Some(var_5084) = &input.context {
        scope_5083.string(var_5084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5086) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5085, var_5086,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5088) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5087, var_5088,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("SubnetId");
    if let Some(var_5090) = &input.subnet_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5092) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5091, var_5092,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5094) = &input.customer_owned_ipv4_pool {
        scope_5093.string(var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("EnableDns64");
    if let Some(var_5096) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5095, var_5096,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5098) = &input.private_dns_hostname_type_on_launch {
        scope_5097.string(var_5098.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5100) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5099, var_5100,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5102) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5101, var_5102,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5104) = &input.enable_lni_at_device_index {
        scope_5103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5106) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5105, var_5106,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5108) = &input.traffic_mirror_filter_id {
        scope_5107.string(var_5108);
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("AddNetworkService");
    if let Some(var_5110) = &input.add_network_services {
        let mut list_5112 = scope_5109.start_list(true, Some("item"));
        for item_5111 in var_5110 {
            #[allow(unused_mut)]
            let mut entry_5113 = list_5112.entry();
            entry_5113.string(item_5111.as_str());
        }
        list_5112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("RemoveNetworkService");
    if let Some(var_5115) = &input.remove_network_services {
        let mut list_5117 = scope_5114.start_list(true, Some("item"));
        for item_5116 in var_5115 {
            #[allow(unused_mut)]
            let mut entry_5118 = list_5117.entry();
            entry_5118.string(item_5116.as_str());
        }
        list_5117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5119 = writer.prefix("DryRun");
    if let Some(var_5120) = &input.dry_run {
        scope_5119.boolean(*var_5120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5121 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5122) = &input.traffic_mirror_filter_rule_id {
        scope_5121.string(var_5122);
    }
    #[allow(unused_mut)]
    let mut scope_5123 = writer.prefix("TrafficDirection");
    if let Some(var_5124) = &input.traffic_direction {
        scope_5123.string(var_5124.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5125 = writer.prefix("RuleNumber");
    if let Some(var_5126) = &input.rule_number {
        scope_5125.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("RuleAction");
    if let Some(var_5128) = &input.rule_action {
        scope_5127.string(var_5128.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("DestinationPortRange");
    if let Some(var_5130) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5129, var_5130,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("SourcePortRange");
    if let Some(var_5132) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5131, var_5132,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("Protocol");
    if let Some(var_5134) = &input.protocol {
        scope_5133.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5135 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5136) = &input.destination_cidr_block {
        scope_5135.string(var_5136);
    }
    #[allow(unused_mut)]
    let mut scope_5137 = writer.prefix("SourceCidrBlock");
    if let Some(var_5138) = &input.source_cidr_block {
        scope_5137.string(var_5138);
    }
    #[allow(unused_mut)]
    let mut scope_5139 = writer.prefix("Description");
    if let Some(var_5140) = &input.description {
        scope_5139.string(var_5140);
    }
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("RemoveField");
    if let Some(var_5142) = &input.remove_fields {
        let mut list_5144 = scope_5141.start_list(true, None);
        for item_5143 in var_5142 {
            #[allow(unused_mut)]
            let mut entry_5145 = list_5144.entry();
            entry_5145.string(item_5143.as_str());
        }
        list_5144.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("DryRun");
    if let Some(var_5147) = &input.dry_run {
        scope_5146.boolean(*var_5147);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5149) = &input.traffic_mirror_session_id {
        scope_5148.string(var_5149);
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5151) = &input.traffic_mirror_target_id {
        scope_5150.string(var_5151);
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5153) = &input.traffic_mirror_filter_id {
        scope_5152.string(var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("PacketLength");
    if let Some(var_5155) = &input.packet_length {
        scope_5154.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5155).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("SessionNumber");
    if let Some(var_5157) = &input.session_number {
        scope_5156.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5157).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("VirtualNetworkId");
    if let Some(var_5159) = &input.virtual_network_id {
        scope_5158.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("Description");
    if let Some(var_5161) = &input.description {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("RemoveField");
    if let Some(var_5163) = &input.remove_fields {
        let mut list_5165 = scope_5162.start_list(true, None);
        for item_5164 in var_5163 {
            #[allow(unused_mut)]
            let mut entry_5166 = list_5165.entry();
            entry_5166.string(item_5164.as_str());
        }
        list_5165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("DryRun");
    if let Some(var_5168) = &input.dry_run {
        scope_5167.boolean(*var_5168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("TransitGatewayId");
    if let Some(var_5170) = &input.transit_gateway_id {
        scope_5169.string(var_5170);
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("Description");
    if let Some(var_5172) = &input.description {
        scope_5171.string(var_5172);
    }
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("Options");
    if let Some(var_5174) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5173, var_5174,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("DryRun");
    if let Some(var_5176) = &input.dry_run {
        scope_5175.boolean(*var_5176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5178) = &input.transit_gateway_route_table_id {
        scope_5177.string(var_5178);
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("PrefixListId");
    if let Some(var_5180) = &input.prefix_list_id {
        scope_5179.string(var_5180);
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5182) = &input.transit_gateway_attachment_id {
        scope_5181.string(var_5182);
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("Blackhole");
    if let Some(var_5184) = &input.blackhole {
        scope_5183.boolean(*var_5184);
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("DryRun");
    if let Some(var_5186) = &input.dry_run {
        scope_5185.boolean(*var_5186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5188) = &input.transit_gateway_attachment_id {
        scope_5187.string(var_5188);
    }
    #[allow(unused_mut)]
    let mut scope_5189 = writer.prefix("AddSubnetIds");
    if let Some(var_5190) = &input.add_subnet_ids {
        let mut list_5192 = scope_5189.start_list(true, Some("item"));
        for item_5191 in var_5190 {
            #[allow(unused_mut)]
            let mut entry_5193 = list_5192.entry();
            entry_5193.string(item_5191);
        }
        list_5192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5195) = &input.remove_subnet_ids {
        let mut list_5197 = scope_5194.start_list(true, Some("item"));
        for item_5196 in var_5195 {
            #[allow(unused_mut)]
            let mut entry_5198 = list_5197.entry();
            entry_5198.string(item_5196);
        }
        list_5197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5199 = writer.prefix("Options");
    if let Some(var_5200) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5199, var_5200)?;
    }
    #[allow(unused_mut)]
    let mut scope_5201 = writer.prefix("DryRun");
    if let Some(var_5202) = &input.dry_run {
        scope_5201.boolean(*var_5202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5203 = writer.prefix("DryRun");
    if let Some(var_5204) = &input.dry_run {
        scope_5203.boolean(*var_5204);
    }
    #[allow(unused_mut)]
    let mut scope_5205 = writer.prefix("VolumeId");
    if let Some(var_5206) = &input.volume_id {
        scope_5205.string(var_5206);
    }
    #[allow(unused_mut)]
    let mut scope_5207 = writer.prefix("Size");
    if let Some(var_5208) = &input.size {
        scope_5207.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("VolumeType");
    if let Some(var_5210) = &input.volume_type {
        scope_5209.string(var_5210.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("Iops");
    if let Some(var_5212) = &input.iops {
        scope_5211.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5212).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("Throughput");
    if let Some(var_5214) = &input.throughput {
        scope_5213.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5214).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5216) = &input.multi_attach_enabled {
        scope_5215.boolean(*var_5216);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("AutoEnableIO");
    if let Some(var_5218) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5217, var_5218,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("VolumeId");
    if let Some(var_5220) = &input.volume_id {
        scope_5219.string(var_5220);
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("DryRun");
    if let Some(var_5222) = &input.dry_run {
        scope_5221.boolean(*var_5222);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5224) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5223, var_5224,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5225 = writer.prefix("EnableDnsSupport");
    if let Some(var_5226) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5225, var_5226,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5227 = writer.prefix("VpcId");
    if let Some(var_5228) = &input.vpc_id {
        scope_5227.string(var_5228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5229 = writer.prefix("DryRun");
    if let Some(var_5230) = &input.dry_run {
        scope_5229.boolean(*var_5230);
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("VpcEndpointId");
    if let Some(var_5232) = &input.vpc_endpoint_id {
        scope_5231.string(var_5232);
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("ResetPolicy");
    if let Some(var_5234) = &input.reset_policy {
        scope_5233.boolean(*var_5234);
    }
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("PolicyDocument");
    if let Some(var_5236) = &input.policy_document {
        scope_5235.string(var_5236);
    }
    #[allow(unused_mut)]
    let mut scope_5237 = writer.prefix("AddRouteTableId");
    if let Some(var_5238) = &input.add_route_table_ids {
        let mut list_5240 = scope_5237.start_list(true, Some("item"));
        for item_5239 in var_5238 {
            #[allow(unused_mut)]
            let mut entry_5241 = list_5240.entry();
            entry_5241.string(item_5239);
        }
        list_5240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5243) = &input.remove_route_table_ids {
        let mut list_5245 = scope_5242.start_list(true, Some("item"));
        for item_5244 in var_5243 {
            #[allow(unused_mut)]
            let mut entry_5246 = list_5245.entry();
            entry_5246.string(item_5244);
        }
        list_5245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5247 = writer.prefix("AddSubnetId");
    if let Some(var_5248) = &input.add_subnet_ids {
        let mut list_5250 = scope_5247.start_list(true, Some("item"));
        for item_5249 in var_5248 {
            #[allow(unused_mut)]
            let mut entry_5251 = list_5250.entry();
            entry_5251.string(item_5249);
        }
        list_5250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("RemoveSubnetId");
    if let Some(var_5253) = &input.remove_subnet_ids {
        let mut list_5255 = scope_5252.start_list(true, Some("item"));
        for item_5254 in var_5253 {
            #[allow(unused_mut)]
            let mut entry_5256 = list_5255.entry();
            entry_5256.string(item_5254);
        }
        list_5255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5257 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5258) = &input.add_security_group_ids {
        let mut list_5260 = scope_5257.start_list(true, Some("item"));
        for item_5259 in var_5258 {
            #[allow(unused_mut)]
            let mut entry_5261 = list_5260.entry();
            entry_5261.string(item_5259);
        }
        list_5260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5263) = &input.remove_security_group_ids {
        let mut list_5265 = scope_5262.start_list(true, Some("item"));
        for item_5264 in var_5263 {
            #[allow(unused_mut)]
            let mut entry_5266 = list_5265.entry();
            entry_5266.string(item_5264);
        }
        list_5265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5268) = &input.private_dns_enabled {
        scope_5267.boolean(*var_5268);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("DryRun");
    if let Some(var_5270) = &input.dry_run {
        scope_5269.boolean(*var_5270);
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5272) = &input.connection_notification_id {
        scope_5271.string(var_5272);
    }
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5274) = &input.connection_notification_arn {
        scope_5273.string(var_5274);
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("ConnectionEvents");
    if let Some(var_5276) = &input.connection_events {
        let mut list_5278 = scope_5275.start_list(true, Some("item"));
        for item_5277 in var_5276 {
            #[allow(unused_mut)]
            let mut entry_5279 = list_5278.entry();
            entry_5279.string(item_5277);
        }
        list_5278.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("DryRun");
    if let Some(var_5281) = &input.dry_run {
        scope_5280.boolean(*var_5281);
    }
    #[allow(unused_mut)]
    let mut scope_5282 = writer.prefix("ServiceId");
    if let Some(var_5283) = &input.service_id {
        scope_5282.string(var_5283);
    }
    #[allow(unused_mut)]
    let mut scope_5284 = writer.prefix("PrivateDnsName");
    if let Some(var_5285) = &input.private_dns_name {
        scope_5284.string(var_5285);
    }
    #[allow(unused_mut)]
    let mut scope_5286 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5287) = &input.remove_private_dns_name {
        scope_5286.boolean(*var_5287);
    }
    #[allow(unused_mut)]
    let mut scope_5288 = writer.prefix("AcceptanceRequired");
    if let Some(var_5289) = &input.acceptance_required {
        scope_5288.boolean(*var_5289);
    }
    #[allow(unused_mut)]
    let mut scope_5290 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5291) = &input.add_network_load_balancer_arns {
        let mut list_5293 = scope_5290.start_list(true, Some("item"));
        for item_5292 in var_5291 {
            #[allow(unused_mut)]
            let mut entry_5294 = list_5293.entry();
            entry_5294.string(item_5292);
        }
        list_5293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5295 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5296) = &input.remove_network_load_balancer_arns {
        let mut list_5298 = scope_5295.start_list(true, Some("item"));
        for item_5297 in var_5296 {
            #[allow(unused_mut)]
            let mut entry_5299 = list_5298.entry();
            entry_5299.string(item_5297);
        }
        list_5298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5301) = &input.add_gateway_load_balancer_arns {
        let mut list_5303 = scope_5300.start_list(true, Some("item"));
        for item_5302 in var_5301 {
            #[allow(unused_mut)]
            let mut entry_5304 = list_5303.entry();
            entry_5304.string(item_5302);
        }
        list_5303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5305 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5306) = &input.remove_gateway_load_balancer_arns {
        let mut list_5308 = scope_5305.start_list(true, Some("item"));
        for item_5307 in var_5306 {
            #[allow(unused_mut)]
            let mut entry_5309 = list_5308.entry();
            entry_5309.string(item_5307);
        }
        list_5308.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("DryRun");
    if let Some(var_5311) = &input.dry_run {
        scope_5310.boolean(*var_5311);
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("ServiceId");
    if let Some(var_5313) = &input.service_id {
        scope_5312.string(var_5313);
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("PayerResponsibility");
    if let Some(var_5315) = &input.payer_responsibility {
        scope_5314.string(var_5315.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5316 = writer.prefix("DryRun");
    if let Some(var_5317) = &input.dry_run {
        scope_5316.boolean(*var_5317);
    }
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("ServiceId");
    if let Some(var_5319) = &input.service_id {
        scope_5318.string(var_5319);
    }
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5321) = &input.add_allowed_principals {
        let mut list_5323 = scope_5320.start_list(true, Some("item"));
        for item_5322 in var_5321 {
            #[allow(unused_mut)]
            let mut entry_5324 = list_5323.entry();
            entry_5324.string(item_5322);
        }
        list_5323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5325 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5326) = &input.remove_allowed_principals {
        let mut list_5328 = scope_5325.start_list(true, Some("item"));
        for item_5327 in var_5326 {
            #[allow(unused_mut)]
            let mut entry_5329 = list_5328.entry();
            entry_5329.string(item_5327);
        }
        list_5328.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5331) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5330, var_5331,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("DryRun");
    if let Some(var_5333) = &input.dry_run {
        scope_5332.boolean(*var_5333);
    }
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5335) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5334, var_5335,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5337) = &input.vpc_peering_connection_id {
        scope_5336.string(var_5337);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("VpcId");
    if let Some(var_5339) = &input.vpc_id {
        scope_5338.string(var_5339);
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("InstanceTenancy");
    if let Some(var_5341) = &input.instance_tenancy {
        scope_5340.string(var_5341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("DryRun");
    if let Some(var_5343) = &input.dry_run {
        scope_5342.boolean(*var_5343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("VpnConnectionId");
    if let Some(var_5345) = &input.vpn_connection_id {
        scope_5344.string(var_5345);
    }
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("TransitGatewayId");
    if let Some(var_5347) = &input.transit_gateway_id {
        scope_5346.string(var_5347);
    }
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("CustomerGatewayId");
    if let Some(var_5349) = &input.customer_gateway_id {
        scope_5348.string(var_5349);
    }
    #[allow(unused_mut)]
    let mut scope_5350 = writer.prefix("VpnGatewayId");
    if let Some(var_5351) = &input.vpn_gateway_id {
        scope_5350.string(var_5351);
    }
    #[allow(unused_mut)]
    let mut scope_5352 = writer.prefix("DryRun");
    if let Some(var_5353) = &input.dry_run {
        scope_5352.boolean(*var_5353);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("VpnConnectionId");
    if let Some(var_5355) = &input.vpn_connection_id {
        scope_5354.string(var_5355);
    }
    #[allow(unused_mut)]
    let mut scope_5356 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5357) = &input.local_ipv4_network_cidr {
        scope_5356.string(var_5357);
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5359) = &input.remote_ipv4_network_cidr {
        scope_5358.string(var_5359);
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5361) = &input.local_ipv6_network_cidr {
        scope_5360.string(var_5361);
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5363) = &input.remote_ipv6_network_cidr {
        scope_5362.string(var_5363);
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("DryRun");
    if let Some(var_5365) = &input.dry_run {
        scope_5364.boolean(*var_5365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("VpnConnectionId");
    if let Some(var_5367) = &input.vpn_connection_id {
        scope_5366.string(var_5367);
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5369) = &input.vpn_tunnel_outside_ip_address {
        scope_5368.string(var_5369);
    }
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("DryRun");
    if let Some(var_5371) = &input.dry_run {
        scope_5370.boolean(*var_5371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("VpnConnectionId");
    if let Some(var_5373) = &input.vpn_connection_id {
        scope_5372.string(var_5373);
    }
    #[allow(unused_mut)]
    let mut scope_5374 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5375) = &input.vpn_tunnel_outside_ip_address {
        scope_5374.string(var_5375);
    }
    #[allow(unused_mut)]
    let mut scope_5376 = writer.prefix("TunnelOptions");
    if let Some(var_5377) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5376, var_5377,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5378 = writer.prefix("DryRun");
    if let Some(var_5379) = &input.dry_run {
        scope_5378.boolean(*var_5379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5380 = writer.prefix("InstanceId");
    if let Some(var_5381) = &input.instance_ids {
        let mut list_5383 = scope_5380.start_list(true, Some("InstanceId"));
        for item_5382 in var_5381 {
            #[allow(unused_mut)]
            let mut entry_5384 = list_5383.entry();
            entry_5384.string(item_5382);
        }
        list_5383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("DryRun");
    if let Some(var_5386) = &input.dry_run {
        scope_5385.boolean(*var_5386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("DryRun");
    if let Some(var_5388) = &input.dry_run {
        scope_5387.boolean(*var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("PublicIp");
    if let Some(var_5390) = &input.public_ip {
        scope_5389.string(var_5390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("DryRun");
    if let Some(var_5392) = &input.dry_run {
        scope_5391.boolean(*var_5392);
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("Cidr");
    if let Some(var_5394) = &input.cidr {
        scope_5393.string(var_5394);
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("IpamPoolId");
    if let Some(var_5396) = &input.ipam_pool_id {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("IpamPoolOwner");
    if let Some(var_5398) = &input.ipam_pool_owner {
        scope_5397.string(var_5398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("Cidr");
    if let Some(var_5400) = &input.cidr {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5402) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5401, var_5402,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5404) = &input.publicly_advertisable {
        scope_5403.boolean(*var_5404);
    }
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("Description");
    if let Some(var_5406) = &input.description {
        scope_5405.string(var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("DryRun");
    if let Some(var_5408) = &input.dry_run {
        scope_5407.boolean(*var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("PoolTagSpecification");
    if let Some(var_5410) = &input.pool_tag_specifications {
        let mut list_5412 = scope_5409.start_list(true, Some("item"));
        for item_5411 in var_5410 {
            #[allow(unused_mut)]
            let mut entry_5413 = list_5412.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5413, item_5411,
            )?;
        }
        list_5412.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5414 = writer.prefix("MultiRegion");
    if let Some(var_5415) = &input.multi_region {
        scope_5414.boolean(*var_5415);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5416 = writer.prefix("DryRun");
    if let Some(var_5417) = &input.dry_run {
        scope_5416.boolean(*var_5417);
    }
    #[allow(unused_mut)]
    let mut scope_5418 = writer.prefix("IpamPoolId");
    if let Some(var_5419) = &input.ipam_pool_id {
        scope_5418.string(var_5419);
    }
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("Cidr");
    if let Some(var_5421) = &input.cidr {
        scope_5420.string(var_5421);
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5423) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5422, var_5423,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("DryRun");
    if let Some(var_5425) = &input.dry_run {
        scope_5424.boolean(*var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("IpamPoolId");
    if let Some(var_5427) = &input.ipam_pool_id {
        scope_5426.string(var_5427);
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("PoolId");
    if let Some(var_5429) = &input.pool_id {
        scope_5428.string(var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("NetmaskLength");
    if let Some(var_5431) = &input.netmask_length {
        scope_5430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5431).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("ClientToken");
    if let Some(var_5433) = &input.client_token {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("CurrencyCode");
    if let Some(var_5435) = &input.currency_code {
        scope_5434.string(var_5435.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("HostIdSet");
    if let Some(var_5437) = &input.host_id_set {
        let mut list_5439 = scope_5436.start_list(true, Some("item"));
        for item_5438 in var_5437 {
            #[allow(unused_mut)]
            let mut entry_5440 = list_5439.entry();
            entry_5440.string(item_5438);
        }
        list_5439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("LimitPrice");
    if let Some(var_5442) = &input.limit_price {
        scope_5441.string(var_5442);
    }
    #[allow(unused_mut)]
    let mut scope_5443 = writer.prefix("OfferingId");
    if let Some(var_5444) = &input.offering_id {
        scope_5443.string(var_5444);
    }
    #[allow(unused_mut)]
    let mut scope_5445 = writer.prefix("TagSpecification");
    if let Some(var_5446) = &input.tag_specifications {
        let mut list_5448 = scope_5445.start_list(true, Some("item"));
        for item_5447 in var_5446 {
            #[allow(unused_mut)]
            let mut entry_5449 = list_5448.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5449, item_5447,
            )?;
        }
        list_5448.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5450 = writer.prefix("InstanceCount");
    if let Some(var_5451) = &input.instance_count {
        scope_5450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5452 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5453) = &input.reserved_instances_offering_id {
        scope_5452.string(var_5453);
    }
    #[allow(unused_mut)]
    let mut scope_5454 = writer.prefix("DryRun");
    if let Some(var_5455) = &input.dry_run {
        scope_5454.boolean(*var_5455);
    }
    #[allow(unused_mut)]
    let mut scope_5456 = writer.prefix("LimitPrice");
    if let Some(var_5457) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5456, var_5457,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5458 = writer.prefix("PurchaseTime");
    if let Some(var_5459) = &input.purchase_time {
        scope_5458.date_time(var_5459, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5460 = writer.prefix("ClientToken");
    if let Some(var_5461) = &input.client_token {
        scope_5460.string(var_5461);
    }
    #[allow(unused_mut)]
    let mut scope_5462 = writer.prefix("DryRun");
    if let Some(var_5463) = &input.dry_run {
        scope_5462.boolean(*var_5463);
    }
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("PurchaseRequest");
    if let Some(var_5465) = &input.purchase_requests {
        let mut list_5467 = scope_5464.start_list(true, Some("PurchaseRequest"));
        for item_5466 in var_5465 {
            #[allow(unused_mut)]
            let mut entry_5468 = list_5467.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5468, item_5466,
            )?;
        }
        list_5467.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("InstanceId");
    if let Some(var_5470) = &input.instance_ids {
        let mut list_5472 = scope_5469.start_list(true, Some("InstanceId"));
        for item_5471 in var_5470 {
            #[allow(unused_mut)]
            let mut entry_5473 = list_5472.entry();
            entry_5473.string(item_5471);
        }
        list_5472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5474 = writer.prefix("DryRun");
    if let Some(var_5475) = &input.dry_run {
        scope_5474.boolean(*var_5475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5476 = writer.prefix("ImageLocation");
    if let Some(var_5477) = &input.image_location {
        scope_5476.string(var_5477);
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("Architecture");
    if let Some(var_5479) = &input.architecture {
        scope_5478.string(var_5479.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5481) = &input.block_device_mappings {
        let mut list_5483 = scope_5480.start_list(true, Some("BlockDeviceMapping"));
        for item_5482 in var_5481 {
            #[allow(unused_mut)]
            let mut entry_5484 = list_5483.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5484, item_5482,
            )?;
        }
        list_5483.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("Description");
    if let Some(var_5486) = &input.description {
        scope_5485.string(var_5486);
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("DryRun");
    if let Some(var_5488) = &input.dry_run {
        scope_5487.boolean(*var_5488);
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("EnaSupport");
    if let Some(var_5490) = &input.ena_support {
        scope_5489.boolean(*var_5490);
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("KernelId");
    if let Some(var_5492) = &input.kernel_id {
        scope_5491.string(var_5492);
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("Name");
    if let Some(var_5494) = &input.name {
        scope_5493.string(var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("BillingProduct");
    if let Some(var_5496) = &input.billing_products {
        let mut list_5498 = scope_5495.start_list(true, Some("item"));
        for item_5497 in var_5496 {
            #[allow(unused_mut)]
            let mut entry_5499 = list_5498.entry();
            entry_5499.string(item_5497);
        }
        list_5498.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5500 = writer.prefix("RamdiskId");
    if let Some(var_5501) = &input.ramdisk_id {
        scope_5500.string(var_5501);
    }
    #[allow(unused_mut)]
    let mut scope_5502 = writer.prefix("RootDeviceName");
    if let Some(var_5503) = &input.root_device_name {
        scope_5502.string(var_5503);
    }
    #[allow(unused_mut)]
    let mut scope_5504 = writer.prefix("SriovNetSupport");
    if let Some(var_5505) = &input.sriov_net_support {
        scope_5504.string(var_5505);
    }
    #[allow(unused_mut)]
    let mut scope_5506 = writer.prefix("VirtualizationType");
    if let Some(var_5507) = &input.virtualization_type {
        scope_5506.string(var_5507);
    }
    #[allow(unused_mut)]
    let mut scope_5508 = writer.prefix("BootMode");
    if let Some(var_5509) = &input.boot_mode {
        scope_5508.string(var_5509.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5510 = writer.prefix("DryRun");
    if let Some(var_5511) = &input.dry_run {
        scope_5510.boolean(*var_5511);
    }
    #[allow(unused_mut)]
    let mut scope_5512 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5513) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5512, var_5513,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5514 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5515) = &input.transit_gateway_multicast_domain_id {
        scope_5514.string(var_5515);
    }
    #[allow(unused_mut)]
    let mut scope_5516 = writer.prefix("GroupIpAddress");
    if let Some(var_5517) = &input.group_ip_address {
        scope_5516.string(var_5517);
    }
    #[allow(unused_mut)]
    let mut scope_5518 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5519) = &input.network_interface_ids {
        let mut list_5521 = scope_5518.start_list(true, Some("item"));
        for item_5520 in var_5519 {
            #[allow(unused_mut)]
            let mut entry_5522 = list_5521.entry();
            entry_5522.string(item_5520);
        }
        list_5521.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5523 = writer.prefix("DryRun");
    if let Some(var_5524) = &input.dry_run {
        scope_5523.boolean(*var_5524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5525 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5526) = &input.transit_gateway_multicast_domain_id {
        scope_5525.string(var_5526);
    }
    #[allow(unused_mut)]
    let mut scope_5527 = writer.prefix("GroupIpAddress");
    if let Some(var_5528) = &input.group_ip_address {
        scope_5527.string(var_5528);
    }
    #[allow(unused_mut)]
    let mut scope_5529 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5530) = &input.network_interface_ids {
        let mut list_5532 = scope_5529.start_list(true, Some("item"));
        for item_5531 in var_5530 {
            #[allow(unused_mut)]
            let mut entry_5533 = list_5532.entry();
            entry_5533.string(item_5531);
        }
        list_5532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("DryRun");
    if let Some(var_5535) = &input.dry_run {
        scope_5534.boolean(*var_5535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5537) = &input.transit_gateway_multicast_domain_id {
        scope_5536.string(var_5537);
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5539) = &input.transit_gateway_attachment_id {
        scope_5538.string(var_5539);
    }
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("SubnetIds");
    if let Some(var_5541) = &input.subnet_ids {
        let mut list_5543 = scope_5540.start_list(true, Some("item"));
        for item_5542 in var_5541 {
            #[allow(unused_mut)]
            let mut entry_5544 = list_5543.entry();
            entry_5544.string(item_5542);
        }
        list_5543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("DryRun");
    if let Some(var_5546) = &input.dry_run {
        scope_5545.boolean(*var_5546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5548) = &input.transit_gateway_attachment_id {
        scope_5547.string(var_5548);
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("DryRun");
    if let Some(var_5550) = &input.dry_run {
        scope_5549.boolean(*var_5550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5552) = &input.transit_gateway_attachment_id {
        scope_5551.string(var_5552);
    }
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("DryRun");
    if let Some(var_5554) = &input.dry_run {
        scope_5553.boolean(*var_5554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("DryRun");
    if let Some(var_5556) = &input.dry_run {
        scope_5555.boolean(*var_5556);
    }
    #[allow(unused_mut)]
    let mut scope_5557 = writer.prefix("ServiceId");
    if let Some(var_5558) = &input.service_id {
        scope_5557.string(var_5558);
    }
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("VpcEndpointId");
    if let Some(var_5560) = &input.vpc_endpoint_ids {
        let mut list_5562 = scope_5559.start_list(true, Some("item"));
        for item_5561 in var_5560 {
            #[allow(unused_mut)]
            let mut entry_5563 = list_5562.entry();
            entry_5563.string(item_5561);
        }
        list_5562.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("DryRun");
    if let Some(var_5565) = &input.dry_run {
        scope_5564.boolean(*var_5565);
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5567) = &input.vpc_peering_connection_id {
        scope_5566.string(var_5567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("AllocationId");
    if let Some(var_5569) = &input.allocation_id {
        scope_5568.string(var_5569);
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("PublicIp");
    if let Some(var_5571) = &input.public_ip {
        scope_5570.string(var_5571);
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5573) = &input.network_border_group {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("DryRun");
    if let Some(var_5575) = &input.dry_run {
        scope_5574.boolean(*var_5575);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5576 = writer.prefix("HostId");
    if let Some(var_5577) = &input.host_ids {
        let mut list_5579 = scope_5576.start_list(true, Some("item"));
        for item_5578 in var_5577 {
            #[allow(unused_mut)]
            let mut entry_5580 = list_5579.entry();
            entry_5580.string(item_5578);
        }
        list_5579.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("DryRun");
    if let Some(var_5582) = &input.dry_run {
        scope_5581.boolean(*var_5582);
    }
    #[allow(unused_mut)]
    let mut scope_5583 = writer.prefix("IpamPoolId");
    if let Some(var_5584) = &input.ipam_pool_id {
        scope_5583.string(var_5584);
    }
    #[allow(unused_mut)]
    let mut scope_5585 = writer.prefix("Cidr");
    if let Some(var_5586) = &input.cidr {
        scope_5585.string(var_5586);
    }
    #[allow(unused_mut)]
    let mut scope_5587 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5588) = &input.ipam_pool_allocation_id {
        scope_5587.string(var_5588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5589 = writer.prefix("IamInstanceProfile");
    if let Some(var_5590) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5589, var_5590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5591 = writer.prefix("AssociationId");
    if let Some(var_5592) = &input.association_id {
        scope_5591.string(var_5592);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5593 = writer.prefix("AssociationId");
    if let Some(var_5594) = &input.association_id {
        scope_5593.string(var_5594);
    }
    #[allow(unused_mut)]
    let mut scope_5595 = writer.prefix("DryRun");
    if let Some(var_5596) = &input.dry_run {
        scope_5595.boolean(*var_5596);
    }
    #[allow(unused_mut)]
    let mut scope_5597 = writer.prefix("NetworkAclId");
    if let Some(var_5598) = &input.network_acl_id {
        scope_5597.string(var_5598);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5599 = writer.prefix("CidrBlock");
    if let Some(var_5600) = &input.cidr_block {
        scope_5599.string(var_5600);
    }
    #[allow(unused_mut)]
    let mut scope_5601 = writer.prefix("DryRun");
    if let Some(var_5602) = &input.dry_run {
        scope_5601.boolean(*var_5602);
    }
    #[allow(unused_mut)]
    let mut scope_5603 = writer.prefix("Egress");
    if let Some(var_5604) = &input.egress {
        scope_5603.boolean(*var_5604);
    }
    #[allow(unused_mut)]
    let mut scope_5605 = writer.prefix("Icmp");
    if let Some(var_5606) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5605, var_5606)?;
    }
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5608) = &input.ipv6_cidr_block {
        scope_5607.string(var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("NetworkAclId");
    if let Some(var_5610) = &input.network_acl_id {
        scope_5609.string(var_5610);
    }
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("PortRange");
    if let Some(var_5612) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5611, var_5612)?;
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("Protocol");
    if let Some(var_5614) = &input.protocol {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("RuleAction");
    if let Some(var_5616) = &input.rule_action {
        scope_5615.string(var_5616.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("RuleNumber");
    if let Some(var_5618) = &input.rule_number {
        scope_5617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5618).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5620) = &input.destination_cidr_block {
        scope_5619.string(var_5620);
    }
    #[allow(unused_mut)]
    let mut scope_5621 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5622) = &input.destination_ipv6_cidr_block {
        scope_5621.string(var_5622);
    }
    #[allow(unused_mut)]
    let mut scope_5623 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5624) = &input.destination_prefix_list_id {
        scope_5623.string(var_5624);
    }
    #[allow(unused_mut)]
    let mut scope_5625 = writer.prefix("DryRun");
    if let Some(var_5626) = &input.dry_run {
        scope_5625.boolean(*var_5626);
    }
    #[allow(unused_mut)]
    let mut scope_5627 = writer.prefix("VpcEndpointId");
    if let Some(var_5628) = &input.vpc_endpoint_id {
        scope_5627.string(var_5628);
    }
    #[allow(unused_mut)]
    let mut scope_5629 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5630) = &input.egress_only_internet_gateway_id {
        scope_5629.string(var_5630);
    }
    #[allow(unused_mut)]
    let mut scope_5631 = writer.prefix("GatewayId");
    if let Some(var_5632) = &input.gateway_id {
        scope_5631.string(var_5632);
    }
    #[allow(unused_mut)]
    let mut scope_5633 = writer.prefix("InstanceId");
    if let Some(var_5634) = &input.instance_id {
        scope_5633.string(var_5634);
    }
    #[allow(unused_mut)]
    let mut scope_5635 = writer.prefix("LocalTarget");
    if let Some(var_5636) = &input.local_target {
        scope_5635.boolean(*var_5636);
    }
    #[allow(unused_mut)]
    let mut scope_5637 = writer.prefix("NatGatewayId");
    if let Some(var_5638) = &input.nat_gateway_id {
        scope_5637.string(var_5638);
    }
    #[allow(unused_mut)]
    let mut scope_5639 = writer.prefix("TransitGatewayId");
    if let Some(var_5640) = &input.transit_gateway_id {
        scope_5639.string(var_5640);
    }
    #[allow(unused_mut)]
    let mut scope_5641 = writer.prefix("LocalGatewayId");
    if let Some(var_5642) = &input.local_gateway_id {
        scope_5641.string(var_5642);
    }
    #[allow(unused_mut)]
    let mut scope_5643 = writer.prefix("CarrierGatewayId");
    if let Some(var_5644) = &input.carrier_gateway_id {
        scope_5643.string(var_5644);
    }
    #[allow(unused_mut)]
    let mut scope_5645 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5646) = &input.network_interface_id {
        scope_5645.string(var_5646);
    }
    #[allow(unused_mut)]
    let mut scope_5647 = writer.prefix("RouteTableId");
    if let Some(var_5648) = &input.route_table_id {
        scope_5647.string(var_5648);
    }
    #[allow(unused_mut)]
    let mut scope_5649 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5650) = &input.vpc_peering_connection_id {
        scope_5649.string(var_5650);
    }
    #[allow(unused_mut)]
    let mut scope_5651 = writer.prefix("CoreNetworkArn");
    if let Some(var_5652) = &input.core_network_arn {
        scope_5651.string(var_5652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5653 = writer.prefix("AssociationId");
    if let Some(var_5654) = &input.association_id {
        scope_5653.string(var_5654);
    }
    #[allow(unused_mut)]
    let mut scope_5655 = writer.prefix("DryRun");
    if let Some(var_5656) = &input.dry_run {
        scope_5655.boolean(*var_5656);
    }
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("RouteTableId");
    if let Some(var_5658) = &input.route_table_id {
        scope_5657.string(var_5658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5660) = &input.destination_cidr_block {
        scope_5659.string(var_5660);
    }
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5662) = &input.transit_gateway_route_table_id {
        scope_5661.string(var_5662);
    }
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5664) = &input.transit_gateway_attachment_id {
        scope_5663.string(var_5664);
    }
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("Blackhole");
    if let Some(var_5666) = &input.blackhole {
        scope_5665.boolean(*var_5666);
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("DryRun");
    if let Some(var_5668) = &input.dry_run {
        scope_5667.boolean(*var_5668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5669 = writer.prefix("Description");
    if let Some(var_5670) = &input.description {
        scope_5669.string(var_5670);
    }
    #[allow(unused_mut)]
    let mut scope_5671 = writer.prefix("DryRun");
    if let Some(var_5672) = &input.dry_run {
        scope_5671.boolean(*var_5672);
    }
    #[allow(unused_mut)]
    let mut scope_5673 = writer.prefix("EndTime");
    if let Some(var_5674) = &input.end_time {
        scope_5673.date_time(var_5674, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5675 = writer.prefix("InstanceId");
    if let Some(var_5676) = &input.instances {
        let mut list_5678 = scope_5675.start_list(true, Some("InstanceId"));
        for item_5677 in var_5676 {
            #[allow(unused_mut)]
            let mut entry_5679 = list_5678.entry();
            entry_5679.string(item_5677);
        }
        list_5678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("ReasonCode");
    if let Some(var_5681) = &input.reason_codes {
        let mut list_5683 = scope_5680.start_list(true, Some("item"));
        for item_5682 in var_5681 {
            #[allow(unused_mut)]
            let mut entry_5684 = list_5683.entry();
            entry_5684.string(item_5682.as_str());
        }
        list_5683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5685 = writer.prefix("StartTime");
    if let Some(var_5686) = &input.start_time {
        scope_5685.date_time(var_5686, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5687 = writer.prefix("Status");
    if let Some(var_5688) = &input.status {
        scope_5687.string(var_5688.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5689 = writer.prefix("DryRun");
    if let Some(var_5690) = &input.dry_run {
        scope_5689.boolean(*var_5690);
    }
    #[allow(unused_mut)]
    let mut scope_5691 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5692) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5691, var_5692,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5693 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5694) = &input.availability_zone_group {
        scope_5693.string(var_5694);
    }
    #[allow(unused_mut)]
    let mut scope_5695 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5696) = &input.block_duration_minutes {
        scope_5695.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5696).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5697 = writer.prefix("ClientToken");
    if let Some(var_5698) = &input.client_token {
        scope_5697.string(var_5698);
    }
    #[allow(unused_mut)]
    let mut scope_5699 = writer.prefix("DryRun");
    if let Some(var_5700) = &input.dry_run {
        scope_5699.boolean(*var_5700);
    }
    #[allow(unused_mut)]
    let mut scope_5701 = writer.prefix("InstanceCount");
    if let Some(var_5702) = &input.instance_count {
        scope_5701.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5702).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5703 = writer.prefix("LaunchGroup");
    if let Some(var_5704) = &input.launch_group {
        scope_5703.string(var_5704);
    }
    #[allow(unused_mut)]
    let mut scope_5705 = writer.prefix("LaunchSpecification");
    if let Some(var_5706) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5705, var_5706,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5707 = writer.prefix("SpotPrice");
    if let Some(var_5708) = &input.spot_price {
        scope_5707.string(var_5708);
    }
    #[allow(unused_mut)]
    let mut scope_5709 = writer.prefix("Type");
    if let Some(var_5710) = &input.r#type {
        scope_5709.string(var_5710.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5711 = writer.prefix("ValidFrom");
    if let Some(var_5712) = &input.valid_from {
        scope_5711.date_time(var_5712, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5713 = writer.prefix("ValidUntil");
    if let Some(var_5714) = &input.valid_until {
        scope_5713.date_time(var_5714, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5715 = writer.prefix("TagSpecification");
    if let Some(var_5716) = &input.tag_specifications {
        let mut list_5718 = scope_5715.start_list(true, Some("item"));
        for item_5717 in var_5716 {
            #[allow(unused_mut)]
            let mut entry_5719 = list_5718.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5719, item_5717,
            )?;
        }
        list_5718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5720 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5721) = &input.instance_interruption_behavior {
        scope_5720.string(var_5721.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5722 = writer.prefix("AllocationId");
    if let Some(var_5723) = &input.allocation_id {
        scope_5722.string(var_5723);
    }
    #[allow(unused_mut)]
    let mut scope_5724 = writer.prefix("Attribute");
    if let Some(var_5725) = &input.attribute {
        scope_5724.string(var_5725.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5726 = writer.prefix("DryRun");
    if let Some(var_5727) = &input.dry_run {
        scope_5726.boolean(*var_5727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("DryRun");
    if let Some(var_5729) = &input.dry_run {
        scope_5728.boolean(*var_5729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("DryRun");
    if let Some(var_5731) = &input.dry_run {
        scope_5730.boolean(*var_5731);
    }
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("FpgaImageId");
    if let Some(var_5733) = &input.fpga_image_id {
        scope_5732.string(var_5733);
    }
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("Attribute");
    if let Some(var_5735) = &input.attribute {
        scope_5734.string(var_5735.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("Attribute");
    if let Some(var_5737) = &input.attribute {
        scope_5736.string(var_5737.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("ImageId");
    if let Some(var_5739) = &input.image_id {
        scope_5738.string(var_5739);
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("DryRun");
    if let Some(var_5741) = &input.dry_run {
        scope_5740.boolean(*var_5741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("Attribute");
    if let Some(var_5743) = &input.attribute {
        scope_5742.string(var_5743.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("DryRun");
    if let Some(var_5745) = &input.dry_run {
        scope_5744.boolean(*var_5745);
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("InstanceId");
    if let Some(var_5747) = &input.instance_id {
        scope_5746.string(var_5747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("DryRun");
    if let Some(var_5749) = &input.dry_run {
        scope_5748.boolean(*var_5749);
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5751) = &input.network_interface_id {
        scope_5750.string(var_5751);
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("SourceDestCheck");
    if let Some(var_5753) = &input.source_dest_check {
        scope_5752.string(var_5753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("Attribute");
    if let Some(var_5755) = &input.attribute {
        scope_5754.string(var_5755.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("SnapshotId");
    if let Some(var_5757) = &input.snapshot_id {
        scope_5756.string(var_5757);
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("DryRun");
    if let Some(var_5759) = &input.dry_run {
        scope_5758.boolean(*var_5759);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5760 = writer.prefix("DryRun");
    if let Some(var_5761) = &input.dry_run {
        scope_5760.boolean(*var_5761);
    }
    #[allow(unused_mut)]
    let mut scope_5762 = writer.prefix("PublicIp");
    if let Some(var_5763) = &input.public_ip {
        scope_5762.string(var_5763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5764 = writer.prefix("ImageId");
    if let Some(var_5765) = &input.image_id {
        scope_5764.string(var_5765);
    }
    #[allow(unused_mut)]
    let mut scope_5766 = writer.prefix("DryRun");
    if let Some(var_5767) = &input.dry_run {
        scope_5766.boolean(*var_5767);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("DryRun");
    if let Some(var_5769) = &input.dry_run {
        scope_5768.boolean(*var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("PrefixListId");
    if let Some(var_5771) = &input.prefix_list_id {
        scope_5770.string(var_5771);
    }
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("PreviousVersion");
    if let Some(var_5773) = &input.previous_version {
        scope_5772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5773).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("CurrentVersion");
    if let Some(var_5775) = &input.current_version {
        scope_5774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5775).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("SnapshotId");
    if let Some(var_5777) = &input.snapshot_id {
        scope_5776.string(var_5777);
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("DryRun");
    if let Some(var_5779) = &input.dry_run {
        scope_5778.boolean(*var_5779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5780 = writer.prefix("SnapshotId");
    if let Some(var_5781) = &input.snapshot_id {
        scope_5780.string(var_5781);
    }
    #[allow(unused_mut)]
    let mut scope_5782 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5783) = &input.temporary_restore_days {
        scope_5782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5783).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5784 = writer.prefix("PermanentRestore");
    if let Some(var_5785) = &input.permanent_restore {
        scope_5784.boolean(*var_5785);
    }
    #[allow(unused_mut)]
    let mut scope_5786 = writer.prefix("DryRun");
    if let Some(var_5787) = &input.dry_run {
        scope_5786.boolean(*var_5787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5789) = &input.client_vpn_endpoint_id {
        scope_5788.string(var_5789);
    }
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5791) = &input.target_network_cidr {
        scope_5790.string(var_5791);
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("AccessGroupId");
    if let Some(var_5793) = &input.access_group_id {
        scope_5792.string(var_5793);
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("RevokeAllGroups");
    if let Some(var_5795) = &input.revoke_all_groups {
        scope_5794.boolean(*var_5795);
    }
    #[allow(unused_mut)]
    let mut scope_5796 = writer.prefix("DryRun");
    if let Some(var_5797) = &input.dry_run {
        scope_5796.boolean(*var_5797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5798 = writer.prefix("DryRun");
    if let Some(var_5799) = &input.dry_run {
        scope_5798.boolean(*var_5799);
    }
    #[allow(unused_mut)]
    let mut scope_5800 = writer.prefix("GroupId");
    if let Some(var_5801) = &input.group_id {
        scope_5800.string(var_5801);
    }
    #[allow(unused_mut)]
    let mut scope_5802 = writer.prefix("IpPermissions");
    if let Some(var_5803) = &input.ip_permissions {
        let mut list_5805 = scope_5802.start_list(true, Some("item"));
        for item_5804 in var_5803 {
            #[allow(unused_mut)]
            let mut entry_5806 = list_5805.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5806, item_5804)?;
        }
        list_5805.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5808) = &input.security_group_rule_ids {
        let mut list_5810 = scope_5807.start_list(true, Some("item"));
        for item_5809 in var_5808 {
            #[allow(unused_mut)]
            let mut entry_5811 = list_5810.entry();
            entry_5811.string(item_5809);
        }
        list_5810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5812 = writer.prefix("CidrIp");
    if let Some(var_5813) = &input.cidr_ip {
        scope_5812.string(var_5813);
    }
    #[allow(unused_mut)]
    let mut scope_5814 = writer.prefix("FromPort");
    if let Some(var_5815) = &input.from_port {
        scope_5814.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5815).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5816 = writer.prefix("IpProtocol");
    if let Some(var_5817) = &input.ip_protocol {
        scope_5816.string(var_5817);
    }
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("ToPort");
    if let Some(var_5819) = &input.to_port {
        scope_5818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5820 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5821) = &input.source_security_group_name {
        scope_5820.string(var_5821);
    }
    #[allow(unused_mut)]
    let mut scope_5822 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5823) = &input.source_security_group_owner_id {
        scope_5822.string(var_5823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5824 = writer.prefix("CidrIp");
    if let Some(var_5825) = &input.cidr_ip {
        scope_5824.string(var_5825);
    }
    #[allow(unused_mut)]
    let mut scope_5826 = writer.prefix("FromPort");
    if let Some(var_5827) = &input.from_port {
        scope_5826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5828 = writer.prefix("GroupId");
    if let Some(var_5829) = &input.group_id {
        scope_5828.string(var_5829);
    }
    #[allow(unused_mut)]
    let mut scope_5830 = writer.prefix("GroupName");
    if let Some(var_5831) = &input.group_name {
        scope_5830.string(var_5831);
    }
    #[allow(unused_mut)]
    let mut scope_5832 = writer.prefix("IpPermissions");
    if let Some(var_5833) = &input.ip_permissions {
        let mut list_5835 = scope_5832.start_list(true, Some("item"));
        for item_5834 in var_5833 {
            #[allow(unused_mut)]
            let mut entry_5836 = list_5835.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5836, item_5834)?;
        }
        list_5835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("IpProtocol");
    if let Some(var_5838) = &input.ip_protocol {
        scope_5837.string(var_5838);
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5840) = &input.source_security_group_name {
        scope_5839.string(var_5840);
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5842) = &input.source_security_group_owner_id {
        scope_5841.string(var_5842);
    }
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("ToPort");
    if let Some(var_5844) = &input.to_port {
        scope_5843.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5844).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5845 = writer.prefix("DryRun");
    if let Some(var_5846) = &input.dry_run {
        scope_5845.boolean(*var_5846);
    }
    #[allow(unused_mut)]
    let mut scope_5847 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5848) = &input.security_group_rule_ids {
        let mut list_5850 = scope_5847.start_list(true, Some("item"));
        for item_5849 in var_5848 {
            #[allow(unused_mut)]
            let mut entry_5851 = list_5850.entry();
            entry_5851.string(item_5849);
        }
        list_5850.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5852 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5853) = &input.block_device_mappings {
        let mut list_5855 = scope_5852.start_list(true, Some("BlockDeviceMapping"));
        for item_5854 in var_5853 {
            #[allow(unused_mut)]
            let mut entry_5856 = list_5855.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5856, item_5854,
            )?;
        }
        list_5855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("ImageId");
    if let Some(var_5858) = &input.image_id {
        scope_5857.string(var_5858);
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("InstanceType");
    if let Some(var_5860) = &input.instance_type {
        scope_5859.string(var_5860.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5862) = &input.ipv6_address_count {
        scope_5861.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("Ipv6Address");
    if let Some(var_5864) = &input.ipv6_addresses {
        let mut list_5866 = scope_5863.start_list(true, Some("item"));
        for item_5865 in var_5864 {
            #[allow(unused_mut)]
            let mut entry_5867 = list_5866.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5867, item_5865,
            )?;
        }
        list_5866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5868 = writer.prefix("KernelId");
    if let Some(var_5869) = &input.kernel_id {
        scope_5868.string(var_5869);
    }
    #[allow(unused_mut)]
    let mut scope_5870 = writer.prefix("KeyName");
    if let Some(var_5871) = &input.key_name {
        scope_5870.string(var_5871);
    }
    #[allow(unused_mut)]
    let mut scope_5872 = writer.prefix("MaxCount");
    if let Some(var_5873) = &input.max_count {
        scope_5872.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5873).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5874 = writer.prefix("MinCount");
    if let Some(var_5875) = &input.min_count {
        scope_5874.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5875).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5876 = writer.prefix("Monitoring");
    if let Some(var_5877) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5876, var_5877,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5878 = writer.prefix("Placement");
    if let Some(var_5879) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5878, var_5879)?;
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("RamdiskId");
    if let Some(var_5881) = &input.ramdisk_id {
        scope_5880.string(var_5881);
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("SecurityGroupId");
    if let Some(var_5883) = &input.security_group_ids {
        let mut list_5885 = scope_5882.start_list(true, Some("SecurityGroupId"));
        for item_5884 in var_5883 {
            #[allow(unused_mut)]
            let mut entry_5886 = list_5885.entry();
            entry_5886.string(item_5884);
        }
        list_5885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5887 = writer.prefix("SecurityGroup");
    if let Some(var_5888) = &input.security_groups {
        let mut list_5890 = scope_5887.start_list(true, Some("SecurityGroup"));
        for item_5889 in var_5888 {
            #[allow(unused_mut)]
            let mut entry_5891 = list_5890.entry();
            entry_5891.string(item_5889);
        }
        list_5890.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5892 = writer.prefix("SubnetId");
    if let Some(var_5893) = &input.subnet_id {
        scope_5892.string(var_5893);
    }
    #[allow(unused_mut)]
    let mut scope_5894 = writer.prefix("UserData");
    if let Some(var_5895) = &input.user_data {
        scope_5894.string(var_5895);
    }
    #[allow(unused_mut)]
    let mut scope_5896 = writer.prefix("AdditionalInfo");
    if let Some(var_5897) = &input.additional_info {
        scope_5896.string(var_5897);
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("ClientToken");
    if let Some(var_5899) = &input.client_token {
        scope_5898.string(var_5899);
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("DisableApiTermination");
    if let Some(var_5901) = &input.disable_api_termination {
        scope_5900.boolean(*var_5901);
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("DryRun");
    if let Some(var_5903) = &input.dry_run {
        scope_5902.boolean(*var_5903);
    }
    #[allow(unused_mut)]
    let mut scope_5904 = writer.prefix("EbsOptimized");
    if let Some(var_5905) = &input.ebs_optimized {
        scope_5904.boolean(*var_5905);
    }
    #[allow(unused_mut)]
    let mut scope_5906 = writer.prefix("IamInstanceProfile");
    if let Some(var_5907) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5906, var_5907,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5908 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5909) = &input.instance_initiated_shutdown_behavior {
        scope_5908.string(var_5909.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5910 = writer.prefix("NetworkInterface");
    if let Some(var_5911) = &input.network_interfaces {
        let mut list_5913 = scope_5910.start_list(true, Some("item"));
        for item_5912 in var_5911 {
            #[allow(unused_mut)]
            let mut entry_5914 = list_5913.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5914, item_5912)?;
        }
        list_5913.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("PrivateIpAddress");
    if let Some(var_5916) = &input.private_ip_address {
        scope_5915.string(var_5916);
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5918) = &input.elastic_gpu_specification {
        let mut list_5920 = scope_5917.start_list(true, Some("item"));
        for item_5919 in var_5918 {
            #[allow(unused_mut)]
            let mut entry_5921 = list_5920.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5921, item_5919,
            )?;
        }
        list_5920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5922 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5923) = &input.elastic_inference_accelerators {
        let mut list_5925 = scope_5922.start_list(true, Some("item"));
        for item_5924 in var_5923 {
            #[allow(unused_mut)]
            let mut entry_5926 = list_5925.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5926, item_5924,
            )?;
        }
        list_5925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5927 = writer.prefix("TagSpecification");
    if let Some(var_5928) = &input.tag_specifications {
        let mut list_5930 = scope_5927.start_list(true, Some("item"));
        for item_5929 in var_5928 {
            #[allow(unused_mut)]
            let mut entry_5931 = list_5930.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5931, item_5929,
            )?;
        }
        list_5930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5932 = writer.prefix("LaunchTemplate");
    if let Some(var_5933) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5932, var_5933,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5934 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5935) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5934, var_5935,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5936 = writer.prefix("CreditSpecification");
    if let Some(var_5937) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5936, var_5937,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5938 = writer.prefix("CpuOptions");
    if let Some(var_5939) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5938, var_5939,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5940 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5941) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5940, var_5941,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5942 = writer.prefix("HibernationOptions");
    if let Some(var_5943) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5942, var_5943,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5944 = writer.prefix("LicenseSpecification");
    if let Some(var_5945) = &input.license_specifications {
        let mut list_5947 = scope_5944.start_list(true, Some("item"));
        for item_5946 in var_5945 {
            #[allow(unused_mut)]
            let mut entry_5948 = list_5947.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5948, item_5946,
            )?;
        }
        list_5947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("MetadataOptions");
    if let Some(var_5950) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5949, var_5950,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("EnclaveOptions");
    if let Some(var_5952) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5951, var_5952,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5954) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5953, var_5954,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("MaintenanceOptions");
    if let Some(var_5956) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_5955, var_5956,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5957 = writer.prefix("ClientToken");
    if let Some(var_5958) = &input.client_token {
        scope_5957.string(var_5958);
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("DryRun");
    if let Some(var_5960) = &input.dry_run {
        scope_5959.boolean(*var_5960);
    }
    #[allow(unused_mut)]
    let mut scope_5961 = writer.prefix("InstanceCount");
    if let Some(var_5962) = &input.instance_count {
        scope_5961.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5962).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5963 = writer.prefix("LaunchSpecification");
    if let Some(var_5964) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5963, var_5964,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5965 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5966) = &input.scheduled_instance_id {
        scope_5965.string(var_5966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5967 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5968) = &input.local_gateway_route_table_id {
        scope_5967.string(var_5968);
    }
    #[allow(unused_mut)]
    let mut scope_5969 = writer.prefix("Filter");
    if let Some(var_5970) = &input.filters {
        let mut list_5972 = scope_5969.start_list(true, Some("Filter"));
        for item_5971 in var_5970 {
            #[allow(unused_mut)]
            let mut entry_5973 = list_5972.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5973, item_5971)?;
        }
        list_5972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5974 = writer.prefix("MaxResults");
    if let Some(var_5975) = &input.max_results {
        scope_5974.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5976 = writer.prefix("NextToken");
    if let Some(var_5977) = &input.next_token {
        scope_5976.string(var_5977);
    }
    #[allow(unused_mut)]
    let mut scope_5978 = writer.prefix("DryRun");
    if let Some(var_5979) = &input.dry_run {
        scope_5978.boolean(*var_5979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5980 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5981) = &input.transit_gateway_multicast_domain_id {
        scope_5980.string(var_5981);
    }
    #[allow(unused_mut)]
    let mut scope_5982 = writer.prefix("Filter");
    if let Some(var_5983) = &input.filters {
        let mut list_5985 = scope_5982.start_list(true, Some("Filter"));
        for item_5984 in var_5983 {
            #[allow(unused_mut)]
            let mut entry_5986 = list_5985.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5986, item_5984)?;
        }
        list_5985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5987 = writer.prefix("MaxResults");
    if let Some(var_5988) = &input.max_results {
        scope_5987.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5989 = writer.prefix("NextToken");
    if let Some(var_5990) = &input.next_token {
        scope_5989.string(var_5990);
    }
    #[allow(unused_mut)]
    let mut scope_5991 = writer.prefix("DryRun");
    if let Some(var_5992) = &input.dry_run {
        scope_5991.boolean(*var_5992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5993 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5994) = &input.transit_gateway_route_table_id {
        scope_5993.string(var_5994);
    }
    #[allow(unused_mut)]
    let mut scope_5995 = writer.prefix("Filter");
    if let Some(var_5996) = &input.filters {
        let mut list_5998 = scope_5995.start_list(true, Some("Filter"));
        for item_5997 in var_5996 {
            #[allow(unused_mut)]
            let mut entry_5999 = list_5998.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5999, item_5997)?;
        }
        list_5998.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("MaxResults");
    if let Some(var_6001) = &input.max_results {
        scope_6000.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6001).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("DryRun");
    if let Some(var_6003) = &input.dry_run {
        scope_6002.boolean(*var_6003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("InstanceId");
    if let Some(var_6005) = &input.instance_id {
        scope_6004.string(var_6005);
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("DryRun");
    if let Some(var_6007) = &input.dry_run {
        scope_6006.boolean(*var_6007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("InstanceId");
    if let Some(var_6009) = &input.instance_ids {
        let mut list_6011 = scope_6008.start_list(true, Some("InstanceId"));
        for item_6010 in var_6009 {
            #[allow(unused_mut)]
            let mut entry_6012 = list_6011.entry();
            entry_6012.string(item_6010);
        }
        list_6011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6013 = writer.prefix("AdditionalInfo");
    if let Some(var_6014) = &input.additional_info {
        scope_6013.string(var_6014);
    }
    #[allow(unused_mut)]
    let mut scope_6015 = writer.prefix("DryRun");
    if let Some(var_6016) = &input.dry_run {
        scope_6015.boolean(*var_6016);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6018) = &input.network_insights_access_scope_id {
        scope_6017.string(var_6018);
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("DryRun");
    if let Some(var_6020) = &input.dry_run {
        scope_6019.boolean(*var_6020);
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("TagSpecification");
    if let Some(var_6022) = &input.tag_specifications {
        let mut list_6024 = scope_6021.start_list(true, Some("item"));
        for item_6023 in var_6022 {
            #[allow(unused_mut)]
            let mut entry_6025 = list_6024.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6025, item_6023,
            )?;
        }
        list_6024.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6026 = writer.prefix("ClientToken");
    if let Some(var_6027) = &input.client_token {
        scope_6026.string(var_6027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6028 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6029) = &input.network_insights_path_id {
        scope_6028.string(var_6029);
    }
    #[allow(unused_mut)]
    let mut scope_6030 = writer.prefix("FilterInArn");
    if let Some(var_6031) = &input.filter_in_arns {
        let mut list_6033 = scope_6030.start_list(true, Some("item"));
        for item_6032 in var_6031 {
            #[allow(unused_mut)]
            let mut entry_6034 = list_6033.entry();
            entry_6034.string(item_6032);
        }
        list_6033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6035 = writer.prefix("DryRun");
    if let Some(var_6036) = &input.dry_run {
        scope_6035.boolean(*var_6036);
    }
    #[allow(unused_mut)]
    let mut scope_6037 = writer.prefix("TagSpecification");
    if let Some(var_6038) = &input.tag_specifications {
        let mut list_6040 = scope_6037.start_list(true, Some("item"));
        for item_6039 in var_6038 {
            #[allow(unused_mut)]
            let mut entry_6041 = list_6040.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6041, item_6039,
            )?;
        }
        list_6040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6042 = writer.prefix("ClientToken");
    if let Some(var_6043) = &input.client_token {
        scope_6042.string(var_6043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6044 = writer.prefix("DryRun");
    if let Some(var_6045) = &input.dry_run {
        scope_6044.boolean(*var_6045);
    }
    #[allow(unused_mut)]
    let mut scope_6046 = writer.prefix("ServiceId");
    if let Some(var_6047) = &input.service_id {
        scope_6046.string(var_6047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6048 = writer.prefix("InstanceId");
    if let Some(var_6049) = &input.instance_ids {
        let mut list_6051 = scope_6048.start_list(true, Some("InstanceId"));
        for item_6050 in var_6049 {
            #[allow(unused_mut)]
            let mut entry_6052 = list_6051.entry();
            entry_6052.string(item_6050);
        }
        list_6051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("Hibernate");
    if let Some(var_6054) = &input.hibernate {
        scope_6053.boolean(*var_6054);
    }
    #[allow(unused_mut)]
    let mut scope_6055 = writer.prefix("DryRun");
    if let Some(var_6056) = &input.dry_run {
        scope_6055.boolean(*var_6056);
    }
    #[allow(unused_mut)]
    let mut scope_6057 = writer.prefix("Force");
    if let Some(var_6058) = &input.force {
        scope_6057.boolean(*var_6058);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6059 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6060) = &input.client_vpn_endpoint_id {
        scope_6059.string(var_6060);
    }
    #[allow(unused_mut)]
    let mut scope_6061 = writer.prefix("ConnectionId");
    if let Some(var_6062) = &input.connection_id {
        scope_6061.string(var_6062);
    }
    #[allow(unused_mut)]
    let mut scope_6063 = writer.prefix("Username");
    if let Some(var_6064) = &input.username {
        scope_6063.string(var_6064);
    }
    #[allow(unused_mut)]
    let mut scope_6065 = writer.prefix("DryRun");
    if let Some(var_6066) = &input.dry_run {
        scope_6065.boolean(*var_6066);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6067 = writer.prefix("InstanceId");
    if let Some(var_6068) = &input.instance_ids {
        let mut list_6070 = scope_6067.start_list(true, Some("InstanceId"));
        for item_6069 in var_6068 {
            #[allow(unused_mut)]
            let mut entry_6071 = list_6070.entry();
            entry_6071.string(item_6069);
        }
        list_6070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6072 = writer.prefix("DryRun");
    if let Some(var_6073) = &input.dry_run {
        scope_6072.boolean(*var_6073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6074 = writer.prefix("Ipv6Addresses");
    if let Some(var_6075) = &input.ipv6_addresses {
        let mut list_6077 = scope_6074.start_list(true, Some("item"));
        for item_6076 in var_6075 {
            #[allow(unused_mut)]
            let mut entry_6078 = list_6077.entry();
            entry_6078.string(item_6076);
        }
        list_6077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6079 = writer.prefix("Ipv6Prefix");
    if let Some(var_6080) = &input.ipv6_prefixes {
        let mut list_6082 = scope_6079.start_list(true, Some("item"));
        for item_6081 in var_6080 {
            #[allow(unused_mut)]
            let mut entry_6083 = list_6082.entry();
            entry_6083.string(item_6081);
        }
        list_6082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6084 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6085) = &input.network_interface_id {
        scope_6084.string(var_6085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6086 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6087) = &input.network_interface_id {
        scope_6086.string(var_6087);
    }
    #[allow(unused_mut)]
    let mut scope_6088 = writer.prefix("PrivateIpAddress");
    if let Some(var_6089) = &input.private_ip_addresses {
        let mut list_6091 = scope_6088.start_list(true, Some("PrivateIpAddress"));
        for item_6090 in var_6089 {
            #[allow(unused_mut)]
            let mut entry_6092 = list_6091.entry();
            entry_6092.string(item_6090);
        }
        list_6091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6093 = writer.prefix("Ipv4Prefix");
    if let Some(var_6094) = &input.ipv4_prefixes {
        let mut list_6096 = scope_6093.start_list(true, Some("item"));
        for item_6095 in var_6094 {
            #[allow(unused_mut)]
            let mut entry_6097 = list_6096.entry();
            entry_6097.string(item_6095);
        }
        list_6096.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("InstanceId");
    if let Some(var_6099) = &input.instance_ids {
        let mut list_6101 = scope_6098.start_list(true, Some("InstanceId"));
        for item_6100 in var_6099 {
            #[allow(unused_mut)]
            let mut entry_6102 = list_6101.entry();
            entry_6102.string(item_6100);
        }
        list_6101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6103 = writer.prefix("DryRun");
    if let Some(var_6104) = &input.dry_run {
        scope_6103.boolean(*var_6104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6105 = writer.prefix("DryRun");
    if let Some(var_6106) = &input.dry_run {
        scope_6105.boolean(*var_6106);
    }
    #[allow(unused_mut)]
    let mut scope_6107 = writer.prefix("GroupId");
    if let Some(var_6108) = &input.group_id {
        scope_6107.string(var_6108);
    }
    #[allow(unused_mut)]
    let mut scope_6109 = writer.prefix("GroupName");
    if let Some(var_6110) = &input.group_name {
        scope_6109.string(var_6110);
    }
    #[allow(unused_mut)]
    let mut scope_6111 = writer.prefix("IpPermissions");
    if let Some(var_6112) = &input.ip_permissions {
        let mut list_6114 = scope_6111.start_list(true, Some("item"));
        for item_6113 in var_6112 {
            #[allow(unused_mut)]
            let mut entry_6115 = list_6114.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6115, item_6113)?;
        }
        list_6114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6116 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6117) = &input.security_group_rule_descriptions {
        let mut list_6119 = scope_6116.start_list(true, Some("item"));
        for item_6118 in var_6117 {
            #[allow(unused_mut)]
            let mut entry_6120 = list_6119.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6120, item_6118,
            )?;
        }
        list_6119.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6121 = writer.prefix("DryRun");
    if let Some(var_6122) = &input.dry_run {
        scope_6121.boolean(*var_6122);
    }
    #[allow(unused_mut)]
    let mut scope_6123 = writer.prefix("GroupId");
    if let Some(var_6124) = &input.group_id {
        scope_6123.string(var_6124);
    }
    #[allow(unused_mut)]
    let mut scope_6125 = writer.prefix("GroupName");
    if let Some(var_6126) = &input.group_name {
        scope_6125.string(var_6126);
    }
    #[allow(unused_mut)]
    let mut scope_6127 = writer.prefix("IpPermissions");
    if let Some(var_6128) = &input.ip_permissions {
        let mut list_6130 = scope_6127.start_list(true, Some("item"));
        for item_6129 in var_6128 {
            #[allow(unused_mut)]
            let mut entry_6131 = list_6130.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6131, item_6129)?;
        }
        list_6130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6132 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6133) = &input.security_group_rule_descriptions {
        let mut list_6135 = scope_6132.start_list(true, Some("item"));
        for item_6134 in var_6133 {
            #[allow(unused_mut)]
            let mut entry_6136 = list_6135.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6136, item_6134,
            )?;
        }
        list_6135.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6137 = writer.prefix("Cidr");
    if let Some(var_6138) = &input.cidr {
        scope_6137.string(var_6138);
    }
    #[allow(unused_mut)]
    let mut scope_6139 = writer.prefix("DryRun");
    if let Some(var_6140) = &input.dry_run {
        scope_6139.boolean(*var_6140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
