// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            );
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63);
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_104) = &input.ipv6_prefix_count {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Ipv6Prefix");
    if let Some(var_106) = &input.ipv6_prefixes {
        let mut list_108 = scope_105.start_list(true, Some("item"));
        for item_107 in var_106 {
            #[allow(unused_mut)]
            let mut entry_109 = list_108.entry();
            entry_109.string(item_107);
        }
        list_108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NetworkInterfaceId");
    if let Some(var_111) = &input.network_interface_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("AllowReassignment");
    if let Some(var_113) = &input.allow_reassignment {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("NetworkInterfaceId");
    if let Some(var_115) = &input.network_interface_id {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("PrivateIpAddress");
    if let Some(var_117) = &input.private_ip_addresses {
        let mut list_119 = scope_116.start_list(true, Some("PrivateIpAddress"));
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_122) = &input.secondary_private_ip_address_count {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("Ipv4Prefix");
    if let Some(var_124) = &input.ipv4_prefixes {
        let mut list_126 = scope_123.start_list(true, Some("item"));
        for item_125 in var_124 {
            #[allow(unused_mut)]
            let mut entry_127 = list_126.entry();
            entry_127.string(item_125);
        }
        list_126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_129) = &input.ipv4_prefix_count {
        scope_128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("AllocationId");
    if let Some(var_131) = &input.allocation_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("InstanceId");
    if let Some(var_133) = &input.instance_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("PublicIp");
    if let Some(var_135) = &input.public_ip {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AllowReassociation");
    if let Some(var_137) = &input.allow_reassociation {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DryRun");
    if let Some(var_139) = &input.dry_run {
        scope_138.boolean(*var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("PrivateIpAddress");
    if let Some(var_143) = &input.private_ip_address {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_145) = &input.client_vpn_endpoint_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("SubnetId");
    if let Some(var_147) = &input.subnet_id {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ClientToken");
    if let Some(var_149) = &input.client_token {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("DryRun");
    if let Some(var_151) = &input.dry_run {
        scope_150.boolean(*var_151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("DhcpOptionsId");
    if let Some(var_153) = &input.dhcp_options_id {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("VpcId");
    if let Some(var_155) = &input.vpc_id {
        scope_154.string(var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DryRun");
    if let Some(var_157) = &input.dry_run {
        scope_156.boolean(*var_157);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("CertificateArn");
    if let Some(var_159) = &input.certificate_arn {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("RoleArn");
    if let Some(var_161) = &input.role_arn {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("DryRun");
    if let Some(var_163) = &input.dry_run {
        scope_162.boolean(*var_163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("IamInstanceProfile");
    if let Some(var_165) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_164, var_165,
        );
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("InstanceId");
    if let Some(var_167) = &input.instance_id {
        scope_166.string(var_167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("InstanceEventWindowId");
    if let Some(var_171) = &input.instance_event_window_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("AssociationTarget");
    if let Some(var_173) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(
            scope_172, var_173,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("DryRun");
    if let Some(var_175) = &input.dry_run {
        scope_174.boolean(*var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("RouteTableId");
    if let Some(var_177) = &input.route_table_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("SubnetId");
    if let Some(var_179) = &input.subnet_id {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("GatewayId");
    if let Some(var_181) = &input.gateway_id {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_183) = &input.ipv6_cidr_block {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("SubnetId");
    if let Some(var_185) = &input.subnet_id {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_187) = &input.transit_gateway_multicast_domain_id {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_189) = &input.transit_gateway_attachment_id {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(true, Some("item"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_198) = &input.transit_gateway_route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_200) = &input.transit_gateway_attachment_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DryRun");
    if let Some(var_202) = &input.dry_run {
        scope_201.boolean(*var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("BranchInterfaceId");
    if let Some(var_204) = &input.branch_interface_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TrunkInterfaceId");
    if let Some(var_206) = &input.trunk_interface_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("VlanId");
    if let Some(var_208) = &input.vlan_id {
        scope_207.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("GreKey");
    if let Some(var_210) = &input.gre_key {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("ClientToken");
    if let Some(var_212) = &input.client_token {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("DryRun");
    if let Some(var_214) = &input.dry_run {
        scope_213.boolean(*var_214);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_216) = &input.amazon_provided_ipv6_cidr_block {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("CidrBlock");
    if let Some(var_218) = &input.cidr_block {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("VpcId");
    if let Some(var_220) = &input.vpc_id {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_222) = &input.ipv6_cidr_block_network_border_group {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("Ipv6Pool");
    if let Some(var_224) = &input.ipv6_pool {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_226) = &input.ipv6_cidr_block {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("DryRun");
    if let Some(var_228) = &input.dry_run {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SecurityGroupId");
    if let Some(var_230) = &input.groups {
        let mut list_232 = scope_229.start_list(true, Some("groupId"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("VpcId");
    if let Some(var_237) = &input.vpc_id {
        scope_236.string(var_237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DryRun");
    if let Some(var_239) = &input.dry_run {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("InternetGatewayId");
    if let Some(var_241) = &input.internet_gateway_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("VpcId");
    if let Some(var_243) = &input.vpc_id {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DeviceIndex");
    if let Some(var_245) = &input.device_index {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DryRun");
    if let Some(var_247) = &input.dry_run {
        scope_246.boolean(*var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("InstanceId");
    if let Some(var_249) = &input.instance_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NetworkInterfaceId");
    if let Some(var_251) = &input.network_interface_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkCardIndex");
    if let Some(var_253) = &input.network_card_index {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Device");
    if let Some(var_255) = &input.device {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("InstanceId");
    if let Some(var_257) = &input.instance_id {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VolumeId");
    if let Some(var_259) = &input.volume_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DryRun");
    if let Some(var_261) = &input.dry_run {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("VpcId");
    if let Some(var_263) = &input.vpc_id {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("VpnGatewayId");
    if let Some(var_265) = &input.vpn_gateway_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DryRun");
    if let Some(var_267) = &input.dry_run {
        scope_266.boolean(*var_267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_269) = &input.client_vpn_endpoint_id {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("TargetNetworkCidr");
    if let Some(var_271) = &input.target_network_cidr {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AccessGroupId");
    if let Some(var_273) = &input.access_group_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_275) = &input.authorize_all_groups {
        scope_274.boolean(*var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Description");
    if let Some(var_277) = &input.description {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ClientToken");
    if let Some(var_279) = &input.client_token {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("DryRun");
    if let Some(var_281) = &input.dry_run {
        scope_280.boolean(*var_281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("GroupId");
    if let Some(var_285) = &input.group_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IpPermissions");
    if let Some(var_287) = &input.ip_permissions {
        let mut list_289 = scope_286.start_list(true, Some("item"));
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_290, item_288);
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TagSpecification");
    if let Some(var_292) = &input.tag_specifications {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_295, item_293,
            );
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CidrIp");
    if let Some(var_297) = &input.cidr_ip {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("FromPort");
    if let Some(var_299) = &input.from_port {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("IpProtocol");
    if let Some(var_301) = &input.ip_protocol {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("ToPort");
    if let Some(var_303) = &input.to_port {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_305) = &input.source_security_group_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_307) = &input.source_security_group_owner_id {
        scope_306.string(var_307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CidrIp");
    if let Some(var_309) = &input.cidr_ip {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FromPort");
    if let Some(var_311) = &input.from_port {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GroupId");
    if let Some(var_313) = &input.group_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GroupName");
    if let Some(var_315) = &input.group_name {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("IpPermissions");
    if let Some(var_317) = &input.ip_permissions {
        let mut list_319 = scope_316.start_list(true, Some("item"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_320, item_318);
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpProtocol");
    if let Some(var_322) = &input.ip_protocol {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_324) = &input.source_security_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_326) = &input.source_security_group_owner_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("ToPort");
    if let Some(var_328) = &input.to_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DryRun");
    if let Some(var_330) = &input.dry_run {
        scope_329.boolean(*var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TagSpecification");
    if let Some(var_332) = &input.tag_specifications {
        let mut list_334 = scope_331.start_list(true, Some("item"));
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_335, item_333,
            );
        }
        list_334.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("InstanceId");
    if let Some(var_337) = &input.instance_id {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Storage");
    if let Some(var_339) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_338, var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DryRun");
    if let Some(var_341) = &input.dry_run {
        scope_340.boolean(*var_341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("BundleId");
    if let Some(var_343) = &input.bundle_id {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CapacityReservationId");
    if let Some(var_347) = &input.capacity_reservation_id {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DryRun");
    if let Some(var_349) = &input.dry_run {
        scope_348.boolean(*var_349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("DryRun");
    if let Some(var_351) = &input.dry_run {
        scope_350.boolean(*var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_353) = &input.capacity_reservation_fleet_ids {
        let mut list_355 = scope_352.start_list(true, Some("item"));
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            entry_356.string(item_354);
        }
        list_355.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ConversionTaskId");
    if let Some(var_358) = &input.conversion_task_id {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("DryRun");
    if let Some(var_360) = &input.dry_run {
        scope_359.boolean(*var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ReasonMessage");
    if let Some(var_362) = &input.reason_message {
        scope_361.string(var_362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("ExportTaskId");
    if let Some(var_364) = &input.export_task_id {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("CancelReason");
    if let Some(var_366) = &input.cancel_reason {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("ImportTaskId");
    if let Some(var_370) = &input.import_task_id {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_372) = &input.reserved_instances_listing_id {
        scope_371.string(var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("SpotFleetRequestId");
    if let Some(var_376) = &input.spot_fleet_request_ids {
        let mut list_378 = scope_375.start_list(true, Some("item"));
        for item_377 in var_376 {
            #[allow(unused_mut)]
            let mut entry_379 = list_378.entry();
            entry_379.string(item_377);
        }
        list_378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("TerminateInstances");
    if let Some(var_381) = &input.terminate_instances {
        scope_380.boolean(*var_381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DryRun");
    if let Some(var_383) = &input.dry_run {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_385) = &input.spot_instance_request_ids {
        let mut list_387 = scope_384.start_list(true, Some("SpotInstanceRequestId"));
        for item_386 in var_385 {
            #[allow(unused_mut)]
            let mut entry_388 = list_387.entry();
            entry_388.string(item_386);
        }
        list_387.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("InstanceId");
    if let Some(var_390) = &input.instance_id {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("ProductCode");
    if let Some(var_392) = &input.product_code {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("DryRun");
    if let Some(var_394) = &input.dry_run {
        scope_393.boolean(*var_394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("DryRun");
    if let Some(var_396) = &input.dry_run {
        scope_395.boolean(*var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("SourceFpgaImageId");
    if let Some(var_398) = &input.source_fpga_image_id {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Description");
    if let Some(var_400) = &input.description {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Name");
    if let Some(var_402) = &input.name {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("SourceRegion");
    if let Some(var_404) = &input.source_region {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("ClientToken");
    if let Some(var_406) = &input.client_token {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("ClientToken");
    if let Some(var_408) = &input.client_token {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Description");
    if let Some(var_410) = &input.description {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Encrypted");
    if let Some(var_412) = &input.encrypted {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("KmsKeyId");
    if let Some(var_414) = &input.kms_key_id {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Name");
    if let Some(var_416) = &input.name {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("SourceImageId");
    if let Some(var_418) = &input.source_image_id {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SourceRegion");
    if let Some(var_420) = &input.source_region {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DestinationOutpostArn");
    if let Some(var_422) = &input.destination_outpost_arn {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("DryRun");
    if let Some(var_424) = &input.dry_run {
        scope_423.boolean(*var_424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Description");
    if let Some(var_426) = &input.description {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("DestinationOutpostArn");
    if let Some(var_428) = &input.destination_outpost_arn {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("DestinationRegion");
    if let Some(var_430) = &input.destination_region {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("Encrypted");
    if let Some(var_432) = &input.encrypted {
        scope_431.boolean(*var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("KmsKeyId");
    if let Some(var_434) = &input.kms_key_id {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("PresignedUrl");
    if let Some(var_436) = &input.presigned_url {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("SourceRegion");
    if let Some(var_438) = &input.source_region {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("SourceSnapshotId");
    if let Some(var_440) = &input.source_snapshot_id {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("TagSpecification");
    if let Some(var_442) = &input.tag_specifications {
        let mut list_444 = scope_441.start_list(true, Some("item"));
        for item_443 in var_442 {
            #[allow(unused_mut)]
            let mut entry_445 = list_444.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_445, item_443,
            );
        }
        list_444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("DryRun");
    if let Some(var_447) = &input.dry_run {
        scope_446.boolean(*var_447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("ClientToken");
    if let Some(var_449) = &input.client_token {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("InstanceType");
    if let Some(var_451) = &input.instance_type {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("InstancePlatform");
    if let Some(var_453) = &input.instance_platform {
        scope_452.string(var_453.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("AvailabilityZone");
    if let Some(var_455) = &input.availability_zone {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("AvailabilityZoneId");
    if let Some(var_457) = &input.availability_zone_id {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Tenancy");
    if let Some(var_459) = &input.tenancy {
        scope_458.string(var_459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("InstanceCount");
    if let Some(var_461) = &input.instance_count {
        scope_460.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_461).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("EbsOptimized");
    if let Some(var_463) = &input.ebs_optimized {
        scope_462.boolean(*var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("EphemeralStorage");
    if let Some(var_465) = &input.ephemeral_storage {
        scope_464.boolean(*var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("EndDate");
    if let Some(var_467) = &input.end_date {
        scope_466.instant(var_467, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("EndDateType");
    if let Some(var_469) = &input.end_date_type {
        scope_468.string(var_469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_471) = &input.instance_match_criteria {
        scope_470.string(var_471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("TagSpecifications");
    if let Some(var_473) = &input.tag_specifications {
        let mut list_475 = scope_472.start_list(true, Some("item"));
        for item_474 in var_473 {
            #[allow(unused_mut)]
            let mut entry_476 = list_475.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_476, item_474,
            );
        }
        list_475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("DryRun");
    if let Some(var_478) = &input.dry_run {
        scope_477.boolean(*var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("OutpostArn");
    if let Some(var_480) = &input.outpost_arn {
        scope_479.string(var_480);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AllocationStrategy");
    if let Some(var_482) = &input.allocation_strategy {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_486) = &input.instance_type_specifications {
        let mut list_488 = scope_485.start_list(true, None);
        for item_487 in var_486 {
            #[allow(unused_mut)]
            let mut entry_489 = list_488.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_489, item_487);
        }
        list_488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Tenancy");
    if let Some(var_491) = &input.tenancy {
        scope_490.string(var_491.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("TotalTargetCapacity");
    if let Some(var_493) = &input.total_target_capacity {
        scope_492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("EndDate");
    if let Some(var_495) = &input.end_date {
        scope_494.instant(var_495, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_497) = &input.instance_match_criteria {
        scope_496.string(var_497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("TagSpecification");
    if let Some(var_499) = &input.tag_specifications {
        let mut list_501 = scope_498.start_list(true, Some("item"));
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_502, item_500,
            );
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("DryRun");
    if let Some(var_504) = &input.dry_run {
        scope_503.boolean(*var_504);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("VpcId");
    if let Some(var_506) = &input.vpc_id {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecification");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_511, item_509,
            );
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DryRun");
    if let Some(var_513) = &input.dry_run {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("ClientCidrBlock");
    if let Some(var_517) = &input.client_cidr_block {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("ServerCertificateArn");
    if let Some(var_519) = &input.server_certificate_arn {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Authentication");
    if let Some(var_521) = &input.authentication_options {
        let mut list_523 = scope_520.start_list(true, None);
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_524, item_522,
            );
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("ConnectionLogOptions");
    if let Some(var_526) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_525, var_526,
        );
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("DnsServers");
    if let Some(var_528) = &input.dns_servers {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            entry_531.string(item_529);
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("TransportProtocol");
    if let Some(var_533) = &input.transport_protocol {
        scope_532.string(var_533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpnPort");
    if let Some(var_535) = &input.vpn_port {
        scope_534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Description");
    if let Some(var_537) = &input.description {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("SplitTunnel");
    if let Some(var_539) = &input.split_tunnel {
        scope_538.boolean(*var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DryRun");
    if let Some(var_541) = &input.dry_run {
        scope_540.boolean(*var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("ClientToken");
    if let Some(var_543) = &input.client_token {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("TagSpecification");
    if let Some(var_545) = &input.tag_specifications {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_548, item_546,
            );
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("SecurityGroupId");
    if let Some(var_550) = &input.security_group_ids {
        let mut list_552 = scope_549.start_list(true, Some("item"));
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            entry_553.string(item_551);
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("VpcId");
    if let Some(var_555) = &input.vpc_id {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("SelfServicePortal");
    if let Some(var_557) = &input.self_service_portal {
        scope_556.string(var_557.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("ClientConnectOptions");
    if let Some(var_559) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_558, var_559,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_561) = &input.client_vpn_endpoint_id {
        scope_560.string(var_561);
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("DestinationCidrBlock");
    if let Some(var_563) = &input.destination_cidr_block {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_565) = &input.target_vpc_subnet_id {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Description");
    if let Some(var_567) = &input.description {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("ClientToken");
    if let Some(var_569) = &input.client_token {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("DryRun");
    if let Some(var_571) = &input.dry_run {
        scope_570.boolean(*var_571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("BgpAsn");
    if let Some(var_573) = &input.bgp_asn {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("IpAddress");
    if let Some(var_575) = &input.public_ip {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("CertificateArn");
    if let Some(var_577) = &input.certificate_arn {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Type");
    if let Some(var_579) = &input.r#type {
        scope_578.string(var_579.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("TagSpecification");
    if let Some(var_581) = &input.tag_specifications {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_584, item_582,
            );
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("DeviceName");
    if let Some(var_586) = &input.device_name {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DryRun");
    if let Some(var_588) = &input.dry_run {
        scope_587.boolean(*var_588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("AvailabilityZone");
    if let Some(var_590) = &input.availability_zone {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("DryRun");
    if let Some(var_592) = &input.dry_run {
        scope_591.boolean(*var_592);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("DryRun");
    if let Some(var_594) = &input.dry_run {
        scope_593.boolean(*var_594);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DhcpConfiguration");
    if let Some(var_596) = &input.dhcp_configurations {
        let mut list_598 = scope_595.start_list(true, Some("item"));
        for item_597 in var_596 {
            #[allow(unused_mut)]
            let mut entry_599 = list_598.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_599, item_597,
            );
        }
        list_598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("TagSpecification");
    if let Some(var_601) = &input.tag_specifications {
        let mut list_603 = scope_600.start_list(true, Some("item"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_604, item_602,
            );
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("ClientToken");
    if let Some(var_608) = &input.client_token {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DryRun");
    if let Some(var_610) = &input.dry_run {
        scope_609.boolean(*var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("VpcId");
    if let Some(var_612) = &input.vpc_id {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            );
        }
        list_616.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DryRun");
    if let Some(var_619) = &input.dry_run {
        scope_618.boolean(*var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ClientToken");
    if let Some(var_621) = &input.client_token {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("SpotOptions");
    if let Some(var_623) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_622, var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("OnDemandOptions");
    if let Some(var_625) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_624, var_625,
        );
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_627) = &input.excess_capacity_termination_policy {
        scope_626.string(var_627.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_629) = &input.launch_template_configs {
        let mut list_631 = scope_628.start_list(true, Some("item"));
        for item_630 in var_629 {
            #[allow(unused_mut)]
            let mut entry_632 = list_631.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_632, item_630,
            );
        }
        list_631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_634) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_633, var_634,
        );
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_636) = &input.terminate_instances_with_expiration {
        scope_635.boolean(*var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("Type");
    if let Some(var_638) = &input.r#type {
        scope_637.string(var_638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("ValidFrom");
    if let Some(var_640) = &input.valid_from {
        scope_639.instant(var_640, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("ValidUntil");
    if let Some(var_642) = &input.valid_until {
        scope_641.instant(var_642, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_644) = &input.replace_unhealthy_instances {
        scope_643.boolean(*var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("TagSpecification");
    if let Some(var_646) = &input.tag_specifications {
        let mut list_648 = scope_645.start_list(true, Some("item"));
        for item_647 in var_646 {
            #[allow(unused_mut)]
            let mut entry_649 = list_648.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_649, item_647,
            );
        }
        list_648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("Context");
    if let Some(var_651) = &input.context {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DryRun");
    if let Some(var_653) = &input.dry_run {
        scope_652.boolean(*var_653);
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("ClientToken");
    if let Some(var_655) = &input.client_token {
        scope_654.string(var_655);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_657) = &input.deliver_logs_permission_arn {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("LogGroupName");
    if let Some(var_659) = &input.log_group_name {
        scope_658.string(var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("ResourceId");
    if let Some(var_661) = &input.resource_ids {
        let mut list_663 = scope_660.start_list(true, Some("item"));
        for item_662 in var_661 {
            #[allow(unused_mut)]
            let mut entry_664 = list_663.entry();
            entry_664.string(item_662);
        }
        list_663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ResourceType");
    if let Some(var_666) = &input.resource_type {
        scope_665.string(var_666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("TrafficType");
    if let Some(var_668) = &input.traffic_type {
        scope_667.string(var_668.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("LogDestinationType");
    if let Some(var_670) = &input.log_destination_type {
        scope_669.string(var_670.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("LogDestination");
    if let Some(var_672) = &input.log_destination {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("LogFormat");
    if let Some(var_674) = &input.log_format {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("TagSpecification");
    if let Some(var_676) = &input.tag_specifications {
        let mut list_678 = scope_675.start_list(true, Some("item"));
        for item_677 in var_676 {
            #[allow(unused_mut)]
            let mut entry_679 = list_678.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_679, item_677,
            );
        }
        list_678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("MaxAggregationInterval");
    if let Some(var_681) = &input.max_aggregation_interval {
        scope_680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("DestinationOptions");
    if let Some(var_683) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_682, var_683,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("DryRun");
    if let Some(var_685) = &input.dry_run {
        scope_684.boolean(*var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("InputStorageLocation");
    if let Some(var_687) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_686, var_687);
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("LogsStorageLocation");
    if let Some(var_689) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_688, var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("Description");
    if let Some(var_691) = &input.description {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("Name");
    if let Some(var_693) = &input.name {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("ClientToken");
    if let Some(var_695) = &input.client_token {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("TagSpecification");
    if let Some(var_697) = &input.tag_specifications {
        let mut list_699 = scope_696.start_list(true, Some("item"));
        for item_698 in var_697 {
            #[allow(unused_mut)]
            let mut entry_700 = list_699.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_700, item_698,
            );
        }
        list_699.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("BlockDeviceMapping");
    if let Some(var_702) = &input.block_device_mappings {
        let mut list_704 = scope_701.start_list(true, Some("BlockDeviceMapping"));
        for item_703 in var_702 {
            #[allow(unused_mut)]
            let mut entry_705 = list_704.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_705, item_703,
            );
        }
        list_704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("Description");
    if let Some(var_707) = &input.description {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DryRun");
    if let Some(var_709) = &input.dry_run {
        scope_708.boolean(*var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("InstanceId");
    if let Some(var_711) = &input.instance_id {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("Name");
    if let Some(var_713) = &input.name {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("NoReboot");
    if let Some(var_715) = &input.no_reboot {
        scope_714.boolean(*var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TagSpecification");
    if let Some(var_717) = &input.tag_specifications {
        let mut list_719 = scope_716.start_list(true, Some("item"));
        for item_718 in var_717 {
            #[allow(unused_mut)]
            let mut entry_720 = list_719.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_720, item_718,
            );
        }
        list_719.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DryRun");
    if let Some(var_722) = &input.dry_run {
        scope_721.boolean(*var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("Name");
    if let Some(var_724) = &input.name {
        scope_723.string(var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("TimeRange");
    if let Some(var_726) = &input.time_ranges {
        let mut list_728 = scope_725.start_list(true, None);
        for item_727 in var_726 {
            #[allow(unused_mut)]
            let mut entry_729 = list_728.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_729, item_727);
        }
        list_728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("CronExpression");
    if let Some(var_731) = &input.cron_expression {
        scope_730.string(var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("TagSpecification");
    if let Some(var_733) = &input.tag_specifications {
        let mut list_735 = scope_732.start_list(true, Some("item"));
        for item_734 in var_733 {
            #[allow(unused_mut)]
            let mut entry_736 = list_735.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_736, item_734,
            );
        }
        list_735.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Description");
    if let Some(var_738) = &input.description {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ExportToS3");
    if let Some(var_740) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_739, var_740,
        );
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("InstanceId");
    if let Some(var_742) = &input.instance_id {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("TargetEnvironment");
    if let Some(var_744) = &input.target_environment {
        scope_743.string(var_744.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("TagSpecification");
    if let Some(var_746) = &input.tag_specifications {
        let mut list_748 = scope_745.start_list(true, Some("item"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_749, item_747,
            );
        }
        list_748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("TagSpecification");
    if let Some(var_751) = &input.tag_specifications {
        let mut list_753 = scope_750.start_list(true, Some("item"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_754, item_752,
            );
        }
        list_753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("DryRun");
    if let Some(var_756) = &input.dry_run {
        scope_755.boolean(*var_756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("KeyName");
    if let Some(var_758) = &input.key_name {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("DryRun");
    if let Some(var_760) = &input.dry_run {
        scope_759.boolean(*var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("KeyType");
    if let Some(var_762) = &input.key_type {
        scope_761.string(var_762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("TagSpecification");
    if let Some(var_764) = &input.tag_specifications {
        let mut list_766 = scope_763.start_list(true, Some("item"));
        for item_765 in var_764 {
            #[allow(unused_mut)]
            let mut entry_767 = list_766.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_767, item_765,
            );
        }
        list_766.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("DryRun");
    if let Some(var_769) = &input.dry_run {
        scope_768.boolean(*var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("ClientToken");
    if let Some(var_771) = &input.client_token {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("LaunchTemplateName");
    if let Some(var_773) = &input.launch_template_name {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("VersionDescription");
    if let Some(var_775) = &input.version_description {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("LaunchTemplateData");
    if let Some(var_777) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_776, var_777,
        );
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TagSpecification");
    if let Some(var_779) = &input.tag_specifications {
        let mut list_781 = scope_778.start_list(true, Some("item"));
        for item_780 in var_779 {
            #[allow(unused_mut)]
            let mut entry_782 = list_781.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_782, item_780,
            );
        }
        list_781.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("DryRun");
    if let Some(var_784) = &input.dry_run {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("ClientToken");
    if let Some(var_786) = &input.client_token {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("LaunchTemplateId");
    if let Some(var_788) = &input.launch_template_id {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("LaunchTemplateName");
    if let Some(var_790) = &input.launch_template_name {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("SourceVersion");
    if let Some(var_792) = &input.source_version {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("VersionDescription");
    if let Some(var_794) = &input.version_description {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("LaunchTemplateData");
    if let Some(var_796) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_795, var_796,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("DestinationCidrBlock");
    if let Some(var_798) = &input.destination_cidr_block {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_800) = &input.local_gateway_route_table_id {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_802) = &input.local_gateway_virtual_interface_group_id {
        scope_801.string(var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("DryRun");
    if let Some(var_804) = &input.dry_run {
        scope_803.boolean(*var_804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_806) = &input.local_gateway_route_table_id {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("VpcId");
    if let Some(var_808) = &input.vpc_id {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("TagSpecification");
    if let Some(var_810) = &input.tag_specifications {
        let mut list_812 = scope_809.start_list(true, Some("item"));
        for item_811 in var_810 {
            #[allow(unused_mut)]
            let mut entry_813 = list_812.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_813, item_811,
            );
        }
        list_812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("DryRun");
    if let Some(var_815) = &input.dry_run {
        scope_814.boolean(*var_815);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("DryRun");
    if let Some(var_817) = &input.dry_run {
        scope_816.boolean(*var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("PrefixListName");
    if let Some(var_819) = &input.prefix_list_name {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Entry");
    if let Some(var_821) = &input.entries {
        let mut list_823 = scope_820.start_list(true, None);
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_824, item_822,
            );
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("MaxEntries");
    if let Some(var_826) = &input.max_entries {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("TagSpecification");
    if let Some(var_828) = &input.tag_specifications {
        let mut list_830 = scope_827.start_list(true, Some("item"));
        for item_829 in var_828 {
            #[allow(unused_mut)]
            let mut entry_831 = list_830.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_831, item_829,
            );
        }
        list_830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AddressFamily");
    if let Some(var_833) = &input.address_family {
        scope_832.string(var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ClientToken");
    if let Some(var_835) = &input.client_token {
        scope_834.string(var_835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("AllocationId");
    if let Some(var_837) = &input.allocation_id {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("ClientToken");
    if let Some(var_839) = &input.client_token {
        scope_838.string(var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("DryRun");
    if let Some(var_841) = &input.dry_run {
        scope_840.boolean(*var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("SubnetId");
    if let Some(var_843) = &input.subnet_id {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("TagSpecification");
    if let Some(var_845) = &input.tag_specifications {
        let mut list_847 = scope_844.start_list(true, Some("item"));
        for item_846 in var_845 {
            #[allow(unused_mut)]
            let mut entry_848 = list_847.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_848, item_846,
            );
        }
        list_847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("ConnectivityType");
    if let Some(var_850) = &input.connectivity_type {
        scope_849.string(var_850.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("DryRun");
    if let Some(var_852) = &input.dry_run {
        scope_851.boolean(*var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("VpcId");
    if let Some(var_854) = &input.vpc_id {
        scope_853.string(var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("TagSpecification");
    if let Some(var_856) = &input.tag_specifications {
        let mut list_858 = scope_855.start_list(true, Some("item"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_859, item_857,
            );
        }
        list_858.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("CidrBlock");
    if let Some(var_861) = &input.cidr_block {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("DryRun");
    if let Some(var_863) = &input.dry_run {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Egress");
    if let Some(var_865) = &input.egress {
        scope_864.boolean(*var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("Icmp");
    if let Some(var_867) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_866, var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_869) = &input.ipv6_cidr_block {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("NetworkAclId");
    if let Some(var_871) = &input.network_acl_id {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("PortRange");
    if let Some(var_873) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_872, var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("Protocol");
    if let Some(var_875) = &input.protocol {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("RuleAction");
    if let Some(var_877) = &input.rule_action {
        scope_876.string(var_877.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("RuleNumber");
    if let Some(var_879) = &input.rule_number {
        scope_878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_879).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("SourceIp");
    if let Some(var_881) = &input.source_ip {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("DestinationIp");
    if let Some(var_883) = &input.destination_ip {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("Source");
    if let Some(var_885) = &input.source {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Destination");
    if let Some(var_887) = &input.destination {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("Protocol");
    if let Some(var_889) = &input.protocol {
        scope_888.string(var_889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("DestinationPort");
    if let Some(var_891) = &input.destination_port {
        scope_890.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("TagSpecification");
    if let Some(var_893) = &input.tag_specifications {
        let mut list_895 = scope_892.start_list(true, Some("item"));
        for item_894 in var_893 {
            #[allow(unused_mut)]
            let mut entry_896 = list_895.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_896, item_894,
            );
        }
        list_895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DryRun");
    if let Some(var_898) = &input.dry_run {
        scope_897.boolean(*var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("ClientToken");
    if let Some(var_900) = &input.client_token {
        scope_899.string(var_900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("Description");
    if let Some(var_902) = &input.description {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DryRun");
    if let Some(var_904) = &input.dry_run {
        scope_903.boolean(*var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("SecurityGroupId");
    if let Some(var_906) = &input.groups {
        let mut list_908 = scope_905.start_list(true, Some("SecurityGroupId"));
        for item_907 in var_906 {
            #[allow(unused_mut)]
            let mut entry_909 = list_908.entry();
            entry_909.string(item_907);
        }
        list_908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("Ipv6AddressCount");
    if let Some(var_911) = &input.ipv6_address_count {
        scope_910.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_911).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("Ipv6Addresses");
    if let Some(var_913) = &input.ipv6_addresses {
        let mut list_915 = scope_912.start_list(true, Some("item"));
        for item_914 in var_913 {
            #[allow(unused_mut)]
            let mut entry_916 = list_915.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_916, item_914,
            );
        }
        list_915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("PrivateIpAddress");
    if let Some(var_918) = &input.private_ip_address {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("PrivateIpAddresses");
    if let Some(var_920) = &input.private_ip_addresses {
        let mut list_922 = scope_919.start_list(true, Some("item"));
        for item_921 in var_920 {
            #[allow(unused_mut)]
            let mut entry_923 = list_922.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_923, item_921,
            );
        }
        list_922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_925) = &input.secondary_private_ip_address_count {
        scope_924.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_925).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Ipv4Prefix");
    if let Some(var_927) = &input.ipv4_prefixes {
        let mut list_929 = scope_926.start_list(true, Some("item"));
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_930, item_928,
            );
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_932) = &input.ipv4_prefix_count {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Ipv6Prefix");
    if let Some(var_934) = &input.ipv6_prefixes {
        let mut list_936 = scope_933.start_list(true, Some("item"));
        for item_935 in var_934 {
            #[allow(unused_mut)]
            let mut entry_937 = list_936.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_937, item_935,
            );
        }
        list_936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_939) = &input.ipv6_prefix_count {
        scope_938.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_939).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("InterfaceType");
    if let Some(var_941) = &input.interface_type {
        scope_940.string(var_941.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("SubnetId");
    if let Some(var_943) = &input.subnet_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("TagSpecification");
    if let Some(var_945) = &input.tag_specifications {
        let mut list_947 = scope_944.start_list(true, Some("item"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_948, item_946,
            );
        }
        list_947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ClientToken");
    if let Some(var_950) = &input.client_token {
        scope_949.string(var_950);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("NetworkInterfaceId");
    if let Some(var_952) = &input.network_interface_id {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("AwsAccountId");
    if let Some(var_954) = &input.aws_account_id {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("AwsService");
    if let Some(var_956) = &input.aws_service {
        scope_955.string(var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("Permission");
    if let Some(var_958) = &input.permission {
        scope_957.string(var_958.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("DryRun");
    if let Some(var_960) = &input.dry_run {
        scope_959.boolean(*var_960);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("DryRun");
    if let Some(var_962) = &input.dry_run {
        scope_961.boolean(*var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("GroupName");
    if let Some(var_964) = &input.group_name {
        scope_963.string(var_964);
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Strategy");
    if let Some(var_966) = &input.strategy {
        scope_965.string(var_966.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("PartitionCount");
    if let Some(var_968) = &input.partition_count {
        scope_967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_968).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("TagSpecification");
    if let Some(var_970) = &input.tag_specifications {
        let mut list_972 = scope_969.start_list(true, Some("item"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_973, item_971,
            );
        }
        list_972.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("InstanceId");
    if let Some(var_975) = &input.instance_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("SnapshotId");
    if let Some(var_977) = &input.snapshot_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("ClientToken");
    if let Some(var_979) = &input.client_token {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("DryRun");
    if let Some(var_981) = &input.dry_run {
        scope_980.boolean(*var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("TagSpecification");
    if let Some(var_983) = &input.tag_specifications {
        let mut list_985 = scope_982.start_list(true, Some("item"));
        for item_984 in var_983 {
            #[allow(unused_mut)]
            let mut entry_986 = list_985.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_986, item_984,
            );
        }
        list_985.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("ClientToken");
    if let Some(var_988) = &input.client_token {
        scope_987.string(var_988);
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("InstanceCount");
    if let Some(var_990) = &input.instance_count {
        scope_989.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_990).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("PriceSchedules");
    if let Some(var_992) = &input.price_schedules {
        let mut list_994 = scope_991.start_list(true, Some("item"));
        for item_993 in var_992 {
            #[allow(unused_mut)]
            let mut entry_995 = list_994.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_995, item_993,
            );
        }
        list_994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ReservedInstancesId");
    if let Some(var_997) = &input.reserved_instances_id {
        scope_996.string(var_997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("Bucket");
    if let Some(var_999) = &input.bucket {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("ObjectKey");
    if let Some(var_1001) = &input.object_key {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("Name");
    if let Some(var_1003) = &input.name {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("TagSpecification");
    if let Some(var_1005) = &input.tag_specifications {
        let mut list_1007 = scope_1004.start_list(true, Some("item"));
        for item_1006 in var_1005 {
            #[allow(unused_mut)]
            let mut entry_1008 = list_1007.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1008, item_1006,
            );
        }
        list_1007.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DryRun");
    if let Some(var_1010) = &input.dry_run {
        scope_1009.boolean(*var_1010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1012) = &input.destination_cidr_block {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1014) = &input.destination_ipv6_cidr_block {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1016) = &input.destination_prefix_list_id {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("DryRun");
    if let Some(var_1018) = &input.dry_run {
        scope_1017.boolean(*var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("VpcEndpointId");
    if let Some(var_1020) = &input.vpc_endpoint_id {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1022) = &input.egress_only_internet_gateway_id {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("GatewayId");
    if let Some(var_1024) = &input.gateway_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("InstanceId");
    if let Some(var_1026) = &input.instance_id {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("NatGatewayId");
    if let Some(var_1028) = &input.nat_gateway_id {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("TransitGatewayId");
    if let Some(var_1030) = &input.transit_gateway_id {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("LocalGatewayId");
    if let Some(var_1032) = &input.local_gateway_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("CarrierGatewayId");
    if let Some(var_1034) = &input.carrier_gateway_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1036) = &input.network_interface_id {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("RouteTableId");
    if let Some(var_1038) = &input.route_table_id {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1040) = &input.vpc_peering_connection_id {
        scope_1039.string(var_1040);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("DryRun");
    if let Some(var_1042) = &input.dry_run {
        scope_1041.boolean(*var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("VpcId");
    if let Some(var_1044) = &input.vpc_id {
        scope_1043.string(var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("TagSpecification");
    if let Some(var_1046) = &input.tag_specifications {
        let mut list_1048 = scope_1045.start_list(true, Some("item"));
        for item_1047 in var_1046 {
            #[allow(unused_mut)]
            let mut entry_1049 = list_1048.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1049, item_1047,
            );
        }
        list_1048.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("GroupDescription");
    if let Some(var_1051) = &input.description {
        scope_1050.string(var_1051);
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("GroupName");
    if let Some(var_1053) = &input.group_name {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("VpcId");
    if let Some(var_1055) = &input.vpc_id {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("TagSpecification");
    if let Some(var_1057) = &input.tag_specifications {
        let mut list_1059 = scope_1056.start_list(true, Some("item"));
        for item_1058 in var_1057 {
            #[allow(unused_mut)]
            let mut entry_1060 = list_1059.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1060, item_1058,
            );
        }
        list_1059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("DryRun");
    if let Some(var_1062) = &input.dry_run {
        scope_1061.boolean(*var_1062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Description");
    if let Some(var_1064) = &input.description {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("OutpostArn");
    if let Some(var_1066) = &input.outpost_arn {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("VolumeId");
    if let Some(var_1068) = &input.volume_id {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("TagSpecification");
    if let Some(var_1070) = &input.tag_specifications {
        let mut list_1072 = scope_1069.start_list(true, Some("item"));
        for item_1071 in var_1070 {
            #[allow(unused_mut)]
            let mut entry_1073 = list_1072.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1073, item_1071,
            );
        }
        list_1072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("DryRun");
    if let Some(var_1075) = &input.dry_run {
        scope_1074.boolean(*var_1075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("Description");
    if let Some(var_1077) = &input.description {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("InstanceSpecification");
    if let Some(var_1079) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1078, var_1079,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("OutpostArn");
    if let Some(var_1081) = &input.outpost_arn {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("TagSpecification");
    if let Some(var_1083) = &input.tag_specifications {
        let mut list_1085 = scope_1082.start_list(true, Some("item"));
        for item_1084 in var_1083 {
            #[allow(unused_mut)]
            let mut entry_1086 = list_1085.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1086, item_1084,
            );
        }
        list_1085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("DryRun");
    if let Some(var_1088) = &input.dry_run {
        scope_1087.boolean(*var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1090) = &input.copy_tags_from_source {
        scope_1089.string(var_1090.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("Bucket");
    if let Some(var_1092) = &input.bucket {
        scope_1091.string(var_1092);
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("DryRun");
    if let Some(var_1094) = &input.dry_run {
        scope_1093.boolean(*var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("Prefix");
    if let Some(var_1096) = &input.prefix {
        scope_1095.string(var_1096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("ImageId");
    if let Some(var_1098) = &input.image_id {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("Bucket");
    if let Some(var_1100) = &input.bucket {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("S3ObjectTag");
    if let Some(var_1102) = &input.s3_object_tags {
        let mut list_1104 = scope_1101.start_list(true, Some("item"));
        for item_1103 in var_1102 {
            #[allow(unused_mut)]
            let mut entry_1105 = list_1104.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1105, item_1103);
        }
        list_1104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("DryRun");
    if let Some(var_1107) = &input.dry_run {
        scope_1106.boolean(*var_1107);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("TagSpecification");
    if let Some(var_1109) = &input.tag_specifications {
        let mut list_1111 = scope_1108.start_list(true, Some("item"));
        for item_1110 in var_1109 {
            #[allow(unused_mut)]
            let mut entry_1112 = list_1111.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1112, item_1110,
            );
        }
        list_1111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("AvailabilityZone");
    if let Some(var_1114) = &input.availability_zone {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1116) = &input.availability_zone_id {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("CidrBlock");
    if let Some(var_1118) = &input.cidr_block {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1120) = &input.ipv6_cidr_block {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("OutpostArn");
    if let Some(var_1122) = &input.outpost_arn {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("VpcId");
    if let Some(var_1124) = &input.vpc_id {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("DryRun");
    if let Some(var_1126) = &input.dry_run {
        scope_1125.boolean(*var_1126);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("TagSpecification");
    if let Some(var_1128) = &input.tag_specifications {
        let mut list_1130 = scope_1127.start_list(true, Some("item"));
        for item_1129 in var_1128 {
            #[allow(unused_mut)]
            let mut entry_1131 = list_1130.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1131, item_1129,
            );
        }
        list_1130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("SubnetId");
    if let Some(var_1133) = &input.subnet_id {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("Cidr");
    if let Some(var_1135) = &input.cidr {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("ReservationType");
    if let Some(var_1137) = &input.reservation_type {
        scope_1136.string(var_1137.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("Description");
    if let Some(var_1139) = &input.description {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("DryRun");
    if let Some(var_1141) = &input.dry_run {
        scope_1140.boolean(*var_1141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("DryRun");
    if let Some(var_1143) = &input.dry_run {
        scope_1142.boolean(*var_1143);
    }
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("ResourceId");
    if let Some(var_1145) = &input.resources {
        let mut list_1147 = scope_1144.start_list(true, None);
        for item_1146 in var_1145 {
            #[allow(unused_mut)]
            let mut entry_1148 = list_1147.entry();
            entry_1148.string(item_1146);
        }
        list_1147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Tag");
    if let Some(var_1150) = &input.tags {
        let mut list_1152 = scope_1149.start_list(true, Some("item"));
        for item_1151 in var_1150 {
            #[allow(unused_mut)]
            let mut entry_1153 = list_1152.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1153, item_1151);
        }
        list_1152.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("Description");
    if let Some(var_1155) = &input.description {
        scope_1154.string(var_1155);
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("TagSpecification");
    if let Some(var_1157) = &input.tag_specifications {
        let mut list_1159 = scope_1156.start_list(true, Some("item"));
        for item_1158 in var_1157 {
            #[allow(unused_mut)]
            let mut entry_1160 = list_1159.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1160, item_1158,
            );
        }
        list_1159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("DryRun");
    if let Some(var_1162) = &input.dry_run {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("ClientToken");
    if let Some(var_1164) = &input.client_token {
        scope_1163.string(var_1164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1166) = &input.traffic_mirror_filter_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("TrafficDirection");
    if let Some(var_1168) = &input.traffic_direction {
        scope_1167.string(var_1168.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("RuleNumber");
    if let Some(var_1170) = &input.rule_number {
        scope_1169.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("RuleAction");
    if let Some(var_1172) = &input.rule_action {
        scope_1171.string(var_1172.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("DestinationPortRange");
    if let Some(var_1174) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1173, var_1174,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("SourcePortRange");
    if let Some(var_1176) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1175, var_1176,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("Protocol");
    if let Some(var_1178) = &input.protocol {
        scope_1177.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1180) = &input.destination_cidr_block {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("SourceCidrBlock");
    if let Some(var_1182) = &input.source_cidr_block {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("Description");
    if let Some(var_1184) = &input.description {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("DryRun");
    if let Some(var_1186) = &input.dry_run {
        scope_1185.boolean(*var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("ClientToken");
    if let Some(var_1188) = &input.client_token {
        scope_1187.string(var_1188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1190) = &input.network_interface_id {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1192) = &input.traffic_mirror_target_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1194) = &input.traffic_mirror_filter_id {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("PacketLength");
    if let Some(var_1196) = &input.packet_length {
        scope_1195.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1196).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("SessionNumber");
    if let Some(var_1198) = &input.session_number {
        scope_1197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("VirtualNetworkId");
    if let Some(var_1200) = &input.virtual_network_id {
        scope_1199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("Description");
    if let Some(var_1202) = &input.description {
        scope_1201.string(var_1202);
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("TagSpecification");
    if let Some(var_1204) = &input.tag_specifications {
        let mut list_1206 = scope_1203.start_list(true, Some("item"));
        for item_1205 in var_1204 {
            #[allow(unused_mut)]
            let mut entry_1207 = list_1206.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1207, item_1205,
            );
        }
        list_1206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("DryRun");
    if let Some(var_1209) = &input.dry_run {
        scope_1208.boolean(*var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("ClientToken");
    if let Some(var_1211) = &input.client_token {
        scope_1210.string(var_1211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1213) = &input.network_interface_id {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1215) = &input.network_load_balancer_arn {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("Description");
    if let Some(var_1217) = &input.description {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("TagSpecification");
    if let Some(var_1219) = &input.tag_specifications {
        let mut list_1221 = scope_1218.start_list(true, Some("item"));
        for item_1220 in var_1219 {
            #[allow(unused_mut)]
            let mut entry_1222 = list_1221.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1222, item_1220,
            );
        }
        list_1221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("DryRun");
    if let Some(var_1224) = &input.dry_run {
        scope_1223.boolean(*var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("ClientToken");
    if let Some(var_1226) = &input.client_token {
        scope_1225.string(var_1226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Description");
    if let Some(var_1228) = &input.description {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("Options");
    if let Some(var_1230) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1229, var_1230,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("TagSpecification");
    if let Some(var_1232) = &input.tag_specifications {
        let mut list_1234 = scope_1231.start_list(true, Some("item"));
        for item_1233 in var_1232 {
            #[allow(unused_mut)]
            let mut entry_1235 = list_1234.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1235, item_1233,
            );
        }
        list_1234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("DryRun");
    if let Some(var_1237) = &input.dry_run {
        scope_1236.boolean(*var_1237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1239) = &input.transport_transit_gateway_attachment_id {
        scope_1238.string(var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("Options");
    if let Some(var_1241) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1240, var_1241);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("TagSpecification");
    if let Some(var_1243) = &input.tag_specifications {
        let mut list_1245 = scope_1242.start_list(true, Some("item"));
        for item_1244 in var_1243 {
            #[allow(unused_mut)]
            let mut entry_1246 = list_1245.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1246, item_1244,
            );
        }
        list_1245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("DryRun");
    if let Some(var_1248) = &input.dry_run {
        scope_1247.boolean(*var_1248);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1250) = &input.transit_gateway_attachment_id {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1252) = &input.transit_gateway_address {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("PeerAddress");
    if let Some(var_1254) = &input.peer_address {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("BgpOptions");
    if let Some(var_1256) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1255, var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1258) = &input.inside_cidr_blocks {
        let mut list_1260 = scope_1257.start_list(true, Some("item"));
        for item_1259 in var_1258 {
            #[allow(unused_mut)]
            let mut entry_1261 = list_1260.entry();
            entry_1261.string(item_1259);
        }
        list_1260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("TagSpecification");
    if let Some(var_1263) = &input.tag_specifications {
        let mut list_1265 = scope_1262.start_list(true, Some("item"));
        for item_1264 in var_1263 {
            #[allow(unused_mut)]
            let mut entry_1266 = list_1265.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1266, item_1264,
            );
        }
        list_1265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("DryRun");
    if let Some(var_1268) = &input.dry_run {
        scope_1267.boolean(*var_1268);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("TransitGatewayId");
    if let Some(var_1270) = &input.transit_gateway_id {
        scope_1269.string(var_1270);
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("Options");
    if let Some(var_1272) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1271, var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("TagSpecification");
    if let Some(var_1274) = &input.tag_specifications {
        let mut list_1276 = scope_1273.start_list(true, Some("item"));
        for item_1275 in var_1274 {
            #[allow(unused_mut)]
            let mut entry_1277 = list_1276.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1277, item_1275,
            );
        }
        list_1276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("DryRun");
    if let Some(var_1279) = &input.dry_run {
        scope_1278.boolean(*var_1279);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("TransitGatewayId");
    if let Some(var_1281) = &input.transit_gateway_id {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1283) = &input.peer_transit_gateway_id {
        scope_1282.string(var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("PeerAccountId");
    if let Some(var_1285) = &input.peer_account_id {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("PeerRegion");
    if let Some(var_1287) = &input.peer_region {
        scope_1286.string(var_1287);
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("TagSpecification");
    if let Some(var_1289) = &input.tag_specifications {
        let mut list_1291 = scope_1288.start_list(true, Some("item"));
        for item_1290 in var_1289 {
            #[allow(unused_mut)]
            let mut entry_1292 = list_1291.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1292, item_1290,
            );
        }
        list_1291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("DryRun");
    if let Some(var_1294) = &input.dry_run {
        scope_1293.boolean(*var_1294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1296) = &input.transit_gateway_route_table_id {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("PrefixListId");
    if let Some(var_1298) = &input.prefix_list_id {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1300) = &input.transit_gateway_attachment_id {
        scope_1299.string(var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("Blackhole");
    if let Some(var_1302) = &input.blackhole {
        scope_1301.boolean(*var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DryRun");
    if let Some(var_1304) = &input.dry_run {
        scope_1303.boolean(*var_1304);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1306) = &input.destination_cidr_block {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1308) = &input.transit_gateway_route_table_id {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1310) = &input.transit_gateway_attachment_id {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Blackhole");
    if let Some(var_1312) = &input.blackhole {
        scope_1311.boolean(*var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("DryRun");
    if let Some(var_1314) = &input.dry_run {
        scope_1313.boolean(*var_1314);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("TransitGatewayId");
    if let Some(var_1316) = &input.transit_gateway_id {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("TagSpecifications");
    if let Some(var_1318) = &input.tag_specifications {
        let mut list_1320 = scope_1317.start_list(true, Some("item"));
        for item_1319 in var_1318 {
            #[allow(unused_mut)]
            let mut entry_1321 = list_1320.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1321, item_1319,
            );
        }
        list_1320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("DryRun");
    if let Some(var_1323) = &input.dry_run {
        scope_1322.boolean(*var_1323);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("TransitGatewayId");
    if let Some(var_1325) = &input.transit_gateway_id {
        scope_1324.string(var_1325);
    }
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("VpcId");
    if let Some(var_1327) = &input.vpc_id {
        scope_1326.string(var_1327);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("SubnetIds");
    if let Some(var_1329) = &input.subnet_ids {
        let mut list_1331 = scope_1328.start_list(true, Some("item"));
        for item_1330 in var_1329 {
            #[allow(unused_mut)]
            let mut entry_1332 = list_1331.entry();
            entry_1332.string(item_1330);
        }
        list_1331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("Options");
    if let Some(var_1334) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1333, var_1334);
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("TagSpecifications");
    if let Some(var_1336) = &input.tag_specifications {
        let mut list_1338 = scope_1335.start_list(true, Some("item"));
        for item_1337 in var_1336 {
            #[allow(unused_mut)]
            let mut entry_1339 = list_1338.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1339, item_1337,
            );
        }
        list_1338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("DryRun");
    if let Some(var_1341) = &input.dry_run {
        scope_1340.boolean(*var_1341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("AvailabilityZone");
    if let Some(var_1343) = &input.availability_zone {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Encrypted");
    if let Some(var_1345) = &input.encrypted {
        scope_1344.boolean(*var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Iops");
    if let Some(var_1347) = &input.iops {
        scope_1346.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("KmsKeyId");
    if let Some(var_1349) = &input.kms_key_id {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("OutpostArn");
    if let Some(var_1351) = &input.outpost_arn {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Size");
    if let Some(var_1353) = &input.size {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("SnapshotId");
    if let Some(var_1355) = &input.snapshot_id {
        scope_1354.string(var_1355);
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("VolumeType");
    if let Some(var_1357) = &input.volume_type {
        scope_1356.string(var_1357.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("DryRun");
    if let Some(var_1359) = &input.dry_run {
        scope_1358.boolean(*var_1359);
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("TagSpecification");
    if let Some(var_1361) = &input.tag_specifications {
        let mut list_1363 = scope_1360.start_list(true, Some("item"));
        for item_1362 in var_1361 {
            #[allow(unused_mut)]
            let mut entry_1364 = list_1363.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1364, item_1362,
            );
        }
        list_1363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1366) = &input.multi_attach_enabled {
        scope_1365.boolean(*var_1366);
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("Throughput");
    if let Some(var_1368) = &input.throughput {
        scope_1367.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1368).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("ClientToken");
    if let Some(var_1370) = &input.client_token {
        scope_1369.string(var_1370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("CidrBlock");
    if let Some(var_1372) = &input.cidr_block {
        scope_1371.string(var_1372);
    }
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1374) = &input.amazon_provided_ipv6_cidr_block {
        scope_1373.boolean(*var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("Ipv6Pool");
    if let Some(var_1376) = &input.ipv6_pool {
        scope_1375.string(var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1378) = &input.ipv6_cidr_block {
        scope_1377.string(var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("DryRun");
    if let Some(var_1380) = &input.dry_run {
        scope_1379.boolean(*var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("InstanceTenancy");
    if let Some(var_1382) = &input.instance_tenancy {
        scope_1381.string(var_1382.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1384) = &input.ipv6_cidr_block_network_border_group {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("TagSpecification");
    if let Some(var_1386) = &input.tag_specifications {
        let mut list_1388 = scope_1385.start_list(true, Some("item"));
        for item_1387 in var_1386 {
            #[allow(unused_mut)]
            let mut entry_1389 = list_1388.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1389, item_1387,
            );
        }
        list_1388.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("DryRun");
    if let Some(var_1391) = &input.dry_run {
        scope_1390.boolean(*var_1391);
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("VpcEndpointType");
    if let Some(var_1393) = &input.vpc_endpoint_type {
        scope_1392.string(var_1393.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("VpcId");
    if let Some(var_1395) = &input.vpc_id {
        scope_1394.string(var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("ServiceName");
    if let Some(var_1397) = &input.service_name {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("PolicyDocument");
    if let Some(var_1399) = &input.policy_document {
        scope_1398.string(var_1399);
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("RouteTableId");
    if let Some(var_1401) = &input.route_table_ids {
        let mut list_1403 = scope_1400.start_list(true, Some("item"));
        for item_1402 in var_1401 {
            #[allow(unused_mut)]
            let mut entry_1404 = list_1403.entry();
            entry_1404.string(item_1402);
        }
        list_1403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("SubnetId");
    if let Some(var_1406) = &input.subnet_ids {
        let mut list_1408 = scope_1405.start_list(true, Some("item"));
        for item_1407 in var_1406 {
            #[allow(unused_mut)]
            let mut entry_1409 = list_1408.entry();
            entry_1409.string(item_1407);
        }
        list_1408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("SecurityGroupId");
    if let Some(var_1411) = &input.security_group_ids {
        let mut list_1413 = scope_1410.start_list(true, Some("item"));
        for item_1412 in var_1411 {
            #[allow(unused_mut)]
            let mut entry_1414 = list_1413.entry();
            entry_1414.string(item_1412);
        }
        list_1413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("ClientToken");
    if let Some(var_1416) = &input.client_token {
        scope_1415.string(var_1416);
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1418) = &input.private_dns_enabled {
        scope_1417.boolean(*var_1418);
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("TagSpecification");
    if let Some(var_1420) = &input.tag_specifications {
        let mut list_1422 = scope_1419.start_list(true, Some("item"));
        for item_1421 in var_1420 {
            #[allow(unused_mut)]
            let mut entry_1423 = list_1422.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1423, item_1421,
            );
        }
        list_1422.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("DryRun");
    if let Some(var_1425) = &input.dry_run {
        scope_1424.boolean(*var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("ServiceId");
    if let Some(var_1427) = &input.service_id {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("VpcEndpointId");
    if let Some(var_1429) = &input.vpc_endpoint_id {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1431) = &input.connection_notification_arn {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("ConnectionEvents");
    if let Some(var_1433) = &input.connection_events {
        let mut list_1435 = scope_1432.start_list(true, Some("item"));
        for item_1434 in var_1433 {
            #[allow(unused_mut)]
            let mut entry_1436 = list_1435.entry();
            entry_1436.string(item_1434);
        }
        list_1435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("ClientToken");
    if let Some(var_1438) = &input.client_token {
        scope_1437.string(var_1438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("DryRun");
    if let Some(var_1440) = &input.dry_run {
        scope_1439.boolean(*var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("AcceptanceRequired");
    if let Some(var_1442) = &input.acceptance_required {
        scope_1441.boolean(*var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("PrivateDnsName");
    if let Some(var_1444) = &input.private_dns_name {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1446) = &input.network_load_balancer_arns {
        let mut list_1448 = scope_1445.start_list(true, Some("item"));
        for item_1447 in var_1446 {
            #[allow(unused_mut)]
            let mut entry_1449 = list_1448.entry();
            entry_1449.string(item_1447);
        }
        list_1448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1451) = &input.gateway_load_balancer_arns {
        let mut list_1453 = scope_1450.start_list(true, Some("item"));
        for item_1452 in var_1451 {
            #[allow(unused_mut)]
            let mut entry_1454 = list_1453.entry();
            entry_1454.string(item_1452);
        }
        list_1453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("ClientToken");
    if let Some(var_1456) = &input.client_token {
        scope_1455.string(var_1456);
    }
    #[allow(unused_mut)]
    let mut scope_1457 = writer.prefix("TagSpecification");
    if let Some(var_1458) = &input.tag_specifications {
        let mut list_1460 = scope_1457.start_list(true, Some("item"));
        for item_1459 in var_1458 {
            #[allow(unused_mut)]
            let mut entry_1461 = list_1460.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1461, item_1459,
            );
        }
        list_1460.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("DryRun");
    if let Some(var_1463) = &input.dry_run {
        scope_1462.boolean(*var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("PeerOwnerId");
    if let Some(var_1465) = &input.peer_owner_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("PeerVpcId");
    if let Some(var_1467) = &input.peer_vpc_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("VpcId");
    if let Some(var_1469) = &input.vpc_id {
        scope_1468.string(var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("PeerRegion");
    if let Some(var_1471) = &input.peer_region {
        scope_1470.string(var_1471);
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("TagSpecification");
    if let Some(var_1473) = &input.tag_specifications {
        let mut list_1475 = scope_1472.start_list(true, Some("item"));
        for item_1474 in var_1473 {
            #[allow(unused_mut)]
            let mut entry_1476 = list_1475.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1476, item_1474,
            );
        }
        list_1475.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("CustomerGatewayId");
    if let Some(var_1478) = &input.customer_gateway_id {
        scope_1477.string(var_1478);
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("Type");
    if let Some(var_1480) = &input.r#type {
        scope_1479.string(var_1480);
    }
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("VpnGatewayId");
    if let Some(var_1482) = &input.vpn_gateway_id {
        scope_1481.string(var_1482);
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("TransitGatewayId");
    if let Some(var_1484) = &input.transit_gateway_id {
        scope_1483.string(var_1484);
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("DryRun");
    if let Some(var_1486) = &input.dry_run {
        scope_1485.boolean(*var_1486);
    }
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("Options");
    if let Some(var_1488) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1487, var_1488,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("TagSpecification");
    if let Some(var_1490) = &input.tag_specifications {
        let mut list_1492 = scope_1489.start_list(true, Some("item"));
        for item_1491 in var_1490 {
            #[allow(unused_mut)]
            let mut entry_1493 = list_1492.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1493, item_1491,
            );
        }
        list_1492.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1495) = &input.destination_cidr_block {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("VpnConnectionId");
    if let Some(var_1497) = &input.vpn_connection_id {
        scope_1496.string(var_1497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("AvailabilityZone");
    if let Some(var_1499) = &input.availability_zone {
        scope_1498.string(var_1499);
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("Type");
    if let Some(var_1501) = &input.r#type {
        scope_1500.string(var_1501.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("TagSpecification");
    if let Some(var_1503) = &input.tag_specifications {
        let mut list_1505 = scope_1502.start_list(true, Some("item"));
        for item_1504 in var_1503 {
            #[allow(unused_mut)]
            let mut entry_1506 = list_1505.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1506, item_1504,
            );
        }
        list_1505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("AmazonSideAsn");
    if let Some(var_1508) = &input.amazon_side_asn {
        scope_1507.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1508).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("DryRun");
    if let Some(var_1510) = &input.dry_run {
        scope_1509.boolean(*var_1510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("CarrierGatewayId");
    if let Some(var_1512) = &input.carrier_gateway_id {
        scope_1511.string(var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("DryRun");
    if let Some(var_1514) = &input.dry_run {
        scope_1513.boolean(*var_1514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1516) = &input.client_vpn_endpoint_id {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("DryRun");
    if let Some(var_1518) = &input.dry_run {
        scope_1517.boolean(*var_1518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1520) = &input.client_vpn_endpoint_id {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1522) = &input.target_vpc_subnet_id {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1524) = &input.destination_cidr_block {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("DryRun");
    if let Some(var_1526) = &input.dry_run {
        scope_1525.boolean(*var_1526);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("CustomerGatewayId");
    if let Some(var_1528) = &input.customer_gateway_id {
        scope_1527.string(var_1528);
    }
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("DryRun");
    if let Some(var_1530) = &input.dry_run {
        scope_1529.boolean(*var_1530);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("DhcpOptionsId");
    if let Some(var_1532) = &input.dhcp_options_id {
        scope_1531.string(var_1532);
    }
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("DryRun");
    if let Some(var_1534) = &input.dry_run {
        scope_1533.boolean(*var_1534);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("DryRun");
    if let Some(var_1536) = &input.dry_run {
        scope_1535.boolean(*var_1536);
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1538) = &input.egress_only_internet_gateway_id {
        scope_1537.string(var_1538);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("DryRun");
    if let Some(var_1540) = &input.dry_run {
        scope_1539.boolean(*var_1540);
    }
    #[allow(unused_mut)]
    let mut scope_1541 = writer.prefix("FleetId");
    if let Some(var_1542) = &input.fleet_ids {
        let mut list_1544 = scope_1541.start_list(true, None);
        for item_1543 in var_1542 {
            #[allow(unused_mut)]
            let mut entry_1545 = list_1544.entry();
            entry_1545.string(item_1543);
        }
        list_1544.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("TerminateInstances");
    if let Some(var_1547) = &input.terminate_instances {
        scope_1546.boolean(*var_1547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("DryRun");
    if let Some(var_1549) = &input.dry_run {
        scope_1548.boolean(*var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("FlowLogId");
    if let Some(var_1551) = &input.flow_log_ids {
        let mut list_1553 = scope_1550.start_list(true, Some("item"));
        for item_1552 in var_1551 {
            #[allow(unused_mut)]
            let mut entry_1554 = list_1553.entry();
            entry_1554.string(item_1552);
        }
        list_1553.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("DryRun");
    if let Some(var_1556) = &input.dry_run {
        scope_1555.boolean(*var_1556);
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("FpgaImageId");
    if let Some(var_1558) = &input.fpga_image_id {
        scope_1557.string(var_1558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("DryRun");
    if let Some(var_1560) = &input.dry_run {
        scope_1559.boolean(*var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("ForceDelete");
    if let Some(var_1562) = &input.force_delete {
        scope_1561.boolean(*var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1564) = &input.instance_event_window_id {
        scope_1563.string(var_1564);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("DryRun");
    if let Some(var_1566) = &input.dry_run {
        scope_1565.boolean(*var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("InternetGatewayId");
    if let Some(var_1568) = &input.internet_gateway_id {
        scope_1567.string(var_1568);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("KeyName");
    if let Some(var_1570) = &input.key_name {
        scope_1569.string(var_1570);
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("KeyPairId");
    if let Some(var_1572) = &input.key_pair_id {
        scope_1571.string(var_1572);
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("DryRun");
    if let Some(var_1574) = &input.dry_run {
        scope_1573.boolean(*var_1574);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("DryRun");
    if let Some(var_1576) = &input.dry_run {
        scope_1575.boolean(*var_1576);
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("LaunchTemplateId");
    if let Some(var_1578) = &input.launch_template_id {
        scope_1577.string(var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("LaunchTemplateName");
    if let Some(var_1580) = &input.launch_template_name {
        scope_1579.string(var_1580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("DryRun");
    if let Some(var_1582) = &input.dry_run {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("LaunchTemplateId");
    if let Some(var_1584) = &input.launch_template_id {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("LaunchTemplateName");
    if let Some(var_1586) = &input.launch_template_name {
        scope_1585.string(var_1586);
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1588) = &input.versions {
        let mut list_1590 = scope_1587.start_list(true, Some("item"));
        for item_1589 in var_1588 {
            #[allow(unused_mut)]
            let mut entry_1591 = list_1590.entry();
            entry_1591.string(item_1589);
        }
        list_1590.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1593) = &input.destination_cidr_block {
        scope_1592.string(var_1593);
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1595) = &input.local_gateway_route_table_id {
        scope_1594.string(var_1595);
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("DryRun");
    if let Some(var_1597) = &input.dry_run {
        scope_1596.boolean(*var_1597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1599) = &input.local_gateway_route_table_vpc_association_id {
        scope_1598.string(var_1599);
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("DryRun");
    if let Some(var_1601) = &input.dry_run {
        scope_1600.boolean(*var_1601);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("DryRun");
    if let Some(var_1603) = &input.dry_run {
        scope_1602.boolean(*var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("PrefixListId");
    if let Some(var_1605) = &input.prefix_list_id {
        scope_1604.string(var_1605);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("DryRun");
    if let Some(var_1607) = &input.dry_run {
        scope_1606.boolean(*var_1607);
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("NatGatewayId");
    if let Some(var_1609) = &input.nat_gateway_id {
        scope_1608.string(var_1609);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("DryRun");
    if let Some(var_1611) = &input.dry_run {
        scope_1610.boolean(*var_1611);
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("NetworkAclId");
    if let Some(var_1613) = &input.network_acl_id {
        scope_1612.string(var_1613);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("DryRun");
    if let Some(var_1615) = &input.dry_run {
        scope_1614.boolean(*var_1615);
    }
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("Egress");
    if let Some(var_1617) = &input.egress {
        scope_1616.boolean(*var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("NetworkAclId");
    if let Some(var_1619) = &input.network_acl_id {
        scope_1618.string(var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("RuleNumber");
    if let Some(var_1621) = &input.rule_number {
        scope_1620.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1621).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("DryRun");
    if let Some(var_1623) = &input.dry_run {
        scope_1622.boolean(*var_1623);
    }
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1625) = &input.network_insights_analysis_id {
        scope_1624.string(var_1625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("DryRun");
    if let Some(var_1627) = &input.dry_run {
        scope_1626.boolean(*var_1627);
    }
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1629) = &input.network_insights_path_id {
        scope_1628.string(var_1629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("DryRun");
    if let Some(var_1631) = &input.dry_run {
        scope_1630.boolean(*var_1631);
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1633) = &input.network_interface_id {
        scope_1632.string(var_1633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1635) = &input.network_interface_permission_id {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("Force");
    if let Some(var_1637) = &input.force {
        scope_1636.boolean(*var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("DryRun");
    if let Some(var_1639) = &input.dry_run {
        scope_1638.boolean(*var_1639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("GroupName");
    if let Some(var_1643) = &input.group_name {
        scope_1642.string(var_1643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("DryRun");
    if let Some(var_1645) = &input.dry_run {
        scope_1644.boolean(*var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("ReservedInstancesId");
    if let Some(var_1647) = &input.reserved_instances_ids {
        let mut list_1649 = scope_1646.start_list(true, Some("item"));
        for item_1648 in var_1647 {
            #[allow(unused_mut)]
            let mut entry_1650 = list_1649.entry();
            entry_1650.string(item_1648);
        }
        list_1649.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1652) = &input.destination_cidr_block {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1654) = &input.destination_ipv6_cidr_block {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1656) = &input.destination_prefix_list_id {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("DryRun");
    if let Some(var_1658) = &input.dry_run {
        scope_1657.boolean(*var_1658);
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("RouteTableId");
    if let Some(var_1660) = &input.route_table_id {
        scope_1659.string(var_1660);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("DryRun");
    if let Some(var_1662) = &input.dry_run {
        scope_1661.boolean(*var_1662);
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("RouteTableId");
    if let Some(var_1664) = &input.route_table_id {
        scope_1663.string(var_1664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("GroupId");
    if let Some(var_1666) = &input.group_id {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("GroupName");
    if let Some(var_1668) = &input.group_name {
        scope_1667.string(var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("DryRun");
    if let Some(var_1670) = &input.dry_run {
        scope_1669.boolean(*var_1670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("SnapshotId");
    if let Some(var_1672) = &input.snapshot_id {
        scope_1671.string(var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("DryRun");
    if let Some(var_1674) = &input.dry_run {
        scope_1673.boolean(*var_1674);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("DryRun");
    if let Some(var_1676) = &input.dry_run {
        scope_1675.boolean(*var_1676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("SubnetId");
    if let Some(var_1678) = &input.subnet_id {
        scope_1677.string(var_1678);
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("DryRun");
    if let Some(var_1680) = &input.dry_run {
        scope_1679.boolean(*var_1680);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1682) = &input.subnet_cidr_reservation_id {
        scope_1681.string(var_1682);
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("DryRun");
    if let Some(var_1684) = &input.dry_run {
        scope_1683.boolean(*var_1684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("DryRun");
    if let Some(var_1686) = &input.dry_run {
        scope_1685.boolean(*var_1686);
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("ResourceId");
    if let Some(var_1688) = &input.resources {
        let mut list_1690 = scope_1687.start_list(true, None);
        for item_1689 in var_1688 {
            #[allow(unused_mut)]
            let mut entry_1691 = list_1690.entry();
            entry_1691.string(item_1689);
        }
        list_1690.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("Tag");
    if let Some(var_1693) = &input.tags {
        let mut list_1695 = scope_1692.start_list(true, Some("item"));
        for item_1694 in var_1693 {
            #[allow(unused_mut)]
            let mut entry_1696 = list_1695.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1696, item_1694);
        }
        list_1695.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1698) = &input.traffic_mirror_filter_id {
        scope_1697.string(var_1698);
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("DryRun");
    if let Some(var_1700) = &input.dry_run {
        scope_1699.boolean(*var_1700);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1702) = &input.traffic_mirror_filter_rule_id {
        scope_1701.string(var_1702);
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("DryRun");
    if let Some(var_1704) = &input.dry_run {
        scope_1703.boolean(*var_1704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1706) = &input.traffic_mirror_session_id {
        scope_1705.string(var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("DryRun");
    if let Some(var_1708) = &input.dry_run {
        scope_1707.boolean(*var_1708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1710) = &input.traffic_mirror_target_id {
        scope_1709.string(var_1710);
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("DryRun");
    if let Some(var_1712) = &input.dry_run {
        scope_1711.boolean(*var_1712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("TransitGatewayId");
    if let Some(var_1714) = &input.transit_gateway_id {
        scope_1713.string(var_1714);
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("DryRun");
    if let Some(var_1716) = &input.dry_run {
        scope_1715.boolean(*var_1716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1718) = &input.transit_gateway_attachment_id {
        scope_1717.string(var_1718);
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("DryRun");
    if let Some(var_1720) = &input.dry_run {
        scope_1719.boolean(*var_1720);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1722) = &input.transit_gateway_connect_peer_id {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("DryRun");
    if let Some(var_1724) = &input.dry_run {
        scope_1723.boolean(*var_1724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1726) = &input.transit_gateway_multicast_domain_id {
        scope_1725.string(var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("DryRun");
    if let Some(var_1728) = &input.dry_run {
        scope_1727.boolean(*var_1728);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1730) = &input.transit_gateway_attachment_id {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("DryRun");
    if let Some(var_1732) = &input.dry_run {
        scope_1731.boolean(*var_1732);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1734) = &input.transit_gateway_route_table_id {
        scope_1733.string(var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("PrefixListId");
    if let Some(var_1736) = &input.prefix_list_id {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("DryRun");
    if let Some(var_1738) = &input.dry_run {
        scope_1737.boolean(*var_1738);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1740) = &input.transit_gateway_route_table_id {
        scope_1739.string(var_1740);
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1742) = &input.destination_cidr_block {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("DryRun");
    if let Some(var_1744) = &input.dry_run {
        scope_1743.boolean(*var_1744);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1746) = &input.transit_gateway_route_table_id {
        scope_1745.string(var_1746);
    }
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("DryRun");
    if let Some(var_1748) = &input.dry_run {
        scope_1747.boolean(*var_1748);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1750) = &input.transit_gateway_attachment_id {
        scope_1749.string(var_1750);
    }
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("DryRun");
    if let Some(var_1752) = &input.dry_run {
        scope_1751.boolean(*var_1752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("VolumeId");
    if let Some(var_1754) = &input.volume_id {
        scope_1753.string(var_1754);
    }
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("DryRun");
    if let Some(var_1756) = &input.dry_run {
        scope_1755.boolean(*var_1756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("VpcId");
    if let Some(var_1758) = &input.vpc_id {
        scope_1757.string(var_1758);
    }
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("DryRun");
    if let Some(var_1760) = &input.dry_run {
        scope_1759.boolean(*var_1760);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DryRun");
    if let Some(var_1762) = &input.dry_run {
        scope_1761.boolean(*var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1764) = &input.connection_notification_ids {
        let mut list_1766 = scope_1763.start_list(true, Some("item"));
        for item_1765 in var_1764 {
            #[allow(unused_mut)]
            let mut entry_1767 = list_1766.entry();
            entry_1767.string(item_1765);
        }
        list_1766.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("DryRun");
    if let Some(var_1769) = &input.dry_run {
        scope_1768.boolean(*var_1769);
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("VpcEndpointId");
    if let Some(var_1771) = &input.vpc_endpoint_ids {
        let mut list_1773 = scope_1770.start_list(true, Some("item"));
        for item_1772 in var_1771 {
            #[allow(unused_mut)]
            let mut entry_1774 = list_1773.entry();
            entry_1774.string(item_1772);
        }
        list_1773.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("DryRun");
    if let Some(var_1776) = &input.dry_run {
        scope_1775.boolean(*var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("ServiceId");
    if let Some(var_1778) = &input.service_ids {
        let mut list_1780 = scope_1777.start_list(true, Some("item"));
        for item_1779 in var_1778 {
            #[allow(unused_mut)]
            let mut entry_1781 = list_1780.entry();
            entry_1781.string(item_1779);
        }
        list_1780.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("DryRun");
    if let Some(var_1783) = &input.dry_run {
        scope_1782.boolean(*var_1783);
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1785) = &input.vpc_peering_connection_id {
        scope_1784.string(var_1785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("VpnConnectionId");
    if let Some(var_1787) = &input.vpn_connection_id {
        scope_1786.string(var_1787);
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("DryRun");
    if let Some(var_1789) = &input.dry_run {
        scope_1788.boolean(*var_1789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1791) = &input.destination_cidr_block {
        scope_1790.string(var_1791);
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("VpnConnectionId");
    if let Some(var_1793) = &input.vpn_connection_id {
        scope_1792.string(var_1793);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("VpnGatewayId");
    if let Some(var_1795) = &input.vpn_gateway_id {
        scope_1794.string(var_1795);
    }
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("DryRun");
    if let Some(var_1797) = &input.dry_run {
        scope_1796.boolean(*var_1797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Cidr");
    if let Some(var_1799) = &input.cidr {
        scope_1798.string(var_1799);
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("DryRun");
    if let Some(var_1801) = &input.dry_run {
        scope_1800.boolean(*var_1801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("ImageId");
    if let Some(var_1803) = &input.image_id {
        scope_1802.string(var_1803);
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("DryRun");
    if let Some(var_1805) = &input.dry_run {
        scope_1804.boolean(*var_1805);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("DryRun");
    if let Some(var_1807) = &input.dry_run {
        scope_1806.boolean(*var_1807);
    }
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1809) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(
            scope_1808, var_1809,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1811) = &input.transit_gateway_multicast_domain_id {
        scope_1810.string(var_1811);
    }
    #[allow(unused_mut)]
    let mut scope_1812 = writer.prefix("GroupIpAddress");
    if let Some(var_1813) = &input.group_ip_address {
        scope_1812.string(var_1813);
    }
    #[allow(unused_mut)]
    let mut scope_1814 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1815) = &input.network_interface_ids {
        let mut list_1817 = scope_1814.start_list(true, Some("item"));
        for item_1816 in var_1815 {
            #[allow(unused_mut)]
            let mut entry_1818 = list_1817.entry();
            entry_1818.string(item_1816);
        }
        list_1817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("DryRun");
    if let Some(var_1820) = &input.dry_run {
        scope_1819.boolean(*var_1820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1822) = &input.transit_gateway_multicast_domain_id {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("GroupIpAddress");
    if let Some(var_1824) = &input.group_ip_address {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1826) = &input.network_interface_ids {
        let mut list_1828 = scope_1825.start_list(true, Some("item"));
        for item_1827 in var_1826 {
            #[allow(unused_mut)]
            let mut entry_1829 = list_1828.entry();
            entry_1829.string(item_1827);
        }
        list_1828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("DryRun");
    if let Some(var_1831) = &input.dry_run {
        scope_1830.boolean(*var_1831);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("AttributeName");
    if let Some(var_1833) = &input.attribute_names {
        let mut list_1835 = scope_1832.start_list(true, Some("attributeName"));
        for item_1834 in var_1833 {
            #[allow(unused_mut)]
            let mut entry_1836 = list_1835.entry();
            entry_1836.string(item_1834.as_str());
        }
        list_1835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("DryRun");
    if let Some(var_1838) = &input.dry_run {
        scope_1837.boolean(*var_1838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("Filter");
    if let Some(var_1840) = &input.filters {
        let mut list_1842 = scope_1839.start_list(true, Some("Filter"));
        for item_1841 in var_1840 {
            #[allow(unused_mut)]
            let mut entry_1843 = list_1842.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1843, item_1841);
        }
        list_1842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("PublicIp");
    if let Some(var_1845) = &input.public_ips {
        let mut list_1847 = scope_1844.start_list(true, Some("PublicIp"));
        for item_1846 in var_1845 {
            #[allow(unused_mut)]
            let mut entry_1848 = list_1847.entry();
            entry_1848.string(item_1846);
        }
        list_1847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("AllocationId");
    if let Some(var_1850) = &input.allocation_ids {
        let mut list_1852 = scope_1849.start_list(true, Some("AllocationId"));
        for item_1851 in var_1850 {
            #[allow(unused_mut)]
            let mut entry_1853 = list_1852.entry();
            entry_1853.string(item_1851);
        }
        list_1852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("DryRun");
    if let Some(var_1855) = &input.dry_run {
        scope_1854.boolean(*var_1855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("AllocationId");
    if let Some(var_1857) = &input.allocation_ids {
        let mut list_1859 = scope_1856.start_list(true, Some("item"));
        for item_1858 in var_1857 {
            #[allow(unused_mut)]
            let mut entry_1860 = list_1859.entry();
            entry_1860.string(item_1858);
        }
        list_1859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("Attribute");
    if let Some(var_1862) = &input.attribute {
        scope_1861.string(var_1862.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("NextToken");
    if let Some(var_1864) = &input.next_token {
        scope_1863.string(var_1864);
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("MaxResults");
    if let Some(var_1866) = &input.max_results {
        scope_1865.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1866).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("DryRun");
    if let Some(var_1870) = &input.dry_run {
        scope_1869.boolean(*var_1870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("Filter");
    if let Some(var_1872) = &input.filters {
        let mut list_1874 = scope_1871.start_list(true, Some("Filter"));
        for item_1873 in var_1872 {
            #[allow(unused_mut)]
            let mut entry_1875 = list_1874.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1875, item_1873);
        }
        list_1874.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1876 = writer.prefix("ZoneName");
    if let Some(var_1877) = &input.zone_names {
        let mut list_1879 = scope_1876.start_list(true, Some("ZoneName"));
        for item_1878 in var_1877 {
            #[allow(unused_mut)]
            let mut entry_1880 = list_1879.entry();
            entry_1880.string(item_1878);
        }
        list_1879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("ZoneId");
    if let Some(var_1882) = &input.zone_ids {
        let mut list_1884 = scope_1881.start_list(true, Some("ZoneId"));
        for item_1883 in var_1882 {
            #[allow(unused_mut)]
            let mut entry_1885 = list_1884.entry();
            entry_1885.string(item_1883);
        }
        list_1884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1887) = &input.all_availability_zones {
        scope_1886.boolean(*var_1887);
    }
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("DryRun");
    if let Some(var_1889) = &input.dry_run {
        scope_1888.boolean(*var_1889);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("BundleId");
    if let Some(var_1891) = &input.bundle_ids {
        let mut list_1893 = scope_1890.start_list(true, Some("BundleId"));
        for item_1892 in var_1891 {
            #[allow(unused_mut)]
            let mut entry_1894 = list_1893.entry();
            entry_1894.string(item_1892);
        }
        list_1893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("Filter");
    if let Some(var_1896) = &input.filters {
        let mut list_1898 = scope_1895.start_list(true, Some("Filter"));
        for item_1897 in var_1896 {
            #[allow(unused_mut)]
            let mut entry_1899 = list_1898.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1899, item_1897);
        }
        list_1898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("DryRun");
    if let Some(var_1901) = &input.dry_run {
        scope_1900.boolean(*var_1901);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("DryRun");
    if let Some(var_1903) = &input.dry_run {
        scope_1902.boolean(*var_1903);
    }
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("MaxResults");
    if let Some(var_1905) = &input.max_results {
        scope_1904.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1905).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("NextToken");
    if let Some(var_1907) = &input.next_token {
        scope_1906.string(var_1907);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_1909) = &input.capacity_reservation_fleet_ids {
        let mut list_1911 = scope_1908.start_list(true, Some("item"));
        for item_1910 in var_1909 {
            #[allow(unused_mut)]
            let mut entry_1912 = list_1911.entry();
            entry_1912.string(item_1910);
        }
        list_1911.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("NextToken");
    if let Some(var_1914) = &input.next_token {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("MaxResults");
    if let Some(var_1916) = &input.max_results {
        scope_1915.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1916).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("Filter");
    if let Some(var_1918) = &input.filters {
        let mut list_1920 = scope_1917.start_list(true, Some("Filter"));
        for item_1919 in var_1918 {
            #[allow(unused_mut)]
            let mut entry_1921 = list_1920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1921, item_1919);
        }
        list_1920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("DryRun");
    if let Some(var_1923) = &input.dry_run {
        scope_1922.boolean(*var_1923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("CapacityReservationId");
    if let Some(var_1925) = &input.capacity_reservation_ids {
        let mut list_1927 = scope_1924.start_list(true, Some("item"));
        for item_1926 in var_1925 {
            #[allow(unused_mut)]
            let mut entry_1928 = list_1927.entry();
            entry_1928.string(item_1926);
        }
        list_1927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("NextToken");
    if let Some(var_1930) = &input.next_token {
        scope_1929.string(var_1930);
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("MaxResults");
    if let Some(var_1932) = &input.max_results {
        scope_1931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("Filter");
    if let Some(var_1934) = &input.filters {
        let mut list_1936 = scope_1933.start_list(true, Some("Filter"));
        for item_1935 in var_1934 {
            #[allow(unused_mut)]
            let mut entry_1937 = list_1936.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1937, item_1935);
        }
        list_1936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("CarrierGatewayId");
    if let Some(var_1941) = &input.carrier_gateway_ids {
        let mut list_1943 = scope_1940.start_list(true, None);
        for item_1942 in var_1941 {
            #[allow(unused_mut)]
            let mut entry_1944 = list_1943.entry();
            entry_1944.string(item_1942);
        }
        list_1943.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("Filter");
    if let Some(var_1946) = &input.filters {
        let mut list_1948 = scope_1945.start_list(true, Some("Filter"));
        for item_1947 in var_1946 {
            #[allow(unused_mut)]
            let mut entry_1949 = list_1948.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1949, item_1947);
        }
        list_1948.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("MaxResults");
    if let Some(var_1951) = &input.max_results {
        scope_1950.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1951).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("NextToken");
    if let Some(var_1953) = &input.next_token {
        scope_1952.string(var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("DryRun");
    if let Some(var_1955) = &input.dry_run {
        scope_1954.boolean(*var_1955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("Filter");
    if let Some(var_1957) = &input.filters {
        let mut list_1959 = scope_1956.start_list(true, Some("Filter"));
        for item_1958 in var_1957 {
            #[allow(unused_mut)]
            let mut entry_1960 = list_1959.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1960, item_1958);
        }
        list_1959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1961 = writer.prefix("DryRun");
    if let Some(var_1962) = &input.dry_run {
        scope_1961.boolean(*var_1962);
    }
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("InstanceId");
    if let Some(var_1964) = &input.instance_ids {
        let mut list_1966 = scope_1963.start_list(true, Some("InstanceId"));
        for item_1965 in var_1964 {
            #[allow(unused_mut)]
            let mut entry_1967 = list_1966.entry();
            entry_1967.string(item_1965);
        }
        list_1966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("MaxResults");
    if let Some(var_1969) = &input.max_results {
        scope_1968.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1969).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("NextToken");
    if let Some(var_1971) = &input.next_token {
        scope_1970.string(var_1971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1973) = &input.client_vpn_endpoint_id {
        scope_1972.string(var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("NextToken");
    if let Some(var_1977) = &input.next_token {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("Filter");
    if let Some(var_1979) = &input.filters {
        let mut list_1981 = scope_1978.start_list(true, Some("Filter"));
        for item_1980 in var_1979 {
            #[allow(unused_mut)]
            let mut entry_1982 = list_1981.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1982, item_1980);
        }
        list_1981.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("MaxResults");
    if let Some(var_1984) = &input.max_results {
        scope_1983.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1984).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1986) = &input.client_vpn_endpoint_id {
        scope_1985.string(var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("Filter");
    if let Some(var_1988) = &input.filters {
        let mut list_1990 = scope_1987.start_list(true, Some("Filter"));
        for item_1989 in var_1988 {
            #[allow(unused_mut)]
            let mut entry_1991 = list_1990.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1991, item_1989);
        }
        list_1990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("NextToken");
    if let Some(var_1993) = &input.next_token {
        scope_1992.string(var_1993);
    }
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("MaxResults");
    if let Some(var_1995) = &input.max_results {
        scope_1994.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1995).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("DryRun");
    if let Some(var_1997) = &input.dry_run {
        scope_1996.boolean(*var_1997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1998 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1999) = &input.client_vpn_endpoint_ids {
        let mut list_2001 = scope_1998.start_list(true, Some("item"));
        for item_2000 in var_1999 {
            #[allow(unused_mut)]
            let mut entry_2002 = list_2001.entry();
            entry_2002.string(item_2000);
        }
        list_2001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("MaxResults");
    if let Some(var_2004) = &input.max_results {
        scope_2003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2004).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("NextToken");
    if let Some(var_2006) = &input.next_token {
        scope_2005.string(var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("Filter");
    if let Some(var_2008) = &input.filters {
        let mut list_2010 = scope_2007.start_list(true, Some("Filter"));
        for item_2009 in var_2008 {
            #[allow(unused_mut)]
            let mut entry_2011 = list_2010.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2011, item_2009);
        }
        list_2010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("DryRun");
    if let Some(var_2013) = &input.dry_run {
        scope_2012.boolean(*var_2013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2015) = &input.client_vpn_endpoint_id {
        scope_2014.string(var_2015);
    }
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("Filter");
    if let Some(var_2017) = &input.filters {
        let mut list_2019 = scope_2016.start_list(true, Some("Filter"));
        for item_2018 in var_2017 {
            #[allow(unused_mut)]
            let mut entry_2020 = list_2019.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2020, item_2018);
        }
        list_2019.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("MaxResults");
    if let Some(var_2022) = &input.max_results {
        scope_2021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2022).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("NextToken");
    if let Some(var_2024) = &input.next_token {
        scope_2023.string(var_2024);
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("DryRun");
    if let Some(var_2026) = &input.dry_run {
        scope_2025.boolean(*var_2026);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2028) = &input.client_vpn_endpoint_id {
        scope_2027.string(var_2028);
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("AssociationIds");
    if let Some(var_2030) = &input.association_ids {
        let mut list_2032 = scope_2029.start_list(true, Some("item"));
        for item_2031 in var_2030 {
            #[allow(unused_mut)]
            let mut entry_2033 = list_2032.entry();
            entry_2033.string(item_2031);
        }
        list_2032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("MaxResults");
    if let Some(var_2035) = &input.max_results {
        scope_2034.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2035).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2036 = writer.prefix("NextToken");
    if let Some(var_2037) = &input.next_token {
        scope_2036.string(var_2037);
    }
    #[allow(unused_mut)]
    let mut scope_2038 = writer.prefix("Filter");
    if let Some(var_2039) = &input.filters {
        let mut list_2041 = scope_2038.start_list(true, Some("Filter"));
        for item_2040 in var_2039 {
            #[allow(unused_mut)]
            let mut entry_2042 = list_2041.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2042, item_2040);
        }
        list_2041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("DryRun");
    if let Some(var_2044) = &input.dry_run {
        scope_2043.boolean(*var_2044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("PoolId");
    if let Some(var_2046) = &input.pool_ids {
        let mut list_2048 = scope_2045.start_list(true, Some("item"));
        for item_2047 in var_2046 {
            #[allow(unused_mut)]
            let mut entry_2049 = list_2048.entry();
            entry_2049.string(item_2047);
        }
        list_2048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2050 = writer.prefix("Filter");
    if let Some(var_2051) = &input.filters {
        let mut list_2053 = scope_2050.start_list(true, Some("Filter"));
        for item_2052 in var_2051 {
            #[allow(unused_mut)]
            let mut entry_2054 = list_2053.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2054, item_2052);
        }
        list_2053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("MaxResults");
    if let Some(var_2056) = &input.max_results {
        scope_2055.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2056).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("NextToken");
    if let Some(var_2058) = &input.next_token {
        scope_2057.string(var_2058);
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("DryRun");
    if let Some(var_2060) = &input.dry_run {
        scope_2059.boolean(*var_2060);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("ConversionTaskId");
    if let Some(var_2062) = &input.conversion_task_ids {
        let mut list_2064 = scope_2061.start_list(true, Some("item"));
        for item_2063 in var_2062 {
            #[allow(unused_mut)]
            let mut entry_2065 = list_2064.entry();
            entry_2065.string(item_2063);
        }
        list_2064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("DryRun");
    if let Some(var_2067) = &input.dry_run {
        scope_2066.boolean(*var_2067);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("CustomerGatewayId");
    if let Some(var_2069) = &input.customer_gateway_ids {
        let mut list_2071 = scope_2068.start_list(true, Some("CustomerGatewayId"));
        for item_2070 in var_2069 {
            #[allow(unused_mut)]
            let mut entry_2072 = list_2071.entry();
            entry_2072.string(item_2070);
        }
        list_2071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("Filter");
    if let Some(var_2074) = &input.filters {
        let mut list_2076 = scope_2073.start_list(true, Some("Filter"));
        for item_2075 in var_2074 {
            #[allow(unused_mut)]
            let mut entry_2077 = list_2076.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2077, item_2075);
        }
        list_2076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("DryRun");
    if let Some(var_2079) = &input.dry_run {
        scope_2078.boolean(*var_2079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("DhcpOptionsId");
    if let Some(var_2081) = &input.dhcp_options_ids {
        let mut list_2083 = scope_2080.start_list(true, Some("DhcpOptionsId"));
        for item_2082 in var_2081 {
            #[allow(unused_mut)]
            let mut entry_2084 = list_2083.entry();
            entry_2084.string(item_2082);
        }
        list_2083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("Filter");
    if let Some(var_2086) = &input.filters {
        let mut list_2088 = scope_2085.start_list(true, Some("Filter"));
        for item_2087 in var_2086 {
            #[allow(unused_mut)]
            let mut entry_2089 = list_2088.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2089, item_2087);
        }
        list_2088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2090 = writer.prefix("DryRun");
    if let Some(var_2091) = &input.dry_run {
        scope_2090.boolean(*var_2091);
    }
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("NextToken");
    if let Some(var_2093) = &input.next_token {
        scope_2092.string(var_2093);
    }
    #[allow(unused_mut)]
    let mut scope_2094 = writer.prefix("MaxResults");
    if let Some(var_2095) = &input.max_results {
        scope_2094.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2095).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("DryRun");
    if let Some(var_2097) = &input.dry_run {
        scope_2096.boolean(*var_2097);
    }
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2099) = &input.egress_only_internet_gateway_ids {
        let mut list_2101 = scope_2098.start_list(true, Some("item"));
        for item_2100 in var_2099 {
            #[allow(unused_mut)]
            let mut entry_2102 = list_2101.entry();
            entry_2102.string(item_2100);
        }
        list_2101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("MaxResults");
    if let Some(var_2104) = &input.max_results {
        scope_2103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("NextToken");
    if let Some(var_2106) = &input.next_token {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("Filter");
    if let Some(var_2108) = &input.filters {
        let mut list_2110 = scope_2107.start_list(true, Some("Filter"));
        for item_2109 in var_2108 {
            #[allow(unused_mut)]
            let mut entry_2111 = list_2110.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2111, item_2109);
        }
        list_2110.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("ElasticGpuId");
    if let Some(var_2113) = &input.elastic_gpu_ids {
        let mut list_2115 = scope_2112.start_list(true, Some("item"));
        for item_2114 in var_2113 {
            #[allow(unused_mut)]
            let mut entry_2116 = list_2115.entry();
            entry_2116.string(item_2114);
        }
        list_2115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("DryRun");
    if let Some(var_2118) = &input.dry_run {
        scope_2117.boolean(*var_2118);
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("Filter");
    if let Some(var_2120) = &input.filters {
        let mut list_2122 = scope_2119.start_list(true, Some("Filter"));
        for item_2121 in var_2120 {
            #[allow(unused_mut)]
            let mut entry_2123 = list_2122.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2123, item_2121);
        }
        list_2122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("MaxResults");
    if let Some(var_2125) = &input.max_results {
        scope_2124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("NextToken");
    if let Some(var_2127) = &input.next_token {
        scope_2126.string(var_2127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("DryRun");
    if let Some(var_2129) = &input.dry_run {
        scope_2128.boolean(*var_2129);
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("Filter");
    if let Some(var_2131) = &input.filters {
        let mut list_2133 = scope_2130.start_list(true, Some("Filter"));
        for item_2132 in var_2131 {
            #[allow(unused_mut)]
            let mut entry_2134 = list_2133.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2134, item_2132);
        }
        list_2133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("ExportImageTaskId");
    if let Some(var_2136) = &input.export_image_task_ids {
        let mut list_2138 = scope_2135.start_list(true, Some("ExportImageTaskId"));
        for item_2137 in var_2136 {
            #[allow(unused_mut)]
            let mut entry_2139 = list_2138.entry();
            entry_2139.string(item_2137);
        }
        list_2138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("MaxResults");
    if let Some(var_2141) = &input.max_results {
        scope_2140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("NextToken");
    if let Some(var_2143) = &input.next_token {
        scope_2142.string(var_2143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("ExportTaskId");
    if let Some(var_2145) = &input.export_task_ids {
        let mut list_2147 = scope_2144.start_list(true, Some("ExportTaskId"));
        for item_2146 in var_2145 {
            #[allow(unused_mut)]
            let mut entry_2148 = list_2147.entry();
            entry_2148.string(item_2146);
        }
        list_2147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2149 = writer.prefix("Filter");
    if let Some(var_2150) = &input.filters {
        let mut list_2152 = scope_2149.start_list(true, Some("Filter"));
        for item_2151 in var_2150 {
            #[allow(unused_mut)]
            let mut entry_2153 = list_2152.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2153, item_2151);
        }
        list_2152.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("Filter");
    if let Some(var_2155) = &input.filters {
        let mut list_2157 = scope_2154.start_list(true, Some("Filter"));
        for item_2156 in var_2155 {
            #[allow(unused_mut)]
            let mut entry_2158 = list_2157.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2158, item_2156);
        }
        list_2157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("MaxResults");
    if let Some(var_2160) = &input.max_results {
        scope_2159.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2160).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("NextToken");
    if let Some(var_2162) = &input.next_token {
        scope_2161.string(var_2162);
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("DryRun");
    if let Some(var_2164) = &input.dry_run {
        scope_2163.boolean(*var_2164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("DryRun");
    if let Some(var_2166) = &input.dry_run {
        scope_2165.boolean(*var_2166);
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("EventType");
    if let Some(var_2168) = &input.event_type {
        scope_2167.string(var_2168.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("MaxResults");
    if let Some(var_2170) = &input.max_results {
        scope_2169.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("NextToken");
    if let Some(var_2172) = &input.next_token {
        scope_2171.string(var_2172);
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("FleetId");
    if let Some(var_2174) = &input.fleet_id {
        scope_2173.string(var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("StartTime");
    if let Some(var_2176) = &input.start_time {
        scope_2175.instant(var_2176, aws_smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("DryRun");
    if let Some(var_2178) = &input.dry_run {
        scope_2177.boolean(*var_2178);
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("MaxResults");
    if let Some(var_2180) = &input.max_results {
        scope_2179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("NextToken");
    if let Some(var_2182) = &input.next_token {
        scope_2181.string(var_2182);
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("FleetId");
    if let Some(var_2184) = &input.fleet_id {
        scope_2183.string(var_2184);
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("Filter");
    if let Some(var_2186) = &input.filters {
        let mut list_2188 = scope_2185.start_list(true, Some("Filter"));
        for item_2187 in var_2186 {
            #[allow(unused_mut)]
            let mut entry_2189 = list_2188.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2189, item_2187);
        }
        list_2188.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("DryRun");
    if let Some(var_2191) = &input.dry_run {
        scope_2190.boolean(*var_2191);
    }
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("MaxResults");
    if let Some(var_2193) = &input.max_results {
        scope_2192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2193).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("NextToken");
    if let Some(var_2195) = &input.next_token {
        scope_2194.string(var_2195);
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("FleetId");
    if let Some(var_2197) = &input.fleet_ids {
        let mut list_2199 = scope_2196.start_list(true, None);
        for item_2198 in var_2197 {
            #[allow(unused_mut)]
            let mut entry_2200 = list_2199.entry();
            entry_2200.string(item_2198);
        }
        list_2199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2201 = writer.prefix("Filter");
    if let Some(var_2202) = &input.filters {
        let mut list_2204 = scope_2201.start_list(true, Some("Filter"));
        for item_2203 in var_2202 {
            #[allow(unused_mut)]
            let mut entry_2205 = list_2204.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2205, item_2203);
        }
        list_2204.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2206 = writer.prefix("DryRun");
    if let Some(var_2207) = &input.dry_run {
        scope_2206.boolean(*var_2207);
    }
    #[allow(unused_mut)]
    let mut scope_2208 = writer.prefix("Filter");
    if let Some(var_2209) = &input.filter {
        let mut list_2211 = scope_2208.start_list(true, Some("Filter"));
        for item_2210 in var_2209 {
            #[allow(unused_mut)]
            let mut entry_2212 = list_2211.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2212, item_2210);
        }
        list_2211.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2213 = writer.prefix("FlowLogId");
    if let Some(var_2214) = &input.flow_log_ids {
        let mut list_2216 = scope_2213.start_list(true, Some("item"));
        for item_2215 in var_2214 {
            #[allow(unused_mut)]
            let mut entry_2217 = list_2216.entry();
            entry_2217.string(item_2215);
        }
        list_2216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("MaxResults");
    if let Some(var_2219) = &input.max_results {
        scope_2218.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2219).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("NextToken");
    if let Some(var_2221) = &input.next_token {
        scope_2220.string(var_2221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("DryRun");
    if let Some(var_2223) = &input.dry_run {
        scope_2222.boolean(*var_2223);
    }
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("FpgaImageId");
    if let Some(var_2225) = &input.fpga_image_id {
        scope_2224.string(var_2225);
    }
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("Attribute");
    if let Some(var_2227) = &input.attribute {
        scope_2226.string(var_2227.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("DryRun");
    if let Some(var_2229) = &input.dry_run {
        scope_2228.boolean(*var_2229);
    }
    #[allow(unused_mut)]
    let mut scope_2230 = writer.prefix("FpgaImageId");
    if let Some(var_2231) = &input.fpga_image_ids {
        let mut list_2233 = scope_2230.start_list(true, Some("item"));
        for item_2232 in var_2231 {
            #[allow(unused_mut)]
            let mut entry_2234 = list_2233.entry();
            entry_2234.string(item_2232);
        }
        list_2233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2235 = writer.prefix("Owner");
    if let Some(var_2236) = &input.owners {
        let mut list_2238 = scope_2235.start_list(true, Some("Owner"));
        for item_2237 in var_2236 {
            #[allow(unused_mut)]
            let mut entry_2239 = list_2238.entry();
            entry_2239.string(item_2237);
        }
        list_2238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("Filter");
    if let Some(var_2241) = &input.filters {
        let mut list_2243 = scope_2240.start_list(true, Some("Filter"));
        for item_2242 in var_2241 {
            #[allow(unused_mut)]
            let mut entry_2244 = list_2243.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2244, item_2242);
        }
        list_2243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2245 = writer.prefix("NextToken");
    if let Some(var_2246) = &input.next_token {
        scope_2245.string(var_2246);
    }
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("MaxResults");
    if let Some(var_2248) = &input.max_results {
        scope_2247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2248).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2249 = writer.prefix("Filter");
    if let Some(var_2250) = &input.filter {
        let mut list_2252 = scope_2249.start_list(true, Some("Filter"));
        for item_2251 in var_2250 {
            #[allow(unused_mut)]
            let mut entry_2253 = list_2252.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2253, item_2251);
        }
        list_2252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("MaxDuration");
    if let Some(var_2255) = &input.max_duration {
        scope_2254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2255).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("MaxResults");
    if let Some(var_2257) = &input.max_results {
        scope_2256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("MinDuration");
    if let Some(var_2259) = &input.min_duration {
        scope_2258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("NextToken");
    if let Some(var_2261) = &input.next_token {
        scope_2260.string(var_2261);
    }
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("OfferingId");
    if let Some(var_2263) = &input.offering_id {
        scope_2262.string(var_2263);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("Filter");
    if let Some(var_2265) = &input.filter {
        let mut list_2267 = scope_2264.start_list(true, Some("Filter"));
        for item_2266 in var_2265 {
            #[allow(unused_mut)]
            let mut entry_2268 = list_2267.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2268, item_2266);
        }
        list_2267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2269 = writer.prefix("HostReservationIdSet");
    if let Some(var_2270) = &input.host_reservation_id_set {
        let mut list_2272 = scope_2269.start_list(true, Some("item"));
        for item_2271 in var_2270 {
            #[allow(unused_mut)]
            let mut entry_2273 = list_2272.entry();
            entry_2273.string(item_2271);
        }
        list_2272.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("MaxResults");
    if let Some(var_2275) = &input.max_results {
        scope_2274.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2275).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("NextToken");
    if let Some(var_2277) = &input.next_token {
        scope_2276.string(var_2277);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2278 = writer.prefix("Filter");
    if let Some(var_2279) = &input.filter {
        let mut list_2281 = scope_2278.start_list(true, Some("Filter"));
        for item_2280 in var_2279 {
            #[allow(unused_mut)]
            let mut entry_2282 = list_2281.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2282, item_2280);
        }
        list_2281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("HostId");
    if let Some(var_2284) = &input.host_ids {
        let mut list_2286 = scope_2283.start_list(true, Some("item"));
        for item_2285 in var_2284 {
            #[allow(unused_mut)]
            let mut entry_2287 = list_2286.entry();
            entry_2287.string(item_2285);
        }
        list_2286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2288 = writer.prefix("MaxResults");
    if let Some(var_2289) = &input.max_results {
        scope_2288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2290 = writer.prefix("NextToken");
    if let Some(var_2291) = &input.next_token {
        scope_2290.string(var_2291);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2292 = writer.prefix("AssociationId");
    if let Some(var_2293) = &input.association_ids {
        let mut list_2295 = scope_2292.start_list(true, Some("AssociationId"));
        for item_2294 in var_2293 {
            #[allow(unused_mut)]
            let mut entry_2296 = list_2295.entry();
            entry_2296.string(item_2294);
        }
        list_2295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2297 = writer.prefix("Filter");
    if let Some(var_2298) = &input.filters {
        let mut list_2300 = scope_2297.start_list(true, Some("Filter"));
        for item_2299 in var_2298 {
            #[allow(unused_mut)]
            let mut entry_2301 = list_2300.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2301, item_2299);
        }
        list_2300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("MaxResults");
    if let Some(var_2303) = &input.max_results {
        scope_2302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("NextToken");
    if let Some(var_2305) = &input.next_token {
        scope_2304.string(var_2305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("PrincipalArn");
    if let Some(var_2307) = &input.principal_arn {
        scope_2306.string(var_2307);
    }
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("Resource");
    if let Some(var_2309) = &input.resource {
        scope_2308.string(var_2309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("Resource");
    if let Some(var_2311) = &input.resource {
        scope_2310.string(var_2311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("Attribute");
    if let Some(var_2313) = &input.attribute {
        scope_2312.string(var_2313.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("ImageId");
    if let Some(var_2315) = &input.image_id {
        scope_2314.string(var_2315);
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("DryRun");
    if let Some(var_2317) = &input.dry_run {
        scope_2316.boolean(*var_2317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2318 = writer.prefix("ExecutableBy");
    if let Some(var_2319) = &input.executable_users {
        let mut list_2321 = scope_2318.start_list(true, Some("ExecutableBy"));
        for item_2320 in var_2319 {
            #[allow(unused_mut)]
            let mut entry_2322 = list_2321.entry();
            entry_2322.string(item_2320);
        }
        list_2321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("Filter");
    if let Some(var_2324) = &input.filters {
        let mut list_2326 = scope_2323.start_list(true, Some("Filter"));
        for item_2325 in var_2324 {
            #[allow(unused_mut)]
            let mut entry_2327 = list_2326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2327, item_2325);
        }
        list_2326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2328 = writer.prefix("ImageId");
    if let Some(var_2329) = &input.image_ids {
        let mut list_2331 = scope_2328.start_list(true, Some("ImageId"));
        for item_2330 in var_2329 {
            #[allow(unused_mut)]
            let mut entry_2332 = list_2331.entry();
            entry_2332.string(item_2330);
        }
        list_2331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("Owner");
    if let Some(var_2334) = &input.owners {
        let mut list_2336 = scope_2333.start_list(true, Some("Owner"));
        for item_2335 in var_2334 {
            #[allow(unused_mut)]
            let mut entry_2337 = list_2336.entry();
            entry_2337.string(item_2335);
        }
        list_2336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("IncludeDeprecated");
    if let Some(var_2339) = &input.include_deprecated {
        scope_2338.boolean(*var_2339);
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("DryRun");
    if let Some(var_2341) = &input.dry_run {
        scope_2340.boolean(*var_2341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("DryRun");
    if let Some(var_2343) = &input.dry_run {
        scope_2342.boolean(*var_2343);
    }
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("Filters");
    if let Some(var_2345) = &input.filters {
        let mut list_2347 = scope_2344.start_list(true, Some("Filter"));
        for item_2346 in var_2345 {
            #[allow(unused_mut)]
            let mut entry_2348 = list_2347.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2348, item_2346);
        }
        list_2347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("ImportTaskId");
    if let Some(var_2350) = &input.import_task_ids {
        let mut list_2352 = scope_2349.start_list(true, Some("ImportTaskId"));
        for item_2351 in var_2350 {
            #[allow(unused_mut)]
            let mut entry_2353 = list_2352.entry();
            entry_2353.string(item_2351);
        }
        list_2352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("MaxResults");
    if let Some(var_2355) = &input.max_results {
        scope_2354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("NextToken");
    if let Some(var_2357) = &input.next_token {
        scope_2356.string(var_2357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("DryRun");
    if let Some(var_2359) = &input.dry_run {
        scope_2358.boolean(*var_2359);
    }
    #[allow(unused_mut)]
    let mut scope_2360 = writer.prefix("Filters");
    if let Some(var_2361) = &input.filters {
        let mut list_2363 = scope_2360.start_list(true, Some("Filter"));
        for item_2362 in var_2361 {
            #[allow(unused_mut)]
            let mut entry_2364 = list_2363.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2364, item_2362);
        }
        list_2363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2365 = writer.prefix("ImportTaskId");
    if let Some(var_2366) = &input.import_task_ids {
        let mut list_2368 = scope_2365.start_list(true, Some("ImportTaskId"));
        for item_2367 in var_2366 {
            #[allow(unused_mut)]
            let mut entry_2369 = list_2368.entry();
            entry_2369.string(item_2367);
        }
        list_2368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("MaxResults");
    if let Some(var_2371) = &input.max_results {
        scope_2370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2371).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("NextToken");
    if let Some(var_2373) = &input.next_token {
        scope_2372.string(var_2373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("Attribute");
    if let Some(var_2375) = &input.attribute {
        scope_2374.string(var_2375.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("DryRun");
    if let Some(var_2377) = &input.dry_run {
        scope_2376.boolean(*var_2377);
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("InstanceId");
    if let Some(var_2379) = &input.instance_id {
        scope_2378.string(var_2379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("DryRun");
    if let Some(var_2381) = &input.dry_run {
        scope_2380.boolean(*var_2381);
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("Filter");
    if let Some(var_2383) = &input.filters {
        let mut list_2385 = scope_2382.start_list(true, Some("Filter"));
        for item_2384 in var_2383 {
            #[allow(unused_mut)]
            let mut entry_2386 = list_2385.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2386, item_2384);
        }
        list_2385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2387 = writer.prefix("InstanceId");
    if let Some(var_2388) = &input.instance_ids {
        let mut list_2390 = scope_2387.start_list(true, Some("InstanceId"));
        for item_2389 in var_2388 {
            #[allow(unused_mut)]
            let mut entry_2391 = list_2390.entry();
            entry_2391.string(item_2389);
        }
        list_2390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("MaxResults");
    if let Some(var_2393) = &input.max_results {
        scope_2392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("NextToken");
    if let Some(var_2395) = &input.next_token {
        scope_2394.string(var_2395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("DryRun");
    if let Some(var_2397) = &input.dry_run {
        scope_2396.boolean(*var_2397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("DryRun");
    if let Some(var_2399) = &input.dry_run {
        scope_2398.boolean(*var_2399);
    }
    #[allow(unused_mut)]
    let mut scope_2400 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2401) = &input.instance_event_window_ids {
        let mut list_2403 = scope_2400.start_list(true, Some("InstanceEventWindowId"));
        for item_2402 in var_2401 {
            #[allow(unused_mut)]
            let mut entry_2404 = list_2403.entry();
            entry_2404.string(item_2402);
        }
        list_2403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2405 = writer.prefix("Filter");
    if let Some(var_2406) = &input.filters {
        let mut list_2408 = scope_2405.start_list(true, Some("Filter"));
        for item_2407 in var_2406 {
            #[allow(unused_mut)]
            let mut entry_2409 = list_2408.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2409, item_2407);
        }
        list_2408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("MaxResults");
    if let Some(var_2411) = &input.max_results {
        scope_2410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("NextToken");
    if let Some(var_2413) = &input.next_token {
        scope_2412.string(var_2413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("Filter");
    if let Some(var_2415) = &input.filters {
        let mut list_2417 = scope_2414.start_list(true, Some("Filter"));
        for item_2416 in var_2415 {
            #[allow(unused_mut)]
            let mut entry_2418 = list_2417.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2418, item_2416);
        }
        list_2417.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2419 = writer.prefix("InstanceId");
    if let Some(var_2420) = &input.instance_ids {
        let mut list_2422 = scope_2419.start_list(true, Some("InstanceId"));
        for item_2421 in var_2420 {
            #[allow(unused_mut)]
            let mut entry_2423 = list_2422.entry();
            entry_2423.string(item_2421);
        }
        list_2422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("DryRun");
    if let Some(var_2425) = &input.dry_run {
        scope_2424.boolean(*var_2425);
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("MaxResults");
    if let Some(var_2427) = &input.max_results {
        scope_2426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("NextToken");
    if let Some(var_2429) = &input.next_token {
        scope_2428.string(var_2429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("Filter");
    if let Some(var_2431) = &input.filters {
        let mut list_2433 = scope_2430.start_list(true, Some("Filter"));
        for item_2432 in var_2431 {
            #[allow(unused_mut)]
            let mut entry_2434 = list_2433.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2434, item_2432);
        }
        list_2433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("InstanceId");
    if let Some(var_2436) = &input.instance_ids {
        let mut list_2438 = scope_2435.start_list(true, Some("InstanceId"));
        for item_2437 in var_2436 {
            #[allow(unused_mut)]
            let mut entry_2439 = list_2438.entry();
            entry_2439.string(item_2437);
        }
        list_2438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2440 = writer.prefix("MaxResults");
    if let Some(var_2441) = &input.max_results {
        scope_2440.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2441).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("NextToken");
    if let Some(var_2443) = &input.next_token {
        scope_2442.string(var_2443);
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("DryRun");
    if let Some(var_2445) = &input.dry_run {
        scope_2444.boolean(*var_2445);
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("IncludeAllInstances");
    if let Some(var_2447) = &input.include_all_instances {
        scope_2446.boolean(*var_2447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("DryRun");
    if let Some(var_2449) = &input.dry_run {
        scope_2448.boolean(*var_2449);
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("LocationType");
    if let Some(var_2451) = &input.location_type {
        scope_2450.string(var_2451.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("Filter");
    if let Some(var_2453) = &input.filters {
        let mut list_2455 = scope_2452.start_list(true, Some("Filter"));
        for item_2454 in var_2453 {
            #[allow(unused_mut)]
            let mut entry_2456 = list_2455.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2456, item_2454);
        }
        list_2455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2457 = writer.prefix("MaxResults");
    if let Some(var_2458) = &input.max_results {
        scope_2457.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2458).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("NextToken");
    if let Some(var_2460) = &input.next_token {
        scope_2459.string(var_2460);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("DryRun");
    if let Some(var_2462) = &input.dry_run {
        scope_2461.boolean(*var_2462);
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("InstanceType");
    if let Some(var_2464) = &input.instance_types {
        let mut list_2466 = scope_2463.start_list(true, None);
        for item_2465 in var_2464 {
            #[allow(unused_mut)]
            let mut entry_2467 = list_2466.entry();
            entry_2467.string(item_2465.as_str());
        }
        list_2466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2468 = writer.prefix("Filter");
    if let Some(var_2469) = &input.filters {
        let mut list_2471 = scope_2468.start_list(true, Some("Filter"));
        for item_2470 in var_2469 {
            #[allow(unused_mut)]
            let mut entry_2472 = list_2471.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2472, item_2470);
        }
        list_2471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("MaxResults");
    if let Some(var_2474) = &input.max_results {
        scope_2473.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2474).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("NextToken");
    if let Some(var_2476) = &input.next_token {
        scope_2475.string(var_2476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("Filter");
    if let Some(var_2478) = &input.filters {
        let mut list_2480 = scope_2477.start_list(true, Some("Filter"));
        for item_2479 in var_2478 {
            #[allow(unused_mut)]
            let mut entry_2481 = list_2480.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2481, item_2479);
        }
        list_2480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("DryRun");
    if let Some(var_2483) = &input.dry_run {
        scope_2482.boolean(*var_2483);
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("InternetGatewayId");
    if let Some(var_2485) = &input.internet_gateway_ids {
        let mut list_2487 = scope_2484.start_list(true, Some("item"));
        for item_2486 in var_2485 {
            #[allow(unused_mut)]
            let mut entry_2488 = list_2487.entry();
            entry_2488.string(item_2486);
        }
        list_2487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("NextToken");
    if let Some(var_2490) = &input.next_token {
        scope_2489.string(var_2490);
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("MaxResults");
    if let Some(var_2492) = &input.max_results {
        scope_2491.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2492).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2493 = writer.prefix("PoolId");
    if let Some(var_2494) = &input.pool_ids {
        let mut list_2496 = scope_2493.start_list(true, Some("item"));
        for item_2495 in var_2494 {
            #[allow(unused_mut)]
            let mut entry_2497 = list_2496.entry();
            entry_2497.string(item_2495);
        }
        list_2496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("NextToken");
    if let Some(var_2499) = &input.next_token {
        scope_2498.string(var_2499);
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("MaxResults");
    if let Some(var_2501) = &input.max_results {
        scope_2500.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2501).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("DryRun");
    if let Some(var_2503) = &input.dry_run {
        scope_2502.boolean(*var_2503);
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("Filter");
    if let Some(var_2505) = &input.filters {
        let mut list_2507 = scope_2504.start_list(true, Some("Filter"));
        for item_2506 in var_2505 {
            #[allow(unused_mut)]
            let mut entry_2508 = list_2507.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2508, item_2506);
        }
        list_2507.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2509 = writer.prefix("Filter");
    if let Some(var_2510) = &input.filters {
        let mut list_2512 = scope_2509.start_list(true, Some("Filter"));
        for item_2511 in var_2510 {
            #[allow(unused_mut)]
            let mut entry_2513 = list_2512.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2513, item_2511);
        }
        list_2512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2514 = writer.prefix("KeyName");
    if let Some(var_2515) = &input.key_names {
        let mut list_2517 = scope_2514.start_list(true, Some("KeyName"));
        for item_2516 in var_2515 {
            #[allow(unused_mut)]
            let mut entry_2518 = list_2517.entry();
            entry_2518.string(item_2516);
        }
        list_2517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("KeyPairId");
    if let Some(var_2520) = &input.key_pair_ids {
        let mut list_2522 = scope_2519.start_list(true, Some("KeyPairId"));
        for item_2521 in var_2520 {
            #[allow(unused_mut)]
            let mut entry_2523 = list_2522.entry();
            entry_2523.string(item_2521);
        }
        list_2522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2524 = writer.prefix("DryRun");
    if let Some(var_2525) = &input.dry_run {
        scope_2524.boolean(*var_2525);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2526 = writer.prefix("DryRun");
    if let Some(var_2527) = &input.dry_run {
        scope_2526.boolean(*var_2527);
    }
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("LaunchTemplateId");
    if let Some(var_2529) = &input.launch_template_ids {
        let mut list_2531 = scope_2528.start_list(true, Some("item"));
        for item_2530 in var_2529 {
            #[allow(unused_mut)]
            let mut entry_2532 = list_2531.entry();
            entry_2532.string(item_2530);
        }
        list_2531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2533 = writer.prefix("LaunchTemplateName");
    if let Some(var_2534) = &input.launch_template_names {
        let mut list_2536 = scope_2533.start_list(true, Some("item"));
        for item_2535 in var_2534 {
            #[allow(unused_mut)]
            let mut entry_2537 = list_2536.entry();
            entry_2537.string(item_2535);
        }
        list_2536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("Filter");
    if let Some(var_2539) = &input.filters {
        let mut list_2541 = scope_2538.start_list(true, Some("Filter"));
        for item_2540 in var_2539 {
            #[allow(unused_mut)]
            let mut entry_2542 = list_2541.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2542, item_2540);
        }
        list_2541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("NextToken");
    if let Some(var_2544) = &input.next_token {
        scope_2543.string(var_2544);
    }
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("MaxResults");
    if let Some(var_2546) = &input.max_results {
        scope_2545.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2546).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("DryRun");
    if let Some(var_2548) = &input.dry_run {
        scope_2547.boolean(*var_2548);
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("LaunchTemplateId");
    if let Some(var_2550) = &input.launch_template_id {
        scope_2549.string(var_2550);
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("LaunchTemplateName");
    if let Some(var_2552) = &input.launch_template_name {
        scope_2551.string(var_2552);
    }
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2554) = &input.versions {
        let mut list_2556 = scope_2553.start_list(true, Some("item"));
        for item_2555 in var_2554 {
            #[allow(unused_mut)]
            let mut entry_2557 = list_2556.entry();
            entry_2557.string(item_2555);
        }
        list_2556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2558 = writer.prefix("MinVersion");
    if let Some(var_2559) = &input.min_version {
        scope_2558.string(var_2559);
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("MaxVersion");
    if let Some(var_2561) = &input.max_version {
        scope_2560.string(var_2561);
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("NextToken");
    if let Some(var_2563) = &input.next_token {
        scope_2562.string(var_2563);
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("MaxResults");
    if let Some(var_2565) = &input.max_results {
        scope_2564.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("Filter");
    if let Some(var_2567) = &input.filters {
        let mut list_2569 = scope_2566.start_list(true, Some("Filter"));
        for item_2568 in var_2567 {
            #[allow(unused_mut)]
            let mut entry_2570 = list_2569.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2570, item_2568);
        }
        list_2569.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2571 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2572) = &input.local_gateway_route_table_ids {
        let mut list_2574 = scope_2571.start_list(true, Some("item"));
        for item_2573 in var_2572 {
            #[allow(unused_mut)]
            let mut entry_2575 = list_2574.entry();
            entry_2575.string(item_2573);
        }
        list_2574.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2576 = writer.prefix("Filter");
    if let Some(var_2577) = &input.filters {
        let mut list_2579 = scope_2576.start_list(true, Some("Filter"));
        for item_2578 in var_2577 {
            #[allow(unused_mut)]
            let mut entry_2580 = list_2579.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2580, item_2578);
        }
        list_2579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("MaxResults");
    if let Some(var_2582) = &input.max_results {
        scope_2581.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2582).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("NextToken");
    if let Some(var_2584) = &input.next_token {
        scope_2583.string(var_2584);
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("DryRun");
    if let Some(var_2586) = &input.dry_run {
        scope_2585.boolean(*var_2586);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2588) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2590 = scope_2587.start_list(true, Some("item"));
        for item_2589 in var_2588 {
            #[allow(unused_mut)]
            let mut entry_2591 = list_2590.entry();
            entry_2591.string(item_2589);
        }
        list_2590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("Filter");
    if let Some(var_2593) = &input.filters {
        let mut list_2595 = scope_2592.start_list(true, Some("Filter"));
        for item_2594 in var_2593 {
            #[allow(unused_mut)]
            let mut entry_2596 = list_2595.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2596, item_2594);
        }
        list_2595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2597 = writer.prefix("MaxResults");
    if let Some(var_2598) = &input.max_results {
        scope_2597.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2598).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("NextToken");
    if let Some(var_2600) = &input.next_token {
        scope_2599.string(var_2600);
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("DryRun");
    if let Some(var_2602) = &input.dry_run {
        scope_2601.boolean(*var_2602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2604) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2606 = scope_2603.start_list(true, Some("item"));
        for item_2605 in var_2604 {
            #[allow(unused_mut)]
            let mut entry_2607 = list_2606.entry();
            entry_2607.string(item_2605);
        }
        list_2606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2608 = writer.prefix("Filter");
    if let Some(var_2609) = &input.filters {
        let mut list_2611 = scope_2608.start_list(true, Some("Filter"));
        for item_2610 in var_2609 {
            #[allow(unused_mut)]
            let mut entry_2612 = list_2611.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2612, item_2610);
        }
        list_2611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2613 = writer.prefix("MaxResults");
    if let Some(var_2614) = &input.max_results {
        scope_2613.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2614).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2615 = writer.prefix("NextToken");
    if let Some(var_2616) = &input.next_token {
        scope_2615.string(var_2616);
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("DryRun");
    if let Some(var_2618) = &input.dry_run {
        scope_2617.boolean(*var_2618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("LocalGatewayId");
    if let Some(var_2620) = &input.local_gateway_ids {
        let mut list_2622 = scope_2619.start_list(true, Some("item"));
        for item_2621 in var_2620 {
            #[allow(unused_mut)]
            let mut entry_2623 = list_2622.entry();
            entry_2623.string(item_2621);
        }
        list_2622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2624 = writer.prefix("Filter");
    if let Some(var_2625) = &input.filters {
        let mut list_2627 = scope_2624.start_list(true, Some("Filter"));
        for item_2626 in var_2625 {
            #[allow(unused_mut)]
            let mut entry_2628 = list_2627.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2628, item_2626);
        }
        list_2627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("MaxResults");
    if let Some(var_2630) = &input.max_results {
        scope_2629.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2630).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("NextToken");
    if let Some(var_2632) = &input.next_token {
        scope_2631.string(var_2632);
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("DryRun");
    if let Some(var_2634) = &input.dry_run {
        scope_2633.boolean(*var_2634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2636) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2638 = scope_2635.start_list(true, Some("item"));
        for item_2637 in var_2636 {
            #[allow(unused_mut)]
            let mut entry_2639 = list_2638.entry();
            entry_2639.string(item_2637);
        }
        list_2638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("Filter");
    if let Some(var_2641) = &input.filters {
        let mut list_2643 = scope_2640.start_list(true, Some("Filter"));
        for item_2642 in var_2641 {
            #[allow(unused_mut)]
            let mut entry_2644 = list_2643.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2644, item_2642);
        }
        list_2643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("MaxResults");
    if let Some(var_2646) = &input.max_results {
        scope_2645.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2646).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("NextToken");
    if let Some(var_2648) = &input.next_token {
        scope_2647.string(var_2648);
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("DryRun");
    if let Some(var_2650) = &input.dry_run {
        scope_2649.boolean(*var_2650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2652) = &input.local_gateway_virtual_interface_ids {
        let mut list_2654 = scope_2651.start_list(true, Some("item"));
        for item_2653 in var_2652 {
            #[allow(unused_mut)]
            let mut entry_2655 = list_2654.entry();
            entry_2655.string(item_2653);
        }
        list_2654.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2656 = writer.prefix("Filter");
    if let Some(var_2657) = &input.filters {
        let mut list_2659 = scope_2656.start_list(true, Some("Filter"));
        for item_2658 in var_2657 {
            #[allow(unused_mut)]
            let mut entry_2660 = list_2659.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2660, item_2658);
        }
        list_2659.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("MaxResults");
    if let Some(var_2662) = &input.max_results {
        scope_2661.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2662).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("NextToken");
    if let Some(var_2664) = &input.next_token {
        scope_2663.string(var_2664);
    }
    #[allow(unused_mut)]
    let mut scope_2665 = writer.prefix("DryRun");
    if let Some(var_2666) = &input.dry_run {
        scope_2665.boolean(*var_2666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("DryRun");
    if let Some(var_2668) = &input.dry_run {
        scope_2667.boolean(*var_2668);
    }
    #[allow(unused_mut)]
    let mut scope_2669 = writer.prefix("Filter");
    if let Some(var_2670) = &input.filters {
        let mut list_2672 = scope_2669.start_list(true, Some("Filter"));
        for item_2671 in var_2670 {
            #[allow(unused_mut)]
            let mut entry_2673 = list_2672.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2673, item_2671);
        }
        list_2672.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("MaxResults");
    if let Some(var_2675) = &input.max_results {
        scope_2674.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2675).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("NextToken");
    if let Some(var_2677) = &input.next_token {
        scope_2676.string(var_2677);
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("PrefixListId");
    if let Some(var_2679) = &input.prefix_list_ids {
        let mut list_2681 = scope_2678.start_list(true, Some("item"));
        for item_2680 in var_2679 {
            #[allow(unused_mut)]
            let mut entry_2682 = list_2681.entry();
            entry_2682.string(item_2680);
        }
        list_2681.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2683 = writer.prefix("Filter");
    if let Some(var_2684) = &input.filters {
        let mut list_2686 = scope_2683.start_list(true, Some("Filter"));
        for item_2685 in var_2684 {
            #[allow(unused_mut)]
            let mut entry_2687 = list_2686.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2687, item_2685);
        }
        list_2686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("DryRun");
    if let Some(var_2689) = &input.dry_run {
        scope_2688.boolean(*var_2689);
    }
    #[allow(unused_mut)]
    let mut scope_2690 = writer.prefix("MaxResults");
    if let Some(var_2691) = &input.max_results {
        scope_2690.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2691).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("NextToken");
    if let Some(var_2693) = &input.next_token {
        scope_2692.string(var_2693);
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("PublicIp");
    if let Some(var_2695) = &input.public_ips {
        let mut list_2697 = scope_2694.start_list(true, Some("item"));
        for item_2696 in var_2695 {
            #[allow(unused_mut)]
            let mut entry_2698 = list_2697.entry();
            entry_2698.string(item_2696);
        }
        list_2697.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2699 = writer.prefix("DryRun");
    if let Some(var_2700) = &input.dry_run {
        scope_2699.boolean(*var_2700);
    }
    #[allow(unused_mut)]
    let mut scope_2701 = writer.prefix("Filter");
    if let Some(var_2702) = &input.filter {
        let mut list_2704 = scope_2701.start_list(true, Some("Filter"));
        for item_2703 in var_2702 {
            #[allow(unused_mut)]
            let mut entry_2705 = list_2704.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2705, item_2703);
        }
        list_2704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("MaxResults");
    if let Some(var_2707) = &input.max_results {
        scope_2706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2708 = writer.prefix("NatGatewayId");
    if let Some(var_2709) = &input.nat_gateway_ids {
        let mut list_2711 = scope_2708.start_list(true, Some("item"));
        for item_2710 in var_2709 {
            #[allow(unused_mut)]
            let mut entry_2712 = list_2711.entry();
            entry_2712.string(item_2710);
        }
        list_2711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2713 = writer.prefix("NextToken");
    if let Some(var_2714) = &input.next_token {
        scope_2713.string(var_2714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("Filter");
    if let Some(var_2716) = &input.filters {
        let mut list_2718 = scope_2715.start_list(true, Some("Filter"));
        for item_2717 in var_2716 {
            #[allow(unused_mut)]
            let mut entry_2719 = list_2718.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2719, item_2717);
        }
        list_2718.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("DryRun");
    if let Some(var_2721) = &input.dry_run {
        scope_2720.boolean(*var_2721);
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("NetworkAclId");
    if let Some(var_2723) = &input.network_acl_ids {
        let mut list_2725 = scope_2722.start_list(true, Some("item"));
        for item_2724 in var_2723 {
            #[allow(unused_mut)]
            let mut entry_2726 = list_2725.entry();
            entry_2726.string(item_2724);
        }
        list_2725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2727 = writer.prefix("NextToken");
    if let Some(var_2728) = &input.next_token {
        scope_2727.string(var_2728);
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("MaxResults");
    if let Some(var_2730) = &input.max_results {
        scope_2729.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2730).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2732) = &input.network_insights_analysis_ids {
        let mut list_2734 = scope_2731.start_list(true, Some("item"));
        for item_2733 in var_2732 {
            #[allow(unused_mut)]
            let mut entry_2735 = list_2734.entry();
            entry_2735.string(item_2733);
        }
        list_2734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2737) = &input.network_insights_path_id {
        scope_2736.string(var_2737);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("AnalysisStartTime");
    if let Some(var_2739) = &input.analysis_start_time {
        scope_2738.instant(var_2739, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("AnalysisEndTime");
    if let Some(var_2741) = &input.analysis_end_time {
        scope_2740.instant(var_2741, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("Filter");
    if let Some(var_2743) = &input.filters {
        let mut list_2745 = scope_2742.start_list(true, Some("Filter"));
        for item_2744 in var_2743 {
            #[allow(unused_mut)]
            let mut entry_2746 = list_2745.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2746, item_2744);
        }
        list_2745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("MaxResults");
    if let Some(var_2748) = &input.max_results {
        scope_2747.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2748).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("DryRun");
    if let Some(var_2750) = &input.dry_run {
        scope_2749.boolean(*var_2750);
    }
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("NextToken");
    if let Some(var_2752) = &input.next_token {
        scope_2751.string(var_2752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2753 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2754) = &input.network_insights_path_ids {
        let mut list_2756 = scope_2753.start_list(true, Some("item"));
        for item_2755 in var_2754 {
            #[allow(unused_mut)]
            let mut entry_2757 = list_2756.entry();
            entry_2757.string(item_2755);
        }
        list_2756.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2758 = writer.prefix("Filter");
    if let Some(var_2759) = &input.filters {
        let mut list_2761 = scope_2758.start_list(true, Some("Filter"));
        for item_2760 in var_2759 {
            #[allow(unused_mut)]
            let mut entry_2762 = list_2761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2762, item_2760);
        }
        list_2761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("MaxResults");
    if let Some(var_2764) = &input.max_results {
        scope_2763.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("DryRun");
    if let Some(var_2766) = &input.dry_run {
        scope_2765.boolean(*var_2766);
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("NextToken");
    if let Some(var_2768) = &input.next_token {
        scope_2767.string(var_2768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("Attribute");
    if let Some(var_2770) = &input.attribute {
        scope_2769.string(var_2770.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("DryRun");
    if let Some(var_2772) = &input.dry_run {
        scope_2771.boolean(*var_2772);
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2774) = &input.network_interface_id {
        scope_2773.string(var_2774);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2775 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2776) = &input.network_interface_permission_ids {
        let mut list_2778 = scope_2775.start_list(true, None);
        for item_2777 in var_2776 {
            #[allow(unused_mut)]
            let mut entry_2779 = list_2778.entry();
            entry_2779.string(item_2777);
        }
        list_2778.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2780 = writer.prefix("Filter");
    if let Some(var_2781) = &input.filters {
        let mut list_2783 = scope_2780.start_list(true, Some("Filter"));
        for item_2782 in var_2781 {
            #[allow(unused_mut)]
            let mut entry_2784 = list_2783.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2784, item_2782);
        }
        list_2783.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("NextToken");
    if let Some(var_2786) = &input.next_token {
        scope_2785.string(var_2786);
    }
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("MaxResults");
    if let Some(var_2788) = &input.max_results {
        scope_2787.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2788).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("Filter");
    if let Some(var_2790) = &input.filters {
        let mut list_2792 = scope_2789.start_list(true, Some("Filter"));
        for item_2791 in var_2790 {
            #[allow(unused_mut)]
            let mut entry_2793 = list_2792.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2793, item_2791);
        }
        list_2792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("DryRun");
    if let Some(var_2795) = &input.dry_run {
        scope_2794.boolean(*var_2795);
    }
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2797) = &input.network_interface_ids {
        let mut list_2799 = scope_2796.start_list(true, Some("item"));
        for item_2798 in var_2797 {
            #[allow(unused_mut)]
            let mut entry_2800 = list_2799.entry();
            entry_2800.string(item_2798);
        }
        list_2799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2801 = writer.prefix("NextToken");
    if let Some(var_2802) = &input.next_token {
        scope_2801.string(var_2802);
    }
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("MaxResults");
    if let Some(var_2804) = &input.max_results {
        scope_2803.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2804).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2805 = writer.prefix("Filter");
    if let Some(var_2806) = &input.filters {
        let mut list_2808 = scope_2805.start_list(true, Some("Filter"));
        for item_2807 in var_2806 {
            #[allow(unused_mut)]
            let mut entry_2809 = list_2808.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2809, item_2807);
        }
        list_2808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("DryRun");
    if let Some(var_2811) = &input.dry_run {
        scope_2810.boolean(*var_2811);
    }
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("GroupName");
    if let Some(var_2813) = &input.group_names {
        let mut list_2815 = scope_2812.start_list(true, None);
        for item_2814 in var_2813 {
            #[allow(unused_mut)]
            let mut entry_2816 = list_2815.entry();
            entry_2816.string(item_2814);
        }
        list_2815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("GroupId");
    if let Some(var_2818) = &input.group_ids {
        let mut list_2820 = scope_2817.start_list(true, Some("GroupId"));
        for item_2819 in var_2818 {
            #[allow(unused_mut)]
            let mut entry_2821 = list_2820.entry();
            entry_2821.string(item_2819);
        }
        list_2820.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2822 = writer.prefix("DryRun");
    if let Some(var_2823) = &input.dry_run {
        scope_2822.boolean(*var_2823);
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("Filter");
    if let Some(var_2825) = &input.filters {
        let mut list_2827 = scope_2824.start_list(true, Some("Filter"));
        for item_2826 in var_2825 {
            #[allow(unused_mut)]
            let mut entry_2828 = list_2827.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2828, item_2826);
        }
        list_2827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2829 = writer.prefix("MaxResults");
    if let Some(var_2830) = &input.max_results {
        scope_2829.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2830).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("NextToken");
    if let Some(var_2832) = &input.next_token {
        scope_2831.string(var_2832);
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("PrefixListId");
    if let Some(var_2834) = &input.prefix_list_ids {
        let mut list_2836 = scope_2833.start_list(true, Some("item"));
        for item_2835 in var_2834 {
            #[allow(unused_mut)]
            let mut entry_2837 = list_2836.entry();
            entry_2837.string(item_2835);
        }
        list_2836.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("DryRun");
    if let Some(var_2839) = &input.dry_run {
        scope_2838.boolean(*var_2839);
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("Resource");
    if let Some(var_2841) = &input.resources {
        let mut list_2843 = scope_2840.start_list(true, Some("item"));
        for item_2842 in var_2841 {
            #[allow(unused_mut)]
            let mut entry_2844 = list_2843.entry();
            entry_2844.string(item_2842);
        }
        list_2843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2845 = writer.prefix("MaxResults");
    if let Some(var_2846) = &input.max_results {
        scope_2845.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2846).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("NextToken");
    if let Some(var_2848) = &input.next_token {
        scope_2847.string(var_2848);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("PoolId");
    if let Some(var_2850) = &input.pool_ids {
        let mut list_2852 = scope_2849.start_list(true, Some("item"));
        for item_2851 in var_2850 {
            #[allow(unused_mut)]
            let mut entry_2853 = list_2852.entry();
            entry_2853.string(item_2851);
        }
        list_2852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("NextToken");
    if let Some(var_2855) = &input.next_token {
        scope_2854.string(var_2855);
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("MaxResults");
    if let Some(var_2857) = &input.max_results {
        scope_2856.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2857).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("Filter");
    if let Some(var_2859) = &input.filters {
        let mut list_2861 = scope_2858.start_list(true, Some("Filter"));
        for item_2860 in var_2859 {
            #[allow(unused_mut)]
            let mut entry_2862 = list_2861.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2862, item_2860);
        }
        list_2861.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("Filter");
    if let Some(var_2864) = &input.filters {
        let mut list_2866 = scope_2863.start_list(true, Some("Filter"));
        for item_2865 in var_2864 {
            #[allow(unused_mut)]
            let mut entry_2867 = list_2866.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2867, item_2865);
        }
        list_2866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2868 = writer.prefix("RegionName");
    if let Some(var_2869) = &input.region_names {
        let mut list_2871 = scope_2868.start_list(true, Some("RegionName"));
        for item_2870 in var_2869 {
            #[allow(unused_mut)]
            let mut entry_2872 = list_2871.entry();
            entry_2872.string(item_2870);
        }
        list_2871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("DryRun");
    if let Some(var_2874) = &input.dry_run {
        scope_2873.boolean(*var_2874);
    }
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("AllRegions");
    if let Some(var_2876) = &input.all_regions {
        scope_2875.boolean(*var_2876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2878) = &input.replace_root_volume_task_ids {
        let mut list_2880 = scope_2877.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2879 in var_2878 {
            #[allow(unused_mut)]
            let mut entry_2881 = list_2880.entry();
            entry_2881.string(item_2879);
        }
        list_2880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2882 = writer.prefix("Filter");
    if let Some(var_2883) = &input.filters {
        let mut list_2885 = scope_2882.start_list(true, Some("Filter"));
        for item_2884 in var_2883 {
            #[allow(unused_mut)]
            let mut entry_2886 = list_2885.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2886, item_2884);
        }
        list_2885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2887 = writer.prefix("MaxResults");
    if let Some(var_2888) = &input.max_results {
        scope_2887.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2888).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("NextToken");
    if let Some(var_2890) = &input.next_token {
        scope_2889.string(var_2890);
    }
    #[allow(unused_mut)]
    let mut scope_2891 = writer.prefix("DryRun");
    if let Some(var_2892) = &input.dry_run {
        scope_2891.boolean(*var_2892);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2893 = writer.prefix("Filter");
    if let Some(var_2894) = &input.filters {
        let mut list_2896 = scope_2893.start_list(true, Some("Filter"));
        for item_2895 in var_2894 {
            #[allow(unused_mut)]
            let mut entry_2897 = list_2896.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2897, item_2895);
        }
        list_2896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("OfferingClass");
    if let Some(var_2899) = &input.offering_class {
        scope_2898.string(var_2899.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("ReservedInstancesId");
    if let Some(var_2901) = &input.reserved_instances_ids {
        let mut list_2903 = scope_2900.start_list(true, Some("ReservedInstancesId"));
        for item_2902 in var_2901 {
            #[allow(unused_mut)]
            let mut entry_2904 = list_2903.entry();
            entry_2904.string(item_2902);
        }
        list_2903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("DryRun");
    if let Some(var_2906) = &input.dry_run {
        scope_2905.boolean(*var_2906);
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("OfferingType");
    if let Some(var_2908) = &input.offering_type {
        scope_2907.string(var_2908.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("Filter");
    if let Some(var_2910) = &input.filters {
        let mut list_2912 = scope_2909.start_list(true, Some("Filter"));
        for item_2911 in var_2910 {
            #[allow(unused_mut)]
            let mut entry_2913 = list_2912.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2913, item_2911);
        }
        list_2912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("ReservedInstancesId");
    if let Some(var_2915) = &input.reserved_instances_id {
        scope_2914.string(var_2915);
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2917) = &input.reserved_instances_listing_id {
        scope_2916.string(var_2917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("Filter");
    if let Some(var_2919) = &input.filters {
        let mut list_2921 = scope_2918.start_list(true, Some("Filter"));
        for item_2920 in var_2919 {
            #[allow(unused_mut)]
            let mut entry_2922 = list_2921.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2922, item_2920);
        }
        list_2921.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2923 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2924) = &input.reserved_instances_modification_ids {
        let mut list_2926 = scope_2923.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2925 in var_2924 {
            #[allow(unused_mut)]
            let mut entry_2927 = list_2926.entry();
            entry_2927.string(item_2925);
        }
        list_2926.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("NextToken");
    if let Some(var_2929) = &input.next_token {
        scope_2928.string(var_2929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("AvailabilityZone");
    if let Some(var_2931) = &input.availability_zone {
        scope_2930.string(var_2931);
    }
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("Filter");
    if let Some(var_2933) = &input.filters {
        let mut list_2935 = scope_2932.start_list(true, Some("Filter"));
        for item_2934 in var_2933 {
            #[allow(unused_mut)]
            let mut entry_2936 = list_2935.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2936, item_2934);
        }
        list_2935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("IncludeMarketplace");
    if let Some(var_2938) = &input.include_marketplace {
        scope_2937.boolean(*var_2938);
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("InstanceType");
    if let Some(var_2940) = &input.instance_type {
        scope_2939.string(var_2940.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2941 = writer.prefix("MaxDuration");
    if let Some(var_2942) = &input.max_duration {
        scope_2941.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2942).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("MaxInstanceCount");
    if let Some(var_2944) = &input.max_instance_count {
        scope_2943.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2944).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("MinDuration");
    if let Some(var_2946) = &input.min_duration {
        scope_2945.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2946).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("OfferingClass");
    if let Some(var_2948) = &input.offering_class {
        scope_2947.string(var_2948.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("ProductDescription");
    if let Some(var_2950) = &input.product_description {
        scope_2949.string(var_2950.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2952) = &input.reserved_instances_offering_ids {
        let mut list_2954 = scope_2951.start_list(true, None);
        for item_2953 in var_2952 {
            #[allow(unused_mut)]
            let mut entry_2955 = list_2954.entry();
            entry_2955.string(item_2953);
        }
        list_2954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("DryRun");
    if let Some(var_2957) = &input.dry_run {
        scope_2956.boolean(*var_2957);
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("InstanceTenancy");
    if let Some(var_2959) = &input.instance_tenancy {
        scope_2958.string(var_2959.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("MaxResults");
    if let Some(var_2961) = &input.max_results {
        scope_2960.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2961).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("NextToken");
    if let Some(var_2963) = &input.next_token {
        scope_2962.string(var_2963);
    }
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("OfferingType");
    if let Some(var_2965) = &input.offering_type {
        scope_2964.string(var_2965.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2966 = writer.prefix("Filter");
    if let Some(var_2967) = &input.filters {
        let mut list_2969 = scope_2966.start_list(true, Some("Filter"));
        for item_2968 in var_2967 {
            #[allow(unused_mut)]
            let mut entry_2970 = list_2969.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2970, item_2968);
        }
        list_2969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("DryRun");
    if let Some(var_2972) = &input.dry_run {
        scope_2971.boolean(*var_2972);
    }
    #[allow(unused_mut)]
    let mut scope_2973 = writer.prefix("RouteTableId");
    if let Some(var_2974) = &input.route_table_ids {
        let mut list_2976 = scope_2973.start_list(true, Some("item"));
        for item_2975 in var_2974 {
            #[allow(unused_mut)]
            let mut entry_2977 = list_2976.entry();
            entry_2977.string(item_2975);
        }
        list_2976.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2978 = writer.prefix("NextToken");
    if let Some(var_2979) = &input.next_token {
        scope_2978.string(var_2979);
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("MaxResults");
    if let Some(var_2981) = &input.max_results {
        scope_2980.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2981).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("DryRun");
    if let Some(var_2983) = &input.dry_run {
        scope_2982.boolean(*var_2983);
    }
    #[allow(unused_mut)]
    let mut scope_2984 = writer.prefix("Filter");
    if let Some(var_2985) = &input.filters {
        let mut list_2987 = scope_2984.start_list(true, Some("Filter"));
        for item_2986 in var_2985 {
            #[allow(unused_mut)]
            let mut entry_2988 = list_2987.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2988, item_2986);
        }
        list_2987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2990) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_2989, var_2990,
        );
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("MaxResults");
    if let Some(var_2992) = &input.max_results {
        scope_2991.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2992).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2994) = &input.max_slot_duration_in_hours {
        scope_2993.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2994).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2996) = &input.min_slot_duration_in_hours {
        scope_2995.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2996).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("NextToken");
    if let Some(var_2998) = &input.next_token {
        scope_2997.string(var_2998);
    }
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("Recurrence");
    if let Some(var_3000) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_2999, var_3000,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("DryRun");
    if let Some(var_3002) = &input.dry_run {
        scope_3001.boolean(*var_3002);
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("Filter");
    if let Some(var_3004) = &input.filters {
        let mut list_3006 = scope_3003.start_list(true, Some("Filter"));
        for item_3005 in var_3004 {
            #[allow(unused_mut)]
            let mut entry_3007 = list_3006.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3007, item_3005);
        }
        list_3006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("MaxResults");
    if let Some(var_3009) = &input.max_results {
        scope_3008.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3009).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("NextToken");
    if let Some(var_3011) = &input.next_token {
        scope_3010.string(var_3011);
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3013) = &input.scheduled_instance_ids {
        let mut list_3015 = scope_3012.start_list(true, Some("ScheduledInstanceId"));
        for item_3014 in var_3013 {
            #[allow(unused_mut)]
            let mut entry_3016 = list_3015.entry();
            entry_3016.string(item_3014);
        }
        list_3015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3018) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3017, var_3018,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("DryRun");
    if let Some(var_3020) = &input.dry_run {
        scope_3019.boolean(*var_3020);
    }
    #[allow(unused_mut)]
    let mut scope_3021 = writer.prefix("GroupId");
    if let Some(var_3022) = &input.group_id {
        let mut list_3024 = scope_3021.start_list(true, Some("item"));
        for item_3023 in var_3022 {
            #[allow(unused_mut)]
            let mut entry_3025 = list_3024.entry();
            entry_3025.string(item_3023);
        }
        list_3024.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3026 = writer.prefix("Filter");
    if let Some(var_3027) = &input.filters {
        let mut list_3029 = scope_3026.start_list(true, Some("Filter"));
        for item_3028 in var_3027 {
            #[allow(unused_mut)]
            let mut entry_3030 = list_3029.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3030, item_3028);
        }
        list_3029.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3031 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3032) = &input.security_group_rule_ids {
        let mut list_3034 = scope_3031.start_list(true, Some("item"));
        for item_3033 in var_3032 {
            #[allow(unused_mut)]
            let mut entry_3035 = list_3034.entry();
            entry_3035.string(item_3033);
        }
        list_3034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3036 = writer.prefix("DryRun");
    if let Some(var_3037) = &input.dry_run {
        scope_3036.boolean(*var_3037);
    }
    #[allow(unused_mut)]
    let mut scope_3038 = writer.prefix("NextToken");
    if let Some(var_3039) = &input.next_token {
        scope_3038.string(var_3039);
    }
    #[allow(unused_mut)]
    let mut scope_3040 = writer.prefix("MaxResults");
    if let Some(var_3041) = &input.max_results {
        scope_3040.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3041).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("Filter");
    if let Some(var_3043) = &input.filters {
        let mut list_3045 = scope_3042.start_list(true, Some("Filter"));
        for item_3044 in var_3043 {
            #[allow(unused_mut)]
            let mut entry_3046 = list_3045.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3046, item_3044);
        }
        list_3045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3047 = writer.prefix("GroupId");
    if let Some(var_3048) = &input.group_ids {
        let mut list_3050 = scope_3047.start_list(true, Some("groupId"));
        for item_3049 in var_3048 {
            #[allow(unused_mut)]
            let mut entry_3051 = list_3050.entry();
            entry_3051.string(item_3049);
        }
        list_3050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3052 = writer.prefix("GroupName");
    if let Some(var_3053) = &input.group_names {
        let mut list_3055 = scope_3052.start_list(true, Some("GroupName"));
        for item_3054 in var_3053 {
            #[allow(unused_mut)]
            let mut entry_3056 = list_3055.entry();
            entry_3056.string(item_3054);
        }
        list_3055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("DryRun");
    if let Some(var_3058) = &input.dry_run {
        scope_3057.boolean(*var_3058);
    }
    #[allow(unused_mut)]
    let mut scope_3059 = writer.prefix("NextToken");
    if let Some(var_3060) = &input.next_token {
        scope_3059.string(var_3060);
    }
    #[allow(unused_mut)]
    let mut scope_3061 = writer.prefix("MaxResults");
    if let Some(var_3062) = &input.max_results {
        scope_3061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3062).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("Attribute");
    if let Some(var_3064) = &input.attribute {
        scope_3063.string(var_3064.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("SnapshotId");
    if let Some(var_3066) = &input.snapshot_id {
        scope_3065.string(var_3066);
    }
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("DryRun");
    if let Some(var_3068) = &input.dry_run {
        scope_3067.boolean(*var_3068);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3069 = writer.prefix("Filter");
    if let Some(var_3070) = &input.filters {
        let mut list_3072 = scope_3069.start_list(true, Some("Filter"));
        for item_3071 in var_3070 {
            #[allow(unused_mut)]
            let mut entry_3073 = list_3072.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3073, item_3071);
        }
        list_3072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3074 = writer.prefix("MaxResults");
    if let Some(var_3075) = &input.max_results {
        scope_3074.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3075).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("NextToken");
    if let Some(var_3077) = &input.next_token {
        scope_3076.string(var_3077);
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("Owner");
    if let Some(var_3079) = &input.owner_ids {
        let mut list_3081 = scope_3078.start_list(true, Some("Owner"));
        for item_3080 in var_3079 {
            #[allow(unused_mut)]
            let mut entry_3082 = list_3081.entry();
            entry_3082.string(item_3080);
        }
        list_3081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3083 = writer.prefix("RestorableBy");
    if let Some(var_3084) = &input.restorable_by_user_ids {
        let mut list_3086 = scope_3083.start_list(true, None);
        for item_3085 in var_3084 {
            #[allow(unused_mut)]
            let mut entry_3087 = list_3086.entry();
            entry_3087.string(item_3085);
        }
        list_3086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3088 = writer.prefix("SnapshotId");
    if let Some(var_3089) = &input.snapshot_ids {
        let mut list_3091 = scope_3088.start_list(true, Some("SnapshotId"));
        for item_3090 in var_3089 {
            #[allow(unused_mut)]
            let mut entry_3092 = list_3091.entry();
            entry_3092.string(item_3090);
        }
        list_3091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("DryRun");
    if let Some(var_3094) = &input.dry_run {
        scope_3093.boolean(*var_3094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("DryRun");
    if let Some(var_3096) = &input.dry_run {
        scope_3095.boolean(*var_3096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3097 = writer.prefix("DryRun");
    if let Some(var_3098) = &input.dry_run {
        scope_3097.boolean(*var_3098);
    }
    #[allow(unused_mut)]
    let mut scope_3099 = writer.prefix("MaxResults");
    if let Some(var_3100) = &input.max_results {
        scope_3099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3101 = writer.prefix("NextToken");
    if let Some(var_3102) = &input.next_token {
        scope_3101.string(var_3102);
    }
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3104) = &input.spot_fleet_request_id {
        scope_3103.string(var_3104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("DryRun");
    if let Some(var_3106) = &input.dry_run {
        scope_3105.boolean(*var_3106);
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("EventType");
    if let Some(var_3108) = &input.event_type {
        scope_3107.string(var_3108.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("MaxResults");
    if let Some(var_3110) = &input.max_results {
        scope_3109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("NextToken");
    if let Some(var_3112) = &input.next_token {
        scope_3111.string(var_3112);
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3114) = &input.spot_fleet_request_id {
        scope_3113.string(var_3114);
    }
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("StartTime");
    if let Some(var_3116) = &input.start_time {
        scope_3115.instant(var_3116, aws_smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("DryRun");
    if let Some(var_3118) = &input.dry_run {
        scope_3117.boolean(*var_3118);
    }
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("MaxResults");
    if let Some(var_3120) = &input.max_results {
        scope_3119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("NextToken");
    if let Some(var_3122) = &input.next_token {
        scope_3121.string(var_3122);
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3124) = &input.spot_fleet_request_ids {
        let mut list_3126 = scope_3123.start_list(true, Some("item"));
        for item_3125 in var_3124 {
            #[allow(unused_mut)]
            let mut entry_3127 = list_3126.entry();
            entry_3127.string(item_3125);
        }
        list_3126.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("Filter");
    if let Some(var_3129) = &input.filters {
        let mut list_3131 = scope_3128.start_list(true, Some("Filter"));
        for item_3130 in var_3129 {
            #[allow(unused_mut)]
            let mut entry_3132 = list_3131.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3132, item_3130);
        }
        list_3131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("DryRun");
    if let Some(var_3134) = &input.dry_run {
        scope_3133.boolean(*var_3134);
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3136) = &input.spot_instance_request_ids {
        let mut list_3138 = scope_3135.start_list(true, Some("SpotInstanceRequestId"));
        for item_3137 in var_3136 {
            #[allow(unused_mut)]
            let mut entry_3139 = list_3138.entry();
            entry_3139.string(item_3137);
        }
        list_3138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("NextToken");
    if let Some(var_3141) = &input.next_token {
        scope_3140.string(var_3141);
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("MaxResults");
    if let Some(var_3143) = &input.max_results {
        scope_3142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3143).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("Filter");
    if let Some(var_3145) = &input.filters {
        let mut list_3147 = scope_3144.start_list(true, Some("Filter"));
        for item_3146 in var_3145 {
            #[allow(unused_mut)]
            let mut entry_3148 = list_3147.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3148, item_3146);
        }
        list_3147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("AvailabilityZone");
    if let Some(var_3150) = &input.availability_zone {
        scope_3149.string(var_3150);
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("DryRun");
    if let Some(var_3152) = &input.dry_run {
        scope_3151.boolean(*var_3152);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("EndTime");
    if let Some(var_3154) = &input.end_time {
        scope_3153.instant(var_3154, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("InstanceType");
    if let Some(var_3156) = &input.instance_types {
        let mut list_3158 = scope_3155.start_list(true, None);
        for item_3157 in var_3156 {
            #[allow(unused_mut)]
            let mut entry_3159 = list_3158.entry();
            entry_3159.string(item_3157.as_str());
        }
        list_3158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("MaxResults");
    if let Some(var_3161) = &input.max_results {
        scope_3160.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3161).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("NextToken");
    if let Some(var_3163) = &input.next_token {
        scope_3162.string(var_3163);
    }
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("ProductDescription");
    if let Some(var_3165) = &input.product_descriptions {
        let mut list_3167 = scope_3164.start_list(true, None);
        for item_3166 in var_3165 {
            #[allow(unused_mut)]
            let mut entry_3168 = list_3167.entry();
            entry_3168.string(item_3166);
        }
        list_3167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("StartTime");
    if let Some(var_3170) = &input.start_time {
        scope_3169.instant(var_3170, aws_smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("DryRun");
    if let Some(var_3172) = &input.dry_run {
        scope_3171.boolean(*var_3172);
    }
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("MaxResults");
    if let Some(var_3174) = &input.max_results {
        scope_3173.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3174).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("NextToken");
    if let Some(var_3176) = &input.next_token {
        scope_3175.string(var_3176);
    }
    #[allow(unused_mut)]
    let mut scope_3177 = writer.prefix("VpcId");
    if let Some(var_3178) = &input.vpc_id {
        scope_3177.string(var_3178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3179 = writer.prefix("ImageId");
    if let Some(var_3180) = &input.image_ids {
        let mut list_3182 = scope_3179.start_list(true, Some("item"));
        for item_3181 in var_3180 {
            #[allow(unused_mut)]
            let mut entry_3183 = list_3182.entry();
            entry_3183.string(item_3181);
        }
        list_3182.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("DryRun");
    if let Some(var_3185) = &input.dry_run {
        scope_3184.boolean(*var_3185);
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("Filter");
    if let Some(var_3187) = &input.filters {
        let mut list_3189 = scope_3186.start_list(true, Some("Filter"));
        for item_3188 in var_3187 {
            #[allow(unused_mut)]
            let mut entry_3190 = list_3189.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3190, item_3188);
        }
        list_3189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("NextToken");
    if let Some(var_3192) = &input.next_token {
        scope_3191.string(var_3192);
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("MaxResults");
    if let Some(var_3194) = &input.max_results {
        scope_3193.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3194).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("Filter");
    if let Some(var_3196) = &input.filters {
        let mut list_3198 = scope_3195.start_list(true, Some("Filter"));
        for item_3197 in var_3196 {
            #[allow(unused_mut)]
            let mut entry_3199 = list_3198.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3199, item_3197);
        }
        list_3198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3200 = writer.prefix("SubnetId");
    if let Some(var_3201) = &input.subnet_ids {
        let mut list_3203 = scope_3200.start_list(true, Some("SubnetId"));
        for item_3202 in var_3201 {
            #[allow(unused_mut)]
            let mut entry_3204 = list_3203.entry();
            entry_3204.string(item_3202);
        }
        list_3203.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3205 = writer.prefix("DryRun");
    if let Some(var_3206) = &input.dry_run {
        scope_3205.boolean(*var_3206);
    }
    #[allow(unused_mut)]
    let mut scope_3207 = writer.prefix("NextToken");
    if let Some(var_3208) = &input.next_token {
        scope_3207.string(var_3208);
    }
    #[allow(unused_mut)]
    let mut scope_3209 = writer.prefix("MaxResults");
    if let Some(var_3210) = &input.max_results {
        scope_3209.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3210).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("DryRun");
    if let Some(var_3212) = &input.dry_run {
        scope_3211.boolean(*var_3212);
    }
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("Filter");
    if let Some(var_3214) = &input.filters {
        let mut list_3216 = scope_3213.start_list(true, Some("Filter"));
        for item_3215 in var_3214 {
            #[allow(unused_mut)]
            let mut entry_3217 = list_3216.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3217, item_3215);
        }
        list_3216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("MaxResults");
    if let Some(var_3219) = &input.max_results {
        scope_3218.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3219).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3220 = writer.prefix("NextToken");
    if let Some(var_3221) = &input.next_token {
        scope_3220.string(var_3221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3222 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3223) = &input.traffic_mirror_filter_ids {
        let mut list_3225 = scope_3222.start_list(true, Some("item"));
        for item_3224 in var_3223 {
            #[allow(unused_mut)]
            let mut entry_3226 = list_3225.entry();
            entry_3226.string(item_3224);
        }
        list_3225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("DryRun");
    if let Some(var_3228) = &input.dry_run {
        scope_3227.boolean(*var_3228);
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("Filter");
    if let Some(var_3230) = &input.filters {
        let mut list_3232 = scope_3229.start_list(true, Some("Filter"));
        for item_3231 in var_3230 {
            #[allow(unused_mut)]
            let mut entry_3233 = list_3232.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3233, item_3231);
        }
        list_3232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("MaxResults");
    if let Some(var_3235) = &input.max_results {
        scope_3234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("NextToken");
    if let Some(var_3237) = &input.next_token {
        scope_3236.string(var_3237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3239) = &input.traffic_mirror_session_ids {
        let mut list_3241 = scope_3238.start_list(true, Some("item"));
        for item_3240 in var_3239 {
            #[allow(unused_mut)]
            let mut entry_3242 = list_3241.entry();
            entry_3242.string(item_3240);
        }
        list_3241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3243 = writer.prefix("DryRun");
    if let Some(var_3244) = &input.dry_run {
        scope_3243.boolean(*var_3244);
    }
    #[allow(unused_mut)]
    let mut scope_3245 = writer.prefix("Filter");
    if let Some(var_3246) = &input.filters {
        let mut list_3248 = scope_3245.start_list(true, Some("Filter"));
        for item_3247 in var_3246 {
            #[allow(unused_mut)]
            let mut entry_3249 = list_3248.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3249, item_3247);
        }
        list_3248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3250 = writer.prefix("MaxResults");
    if let Some(var_3251) = &input.max_results {
        scope_3250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3252 = writer.prefix("NextToken");
    if let Some(var_3253) = &input.next_token {
        scope_3252.string(var_3253);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3254 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3255) = &input.traffic_mirror_target_ids {
        let mut list_3257 = scope_3254.start_list(true, Some("item"));
        for item_3256 in var_3255 {
            #[allow(unused_mut)]
            let mut entry_3258 = list_3257.entry();
            entry_3258.string(item_3256);
        }
        list_3257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("DryRun");
    if let Some(var_3260) = &input.dry_run {
        scope_3259.boolean(*var_3260);
    }
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("Filter");
    if let Some(var_3262) = &input.filters {
        let mut list_3264 = scope_3261.start_list(true, Some("Filter"));
        for item_3263 in var_3262 {
            #[allow(unused_mut)]
            let mut entry_3265 = list_3264.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3265, item_3263);
        }
        list_3264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("MaxResults");
    if let Some(var_3267) = &input.max_results {
        scope_3266.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3267).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("NextToken");
    if let Some(var_3269) = &input.next_token {
        scope_3268.string(var_3269);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3270 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3271) = &input.transit_gateway_attachment_ids {
        let mut list_3273 = scope_3270.start_list(true, None);
        for item_3272 in var_3271 {
            #[allow(unused_mut)]
            let mut entry_3274 = list_3273.entry();
            entry_3274.string(item_3272);
        }
        list_3273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("Filter");
    if let Some(var_3276) = &input.filters {
        let mut list_3278 = scope_3275.start_list(true, Some("Filter"));
        for item_3277 in var_3276 {
            #[allow(unused_mut)]
            let mut entry_3279 = list_3278.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3279, item_3277);
        }
        list_3278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3280 = writer.prefix("MaxResults");
    if let Some(var_3281) = &input.max_results {
        scope_3280.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3281).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3282 = writer.prefix("NextToken");
    if let Some(var_3283) = &input.next_token {
        scope_3282.string(var_3283);
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("DryRun");
    if let Some(var_3285) = &input.dry_run {
        scope_3284.boolean(*var_3285);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3287) = &input.transit_gateway_connect_peer_ids {
        let mut list_3289 = scope_3286.start_list(true, Some("item"));
        for item_3288 in var_3287 {
            #[allow(unused_mut)]
            let mut entry_3290 = list_3289.entry();
            entry_3290.string(item_3288);
        }
        list_3289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3291 = writer.prefix("Filter");
    if let Some(var_3292) = &input.filters {
        let mut list_3294 = scope_3291.start_list(true, Some("Filter"));
        for item_3293 in var_3292 {
            #[allow(unused_mut)]
            let mut entry_3295 = list_3294.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3295, item_3293);
        }
        list_3294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("MaxResults");
    if let Some(var_3297) = &input.max_results {
        scope_3296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("NextToken");
    if let Some(var_3299) = &input.next_token {
        scope_3298.string(var_3299);
    }
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("DryRun");
    if let Some(var_3301) = &input.dry_run {
        scope_3300.boolean(*var_3301);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3302 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3303) = &input.transit_gateway_attachment_ids {
        let mut list_3305 = scope_3302.start_list(true, None);
        for item_3304 in var_3303 {
            #[allow(unused_mut)]
            let mut entry_3306 = list_3305.entry();
            entry_3306.string(item_3304);
        }
        list_3305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("Filter");
    if let Some(var_3308) = &input.filters {
        let mut list_3310 = scope_3307.start_list(true, Some("Filter"));
        for item_3309 in var_3308 {
            #[allow(unused_mut)]
            let mut entry_3311 = list_3310.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3311, item_3309);
        }
        list_3310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("MaxResults");
    if let Some(var_3313) = &input.max_results {
        scope_3312.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3313).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("NextToken");
    if let Some(var_3315) = &input.next_token {
        scope_3314.string(var_3315);
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("DryRun");
    if let Some(var_3317) = &input.dry_run {
        scope_3316.boolean(*var_3317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3319) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3321 = scope_3318.start_list(true, Some("item"));
        for item_3320 in var_3319 {
            #[allow(unused_mut)]
            let mut entry_3322 = list_3321.entry();
            entry_3322.string(item_3320);
        }
        list_3321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3323 = writer.prefix("Filter");
    if let Some(var_3324) = &input.filters {
        let mut list_3326 = scope_3323.start_list(true, Some("Filter"));
        for item_3325 in var_3324 {
            #[allow(unused_mut)]
            let mut entry_3327 = list_3326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3327, item_3325);
        }
        list_3326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("MaxResults");
    if let Some(var_3329) = &input.max_results {
        scope_3328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3329).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("NextToken");
    if let Some(var_3331) = &input.next_token {
        scope_3330.string(var_3331);
    }
    #[allow(unused_mut)]
    let mut scope_3332 = writer.prefix("DryRun");
    if let Some(var_3333) = &input.dry_run {
        scope_3332.boolean(*var_3333);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3334 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3335) = &input.transit_gateway_attachment_ids {
        let mut list_3337 = scope_3334.start_list(true, None);
        for item_3336 in var_3335 {
            #[allow(unused_mut)]
            let mut entry_3338 = list_3337.entry();
            entry_3338.string(item_3336);
        }
        list_3337.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("Filter");
    if let Some(var_3340) = &input.filters {
        let mut list_3342 = scope_3339.start_list(true, Some("Filter"));
        for item_3341 in var_3340 {
            #[allow(unused_mut)]
            let mut entry_3343 = list_3342.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3343, item_3341);
        }
        list_3342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3344 = writer.prefix("MaxResults");
    if let Some(var_3345) = &input.max_results {
        scope_3344.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3345).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3346 = writer.prefix("NextToken");
    if let Some(var_3347) = &input.next_token {
        scope_3346.string(var_3347);
    }
    #[allow(unused_mut)]
    let mut scope_3348 = writer.prefix("DryRun");
    if let Some(var_3349) = &input.dry_run {
        scope_3348.boolean(*var_3349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3350 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3351) = &input.transit_gateway_route_table_ids {
        let mut list_3353 = scope_3350.start_list(true, Some("item"));
        for item_3352 in var_3351 {
            #[allow(unused_mut)]
            let mut entry_3354 = list_3353.entry();
            entry_3354.string(item_3352);
        }
        list_3353.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3355 = writer.prefix("Filter");
    if let Some(var_3356) = &input.filters {
        let mut list_3358 = scope_3355.start_list(true, Some("Filter"));
        for item_3357 in var_3356 {
            #[allow(unused_mut)]
            let mut entry_3359 = list_3358.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3359, item_3357);
        }
        list_3358.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("MaxResults");
    if let Some(var_3361) = &input.max_results {
        scope_3360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("NextToken");
    if let Some(var_3363) = &input.next_token {
        scope_3362.string(var_3363);
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("DryRun");
    if let Some(var_3365) = &input.dry_run {
        scope_3364.boolean(*var_3365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("TransitGatewayIds");
    if let Some(var_3367) = &input.transit_gateway_ids {
        let mut list_3369 = scope_3366.start_list(true, Some("item"));
        for item_3368 in var_3367 {
            #[allow(unused_mut)]
            let mut entry_3370 = list_3369.entry();
            entry_3370.string(item_3368);
        }
        list_3369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("Filter");
    if let Some(var_3372) = &input.filters {
        let mut list_3374 = scope_3371.start_list(true, Some("Filter"));
        for item_3373 in var_3372 {
            #[allow(unused_mut)]
            let mut entry_3375 = list_3374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3375, item_3373);
        }
        list_3374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("MaxResults");
    if let Some(var_3377) = &input.max_results {
        scope_3376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("NextToken");
    if let Some(var_3379) = &input.next_token {
        scope_3378.string(var_3379);
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("DryRun");
    if let Some(var_3381) = &input.dry_run {
        scope_3380.boolean(*var_3381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3383) = &input.transit_gateway_attachment_ids {
        let mut list_3385 = scope_3382.start_list(true, None);
        for item_3384 in var_3383 {
            #[allow(unused_mut)]
            let mut entry_3386 = list_3385.entry();
            entry_3386.string(item_3384);
        }
        list_3385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3387 = writer.prefix("Filter");
    if let Some(var_3388) = &input.filters {
        let mut list_3390 = scope_3387.start_list(true, Some("Filter"));
        for item_3389 in var_3388 {
            #[allow(unused_mut)]
            let mut entry_3391 = list_3390.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3391, item_3389);
        }
        list_3390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("MaxResults");
    if let Some(var_3393) = &input.max_results {
        scope_3392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("NextToken");
    if let Some(var_3395) = &input.next_token {
        scope_3394.string(var_3395);
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("DryRun");
    if let Some(var_3397) = &input.dry_run {
        scope_3396.boolean(*var_3397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("AssociationId");
    if let Some(var_3399) = &input.association_ids {
        let mut list_3401 = scope_3398.start_list(true, Some("item"));
        for item_3400 in var_3399 {
            #[allow(unused_mut)]
            let mut entry_3402 = list_3401.entry();
            entry_3402.string(item_3400);
        }
        list_3401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("DryRun");
    if let Some(var_3404) = &input.dry_run {
        scope_3403.boolean(*var_3404);
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("Filter");
    if let Some(var_3406) = &input.filters {
        let mut list_3408 = scope_3405.start_list(true, Some("Filter"));
        for item_3407 in var_3406 {
            #[allow(unused_mut)]
            let mut entry_3409 = list_3408.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3409, item_3407);
        }
        list_3408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("NextToken");
    if let Some(var_3411) = &input.next_token {
        scope_3410.string(var_3411);
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("MaxResults");
    if let Some(var_3413) = &input.max_results {
        scope_3412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3413).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("Attribute");
    if let Some(var_3415) = &input.attribute {
        scope_3414.string(var_3415.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("VolumeId");
    if let Some(var_3417) = &input.volume_id {
        scope_3416.string(var_3417);
    }
    #[allow(unused_mut)]
    let mut scope_3418 = writer.prefix("DryRun");
    if let Some(var_3419) = &input.dry_run {
        scope_3418.boolean(*var_3419);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("Filter");
    if let Some(var_3421) = &input.filters {
        let mut list_3423 = scope_3420.start_list(true, Some("Filter"));
        for item_3422 in var_3421 {
            #[allow(unused_mut)]
            let mut entry_3424 = list_3423.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3424, item_3422);
        }
        list_3423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("VolumeId");
    if let Some(var_3426) = &input.volume_ids {
        let mut list_3428 = scope_3425.start_list(true, Some("VolumeId"));
        for item_3427 in var_3426 {
            #[allow(unused_mut)]
            let mut entry_3429 = list_3428.entry();
            entry_3429.string(item_3427);
        }
        list_3428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("DryRun");
    if let Some(var_3431) = &input.dry_run {
        scope_3430.boolean(*var_3431);
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("MaxResults");
    if let Some(var_3433) = &input.max_results {
        scope_3432.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3433).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("NextToken");
    if let Some(var_3435) = &input.next_token {
        scope_3434.string(var_3435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("DryRun");
    if let Some(var_3437) = &input.dry_run {
        scope_3436.boolean(*var_3437);
    }
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("VolumeId");
    if let Some(var_3439) = &input.volume_ids {
        let mut list_3441 = scope_3438.start_list(true, Some("VolumeId"));
        for item_3440 in var_3439 {
            #[allow(unused_mut)]
            let mut entry_3442 = list_3441.entry();
            entry_3442.string(item_3440);
        }
        list_3441.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3443 = writer.prefix("Filter");
    if let Some(var_3444) = &input.filters {
        let mut list_3446 = scope_3443.start_list(true, Some("Filter"));
        for item_3445 in var_3444 {
            #[allow(unused_mut)]
            let mut entry_3447 = list_3446.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3447, item_3445);
        }
        list_3446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("NextToken");
    if let Some(var_3449) = &input.next_token {
        scope_3448.string(var_3449);
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("MaxResults");
    if let Some(var_3451) = &input.max_results {
        scope_3450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3451).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3452 = writer.prefix("Filter");
    if let Some(var_3453) = &input.filters {
        let mut list_3455 = scope_3452.start_list(true, Some("Filter"));
        for item_3454 in var_3453 {
            #[allow(unused_mut)]
            let mut entry_3456 = list_3455.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3456, item_3454);
        }
        list_3455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("MaxResults");
    if let Some(var_3458) = &input.max_results {
        scope_3457.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3458).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("NextToken");
    if let Some(var_3460) = &input.next_token {
        scope_3459.string(var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("VolumeId");
    if let Some(var_3462) = &input.volume_ids {
        let mut list_3464 = scope_3461.start_list(true, Some("VolumeId"));
        for item_3463 in var_3462 {
            #[allow(unused_mut)]
            let mut entry_3465 = list_3464.entry();
            entry_3465.string(item_3463);
        }
        list_3464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("DryRun");
    if let Some(var_3467) = &input.dry_run {
        scope_3466.boolean(*var_3467);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("Attribute");
    if let Some(var_3469) = &input.attribute {
        scope_3468.string(var_3469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("VpcId");
    if let Some(var_3471) = &input.vpc_id {
        scope_3470.string(var_3471);
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("DryRun");
    if let Some(var_3473) = &input.dry_run {
        scope_3472.boolean(*var_3473);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("Filter");
    if let Some(var_3475) = &input.filters {
        let mut list_3477 = scope_3474.start_list(true, Some("Filter"));
        for item_3476 in var_3475 {
            #[allow(unused_mut)]
            let mut entry_3478 = list_3477.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3478, item_3476);
        }
        list_3477.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("DryRun");
    if let Some(var_3480) = &input.dry_run {
        scope_3479.boolean(*var_3480);
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("VpcId");
    if let Some(var_3482) = &input.vpc_ids {
        let mut list_3484 = scope_3481.start_list(true, Some("VpcId"));
        for item_3483 in var_3482 {
            #[allow(unused_mut)]
            let mut entry_3485 = list_3484.entry();
            entry_3485.string(item_3483);
        }
        list_3484.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("MaxResults");
    if let Some(var_3487) = &input.max_results {
        scope_3486.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3487).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("NextToken");
    if let Some(var_3489) = &input.next_token {
        scope_3488.string(var_3489);
    }
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("VpcIds");
    if let Some(var_3491) = &input.vpc_ids {
        let mut list_3493 = scope_3490.start_list(true, Some("VpcId"));
        for item_3492 in var_3491 {
            #[allow(unused_mut)]
            let mut entry_3494 = list_3493.entry();
            entry_3494.string(item_3492);
        }
        list_3493.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3495 = writer.prefix("DryRun");
    if let Some(var_3496) = &input.dry_run {
        scope_3495.boolean(*var_3496);
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3498) = &input.connection_notification_id {
        scope_3497.string(var_3498);
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("Filter");
    if let Some(var_3500) = &input.filters {
        let mut list_3502 = scope_3499.start_list(true, Some("Filter"));
        for item_3501 in var_3500 {
            #[allow(unused_mut)]
            let mut entry_3503 = list_3502.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3503, item_3501);
        }
        list_3502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("MaxResults");
    if let Some(var_3505) = &input.max_results {
        scope_3504.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3505).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("NextToken");
    if let Some(var_3507) = &input.next_token {
        scope_3506.string(var_3507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("DryRun");
    if let Some(var_3509) = &input.dry_run {
        scope_3508.boolean(*var_3509);
    }
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("Filter");
    if let Some(var_3511) = &input.filters {
        let mut list_3513 = scope_3510.start_list(true, Some("Filter"));
        for item_3512 in var_3511 {
            #[allow(unused_mut)]
            let mut entry_3514 = list_3513.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3514, item_3512);
        }
        list_3513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("MaxResults");
    if let Some(var_3516) = &input.max_results {
        scope_3515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("NextToken");
    if let Some(var_3518) = &input.next_token {
        scope_3517.string(var_3518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("DryRun");
    if let Some(var_3520) = &input.dry_run {
        scope_3519.boolean(*var_3520);
    }
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("VpcEndpointId");
    if let Some(var_3522) = &input.vpc_endpoint_ids {
        let mut list_3524 = scope_3521.start_list(true, Some("item"));
        for item_3523 in var_3522 {
            #[allow(unused_mut)]
            let mut entry_3525 = list_3524.entry();
            entry_3525.string(item_3523);
        }
        list_3524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("Filter");
    if let Some(var_3527) = &input.filters {
        let mut list_3529 = scope_3526.start_list(true, Some("Filter"));
        for item_3528 in var_3527 {
            #[allow(unused_mut)]
            let mut entry_3530 = list_3529.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3530, item_3528);
        }
        list_3529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("MaxResults");
    if let Some(var_3532) = &input.max_results {
        scope_3531.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3532).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("NextToken");
    if let Some(var_3534) = &input.next_token {
        scope_3533.string(var_3534);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("DryRun");
    if let Some(var_3536) = &input.dry_run {
        scope_3535.boolean(*var_3536);
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("ServiceId");
    if let Some(var_3538) = &input.service_ids {
        let mut list_3540 = scope_3537.start_list(true, Some("item"));
        for item_3539 in var_3538 {
            #[allow(unused_mut)]
            let mut entry_3541 = list_3540.entry();
            entry_3541.string(item_3539);
        }
        list_3540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3542 = writer.prefix("Filter");
    if let Some(var_3543) = &input.filters {
        let mut list_3545 = scope_3542.start_list(true, Some("Filter"));
        for item_3544 in var_3543 {
            #[allow(unused_mut)]
            let mut entry_3546 = list_3545.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3546, item_3544);
        }
        list_3545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("MaxResults");
    if let Some(var_3548) = &input.max_results {
        scope_3547.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3548).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("NextToken");
    if let Some(var_3550) = &input.next_token {
        scope_3549.string(var_3550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("DryRun");
    if let Some(var_3552) = &input.dry_run {
        scope_3551.boolean(*var_3552);
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("ServiceId");
    if let Some(var_3554) = &input.service_id {
        scope_3553.string(var_3554);
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("Filter");
    if let Some(var_3556) = &input.filters {
        let mut list_3558 = scope_3555.start_list(true, Some("Filter"));
        for item_3557 in var_3556 {
            #[allow(unused_mut)]
            let mut entry_3559 = list_3558.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3559, item_3557);
        }
        list_3558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("MaxResults");
    if let Some(var_3561) = &input.max_results {
        scope_3560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("NextToken");
    if let Some(var_3563) = &input.next_token {
        scope_3562.string(var_3563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("DryRun");
    if let Some(var_3565) = &input.dry_run {
        scope_3564.boolean(*var_3565);
    }
    #[allow(unused_mut)]
    let mut scope_3566 = writer.prefix("ServiceName");
    if let Some(var_3567) = &input.service_names {
        let mut list_3569 = scope_3566.start_list(true, Some("item"));
        for item_3568 in var_3567 {
            #[allow(unused_mut)]
            let mut entry_3570 = list_3569.entry();
            entry_3570.string(item_3568);
        }
        list_3569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("Filter");
    if let Some(var_3572) = &input.filters {
        let mut list_3574 = scope_3571.start_list(true, Some("Filter"));
        for item_3573 in var_3572 {
            #[allow(unused_mut)]
            let mut entry_3575 = list_3574.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3575, item_3573);
        }
        list_3574.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("MaxResults");
    if let Some(var_3577) = &input.max_results {
        scope_3576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3577).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("NextToken");
    if let Some(var_3579) = &input.next_token {
        scope_3578.string(var_3579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("Filter");
    if let Some(var_3581) = &input.filters {
        let mut list_3583 = scope_3580.start_list(true, Some("Filter"));
        for item_3582 in var_3581 {
            #[allow(unused_mut)]
            let mut entry_3584 = list_3583.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3584, item_3582);
        }
        list_3583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("DryRun");
    if let Some(var_3586) = &input.dry_run {
        scope_3585.boolean(*var_3586);
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3588) = &input.vpc_peering_connection_ids {
        let mut list_3590 = scope_3587.start_list(true, Some("item"));
        for item_3589 in var_3588 {
            #[allow(unused_mut)]
            let mut entry_3591 = list_3590.entry();
            entry_3591.string(item_3589);
        }
        list_3590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3592 = writer.prefix("NextToken");
    if let Some(var_3593) = &input.next_token {
        scope_3592.string(var_3593);
    }
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("MaxResults");
    if let Some(var_3595) = &input.max_results {
        scope_3594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3595).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("Filter");
    if let Some(var_3597) = &input.filters {
        let mut list_3599 = scope_3596.start_list(true, Some("Filter"));
        for item_3598 in var_3597 {
            #[allow(unused_mut)]
            let mut entry_3600 = list_3599.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3600, item_3598);
        }
        list_3599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("VpcId");
    if let Some(var_3602) = &input.vpc_ids {
        let mut list_3604 = scope_3601.start_list(true, Some("VpcId"));
        for item_3603 in var_3602 {
            #[allow(unused_mut)]
            let mut entry_3605 = list_3604.entry();
            entry_3605.string(item_3603);
        }
        list_3604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("DryRun");
    if let Some(var_3607) = &input.dry_run {
        scope_3606.boolean(*var_3607);
    }
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("NextToken");
    if let Some(var_3609) = &input.next_token {
        scope_3608.string(var_3609);
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("MaxResults");
    if let Some(var_3611) = &input.max_results {
        scope_3610.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3611).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("Filter");
    if let Some(var_3613) = &input.filters {
        let mut list_3615 = scope_3612.start_list(true, Some("Filter"));
        for item_3614 in var_3613 {
            #[allow(unused_mut)]
            let mut entry_3616 = list_3615.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3616, item_3614);
        }
        list_3615.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3617 = writer.prefix("VpnConnectionId");
    if let Some(var_3618) = &input.vpn_connection_ids {
        let mut list_3620 = scope_3617.start_list(true, Some("VpnConnectionId"));
        for item_3619 in var_3618 {
            #[allow(unused_mut)]
            let mut entry_3621 = list_3620.entry();
            entry_3621.string(item_3619);
        }
        list_3620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("DryRun");
    if let Some(var_3623) = &input.dry_run {
        scope_3622.boolean(*var_3623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3624 = writer.prefix("Filter");
    if let Some(var_3625) = &input.filters {
        let mut list_3627 = scope_3624.start_list(true, Some("Filter"));
        for item_3626 in var_3625 {
            #[allow(unused_mut)]
            let mut entry_3628 = list_3627.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3628, item_3626);
        }
        list_3627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3629 = writer.prefix("VpnGatewayId");
    if let Some(var_3630) = &input.vpn_gateway_ids {
        let mut list_3632 = scope_3629.start_list(true, Some("VpnGatewayId"));
        for item_3631 in var_3630 {
            #[allow(unused_mut)]
            let mut entry_3633 = list_3632.entry();
            entry_3633.string(item_3631);
        }
        list_3632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("DryRun");
    if let Some(var_3635) = &input.dry_run {
        scope_3634.boolean(*var_3635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("DryRun");
    if let Some(var_3637) = &input.dry_run {
        scope_3636.boolean(*var_3637);
    }
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("InstanceId");
    if let Some(var_3639) = &input.instance_id {
        scope_3638.string(var_3639);
    }
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("VpcId");
    if let Some(var_3641) = &input.vpc_id {
        scope_3640.string(var_3641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("DryRun");
    if let Some(var_3643) = &input.dry_run {
        scope_3642.boolean(*var_3643);
    }
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("InternetGatewayId");
    if let Some(var_3645) = &input.internet_gateway_id {
        scope_3644.string(var_3645);
    }
    #[allow(unused_mut)]
    let mut scope_3646 = writer.prefix("VpcId");
    if let Some(var_3647) = &input.vpc_id {
        scope_3646.string(var_3647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("AttachmentId");
    if let Some(var_3649) = &input.attachment_id {
        scope_3648.string(var_3649);
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("DryRun");
    if let Some(var_3651) = &input.dry_run {
        scope_3650.boolean(*var_3651);
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("Force");
    if let Some(var_3653) = &input.force {
        scope_3652.boolean(*var_3653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("Device");
    if let Some(var_3655) = &input.device {
        scope_3654.string(var_3655);
    }
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("Force");
    if let Some(var_3657) = &input.force {
        scope_3656.boolean(*var_3657);
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("InstanceId");
    if let Some(var_3659) = &input.instance_id {
        scope_3658.string(var_3659);
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("VolumeId");
    if let Some(var_3661) = &input.volume_id {
        scope_3660.string(var_3661);
    }
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("DryRun");
    if let Some(var_3663) = &input.dry_run {
        scope_3662.boolean(*var_3663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("VpcId");
    if let Some(var_3665) = &input.vpc_id {
        scope_3664.string(var_3665);
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("VpnGatewayId");
    if let Some(var_3667) = &input.vpn_gateway_id {
        scope_3666.string(var_3667);
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("DryRun");
    if let Some(var_3669) = &input.dry_run {
        scope_3668.boolean(*var_3669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("DryRun");
    if let Some(var_3671) = &input.dry_run {
        scope_3670.boolean(*var_3671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("AvailabilityZone");
    if let Some(var_3673) = &input.availability_zones {
        let mut list_3675 = scope_3672.start_list(true, Some("AvailabilityZone"));
        for item_3674 in var_3673 {
            #[allow(unused_mut)]
            let mut entry_3676 = list_3675.entry();
            entry_3676.string(item_3674);
        }
        list_3675.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3677 = writer.prefix("SourceSnapshotId");
    if let Some(var_3678) = &input.source_snapshot_ids {
        let mut list_3680 = scope_3677.start_list(true, Some("SnapshotId"));
        for item_3679 in var_3678 {
            #[allow(unused_mut)]
            let mut entry_3681 = list_3680.entry();
            entry_3681.string(item_3679);
        }
        list_3680.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("DryRun");
    if let Some(var_3683) = &input.dry_run {
        scope_3682.boolean(*var_3683);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("ImageId");
    if let Some(var_3685) = &input.image_id {
        scope_3684.string(var_3685);
    }
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("DryRun");
    if let Some(var_3687) = &input.dry_run {
        scope_3686.boolean(*var_3687);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("DryRun");
    if let Some(var_3689) = &input.dry_run {
        scope_3688.boolean(*var_3689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3691) = &input.transit_gateway_route_table_id {
        scope_3690.string(var_3691);
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3693) = &input.transit_gateway_attachment_id {
        scope_3692.string(var_3693);
    }
    #[allow(unused_mut)]
    let mut scope_3694 = writer.prefix("DryRun");
    if let Some(var_3695) = &input.dry_run {
        scope_3694.boolean(*var_3695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("GatewayId");
    if let Some(var_3697) = &input.gateway_id {
        scope_3696.string(var_3697);
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("RouteTableId");
    if let Some(var_3699) = &input.route_table_id {
        scope_3698.string(var_3699);
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("DryRun");
    if let Some(var_3701) = &input.dry_run {
        scope_3700.boolean(*var_3701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("DryRun");
    if let Some(var_3703) = &input.dry_run {
        scope_3702.boolean(*var_3703);
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("VpcId");
    if let Some(var_3705) = &input.vpc_id {
        scope_3704.string(var_3705);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("VpcId");
    if let Some(var_3707) = &input.vpc_id {
        scope_3706.string(var_3707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("AssociationId");
    if let Some(var_3709) = &input.association_id {
        scope_3708.string(var_3709);
    }
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("PublicIp");
    if let Some(var_3711) = &input.public_ip {
        scope_3710.string(var_3711);
    }
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("DryRun");
    if let Some(var_3713) = &input.dry_run {
        scope_3712.boolean(*var_3713);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3715) = &input.client_vpn_endpoint_id {
        scope_3714.string(var_3715);
    }
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("AssociationId");
    if let Some(var_3717) = &input.association_id {
        scope_3716.string(var_3717);
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("DryRun");
    if let Some(var_3719) = &input.dry_run {
        scope_3718.boolean(*var_3719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("CertificateArn");
    if let Some(var_3721) = &input.certificate_arn {
        scope_3720.string(var_3721);
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("RoleArn");
    if let Some(var_3723) = &input.role_arn {
        scope_3722.string(var_3723);
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("DryRun");
    if let Some(var_3725) = &input.dry_run {
        scope_3724.boolean(*var_3725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("AssociationId");
    if let Some(var_3727) = &input.association_id {
        scope_3726.string(var_3727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("DryRun");
    if let Some(var_3729) = &input.dry_run {
        scope_3728.boolean(*var_3729);
    }
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("InstanceEventWindowId");
    if let Some(var_3731) = &input.instance_event_window_id {
        scope_3730.string(var_3731);
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("AssociationTarget");
    if let Some(var_3733) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_3732, var_3733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("AssociationId");
    if let Some(var_3735) = &input.association_id {
        scope_3734.string(var_3735);
    }
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("DryRun");
    if let Some(var_3737) = &input.dry_run {
        scope_3736.boolean(*var_3737);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("AssociationId");
    if let Some(var_3739) = &input.association_id {
        scope_3738.string(var_3739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3741) = &input.transit_gateway_multicast_domain_id {
        scope_3740.string(var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3743) = &input.transit_gateway_attachment_id {
        scope_3742.string(var_3743);
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("SubnetIds");
    if let Some(var_3745) = &input.subnet_ids {
        let mut list_3747 = scope_3744.start_list(true, Some("item"));
        for item_3746 in var_3745 {
            #[allow(unused_mut)]
            let mut entry_3748 = list_3747.entry();
            entry_3748.string(item_3746);
        }
        list_3747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3749 = writer.prefix("DryRun");
    if let Some(var_3750) = &input.dry_run {
        scope_3749.boolean(*var_3750);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3752) = &input.transit_gateway_route_table_id {
        scope_3751.string(var_3752);
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3754) = &input.transit_gateway_attachment_id {
        scope_3753.string(var_3754);
    }
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("DryRun");
    if let Some(var_3756) = &input.dry_run {
        scope_3755.boolean(*var_3756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3757 = writer.prefix("AssociationId");
    if let Some(var_3758) = &input.association_id {
        scope_3757.string(var_3758);
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("ClientToken");
    if let Some(var_3760) = &input.client_token {
        scope_3759.string(var_3760);
    }
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("DryRun");
    if let Some(var_3762) = &input.dry_run {
        scope_3761.boolean(*var_3762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("AssociationId");
    if let Some(var_3764) = &input.association_id {
        scope_3763.string(var_3764);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("DryRun");
    if let Some(var_3766) = &input.dry_run {
        scope_3765.boolean(*var_3766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("AvailabilityZone");
    if let Some(var_3768) = &input.availability_zones {
        let mut list_3770 = scope_3767.start_list(true, Some("AvailabilityZone"));
        for item_3769 in var_3768 {
            #[allow(unused_mut)]
            let mut entry_3771 = list_3770.entry();
            entry_3771.string(item_3769);
        }
        list_3770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("SourceSnapshotId");
    if let Some(var_3773) = &input.source_snapshot_ids {
        let mut list_3775 = scope_3772.start_list(true, Some("SnapshotId"));
        for item_3774 in var_3773 {
            #[allow(unused_mut)]
            let mut entry_3776 = list_3775.entry();
            entry_3776.string(item_3774);
        }
        list_3775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3777 = writer.prefix("DryRun");
    if let Some(var_3778) = &input.dry_run {
        scope_3777.boolean(*var_3778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3779 = writer.prefix("ImageId");
    if let Some(var_3780) = &input.image_id {
        scope_3779.string(var_3780);
    }
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("DeprecateAt");
    if let Some(var_3782) = &input.deprecate_at {
        scope_3781.instant(var_3782, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("DryRun");
    if let Some(var_3784) = &input.dry_run {
        scope_3783.boolean(*var_3784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("DryRun");
    if let Some(var_3786) = &input.dry_run {
        scope_3785.boolean(*var_3786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3788) = &input.transit_gateway_route_table_id {
        scope_3787.string(var_3788);
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3790) = &input.transit_gateway_attachment_id {
        scope_3789.string(var_3790);
    }
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("DryRun");
    if let Some(var_3792) = &input.dry_run {
        scope_3791.boolean(*var_3792);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("GatewayId");
    if let Some(var_3794) = &input.gateway_id {
        scope_3793.string(var_3794);
    }
    #[allow(unused_mut)]
    let mut scope_3795 = writer.prefix("RouteTableId");
    if let Some(var_3796) = &input.route_table_id {
        scope_3795.string(var_3796);
    }
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("DryRun");
    if let Some(var_3798) = &input.dry_run {
        scope_3797.boolean(*var_3798);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("DryRun");
    if let Some(var_3800) = &input.dry_run {
        scope_3799.boolean(*var_3800);
    }
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("VolumeId");
    if let Some(var_3802) = &input.volume_id {
        scope_3801.string(var_3802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("DryRun");
    if let Some(var_3804) = &input.dry_run {
        scope_3803.boolean(*var_3804);
    }
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("VpcId");
    if let Some(var_3806) = &input.vpc_id {
        scope_3805.string(var_3806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("VpcId");
    if let Some(var_3808) = &input.vpc_id {
        scope_3807.string(var_3808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3809 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3810) = &input.client_vpn_endpoint_id {
        scope_3809.string(var_3810);
    }
    #[allow(unused_mut)]
    let mut scope_3811 = writer.prefix("DryRun");
    if let Some(var_3812) = &input.dry_run {
        scope_3811.boolean(*var_3812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3813 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3814) = &input.client_vpn_endpoint_id {
        scope_3813.string(var_3814);
    }
    #[allow(unused_mut)]
    let mut scope_3815 = writer.prefix("DryRun");
    if let Some(var_3816) = &input.dry_run {
        scope_3815.boolean(*var_3816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3817 = writer.prefix("ClientToken");
    if let Some(var_3818) = &input.client_token {
        scope_3817.string(var_3818);
    }
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("Description");
    if let Some(var_3820) = &input.description {
        scope_3819.string(var_3820);
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("DiskImageFormat");
    if let Some(var_3822) = &input.disk_image_format {
        scope_3821.string(var_3822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("DryRun");
    if let Some(var_3824) = &input.dry_run {
        scope_3823.boolean(*var_3824);
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("ImageId");
    if let Some(var_3826) = &input.image_id {
        scope_3825.string(var_3826);
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("S3ExportLocation");
    if let Some(var_3828) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_3827, var_3828,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("RoleName");
    if let Some(var_3830) = &input.role_name {
        scope_3829.string(var_3830);
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("TagSpecification");
    if let Some(var_3832) = &input.tag_specifications {
        let mut list_3834 = scope_3831.start_list(true, Some("item"));
        for item_3833 in var_3832 {
            #[allow(unused_mut)]
            let mut entry_3835 = list_3834.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_3835, item_3833,
            );
        }
        list_3834.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3837) = &input.transit_gateway_route_table_id {
        scope_3836.string(var_3837);
    }
    #[allow(unused_mut)]
    let mut scope_3838 = writer.prefix("Filter");
    if let Some(var_3839) = &input.filters {
        let mut list_3841 = scope_3838.start_list(true, Some("Filter"));
        for item_3840 in var_3839 {
            #[allow(unused_mut)]
            let mut entry_3842 = list_3841.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3842, item_3840);
        }
        list_3841.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("S3Bucket");
    if let Some(var_3844) = &input.s3_bucket {
        scope_3843.string(var_3844);
    }
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("DryRun");
    if let Some(var_3846) = &input.dry_run {
        scope_3845.boolean(*var_3846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("CertificateArn");
    if let Some(var_3848) = &input.certificate_arn {
        scope_3847.string(var_3848);
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("DryRun");
    if let Some(var_3850) = &input.dry_run {
        scope_3849.boolean(*var_3850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("PoolId");
    if let Some(var_3852) = &input.pool_id {
        scope_3851.string(var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("NextToken");
    if let Some(var_3854) = &input.next_token {
        scope_3853.string(var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("MaxResults");
    if let Some(var_3856) = &input.max_results {
        scope_3855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("DryRun");
    if let Some(var_3858) = &input.dry_run {
        scope_3857.boolean(*var_3858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("CapacityReservationId");
    if let Some(var_3860) = &input.capacity_reservation_id {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("NextToken");
    if let Some(var_3862) = &input.next_token {
        scope_3861.string(var_3862);
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("MaxResults");
    if let Some(var_3864) = &input.max_results {
        scope_3863.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("DryRun");
    if let Some(var_3866) = &input.dry_run {
        scope_3865.boolean(*var_3866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("PoolId");
    if let Some(var_3868) = &input.pool_id {
        scope_3867.string(var_3868);
    }
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("Filter");
    if let Some(var_3870) = &input.filters {
        let mut list_3872 = scope_3869.start_list(true, Some("Filter"));
        for item_3871 in var_3870 {
            #[allow(unused_mut)]
            let mut entry_3873 = list_3872.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3873, item_3871);
        }
        list_3872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("MaxResults");
    if let Some(var_3875) = &input.max_results {
        scope_3874.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3875).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("NextToken");
    if let Some(var_3877) = &input.next_token {
        scope_3876.string(var_3877);
    }
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("DryRun");
    if let Some(var_3879) = &input.dry_run {
        scope_3878.boolean(*var_3879);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("InstanceId");
    if let Some(var_3881) = &input.instance_id {
        scope_3880.string(var_3881);
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("DryRun");
    if let Some(var_3883) = &input.dry_run {
        scope_3882.boolean(*var_3883);
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("Latest");
    if let Some(var_3885) = &input.latest {
        scope_3884.boolean(*var_3885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("DryRun");
    if let Some(var_3887) = &input.dry_run {
        scope_3886.boolean(*var_3887);
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("InstanceId");
    if let Some(var_3889) = &input.instance_id {
        scope_3888.string(var_3889);
    }
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("WakeUp");
    if let Some(var_3891) = &input.wake_up {
        scope_3890.boolean(*var_3891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("DryRun");
    if let Some(var_3893) = &input.dry_run {
        scope_3892.boolean(*var_3893);
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("InstanceFamily");
    if let Some(var_3895) = &input.instance_family {
        scope_3894.string(var_3895.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("DryRun");
    if let Some(var_3897) = &input.dry_run {
        scope_3896.boolean(*var_3897);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("DryRun");
    if let Some(var_3899) = &input.dry_run {
        scope_3898.boolean(*var_3899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("DryRun");
    if let Some(var_3901) = &input.dry_run {
        scope_3900.boolean(*var_3901);
    }
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("FlowLogId");
    if let Some(var_3903) = &input.flow_log_id {
        scope_3902.string(var_3903);
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3905) = &input.config_delivery_s3_destination_arn {
        scope_3904.string(var_3905);
    }
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("IntegrateService");
    if let Some(var_3907) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_3906, var_3907);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3908 = writer.prefix("CapacityReservationId");
    if let Some(var_3909) = &input.capacity_reservation_id {
        scope_3908.string(var_3909);
    }
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("NextToken");
    if let Some(var_3911) = &input.next_token {
        scope_3910.string(var_3911);
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("MaxResults");
    if let Some(var_3913) = &input.max_results {
        scope_3912.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3913).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("DryRun");
    if let Some(var_3915) = &input.dry_run {
        scope_3914.boolean(*var_3915);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("HostIdSet");
    if let Some(var_3917) = &input.host_id_set {
        let mut list_3919 = scope_3916.start_list(true, Some("item"));
        for item_3918 in var_3917 {
            #[allow(unused_mut)]
            let mut entry_3920 = list_3919.entry();
            entry_3920.string(item_3918);
        }
        list_3919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("OfferingId");
    if let Some(var_3922) = &input.offering_id {
        scope_3921.string(var_3922);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("DryRun");
    if let Some(var_3924) = &input.dry_run {
        scope_3923.boolean(*var_3924);
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("ArchitectureType");
    if let Some(var_3926) = &input.architecture_types {
        let mut list_3928 = scope_3925.start_list(true, Some("item"));
        for item_3927 in var_3926 {
            #[allow(unused_mut)]
            let mut entry_3929 = list_3928.entry();
            entry_3929.string(item_3927.as_str());
        }
        list_3928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3930 = writer.prefix("VirtualizationType");
    if let Some(var_3931) = &input.virtualization_types {
        let mut list_3933 = scope_3930.start_list(true, Some("item"));
        for item_3932 in var_3931 {
            #[allow(unused_mut)]
            let mut entry_3934 = list_3933.entry();
            entry_3934.string(item_3932.as_str());
        }
        list_3933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("InstanceRequirements");
    if let Some(var_3936) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_3935, var_3936,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("MaxResults");
    if let Some(var_3938) = &input.max_results {
        scope_3937.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("NextToken");
    if let Some(var_3940) = &input.next_token {
        scope_3939.string(var_3940);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("DryRun");
    if let Some(var_3942) = &input.dry_run {
        scope_3941.boolean(*var_3942);
    }
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("InstanceId");
    if let Some(var_3944) = &input.instance_id {
        scope_3943.string(var_3944);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("DryRun");
    if let Some(var_3946) = &input.dry_run {
        scope_3945.boolean(*var_3946);
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("PrefixListId");
    if let Some(var_3948) = &input.prefix_list_id {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("MaxResults");
    if let Some(var_3950) = &input.max_results {
        scope_3949.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3950).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("NextToken");
    if let Some(var_3952) = &input.next_token {
        scope_3951.string(var_3952);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("DryRun");
    if let Some(var_3954) = &input.dry_run {
        scope_3953.boolean(*var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("PrefixListId");
    if let Some(var_3956) = &input.prefix_list_id {
        scope_3955.string(var_3956);
    }
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("TargetVersion");
    if let Some(var_3958) = &input.target_version {
        scope_3957.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("MaxResults");
    if let Some(var_3960) = &input.max_results {
        scope_3959.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3960).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("NextToken");
    if let Some(var_3962) = &input.next_token {
        scope_3961.string(var_3962);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("InstanceId");
    if let Some(var_3964) = &input.instance_id {
        scope_3963.string(var_3964);
    }
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("DryRun");
    if let Some(var_3966) = &input.dry_run {
        scope_3965.boolean(*var_3966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("DryRun");
    if let Some(var_3968) = &input.dry_run {
        scope_3967.boolean(*var_3968);
    }
    #[allow(unused_mut)]
    let mut scope_3969 = writer.prefix("ReservedInstanceId");
    if let Some(var_3970) = &input.reserved_instance_ids {
        let mut list_3972 = scope_3969.start_list(true, Some("ReservedInstanceId"));
        for item_3971 in var_3970 {
            #[allow(unused_mut)]
            let mut entry_3973 = list_3972.entry();
            entry_3973.string(item_3971);
        }
        list_3972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("TargetConfiguration");
    if let Some(var_3975) = &input.target_configurations {
        let mut list_3977 = scope_3974.start_list(true, Some("TargetConfigurationRequest"));
        for item_3976 in var_3975 {
            #[allow(unused_mut)]
            let mut entry_3978 = list_3977.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_3978, item_3976,
            );
        }
        list_3977.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("DryRun");
    if let Some(var_3980) = &input.dry_run {
        scope_3979.boolean(*var_3980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("InstanceType");
    if let Some(var_3982) = &input.instance_types {
        let mut list_3984 = scope_3981.start_list(true, None);
        for item_3983 in var_3982 {
            #[allow(unused_mut)]
            let mut entry_3985 = list_3984.entry();
            entry_3985.string(item_3983);
        }
        list_3984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("TargetCapacity");
    if let Some(var_3987) = &input.target_capacity {
        scope_3986.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3987).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_3989) = &input.target_capacity_unit_type {
        scope_3988.string(var_3989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_3991) = &input.single_availability_zone {
        scope_3990.boolean(*var_3991);
    }
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("RegionName");
    if let Some(var_3993) = &input.region_names {
        let mut list_3995 = scope_3992.start_list(true, None);
        for item_3994 in var_3993 {
            #[allow(unused_mut)]
            let mut entry_3996 = list_3995.entry();
            entry_3996.string(item_3994);
        }
        list_3995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_3998) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_3997, var_3998);
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("DryRun");
    if let Some(var_4000) = &input.dry_run {
        scope_3999.boolean(*var_4000);
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("MaxResults");
    if let Some(var_4002) = &input.max_results {
        scope_4001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("NextToken");
    if let Some(var_4004) = &input.next_token {
        scope_4003.string(var_4004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("Filter");
    if let Some(var_4006) = &input.filters {
        let mut list_4008 = scope_4005.start_list(true, Some("Filter"));
        for item_4007 in var_4006 {
            #[allow(unused_mut)]
            let mut entry_4009 = list_4008.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4009, item_4007);
        }
        list_4008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4010 = writer.prefix("SubnetId");
    if let Some(var_4011) = &input.subnet_id {
        scope_4010.string(var_4011);
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("DryRun");
    if let Some(var_4013) = &input.dry_run {
        scope_4012.boolean(*var_4013);
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("NextToken");
    if let Some(var_4015) = &input.next_token {
        scope_4014.string(var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("MaxResults");
    if let Some(var_4017) = &input.max_results {
        scope_4016.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4017).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4019) = &input.transit_gateway_attachment_id {
        scope_4018.string(var_4019);
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("Filter");
    if let Some(var_4021) = &input.filters {
        let mut list_4023 = scope_4020.start_list(true, Some("Filter"));
        for item_4022 in var_4021 {
            #[allow(unused_mut)]
            let mut entry_4024 = list_4023.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4024, item_4022);
        }
        list_4023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4025 = writer.prefix("MaxResults");
    if let Some(var_4026) = &input.max_results {
        scope_4025.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4026).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4027 = writer.prefix("NextToken");
    if let Some(var_4028) = &input.next_token {
        scope_4027.string(var_4028);
    }
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("DryRun");
    if let Some(var_4030) = &input.dry_run {
        scope_4029.boolean(*var_4030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4032) = &input.transit_gateway_multicast_domain_id {
        scope_4031.string(var_4032);
    }
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("Filter");
    if let Some(var_4034) = &input.filters {
        let mut list_4036 = scope_4033.start_list(true, Some("Filter"));
        for item_4035 in var_4034 {
            #[allow(unused_mut)]
            let mut entry_4037 = list_4036.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4037, item_4035);
        }
        list_4036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("MaxResults");
    if let Some(var_4039) = &input.max_results {
        scope_4038.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4039).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("NextToken");
    if let Some(var_4041) = &input.next_token {
        scope_4040.string(var_4041);
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("DryRun");
    if let Some(var_4043) = &input.dry_run {
        scope_4042.boolean(*var_4043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4045) = &input.transit_gateway_route_table_id {
        scope_4044.string(var_4045);
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("Filter");
    if let Some(var_4047) = &input.filters {
        let mut list_4049 = scope_4046.start_list(true, Some("Filter"));
        for item_4048 in var_4047 {
            #[allow(unused_mut)]
            let mut entry_4050 = list_4049.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4050, item_4048);
        }
        list_4049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4051 = writer.prefix("MaxResults");
    if let Some(var_4052) = &input.max_results {
        scope_4051.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4052).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4053 = writer.prefix("NextToken");
    if let Some(var_4054) = &input.next_token {
        scope_4053.string(var_4054);
    }
    #[allow(unused_mut)]
    let mut scope_4055 = writer.prefix("DryRun");
    if let Some(var_4056) = &input.dry_run {
        scope_4055.boolean(*var_4056);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4057 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4058) = &input.transit_gateway_route_table_id {
        scope_4057.string(var_4058);
    }
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("Filter");
    if let Some(var_4060) = &input.filters {
        let mut list_4062 = scope_4059.start_list(true, Some("Filter"));
        for item_4061 in var_4060 {
            #[allow(unused_mut)]
            let mut entry_4063 = list_4062.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4063, item_4061);
        }
        list_4062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("MaxResults");
    if let Some(var_4065) = &input.max_results {
        scope_4064.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4065).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("NextToken");
    if let Some(var_4067) = &input.next_token {
        scope_4066.string(var_4067);
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("DryRun");
    if let Some(var_4069) = &input.dry_run {
        scope_4068.boolean(*var_4069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4071) = &input.transit_gateway_route_table_id {
        scope_4070.string(var_4071);
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("Filter");
    if let Some(var_4073) = &input.filters {
        let mut list_4075 = scope_4072.start_list(true, Some("Filter"));
        for item_4074 in var_4073 {
            #[allow(unused_mut)]
            let mut entry_4076 = list_4075.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4076, item_4074);
        }
        list_4075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("MaxResults");
    if let Some(var_4078) = &input.max_results {
        scope_4077.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4078).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("NextToken");
    if let Some(var_4080) = &input.next_token {
        scope_4079.string(var_4080);
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("DryRun");
    if let Some(var_4082) = &input.dry_run {
        scope_4081.boolean(*var_4082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("VpnConnectionId");
    if let Some(var_4084) = &input.vpn_connection_id {
        scope_4083.string(var_4084);
    }
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4086) = &input.vpn_connection_device_type_id {
        scope_4085.string(var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4088) = &input.internet_key_exchange_version {
        scope_4087.string(var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("DryRun");
    if let Some(var_4090) = &input.dry_run {
        scope_4089.boolean(*var_4090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("MaxResults");
    if let Some(var_4092) = &input.max_results {
        scope_4091.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4092).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("NextToken");
    if let Some(var_4094) = &input.next_token {
        scope_4093.string(var_4094);
    }
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("DryRun");
    if let Some(var_4096) = &input.dry_run {
        scope_4095.boolean(*var_4096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4098) = &input.client_vpn_endpoint_id {
        scope_4097.string(var_4098);
    }
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("CertificateRevocationList");
    if let Some(var_4100) = &input.certificate_revocation_list {
        scope_4099.string(var_4100);
    }
    #[allow(unused_mut)]
    let mut scope_4101 = writer.prefix("DryRun");
    if let Some(var_4102) = &input.dry_run {
        scope_4101.boolean(*var_4102);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("Architecture");
    if let Some(var_4104) = &input.architecture {
        scope_4103.string(var_4104);
    }
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("ClientData");
    if let Some(var_4106) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4105, var_4106);
    }
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("ClientToken");
    if let Some(var_4108) = &input.client_token {
        scope_4107.string(var_4108);
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("Description");
    if let Some(var_4110) = &input.description {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("DiskContainer");
    if let Some(var_4112) = &input.disk_containers {
        let mut list_4114 = scope_4111.start_list(true, Some("item"));
        for item_4113 in var_4112 {
            #[allow(unused_mut)]
            let mut entry_4115 = list_4114.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4115, item_4113,
            );
        }
        list_4114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("DryRun");
    if let Some(var_4117) = &input.dry_run {
        scope_4116.boolean(*var_4117);
    }
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("Encrypted");
    if let Some(var_4119) = &input.encrypted {
        scope_4118.boolean(*var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("Hypervisor");
    if let Some(var_4121) = &input.hypervisor {
        scope_4120.string(var_4121);
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("KmsKeyId");
    if let Some(var_4123) = &input.kms_key_id {
        scope_4122.string(var_4123);
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("LicenseType");
    if let Some(var_4125) = &input.license_type {
        scope_4124.string(var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("Platform");
    if let Some(var_4127) = &input.platform {
        scope_4126.string(var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("RoleName");
    if let Some(var_4129) = &input.role_name {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("LicenseSpecifications");
    if let Some(var_4131) = &input.license_specifications {
        let mut list_4133 = scope_4130.start_list(true, Some("item"));
        for item_4132 in var_4131 {
            #[allow(unused_mut)]
            let mut entry_4134 = list_4133.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4134, item_4132);
        }
        list_4133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("TagSpecification");
    if let Some(var_4136) = &input.tag_specifications {
        let mut list_4138 = scope_4135.start_list(true, Some("item"));
        for item_4137 in var_4136 {
            #[allow(unused_mut)]
            let mut entry_4139 = list_4138.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4139, item_4137,
            );
        }
        list_4138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("UsageOperation");
    if let Some(var_4141) = &input.usage_operation {
        scope_4140.string(var_4141);
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("BootMode");
    if let Some(var_4143) = &input.boot_mode {
        scope_4142.string(var_4143.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("Description");
    if let Some(var_4145) = &input.description {
        scope_4144.string(var_4145);
    }
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("DiskImage");
    if let Some(var_4147) = &input.disk_images {
        let mut list_4149 = scope_4146.start_list(true, None);
        for item_4148 in var_4147 {
            #[allow(unused_mut)]
            let mut entry_4150 = list_4149.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4150, item_4148);
        }
        list_4149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DryRun");
    if let Some(var_4152) = &input.dry_run {
        scope_4151.boolean(*var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("LaunchSpecification");
    if let Some(var_4154) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4153, var_4154,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("Platform");
    if let Some(var_4156) = &input.platform {
        scope_4155.string(var_4156.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("DryRun");
    if let Some(var_4158) = &input.dry_run {
        scope_4157.boolean(*var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("KeyName");
    if let Some(var_4160) = &input.key_name {
        scope_4159.string(var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4162) = &input.public_key_material {
        scope_4161.string(&aws_smithy_types::base64::encode(var_4162));
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("TagSpecification");
    if let Some(var_4164) = &input.tag_specifications {
        let mut list_4166 = scope_4163.start_list(true, Some("item"));
        for item_4165 in var_4164 {
            #[allow(unused_mut)]
            let mut entry_4167 = list_4166.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4167, item_4165,
            );
        }
        list_4166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4168 = writer.prefix("ClientData");
    if let Some(var_4169) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4168, var_4169);
    }
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("ClientToken");
    if let Some(var_4171) = &input.client_token {
        scope_4170.string(var_4171);
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("Description");
    if let Some(var_4173) = &input.description {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("DiskContainer");
    if let Some(var_4175) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4174, var_4175,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("DryRun");
    if let Some(var_4177) = &input.dry_run {
        scope_4176.boolean(*var_4177);
    }
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("Encrypted");
    if let Some(var_4179) = &input.encrypted {
        scope_4178.boolean(*var_4179);
    }
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("KmsKeyId");
    if let Some(var_4181) = &input.kms_key_id {
        scope_4180.string(var_4181);
    }
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("RoleName");
    if let Some(var_4183) = &input.role_name {
        scope_4182.string(var_4183);
    }
    #[allow(unused_mut)]
    let mut scope_4184 = writer.prefix("TagSpecification");
    if let Some(var_4185) = &input.tag_specifications {
        let mut list_4187 = scope_4184.start_list(true, Some("item"));
        for item_4186 in var_4185 {
            #[allow(unused_mut)]
            let mut entry_4188 = list_4187.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4188, item_4186,
            );
        }
        list_4187.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("AvailabilityZone");
    if let Some(var_4190) = &input.availability_zone {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("Description");
    if let Some(var_4192) = &input.description {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("DryRun");
    if let Some(var_4194) = &input.dry_run {
        scope_4193.boolean(*var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("Image");
    if let Some(var_4196) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4195, var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Volume");
    if let Some(var_4198) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4197, var_4198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("AllocationId");
    if let Some(var_4200) = &input.allocation_id {
        scope_4199.string(var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("DomainName");
    if let Some(var_4202) = &input.domain_name {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("DryRun");
    if let Some(var_4204) = &input.dry_run {
        scope_4203.boolean(*var_4204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("GroupName");
    if let Some(var_4206) = &input.group_name {
        scope_4205.string(var_4206);
    }
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("OptInStatus");
    if let Some(var_4208) = &input.opt_in_status {
        scope_4207.string(var_4208.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("DryRun");
    if let Some(var_4210) = &input.dry_run {
        scope_4209.boolean(*var_4210);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("CapacityReservationId");
    if let Some(var_4212) = &input.capacity_reservation_id {
        scope_4211.string(var_4212);
    }
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("InstanceCount");
    if let Some(var_4214) = &input.instance_count {
        scope_4213.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4214).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("EndDate");
    if let Some(var_4216) = &input.end_date {
        scope_4215.instant(var_4216, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("EndDateType");
    if let Some(var_4218) = &input.end_date_type {
        scope_4217.string(var_4218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("Accept");
    if let Some(var_4220) = &input.accept {
        scope_4219.boolean(*var_4220);
    }
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("DryRun");
    if let Some(var_4222) = &input.dry_run {
        scope_4221.boolean(*var_4222);
    }
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("AdditionalInfo");
    if let Some(var_4224) = &input.additional_info {
        scope_4223.string(var_4224);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4226) = &input.capacity_reservation_fleet_id {
        scope_4225.string(var_4226);
    }
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4228) = &input.total_target_capacity {
        scope_4227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("EndDate");
    if let Some(var_4230) = &input.end_date {
        scope_4229.instant(var_4230, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("DryRun");
    if let Some(var_4232) = &input.dry_run {
        scope_4231.boolean(*var_4232);
    }
    #[allow(unused_mut)]
    let mut scope_4233 = writer.prefix("RemoveEndDate");
    if let Some(var_4234) = &input.remove_end_date {
        scope_4233.boolean(*var_4234);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4235 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4236) = &input.client_vpn_endpoint_id {
        scope_4235.string(var_4236);
    }
    #[allow(unused_mut)]
    let mut scope_4237 = writer.prefix("ServerCertificateArn");
    if let Some(var_4238) = &input.server_certificate_arn {
        scope_4237.string(var_4238);
    }
    #[allow(unused_mut)]
    let mut scope_4239 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4240) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4239, var_4240,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("DnsServers");
    if let Some(var_4242) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4241, var_4242,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("VpnPort");
    if let Some(var_4244) = &input.vpn_port {
        scope_4243.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4244).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("Description");
    if let Some(var_4246) = &input.description {
        scope_4245.string(var_4246);
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("SplitTunnel");
    if let Some(var_4248) = &input.split_tunnel {
        scope_4247.boolean(*var_4248);
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("DryRun");
    if let Some(var_4250) = &input.dry_run {
        scope_4249.boolean(*var_4250);
    }
    #[allow(unused_mut)]
    let mut scope_4251 = writer.prefix("SecurityGroupId");
    if let Some(var_4252) = &input.security_group_ids {
        let mut list_4254 = scope_4251.start_list(true, Some("item"));
        for item_4253 in var_4252 {
            #[allow(unused_mut)]
            let mut entry_4255 = list_4254.entry();
            entry_4255.string(item_4253);
        }
        list_4254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("VpcId");
    if let Some(var_4257) = &input.vpc_id {
        scope_4256.string(var_4257);
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("SelfServicePortal");
    if let Some(var_4259) = &input.self_service_portal {
        scope_4258.string(var_4259.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("ClientConnectOptions");
    if let Some(var_4261) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4260, var_4261,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("DryRun");
    if let Some(var_4263) = &input.dry_run {
        scope_4262.boolean(*var_4263);
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("InstanceFamily");
    if let Some(var_4265) = &input.instance_family {
        scope_4264.string(var_4265.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("CpuCredits");
    if let Some(var_4267) = &input.cpu_credits {
        scope_4266.string(var_4267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("KmsKeyId");
    if let Some(var_4269) = &input.kms_key_id {
        scope_4268.string(var_4269);
    }
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("DryRun");
    if let Some(var_4271) = &input.dry_run {
        scope_4270.boolean(*var_4271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("DryRun");
    if let Some(var_4273) = &input.dry_run {
        scope_4272.boolean(*var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4275) = &input.excess_capacity_termination_policy {
        scope_4274.string(var_4275.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4277) = &input.launch_template_configs {
        let mut list_4279 = scope_4276.start_list(true, Some("item"));
        for item_4278 in var_4277 {
            #[allow(unused_mut)]
            let mut entry_4280 = list_4279.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4280, item_4278,
            );
        }
        list_4279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("FleetId");
    if let Some(var_4282) = &input.fleet_id {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4284) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4283, var_4284,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("Context");
    if let Some(var_4286) = &input.context {
        scope_4285.string(var_4286);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("DryRun");
    if let Some(var_4288) = &input.dry_run {
        scope_4287.boolean(*var_4288);
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("FpgaImageId");
    if let Some(var_4290) = &input.fpga_image_id {
        scope_4289.string(var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("Attribute");
    if let Some(var_4292) = &input.attribute {
        scope_4291.string(var_4292.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("OperationType");
    if let Some(var_4294) = &input.operation_type {
        scope_4293.string(var_4294.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("UserId");
    if let Some(var_4296) = &input.user_ids {
        let mut list_4298 = scope_4295.start_list(true, Some("UserId"));
        for item_4297 in var_4296 {
            #[allow(unused_mut)]
            let mut entry_4299 = list_4298.entry();
            entry_4299.string(item_4297);
        }
        list_4298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("UserGroup");
    if let Some(var_4301) = &input.user_groups {
        let mut list_4303 = scope_4300.start_list(true, Some("UserGroup"));
        for item_4302 in var_4301 {
            #[allow(unused_mut)]
            let mut entry_4304 = list_4303.entry();
            entry_4304.string(item_4302);
        }
        list_4303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4305 = writer.prefix("ProductCode");
    if let Some(var_4306) = &input.product_codes {
        let mut list_4308 = scope_4305.start_list(true, Some("ProductCode"));
        for item_4307 in var_4306 {
            #[allow(unused_mut)]
            let mut entry_4309 = list_4308.entry();
            entry_4309.string(item_4307);
        }
        list_4308.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("LoadPermission");
    if let Some(var_4311) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4310, var_4311,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("Description");
    if let Some(var_4313) = &input.description {
        scope_4312.string(var_4313);
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("Name");
    if let Some(var_4315) = &input.name {
        scope_4314.string(var_4315);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("AutoPlacement");
    if let Some(var_4317) = &input.auto_placement {
        scope_4316.string(var_4317.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("HostId");
    if let Some(var_4319) = &input.host_ids {
        let mut list_4321 = scope_4318.start_list(true, Some("item"));
        for item_4320 in var_4319 {
            #[allow(unused_mut)]
            let mut entry_4322 = list_4321.entry();
            entry_4322.string(item_4320);
        }
        list_4321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("HostRecovery");
    if let Some(var_4324) = &input.host_recovery {
        scope_4323.string(var_4324.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("InstanceType");
    if let Some(var_4326) = &input.instance_type {
        scope_4325.string(var_4326);
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("InstanceFamily");
    if let Some(var_4328) = &input.instance_family {
        scope_4327.string(var_4328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("PrincipalArn");
    if let Some(var_4330) = &input.principal_arn {
        scope_4329.string(var_4330);
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("Resource");
    if let Some(var_4332) = &input.resource {
        scope_4331.string(var_4332);
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("UseLongIds");
    if let Some(var_4334) = &input.use_long_ids {
        scope_4333.boolean(*var_4334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("Resource");
    if let Some(var_4336) = &input.resource {
        scope_4335.string(var_4336);
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("UseLongIds");
    if let Some(var_4338) = &input.use_long_ids {
        scope_4337.boolean(*var_4338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("Attribute");
    if let Some(var_4340) = &input.attribute {
        scope_4339.string(var_4340);
    }
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("Description");
    if let Some(var_4342) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4341, var_4342);
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("ImageId");
    if let Some(var_4344) = &input.image_id {
        scope_4343.string(var_4344);
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("LaunchPermission");
    if let Some(var_4346) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4345, var_4346,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("OperationType");
    if let Some(var_4348) = &input.operation_type {
        scope_4347.string(var_4348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("ProductCode");
    if let Some(var_4350) = &input.product_codes {
        let mut list_4352 = scope_4349.start_list(true, Some("ProductCode"));
        for item_4351 in var_4350 {
            #[allow(unused_mut)]
            let mut entry_4353 = list_4352.entry();
            entry_4353.string(item_4351);
        }
        list_4352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("UserGroup");
    if let Some(var_4355) = &input.user_groups {
        let mut list_4357 = scope_4354.start_list(true, Some("UserGroup"));
        for item_4356 in var_4355 {
            #[allow(unused_mut)]
            let mut entry_4358 = list_4357.entry();
            entry_4358.string(item_4356);
        }
        list_4357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4359 = writer.prefix("UserId");
    if let Some(var_4360) = &input.user_ids {
        let mut list_4362 = scope_4359.start_list(true, Some("UserId"));
        for item_4361 in var_4360 {
            #[allow(unused_mut)]
            let mut entry_4363 = list_4362.entry();
            entry_4363.string(item_4361);
        }
        list_4362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("Value");
    if let Some(var_4365) = &input.value {
        scope_4364.string(var_4365);
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("DryRun");
    if let Some(var_4367) = &input.dry_run {
        scope_4366.boolean(*var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("OrganizationArn");
    if let Some(var_4369) = &input.organization_arns {
        let mut list_4371 = scope_4368.start_list(true, Some("OrganizationArn"));
        for item_4370 in var_4369 {
            #[allow(unused_mut)]
            let mut entry_4372 = list_4371.entry();
            entry_4372.string(item_4370);
        }
        list_4371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4373 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4374) = &input.organizational_unit_arns {
        let mut list_4376 = scope_4373.start_list(true, Some("OrganizationalUnitArn"));
        for item_4375 in var_4374 {
            #[allow(unused_mut)]
            let mut entry_4377 = list_4376.entry();
            entry_4377.string(item_4375);
        }
        list_4376.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("SourceDestCheck");
    if let Some(var_4379) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4378, var_4379,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("Attribute");
    if let Some(var_4381) = &input.attribute {
        scope_4380.string(var_4381.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4383) = &input.block_device_mappings {
        let mut list_4385 = scope_4382.start_list(true, Some("item"));
        for item_4384 in var_4383 {
            #[allow(unused_mut)]
            let mut entry_4386 = list_4385.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4386, item_4384);
        }
        list_4385.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("DisableApiTermination");
    if let Some(var_4388) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4387, var_4388,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("DryRun");
    if let Some(var_4390) = &input.dry_run {
        scope_4389.boolean(*var_4390);
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("EbsOptimized");
    if let Some(var_4392) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4391, var_4392,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("EnaSupport");
    if let Some(var_4394) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4393, var_4394,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("GroupId");
    if let Some(var_4396) = &input.groups {
        let mut list_4398 = scope_4395.start_list(true, Some("groupId"));
        for item_4397 in var_4396 {
            #[allow(unused_mut)]
            let mut entry_4399 = list_4398.entry();
            entry_4399.string(item_4397);
        }
        list_4398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4400 = writer.prefix("InstanceId");
    if let Some(var_4401) = &input.instance_id {
        scope_4400.string(var_4401);
    }
    #[allow(unused_mut)]
    let mut scope_4402 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4403) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4402, var_4403);
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("InstanceType");
    if let Some(var_4405) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4404, var_4405);
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("Kernel");
    if let Some(var_4407) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4406, var_4407);
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("Ramdisk");
    if let Some(var_4409) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4408, var_4409);
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("SriovNetSupport");
    if let Some(var_4411) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4410, var_4411);
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("UserData");
    if let Some(var_4413) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4412, var_4413,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("Value");
    if let Some(var_4415) = &input.value {
        scope_4414.string(var_4415);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("InstanceId");
    if let Some(var_4417) = &input.instance_id {
        scope_4416.string(var_4417);
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4419) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4418, var_4419,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("DryRun");
    if let Some(var_4421) = &input.dry_run {
        scope_4420.boolean(*var_4421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("DryRun");
    if let Some(var_4423) = &input.dry_run {
        scope_4422.boolean(*var_4423);
    }
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("ClientToken");
    if let Some(var_4425) = &input.client_token {
        scope_4424.string(var_4425);
    }
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4427) = &input.instance_credit_specifications {
        let mut list_4429 = scope_4426.start_list(true, Some("item"));
        for item_4428 in var_4427 {
            #[allow(unused_mut)]
            let mut entry_4430 = list_4429.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(
                entry_4430, item_4428,
            );
        }
        list_4429.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("DryRun");
    if let Some(var_4432) = &input.dry_run {
        scope_4431.boolean(*var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("InstanceId");
    if let Some(var_4434) = &input.instance_id {
        scope_4433.string(var_4434);
    }
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("InstanceEventId");
    if let Some(var_4436) = &input.instance_event_id {
        scope_4435.string(var_4436);
    }
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("NotBefore");
    if let Some(var_4438) = &input.not_before {
        scope_4437.instant(var_4438, aws_smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("DryRun");
    if let Some(var_4440) = &input.dry_run {
        scope_4439.boolean(*var_4440);
    }
    #[allow(unused_mut)]
    let mut scope_4441 = writer.prefix("Name");
    if let Some(var_4442) = &input.name {
        scope_4441.string(var_4442);
    }
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4444) = &input.instance_event_window_id {
        scope_4443.string(var_4444);
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("TimeRange");
    if let Some(var_4446) = &input.time_ranges {
        let mut list_4448 = scope_4445.start_list(true, None);
        for item_4447 in var_4446 {
            #[allow(unused_mut)]
            let mut entry_4449 = list_4448.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4449, item_4447);
        }
        list_4448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("CronExpression");
    if let Some(var_4451) = &input.cron_expression {
        scope_4450.string(var_4451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("InstanceId");
    if let Some(var_4453) = &input.instance_id {
        scope_4452.string(var_4453);
    }
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("HttpTokens");
    if let Some(var_4455) = &input.http_tokens {
        scope_4454.string(var_4455.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4457) = &input.http_put_response_hop_limit {
        scope_4456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4457).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("HttpEndpoint");
    if let Some(var_4459) = &input.http_endpoint {
        scope_4458.string(var_4459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("DryRun");
    if let Some(var_4461) = &input.dry_run {
        scope_4460.boolean(*var_4461);
    }
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4463) = &input.http_protocol_ipv6 {
        scope_4462.string(var_4463.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("Affinity");
    if let Some(var_4465) = &input.affinity {
        scope_4464.string(var_4465.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("GroupName");
    if let Some(var_4467) = &input.group_name {
        scope_4466.string(var_4467);
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("HostId");
    if let Some(var_4469) = &input.host_id {
        scope_4468.string(var_4469);
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("InstanceId");
    if let Some(var_4471) = &input.instance_id {
        scope_4470.string(var_4471);
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("Tenancy");
    if let Some(var_4473) = &input.tenancy {
        scope_4472.string(var_4473.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("PartitionNumber");
    if let Some(var_4475) = &input.partition_number {
        scope_4474.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4477) = &input.host_resource_group_arn {
        scope_4476.string(var_4477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("DryRun");
    if let Some(var_4479) = &input.dry_run {
        scope_4478.boolean(*var_4479);
    }
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("ClientToken");
    if let Some(var_4481) = &input.client_token {
        scope_4480.string(var_4481);
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("LaunchTemplateId");
    if let Some(var_4483) = &input.launch_template_id {
        scope_4482.string(var_4483);
    }
    #[allow(unused_mut)]
    let mut scope_4484 = writer.prefix("LaunchTemplateName");
    if let Some(var_4485) = &input.launch_template_name {
        scope_4484.string(var_4485);
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("SetDefaultVersion");
    if let Some(var_4487) = &input.default_version {
        scope_4486.string(var_4487);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4488 = writer.prefix("DryRun");
    if let Some(var_4489) = &input.dry_run {
        scope_4488.boolean(*var_4489);
    }
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("PrefixListId");
    if let Some(var_4491) = &input.prefix_list_id {
        scope_4490.string(var_4491);
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("CurrentVersion");
    if let Some(var_4493) = &input.current_version {
        scope_4492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("PrefixListName");
    if let Some(var_4495) = &input.prefix_list_name {
        scope_4494.string(var_4495);
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("AddEntry");
    if let Some(var_4497) = &input.add_entries {
        let mut list_4499 = scope_4496.start_list(true, None);
        for item_4498 in var_4497 {
            #[allow(unused_mut)]
            let mut entry_4500 = list_4499.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4500, item_4498,
            );
        }
        list_4499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("RemoveEntry");
    if let Some(var_4502) = &input.remove_entries {
        let mut list_4504 = scope_4501.start_list(true, None);
        for item_4503 in var_4502 {
            #[allow(unused_mut)]
            let mut entry_4505 = list_4504.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4505, item_4503,
            );
        }
        list_4504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("MaxEntries");
    if let Some(var_4507) = &input.max_entries {
        scope_4506.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4507).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("Attachment");
    if let Some(var_4509) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4508, var_4509,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("Description");
    if let Some(var_4511) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4510, var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("DryRun");
    if let Some(var_4513) = &input.dry_run {
        scope_4512.boolean(*var_4513);
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("SecurityGroupId");
    if let Some(var_4515) = &input.groups {
        let mut list_4517 = scope_4514.start_list(true, Some("SecurityGroupId"));
        for item_4516 in var_4515 {
            #[allow(unused_mut)]
            let mut entry_4518 = list_4517.entry();
            entry_4518.string(item_4516);
        }
        list_4517.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4519 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4520) = &input.network_interface_id {
        scope_4519.string(var_4520);
    }
    #[allow(unused_mut)]
    let mut scope_4521 = writer.prefix("SourceDestCheck");
    if let Some(var_4522) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4521, var_4522,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4523 = writer.prefix("ReservedInstancesId");
    if let Some(var_4524) = &input.reserved_instances_ids {
        let mut list_4526 = scope_4523.start_list(true, Some("ReservedInstancesId"));
        for item_4525 in var_4524 {
            #[allow(unused_mut)]
            let mut entry_4527 = list_4526.entry();
            entry_4527.string(item_4525);
        }
        list_4526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("ClientToken");
    if let Some(var_4529) = &input.client_token {
        scope_4528.string(var_4529);
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4531) = &input.target_configurations {
        let mut list_4533 = scope_4530.start_list(true, Some("item"));
        for item_4532 in var_4531 {
            #[allow(unused_mut)]
            let mut entry_4534 = list_4533.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_4534, item_4532,
            );
        }
        list_4533.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("GroupId");
    if let Some(var_4536) = &input.group_id {
        scope_4535.string(var_4536);
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("SecurityGroupRule");
    if let Some(var_4538) = &input.security_group_rules {
        let mut list_4540 = scope_4537.start_list(true, Some("item"));
        for item_4539 in var_4538 {
            #[allow(unused_mut)]
            let mut entry_4541 = list_4540.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_4541, item_4539,
            );
        }
        list_4540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("DryRun");
    if let Some(var_4543) = &input.dry_run {
        scope_4542.boolean(*var_4543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("Attribute");
    if let Some(var_4545) = &input.attribute {
        scope_4544.string(var_4545.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("CreateVolumePermission");
    if let Some(var_4547) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_4546, var_4547,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("UserGroup");
    if let Some(var_4549) = &input.group_names {
        let mut list_4551 = scope_4548.start_list(true, Some("GroupName"));
        for item_4550 in var_4549 {
            #[allow(unused_mut)]
            let mut entry_4552 = list_4551.entry();
            entry_4552.string(item_4550);
        }
        list_4551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("OperationType");
    if let Some(var_4554) = &input.operation_type {
        scope_4553.string(var_4554.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("SnapshotId");
    if let Some(var_4556) = &input.snapshot_id {
        scope_4555.string(var_4556);
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("UserId");
    if let Some(var_4558) = &input.user_ids {
        let mut list_4560 = scope_4557.start_list(true, Some("UserId"));
        for item_4559 in var_4558 {
            #[allow(unused_mut)]
            let mut entry_4561 = list_4560.entry();
            entry_4561.string(item_4559);
        }
        list_4560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("DryRun");
    if let Some(var_4563) = &input.dry_run {
        scope_4562.boolean(*var_4563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4565) = &input.excess_capacity_termination_policy {
        scope_4564.string(var_4565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4567) = &input.launch_template_configs {
        let mut list_4569 = scope_4566.start_list(true, Some("item"));
        for item_4568 in var_4567 {
            #[allow(unused_mut)]
            let mut entry_4570 = list_4569.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_4570, item_4568,
            );
        }
        list_4569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4571 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4572) = &input.spot_fleet_request_id {
        scope_4571.string(var_4572);
    }
    #[allow(unused_mut)]
    let mut scope_4573 = writer.prefix("TargetCapacity");
    if let Some(var_4574) = &input.target_capacity {
        scope_4573.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4574).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4575 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4576) = &input.on_demand_target_capacity {
        scope_4575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4577 = writer.prefix("Context");
    if let Some(var_4578) = &input.context {
        scope_4577.string(var_4578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4579 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4580) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4579, var_4580,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4582) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4581, var_4582,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("SubnetId");
    if let Some(var_4584) = &input.subnet_id {
        scope_4583.string(var_4584);
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4586) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4585, var_4586,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4588) = &input.customer_owned_ipv4_pool {
        scope_4587.string(var_4588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4590) = &input.traffic_mirror_filter_id {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("AddNetworkService");
    if let Some(var_4592) = &input.add_network_services {
        let mut list_4594 = scope_4591.start_list(true, Some("item"));
        for item_4593 in var_4592 {
            #[allow(unused_mut)]
            let mut entry_4595 = list_4594.entry();
            entry_4595.string(item_4593.as_str());
        }
        list_4594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4596 = writer.prefix("RemoveNetworkService");
    if let Some(var_4597) = &input.remove_network_services {
        let mut list_4599 = scope_4596.start_list(true, Some("item"));
        for item_4598 in var_4597 {
            #[allow(unused_mut)]
            let mut entry_4600 = list_4599.entry();
            entry_4600.string(item_4598.as_str());
        }
        list_4599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("DryRun");
    if let Some(var_4602) = &input.dry_run {
        scope_4601.boolean(*var_4602);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4603 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4604) = &input.traffic_mirror_filter_rule_id {
        scope_4603.string(var_4604);
    }
    #[allow(unused_mut)]
    let mut scope_4605 = writer.prefix("TrafficDirection");
    if let Some(var_4606) = &input.traffic_direction {
        scope_4605.string(var_4606.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("RuleNumber");
    if let Some(var_4608) = &input.rule_number {
        scope_4607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4609 = writer.prefix("RuleAction");
    if let Some(var_4610) = &input.rule_action {
        scope_4609.string(var_4610.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("DestinationPortRange");
    if let Some(var_4612) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4611, var_4612,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("SourcePortRange");
    if let Some(var_4614) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4613, var_4614,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("Protocol");
    if let Some(var_4616) = &input.protocol {
        scope_4615.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4616).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4618) = &input.destination_cidr_block {
        scope_4617.string(var_4618);
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("SourceCidrBlock");
    if let Some(var_4620) = &input.source_cidr_block {
        scope_4619.string(var_4620);
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("Description");
    if let Some(var_4622) = &input.description {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("RemoveField");
    if let Some(var_4624) = &input.remove_fields {
        let mut list_4626 = scope_4623.start_list(true, None);
        for item_4625 in var_4624 {
            #[allow(unused_mut)]
            let mut entry_4627 = list_4626.entry();
            entry_4627.string(item_4625.as_str());
        }
        list_4626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4628 = writer.prefix("DryRun");
    if let Some(var_4629) = &input.dry_run {
        scope_4628.boolean(*var_4629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4630 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4631) = &input.traffic_mirror_session_id {
        scope_4630.string(var_4631);
    }
    #[allow(unused_mut)]
    let mut scope_4632 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4633) = &input.traffic_mirror_target_id {
        scope_4632.string(var_4633);
    }
    #[allow(unused_mut)]
    let mut scope_4634 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4635) = &input.traffic_mirror_filter_id {
        scope_4634.string(var_4635);
    }
    #[allow(unused_mut)]
    let mut scope_4636 = writer.prefix("PacketLength");
    if let Some(var_4637) = &input.packet_length {
        scope_4636.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4637).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("SessionNumber");
    if let Some(var_4639) = &input.session_number {
        scope_4638.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4639).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("VirtualNetworkId");
    if let Some(var_4641) = &input.virtual_network_id {
        scope_4640.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4641).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("Description");
    if let Some(var_4643) = &input.description {
        scope_4642.string(var_4643);
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("RemoveField");
    if let Some(var_4645) = &input.remove_fields {
        let mut list_4647 = scope_4644.start_list(true, None);
        for item_4646 in var_4645 {
            #[allow(unused_mut)]
            let mut entry_4648 = list_4647.entry();
            entry_4648.string(item_4646.as_str());
        }
        list_4647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("DryRun");
    if let Some(var_4650) = &input.dry_run {
        scope_4649.boolean(*var_4650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("TransitGatewayId");
    if let Some(var_4652) = &input.transit_gateway_id {
        scope_4651.string(var_4652);
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("Description");
    if let Some(var_4654) = &input.description {
        scope_4653.string(var_4654);
    }
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("Options");
    if let Some(var_4656) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_4655, var_4656,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("DryRun");
    if let Some(var_4658) = &input.dry_run {
        scope_4657.boolean(*var_4658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4660) = &input.transit_gateway_route_table_id {
        scope_4659.string(var_4660);
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("PrefixListId");
    if let Some(var_4662) = &input.prefix_list_id {
        scope_4661.string(var_4662);
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4664) = &input.transit_gateway_attachment_id {
        scope_4663.string(var_4664);
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("Blackhole");
    if let Some(var_4666) = &input.blackhole {
        scope_4665.boolean(*var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("DryRun");
    if let Some(var_4668) = &input.dry_run {
        scope_4667.boolean(*var_4668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4670) = &input.transit_gateway_attachment_id {
        scope_4669.string(var_4670);
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("AddSubnetIds");
    if let Some(var_4672) = &input.add_subnet_ids {
        let mut list_4674 = scope_4671.start_list(true, Some("item"));
        for item_4673 in var_4672 {
            #[allow(unused_mut)]
            let mut entry_4675 = list_4674.entry();
            entry_4675.string(item_4673);
        }
        list_4674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4677) = &input.remove_subnet_ids {
        let mut list_4679 = scope_4676.start_list(true, Some("item"));
        for item_4678 in var_4677 {
            #[allow(unused_mut)]
            let mut entry_4680 = list_4679.entry();
            entry_4680.string(item_4678);
        }
        list_4679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4681 = writer.prefix("Options");
    if let Some(var_4682) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_4681, var_4682);
    }
    #[allow(unused_mut)]
    let mut scope_4683 = writer.prefix("DryRun");
    if let Some(var_4684) = &input.dry_run {
        scope_4683.boolean(*var_4684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4685 = writer.prefix("DryRun");
    if let Some(var_4686) = &input.dry_run {
        scope_4685.boolean(*var_4686);
    }
    #[allow(unused_mut)]
    let mut scope_4687 = writer.prefix("VolumeId");
    if let Some(var_4688) = &input.volume_id {
        scope_4687.string(var_4688);
    }
    #[allow(unused_mut)]
    let mut scope_4689 = writer.prefix("Size");
    if let Some(var_4690) = &input.size {
        scope_4689.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4690).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("VolumeType");
    if let Some(var_4692) = &input.volume_type {
        scope_4691.string(var_4692.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("Iops");
    if let Some(var_4694) = &input.iops {
        scope_4693.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4694).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("Throughput");
    if let Some(var_4696) = &input.throughput {
        scope_4695.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4696).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4698) = &input.multi_attach_enabled {
        scope_4697.boolean(*var_4698);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("AutoEnableIO");
    if let Some(var_4700) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4699, var_4700,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("VolumeId");
    if let Some(var_4702) = &input.volume_id {
        scope_4701.string(var_4702);
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("DryRun");
    if let Some(var_4704) = &input.dry_run {
        scope_4703.boolean(*var_4704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4706) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4705, var_4706,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("EnableDnsSupport");
    if let Some(var_4708) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4707, var_4708,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("VpcId");
    if let Some(var_4710) = &input.vpc_id {
        scope_4709.string(var_4710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("DryRun");
    if let Some(var_4712) = &input.dry_run {
        scope_4711.boolean(*var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("VpcEndpointId");
    if let Some(var_4714) = &input.vpc_endpoint_id {
        scope_4713.string(var_4714);
    }
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("ResetPolicy");
    if let Some(var_4716) = &input.reset_policy {
        scope_4715.boolean(*var_4716);
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("PolicyDocument");
    if let Some(var_4718) = &input.policy_document {
        scope_4717.string(var_4718);
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("AddRouteTableId");
    if let Some(var_4720) = &input.add_route_table_ids {
        let mut list_4722 = scope_4719.start_list(true, Some("item"));
        for item_4721 in var_4720 {
            #[allow(unused_mut)]
            let mut entry_4723 = list_4722.entry();
            entry_4723.string(item_4721);
        }
        list_4722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4725) = &input.remove_route_table_ids {
        let mut list_4727 = scope_4724.start_list(true, Some("item"));
        for item_4726 in var_4725 {
            #[allow(unused_mut)]
            let mut entry_4728 = list_4727.entry();
            entry_4728.string(item_4726);
        }
        list_4727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("AddSubnetId");
    if let Some(var_4730) = &input.add_subnet_ids {
        let mut list_4732 = scope_4729.start_list(true, Some("item"));
        for item_4731 in var_4730 {
            #[allow(unused_mut)]
            let mut entry_4733 = list_4732.entry();
            entry_4733.string(item_4731);
        }
        list_4732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("RemoveSubnetId");
    if let Some(var_4735) = &input.remove_subnet_ids {
        let mut list_4737 = scope_4734.start_list(true, Some("item"));
        for item_4736 in var_4735 {
            #[allow(unused_mut)]
            let mut entry_4738 = list_4737.entry();
            entry_4738.string(item_4736);
        }
        list_4737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4739 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4740) = &input.add_security_group_ids {
        let mut list_4742 = scope_4739.start_list(true, Some("item"));
        for item_4741 in var_4740 {
            #[allow(unused_mut)]
            let mut entry_4743 = list_4742.entry();
            entry_4743.string(item_4741);
        }
        list_4742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4744 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4745) = &input.remove_security_group_ids {
        let mut list_4747 = scope_4744.start_list(true, Some("item"));
        for item_4746 in var_4745 {
            #[allow(unused_mut)]
            let mut entry_4748 = list_4747.entry();
            entry_4748.string(item_4746);
        }
        list_4747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4749 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4750) = &input.private_dns_enabled {
        scope_4749.boolean(*var_4750);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4751 = writer.prefix("DryRun");
    if let Some(var_4752) = &input.dry_run {
        scope_4751.boolean(*var_4752);
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4754) = &input.connection_notification_id {
        scope_4753.string(var_4754);
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4756) = &input.connection_notification_arn {
        scope_4755.string(var_4756);
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("ConnectionEvents");
    if let Some(var_4758) = &input.connection_events {
        let mut list_4760 = scope_4757.start_list(true, Some("item"));
        for item_4759 in var_4758 {
            #[allow(unused_mut)]
            let mut entry_4761 = list_4760.entry();
            entry_4761.string(item_4759);
        }
        list_4760.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("DryRun");
    if let Some(var_4763) = &input.dry_run {
        scope_4762.boolean(*var_4763);
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("ServiceId");
    if let Some(var_4765) = &input.service_id {
        scope_4764.string(var_4765);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("PrivateDnsName");
    if let Some(var_4767) = &input.private_dns_name {
        scope_4766.string(var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4769) = &input.remove_private_dns_name {
        scope_4768.boolean(*var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("AcceptanceRequired");
    if let Some(var_4771) = &input.acceptance_required {
        scope_4770.boolean(*var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4773) = &input.add_network_load_balancer_arns {
        let mut list_4775 = scope_4772.start_list(true, Some("item"));
        for item_4774 in var_4773 {
            #[allow(unused_mut)]
            let mut entry_4776 = list_4775.entry();
            entry_4776.string(item_4774);
        }
        list_4775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4778) = &input.remove_network_load_balancer_arns {
        let mut list_4780 = scope_4777.start_list(true, Some("item"));
        for item_4779 in var_4778 {
            #[allow(unused_mut)]
            let mut entry_4781 = list_4780.entry();
            entry_4781.string(item_4779);
        }
        list_4780.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4783) = &input.add_gateway_load_balancer_arns {
        let mut list_4785 = scope_4782.start_list(true, Some("item"));
        for item_4784 in var_4783 {
            #[allow(unused_mut)]
            let mut entry_4786 = list_4785.entry();
            entry_4786.string(item_4784);
        }
        list_4785.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4787 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4788) = &input.remove_gateway_load_balancer_arns {
        let mut list_4790 = scope_4787.start_list(true, Some("item"));
        for item_4789 in var_4788 {
            #[allow(unused_mut)]
            let mut entry_4791 = list_4790.entry();
            entry_4791.string(item_4789);
        }
        list_4790.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("DryRun");
    if let Some(var_4793) = &input.dry_run {
        scope_4792.boolean(*var_4793);
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("ServiceId");
    if let Some(var_4795) = &input.service_id {
        scope_4794.string(var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4797) = &input.add_allowed_principals {
        let mut list_4799 = scope_4796.start_list(true, Some("item"));
        for item_4798 in var_4797 {
            #[allow(unused_mut)]
            let mut entry_4800 = list_4799.entry();
            entry_4800.string(item_4798);
        }
        list_4799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4801 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4802) = &input.remove_allowed_principals {
        let mut list_4804 = scope_4801.start_list(true, Some("item"));
        for item_4803 in var_4802 {
            #[allow(unused_mut)]
            let mut entry_4805 = list_4804.entry();
            entry_4805.string(item_4803);
        }
        list_4804.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4807) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4806, var_4807,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4808 = writer.prefix("DryRun");
    if let Some(var_4809) = &input.dry_run {
        scope_4808.boolean(*var_4809);
    }
    #[allow(unused_mut)]
    let mut scope_4810 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4811) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4810, var_4811,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4812 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4813) = &input.vpc_peering_connection_id {
        scope_4812.string(var_4813);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4814 = writer.prefix("VpcId");
    if let Some(var_4815) = &input.vpc_id {
        scope_4814.string(var_4815);
    }
    #[allow(unused_mut)]
    let mut scope_4816 = writer.prefix("InstanceTenancy");
    if let Some(var_4817) = &input.instance_tenancy {
        scope_4816.string(var_4817.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("DryRun");
    if let Some(var_4819) = &input.dry_run {
        scope_4818.boolean(*var_4819);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("VpnConnectionId");
    if let Some(var_4821) = &input.vpn_connection_id {
        scope_4820.string(var_4821);
    }
    #[allow(unused_mut)]
    let mut scope_4822 = writer.prefix("TransitGatewayId");
    if let Some(var_4823) = &input.transit_gateway_id {
        scope_4822.string(var_4823);
    }
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("CustomerGatewayId");
    if let Some(var_4825) = &input.customer_gateway_id {
        scope_4824.string(var_4825);
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("VpnGatewayId");
    if let Some(var_4827) = &input.vpn_gateway_id {
        scope_4826.string(var_4827);
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("DryRun");
    if let Some(var_4829) = &input.dry_run {
        scope_4828.boolean(*var_4829);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("VpnConnectionId");
    if let Some(var_4831) = &input.vpn_connection_id {
        scope_4830.string(var_4831);
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4833) = &input.local_ipv4_network_cidr {
        scope_4832.string(var_4833);
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4835) = &input.remote_ipv4_network_cidr {
        scope_4834.string(var_4835);
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4837) = &input.local_ipv6_network_cidr {
        scope_4836.string(var_4837);
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4839) = &input.remote_ipv6_network_cidr {
        scope_4838.string(var_4839);
    }
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("DryRun");
    if let Some(var_4841) = &input.dry_run {
        scope_4840.boolean(*var_4841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("VpnConnectionId");
    if let Some(var_4843) = &input.vpn_connection_id {
        scope_4842.string(var_4843);
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4845) = &input.vpn_tunnel_outside_ip_address {
        scope_4844.string(var_4845);
    }
    #[allow(unused_mut)]
    let mut scope_4846 = writer.prefix("DryRun");
    if let Some(var_4847) = &input.dry_run {
        scope_4846.boolean(*var_4847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4848 = writer.prefix("VpnConnectionId");
    if let Some(var_4849) = &input.vpn_connection_id {
        scope_4848.string(var_4849);
    }
    #[allow(unused_mut)]
    let mut scope_4850 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4851) = &input.vpn_tunnel_outside_ip_address {
        scope_4850.string(var_4851);
    }
    #[allow(unused_mut)]
    let mut scope_4852 = writer.prefix("TunnelOptions");
    if let Some(var_4853) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_4852, var_4853,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4854 = writer.prefix("DryRun");
    if let Some(var_4855) = &input.dry_run {
        scope_4854.boolean(*var_4855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4856 = writer.prefix("InstanceId");
    if let Some(var_4857) = &input.instance_ids {
        let mut list_4859 = scope_4856.start_list(true, Some("InstanceId"));
        for item_4858 in var_4857 {
            #[allow(unused_mut)]
            let mut entry_4860 = list_4859.entry();
            entry_4860.string(item_4858);
        }
        list_4859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("DryRun");
    if let Some(var_4862) = &input.dry_run {
        scope_4861.boolean(*var_4862);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("DryRun");
    if let Some(var_4864) = &input.dry_run {
        scope_4863.boolean(*var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("PublicIp");
    if let Some(var_4866) = &input.public_ip {
        scope_4865.string(var_4866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("Cidr");
    if let Some(var_4868) = &input.cidr {
        scope_4867.string(var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4870) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_4869, var_4870,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4872) = &input.publicly_advertisable {
        scope_4871.boolean(*var_4872);
    }
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("Description");
    if let Some(var_4874) = &input.description {
        scope_4873.string(var_4874);
    }
    #[allow(unused_mut)]
    let mut scope_4875 = writer.prefix("DryRun");
    if let Some(var_4876) = &input.dry_run {
        scope_4875.boolean(*var_4876);
    }
    #[allow(unused_mut)]
    let mut scope_4877 = writer.prefix("PoolTagSpecification");
    if let Some(var_4878) = &input.pool_tag_specifications {
        let mut list_4880 = scope_4877.start_list(true, Some("item"));
        for item_4879 in var_4878 {
            #[allow(unused_mut)]
            let mut entry_4881 = list_4880.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4881, item_4879,
            );
        }
        list_4880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("MultiRegion");
    if let Some(var_4883) = &input.multi_region {
        scope_4882.boolean(*var_4883);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("ClientToken");
    if let Some(var_4885) = &input.client_token {
        scope_4884.string(var_4885);
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("CurrencyCode");
    if let Some(var_4887) = &input.currency_code {
        scope_4886.string(var_4887.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("HostIdSet");
    if let Some(var_4889) = &input.host_id_set {
        let mut list_4891 = scope_4888.start_list(true, Some("item"));
        for item_4890 in var_4889 {
            #[allow(unused_mut)]
            let mut entry_4892 = list_4891.entry();
            entry_4892.string(item_4890);
        }
        list_4891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("LimitPrice");
    if let Some(var_4894) = &input.limit_price {
        scope_4893.string(var_4894);
    }
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("OfferingId");
    if let Some(var_4896) = &input.offering_id {
        scope_4895.string(var_4896);
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("TagSpecification");
    if let Some(var_4898) = &input.tag_specifications {
        let mut list_4900 = scope_4897.start_list(true, Some("item"));
        for item_4899 in var_4898 {
            #[allow(unused_mut)]
            let mut entry_4901 = list_4900.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4901, item_4899,
            );
        }
        list_4900.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("InstanceCount");
    if let Some(var_4903) = &input.instance_count {
        scope_4902.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4903).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4905) = &input.reserved_instances_offering_id {
        scope_4904.string(var_4905);
    }
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("DryRun");
    if let Some(var_4907) = &input.dry_run {
        scope_4906.boolean(*var_4907);
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("LimitPrice");
    if let Some(var_4909) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_4908, var_4909,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("PurchaseTime");
    if let Some(var_4911) = &input.purchase_time {
        scope_4910.instant(var_4911, aws_smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("ClientToken");
    if let Some(var_4913) = &input.client_token {
        scope_4912.string(var_4913);
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("DryRun");
    if let Some(var_4915) = &input.dry_run {
        scope_4914.boolean(*var_4915);
    }
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("PurchaseRequest");
    if let Some(var_4917) = &input.purchase_requests {
        let mut list_4919 = scope_4916.start_list(true, Some("PurchaseRequest"));
        for item_4918 in var_4917 {
            #[allow(unused_mut)]
            let mut entry_4920 = list_4919.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_4920, item_4918,
            );
        }
        list_4919.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("InstanceId");
    if let Some(var_4922) = &input.instance_ids {
        let mut list_4924 = scope_4921.start_list(true, Some("InstanceId"));
        for item_4923 in var_4922 {
            #[allow(unused_mut)]
            let mut entry_4925 = list_4924.entry();
            entry_4925.string(item_4923);
        }
        list_4924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("DryRun");
    if let Some(var_4927) = &input.dry_run {
        scope_4926.boolean(*var_4927);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("ImageLocation");
    if let Some(var_4929) = &input.image_location {
        scope_4928.string(var_4929);
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("Architecture");
    if let Some(var_4931) = &input.architecture {
        scope_4930.string(var_4931.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4933) = &input.block_device_mappings {
        let mut list_4935 = scope_4932.start_list(true, Some("BlockDeviceMapping"));
        for item_4934 in var_4933 {
            #[allow(unused_mut)]
            let mut entry_4936 = list_4935.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_4936, item_4934,
            );
        }
        list_4935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("Description");
    if let Some(var_4938) = &input.description {
        scope_4937.string(var_4938);
    }
    #[allow(unused_mut)]
    let mut scope_4939 = writer.prefix("DryRun");
    if let Some(var_4940) = &input.dry_run {
        scope_4939.boolean(*var_4940);
    }
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("EnaSupport");
    if let Some(var_4942) = &input.ena_support {
        scope_4941.boolean(*var_4942);
    }
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("KernelId");
    if let Some(var_4944) = &input.kernel_id {
        scope_4943.string(var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("Name");
    if let Some(var_4946) = &input.name {
        scope_4945.string(var_4946);
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("BillingProduct");
    if let Some(var_4948) = &input.billing_products {
        let mut list_4950 = scope_4947.start_list(true, Some("item"));
        for item_4949 in var_4948 {
            #[allow(unused_mut)]
            let mut entry_4951 = list_4950.entry();
            entry_4951.string(item_4949);
        }
        list_4950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("RamdiskId");
    if let Some(var_4953) = &input.ramdisk_id {
        scope_4952.string(var_4953);
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("RootDeviceName");
    if let Some(var_4955) = &input.root_device_name {
        scope_4954.string(var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("SriovNetSupport");
    if let Some(var_4957) = &input.sriov_net_support {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("VirtualizationType");
    if let Some(var_4959) = &input.virtualization_type {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("BootMode");
    if let Some(var_4961) = &input.boot_mode {
        scope_4960.string(var_4961.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("DryRun");
    if let Some(var_4963) = &input.dry_run {
        scope_4962.boolean(*var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4965) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_4964, var_4965,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4967) = &input.transit_gateway_multicast_domain_id {
        scope_4966.string(var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("GroupIpAddress");
    if let Some(var_4969) = &input.group_ip_address {
        scope_4968.string(var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4971) = &input.network_interface_ids {
        let mut list_4973 = scope_4970.start_list(true, Some("item"));
        for item_4972 in var_4971 {
            #[allow(unused_mut)]
            let mut entry_4974 = list_4973.entry();
            entry_4974.string(item_4972);
        }
        list_4973.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("DryRun");
    if let Some(var_4976) = &input.dry_run {
        scope_4975.boolean(*var_4976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4978) = &input.transit_gateway_multicast_domain_id {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("GroupIpAddress");
    if let Some(var_4980) = &input.group_ip_address {
        scope_4979.string(var_4980);
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4982) = &input.network_interface_ids {
        let mut list_4984 = scope_4981.start_list(true, Some("item"));
        for item_4983 in var_4982 {
            #[allow(unused_mut)]
            let mut entry_4985 = list_4984.entry();
            entry_4985.string(item_4983);
        }
        list_4984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4986 = writer.prefix("DryRun");
    if let Some(var_4987) = &input.dry_run {
        scope_4986.boolean(*var_4987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4989) = &input.transit_gateway_multicast_domain_id {
        scope_4988.string(var_4989);
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4991) = &input.transit_gateway_attachment_id {
        scope_4990.string(var_4991);
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("SubnetIds");
    if let Some(var_4993) = &input.subnet_ids {
        let mut list_4995 = scope_4992.start_list(true, Some("item"));
        for item_4994 in var_4993 {
            #[allow(unused_mut)]
            let mut entry_4996 = list_4995.entry();
            entry_4996.string(item_4994);
        }
        list_4995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("DryRun");
    if let Some(var_4998) = &input.dry_run {
        scope_4997.boolean(*var_4998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5000) = &input.transit_gateway_attachment_id {
        scope_4999.string(var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("DryRun");
    if let Some(var_5002) = &input.dry_run {
        scope_5001.boolean(*var_5002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5004) = &input.transit_gateway_attachment_id {
        scope_5003.string(var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("DryRun");
    if let Some(var_5006) = &input.dry_run {
        scope_5005.boolean(*var_5006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("DryRun");
    if let Some(var_5008) = &input.dry_run {
        scope_5007.boolean(*var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("ServiceId");
    if let Some(var_5010) = &input.service_id {
        scope_5009.string(var_5010);
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("VpcEndpointId");
    if let Some(var_5012) = &input.vpc_endpoint_ids {
        let mut list_5014 = scope_5011.start_list(true, Some("item"));
        for item_5013 in var_5012 {
            #[allow(unused_mut)]
            let mut entry_5015 = list_5014.entry();
            entry_5015.string(item_5013);
        }
        list_5014.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("DryRun");
    if let Some(var_5017) = &input.dry_run {
        scope_5016.boolean(*var_5017);
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5019) = &input.vpc_peering_connection_id {
        scope_5018.string(var_5019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("AllocationId");
    if let Some(var_5021) = &input.allocation_id {
        scope_5020.string(var_5021);
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("PublicIp");
    if let Some(var_5023) = &input.public_ip {
        scope_5022.string(var_5023);
    }
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5025) = &input.network_border_group {
        scope_5024.string(var_5025);
    }
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("DryRun");
    if let Some(var_5027) = &input.dry_run {
        scope_5026.boolean(*var_5027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("HostId");
    if let Some(var_5029) = &input.host_ids {
        let mut list_5031 = scope_5028.start_list(true, Some("item"));
        for item_5030 in var_5029 {
            #[allow(unused_mut)]
            let mut entry_5032 = list_5031.entry();
            entry_5032.string(item_5030);
        }
        list_5031.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5033 = writer.prefix("IamInstanceProfile");
    if let Some(var_5034) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5033, var_5034,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("AssociationId");
    if let Some(var_5036) = &input.association_id {
        scope_5035.string(var_5036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("AssociationId");
    if let Some(var_5038) = &input.association_id {
        scope_5037.string(var_5038);
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("DryRun");
    if let Some(var_5040) = &input.dry_run {
        scope_5039.boolean(*var_5040);
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("NetworkAclId");
    if let Some(var_5042) = &input.network_acl_id {
        scope_5041.string(var_5042);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("CidrBlock");
    if let Some(var_5044) = &input.cidr_block {
        scope_5043.string(var_5044);
    }
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("DryRun");
    if let Some(var_5046) = &input.dry_run {
        scope_5045.boolean(*var_5046);
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("Egress");
    if let Some(var_5048) = &input.egress {
        scope_5047.boolean(*var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("Icmp");
    if let Some(var_5050) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5049, var_5050);
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5052) = &input.ipv6_cidr_block {
        scope_5051.string(var_5052);
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("NetworkAclId");
    if let Some(var_5054) = &input.network_acl_id {
        scope_5053.string(var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("PortRange");
    if let Some(var_5056) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5055, var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("Protocol");
    if let Some(var_5058) = &input.protocol {
        scope_5057.string(var_5058);
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("RuleAction");
    if let Some(var_5060) = &input.rule_action {
        scope_5059.string(var_5060.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("RuleNumber");
    if let Some(var_5062) = &input.rule_number {
        scope_5061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5062).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5064) = &input.destination_cidr_block {
        scope_5063.string(var_5064);
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5066) = &input.destination_ipv6_cidr_block {
        scope_5065.string(var_5066);
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5068) = &input.destination_prefix_list_id {
        scope_5067.string(var_5068);
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("DryRun");
    if let Some(var_5070) = &input.dry_run {
        scope_5069.boolean(*var_5070);
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("VpcEndpointId");
    if let Some(var_5072) = &input.vpc_endpoint_id {
        scope_5071.string(var_5072);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5074) = &input.egress_only_internet_gateway_id {
        scope_5073.string(var_5074);
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("GatewayId");
    if let Some(var_5076) = &input.gateway_id {
        scope_5075.string(var_5076);
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("InstanceId");
    if let Some(var_5078) = &input.instance_id {
        scope_5077.string(var_5078);
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("LocalTarget");
    if let Some(var_5080) = &input.local_target {
        scope_5079.boolean(*var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("NatGatewayId");
    if let Some(var_5082) = &input.nat_gateway_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("TransitGatewayId");
    if let Some(var_5084) = &input.transit_gateway_id {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("LocalGatewayId");
    if let Some(var_5086) = &input.local_gateway_id {
        scope_5085.string(var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("CarrierGatewayId");
    if let Some(var_5088) = &input.carrier_gateway_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5090) = &input.network_interface_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("RouteTableId");
    if let Some(var_5092) = &input.route_table_id {
        scope_5091.string(var_5092);
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5094) = &input.vpc_peering_connection_id {
        scope_5093.string(var_5094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("AssociationId");
    if let Some(var_5096) = &input.association_id {
        scope_5095.string(var_5096);
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("DryRun");
    if let Some(var_5098) = &input.dry_run {
        scope_5097.boolean(*var_5098);
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("RouteTableId");
    if let Some(var_5100) = &input.route_table_id {
        scope_5099.string(var_5100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5102) = &input.destination_cidr_block {
        scope_5101.string(var_5102);
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5104) = &input.transit_gateway_route_table_id {
        scope_5103.string(var_5104);
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5106) = &input.transit_gateway_attachment_id {
        scope_5105.string(var_5106);
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("Blackhole");
    if let Some(var_5108) = &input.blackhole {
        scope_5107.boolean(*var_5108);
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("DryRun");
    if let Some(var_5110) = &input.dry_run {
        scope_5109.boolean(*var_5110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("Description");
    if let Some(var_5112) = &input.description {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("DryRun");
    if let Some(var_5114) = &input.dry_run {
        scope_5113.boolean(*var_5114);
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("EndTime");
    if let Some(var_5116) = &input.end_time {
        scope_5115.instant(var_5116, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("InstanceId");
    if let Some(var_5118) = &input.instances {
        let mut list_5120 = scope_5117.start_list(true, Some("InstanceId"));
        for item_5119 in var_5118 {
            #[allow(unused_mut)]
            let mut entry_5121 = list_5120.entry();
            entry_5121.string(item_5119);
        }
        list_5120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("ReasonCode");
    if let Some(var_5123) = &input.reason_codes {
        let mut list_5125 = scope_5122.start_list(true, Some("item"));
        for item_5124 in var_5123 {
            #[allow(unused_mut)]
            let mut entry_5126 = list_5125.entry();
            entry_5126.string(item_5124.as_str());
        }
        list_5125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5127 = writer.prefix("StartTime");
    if let Some(var_5128) = &input.start_time {
        scope_5127.instant(var_5128, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("Status");
    if let Some(var_5130) = &input.status {
        scope_5129.string(var_5130.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("DryRun");
    if let Some(var_5132) = &input.dry_run {
        scope_5131.boolean(*var_5132);
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5134) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5133, var_5134,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5135 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5136) = &input.availability_zone_group {
        scope_5135.string(var_5136);
    }
    #[allow(unused_mut)]
    let mut scope_5137 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5138) = &input.block_duration_minutes {
        scope_5137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5139 = writer.prefix("ClientToken");
    if let Some(var_5140) = &input.client_token {
        scope_5139.string(var_5140);
    }
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("DryRun");
    if let Some(var_5142) = &input.dry_run {
        scope_5141.boolean(*var_5142);
    }
    #[allow(unused_mut)]
    let mut scope_5143 = writer.prefix("InstanceCount");
    if let Some(var_5144) = &input.instance_count {
        scope_5143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5145 = writer.prefix("LaunchGroup");
    if let Some(var_5146) = &input.launch_group {
        scope_5145.string(var_5146);
    }
    #[allow(unused_mut)]
    let mut scope_5147 = writer.prefix("LaunchSpecification");
    if let Some(var_5148) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5147, var_5148,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5149 = writer.prefix("SpotPrice");
    if let Some(var_5150) = &input.spot_price {
        scope_5149.string(var_5150);
    }
    #[allow(unused_mut)]
    let mut scope_5151 = writer.prefix("Type");
    if let Some(var_5152) = &input.r#type {
        scope_5151.string(var_5152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5153 = writer.prefix("ValidFrom");
    if let Some(var_5154) = &input.valid_from {
        scope_5153.instant(var_5154, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5155 = writer.prefix("ValidUntil");
    if let Some(var_5156) = &input.valid_until {
        scope_5155.instant(var_5156, aws_smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5157 = writer.prefix("TagSpecification");
    if let Some(var_5158) = &input.tag_specifications {
        let mut list_5160 = scope_5157.start_list(true, Some("item"));
        for item_5159 in var_5158 {
            #[allow(unused_mut)]
            let mut entry_5161 = list_5160.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5161, item_5159,
            );
        }
        list_5160.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5163) = &input.instance_interruption_behavior {
        scope_5162.string(var_5163.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("AllocationId");
    if let Some(var_5165) = &input.allocation_id {
        scope_5164.string(var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("Attribute");
    if let Some(var_5167) = &input.attribute {
        scope_5166.string(var_5167.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("DryRun");
    if let Some(var_5169) = &input.dry_run {
        scope_5168.boolean(*var_5169);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5170 = writer.prefix("DryRun");
    if let Some(var_5171) = &input.dry_run {
        scope_5170.boolean(*var_5171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5172 = writer.prefix("DryRun");
    if let Some(var_5173) = &input.dry_run {
        scope_5172.boolean(*var_5173);
    }
    #[allow(unused_mut)]
    let mut scope_5174 = writer.prefix("FpgaImageId");
    if let Some(var_5175) = &input.fpga_image_id {
        scope_5174.string(var_5175);
    }
    #[allow(unused_mut)]
    let mut scope_5176 = writer.prefix("Attribute");
    if let Some(var_5177) = &input.attribute {
        scope_5176.string(var_5177.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5178 = writer.prefix("Attribute");
    if let Some(var_5179) = &input.attribute {
        scope_5178.string(var_5179.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5180 = writer.prefix("ImageId");
    if let Some(var_5181) = &input.image_id {
        scope_5180.string(var_5181);
    }
    #[allow(unused_mut)]
    let mut scope_5182 = writer.prefix("DryRun");
    if let Some(var_5183) = &input.dry_run {
        scope_5182.boolean(*var_5183);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5184 = writer.prefix("Attribute");
    if let Some(var_5185) = &input.attribute {
        scope_5184.string(var_5185.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("DryRun");
    if let Some(var_5187) = &input.dry_run {
        scope_5186.boolean(*var_5187);
    }
    #[allow(unused_mut)]
    let mut scope_5188 = writer.prefix("InstanceId");
    if let Some(var_5189) = &input.instance_id {
        scope_5188.string(var_5189);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5190 = writer.prefix("DryRun");
    if let Some(var_5191) = &input.dry_run {
        scope_5190.boolean(*var_5191);
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5193) = &input.network_interface_id {
        scope_5192.string(var_5193);
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("SourceDestCheck");
    if let Some(var_5195) = &input.source_dest_check {
        scope_5194.string(var_5195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("Attribute");
    if let Some(var_5197) = &input.attribute {
        scope_5196.string(var_5197.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("SnapshotId");
    if let Some(var_5199) = &input.snapshot_id {
        scope_5198.string(var_5199);
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("DryRun");
    if let Some(var_5201) = &input.dry_run {
        scope_5200.boolean(*var_5201);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("DryRun");
    if let Some(var_5203) = &input.dry_run {
        scope_5202.boolean(*var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("PublicIp");
    if let Some(var_5205) = &input.public_ip {
        scope_5204.string(var_5205);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("DryRun");
    if let Some(var_5207) = &input.dry_run {
        scope_5206.boolean(*var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("PrefixListId");
    if let Some(var_5209) = &input.prefix_list_id {
        scope_5208.string(var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("PreviousVersion");
    if let Some(var_5211) = &input.previous_version {
        scope_5210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("CurrentVersion");
    if let Some(var_5213) = &input.current_version {
        scope_5212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5213).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5215) = &input.client_vpn_endpoint_id {
        scope_5214.string(var_5215);
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5217) = &input.target_network_cidr {
        scope_5216.string(var_5217);
    }
    #[allow(unused_mut)]
    let mut scope_5218 = writer.prefix("AccessGroupId");
    if let Some(var_5219) = &input.access_group_id {
        scope_5218.string(var_5219);
    }
    #[allow(unused_mut)]
    let mut scope_5220 = writer.prefix("RevokeAllGroups");
    if let Some(var_5221) = &input.revoke_all_groups {
        scope_5220.boolean(*var_5221);
    }
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("DryRun");
    if let Some(var_5223) = &input.dry_run {
        scope_5222.boolean(*var_5223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("DryRun");
    if let Some(var_5225) = &input.dry_run {
        scope_5224.boolean(*var_5225);
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("GroupId");
    if let Some(var_5227) = &input.group_id {
        scope_5226.string(var_5227);
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("IpPermissions");
    if let Some(var_5229) = &input.ip_permissions {
        let mut list_5231 = scope_5228.start_list(true, Some("item"));
        for item_5230 in var_5229 {
            #[allow(unused_mut)]
            let mut entry_5232 = list_5231.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5232, item_5230);
        }
        list_5231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5234) = &input.security_group_rule_ids {
        let mut list_5236 = scope_5233.start_list(true, Some("item"));
        for item_5235 in var_5234 {
            #[allow(unused_mut)]
            let mut entry_5237 = list_5236.entry();
            entry_5237.string(item_5235);
        }
        list_5236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("CidrIp");
    if let Some(var_5239) = &input.cidr_ip {
        scope_5238.string(var_5239);
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("FromPort");
    if let Some(var_5241) = &input.from_port {
        scope_5240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("IpProtocol");
    if let Some(var_5243) = &input.ip_protocol {
        scope_5242.string(var_5243);
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("ToPort");
    if let Some(var_5245) = &input.to_port {
        scope_5244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5247) = &input.source_security_group_name {
        scope_5246.string(var_5247);
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5249) = &input.source_security_group_owner_id {
        scope_5248.string(var_5249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("CidrIp");
    if let Some(var_5251) = &input.cidr_ip {
        scope_5250.string(var_5251);
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("FromPort");
    if let Some(var_5253) = &input.from_port {
        scope_5252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5253).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("GroupId");
    if let Some(var_5255) = &input.group_id {
        scope_5254.string(var_5255);
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("GroupName");
    if let Some(var_5257) = &input.group_name {
        scope_5256.string(var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("IpPermissions");
    if let Some(var_5259) = &input.ip_permissions {
        let mut list_5261 = scope_5258.start_list(true, Some("item"));
        for item_5260 in var_5259 {
            #[allow(unused_mut)]
            let mut entry_5262 = list_5261.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5262, item_5260);
        }
        list_5261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5263 = writer.prefix("IpProtocol");
    if let Some(var_5264) = &input.ip_protocol {
        scope_5263.string(var_5264);
    }
    #[allow(unused_mut)]
    let mut scope_5265 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5266) = &input.source_security_group_name {
        scope_5265.string(var_5266);
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5268) = &input.source_security_group_owner_id {
        scope_5267.string(var_5268);
    }
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("ToPort");
    if let Some(var_5270) = &input.to_port {
        scope_5269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("DryRun");
    if let Some(var_5272) = &input.dry_run {
        scope_5271.boolean(*var_5272);
    }
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5274) = &input.security_group_rule_ids {
        let mut list_5276 = scope_5273.start_list(true, Some("item"));
        for item_5275 in var_5274 {
            #[allow(unused_mut)]
            let mut entry_5277 = list_5276.entry();
            entry_5277.string(item_5275);
        }
        list_5276.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5278 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5279) = &input.block_device_mappings {
        let mut list_5281 = scope_5278.start_list(true, Some("BlockDeviceMapping"));
        for item_5280 in var_5279 {
            #[allow(unused_mut)]
            let mut entry_5282 = list_5281.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5282, item_5280,
            );
        }
        list_5281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5283 = writer.prefix("ImageId");
    if let Some(var_5284) = &input.image_id {
        scope_5283.string(var_5284);
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("InstanceType");
    if let Some(var_5286) = &input.instance_type {
        scope_5285.string(var_5286.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5288) = &input.ipv6_address_count {
        scope_5287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("Ipv6Address");
    if let Some(var_5290) = &input.ipv6_addresses {
        let mut list_5292 = scope_5289.start_list(true, Some("item"));
        for item_5291 in var_5290 {
            #[allow(unused_mut)]
            let mut entry_5293 = list_5292.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5293, item_5291,
            );
        }
        list_5292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("KernelId");
    if let Some(var_5295) = &input.kernel_id {
        scope_5294.string(var_5295);
    }
    #[allow(unused_mut)]
    let mut scope_5296 = writer.prefix("KeyName");
    if let Some(var_5297) = &input.key_name {
        scope_5296.string(var_5297);
    }
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("MaxCount");
    if let Some(var_5299) = &input.max_count {
        scope_5298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("MinCount");
    if let Some(var_5301) = &input.min_count {
        scope_5300.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5301).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("Monitoring");
    if let Some(var_5303) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5302, var_5303,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("Placement");
    if let Some(var_5305) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5304, var_5305);
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("RamdiskId");
    if let Some(var_5307) = &input.ramdisk_id {
        scope_5306.string(var_5307);
    }
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("SecurityGroupId");
    if let Some(var_5309) = &input.security_group_ids {
        let mut list_5311 = scope_5308.start_list(true, Some("SecurityGroupId"));
        for item_5310 in var_5309 {
            #[allow(unused_mut)]
            let mut entry_5312 = list_5311.entry();
            entry_5312.string(item_5310);
        }
        list_5311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("SecurityGroup");
    if let Some(var_5314) = &input.security_groups {
        let mut list_5316 = scope_5313.start_list(true, Some("SecurityGroup"));
        for item_5315 in var_5314 {
            #[allow(unused_mut)]
            let mut entry_5317 = list_5316.entry();
            entry_5317.string(item_5315);
        }
        list_5316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5318 = writer.prefix("SubnetId");
    if let Some(var_5319) = &input.subnet_id {
        scope_5318.string(var_5319);
    }
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("UserData");
    if let Some(var_5321) = &input.user_data {
        scope_5320.string(var_5321);
    }
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("AdditionalInfo");
    if let Some(var_5323) = &input.additional_info {
        scope_5322.string(var_5323);
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("ClientToken");
    if let Some(var_5325) = &input.client_token {
        scope_5324.string(var_5325);
    }
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("DisableApiTermination");
    if let Some(var_5327) = &input.disable_api_termination {
        scope_5326.boolean(*var_5327);
    }
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("DryRun");
    if let Some(var_5329) = &input.dry_run {
        scope_5328.boolean(*var_5329);
    }
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("EbsOptimized");
    if let Some(var_5331) = &input.ebs_optimized {
        scope_5330.boolean(*var_5331);
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("IamInstanceProfile");
    if let Some(var_5333) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5332, var_5333,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5335) = &input.instance_initiated_shutdown_behavior {
        scope_5334.string(var_5335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("NetworkInterface");
    if let Some(var_5337) = &input.network_interfaces {
        let mut list_5339 = scope_5336.start_list(true, Some("item"));
        for item_5338 in var_5337 {
            #[allow(unused_mut)]
            let mut entry_5340 = list_5339.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5340, item_5338);
        }
        list_5339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("PrivateIpAddress");
    if let Some(var_5342) = &input.private_ip_address {
        scope_5341.string(var_5342);
    }
    #[allow(unused_mut)]
    let mut scope_5343 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5344) = &input.elastic_gpu_specification {
        let mut list_5346 = scope_5343.start_list(true, Some("item"));
        for item_5345 in var_5344 {
            #[allow(unused_mut)]
            let mut entry_5347 = list_5346.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5347, item_5345,
            );
        }
        list_5346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5349) = &input.elastic_inference_accelerators {
        let mut list_5351 = scope_5348.start_list(true, Some("item"));
        for item_5350 in var_5349 {
            #[allow(unused_mut)]
            let mut entry_5352 = list_5351.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5352, item_5350,
            );
        }
        list_5351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("TagSpecification");
    if let Some(var_5354) = &input.tag_specifications {
        let mut list_5356 = scope_5353.start_list(true, Some("item"));
        for item_5355 in var_5354 {
            #[allow(unused_mut)]
            let mut entry_5357 = list_5356.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5357, item_5355,
            );
        }
        list_5356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5358 = writer.prefix("LaunchTemplate");
    if let Some(var_5359) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5358, var_5359,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5360 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5361) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5360, var_5361,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5362 = writer.prefix("CreditSpecification");
    if let Some(var_5363) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5362, var_5363,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("CpuOptions");
    if let Some(var_5365) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_5364, var_5365);
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5367) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5366, var_5367,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("HibernationOptions");
    if let Some(var_5369) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5368, var_5369,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("LicenseSpecification");
    if let Some(var_5371) = &input.license_specifications {
        let mut list_5373 = scope_5370.start_list(true, Some("item"));
        for item_5372 in var_5371 {
            #[allow(unused_mut)]
            let mut entry_5374 = list_5373.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5374, item_5372,
            );
        }
        list_5373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("MetadataOptions");
    if let Some(var_5376) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5375, var_5376,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("EnclaveOptions");
    if let Some(var_5378) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5377, var_5378,
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("ClientToken");
    if let Some(var_5380) = &input.client_token {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("DryRun");
    if let Some(var_5382) = &input.dry_run {
        scope_5381.boolean(*var_5382);
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("InstanceCount");
    if let Some(var_5384) = &input.instance_count {
        scope_5383.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("LaunchSpecification");
    if let Some(var_5386) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5385, var_5386,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5388) = &input.scheduled_instance_id {
        scope_5387.string(var_5388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5390) = &input.local_gateway_route_table_id {
        scope_5389.string(var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("Filter");
    if let Some(var_5392) = &input.filters {
        let mut list_5394 = scope_5391.start_list(true, Some("Filter"));
        for item_5393 in var_5392 {
            #[allow(unused_mut)]
            let mut entry_5395 = list_5394.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5395, item_5393);
        }
        list_5394.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5396 = writer.prefix("MaxResults");
    if let Some(var_5397) = &input.max_results {
        scope_5396.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5397).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5398 = writer.prefix("NextToken");
    if let Some(var_5399) = &input.next_token {
        scope_5398.string(var_5399);
    }
    #[allow(unused_mut)]
    let mut scope_5400 = writer.prefix("DryRun");
    if let Some(var_5401) = &input.dry_run {
        scope_5400.boolean(*var_5401);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5402 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5403) = &input.transit_gateway_multicast_domain_id {
        scope_5402.string(var_5403);
    }
    #[allow(unused_mut)]
    let mut scope_5404 = writer.prefix("Filter");
    if let Some(var_5405) = &input.filters {
        let mut list_5407 = scope_5404.start_list(true, Some("Filter"));
        for item_5406 in var_5405 {
            #[allow(unused_mut)]
            let mut entry_5408 = list_5407.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5408, item_5406);
        }
        list_5407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("MaxResults");
    if let Some(var_5410) = &input.max_results {
        scope_5409.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("NextToken");
    if let Some(var_5412) = &input.next_token {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("DryRun");
    if let Some(var_5414) = &input.dry_run {
        scope_5413.boolean(*var_5414);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5416) = &input.transit_gateway_route_table_id {
        scope_5415.string(var_5416);
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("Filter");
    if let Some(var_5418) = &input.filters {
        let mut list_5420 = scope_5417.start_list(true, Some("Filter"));
        for item_5419 in var_5418 {
            #[allow(unused_mut)]
            let mut entry_5421 = list_5420.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5421, item_5419);
        }
        list_5420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("MaxResults");
    if let Some(var_5423) = &input.max_results {
        scope_5422.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5423).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("DryRun");
    if let Some(var_5425) = &input.dry_run {
        scope_5424.boolean(*var_5425);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("InstanceId");
    if let Some(var_5427) = &input.instance_id {
        scope_5426.string(var_5427);
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("DryRun");
    if let Some(var_5429) = &input.dry_run {
        scope_5428.boolean(*var_5429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("InstanceId");
    if let Some(var_5431) = &input.instance_ids {
        let mut list_5433 = scope_5430.start_list(true, Some("InstanceId"));
        for item_5432 in var_5431 {
            #[allow(unused_mut)]
            let mut entry_5434 = list_5433.entry();
            entry_5434.string(item_5432);
        }
        list_5433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("AdditionalInfo");
    if let Some(var_5436) = &input.additional_info {
        scope_5435.string(var_5436);
    }
    #[allow(unused_mut)]
    let mut scope_5437 = writer.prefix("DryRun");
    if let Some(var_5438) = &input.dry_run {
        scope_5437.boolean(*var_5438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5439 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5440) = &input.network_insights_path_id {
        scope_5439.string(var_5440);
    }
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("FilterInArn");
    if let Some(var_5442) = &input.filter_in_arns {
        let mut list_5444 = scope_5441.start_list(true, Some("item"));
        for item_5443 in var_5442 {
            #[allow(unused_mut)]
            let mut entry_5445 = list_5444.entry();
            entry_5445.string(item_5443);
        }
        list_5444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5446 = writer.prefix("DryRun");
    if let Some(var_5447) = &input.dry_run {
        scope_5446.boolean(*var_5447);
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("TagSpecification");
    if let Some(var_5449) = &input.tag_specifications {
        let mut list_5451 = scope_5448.start_list(true, Some("item"));
        for item_5450 in var_5449 {
            #[allow(unused_mut)]
            let mut entry_5452 = list_5451.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5452, item_5450,
            );
        }
        list_5451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("ClientToken");
    if let Some(var_5454) = &input.client_token {
        scope_5453.string(var_5454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("DryRun");
    if let Some(var_5456) = &input.dry_run {
        scope_5455.boolean(*var_5456);
    }
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("ServiceId");
    if let Some(var_5458) = &input.service_id {
        scope_5457.string(var_5458);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("InstanceId");
    if let Some(var_5460) = &input.instance_ids {
        let mut list_5462 = scope_5459.start_list(true, Some("InstanceId"));
        for item_5461 in var_5460 {
            #[allow(unused_mut)]
            let mut entry_5463 = list_5462.entry();
            entry_5463.string(item_5461);
        }
        list_5462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("Hibernate");
    if let Some(var_5465) = &input.hibernate {
        scope_5464.boolean(*var_5465);
    }
    #[allow(unused_mut)]
    let mut scope_5466 = writer.prefix("DryRun");
    if let Some(var_5467) = &input.dry_run {
        scope_5466.boolean(*var_5467);
    }
    #[allow(unused_mut)]
    let mut scope_5468 = writer.prefix("Force");
    if let Some(var_5469) = &input.force {
        scope_5468.boolean(*var_5469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5470 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5471) = &input.client_vpn_endpoint_id {
        scope_5470.string(var_5471);
    }
    #[allow(unused_mut)]
    let mut scope_5472 = writer.prefix("ConnectionId");
    if let Some(var_5473) = &input.connection_id {
        scope_5472.string(var_5473);
    }
    #[allow(unused_mut)]
    let mut scope_5474 = writer.prefix("Username");
    if let Some(var_5475) = &input.username {
        scope_5474.string(var_5475);
    }
    #[allow(unused_mut)]
    let mut scope_5476 = writer.prefix("DryRun");
    if let Some(var_5477) = &input.dry_run {
        scope_5476.boolean(*var_5477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("InstanceId");
    if let Some(var_5479) = &input.instance_ids {
        let mut list_5481 = scope_5478.start_list(true, Some("InstanceId"));
        for item_5480 in var_5479 {
            #[allow(unused_mut)]
            let mut entry_5482 = list_5481.entry();
            entry_5482.string(item_5480);
        }
        list_5481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5483 = writer.prefix("DryRun");
    if let Some(var_5484) = &input.dry_run {
        scope_5483.boolean(*var_5484);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5485 = writer.prefix("Ipv6Addresses");
    if let Some(var_5486) = &input.ipv6_addresses {
        let mut list_5488 = scope_5485.start_list(true, Some("item"));
        for item_5487 in var_5486 {
            #[allow(unused_mut)]
            let mut entry_5489 = list_5488.entry();
            entry_5489.string(item_5487);
        }
        list_5488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5490 = writer.prefix("Ipv6Prefix");
    if let Some(var_5491) = &input.ipv6_prefixes {
        let mut list_5493 = scope_5490.start_list(true, Some("item"));
        for item_5492 in var_5491 {
            #[allow(unused_mut)]
            let mut entry_5494 = list_5493.entry();
            entry_5494.string(item_5492);
        }
        list_5493.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5496) = &input.network_interface_id {
        scope_5495.string(var_5496);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5498) = &input.network_interface_id {
        scope_5497.string(var_5498);
    }
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("PrivateIpAddress");
    if let Some(var_5500) = &input.private_ip_addresses {
        let mut list_5502 = scope_5499.start_list(true, Some("PrivateIpAddress"));
        for item_5501 in var_5500 {
            #[allow(unused_mut)]
            let mut entry_5503 = list_5502.entry();
            entry_5503.string(item_5501);
        }
        list_5502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5504 = writer.prefix("Ipv4Prefix");
    if let Some(var_5505) = &input.ipv4_prefixes {
        let mut list_5507 = scope_5504.start_list(true, Some("item"));
        for item_5506 in var_5505 {
            #[allow(unused_mut)]
            let mut entry_5508 = list_5507.entry();
            entry_5508.string(item_5506);
        }
        list_5507.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5509 = writer.prefix("InstanceId");
    if let Some(var_5510) = &input.instance_ids {
        let mut list_5512 = scope_5509.start_list(true, Some("InstanceId"));
        for item_5511 in var_5510 {
            #[allow(unused_mut)]
            let mut entry_5513 = list_5512.entry();
            entry_5513.string(item_5511);
        }
        list_5512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5514 = writer.prefix("DryRun");
    if let Some(var_5515) = &input.dry_run {
        scope_5514.boolean(*var_5515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5516 = writer.prefix("DryRun");
    if let Some(var_5517) = &input.dry_run {
        scope_5516.boolean(*var_5517);
    }
    #[allow(unused_mut)]
    let mut scope_5518 = writer.prefix("GroupId");
    if let Some(var_5519) = &input.group_id {
        scope_5518.string(var_5519);
    }
    #[allow(unused_mut)]
    let mut scope_5520 = writer.prefix("GroupName");
    if let Some(var_5521) = &input.group_name {
        scope_5520.string(var_5521);
    }
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("IpPermissions");
    if let Some(var_5523) = &input.ip_permissions {
        let mut list_5525 = scope_5522.start_list(true, Some("item"));
        for item_5524 in var_5523 {
            #[allow(unused_mut)]
            let mut entry_5526 = list_5525.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5526, item_5524);
        }
        list_5525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5527 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5528) = &input.security_group_rule_descriptions {
        let mut list_5530 = scope_5527.start_list(true, Some("item"));
        for item_5529 in var_5528 {
            #[allow(unused_mut)]
            let mut entry_5531 = list_5530.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5531, item_5529,
            );
        }
        list_5530.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("DryRun");
    if let Some(var_5533) = &input.dry_run {
        scope_5532.boolean(*var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("GroupId");
    if let Some(var_5535) = &input.group_id {
        scope_5534.string(var_5535);
    }
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("GroupName");
    if let Some(var_5537) = &input.group_name {
        scope_5536.string(var_5537);
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("IpPermissions");
    if let Some(var_5539) = &input.ip_permissions {
        let mut list_5541 = scope_5538.start_list(true, Some("item"));
        for item_5540 in var_5539 {
            #[allow(unused_mut)]
            let mut entry_5542 = list_5541.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5542, item_5540);
        }
        list_5541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5544) = &input.security_group_rule_descriptions {
        let mut list_5546 = scope_5543.start_list(true, Some("item"));
        for item_5545 in var_5544 {
            #[allow(unused_mut)]
            let mut entry_5547 = list_5546.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5547, item_5545,
            );
        }
        list_5546.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5548 = writer.prefix("Cidr");
    if let Some(var_5549) = &input.cidr {
        scope_5548.string(var_5549);
    }
    #[allow(unused_mut)]
    let mut scope_5550 = writer.prefix("DryRun");
    if let Some(var_5551) = &input.dry_run {
        scope_5550.boolean(*var_5551);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
