// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            );
        }
        list_11.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63);
        }
        list_64.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_104) = &input.ipv6_prefix_count {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Ipv6Prefix");
    if let Some(var_106) = &input.ipv6_prefixes {
        let mut list_108 = scope_105.start_list(true, Some("item"));
        for item_107 in var_106 {
            #[allow(unused_mut)]
            let mut entry_109 = list_108.entry();
            entry_109.string(item_107);
        }
        list_108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NetworkInterfaceId");
    if let Some(var_111) = &input.network_interface_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("AllowReassignment");
    if let Some(var_113) = &input.allow_reassignment {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("NetworkInterfaceId");
    if let Some(var_115) = &input.network_interface_id {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("PrivateIpAddress");
    if let Some(var_117) = &input.private_ip_addresses {
        let mut list_119 = scope_116.start_list(true, Some("PrivateIpAddress"));
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_122) = &input.secondary_private_ip_address_count {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("Ipv4Prefix");
    if let Some(var_124) = &input.ipv4_prefixes {
        let mut list_126 = scope_123.start_list(true, Some("item"));
        for item_125 in var_124 {
            #[allow(unused_mut)]
            let mut entry_127 = list_126.entry();
            entry_127.string(item_125);
        }
        list_126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_129) = &input.ipv4_prefix_count {
        scope_128.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("AllocationId");
    if let Some(var_131) = &input.allocation_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("InstanceId");
    if let Some(var_133) = &input.instance_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("PublicIp");
    if let Some(var_135) = &input.public_ip {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AllowReassociation");
    if let Some(var_137) = &input.allow_reassociation {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DryRun");
    if let Some(var_139) = &input.dry_run {
        scope_138.boolean(*var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("PrivateIpAddress");
    if let Some(var_143) = &input.private_ip_address {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_145) = &input.client_vpn_endpoint_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("SubnetId");
    if let Some(var_147) = &input.subnet_id {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ClientToken");
    if let Some(var_149) = &input.client_token {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("DryRun");
    if let Some(var_151) = &input.dry_run {
        scope_150.boolean(*var_151);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("DhcpOptionsId");
    if let Some(var_153) = &input.dhcp_options_id {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("VpcId");
    if let Some(var_155) = &input.vpc_id {
        scope_154.string(var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DryRun");
    if let Some(var_157) = &input.dry_run {
        scope_156.boolean(*var_157);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("CertificateArn");
    if let Some(var_159) = &input.certificate_arn {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("RoleArn");
    if let Some(var_161) = &input.role_arn {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("DryRun");
    if let Some(var_163) = &input.dry_run {
        scope_162.boolean(*var_163);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("IamInstanceProfile");
    if let Some(var_165) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_164, var_165,
        );
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("InstanceId");
    if let Some(var_167) = &input.instance_id {
        scope_166.string(var_167);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("InstanceEventWindowId");
    if let Some(var_171) = &input.instance_event_window_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("AssociationTarget");
    if let Some(var_173) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(
            scope_172, var_173,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("DryRun");
    if let Some(var_175) = &input.dry_run {
        scope_174.boolean(*var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("RouteTableId");
    if let Some(var_177) = &input.route_table_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("SubnetId");
    if let Some(var_179) = &input.subnet_id {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("GatewayId");
    if let Some(var_181) = &input.gateway_id {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_183) = &input.ipv6_cidr_block {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("SubnetId");
    if let Some(var_185) = &input.subnet_id {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_187) = &input.transit_gateway_multicast_domain_id {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_189) = &input.transit_gateway_attachment_id {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(true, Some("item"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_198) = &input.transit_gateway_route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_200) = &input.transit_gateway_attachment_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DryRun");
    if let Some(var_202) = &input.dry_run {
        scope_201.boolean(*var_202);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("BranchInterfaceId");
    if let Some(var_204) = &input.branch_interface_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TrunkInterfaceId");
    if let Some(var_206) = &input.trunk_interface_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("VlanId");
    if let Some(var_208) = &input.vlan_id {
        scope_207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("GreKey");
    if let Some(var_210) = &input.gre_key {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("ClientToken");
    if let Some(var_212) = &input.client_token {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("DryRun");
    if let Some(var_214) = &input.dry_run {
        scope_213.boolean(*var_214);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_216) = &input.amazon_provided_ipv6_cidr_block {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("CidrBlock");
    if let Some(var_218) = &input.cidr_block {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("VpcId");
    if let Some(var_220) = &input.vpc_id {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_222) = &input.ipv6_cidr_block_network_border_group {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("Ipv6Pool");
    if let Some(var_224) = &input.ipv6_pool {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_226) = &input.ipv6_cidr_block {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("DryRun");
    if let Some(var_228) = &input.dry_run {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SecurityGroupId");
    if let Some(var_230) = &input.groups {
        let mut list_232 = scope_229.start_list(true, Some("groupId"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("VpcId");
    if let Some(var_237) = &input.vpc_id {
        scope_236.string(var_237);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DryRun");
    if let Some(var_239) = &input.dry_run {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("InternetGatewayId");
    if let Some(var_241) = &input.internet_gateway_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("VpcId");
    if let Some(var_243) = &input.vpc_id {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DeviceIndex");
    if let Some(var_245) = &input.device_index {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DryRun");
    if let Some(var_247) = &input.dry_run {
        scope_246.boolean(*var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("InstanceId");
    if let Some(var_249) = &input.instance_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NetworkInterfaceId");
    if let Some(var_251) = &input.network_interface_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkCardIndex");
    if let Some(var_253) = &input.network_card_index {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Device");
    if let Some(var_255) = &input.device {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("InstanceId");
    if let Some(var_257) = &input.instance_id {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VolumeId");
    if let Some(var_259) = &input.volume_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DryRun");
    if let Some(var_261) = &input.dry_run {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("VpcId");
    if let Some(var_263) = &input.vpc_id {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("VpnGatewayId");
    if let Some(var_265) = &input.vpn_gateway_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DryRun");
    if let Some(var_267) = &input.dry_run {
        scope_266.boolean(*var_267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_269) = &input.client_vpn_endpoint_id {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("TargetNetworkCidr");
    if let Some(var_271) = &input.target_network_cidr {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AccessGroupId");
    if let Some(var_273) = &input.access_group_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_275) = &input.authorize_all_groups {
        scope_274.boolean(*var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Description");
    if let Some(var_277) = &input.description {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ClientToken");
    if let Some(var_279) = &input.client_token {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("DryRun");
    if let Some(var_281) = &input.dry_run {
        scope_280.boolean(*var_281);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("GroupId");
    if let Some(var_285) = &input.group_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IpPermissions");
    if let Some(var_287) = &input.ip_permissions {
        let mut list_289 = scope_286.start_list(true, Some("item"));
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_290, item_288);
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TagSpecification");
    if let Some(var_292) = &input.tag_specifications {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_295, item_293,
            );
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CidrIp");
    if let Some(var_297) = &input.cidr_ip {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("FromPort");
    if let Some(var_299) = &input.from_port {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("IpProtocol");
    if let Some(var_301) = &input.ip_protocol {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("ToPort");
    if let Some(var_303) = &input.to_port {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_305) = &input.source_security_group_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_307) = &input.source_security_group_owner_id {
        scope_306.string(var_307);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CidrIp");
    if let Some(var_309) = &input.cidr_ip {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FromPort");
    if let Some(var_311) = &input.from_port {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GroupId");
    if let Some(var_313) = &input.group_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GroupName");
    if let Some(var_315) = &input.group_name {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("IpPermissions");
    if let Some(var_317) = &input.ip_permissions {
        let mut list_319 = scope_316.start_list(true, Some("item"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_320, item_318);
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpProtocol");
    if let Some(var_322) = &input.ip_protocol {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_324) = &input.source_security_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_326) = &input.source_security_group_owner_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("ToPort");
    if let Some(var_328) = &input.to_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DryRun");
    if let Some(var_330) = &input.dry_run {
        scope_329.boolean(*var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TagSpecification");
    if let Some(var_332) = &input.tag_specifications {
        let mut list_334 = scope_331.start_list(true, Some("item"));
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_335, item_333,
            );
        }
        list_334.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("InstanceId");
    if let Some(var_337) = &input.instance_id {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Storage");
    if let Some(var_339) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_338, var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DryRun");
    if let Some(var_341) = &input.dry_run {
        scope_340.boolean(*var_341);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("BundleId");
    if let Some(var_343) = &input.bundle_id {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CapacityReservationId");
    if let Some(var_347) = &input.capacity_reservation_id {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DryRun");
    if let Some(var_349) = &input.dry_run {
        scope_348.boolean(*var_349);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("DryRun");
    if let Some(var_351) = &input.dry_run {
        scope_350.boolean(*var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_353) = &input.capacity_reservation_fleet_ids {
        let mut list_355 = scope_352.start_list(true, Some("item"));
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            entry_356.string(item_354);
        }
        list_355.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ConversionTaskId");
    if let Some(var_358) = &input.conversion_task_id {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("DryRun");
    if let Some(var_360) = &input.dry_run {
        scope_359.boolean(*var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ReasonMessage");
    if let Some(var_362) = &input.reason_message {
        scope_361.string(var_362);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("ExportTaskId");
    if let Some(var_364) = &input.export_task_id {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("CancelReason");
    if let Some(var_366) = &input.cancel_reason {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("ImportTaskId");
    if let Some(var_370) = &input.import_task_id {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_372) = &input.reserved_instances_listing_id {
        scope_371.string(var_372);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("SpotFleetRequestId");
    if let Some(var_376) = &input.spot_fleet_request_ids {
        let mut list_378 = scope_375.start_list(true, Some("item"));
        for item_377 in var_376 {
            #[allow(unused_mut)]
            let mut entry_379 = list_378.entry();
            entry_379.string(item_377);
        }
        list_378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("TerminateInstances");
    if let Some(var_381) = &input.terminate_instances {
        scope_380.boolean(*var_381);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DryRun");
    if let Some(var_383) = &input.dry_run {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_385) = &input.spot_instance_request_ids {
        let mut list_387 = scope_384.start_list(true, Some("SpotInstanceRequestId"));
        for item_386 in var_385 {
            #[allow(unused_mut)]
            let mut entry_388 = list_387.entry();
            entry_388.string(item_386);
        }
        list_387.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("InstanceId");
    if let Some(var_390) = &input.instance_id {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("ProductCode");
    if let Some(var_392) = &input.product_code {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("DryRun");
    if let Some(var_394) = &input.dry_run {
        scope_393.boolean(*var_394);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("DryRun");
    if let Some(var_396) = &input.dry_run {
        scope_395.boolean(*var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("SourceFpgaImageId");
    if let Some(var_398) = &input.source_fpga_image_id {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Description");
    if let Some(var_400) = &input.description {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Name");
    if let Some(var_402) = &input.name {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("SourceRegion");
    if let Some(var_404) = &input.source_region {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("ClientToken");
    if let Some(var_406) = &input.client_token {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("ClientToken");
    if let Some(var_408) = &input.client_token {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Description");
    if let Some(var_410) = &input.description {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Encrypted");
    if let Some(var_412) = &input.encrypted {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("KmsKeyId");
    if let Some(var_414) = &input.kms_key_id {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Name");
    if let Some(var_416) = &input.name {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("SourceImageId");
    if let Some(var_418) = &input.source_image_id {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SourceRegion");
    if let Some(var_420) = &input.source_region {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DestinationOutpostArn");
    if let Some(var_422) = &input.destination_outpost_arn {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("DryRun");
    if let Some(var_424) = &input.dry_run {
        scope_423.boolean(*var_424);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Description");
    if let Some(var_426) = &input.description {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("DestinationOutpostArn");
    if let Some(var_428) = &input.destination_outpost_arn {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("DestinationRegion");
    if let Some(var_430) = &input.destination_region {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("Encrypted");
    if let Some(var_432) = &input.encrypted {
        scope_431.boolean(*var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("KmsKeyId");
    if let Some(var_434) = &input.kms_key_id {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("PresignedUrl");
    if let Some(var_436) = &input.presigned_url {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("SourceRegion");
    if let Some(var_438) = &input.source_region {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("SourceSnapshotId");
    if let Some(var_440) = &input.source_snapshot_id {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("TagSpecification");
    if let Some(var_442) = &input.tag_specifications {
        let mut list_444 = scope_441.start_list(true, Some("item"));
        for item_443 in var_442 {
            #[allow(unused_mut)]
            let mut entry_445 = list_444.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_445, item_443,
            );
        }
        list_444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("DryRun");
    if let Some(var_447) = &input.dry_run {
        scope_446.boolean(*var_447);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("ClientToken");
    if let Some(var_449) = &input.client_token {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("InstanceType");
    if let Some(var_451) = &input.instance_type {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("InstancePlatform");
    if let Some(var_453) = &input.instance_platform {
        scope_452.string(var_453.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("AvailabilityZone");
    if let Some(var_455) = &input.availability_zone {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("AvailabilityZoneId");
    if let Some(var_457) = &input.availability_zone_id {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Tenancy");
    if let Some(var_459) = &input.tenancy {
        scope_458.string(var_459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("InstanceCount");
    if let Some(var_461) = &input.instance_count {
        scope_460.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_461).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("EbsOptimized");
    if let Some(var_463) = &input.ebs_optimized {
        scope_462.boolean(*var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("EphemeralStorage");
    if let Some(var_465) = &input.ephemeral_storage {
        scope_464.boolean(*var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("EndDate");
    if let Some(var_467) = &input.end_date {
        scope_466.instant(var_467, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("EndDateType");
    if let Some(var_469) = &input.end_date_type {
        scope_468.string(var_469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_471) = &input.instance_match_criteria {
        scope_470.string(var_471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("TagSpecifications");
    if let Some(var_473) = &input.tag_specifications {
        let mut list_475 = scope_472.start_list(true, Some("item"));
        for item_474 in var_473 {
            #[allow(unused_mut)]
            let mut entry_476 = list_475.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_476, item_474,
            );
        }
        list_475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("DryRun");
    if let Some(var_478) = &input.dry_run {
        scope_477.boolean(*var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("OutpostArn");
    if let Some(var_480) = &input.outpost_arn {
        scope_479.string(var_480);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AllocationStrategy");
    if let Some(var_482) = &input.allocation_strategy {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_486) = &input.instance_type_specifications {
        let mut list_488 = scope_485.start_list(true, None);
        for item_487 in var_486 {
            #[allow(unused_mut)]
            let mut entry_489 = list_488.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_489, item_487);
        }
        list_488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Tenancy");
    if let Some(var_491) = &input.tenancy {
        scope_490.string(var_491.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("TotalTargetCapacity");
    if let Some(var_493) = &input.total_target_capacity {
        scope_492.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("EndDate");
    if let Some(var_495) = &input.end_date {
        scope_494.instant(var_495, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_497) = &input.instance_match_criteria {
        scope_496.string(var_497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("TagSpecification");
    if let Some(var_499) = &input.tag_specifications {
        let mut list_501 = scope_498.start_list(true, Some("item"));
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_502, item_500,
            );
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("DryRun");
    if let Some(var_504) = &input.dry_run {
        scope_503.boolean(*var_504);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("VpcId");
    if let Some(var_506) = &input.vpc_id {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecification");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_511, item_509,
            );
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DryRun");
    if let Some(var_513) = &input.dry_run {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("ClientCidrBlock");
    if let Some(var_517) = &input.client_cidr_block {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("ServerCertificateArn");
    if let Some(var_519) = &input.server_certificate_arn {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Authentication");
    if let Some(var_521) = &input.authentication_options {
        let mut list_523 = scope_520.start_list(true, None);
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_524, item_522,
            );
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("ConnectionLogOptions");
    if let Some(var_526) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_525, var_526,
        );
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("DnsServers");
    if let Some(var_528) = &input.dns_servers {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            entry_531.string(item_529);
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("TransportProtocol");
    if let Some(var_533) = &input.transport_protocol {
        scope_532.string(var_533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpnPort");
    if let Some(var_535) = &input.vpn_port {
        scope_534.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Description");
    if let Some(var_537) = &input.description {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("SplitTunnel");
    if let Some(var_539) = &input.split_tunnel {
        scope_538.boolean(*var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DryRun");
    if let Some(var_541) = &input.dry_run {
        scope_540.boolean(*var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("ClientToken");
    if let Some(var_543) = &input.client_token {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("TagSpecification");
    if let Some(var_545) = &input.tag_specifications {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_548, item_546,
            );
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("SecurityGroupId");
    if let Some(var_550) = &input.security_group_ids {
        let mut list_552 = scope_549.start_list(true, Some("item"));
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            entry_553.string(item_551);
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("VpcId");
    if let Some(var_555) = &input.vpc_id {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("SelfServicePortal");
    if let Some(var_557) = &input.self_service_portal {
        scope_556.string(var_557.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("ClientConnectOptions");
    if let Some(var_559) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_558, var_559,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_561) = &input.client_vpn_endpoint_id {
        scope_560.string(var_561);
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("DestinationCidrBlock");
    if let Some(var_563) = &input.destination_cidr_block {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_565) = &input.target_vpc_subnet_id {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Description");
    if let Some(var_567) = &input.description {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("ClientToken");
    if let Some(var_569) = &input.client_token {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("DryRun");
    if let Some(var_571) = &input.dry_run {
        scope_570.boolean(*var_571);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("BgpAsn");
    if let Some(var_573) = &input.bgp_asn {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("IpAddress");
    if let Some(var_575) = &input.public_ip {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("CertificateArn");
    if let Some(var_577) = &input.certificate_arn {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Type");
    if let Some(var_579) = &input.r#type {
        scope_578.string(var_579.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("TagSpecification");
    if let Some(var_581) = &input.tag_specifications {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_584, item_582,
            );
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("DeviceName");
    if let Some(var_586) = &input.device_name {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DryRun");
    if let Some(var_588) = &input.dry_run {
        scope_587.boolean(*var_588);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("AvailabilityZone");
    if let Some(var_590) = &input.availability_zone {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("DryRun");
    if let Some(var_592) = &input.dry_run {
        scope_591.boolean(*var_592);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("DryRun");
    if let Some(var_594) = &input.dry_run {
        scope_593.boolean(*var_594);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DhcpConfiguration");
    if let Some(var_596) = &input.dhcp_configurations {
        let mut list_598 = scope_595.start_list(true, Some("item"));
        for item_597 in var_596 {
            #[allow(unused_mut)]
            let mut entry_599 = list_598.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_599, item_597,
            );
        }
        list_598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("TagSpecification");
    if let Some(var_601) = &input.tag_specifications {
        let mut list_603 = scope_600.start_list(true, Some("item"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_604, item_602,
            );
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("ClientToken");
    if let Some(var_608) = &input.client_token {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DryRun");
    if let Some(var_610) = &input.dry_run {
        scope_609.boolean(*var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("VpcId");
    if let Some(var_612) = &input.vpc_id {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            );
        }
        list_616.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DryRun");
    if let Some(var_619) = &input.dry_run {
        scope_618.boolean(*var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ClientToken");
    if let Some(var_621) = &input.client_token {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("SpotOptions");
    if let Some(var_623) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_622, var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("OnDemandOptions");
    if let Some(var_625) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_624, var_625,
        );
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_627) = &input.excess_capacity_termination_policy {
        scope_626.string(var_627.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_629) = &input.launch_template_configs {
        let mut list_631 = scope_628.start_list(true, Some("item"));
        for item_630 in var_629 {
            #[allow(unused_mut)]
            let mut entry_632 = list_631.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_632, item_630,
            );
        }
        list_631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_634) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_633, var_634,
        );
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_636) = &input.terminate_instances_with_expiration {
        scope_635.boolean(*var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("Type");
    if let Some(var_638) = &input.r#type {
        scope_637.string(var_638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("ValidFrom");
    if let Some(var_640) = &input.valid_from {
        scope_639.instant(var_640, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("ValidUntil");
    if let Some(var_642) = &input.valid_until {
        scope_641.instant(var_642, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_644) = &input.replace_unhealthy_instances {
        scope_643.boolean(*var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("TagSpecification");
    if let Some(var_646) = &input.tag_specifications {
        let mut list_648 = scope_645.start_list(true, Some("item"));
        for item_647 in var_646 {
            #[allow(unused_mut)]
            let mut entry_649 = list_648.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_649, item_647,
            );
        }
        list_648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("Context");
    if let Some(var_651) = &input.context {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DryRun");
    if let Some(var_653) = &input.dry_run {
        scope_652.boolean(*var_653);
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("ClientToken");
    if let Some(var_655) = &input.client_token {
        scope_654.string(var_655);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_657) = &input.deliver_logs_permission_arn {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("LogGroupName");
    if let Some(var_659) = &input.log_group_name {
        scope_658.string(var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("ResourceId");
    if let Some(var_661) = &input.resource_ids {
        let mut list_663 = scope_660.start_list(true, Some("item"));
        for item_662 in var_661 {
            #[allow(unused_mut)]
            let mut entry_664 = list_663.entry();
            entry_664.string(item_662);
        }
        list_663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ResourceType");
    if let Some(var_666) = &input.resource_type {
        scope_665.string(var_666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("TrafficType");
    if let Some(var_668) = &input.traffic_type {
        scope_667.string(var_668.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("LogDestinationType");
    if let Some(var_670) = &input.log_destination_type {
        scope_669.string(var_670.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("LogDestination");
    if let Some(var_672) = &input.log_destination {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("LogFormat");
    if let Some(var_674) = &input.log_format {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("TagSpecification");
    if let Some(var_676) = &input.tag_specifications {
        let mut list_678 = scope_675.start_list(true, Some("item"));
        for item_677 in var_676 {
            #[allow(unused_mut)]
            let mut entry_679 = list_678.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_679, item_677,
            );
        }
        list_678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("MaxAggregationInterval");
    if let Some(var_681) = &input.max_aggregation_interval {
        scope_680.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_681).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("DryRun");
    if let Some(var_683) = &input.dry_run {
        scope_682.boolean(*var_683);
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("InputStorageLocation");
    if let Some(var_685) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_684, var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("LogsStorageLocation");
    if let Some(var_687) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_686, var_687);
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("Description");
    if let Some(var_689) = &input.description {
        scope_688.string(var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("Name");
    if let Some(var_691) = &input.name {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("ClientToken");
    if let Some(var_693) = &input.client_token {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("TagSpecification");
    if let Some(var_695) = &input.tag_specifications {
        let mut list_697 = scope_694.start_list(true, Some("item"));
        for item_696 in var_695 {
            #[allow(unused_mut)]
            let mut entry_698 = list_697.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_698, item_696,
            );
        }
        list_697.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("BlockDeviceMapping");
    if let Some(var_700) = &input.block_device_mappings {
        let mut list_702 = scope_699.start_list(true, Some("BlockDeviceMapping"));
        for item_701 in var_700 {
            #[allow(unused_mut)]
            let mut entry_703 = list_702.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_703, item_701,
            );
        }
        list_702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Description");
    if let Some(var_705) = &input.description {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("DryRun");
    if let Some(var_707) = &input.dry_run {
        scope_706.boolean(*var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("InstanceId");
    if let Some(var_709) = &input.instance_id {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("Name");
    if let Some(var_711) = &input.name {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("NoReboot");
    if let Some(var_713) = &input.no_reboot {
        scope_712.boolean(*var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TagSpecification");
    if let Some(var_715) = &input.tag_specifications {
        let mut list_717 = scope_714.start_list(true, Some("item"));
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_718, item_716,
            );
        }
        list_717.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DryRun");
    if let Some(var_720) = &input.dry_run {
        scope_719.boolean(*var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("Name");
    if let Some(var_722) = &input.name {
        scope_721.string(var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("TimeRange");
    if let Some(var_724) = &input.time_ranges {
        let mut list_726 = scope_723.start_list(true, None);
        for item_725 in var_724 {
            #[allow(unused_mut)]
            let mut entry_727 = list_726.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_727, item_725);
        }
        list_726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("CronExpression");
    if let Some(var_729) = &input.cron_expression {
        scope_728.string(var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("TagSpecification");
    if let Some(var_731) = &input.tag_specifications {
        let mut list_733 = scope_730.start_list(true, Some("item"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_734, item_732,
            );
        }
        list_733.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("Description");
    if let Some(var_736) = &input.description {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("ExportToS3");
    if let Some(var_738) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_737, var_738,
        );
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("InstanceId");
    if let Some(var_740) = &input.instance_id {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("TargetEnvironment");
    if let Some(var_742) = &input.target_environment {
        scope_741.string(var_742.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("TagSpecification");
    if let Some(var_744) = &input.tag_specifications {
        let mut list_746 = scope_743.start_list(true, Some("item"));
        for item_745 in var_744 {
            #[allow(unused_mut)]
            let mut entry_747 = list_746.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_747, item_745,
            );
        }
        list_746.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("TagSpecification");
    if let Some(var_749) = &input.tag_specifications {
        let mut list_751 = scope_748.start_list(true, Some("item"));
        for item_750 in var_749 {
            #[allow(unused_mut)]
            let mut entry_752 = list_751.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_752, item_750,
            );
        }
        list_751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("DryRun");
    if let Some(var_754) = &input.dry_run {
        scope_753.boolean(*var_754);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("KeyName");
    if let Some(var_756) = &input.key_name {
        scope_755.string(var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("DryRun");
    if let Some(var_758) = &input.dry_run {
        scope_757.boolean(*var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("KeyType");
    if let Some(var_760) = &input.key_type {
        scope_759.string(var_760.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("TagSpecification");
    if let Some(var_762) = &input.tag_specifications {
        let mut list_764 = scope_761.start_list(true, Some("item"));
        for item_763 in var_762 {
            #[allow(unused_mut)]
            let mut entry_765 = list_764.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_765, item_763,
            );
        }
        list_764.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("DryRun");
    if let Some(var_767) = &input.dry_run {
        scope_766.boolean(*var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("ClientToken");
    if let Some(var_769) = &input.client_token {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("LaunchTemplateName");
    if let Some(var_771) = &input.launch_template_name {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("VersionDescription");
    if let Some(var_773) = &input.version_description {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("LaunchTemplateData");
    if let Some(var_775) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_774, var_775,
        );
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("TagSpecification");
    if let Some(var_777) = &input.tag_specifications {
        let mut list_779 = scope_776.start_list(true, Some("item"));
        for item_778 in var_777 {
            #[allow(unused_mut)]
            let mut entry_780 = list_779.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_780, item_778,
            );
        }
        list_779.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("DryRun");
    if let Some(var_782) = &input.dry_run {
        scope_781.boolean(*var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("ClientToken");
    if let Some(var_784) = &input.client_token {
        scope_783.string(var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("LaunchTemplateId");
    if let Some(var_786) = &input.launch_template_id {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("LaunchTemplateName");
    if let Some(var_788) = &input.launch_template_name {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("SourceVersion");
    if let Some(var_790) = &input.source_version {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("VersionDescription");
    if let Some(var_792) = &input.version_description {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("LaunchTemplateData");
    if let Some(var_794) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_793, var_794,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("DestinationCidrBlock");
    if let Some(var_796) = &input.destination_cidr_block {
        scope_795.string(var_796);
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_798) = &input.local_gateway_route_table_id {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("DryRun");
    if let Some(var_800) = &input.dry_run {
        scope_799.boolean(*var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_802) = &input.local_gateway_virtual_interface_group_id {
        scope_801.string(var_802);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_804) = &input.local_gateway_route_table_id {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("VpcId");
    if let Some(var_806) = &input.vpc_id {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("TagSpecification");
    if let Some(var_808) = &input.tag_specifications {
        let mut list_810 = scope_807.start_list(true, Some("item"));
        for item_809 in var_808 {
            #[allow(unused_mut)]
            let mut entry_811 = list_810.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_811, item_809,
            );
        }
        list_810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("DryRun");
    if let Some(var_813) = &input.dry_run {
        scope_812.boolean(*var_813);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("DryRun");
    if let Some(var_815) = &input.dry_run {
        scope_814.boolean(*var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("PrefixListName");
    if let Some(var_817) = &input.prefix_list_name {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("Entry");
    if let Some(var_819) = &input.entries {
        let mut list_821 = scope_818.start_list(true, None);
        for item_820 in var_819 {
            #[allow(unused_mut)]
            let mut entry_822 = list_821.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_822, item_820,
            );
        }
        list_821.finish();
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("MaxEntries");
    if let Some(var_824) = &input.max_entries {
        scope_823.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("TagSpecification");
    if let Some(var_826) = &input.tag_specifications {
        let mut list_828 = scope_825.start_list(true, Some("item"));
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_829, item_827,
            );
        }
        list_828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AddressFamily");
    if let Some(var_831) = &input.address_family {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("ClientToken");
    if let Some(var_833) = &input.client_token {
        scope_832.string(var_833);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("AllocationId");
    if let Some(var_835) = &input.allocation_id {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("ClientToken");
    if let Some(var_837) = &input.client_token {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("DryRun");
    if let Some(var_839) = &input.dry_run {
        scope_838.boolean(*var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("SubnetId");
    if let Some(var_841) = &input.subnet_id {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("TagSpecification");
    if let Some(var_843) = &input.tag_specifications {
        let mut list_845 = scope_842.start_list(true, Some("item"));
        for item_844 in var_843 {
            #[allow(unused_mut)]
            let mut entry_846 = list_845.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_846, item_844,
            );
        }
        list_845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("ConnectivityType");
    if let Some(var_848) = &input.connectivity_type {
        scope_847.string(var_848.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("DryRun");
    if let Some(var_850) = &input.dry_run {
        scope_849.boolean(*var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("VpcId");
    if let Some(var_852) = &input.vpc_id {
        scope_851.string(var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("TagSpecification");
    if let Some(var_854) = &input.tag_specifications {
        let mut list_856 = scope_853.start_list(true, Some("item"));
        for item_855 in var_854 {
            #[allow(unused_mut)]
            let mut entry_857 = list_856.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_857, item_855,
            );
        }
        list_856.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("CidrBlock");
    if let Some(var_859) = &input.cidr_block {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("DryRun");
    if let Some(var_861) = &input.dry_run {
        scope_860.boolean(*var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("Egress");
    if let Some(var_863) = &input.egress {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Icmp");
    if let Some(var_865) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_864, var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_867) = &input.ipv6_cidr_block {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("NetworkAclId");
    if let Some(var_869) = &input.network_acl_id {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("PortRange");
    if let Some(var_871) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_870, var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("Protocol");
    if let Some(var_873) = &input.protocol {
        scope_872.string(var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("RuleAction");
    if let Some(var_875) = &input.rule_action {
        scope_874.string(var_875.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("RuleNumber");
    if let Some(var_877) = &input.rule_number {
        scope_876.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_877).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("SourceIp");
    if let Some(var_879) = &input.source_ip {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("DestinationIp");
    if let Some(var_881) = &input.destination_ip {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("Source");
    if let Some(var_883) = &input.source {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("Destination");
    if let Some(var_885) = &input.destination {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Protocol");
    if let Some(var_887) = &input.protocol {
        scope_886.string(var_887.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("DestinationPort");
    if let Some(var_889) = &input.destination_port {
        scope_888.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("TagSpecification");
    if let Some(var_891) = &input.tag_specifications {
        let mut list_893 = scope_890.start_list(true, Some("item"));
        for item_892 in var_891 {
            #[allow(unused_mut)]
            let mut entry_894 = list_893.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_894, item_892,
            );
        }
        list_893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("DryRun");
    if let Some(var_896) = &input.dry_run {
        scope_895.boolean(*var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("ClientToken");
    if let Some(var_898) = &input.client_token {
        scope_897.string(var_898);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("Description");
    if let Some(var_900) = &input.description {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("DryRun");
    if let Some(var_902) = &input.dry_run {
        scope_901.boolean(*var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("SecurityGroupId");
    if let Some(var_904) = &input.groups {
        let mut list_906 = scope_903.start_list(true, Some("SecurityGroupId"));
        for item_905 in var_904 {
            #[allow(unused_mut)]
            let mut entry_907 = list_906.entry();
            entry_907.string(item_905);
        }
        list_906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("Ipv6AddressCount");
    if let Some(var_909) = &input.ipv6_address_count {
        scope_908.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_909).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("Ipv6Addresses");
    if let Some(var_911) = &input.ipv6_addresses {
        let mut list_913 = scope_910.start_list(true, Some("item"));
        for item_912 in var_911 {
            #[allow(unused_mut)]
            let mut entry_914 = list_913.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_914, item_912,
            );
        }
        list_913.finish();
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("PrivateIpAddress");
    if let Some(var_916) = &input.private_ip_address {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("PrivateIpAddresses");
    if let Some(var_918) = &input.private_ip_addresses {
        let mut list_920 = scope_917.start_list(true, Some("item"));
        for item_919 in var_918 {
            #[allow(unused_mut)]
            let mut entry_921 = list_920.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_921, item_919,
            );
        }
        list_920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_923) = &input.secondary_private_ip_address_count {
        scope_922.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_923).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("Ipv4Prefix");
    if let Some(var_925) = &input.ipv4_prefixes {
        let mut list_927 = scope_924.start_list(true, Some("item"));
        for item_926 in var_925 {
            #[allow(unused_mut)]
            let mut entry_928 = list_927.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_928, item_926,
            );
        }
        list_927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_930) = &input.ipv4_prefix_count {
        scope_929.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("Ipv6Prefix");
    if let Some(var_932) = &input.ipv6_prefixes {
        let mut list_934 = scope_931.start_list(true, Some("item"));
        for item_933 in var_932 {
            #[allow(unused_mut)]
            let mut entry_935 = list_934.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_935, item_933,
            );
        }
        list_934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_937) = &input.ipv6_prefix_count {
        scope_936.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_937).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("InterfaceType");
    if let Some(var_939) = &input.interface_type {
        scope_938.string(var_939.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("SubnetId");
    if let Some(var_941) = &input.subnet_id {
        scope_940.string(var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("TagSpecification");
    if let Some(var_943) = &input.tag_specifications {
        let mut list_945 = scope_942.start_list(true, Some("item"));
        for item_944 in var_943 {
            #[allow(unused_mut)]
            let mut entry_946 = list_945.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_946, item_944,
            );
        }
        list_945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("ClientToken");
    if let Some(var_948) = &input.client_token {
        scope_947.string(var_948);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("NetworkInterfaceId");
    if let Some(var_950) = &input.network_interface_id {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("AwsAccountId");
    if let Some(var_952) = &input.aws_account_id {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("AwsService");
    if let Some(var_954) = &input.aws_service {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("Permission");
    if let Some(var_956) = &input.permission {
        scope_955.string(var_956.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("DryRun");
    if let Some(var_958) = &input.dry_run {
        scope_957.boolean(*var_958);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("DryRun");
    if let Some(var_960) = &input.dry_run {
        scope_959.boolean(*var_960);
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("GroupName");
    if let Some(var_962) = &input.group_name {
        scope_961.string(var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Strategy");
    if let Some(var_964) = &input.strategy {
        scope_963.string(var_964.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("PartitionCount");
    if let Some(var_966) = &input.partition_count {
        scope_965.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_966).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("TagSpecification");
    if let Some(var_968) = &input.tag_specifications {
        let mut list_970 = scope_967.start_list(true, Some("item"));
        for item_969 in var_968 {
            #[allow(unused_mut)]
            let mut entry_971 = list_970.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_971, item_969,
            );
        }
        list_970.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("InstanceId");
    if let Some(var_973) = &input.instance_id {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("SnapshotId");
    if let Some(var_975) = &input.snapshot_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("ClientToken");
    if let Some(var_977) = &input.client_token {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("DryRun");
    if let Some(var_979) = &input.dry_run {
        scope_978.boolean(*var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("TagSpecification");
    if let Some(var_981) = &input.tag_specifications {
        let mut list_983 = scope_980.start_list(true, Some("item"));
        for item_982 in var_981 {
            #[allow(unused_mut)]
            let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_984, item_982,
            );
        }
        list_983.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("ClientToken");
    if let Some(var_986) = &input.client_token {
        scope_985.string(var_986);
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("InstanceCount");
    if let Some(var_988) = &input.instance_count {
        scope_987.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("PriceSchedules");
    if let Some(var_990) = &input.price_schedules {
        let mut list_992 = scope_989.start_list(true, Some("item"));
        for item_991 in var_990 {
            #[allow(unused_mut)]
            let mut entry_993 = list_992.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_993, item_991,
            );
        }
        list_992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("ReservedInstancesId");
    if let Some(var_995) = &input.reserved_instances_id {
        scope_994.string(var_995);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("Bucket");
    if let Some(var_997) = &input.bucket {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("ObjectKey");
    if let Some(var_999) = &input.object_key {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("Name");
    if let Some(var_1001) = &input.name {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("TagSpecification");
    if let Some(var_1003) = &input.tag_specifications {
        let mut list_1005 = scope_1002.start_list(true, Some("item"));
        for item_1004 in var_1003 {
            #[allow(unused_mut)]
            let mut entry_1006 = list_1005.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1006, item_1004,
            );
        }
        list_1005.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("DryRun");
    if let Some(var_1008) = &input.dry_run {
        scope_1007.boolean(*var_1008);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1010) = &input.destination_cidr_block {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1012) = &input.destination_ipv6_cidr_block {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1014) = &input.destination_prefix_list_id {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DryRun");
    if let Some(var_1016) = &input.dry_run {
        scope_1015.boolean(*var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("VpcEndpointId");
    if let Some(var_1018) = &input.vpc_endpoint_id {
        scope_1017.string(var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1020) = &input.egress_only_internet_gateway_id {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("GatewayId");
    if let Some(var_1022) = &input.gateway_id {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("InstanceId");
    if let Some(var_1024) = &input.instance_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("NatGatewayId");
    if let Some(var_1026) = &input.nat_gateway_id {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("TransitGatewayId");
    if let Some(var_1028) = &input.transit_gateway_id {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("LocalGatewayId");
    if let Some(var_1030) = &input.local_gateway_id {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("CarrierGatewayId");
    if let Some(var_1032) = &input.carrier_gateway_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1034) = &input.network_interface_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("RouteTableId");
    if let Some(var_1036) = &input.route_table_id {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1038) = &input.vpc_peering_connection_id {
        scope_1037.string(var_1038);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("DryRun");
    if let Some(var_1040) = &input.dry_run {
        scope_1039.boolean(*var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("VpcId");
    if let Some(var_1042) = &input.vpc_id {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("TagSpecification");
    if let Some(var_1044) = &input.tag_specifications {
        let mut list_1046 = scope_1043.start_list(true, Some("item"));
        for item_1045 in var_1044 {
            #[allow(unused_mut)]
            let mut entry_1047 = list_1046.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1047, item_1045,
            );
        }
        list_1046.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("GroupDescription");
    if let Some(var_1049) = &input.description {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("GroupName");
    if let Some(var_1051) = &input.group_name {
        scope_1050.string(var_1051);
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("VpcId");
    if let Some(var_1053) = &input.vpc_id {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("TagSpecification");
    if let Some(var_1055) = &input.tag_specifications {
        let mut list_1057 = scope_1054.start_list(true, Some("item"));
        for item_1056 in var_1055 {
            #[allow(unused_mut)]
            let mut entry_1058 = list_1057.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1058, item_1056,
            );
        }
        list_1057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("DryRun");
    if let Some(var_1060) = &input.dry_run {
        scope_1059.boolean(*var_1060);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Description");
    if let Some(var_1062) = &input.description {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("OutpostArn");
    if let Some(var_1064) = &input.outpost_arn {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("VolumeId");
    if let Some(var_1066) = &input.volume_id {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("TagSpecification");
    if let Some(var_1068) = &input.tag_specifications {
        let mut list_1070 = scope_1067.start_list(true, Some("item"));
        for item_1069 in var_1068 {
            #[allow(unused_mut)]
            let mut entry_1071 = list_1070.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1071, item_1069,
            );
        }
        list_1070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("DryRun");
    if let Some(var_1073) = &input.dry_run {
        scope_1072.boolean(*var_1073);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("Description");
    if let Some(var_1075) = &input.description {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("InstanceSpecification");
    if let Some(var_1077) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1076, var_1077,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("OutpostArn");
    if let Some(var_1079) = &input.outpost_arn {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("TagSpecification");
    if let Some(var_1081) = &input.tag_specifications {
        let mut list_1083 = scope_1080.start_list(true, Some("item"));
        for item_1082 in var_1081 {
            #[allow(unused_mut)]
            let mut entry_1084 = list_1083.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1084, item_1082,
            );
        }
        list_1083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("DryRun");
    if let Some(var_1086) = &input.dry_run {
        scope_1085.boolean(*var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1088) = &input.copy_tags_from_source {
        scope_1087.string(var_1088.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("Bucket");
    if let Some(var_1090) = &input.bucket {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("DryRun");
    if let Some(var_1092) = &input.dry_run {
        scope_1091.boolean(*var_1092);
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("Prefix");
    if let Some(var_1094) = &input.prefix {
        scope_1093.string(var_1094);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("ImageId");
    if let Some(var_1096) = &input.image_id {
        scope_1095.string(var_1096);
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("Bucket");
    if let Some(var_1098) = &input.bucket {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("S3ObjectTag");
    if let Some(var_1100) = &input.s3_object_tags {
        let mut list_1102 = scope_1099.start_list(true, Some("item"));
        for item_1101 in var_1100 {
            #[allow(unused_mut)]
            let mut entry_1103 = list_1102.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1103, item_1101);
        }
        list_1102.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("DryRun");
    if let Some(var_1105) = &input.dry_run {
        scope_1104.boolean(*var_1105);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("TagSpecification");
    if let Some(var_1107) = &input.tag_specifications {
        let mut list_1109 = scope_1106.start_list(true, Some("item"));
        for item_1108 in var_1107 {
            #[allow(unused_mut)]
            let mut entry_1110 = list_1109.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1110, item_1108,
            );
        }
        list_1109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("AvailabilityZone");
    if let Some(var_1112) = &input.availability_zone {
        scope_1111.string(var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1114) = &input.availability_zone_id {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1116) = &input.ipv6_cidr_block {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("OutpostArn");
    if let Some(var_1118) = &input.outpost_arn {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("VpcId");
    if let Some(var_1120) = &input.vpc_id {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("DryRun");
    if let Some(var_1122) = &input.dry_run {
        scope_1121.boolean(*var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("CidrBlock");
    if let Some(var_1124) = &input.cidr_block {
        scope_1123.string(var_1124);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("TagSpecification");
    if let Some(var_1126) = &input.tag_specifications {
        let mut list_1128 = scope_1125.start_list(true, Some("item"));
        for item_1127 in var_1126 {
            #[allow(unused_mut)]
            let mut entry_1129 = list_1128.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1129, item_1127,
            );
        }
        list_1128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("SubnetId");
    if let Some(var_1131) = &input.subnet_id {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Cidr");
    if let Some(var_1133) = &input.cidr {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("ReservationType");
    if let Some(var_1135) = &input.reservation_type {
        scope_1134.string(var_1135.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("Description");
    if let Some(var_1137) = &input.description {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("DryRun");
    if let Some(var_1139) = &input.dry_run {
        scope_1138.boolean(*var_1139);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("DryRun");
    if let Some(var_1141) = &input.dry_run {
        scope_1140.boolean(*var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("ResourceId");
    if let Some(var_1143) = &input.resources {
        let mut list_1145 = scope_1142.start_list(true, None);
        for item_1144 in var_1143 {
            #[allow(unused_mut)]
            let mut entry_1146 = list_1145.entry();
            entry_1146.string(item_1144);
        }
        list_1145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Tag");
    if let Some(var_1148) = &input.tags {
        let mut list_1150 = scope_1147.start_list(true, Some("item"));
        for item_1149 in var_1148 {
            #[allow(unused_mut)]
            let mut entry_1151 = list_1150.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1151, item_1149);
        }
        list_1150.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("Description");
    if let Some(var_1153) = &input.description {
        scope_1152.string(var_1153);
    }
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("TagSpecification");
    if let Some(var_1155) = &input.tag_specifications {
        let mut list_1157 = scope_1154.start_list(true, Some("item"));
        for item_1156 in var_1155 {
            #[allow(unused_mut)]
            let mut entry_1158 = list_1157.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1158, item_1156,
            );
        }
        list_1157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("DryRun");
    if let Some(var_1160) = &input.dry_run {
        scope_1159.boolean(*var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("ClientToken");
    if let Some(var_1162) = &input.client_token {
        scope_1161.string(var_1162);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1164) = &input.traffic_mirror_filter_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("TrafficDirection");
    if let Some(var_1166) = &input.traffic_direction {
        scope_1165.string(var_1166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("RuleNumber");
    if let Some(var_1168) = &input.rule_number {
        scope_1167.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("RuleAction");
    if let Some(var_1170) = &input.rule_action {
        scope_1169.string(var_1170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("DestinationPortRange");
    if let Some(var_1172) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1171, var_1172,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("SourcePortRange");
    if let Some(var_1174) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1173, var_1174,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("Protocol");
    if let Some(var_1176) = &input.protocol {
        scope_1175.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1176).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1178) = &input.destination_cidr_block {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("SourceCidrBlock");
    if let Some(var_1180) = &input.source_cidr_block {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("Description");
    if let Some(var_1182) = &input.description {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("DryRun");
    if let Some(var_1184) = &input.dry_run {
        scope_1183.boolean(*var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("ClientToken");
    if let Some(var_1186) = &input.client_token {
        scope_1185.string(var_1186);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1188) = &input.network_interface_id {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1190) = &input.traffic_mirror_target_id {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1192) = &input.traffic_mirror_filter_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("PacketLength");
    if let Some(var_1194) = &input.packet_length {
        scope_1193.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1194).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("SessionNumber");
    if let Some(var_1196) = &input.session_number {
        scope_1195.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1196).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("VirtualNetworkId");
    if let Some(var_1198) = &input.virtual_network_id {
        scope_1197.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("Description");
    if let Some(var_1200) = &input.description {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("TagSpecification");
    if let Some(var_1202) = &input.tag_specifications {
        let mut list_1204 = scope_1201.start_list(true, Some("item"));
        for item_1203 in var_1202 {
            #[allow(unused_mut)]
            let mut entry_1205 = list_1204.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1205, item_1203,
            );
        }
        list_1204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("DryRun");
    if let Some(var_1207) = &input.dry_run {
        scope_1206.boolean(*var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("ClientToken");
    if let Some(var_1209) = &input.client_token {
        scope_1208.string(var_1209);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1211) = &input.network_interface_id {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1213) = &input.network_load_balancer_arn {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Description");
    if let Some(var_1215) = &input.description {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("TagSpecification");
    if let Some(var_1217) = &input.tag_specifications {
        let mut list_1219 = scope_1216.start_list(true, Some("item"));
        for item_1218 in var_1217 {
            #[allow(unused_mut)]
            let mut entry_1220 = list_1219.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1220, item_1218,
            );
        }
        list_1219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DryRun");
    if let Some(var_1222) = &input.dry_run {
        scope_1221.boolean(*var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("ClientToken");
    if let Some(var_1224) = &input.client_token {
        scope_1223.string(var_1224);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("Description");
    if let Some(var_1226) = &input.description {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("Options");
    if let Some(var_1228) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1227, var_1228,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("TagSpecification");
    if let Some(var_1230) = &input.tag_specifications {
        let mut list_1232 = scope_1229.start_list(true, Some("item"));
        for item_1231 in var_1230 {
            #[allow(unused_mut)]
            let mut entry_1233 = list_1232.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1233, item_1231,
            );
        }
        list_1232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("DryRun");
    if let Some(var_1235) = &input.dry_run {
        scope_1234.boolean(*var_1235);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1237) = &input.transport_transit_gateway_attachment_id {
        scope_1236.string(var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("Options");
    if let Some(var_1239) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1238, var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("TagSpecification");
    if let Some(var_1241) = &input.tag_specifications {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1244, item_1242,
            );
        }
        list_1243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("DryRun");
    if let Some(var_1246) = &input.dry_run {
        scope_1245.boolean(*var_1246);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1248) = &input.transit_gateway_attachment_id {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1250) = &input.transit_gateway_address {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("PeerAddress");
    if let Some(var_1252) = &input.peer_address {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("BgpOptions");
    if let Some(var_1254) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1253, var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1256) = &input.inside_cidr_blocks {
        let mut list_1258 = scope_1255.start_list(true, Some("item"));
        for item_1257 in var_1256 {
            #[allow(unused_mut)]
            let mut entry_1259 = list_1258.entry();
            entry_1259.string(item_1257);
        }
        list_1258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("TagSpecification");
    if let Some(var_1261) = &input.tag_specifications {
        let mut list_1263 = scope_1260.start_list(true, Some("item"));
        for item_1262 in var_1261 {
            #[allow(unused_mut)]
            let mut entry_1264 = list_1263.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1264, item_1262,
            );
        }
        list_1263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("DryRun");
    if let Some(var_1266) = &input.dry_run {
        scope_1265.boolean(*var_1266);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("TransitGatewayId");
    if let Some(var_1268) = &input.transit_gateway_id {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("Options");
    if let Some(var_1270) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1269, var_1270);
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("TagSpecification");
    if let Some(var_1272) = &input.tag_specifications {
        let mut list_1274 = scope_1271.start_list(true, Some("item"));
        for item_1273 in var_1272 {
            #[allow(unused_mut)]
            let mut entry_1275 = list_1274.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1275, item_1273,
            );
        }
        list_1274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("DryRun");
    if let Some(var_1277) = &input.dry_run {
        scope_1276.boolean(*var_1277);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("TransitGatewayId");
    if let Some(var_1279) = &input.transit_gateway_id {
        scope_1278.string(var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1281) = &input.peer_transit_gateway_id {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("PeerAccountId");
    if let Some(var_1283) = &input.peer_account_id {
        scope_1282.string(var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("PeerRegion");
    if let Some(var_1285) = &input.peer_region {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("TagSpecification");
    if let Some(var_1287) = &input.tag_specifications {
        let mut list_1289 = scope_1286.start_list(true, Some("item"));
        for item_1288 in var_1287 {
            #[allow(unused_mut)]
            let mut entry_1290 = list_1289.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1290, item_1288,
            );
        }
        list_1289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("DryRun");
    if let Some(var_1292) = &input.dry_run {
        scope_1291.boolean(*var_1292);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1294) = &input.transit_gateway_route_table_id {
        scope_1293.string(var_1294);
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("PrefixListId");
    if let Some(var_1296) = &input.prefix_list_id {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1298) = &input.transit_gateway_attachment_id {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("Blackhole");
    if let Some(var_1300) = &input.blackhole {
        scope_1299.boolean(*var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("DryRun");
    if let Some(var_1302) = &input.dry_run {
        scope_1301.boolean(*var_1302);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1304) = &input.destination_cidr_block {
        scope_1303.string(var_1304);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1306) = &input.transit_gateway_route_table_id {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1308) = &input.transit_gateway_attachment_id {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("Blackhole");
    if let Some(var_1310) = &input.blackhole {
        scope_1309.boolean(*var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("DryRun");
    if let Some(var_1312) = &input.dry_run {
        scope_1311.boolean(*var_1312);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("TransitGatewayId");
    if let Some(var_1314) = &input.transit_gateway_id {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("TagSpecifications");
    if let Some(var_1316) = &input.tag_specifications {
        let mut list_1318 = scope_1315.start_list(true, Some("item"));
        for item_1317 in var_1316 {
            #[allow(unused_mut)]
            let mut entry_1319 = list_1318.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1319, item_1317,
            );
        }
        list_1318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("DryRun");
    if let Some(var_1321) = &input.dry_run {
        scope_1320.boolean(*var_1321);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("TransitGatewayId");
    if let Some(var_1323) = &input.transit_gateway_id {
        scope_1322.string(var_1323);
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("VpcId");
    if let Some(var_1325) = &input.vpc_id {
        scope_1324.string(var_1325);
    }
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("SubnetIds");
    if let Some(var_1327) = &input.subnet_ids {
        let mut list_1329 = scope_1326.start_list(true, Some("item"));
        for item_1328 in var_1327 {
            #[allow(unused_mut)]
            let mut entry_1330 = list_1329.entry();
            entry_1330.string(item_1328);
        }
        list_1329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("Options");
    if let Some(var_1332) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1331, var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("TagSpecifications");
    if let Some(var_1334) = &input.tag_specifications {
        let mut list_1336 = scope_1333.start_list(true, Some("item"));
        for item_1335 in var_1334 {
            #[allow(unused_mut)]
            let mut entry_1337 = list_1336.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1337, item_1335,
            );
        }
        list_1336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("DryRun");
    if let Some(var_1339) = &input.dry_run {
        scope_1338.boolean(*var_1339);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("AvailabilityZone");
    if let Some(var_1341) = &input.availability_zone {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("Encrypted");
    if let Some(var_1343) = &input.encrypted {
        scope_1342.boolean(*var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Iops");
    if let Some(var_1345) = &input.iops {
        scope_1344.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1345).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("KmsKeyId");
    if let Some(var_1347) = &input.kms_key_id {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("OutpostArn");
    if let Some(var_1349) = &input.outpost_arn {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Size");
    if let Some(var_1351) = &input.size {
        scope_1350.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("SnapshotId");
    if let Some(var_1353) = &input.snapshot_id {
        scope_1352.string(var_1353);
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("VolumeType");
    if let Some(var_1355) = &input.volume_type {
        scope_1354.string(var_1355.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("DryRun");
    if let Some(var_1357) = &input.dry_run {
        scope_1356.boolean(*var_1357);
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("TagSpecification");
    if let Some(var_1359) = &input.tag_specifications {
        let mut list_1361 = scope_1358.start_list(true, Some("item"));
        for item_1360 in var_1359 {
            #[allow(unused_mut)]
            let mut entry_1362 = list_1361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1362, item_1360,
            );
        }
        list_1361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1364) = &input.multi_attach_enabled {
        scope_1363.boolean(*var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("Throughput");
    if let Some(var_1366) = &input.throughput {
        scope_1365.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("ClientToken");
    if let Some(var_1368) = &input.client_token {
        scope_1367.string(var_1368);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("CidrBlock");
    if let Some(var_1370) = &input.cidr_block {
        scope_1369.string(var_1370);
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1372) = &input.amazon_provided_ipv6_cidr_block {
        scope_1371.boolean(*var_1372);
    }
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("Ipv6Pool");
    if let Some(var_1374) = &input.ipv6_pool {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1376) = &input.ipv6_cidr_block {
        scope_1375.string(var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("DryRun");
    if let Some(var_1378) = &input.dry_run {
        scope_1377.boolean(*var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("InstanceTenancy");
    if let Some(var_1380) = &input.instance_tenancy {
        scope_1379.string(var_1380.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1382) = &input.ipv6_cidr_block_network_border_group {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("TagSpecification");
    if let Some(var_1384) = &input.tag_specifications {
        let mut list_1386 = scope_1383.start_list(true, Some("item"));
        for item_1385 in var_1384 {
            #[allow(unused_mut)]
            let mut entry_1387 = list_1386.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1387, item_1385,
            );
        }
        list_1386.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("DryRun");
    if let Some(var_1389) = &input.dry_run {
        scope_1388.boolean(*var_1389);
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("VpcEndpointType");
    if let Some(var_1391) = &input.vpc_endpoint_type {
        scope_1390.string(var_1391.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("VpcId");
    if let Some(var_1393) = &input.vpc_id {
        scope_1392.string(var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("ServiceName");
    if let Some(var_1395) = &input.service_name {
        scope_1394.string(var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("PolicyDocument");
    if let Some(var_1397) = &input.policy_document {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("RouteTableId");
    if let Some(var_1399) = &input.route_table_ids {
        let mut list_1401 = scope_1398.start_list(true, Some("item"));
        for item_1400 in var_1399 {
            #[allow(unused_mut)]
            let mut entry_1402 = list_1401.entry();
            entry_1402.string(item_1400);
        }
        list_1401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("SubnetId");
    if let Some(var_1404) = &input.subnet_ids {
        let mut list_1406 = scope_1403.start_list(true, Some("item"));
        for item_1405 in var_1404 {
            #[allow(unused_mut)]
            let mut entry_1407 = list_1406.entry();
            entry_1407.string(item_1405);
        }
        list_1406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("SecurityGroupId");
    if let Some(var_1409) = &input.security_group_ids {
        let mut list_1411 = scope_1408.start_list(true, Some("item"));
        for item_1410 in var_1409 {
            #[allow(unused_mut)]
            let mut entry_1412 = list_1411.entry();
            entry_1412.string(item_1410);
        }
        list_1411.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("ClientToken");
    if let Some(var_1414) = &input.client_token {
        scope_1413.string(var_1414);
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1416) = &input.private_dns_enabled {
        scope_1415.boolean(*var_1416);
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("TagSpecification");
    if let Some(var_1418) = &input.tag_specifications {
        let mut list_1420 = scope_1417.start_list(true, Some("item"));
        for item_1419 in var_1418 {
            #[allow(unused_mut)]
            let mut entry_1421 = list_1420.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1421, item_1419,
            );
        }
        list_1420.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("DryRun");
    if let Some(var_1423) = &input.dry_run {
        scope_1422.boolean(*var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("ServiceId");
    if let Some(var_1425) = &input.service_id {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("VpcEndpointId");
    if let Some(var_1427) = &input.vpc_endpoint_id {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1429) = &input.connection_notification_arn {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("ConnectionEvents");
    if let Some(var_1431) = &input.connection_events {
        let mut list_1433 = scope_1430.start_list(true, Some("item"));
        for item_1432 in var_1431 {
            #[allow(unused_mut)]
            let mut entry_1434 = list_1433.entry();
            entry_1434.string(item_1432);
        }
        list_1433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("ClientToken");
    if let Some(var_1436) = &input.client_token {
        scope_1435.string(var_1436);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("DryRun");
    if let Some(var_1438) = &input.dry_run {
        scope_1437.boolean(*var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("AcceptanceRequired");
    if let Some(var_1440) = &input.acceptance_required {
        scope_1439.boolean(*var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("PrivateDnsName");
    if let Some(var_1442) = &input.private_dns_name {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1444) = &input.network_load_balancer_arns {
        let mut list_1446 = scope_1443.start_list(true, Some("item"));
        for item_1445 in var_1444 {
            #[allow(unused_mut)]
            let mut entry_1447 = list_1446.entry();
            entry_1447.string(item_1445);
        }
        list_1446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1449) = &input.gateway_load_balancer_arns {
        let mut list_1451 = scope_1448.start_list(true, Some("item"));
        for item_1450 in var_1449 {
            #[allow(unused_mut)]
            let mut entry_1452 = list_1451.entry();
            entry_1452.string(item_1450);
        }
        list_1451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("ClientToken");
    if let Some(var_1454) = &input.client_token {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("TagSpecification");
    if let Some(var_1456) = &input.tag_specifications {
        let mut list_1458 = scope_1455.start_list(true, Some("item"));
        for item_1457 in var_1456 {
            #[allow(unused_mut)]
            let mut entry_1459 = list_1458.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1459, item_1457,
            );
        }
        list_1458.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("DryRun");
    if let Some(var_1461) = &input.dry_run {
        scope_1460.boolean(*var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("PeerOwnerId");
    if let Some(var_1463) = &input.peer_owner_id {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("PeerVpcId");
    if let Some(var_1465) = &input.peer_vpc_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("VpcId");
    if let Some(var_1467) = &input.vpc_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("PeerRegion");
    if let Some(var_1469) = &input.peer_region {
        scope_1468.string(var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("TagSpecification");
    if let Some(var_1471) = &input.tag_specifications {
        let mut list_1473 = scope_1470.start_list(true, Some("item"));
        for item_1472 in var_1471 {
            #[allow(unused_mut)]
            let mut entry_1474 = list_1473.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1474, item_1472,
            );
        }
        list_1473.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("CustomerGatewayId");
    if let Some(var_1476) = &input.customer_gateway_id {
        scope_1475.string(var_1476);
    }
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("Type");
    if let Some(var_1478) = &input.r#type {
        scope_1477.string(var_1478);
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("VpnGatewayId");
    if let Some(var_1480) = &input.vpn_gateway_id {
        scope_1479.string(var_1480);
    }
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("TransitGatewayId");
    if let Some(var_1482) = &input.transit_gateway_id {
        scope_1481.string(var_1482);
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("DryRun");
    if let Some(var_1484) = &input.dry_run {
        scope_1483.boolean(*var_1484);
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("Options");
    if let Some(var_1486) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1485, var_1486,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("TagSpecification");
    if let Some(var_1488) = &input.tag_specifications {
        let mut list_1490 = scope_1487.start_list(true, Some("item"));
        for item_1489 in var_1488 {
            #[allow(unused_mut)]
            let mut entry_1491 = list_1490.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1491, item_1489,
            );
        }
        list_1490.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1493) = &input.destination_cidr_block {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("VpnConnectionId");
    if let Some(var_1495) = &input.vpn_connection_id {
        scope_1494.string(var_1495);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("AvailabilityZone");
    if let Some(var_1497) = &input.availability_zone {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("Type");
    if let Some(var_1499) = &input.r#type {
        scope_1498.string(var_1499.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("TagSpecification");
    if let Some(var_1501) = &input.tag_specifications {
        let mut list_1503 = scope_1500.start_list(true, Some("item"));
        for item_1502 in var_1501 {
            #[allow(unused_mut)]
            let mut entry_1504 = list_1503.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1504, item_1502,
            );
        }
        list_1503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("AmazonSideAsn");
    if let Some(var_1506) = &input.amazon_side_asn {
        scope_1505.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("DryRun");
    if let Some(var_1508) = &input.dry_run {
        scope_1507.boolean(*var_1508);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("CarrierGatewayId");
    if let Some(var_1510) = &input.carrier_gateway_id {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("DryRun");
    if let Some(var_1512) = &input.dry_run {
        scope_1511.boolean(*var_1512);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1514) = &input.client_vpn_endpoint_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("DryRun");
    if let Some(var_1516) = &input.dry_run {
        scope_1515.boolean(*var_1516);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1518) = &input.client_vpn_endpoint_id {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1520) = &input.target_vpc_subnet_id {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1522) = &input.destination_cidr_block {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("DryRun");
    if let Some(var_1524) = &input.dry_run {
        scope_1523.boolean(*var_1524);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("CustomerGatewayId");
    if let Some(var_1526) = &input.customer_gateway_id {
        scope_1525.string(var_1526);
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("DryRun");
    if let Some(var_1528) = &input.dry_run {
        scope_1527.boolean(*var_1528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("DhcpOptionsId");
    if let Some(var_1530) = &input.dhcp_options_id {
        scope_1529.string(var_1530);
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("DryRun");
    if let Some(var_1532) = &input.dry_run {
        scope_1531.boolean(*var_1532);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("DryRun");
    if let Some(var_1534) = &input.dry_run {
        scope_1533.boolean(*var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1536) = &input.egress_only_internet_gateway_id {
        scope_1535.string(var_1536);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("DryRun");
    if let Some(var_1538) = &input.dry_run {
        scope_1537.boolean(*var_1538);
    }
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("FleetId");
    if let Some(var_1540) = &input.fleet_ids {
        let mut list_1542 = scope_1539.start_list(true, None);
        for item_1541 in var_1540 {
            #[allow(unused_mut)]
            let mut entry_1543 = list_1542.entry();
            entry_1543.string(item_1541);
        }
        list_1542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("TerminateInstances");
    if let Some(var_1545) = &input.terminate_instances {
        scope_1544.boolean(*var_1545);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("DryRun");
    if let Some(var_1547) = &input.dry_run {
        scope_1546.boolean(*var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("FlowLogId");
    if let Some(var_1549) = &input.flow_log_ids {
        let mut list_1551 = scope_1548.start_list(true, Some("item"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            entry_1552.string(item_1550);
        }
        list_1551.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("DryRun");
    if let Some(var_1554) = &input.dry_run {
        scope_1553.boolean(*var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("FpgaImageId");
    if let Some(var_1556) = &input.fpga_image_id {
        scope_1555.string(var_1556);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("DryRun");
    if let Some(var_1558) = &input.dry_run {
        scope_1557.boolean(*var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("ForceDelete");
    if let Some(var_1560) = &input.force_delete {
        scope_1559.boolean(*var_1560);
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1562) = &input.instance_event_window_id {
        scope_1561.string(var_1562);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("DryRun");
    if let Some(var_1564) = &input.dry_run {
        scope_1563.boolean(*var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("InternetGatewayId");
    if let Some(var_1566) = &input.internet_gateway_id {
        scope_1565.string(var_1566);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("KeyName");
    if let Some(var_1568) = &input.key_name {
        scope_1567.string(var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("KeyPairId");
    if let Some(var_1570) = &input.key_pair_id {
        scope_1569.string(var_1570);
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("DryRun");
    if let Some(var_1572) = &input.dry_run {
        scope_1571.boolean(*var_1572);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("DryRun");
    if let Some(var_1574) = &input.dry_run {
        scope_1573.boolean(*var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("LaunchTemplateId");
    if let Some(var_1576) = &input.launch_template_id {
        scope_1575.string(var_1576);
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("LaunchTemplateName");
    if let Some(var_1578) = &input.launch_template_name {
        scope_1577.string(var_1578);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("DryRun");
    if let Some(var_1580) = &input.dry_run {
        scope_1579.boolean(*var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("LaunchTemplateId");
    if let Some(var_1582) = &input.launch_template_id {
        scope_1581.string(var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("LaunchTemplateName");
    if let Some(var_1584) = &input.launch_template_name {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1586) = &input.versions {
        let mut list_1588 = scope_1585.start_list(true, Some("item"));
        for item_1587 in var_1586 {
            #[allow(unused_mut)]
            let mut entry_1589 = list_1588.entry();
            entry_1589.string(item_1587);
        }
        list_1588.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1590 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1591) = &input.destination_cidr_block {
        scope_1590.string(var_1591);
    }
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1593) = &input.local_gateway_route_table_id {
        scope_1592.string(var_1593);
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("DryRun");
    if let Some(var_1595) = &input.dry_run {
        scope_1594.boolean(*var_1595);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1597) = &input.local_gateway_route_table_vpc_association_id {
        scope_1596.string(var_1597);
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("DryRun");
    if let Some(var_1599) = &input.dry_run {
        scope_1598.boolean(*var_1599);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("DryRun");
    if let Some(var_1601) = &input.dry_run {
        scope_1600.boolean(*var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("PrefixListId");
    if let Some(var_1603) = &input.prefix_list_id {
        scope_1602.string(var_1603);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("DryRun");
    if let Some(var_1605) = &input.dry_run {
        scope_1604.boolean(*var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("NatGatewayId");
    if let Some(var_1607) = &input.nat_gateway_id {
        scope_1606.string(var_1607);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("DryRun");
    if let Some(var_1609) = &input.dry_run {
        scope_1608.boolean(*var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("NetworkAclId");
    if let Some(var_1611) = &input.network_acl_id {
        scope_1610.string(var_1611);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("DryRun");
    if let Some(var_1613) = &input.dry_run {
        scope_1612.boolean(*var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("Egress");
    if let Some(var_1615) = &input.egress {
        scope_1614.boolean(*var_1615);
    }
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("NetworkAclId");
    if let Some(var_1617) = &input.network_acl_id {
        scope_1616.string(var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("RuleNumber");
    if let Some(var_1619) = &input.rule_number {
        scope_1618.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1619).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("DryRun");
    if let Some(var_1621) = &input.dry_run {
        scope_1620.boolean(*var_1621);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1623) = &input.network_insights_analysis_id {
        scope_1622.string(var_1623);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("DryRun");
    if let Some(var_1625) = &input.dry_run {
        scope_1624.boolean(*var_1625);
    }
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1627) = &input.network_insights_path_id {
        scope_1626.string(var_1627);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("DryRun");
    if let Some(var_1629) = &input.dry_run {
        scope_1628.boolean(*var_1629);
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1631) = &input.network_interface_id {
        scope_1630.string(var_1631);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1633) = &input.network_interface_permission_id {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("Force");
    if let Some(var_1635) = &input.force {
        scope_1634.boolean(*var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("DryRun");
    if let Some(var_1637) = &input.dry_run {
        scope_1636.boolean(*var_1637);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("DryRun");
    if let Some(var_1639) = &input.dry_run {
        scope_1638.boolean(*var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("GroupName");
    if let Some(var_1641) = &input.group_name {
        scope_1640.string(var_1641);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DryRun");
    if let Some(var_1643) = &input.dry_run {
        scope_1642.boolean(*var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("ReservedInstancesId");
    if let Some(var_1645) = &input.reserved_instances_ids {
        let mut list_1647 = scope_1644.start_list(true, Some("item"));
        for item_1646 in var_1645 {
            #[allow(unused_mut)]
            let mut entry_1648 = list_1647.entry();
            entry_1648.string(item_1646);
        }
        list_1647.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1650) = &input.destination_cidr_block {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1652) = &input.destination_ipv6_cidr_block {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1654) = &input.destination_prefix_list_id {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DryRun");
    if let Some(var_1656) = &input.dry_run {
        scope_1655.boolean(*var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("RouteTableId");
    if let Some(var_1658) = &input.route_table_id {
        scope_1657.string(var_1658);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("DryRun");
    if let Some(var_1660) = &input.dry_run {
        scope_1659.boolean(*var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("RouteTableId");
    if let Some(var_1662) = &input.route_table_id {
        scope_1661.string(var_1662);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("GroupId");
    if let Some(var_1664) = &input.group_id {
        scope_1663.string(var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("GroupName");
    if let Some(var_1666) = &input.group_name {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("DryRun");
    if let Some(var_1668) = &input.dry_run {
        scope_1667.boolean(*var_1668);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("SnapshotId");
    if let Some(var_1670) = &input.snapshot_id {
        scope_1669.string(var_1670);
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DryRun");
    if let Some(var_1672) = &input.dry_run {
        scope_1671.boolean(*var_1672);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("DryRun");
    if let Some(var_1674) = &input.dry_run {
        scope_1673.boolean(*var_1674);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("SubnetId");
    if let Some(var_1676) = &input.subnet_id {
        scope_1675.string(var_1676);
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("DryRun");
    if let Some(var_1678) = &input.dry_run {
        scope_1677.boolean(*var_1678);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1680) = &input.subnet_cidr_reservation_id {
        scope_1679.string(var_1680);
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("DryRun");
    if let Some(var_1682) = &input.dry_run {
        scope_1681.boolean(*var_1682);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("DryRun");
    if let Some(var_1684) = &input.dry_run {
        scope_1683.boolean(*var_1684);
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("ResourceId");
    if let Some(var_1686) = &input.resources {
        let mut list_1688 = scope_1685.start_list(true, None);
        for item_1687 in var_1686 {
            #[allow(unused_mut)]
            let mut entry_1689 = list_1688.entry();
            entry_1689.string(item_1687);
        }
        list_1688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("Tag");
    if let Some(var_1691) = &input.tags {
        let mut list_1693 = scope_1690.start_list(true, Some("item"));
        for item_1692 in var_1691 {
            #[allow(unused_mut)]
            let mut entry_1694 = list_1693.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1694, item_1692);
        }
        list_1693.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1696) = &input.traffic_mirror_filter_id {
        scope_1695.string(var_1696);
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("DryRun");
    if let Some(var_1698) = &input.dry_run {
        scope_1697.boolean(*var_1698);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1700) = &input.traffic_mirror_filter_rule_id {
        scope_1699.string(var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DryRun");
    if let Some(var_1702) = &input.dry_run {
        scope_1701.boolean(*var_1702);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1704) = &input.traffic_mirror_session_id {
        scope_1703.string(var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1708) = &input.traffic_mirror_target_id {
        scope_1707.string(var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("DryRun");
    if let Some(var_1710) = &input.dry_run {
        scope_1709.boolean(*var_1710);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("TransitGatewayId");
    if let Some(var_1712) = &input.transit_gateway_id {
        scope_1711.string(var_1712);
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("DryRun");
    if let Some(var_1714) = &input.dry_run {
        scope_1713.boolean(*var_1714);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1716) = &input.transit_gateway_attachment_id {
        scope_1715.string(var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DryRun");
    if let Some(var_1718) = &input.dry_run {
        scope_1717.boolean(*var_1718);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1720) = &input.transit_gateway_connect_peer_id {
        scope_1719.string(var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("DryRun");
    if let Some(var_1722) = &input.dry_run {
        scope_1721.boolean(*var_1722);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1724) = &input.transit_gateway_multicast_domain_id {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DryRun");
    if let Some(var_1726) = &input.dry_run {
        scope_1725.boolean(*var_1726);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1728) = &input.transit_gateway_attachment_id {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("DryRun");
    if let Some(var_1730) = &input.dry_run {
        scope_1729.boolean(*var_1730);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1732) = &input.transit_gateway_route_table_id {
        scope_1731.string(var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("PrefixListId");
    if let Some(var_1734) = &input.prefix_list_id {
        scope_1733.string(var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("DryRun");
    if let Some(var_1736) = &input.dry_run {
        scope_1735.boolean(*var_1736);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1738) = &input.transit_gateway_route_table_id {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1740) = &input.destination_cidr_block {
        scope_1739.string(var_1740);
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("DryRun");
    if let Some(var_1742) = &input.dry_run {
        scope_1741.boolean(*var_1742);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1744) = &input.transit_gateway_route_table_id {
        scope_1743.string(var_1744);
    }
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("DryRun");
    if let Some(var_1746) = &input.dry_run {
        scope_1745.boolean(*var_1746);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1748) = &input.transit_gateway_attachment_id {
        scope_1747.string(var_1748);
    }
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("DryRun");
    if let Some(var_1750) = &input.dry_run {
        scope_1749.boolean(*var_1750);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("VolumeId");
    if let Some(var_1752) = &input.volume_id {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("DryRun");
    if let Some(var_1754) = &input.dry_run {
        scope_1753.boolean(*var_1754);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("VpcId");
    if let Some(var_1756) = &input.vpc_id {
        scope_1755.string(var_1756);
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DryRun");
    if let Some(var_1758) = &input.dry_run {
        scope_1757.boolean(*var_1758);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("DryRun");
    if let Some(var_1760) = &input.dry_run {
        scope_1759.boolean(*var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1762) = &input.connection_notification_ids {
        let mut list_1764 = scope_1761.start_list(true, Some("item"));
        for item_1763 in var_1762 {
            #[allow(unused_mut)]
            let mut entry_1765 = list_1764.entry();
            entry_1765.string(item_1763);
        }
        list_1764.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("DryRun");
    if let Some(var_1767) = &input.dry_run {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("VpcEndpointId");
    if let Some(var_1769) = &input.vpc_endpoint_ids {
        let mut list_1771 = scope_1768.start_list(true, Some("item"));
        for item_1770 in var_1769 {
            #[allow(unused_mut)]
            let mut entry_1772 = list_1771.entry();
            entry_1772.string(item_1770);
        }
        list_1771.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DryRun");
    if let Some(var_1774) = &input.dry_run {
        scope_1773.boolean(*var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("ServiceId");
    if let Some(var_1776) = &input.service_ids {
        let mut list_1778 = scope_1775.start_list(true, Some("item"));
        for item_1777 in var_1776 {
            #[allow(unused_mut)]
            let mut entry_1779 = list_1778.entry();
            entry_1779.string(item_1777);
        }
        list_1778.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("DryRun");
    if let Some(var_1781) = &input.dry_run {
        scope_1780.boolean(*var_1781);
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1783) = &input.vpc_peering_connection_id {
        scope_1782.string(var_1783);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("VpnConnectionId");
    if let Some(var_1785) = &input.vpn_connection_id {
        scope_1784.string(var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("DryRun");
    if let Some(var_1787) = &input.dry_run {
        scope_1786.boolean(*var_1787);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1789) = &input.destination_cidr_block {
        scope_1788.string(var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("VpnConnectionId");
    if let Some(var_1791) = &input.vpn_connection_id {
        scope_1790.string(var_1791);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("VpnGatewayId");
    if let Some(var_1793) = &input.vpn_gateway_id {
        scope_1792.string(var_1793);
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("DryRun");
    if let Some(var_1795) = &input.dry_run {
        scope_1794.boolean(*var_1795);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Cidr");
    if let Some(var_1797) = &input.cidr {
        scope_1796.string(var_1797);
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("DryRun");
    if let Some(var_1799) = &input.dry_run {
        scope_1798.boolean(*var_1799);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("ImageId");
    if let Some(var_1801) = &input.image_id {
        scope_1800.string(var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("DryRun");
    if let Some(var_1805) = &input.dry_run {
        scope_1804.boolean(*var_1805);
    }
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1807) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(
            scope_1806, var_1807,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1809) = &input.transit_gateway_multicast_domain_id {
        scope_1808.string(var_1809);
    }
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("GroupIpAddress");
    if let Some(var_1811) = &input.group_ip_address {
        scope_1810.string(var_1811);
    }
    #[allow(unused_mut)]
    let mut scope_1812 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1813) = &input.network_interface_ids {
        let mut list_1815 = scope_1812.start_list(true, Some("item"));
        for item_1814 in var_1813 {
            #[allow(unused_mut)]
            let mut entry_1816 = list_1815.entry();
            entry_1816.string(item_1814);
        }
        list_1815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DryRun");
    if let Some(var_1818) = &input.dry_run {
        scope_1817.boolean(*var_1818);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1820) = &input.transit_gateway_multicast_domain_id {
        scope_1819.string(var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("GroupIpAddress");
    if let Some(var_1822) = &input.group_ip_address {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1824) = &input.network_interface_ids {
        let mut list_1826 = scope_1823.start_list(true, Some("item"));
        for item_1825 in var_1824 {
            #[allow(unused_mut)]
            let mut entry_1827 = list_1826.entry();
            entry_1827.string(item_1825);
        }
        list_1826.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1828 = writer.prefix("DryRun");
    if let Some(var_1829) = &input.dry_run {
        scope_1828.boolean(*var_1829);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1830 = writer.prefix("AttributeName");
    if let Some(var_1831) = &input.attribute_names {
        let mut list_1833 = scope_1830.start_list(true, Some("attributeName"));
        for item_1832 in var_1831 {
            #[allow(unused_mut)]
            let mut entry_1834 = list_1833.entry();
            entry_1834.string(item_1832.as_str());
        }
        list_1833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("DryRun");
    if let Some(var_1836) = &input.dry_run {
        scope_1835.boolean(*var_1836);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("Filter");
    if let Some(var_1838) = &input.filters {
        let mut list_1840 = scope_1837.start_list(true, Some("Filter"));
        for item_1839 in var_1838 {
            #[allow(unused_mut)]
            let mut entry_1841 = list_1840.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1841, item_1839);
        }
        list_1840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("PublicIp");
    if let Some(var_1843) = &input.public_ips {
        let mut list_1845 = scope_1842.start_list(true, Some("PublicIp"));
        for item_1844 in var_1843 {
            #[allow(unused_mut)]
            let mut entry_1846 = list_1845.entry();
            entry_1846.string(item_1844);
        }
        list_1845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("AllocationId");
    if let Some(var_1848) = &input.allocation_ids {
        let mut list_1850 = scope_1847.start_list(true, Some("AllocationId"));
        for item_1849 in var_1848 {
            #[allow(unused_mut)]
            let mut entry_1851 = list_1850.entry();
            entry_1851.string(item_1849);
        }
        list_1850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("DryRun");
    if let Some(var_1853) = &input.dry_run {
        scope_1852.boolean(*var_1853);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("AllocationId");
    if let Some(var_1855) = &input.allocation_ids {
        let mut list_1857 = scope_1854.start_list(true, Some("item"));
        for item_1856 in var_1855 {
            #[allow(unused_mut)]
            let mut entry_1858 = list_1857.entry();
            entry_1858.string(item_1856);
        }
        list_1857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("Attribute");
    if let Some(var_1860) = &input.attribute {
        scope_1859.string(var_1860.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("NextToken");
    if let Some(var_1862) = &input.next_token {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("MaxResults");
    if let Some(var_1864) = &input.max_results {
        scope_1863.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1864).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("DryRun");
    if let Some(var_1866) = &input.dry_run {
        scope_1865.boolean(*var_1866);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("Filter");
    if let Some(var_1870) = &input.filters {
        let mut list_1872 = scope_1869.start_list(true, Some("Filter"));
        for item_1871 in var_1870 {
            #[allow(unused_mut)]
            let mut entry_1873 = list_1872.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1873, item_1871);
        }
        list_1872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1874 = writer.prefix("ZoneName");
    if let Some(var_1875) = &input.zone_names {
        let mut list_1877 = scope_1874.start_list(true, Some("ZoneName"));
        for item_1876 in var_1875 {
            #[allow(unused_mut)]
            let mut entry_1878 = list_1877.entry();
            entry_1878.string(item_1876);
        }
        list_1877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("ZoneId");
    if let Some(var_1880) = &input.zone_ids {
        let mut list_1882 = scope_1879.start_list(true, Some("ZoneId"));
        for item_1881 in var_1880 {
            #[allow(unused_mut)]
            let mut entry_1883 = list_1882.entry();
            entry_1883.string(item_1881);
        }
        list_1882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1885) = &input.all_availability_zones {
        scope_1884.boolean(*var_1885);
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("DryRun");
    if let Some(var_1887) = &input.dry_run {
        scope_1886.boolean(*var_1887);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("BundleId");
    if let Some(var_1889) = &input.bundle_ids {
        let mut list_1891 = scope_1888.start_list(true, Some("BundleId"));
        for item_1890 in var_1889 {
            #[allow(unused_mut)]
            let mut entry_1892 = list_1891.entry();
            entry_1892.string(item_1890);
        }
        list_1891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("Filter");
    if let Some(var_1894) = &input.filters {
        let mut list_1896 = scope_1893.start_list(true, Some("Filter"));
        for item_1895 in var_1894 {
            #[allow(unused_mut)]
            let mut entry_1897 = list_1896.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1897, item_1895);
        }
        list_1896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("DryRun");
    if let Some(var_1899) = &input.dry_run {
        scope_1898.boolean(*var_1899);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("DryRun");
    if let Some(var_1901) = &input.dry_run {
        scope_1900.boolean(*var_1901);
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("MaxResults");
    if let Some(var_1903) = &input.max_results {
        scope_1902.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1903).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("NextToken");
    if let Some(var_1905) = &input.next_token {
        scope_1904.string(var_1905);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_1907) = &input.capacity_reservation_fleet_ids {
        let mut list_1909 = scope_1906.start_list(true, Some("item"));
        for item_1908 in var_1907 {
            #[allow(unused_mut)]
            let mut entry_1910 = list_1909.entry();
            entry_1910.string(item_1908);
        }
        list_1909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("NextToken");
    if let Some(var_1912) = &input.next_token {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("MaxResults");
    if let Some(var_1914) = &input.max_results {
        scope_1913.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("Filter");
    if let Some(var_1916) = &input.filters {
        let mut list_1918 = scope_1915.start_list(true, Some("Filter"));
        for item_1917 in var_1916 {
            #[allow(unused_mut)]
            let mut entry_1919 = list_1918.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1919, item_1917);
        }
        list_1918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("DryRun");
    if let Some(var_1921) = &input.dry_run {
        scope_1920.boolean(*var_1921);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("CapacityReservationId");
    if let Some(var_1923) = &input.capacity_reservation_ids {
        let mut list_1925 = scope_1922.start_list(true, Some("item"));
        for item_1924 in var_1923 {
            #[allow(unused_mut)]
            let mut entry_1926 = list_1925.entry();
            entry_1926.string(item_1924);
        }
        list_1925.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("NextToken");
    if let Some(var_1928) = &input.next_token {
        scope_1927.string(var_1928);
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("MaxResults");
    if let Some(var_1930) = &input.max_results {
        scope_1929.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("Filter");
    if let Some(var_1932) = &input.filters {
        let mut list_1934 = scope_1931.start_list(true, Some("Filter"));
        for item_1933 in var_1932 {
            #[allow(unused_mut)]
            let mut entry_1935 = list_1934.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1935, item_1933);
        }
        list_1934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("DryRun");
    if let Some(var_1937) = &input.dry_run {
        scope_1936.boolean(*var_1937);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("CarrierGatewayId");
    if let Some(var_1939) = &input.carrier_gateway_ids {
        let mut list_1941 = scope_1938.start_list(true, None);
        for item_1940 in var_1939 {
            #[allow(unused_mut)]
            let mut entry_1942 = list_1941.entry();
            entry_1942.string(item_1940);
        }
        list_1941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("Filter");
    if let Some(var_1944) = &input.filters {
        let mut list_1946 = scope_1943.start_list(true, Some("Filter"));
        for item_1945 in var_1944 {
            #[allow(unused_mut)]
            let mut entry_1947 = list_1946.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1947, item_1945);
        }
        list_1946.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("MaxResults");
    if let Some(var_1949) = &input.max_results {
        scope_1948.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1949).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("NextToken");
    if let Some(var_1951) = &input.next_token {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DryRun");
    if let Some(var_1953) = &input.dry_run {
        scope_1952.boolean(*var_1953);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("Filter");
    if let Some(var_1955) = &input.filters {
        let mut list_1957 = scope_1954.start_list(true, Some("Filter"));
        for item_1956 in var_1955 {
            #[allow(unused_mut)]
            let mut entry_1958 = list_1957.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1958, item_1956);
        }
        list_1957.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1959 = writer.prefix("DryRun");
    if let Some(var_1960) = &input.dry_run {
        scope_1959.boolean(*var_1960);
    }
    #[allow(unused_mut)]
    let mut scope_1961 = writer.prefix("InstanceId");
    if let Some(var_1962) = &input.instance_ids {
        let mut list_1964 = scope_1961.start_list(true, Some("InstanceId"));
        for item_1963 in var_1962 {
            #[allow(unused_mut)]
            let mut entry_1965 = list_1964.entry();
            entry_1965.string(item_1963);
        }
        list_1964.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("MaxResults");
    if let Some(var_1967) = &input.max_results {
        scope_1966.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1967).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("NextToken");
    if let Some(var_1969) = &input.next_token {
        scope_1968.string(var_1969);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1971) = &input.client_vpn_endpoint_id {
        scope_1970.string(var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("DryRun");
    if let Some(var_1973) = &input.dry_run {
        scope_1972.boolean(*var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("NextToken");
    if let Some(var_1975) = &input.next_token {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("Filter");
    if let Some(var_1977) = &input.filters {
        let mut list_1979 = scope_1976.start_list(true, Some("Filter"));
        for item_1978 in var_1977 {
            #[allow(unused_mut)]
            let mut entry_1980 = list_1979.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1980, item_1978);
        }
        list_1979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("MaxResults");
    if let Some(var_1982) = &input.max_results {
        scope_1981.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1982).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1984) = &input.client_vpn_endpoint_id {
        scope_1983.string(var_1984);
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("Filter");
    if let Some(var_1986) = &input.filters {
        let mut list_1988 = scope_1985.start_list(true, Some("Filter"));
        for item_1987 in var_1986 {
            #[allow(unused_mut)]
            let mut entry_1989 = list_1988.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1989, item_1987);
        }
        list_1988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("NextToken");
    if let Some(var_1991) = &input.next_token {
        scope_1990.string(var_1991);
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("MaxResults");
    if let Some(var_1993) = &input.max_results {
        scope_1992.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1993).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("DryRun");
    if let Some(var_1995) = &input.dry_run {
        scope_1994.boolean(*var_1995);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1997) = &input.client_vpn_endpoint_ids {
        let mut list_1999 = scope_1996.start_list(true, Some("item"));
        for item_1998 in var_1997 {
            #[allow(unused_mut)]
            let mut entry_2000 = list_1999.entry();
            entry_2000.string(item_1998);
        }
        list_1999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("MaxResults");
    if let Some(var_2002) = &input.max_results {
        scope_2001.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("NextToken");
    if let Some(var_2004) = &input.next_token {
        scope_2003.string(var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("Filter");
    if let Some(var_2006) = &input.filters {
        let mut list_2008 = scope_2005.start_list(true, Some("Filter"));
        for item_2007 in var_2006 {
            #[allow(unused_mut)]
            let mut entry_2009 = list_2008.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2009, item_2007);
        }
        list_2008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("DryRun");
    if let Some(var_2011) = &input.dry_run {
        scope_2010.boolean(*var_2011);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2013) = &input.client_vpn_endpoint_id {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("Filter");
    if let Some(var_2015) = &input.filters {
        let mut list_2017 = scope_2014.start_list(true, Some("Filter"));
        for item_2016 in var_2015 {
            #[allow(unused_mut)]
            let mut entry_2018 = list_2017.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2018, item_2016);
        }
        list_2017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("MaxResults");
    if let Some(var_2020) = &input.max_results {
        scope_2019.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2020).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("NextToken");
    if let Some(var_2022) = &input.next_token {
        scope_2021.string(var_2022);
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("DryRun");
    if let Some(var_2024) = &input.dry_run {
        scope_2023.boolean(*var_2024);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2026) = &input.client_vpn_endpoint_id {
        scope_2025.string(var_2026);
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("AssociationIds");
    if let Some(var_2028) = &input.association_ids {
        let mut list_2030 = scope_2027.start_list(true, Some("item"));
        for item_2029 in var_2028 {
            #[allow(unused_mut)]
            let mut entry_2031 = list_2030.entry();
            entry_2031.string(item_2029);
        }
        list_2030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("MaxResults");
    if let Some(var_2033) = &input.max_results {
        scope_2032.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2033).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2034 = writer.prefix("NextToken");
    if let Some(var_2035) = &input.next_token {
        scope_2034.string(var_2035);
    }
    #[allow(unused_mut)]
    let mut scope_2036 = writer.prefix("Filter");
    if let Some(var_2037) = &input.filters {
        let mut list_2039 = scope_2036.start_list(true, Some("Filter"));
        for item_2038 in var_2037 {
            #[allow(unused_mut)]
            let mut entry_2040 = list_2039.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2040, item_2038);
        }
        list_2039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("DryRun");
    if let Some(var_2042) = &input.dry_run {
        scope_2041.boolean(*var_2042);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("PoolId");
    if let Some(var_2044) = &input.pool_ids {
        let mut list_2046 = scope_2043.start_list(true, Some("item"));
        for item_2045 in var_2044 {
            #[allow(unused_mut)]
            let mut entry_2047 = list_2046.entry();
            entry_2047.string(item_2045);
        }
        list_2046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2048 = writer.prefix("Filter");
    if let Some(var_2049) = &input.filters {
        let mut list_2051 = scope_2048.start_list(true, Some("Filter"));
        for item_2050 in var_2049 {
            #[allow(unused_mut)]
            let mut entry_2052 = list_2051.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2052, item_2050);
        }
        list_2051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2053 = writer.prefix("MaxResults");
    if let Some(var_2054) = &input.max_results {
        scope_2053.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2054).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("NextToken");
    if let Some(var_2056) = &input.next_token {
        scope_2055.string(var_2056);
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("DryRun");
    if let Some(var_2058) = &input.dry_run {
        scope_2057.boolean(*var_2058);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("ConversionTaskId");
    if let Some(var_2060) = &input.conversion_task_ids {
        let mut list_2062 = scope_2059.start_list(true, Some("item"));
        for item_2061 in var_2060 {
            #[allow(unused_mut)]
            let mut entry_2063 = list_2062.entry();
            entry_2063.string(item_2061);
        }
        list_2062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("DryRun");
    if let Some(var_2065) = &input.dry_run {
        scope_2064.boolean(*var_2065);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("CustomerGatewayId");
    if let Some(var_2067) = &input.customer_gateway_ids {
        let mut list_2069 = scope_2066.start_list(true, Some("CustomerGatewayId"));
        for item_2068 in var_2067 {
            #[allow(unused_mut)]
            let mut entry_2070 = list_2069.entry();
            entry_2070.string(item_2068);
        }
        list_2069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("Filter");
    if let Some(var_2072) = &input.filters {
        let mut list_2074 = scope_2071.start_list(true, Some("Filter"));
        for item_2073 in var_2072 {
            #[allow(unused_mut)]
            let mut entry_2075 = list_2074.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2075, item_2073);
        }
        list_2074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("DryRun");
    if let Some(var_2077) = &input.dry_run {
        scope_2076.boolean(*var_2077);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("DhcpOptionsId");
    if let Some(var_2079) = &input.dhcp_options_ids {
        let mut list_2081 = scope_2078.start_list(true, Some("DhcpOptionsId"));
        for item_2080 in var_2079 {
            #[allow(unused_mut)]
            let mut entry_2082 = list_2081.entry();
            entry_2082.string(item_2080);
        }
        list_2081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("Filter");
    if let Some(var_2084) = &input.filters {
        let mut list_2086 = scope_2083.start_list(true, Some("Filter"));
        for item_2085 in var_2084 {
            #[allow(unused_mut)]
            let mut entry_2087 = list_2086.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2087, item_2085);
        }
        list_2086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2088 = writer.prefix("DryRun");
    if let Some(var_2089) = &input.dry_run {
        scope_2088.boolean(*var_2089);
    }
    #[allow(unused_mut)]
    let mut scope_2090 = writer.prefix("NextToken");
    if let Some(var_2091) = &input.next_token {
        scope_2090.string(var_2091);
    }
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("MaxResults");
    if let Some(var_2093) = &input.max_results {
        scope_2092.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2093).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2094 = writer.prefix("DryRun");
    if let Some(var_2095) = &input.dry_run {
        scope_2094.boolean(*var_2095);
    }
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2097) = &input.egress_only_internet_gateway_ids {
        let mut list_2099 = scope_2096.start_list(true, Some("item"));
        for item_2098 in var_2097 {
            #[allow(unused_mut)]
            let mut entry_2100 = list_2099.entry();
            entry_2100.string(item_2098);
        }
        list_2099.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("MaxResults");
    if let Some(var_2102) = &input.max_results {
        scope_2101.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2102).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("NextToken");
    if let Some(var_2104) = &input.next_token {
        scope_2103.string(var_2104);
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("Filter");
    if let Some(var_2106) = &input.filters {
        let mut list_2108 = scope_2105.start_list(true, Some("Filter"));
        for item_2107 in var_2106 {
            #[allow(unused_mut)]
            let mut entry_2109 = list_2108.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2109, item_2107);
        }
        list_2108.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("ElasticGpuId");
    if let Some(var_2111) = &input.elastic_gpu_ids {
        let mut list_2113 = scope_2110.start_list(true, Some("item"));
        for item_2112 in var_2111 {
            #[allow(unused_mut)]
            let mut entry_2114 = list_2113.entry();
            entry_2114.string(item_2112);
        }
        list_2113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("DryRun");
    if let Some(var_2116) = &input.dry_run {
        scope_2115.boolean(*var_2116);
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("Filter");
    if let Some(var_2118) = &input.filters {
        let mut list_2120 = scope_2117.start_list(true, Some("Filter"));
        for item_2119 in var_2118 {
            #[allow(unused_mut)]
            let mut entry_2121 = list_2120.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2121, item_2119);
        }
        list_2120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("MaxResults");
    if let Some(var_2123) = &input.max_results {
        scope_2122.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("NextToken");
    if let Some(var_2125) = &input.next_token {
        scope_2124.string(var_2125);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("DryRun");
    if let Some(var_2127) = &input.dry_run {
        scope_2126.boolean(*var_2127);
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("Filter");
    if let Some(var_2129) = &input.filters {
        let mut list_2131 = scope_2128.start_list(true, Some("Filter"));
        for item_2130 in var_2129 {
            #[allow(unused_mut)]
            let mut entry_2132 = list_2131.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2132, item_2130);
        }
        list_2131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("ExportImageTaskId");
    if let Some(var_2134) = &input.export_image_task_ids {
        let mut list_2136 = scope_2133.start_list(true, Some("ExportImageTaskId"));
        for item_2135 in var_2134 {
            #[allow(unused_mut)]
            let mut entry_2137 = list_2136.entry();
            entry_2137.string(item_2135);
        }
        list_2136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2138 = writer.prefix("MaxResults");
    if let Some(var_2139) = &input.max_results {
        scope_2138.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("NextToken");
    if let Some(var_2141) = &input.next_token {
        scope_2140.string(var_2141);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("ExportTaskId");
    if let Some(var_2143) = &input.export_task_ids {
        let mut list_2145 = scope_2142.start_list(true, Some("ExportTaskId"));
        for item_2144 in var_2143 {
            #[allow(unused_mut)]
            let mut entry_2146 = list_2145.entry();
            entry_2146.string(item_2144);
        }
        list_2145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("Filter");
    if let Some(var_2148) = &input.filters {
        let mut list_2150 = scope_2147.start_list(true, Some("Filter"));
        for item_2149 in var_2148 {
            #[allow(unused_mut)]
            let mut entry_2151 = list_2150.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2151, item_2149);
        }
        list_2150.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("Filter");
    if let Some(var_2153) = &input.filters {
        let mut list_2155 = scope_2152.start_list(true, Some("Filter"));
        for item_2154 in var_2153 {
            #[allow(unused_mut)]
            let mut entry_2156 = list_2155.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2156, item_2154);
        }
        list_2155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2157 = writer.prefix("MaxResults");
    if let Some(var_2158) = &input.max_results {
        scope_2157.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2158).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2159 = writer.prefix("NextToken");
    if let Some(var_2160) = &input.next_token {
        scope_2159.string(var_2160);
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("DryRun");
    if let Some(var_2162) = &input.dry_run {
        scope_2161.boolean(*var_2162);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("DryRun");
    if let Some(var_2164) = &input.dry_run {
        scope_2163.boolean(*var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("EventType");
    if let Some(var_2166) = &input.event_type {
        scope_2165.string(var_2166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("MaxResults");
    if let Some(var_2168) = &input.max_results {
        scope_2167.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("NextToken");
    if let Some(var_2170) = &input.next_token {
        scope_2169.string(var_2170);
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("FleetId");
    if let Some(var_2172) = &input.fleet_id {
        scope_2171.string(var_2172);
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("StartTime");
    if let Some(var_2174) = &input.start_time {
        scope_2173.instant(var_2174, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("DryRun");
    if let Some(var_2176) = &input.dry_run {
        scope_2175.boolean(*var_2176);
    }
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("MaxResults");
    if let Some(var_2178) = &input.max_results {
        scope_2177.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2178).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("NextToken");
    if let Some(var_2180) = &input.next_token {
        scope_2179.string(var_2180);
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("FleetId");
    if let Some(var_2182) = &input.fleet_id {
        scope_2181.string(var_2182);
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("Filter");
    if let Some(var_2184) = &input.filters {
        let mut list_2186 = scope_2183.start_list(true, Some("Filter"));
        for item_2185 in var_2184 {
            #[allow(unused_mut)]
            let mut entry_2187 = list_2186.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2187, item_2185);
        }
        list_2186.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2188 = writer.prefix("DryRun");
    if let Some(var_2189) = &input.dry_run {
        scope_2188.boolean(*var_2189);
    }
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("MaxResults");
    if let Some(var_2191) = &input.max_results {
        scope_2190.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2191).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("NextToken");
    if let Some(var_2193) = &input.next_token {
        scope_2192.string(var_2193);
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("FleetId");
    if let Some(var_2195) = &input.fleet_ids {
        let mut list_2197 = scope_2194.start_list(true, None);
        for item_2196 in var_2195 {
            #[allow(unused_mut)]
            let mut entry_2198 = list_2197.entry();
            entry_2198.string(item_2196);
        }
        list_2197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2199 = writer.prefix("Filter");
    if let Some(var_2200) = &input.filters {
        let mut list_2202 = scope_2199.start_list(true, Some("Filter"));
        for item_2201 in var_2200 {
            #[allow(unused_mut)]
            let mut entry_2203 = list_2202.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2203, item_2201);
        }
        list_2202.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2204 = writer.prefix("DryRun");
    if let Some(var_2205) = &input.dry_run {
        scope_2204.boolean(*var_2205);
    }
    #[allow(unused_mut)]
    let mut scope_2206 = writer.prefix("Filter");
    if let Some(var_2207) = &input.filter {
        let mut list_2209 = scope_2206.start_list(true, Some("Filter"));
        for item_2208 in var_2207 {
            #[allow(unused_mut)]
            let mut entry_2210 = list_2209.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2210, item_2208);
        }
        list_2209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("FlowLogId");
    if let Some(var_2212) = &input.flow_log_ids {
        let mut list_2214 = scope_2211.start_list(true, Some("item"));
        for item_2213 in var_2212 {
            #[allow(unused_mut)]
            let mut entry_2215 = list_2214.entry();
            entry_2215.string(item_2213);
        }
        list_2214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("MaxResults");
    if let Some(var_2217) = &input.max_results {
        scope_2216.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("NextToken");
    if let Some(var_2219) = &input.next_token {
        scope_2218.string(var_2219);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("DryRun");
    if let Some(var_2221) = &input.dry_run {
        scope_2220.boolean(*var_2221);
    }
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("FpgaImageId");
    if let Some(var_2223) = &input.fpga_image_id {
        scope_2222.string(var_2223);
    }
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("Attribute");
    if let Some(var_2225) = &input.attribute {
        scope_2224.string(var_2225.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("DryRun");
    if let Some(var_2227) = &input.dry_run {
        scope_2226.boolean(*var_2227);
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("FpgaImageId");
    if let Some(var_2229) = &input.fpga_image_ids {
        let mut list_2231 = scope_2228.start_list(true, Some("item"));
        for item_2230 in var_2229 {
            #[allow(unused_mut)]
            let mut entry_2232 = list_2231.entry();
            entry_2232.string(item_2230);
        }
        list_2231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("Owner");
    if let Some(var_2234) = &input.owners {
        let mut list_2236 = scope_2233.start_list(true, Some("Owner"));
        for item_2235 in var_2234 {
            #[allow(unused_mut)]
            let mut entry_2237 = list_2236.entry();
            entry_2237.string(item_2235);
        }
        list_2236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("Filter");
    if let Some(var_2239) = &input.filters {
        let mut list_2241 = scope_2238.start_list(true, Some("Filter"));
        for item_2240 in var_2239 {
            #[allow(unused_mut)]
            let mut entry_2242 = list_2241.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2242, item_2240);
        }
        list_2241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2243 = writer.prefix("NextToken");
    if let Some(var_2244) = &input.next_token {
        scope_2243.string(var_2244);
    }
    #[allow(unused_mut)]
    let mut scope_2245 = writer.prefix("MaxResults");
    if let Some(var_2246) = &input.max_results {
        scope_2245.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2246).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("Filter");
    if let Some(var_2248) = &input.filter {
        let mut list_2250 = scope_2247.start_list(true, Some("Filter"));
        for item_2249 in var_2248 {
            #[allow(unused_mut)]
            let mut entry_2251 = list_2250.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2251, item_2249);
        }
        list_2250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("MaxDuration");
    if let Some(var_2253) = &input.max_duration {
        scope_2252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2253).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("MaxResults");
    if let Some(var_2255) = &input.max_results {
        scope_2254.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2255).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("MinDuration");
    if let Some(var_2257) = &input.min_duration {
        scope_2256.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("NextToken");
    if let Some(var_2259) = &input.next_token {
        scope_2258.string(var_2259);
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("OfferingId");
    if let Some(var_2261) = &input.offering_id {
        scope_2260.string(var_2261);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("Filter");
    if let Some(var_2263) = &input.filter {
        let mut list_2265 = scope_2262.start_list(true, Some("Filter"));
        for item_2264 in var_2263 {
            #[allow(unused_mut)]
            let mut entry_2266 = list_2265.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2266, item_2264);
        }
        list_2265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2267 = writer.prefix("HostReservationIdSet");
    if let Some(var_2268) = &input.host_reservation_id_set {
        let mut list_2270 = scope_2267.start_list(true, Some("item"));
        for item_2269 in var_2268 {
            #[allow(unused_mut)]
            let mut entry_2271 = list_2270.entry();
            entry_2271.string(item_2269);
        }
        list_2270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("MaxResults");
    if let Some(var_2273) = &input.max_results {
        scope_2272.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2273).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("NextToken");
    if let Some(var_2275) = &input.next_token {
        scope_2274.string(var_2275);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("Filter");
    if let Some(var_2277) = &input.filter {
        let mut list_2279 = scope_2276.start_list(true, Some("Filter"));
        for item_2278 in var_2277 {
            #[allow(unused_mut)]
            let mut entry_2280 = list_2279.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2280, item_2278);
        }
        list_2279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2281 = writer.prefix("HostId");
    if let Some(var_2282) = &input.host_ids {
        let mut list_2284 = scope_2281.start_list(true, Some("item"));
        for item_2283 in var_2282 {
            #[allow(unused_mut)]
            let mut entry_2285 = list_2284.entry();
            entry_2285.string(item_2283);
        }
        list_2284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2286 = writer.prefix("MaxResults");
    if let Some(var_2287) = &input.max_results {
        scope_2286.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2287).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2288 = writer.prefix("NextToken");
    if let Some(var_2289) = &input.next_token {
        scope_2288.string(var_2289);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2290 = writer.prefix("AssociationId");
    if let Some(var_2291) = &input.association_ids {
        let mut list_2293 = scope_2290.start_list(true, Some("AssociationId"));
        for item_2292 in var_2291 {
            #[allow(unused_mut)]
            let mut entry_2294 = list_2293.entry();
            entry_2294.string(item_2292);
        }
        list_2293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2295 = writer.prefix("Filter");
    if let Some(var_2296) = &input.filters {
        let mut list_2298 = scope_2295.start_list(true, Some("Filter"));
        for item_2297 in var_2296 {
            #[allow(unused_mut)]
            let mut entry_2299 = list_2298.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2299, item_2297);
        }
        list_2298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("MaxResults");
    if let Some(var_2301) = &input.max_results {
        scope_2300.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2301).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2302 = writer.prefix("NextToken");
    if let Some(var_2303) = &input.next_token {
        scope_2302.string(var_2303);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("PrincipalArn");
    if let Some(var_2305) = &input.principal_arn {
        scope_2304.string(var_2305);
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("Resource");
    if let Some(var_2307) = &input.resource {
        scope_2306.string(var_2307);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("Resource");
    if let Some(var_2309) = &input.resource {
        scope_2308.string(var_2309);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("Attribute");
    if let Some(var_2311) = &input.attribute {
        scope_2310.string(var_2311.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("ImageId");
    if let Some(var_2313) = &input.image_id {
        scope_2312.string(var_2313);
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("DryRun");
    if let Some(var_2315) = &input.dry_run {
        scope_2314.boolean(*var_2315);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("ExecutableBy");
    if let Some(var_2317) = &input.executable_users {
        let mut list_2319 = scope_2316.start_list(true, Some("ExecutableBy"));
        for item_2318 in var_2317 {
            #[allow(unused_mut)]
            let mut entry_2320 = list_2319.entry();
            entry_2320.string(item_2318);
        }
        list_2319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("Filter");
    if let Some(var_2322) = &input.filters {
        let mut list_2324 = scope_2321.start_list(true, Some("Filter"));
        for item_2323 in var_2322 {
            #[allow(unused_mut)]
            let mut entry_2325 = list_2324.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2325, item_2323);
        }
        list_2324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2326 = writer.prefix("ImageId");
    if let Some(var_2327) = &input.image_ids {
        let mut list_2329 = scope_2326.start_list(true, Some("ImageId"));
        for item_2328 in var_2327 {
            #[allow(unused_mut)]
            let mut entry_2330 = list_2329.entry();
            entry_2330.string(item_2328);
        }
        list_2329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("Owner");
    if let Some(var_2332) = &input.owners {
        let mut list_2334 = scope_2331.start_list(true, Some("Owner"));
        for item_2333 in var_2332 {
            #[allow(unused_mut)]
            let mut entry_2335 = list_2334.entry();
            entry_2335.string(item_2333);
        }
        list_2334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2336 = writer.prefix("IncludeDeprecated");
    if let Some(var_2337) = &input.include_deprecated {
        scope_2336.boolean(*var_2337);
    }
    #[allow(unused_mut)]
    let mut scope_2338 = writer.prefix("DryRun");
    if let Some(var_2339) = &input.dry_run {
        scope_2338.boolean(*var_2339);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("DryRun");
    if let Some(var_2341) = &input.dry_run {
        scope_2340.boolean(*var_2341);
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("Filters");
    if let Some(var_2343) = &input.filters {
        let mut list_2345 = scope_2342.start_list(true, Some("Filter"));
        for item_2344 in var_2343 {
            #[allow(unused_mut)]
            let mut entry_2346 = list_2345.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2346, item_2344);
        }
        list_2345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("ImportTaskId");
    if let Some(var_2348) = &input.import_task_ids {
        let mut list_2350 = scope_2347.start_list(true, Some("ImportTaskId"));
        for item_2349 in var_2348 {
            #[allow(unused_mut)]
            let mut entry_2351 = list_2350.entry();
            entry_2351.string(item_2349);
        }
        list_2350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2352 = writer.prefix("MaxResults");
    if let Some(var_2353) = &input.max_results {
        scope_2352.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("NextToken");
    if let Some(var_2355) = &input.next_token {
        scope_2354.string(var_2355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("DryRun");
    if let Some(var_2357) = &input.dry_run {
        scope_2356.boolean(*var_2357);
    }
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("Filters");
    if let Some(var_2359) = &input.filters {
        let mut list_2361 = scope_2358.start_list(true, Some("Filter"));
        for item_2360 in var_2359 {
            #[allow(unused_mut)]
            let mut entry_2362 = list_2361.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2362, item_2360);
        }
        list_2361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("ImportTaskId");
    if let Some(var_2364) = &input.import_task_ids {
        let mut list_2366 = scope_2363.start_list(true, Some("ImportTaskId"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]
            let mut entry_2367 = list_2366.entry();
            entry_2367.string(item_2365);
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("MaxResults");
    if let Some(var_2369) = &input.max_results {
        scope_2368.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("NextToken");
    if let Some(var_2371) = &input.next_token {
        scope_2370.string(var_2371);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("Attribute");
    if let Some(var_2373) = &input.attribute {
        scope_2372.string(var_2373.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("DryRun");
    if let Some(var_2375) = &input.dry_run {
        scope_2374.boolean(*var_2375);
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("InstanceId");
    if let Some(var_2377) = &input.instance_id {
        scope_2376.string(var_2377);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("DryRun");
    if let Some(var_2379) = &input.dry_run {
        scope_2378.boolean(*var_2379);
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("Filter");
    if let Some(var_2381) = &input.filters {
        let mut list_2383 = scope_2380.start_list(true, Some("Filter"));
        for item_2382 in var_2381 {
            #[allow(unused_mut)]
            let mut entry_2384 = list_2383.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2384, item_2382);
        }
        list_2383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2385 = writer.prefix("InstanceId");
    if let Some(var_2386) = &input.instance_ids {
        let mut list_2388 = scope_2385.start_list(true, Some("InstanceId"));
        for item_2387 in var_2386 {
            #[allow(unused_mut)]
            let mut entry_2389 = list_2388.entry();
            entry_2389.string(item_2387);
        }
        list_2388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("MaxResults");
    if let Some(var_2391) = &input.max_results {
        scope_2390.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2391).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("NextToken");
    if let Some(var_2393) = &input.next_token {
        scope_2392.string(var_2393);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("DryRun");
    if let Some(var_2395) = &input.dry_run {
        scope_2394.boolean(*var_2395);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("DryRun");
    if let Some(var_2397) = &input.dry_run {
        scope_2396.boolean(*var_2397);
    }
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2399) = &input.instance_event_window_ids {
        let mut list_2401 = scope_2398.start_list(true, Some("InstanceEventWindowId"));
        for item_2400 in var_2399 {
            #[allow(unused_mut)]
            let mut entry_2402 = list_2401.entry();
            entry_2402.string(item_2400);
        }
        list_2401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("Filter");
    if let Some(var_2404) = &input.filters {
        let mut list_2406 = scope_2403.start_list(true, Some("Filter"));
        for item_2405 in var_2404 {
            #[allow(unused_mut)]
            let mut entry_2407 = list_2406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2407, item_2405);
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("MaxResults");
    if let Some(var_2409) = &input.max_results {
        scope_2408.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("NextToken");
    if let Some(var_2411) = &input.next_token {
        scope_2410.string(var_2411);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("Filter");
    if let Some(var_2413) = &input.filters {
        let mut list_2415 = scope_2412.start_list(true, Some("Filter"));
        for item_2414 in var_2413 {
            #[allow(unused_mut)]
            let mut entry_2416 = list_2415.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2416, item_2414);
        }
        list_2415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("InstanceId");
    if let Some(var_2418) = &input.instance_ids {
        let mut list_2420 = scope_2417.start_list(true, Some("InstanceId"));
        for item_2419 in var_2418 {
            #[allow(unused_mut)]
            let mut entry_2421 = list_2420.entry();
            entry_2421.string(item_2419);
        }
        list_2420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("DryRun");
    if let Some(var_2423) = &input.dry_run {
        scope_2422.boolean(*var_2423);
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("MaxResults");
    if let Some(var_2425) = &input.max_results {
        scope_2424.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2425).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("NextToken");
    if let Some(var_2427) = &input.next_token {
        scope_2426.string(var_2427);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("Filter");
    if let Some(var_2429) = &input.filters {
        let mut list_2431 = scope_2428.start_list(true, Some("Filter"));
        for item_2430 in var_2429 {
            #[allow(unused_mut)]
            let mut entry_2432 = list_2431.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2432, item_2430);
        }
        list_2431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("InstanceId");
    if let Some(var_2434) = &input.instance_ids {
        let mut list_2436 = scope_2433.start_list(true, Some("InstanceId"));
        for item_2435 in var_2434 {
            #[allow(unused_mut)]
            let mut entry_2437 = list_2436.entry();
            entry_2437.string(item_2435);
        }
        list_2436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2438 = writer.prefix("MaxResults");
    if let Some(var_2439) = &input.max_results {
        scope_2438.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2440 = writer.prefix("NextToken");
    if let Some(var_2441) = &input.next_token {
        scope_2440.string(var_2441);
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("DryRun");
    if let Some(var_2443) = &input.dry_run {
        scope_2442.boolean(*var_2443);
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("IncludeAllInstances");
    if let Some(var_2445) = &input.include_all_instances {
        scope_2444.boolean(*var_2445);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("DryRun");
    if let Some(var_2447) = &input.dry_run {
        scope_2446.boolean(*var_2447);
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("LocationType");
    if let Some(var_2449) = &input.location_type {
        scope_2448.string(var_2449.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("Filter");
    if let Some(var_2451) = &input.filters {
        let mut list_2453 = scope_2450.start_list(true, Some("Filter"));
        for item_2452 in var_2451 {
            #[allow(unused_mut)]
            let mut entry_2454 = list_2453.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2454, item_2452);
        }
        list_2453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2455 = writer.prefix("MaxResults");
    if let Some(var_2456) = &input.max_results {
        scope_2455.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2457 = writer.prefix("NextToken");
    if let Some(var_2458) = &input.next_token {
        scope_2457.string(var_2458);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("DryRun");
    if let Some(var_2460) = &input.dry_run {
        scope_2459.boolean(*var_2460);
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("InstanceType");
    if let Some(var_2462) = &input.instance_types {
        let mut list_2464 = scope_2461.start_list(true, None);
        for item_2463 in var_2462 {
            #[allow(unused_mut)]
            let mut entry_2465 = list_2464.entry();
            entry_2465.string(item_2463.as_str());
        }
        list_2464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2466 = writer.prefix("Filter");
    if let Some(var_2467) = &input.filters {
        let mut list_2469 = scope_2466.start_list(true, Some("Filter"));
        for item_2468 in var_2467 {
            #[allow(unused_mut)]
            let mut entry_2470 = list_2469.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2470, item_2468);
        }
        list_2469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("MaxResults");
    if let Some(var_2472) = &input.max_results {
        scope_2471.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2472).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("NextToken");
    if let Some(var_2474) = &input.next_token {
        scope_2473.string(var_2474);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("Filter");
    if let Some(var_2476) = &input.filters {
        let mut list_2478 = scope_2475.start_list(true, Some("Filter"));
        for item_2477 in var_2476 {
            #[allow(unused_mut)]
            let mut entry_2479 = list_2478.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2479, item_2477);
        }
        list_2478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2480 = writer.prefix("DryRun");
    if let Some(var_2481) = &input.dry_run {
        scope_2480.boolean(*var_2481);
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("InternetGatewayId");
    if let Some(var_2483) = &input.internet_gateway_ids {
        let mut list_2485 = scope_2482.start_list(true, Some("item"));
        for item_2484 in var_2483 {
            #[allow(unused_mut)]
            let mut entry_2486 = list_2485.entry();
            entry_2486.string(item_2484);
        }
        list_2485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("NextToken");
    if let Some(var_2488) = &input.next_token {
        scope_2487.string(var_2488);
    }
    #[allow(unused_mut)]
    let mut scope_2489 = writer.prefix("MaxResults");
    if let Some(var_2490) = &input.max_results {
        scope_2489.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2490).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("PoolId");
    if let Some(var_2492) = &input.pool_ids {
        let mut list_2494 = scope_2491.start_list(true, Some("item"));
        for item_2493 in var_2492 {
            #[allow(unused_mut)]
            let mut entry_2495 = list_2494.entry();
            entry_2495.string(item_2493);
        }
        list_2494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("NextToken");
    if let Some(var_2497) = &input.next_token {
        scope_2496.string(var_2497);
    }
    #[allow(unused_mut)]
    let mut scope_2498 = writer.prefix("MaxResults");
    if let Some(var_2499) = &input.max_results {
        scope_2498.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2499).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("DryRun");
    if let Some(var_2501) = &input.dry_run {
        scope_2500.boolean(*var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("Filter");
    if let Some(var_2503) = &input.filters {
        let mut list_2505 = scope_2502.start_list(true, Some("Filter"));
        for item_2504 in var_2503 {
            #[allow(unused_mut)]
            let mut entry_2506 = list_2505.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2506, item_2504);
        }
        list_2505.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2507 = writer.prefix("Filter");
    if let Some(var_2508) = &input.filters {
        let mut list_2510 = scope_2507.start_list(true, Some("Filter"));
        for item_2509 in var_2508 {
            #[allow(unused_mut)]
            let mut entry_2511 = list_2510.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2511, item_2509);
        }
        list_2510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2512 = writer.prefix("KeyName");
    if let Some(var_2513) = &input.key_names {
        let mut list_2515 = scope_2512.start_list(true, Some("KeyName"));
        for item_2514 in var_2513 {
            #[allow(unused_mut)]
            let mut entry_2516 = list_2515.entry();
            entry_2516.string(item_2514);
        }
        list_2515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("KeyPairId");
    if let Some(var_2518) = &input.key_pair_ids {
        let mut list_2520 = scope_2517.start_list(true, Some("KeyPairId"));
        for item_2519 in var_2518 {
            #[allow(unused_mut)]
            let mut entry_2521 = list_2520.entry();
            entry_2521.string(item_2519);
        }
        list_2520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2522 = writer.prefix("DryRun");
    if let Some(var_2523) = &input.dry_run {
        scope_2522.boolean(*var_2523);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2524 = writer.prefix("DryRun");
    if let Some(var_2525) = &input.dry_run {
        scope_2524.boolean(*var_2525);
    }
    #[allow(unused_mut)]
    let mut scope_2526 = writer.prefix("LaunchTemplateId");
    if let Some(var_2527) = &input.launch_template_ids {
        let mut list_2529 = scope_2526.start_list(true, Some("item"));
        for item_2528 in var_2527 {
            #[allow(unused_mut)]
            let mut entry_2530 = list_2529.entry();
            entry_2530.string(item_2528);
        }
        list_2529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2531 = writer.prefix("LaunchTemplateName");
    if let Some(var_2532) = &input.launch_template_names {
        let mut list_2534 = scope_2531.start_list(true, Some("item"));
        for item_2533 in var_2532 {
            #[allow(unused_mut)]
            let mut entry_2535 = list_2534.entry();
            entry_2535.string(item_2533);
        }
        list_2534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("Filter");
    if let Some(var_2537) = &input.filters {
        let mut list_2539 = scope_2536.start_list(true, Some("Filter"));
        for item_2538 in var_2537 {
            #[allow(unused_mut)]
            let mut entry_2540 = list_2539.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2540, item_2538);
        }
        list_2539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2541 = writer.prefix("NextToken");
    if let Some(var_2542) = &input.next_token {
        scope_2541.string(var_2542);
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("MaxResults");
    if let Some(var_2544) = &input.max_results {
        scope_2543.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2544).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("DryRun");
    if let Some(var_2546) = &input.dry_run {
        scope_2545.boolean(*var_2546);
    }
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("LaunchTemplateId");
    if let Some(var_2548) = &input.launch_template_id {
        scope_2547.string(var_2548);
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("LaunchTemplateName");
    if let Some(var_2550) = &input.launch_template_name {
        scope_2549.string(var_2550);
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2552) = &input.versions {
        let mut list_2554 = scope_2551.start_list(true, Some("item"));
        for item_2553 in var_2552 {
            #[allow(unused_mut)]
            let mut entry_2555 = list_2554.entry();
            entry_2555.string(item_2553);
        }
        list_2554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2556 = writer.prefix("MinVersion");
    if let Some(var_2557) = &input.min_version {
        scope_2556.string(var_2557);
    }
    #[allow(unused_mut)]
    let mut scope_2558 = writer.prefix("MaxVersion");
    if let Some(var_2559) = &input.max_version {
        scope_2558.string(var_2559);
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("NextToken");
    if let Some(var_2561) = &input.next_token {
        scope_2560.string(var_2561);
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("MaxResults");
    if let Some(var_2563) = &input.max_results {
        scope_2562.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("Filter");
    if let Some(var_2565) = &input.filters {
        let mut list_2567 = scope_2564.start_list(true, Some("Filter"));
        for item_2566 in var_2565 {
            #[allow(unused_mut)]
            let mut entry_2568 = list_2567.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2568, item_2566);
        }
        list_2567.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2569 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2570) = &input.local_gateway_route_table_ids {
        let mut list_2572 = scope_2569.start_list(true, Some("item"));
        for item_2571 in var_2570 {
            #[allow(unused_mut)]
            let mut entry_2573 = list_2572.entry();
            entry_2573.string(item_2571);
        }
        list_2572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2574 = writer.prefix("Filter");
    if let Some(var_2575) = &input.filters {
        let mut list_2577 = scope_2574.start_list(true, Some("Filter"));
        for item_2576 in var_2575 {
            #[allow(unused_mut)]
            let mut entry_2578 = list_2577.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2578, item_2576);
        }
        list_2577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("MaxResults");
    if let Some(var_2580) = &input.max_results {
        scope_2579.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2580).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("NextToken");
    if let Some(var_2582) = &input.next_token {
        scope_2581.string(var_2582);
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("DryRun");
    if let Some(var_2584) = &input.dry_run {
        scope_2583.boolean(*var_2584);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2586) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2588 = scope_2585.start_list(true, Some("item"));
        for item_2587 in var_2586 {
            #[allow(unused_mut)]
            let mut entry_2589 = list_2588.entry();
            entry_2589.string(item_2587);
        }
        list_2588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2590 = writer.prefix("Filter");
    if let Some(var_2591) = &input.filters {
        let mut list_2593 = scope_2590.start_list(true, Some("Filter"));
        for item_2592 in var_2591 {
            #[allow(unused_mut)]
            let mut entry_2594 = list_2593.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2594, item_2592);
        }
        list_2593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2595 = writer.prefix("MaxResults");
    if let Some(var_2596) = &input.max_results {
        scope_2595.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2596).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2597 = writer.prefix("NextToken");
    if let Some(var_2598) = &input.next_token {
        scope_2597.string(var_2598);
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("DryRun");
    if let Some(var_2600) = &input.dry_run {
        scope_2599.boolean(*var_2600);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2602) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2604 = scope_2601.start_list(true, Some("item"));
        for item_2603 in var_2602 {
            #[allow(unused_mut)]
            let mut entry_2605 = list_2604.entry();
            entry_2605.string(item_2603);
        }
        list_2604.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2606 = writer.prefix("Filter");
    if let Some(var_2607) = &input.filters {
        let mut list_2609 = scope_2606.start_list(true, Some("Filter"));
        for item_2608 in var_2607 {
            #[allow(unused_mut)]
            let mut entry_2610 = list_2609.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2610, item_2608);
        }
        list_2609.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2611 = writer.prefix("MaxResults");
    if let Some(var_2612) = &input.max_results {
        scope_2611.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2612).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2613 = writer.prefix("NextToken");
    if let Some(var_2614) = &input.next_token {
        scope_2613.string(var_2614);
    }
    #[allow(unused_mut)]
    let mut scope_2615 = writer.prefix("DryRun");
    if let Some(var_2616) = &input.dry_run {
        scope_2615.boolean(*var_2616);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("LocalGatewayId");
    if let Some(var_2618) = &input.local_gateway_ids {
        let mut list_2620 = scope_2617.start_list(true, Some("item"));
        for item_2619 in var_2618 {
            #[allow(unused_mut)]
            let mut entry_2621 = list_2620.entry();
            entry_2621.string(item_2619);
        }
        list_2620.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2622 = writer.prefix("Filter");
    if let Some(var_2623) = &input.filters {
        let mut list_2625 = scope_2622.start_list(true, Some("Filter"));
        for item_2624 in var_2623 {
            #[allow(unused_mut)]
            let mut entry_2626 = list_2625.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2626, item_2624);
        }
        list_2625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("MaxResults");
    if let Some(var_2628) = &input.max_results {
        scope_2627.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2628).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("NextToken");
    if let Some(var_2630) = &input.next_token {
        scope_2629.string(var_2630);
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("DryRun");
    if let Some(var_2632) = &input.dry_run {
        scope_2631.boolean(*var_2632);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2634) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2636 = scope_2633.start_list(true, Some("item"));
        for item_2635 in var_2634 {
            #[allow(unused_mut)]
            let mut entry_2637 = list_2636.entry();
            entry_2637.string(item_2635);
        }
        list_2636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2638 = writer.prefix("Filter");
    if let Some(var_2639) = &input.filters {
        let mut list_2641 = scope_2638.start_list(true, Some("Filter"));
        for item_2640 in var_2639 {
            #[allow(unused_mut)]
            let mut entry_2642 = list_2641.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2642, item_2640);
        }
        list_2641.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("MaxResults");
    if let Some(var_2644) = &input.max_results {
        scope_2643.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2644).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("NextToken");
    if let Some(var_2646) = &input.next_token {
        scope_2645.string(var_2646);
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("DryRun");
    if let Some(var_2648) = &input.dry_run {
        scope_2647.boolean(*var_2648);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2650) = &input.local_gateway_virtual_interface_ids {
        let mut list_2652 = scope_2649.start_list(true, Some("item"));
        for item_2651 in var_2650 {
            #[allow(unused_mut)]
            let mut entry_2653 = list_2652.entry();
            entry_2653.string(item_2651);
        }
        list_2652.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2654 = writer.prefix("Filter");
    if let Some(var_2655) = &input.filters {
        let mut list_2657 = scope_2654.start_list(true, Some("Filter"));
        for item_2656 in var_2655 {
            #[allow(unused_mut)]
            let mut entry_2658 = list_2657.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2658, item_2656);
        }
        list_2657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("MaxResults");
    if let Some(var_2660) = &input.max_results {
        scope_2659.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("NextToken");
    if let Some(var_2662) = &input.next_token {
        scope_2661.string(var_2662);
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("DryRun");
    if let Some(var_2664) = &input.dry_run {
        scope_2663.boolean(*var_2664);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2665 = writer.prefix("DryRun");
    if let Some(var_2666) = &input.dry_run {
        scope_2665.boolean(*var_2666);
    }
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("Filter");
    if let Some(var_2668) = &input.filters {
        let mut list_2670 = scope_2667.start_list(true, Some("Filter"));
        for item_2669 in var_2668 {
            #[allow(unused_mut)]
            let mut entry_2671 = list_2670.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2671, item_2669);
        }
        list_2670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("MaxResults");
    if let Some(var_2673) = &input.max_results {
        scope_2672.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2673).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2674 = writer.prefix("NextToken");
    if let Some(var_2675) = &input.next_token {
        scope_2674.string(var_2675);
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("PrefixListId");
    if let Some(var_2677) = &input.prefix_list_ids {
        let mut list_2679 = scope_2676.start_list(true, Some("item"));
        for item_2678 in var_2677 {
            #[allow(unused_mut)]
            let mut entry_2680 = list_2679.entry();
            entry_2680.string(item_2678);
        }
        list_2679.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2681 = writer.prefix("Filter");
    if let Some(var_2682) = &input.filters {
        let mut list_2684 = scope_2681.start_list(true, Some("Filter"));
        for item_2683 in var_2682 {
            #[allow(unused_mut)]
            let mut entry_2685 = list_2684.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2685, item_2683);
        }
        list_2684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("DryRun");
    if let Some(var_2687) = &input.dry_run {
        scope_2686.boolean(*var_2687);
    }
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("MaxResults");
    if let Some(var_2689) = &input.max_results {
        scope_2688.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2689).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2690 = writer.prefix("NextToken");
    if let Some(var_2691) = &input.next_token {
        scope_2690.string(var_2691);
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("PublicIp");
    if let Some(var_2693) = &input.public_ips {
        let mut list_2695 = scope_2692.start_list(true, Some("item"));
        for item_2694 in var_2693 {
            #[allow(unused_mut)]
            let mut entry_2696 = list_2695.entry();
            entry_2696.string(item_2694);
        }
        list_2695.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2697 = writer.prefix("DryRun");
    if let Some(var_2698) = &input.dry_run {
        scope_2697.boolean(*var_2698);
    }
    #[allow(unused_mut)]
    let mut scope_2699 = writer.prefix("Filter");
    if let Some(var_2700) = &input.filter {
        let mut list_2702 = scope_2699.start_list(true, Some("Filter"));
        for item_2701 in var_2700 {
            #[allow(unused_mut)]
            let mut entry_2703 = list_2702.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2703, item_2701);
        }
        list_2702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("MaxResults");
    if let Some(var_2705) = &input.max_results {
        scope_2704.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2705).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2706 = writer.prefix("NatGatewayId");
    if let Some(var_2707) = &input.nat_gateway_ids {
        let mut list_2709 = scope_2706.start_list(true, Some("item"));
        for item_2708 in var_2707 {
            #[allow(unused_mut)]
            let mut entry_2710 = list_2709.entry();
            entry_2710.string(item_2708);
        }
        list_2709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("NextToken");
    if let Some(var_2712) = &input.next_token {
        scope_2711.string(var_2712);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2713 = writer.prefix("Filter");
    if let Some(var_2714) = &input.filters {
        let mut list_2716 = scope_2713.start_list(true, Some("Filter"));
        for item_2715 in var_2714 {
            #[allow(unused_mut)]
            let mut entry_2717 = list_2716.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2717, item_2715);
        }
        list_2716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("DryRun");
    if let Some(var_2719) = &input.dry_run {
        scope_2718.boolean(*var_2719);
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("NetworkAclId");
    if let Some(var_2721) = &input.network_acl_ids {
        let mut list_2723 = scope_2720.start_list(true, Some("item"));
        for item_2722 in var_2721 {
            #[allow(unused_mut)]
            let mut entry_2724 = list_2723.entry();
            entry_2724.string(item_2722);
        }
        list_2723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("NextToken");
    if let Some(var_2726) = &input.next_token {
        scope_2725.string(var_2726);
    }
    #[allow(unused_mut)]
    let mut scope_2727 = writer.prefix("MaxResults");
    if let Some(var_2728) = &input.max_results {
        scope_2727.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2728).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2730) = &input.network_insights_analysis_ids {
        let mut list_2732 = scope_2729.start_list(true, Some("item"));
        for item_2731 in var_2730 {
            #[allow(unused_mut)]
            let mut entry_2733 = list_2732.entry();
            entry_2733.string(item_2731);
        }
        list_2732.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2734 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2735) = &input.network_insights_path_id {
        scope_2734.string(var_2735);
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("AnalysisStartTime");
    if let Some(var_2737) = &input.analysis_start_time {
        scope_2736.instant(var_2737, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("AnalysisEndTime");
    if let Some(var_2739) = &input.analysis_end_time {
        scope_2738.instant(var_2739, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("Filter");
    if let Some(var_2741) = &input.filters {
        let mut list_2743 = scope_2740.start_list(true, Some("Filter"));
        for item_2742 in var_2741 {
            #[allow(unused_mut)]
            let mut entry_2744 = list_2743.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2744, item_2742);
        }
        list_2743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2745 = writer.prefix("MaxResults");
    if let Some(var_2746) = &input.max_results {
        scope_2745.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2746).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2747 = writer.prefix("DryRun");
    if let Some(var_2748) = &input.dry_run {
        scope_2747.boolean(*var_2748);
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("NextToken");
    if let Some(var_2750) = &input.next_token {
        scope_2749.string(var_2750);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2752) = &input.network_insights_path_ids {
        let mut list_2754 = scope_2751.start_list(true, Some("item"));
        for item_2753 in var_2752 {
            #[allow(unused_mut)]
            let mut entry_2755 = list_2754.entry();
            entry_2755.string(item_2753);
        }
        list_2754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2756 = writer.prefix("Filter");
    if let Some(var_2757) = &input.filters {
        let mut list_2759 = scope_2756.start_list(true, Some("Filter"));
        for item_2758 in var_2757 {
            #[allow(unused_mut)]
            let mut entry_2760 = list_2759.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2760, item_2758);
        }
        list_2759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("MaxResults");
    if let Some(var_2762) = &input.max_results {
        scope_2761.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2762).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("DryRun");
    if let Some(var_2764) = &input.dry_run {
        scope_2763.boolean(*var_2764);
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("NextToken");
    if let Some(var_2766) = &input.next_token {
        scope_2765.string(var_2766);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("Attribute");
    if let Some(var_2768) = &input.attribute {
        scope_2767.string(var_2768.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("DryRun");
    if let Some(var_2770) = &input.dry_run {
        scope_2769.boolean(*var_2770);
    }
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2772) = &input.network_interface_id {
        scope_2771.string(var_2772);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2774) = &input.network_interface_permission_ids {
        let mut list_2776 = scope_2773.start_list(true, None);
        for item_2775 in var_2774 {
            #[allow(unused_mut)]
            let mut entry_2777 = list_2776.entry();
            entry_2777.string(item_2775);
        }
        list_2776.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("Filter");
    if let Some(var_2779) = &input.filters {
        let mut list_2781 = scope_2778.start_list(true, Some("Filter"));
        for item_2780 in var_2779 {
            #[allow(unused_mut)]
            let mut entry_2782 = list_2781.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2782, item_2780);
        }
        list_2781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("NextToken");
    if let Some(var_2784) = &input.next_token {
        scope_2783.string(var_2784);
    }
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("MaxResults");
    if let Some(var_2786) = &input.max_results {
        scope_2785.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2786).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("Filter");
    if let Some(var_2788) = &input.filters {
        let mut list_2790 = scope_2787.start_list(true, Some("Filter"));
        for item_2789 in var_2788 {
            #[allow(unused_mut)]
            let mut entry_2791 = list_2790.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2791, item_2789);
        }
        list_2790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2792 = writer.prefix("DryRun");
    if let Some(var_2793) = &input.dry_run {
        scope_2792.boolean(*var_2793);
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2795) = &input.network_interface_ids {
        let mut list_2797 = scope_2794.start_list(true, Some("item"));
        for item_2796 in var_2795 {
            #[allow(unused_mut)]
            let mut entry_2798 = list_2797.entry();
            entry_2798.string(item_2796);
        }
        list_2797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("NextToken");
    if let Some(var_2800) = &input.next_token {
        scope_2799.string(var_2800);
    }
    #[allow(unused_mut)]
    let mut scope_2801 = writer.prefix("MaxResults");
    if let Some(var_2802) = &input.max_results {
        scope_2801.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2802).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("Filter");
    if let Some(var_2804) = &input.filters {
        let mut list_2806 = scope_2803.start_list(true, Some("Filter"));
        for item_2805 in var_2804 {
            #[allow(unused_mut)]
            let mut entry_2807 = list_2806.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2807, item_2805);
        }
        list_2806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("DryRun");
    if let Some(var_2809) = &input.dry_run {
        scope_2808.boolean(*var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("GroupName");
    if let Some(var_2811) = &input.group_names {
        let mut list_2813 = scope_2810.start_list(true, None);
        for item_2812 in var_2811 {
            #[allow(unused_mut)]
            let mut entry_2814 = list_2813.entry();
            entry_2814.string(item_2812);
        }
        list_2813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("GroupId");
    if let Some(var_2816) = &input.group_ids {
        let mut list_2818 = scope_2815.start_list(true, Some("GroupId"));
        for item_2817 in var_2816 {
            #[allow(unused_mut)]
            let mut entry_2819 = list_2818.entry();
            entry_2819.string(item_2817);
        }
        list_2818.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2820 = writer.prefix("DryRun");
    if let Some(var_2821) = &input.dry_run {
        scope_2820.boolean(*var_2821);
    }
    #[allow(unused_mut)]
    let mut scope_2822 = writer.prefix("Filter");
    if let Some(var_2823) = &input.filters {
        let mut list_2825 = scope_2822.start_list(true, Some("Filter"));
        for item_2824 in var_2823 {
            #[allow(unused_mut)]
            let mut entry_2826 = list_2825.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2826, item_2824);
        }
        list_2825.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2827 = writer.prefix("MaxResults");
    if let Some(var_2828) = &input.max_results {
        scope_2827.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2828).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2829 = writer.prefix("NextToken");
    if let Some(var_2830) = &input.next_token {
        scope_2829.string(var_2830);
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("PrefixListId");
    if let Some(var_2832) = &input.prefix_list_ids {
        let mut list_2834 = scope_2831.start_list(true, Some("item"));
        for item_2833 in var_2832 {
            #[allow(unused_mut)]
            let mut entry_2835 = list_2834.entry();
            entry_2835.string(item_2833);
        }
        list_2834.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2836 = writer.prefix("DryRun");
    if let Some(var_2837) = &input.dry_run {
        scope_2836.boolean(*var_2837);
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("Resource");
    if let Some(var_2839) = &input.resources {
        let mut list_2841 = scope_2838.start_list(true, Some("item"));
        for item_2840 in var_2839 {
            #[allow(unused_mut)]
            let mut entry_2842 = list_2841.entry();
            entry_2842.string(item_2840);
        }
        list_2841.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2843 = writer.prefix("MaxResults");
    if let Some(var_2844) = &input.max_results {
        scope_2843.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2844).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2845 = writer.prefix("NextToken");
    if let Some(var_2846) = &input.next_token {
        scope_2845.string(var_2846);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("PoolId");
    if let Some(var_2848) = &input.pool_ids {
        let mut list_2850 = scope_2847.start_list(true, Some("item"));
        for item_2849 in var_2848 {
            #[allow(unused_mut)]
            let mut entry_2851 = list_2850.entry();
            entry_2851.string(item_2849);
        }
        list_2850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2852 = writer.prefix("NextToken");
    if let Some(var_2853) = &input.next_token {
        scope_2852.string(var_2853);
    }
    #[allow(unused_mut)]
    let mut scope_2854 = writer.prefix("MaxResults");
    if let Some(var_2855) = &input.max_results {
        scope_2854.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2855).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("Filter");
    if let Some(var_2857) = &input.filters {
        let mut list_2859 = scope_2856.start_list(true, Some("Filter"));
        for item_2858 in var_2857 {
            #[allow(unused_mut)]
            let mut entry_2860 = list_2859.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2860, item_2858);
        }
        list_2859.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2861 = writer.prefix("Filter");
    if let Some(var_2862) = &input.filters {
        let mut list_2864 = scope_2861.start_list(true, Some("Filter"));
        for item_2863 in var_2862 {
            #[allow(unused_mut)]
            let mut entry_2865 = list_2864.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2865, item_2863);
        }
        list_2864.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2866 = writer.prefix("RegionName");
    if let Some(var_2867) = &input.region_names {
        let mut list_2869 = scope_2866.start_list(true, Some("RegionName"));
        for item_2868 in var_2867 {
            #[allow(unused_mut)]
            let mut entry_2870 = list_2869.entry();
            entry_2870.string(item_2868);
        }
        list_2869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2871 = writer.prefix("DryRun");
    if let Some(var_2872) = &input.dry_run {
        scope_2871.boolean(*var_2872);
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("AllRegions");
    if let Some(var_2874) = &input.all_regions {
        scope_2873.boolean(*var_2874);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2876) = &input.replace_root_volume_task_ids {
        let mut list_2878 = scope_2875.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2877 in var_2876 {
            #[allow(unused_mut)]
            let mut entry_2879 = list_2878.entry();
            entry_2879.string(item_2877);
        }
        list_2878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2880 = writer.prefix("Filter");
    if let Some(var_2881) = &input.filters {
        let mut list_2883 = scope_2880.start_list(true, Some("Filter"));
        for item_2882 in var_2881 {
            #[allow(unused_mut)]
            let mut entry_2884 = list_2883.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2884, item_2882);
        }
        list_2883.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2885 = writer.prefix("MaxResults");
    if let Some(var_2886) = &input.max_results {
        scope_2885.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2886).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2887 = writer.prefix("NextToken");
    if let Some(var_2888) = &input.next_token {
        scope_2887.string(var_2888);
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("DryRun");
    if let Some(var_2890) = &input.dry_run {
        scope_2889.boolean(*var_2890);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2891 = writer.prefix("Filter");
    if let Some(var_2892) = &input.filters {
        let mut list_2894 = scope_2891.start_list(true, Some("Filter"));
        for item_2893 in var_2892 {
            #[allow(unused_mut)]
            let mut entry_2895 = list_2894.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2895, item_2893);
        }
        list_2894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2896 = writer.prefix("OfferingClass");
    if let Some(var_2897) = &input.offering_class {
        scope_2896.string(var_2897.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2898 = writer.prefix("ReservedInstancesId");
    if let Some(var_2899) = &input.reserved_instances_ids {
        let mut list_2901 = scope_2898.start_list(true, Some("ReservedInstancesId"));
        for item_2900 in var_2899 {
            #[allow(unused_mut)]
            let mut entry_2902 = list_2901.entry();
            entry_2902.string(item_2900);
        }
        list_2901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2903 = writer.prefix("DryRun");
    if let Some(var_2904) = &input.dry_run {
        scope_2903.boolean(*var_2904);
    }
    #[allow(unused_mut)]
    let mut scope_2905 = writer.prefix("OfferingType");
    if let Some(var_2906) = &input.offering_type {
        scope_2905.string(var_2906.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("Filter");
    if let Some(var_2908) = &input.filters {
        let mut list_2910 = scope_2907.start_list(true, Some("Filter"));
        for item_2909 in var_2908 {
            #[allow(unused_mut)]
            let mut entry_2911 = list_2910.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2911, item_2909);
        }
        list_2910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2912 = writer.prefix("ReservedInstancesId");
    if let Some(var_2913) = &input.reserved_instances_id {
        scope_2912.string(var_2913);
    }
    #[allow(unused_mut)]
    let mut scope_2914 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2915) = &input.reserved_instances_listing_id {
        scope_2914.string(var_2915);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("Filter");
    if let Some(var_2917) = &input.filters {
        let mut list_2919 = scope_2916.start_list(true, Some("Filter"));
        for item_2918 in var_2917 {
            #[allow(unused_mut)]
            let mut entry_2920 = list_2919.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2920, item_2918);
        }
        list_2919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2921 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2922) = &input.reserved_instances_modification_ids {
        let mut list_2924 = scope_2921.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2923 in var_2922 {
            #[allow(unused_mut)]
            let mut entry_2925 = list_2924.entry();
            entry_2925.string(item_2923);
        }
        list_2924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("NextToken");
    if let Some(var_2927) = &input.next_token {
        scope_2926.string(var_2927);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("AvailabilityZone");
    if let Some(var_2929) = &input.availability_zone {
        scope_2928.string(var_2929);
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("Filter");
    if let Some(var_2931) = &input.filters {
        let mut list_2933 = scope_2930.start_list(true, Some("Filter"));
        for item_2932 in var_2931 {
            #[allow(unused_mut)]
            let mut entry_2934 = list_2933.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2934, item_2932);
        }
        list_2933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("IncludeMarketplace");
    if let Some(var_2936) = &input.include_marketplace {
        scope_2935.boolean(*var_2936);
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("InstanceType");
    if let Some(var_2938) = &input.instance_type {
        scope_2937.string(var_2938.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("MaxDuration");
    if let Some(var_2940) = &input.max_duration {
        scope_2939.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2940).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2941 = writer.prefix("MaxInstanceCount");
    if let Some(var_2942) = &input.max_instance_count {
        scope_2941.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2942).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("MinDuration");
    if let Some(var_2944) = &input.min_duration {
        scope_2943.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2944).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("OfferingClass");
    if let Some(var_2946) = &input.offering_class {
        scope_2945.string(var_2946.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("ProductDescription");
    if let Some(var_2948) = &input.product_description {
        scope_2947.string(var_2948.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2950) = &input.reserved_instances_offering_ids {
        let mut list_2952 = scope_2949.start_list(true, None);
        for item_2951 in var_2950 {
            #[allow(unused_mut)]
            let mut entry_2953 = list_2952.entry();
            entry_2953.string(item_2951);
        }
        list_2952.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("DryRun");
    if let Some(var_2955) = &input.dry_run {
        scope_2954.boolean(*var_2955);
    }
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("InstanceTenancy");
    if let Some(var_2957) = &input.instance_tenancy {
        scope_2956.string(var_2957.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("MaxResults");
    if let Some(var_2959) = &input.max_results {
        scope_2958.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2959).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("NextToken");
    if let Some(var_2961) = &input.next_token {
        scope_2960.string(var_2961);
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("OfferingType");
    if let Some(var_2963) = &input.offering_type {
        scope_2962.string(var_2963.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("Filter");
    if let Some(var_2965) = &input.filters {
        let mut list_2967 = scope_2964.start_list(true, Some("Filter"));
        for item_2966 in var_2965 {
            #[allow(unused_mut)]
            let mut entry_2968 = list_2967.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2968, item_2966);
        }
        list_2967.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("DryRun");
    if let Some(var_2970) = &input.dry_run {
        scope_2969.boolean(*var_2970);
    }
    #[allow(unused_mut)]
    let mut scope_2971 = writer.prefix("RouteTableId");
    if let Some(var_2972) = &input.route_table_ids {
        let mut list_2974 = scope_2971.start_list(true, Some("item"));
        for item_2973 in var_2972 {
            #[allow(unused_mut)]
            let mut entry_2975 = list_2974.entry();
            entry_2975.string(item_2973);
        }
        list_2974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2976 = writer.prefix("NextToken");
    if let Some(var_2977) = &input.next_token {
        scope_2976.string(var_2977);
    }
    #[allow(unused_mut)]
    let mut scope_2978 = writer.prefix("MaxResults");
    if let Some(var_2979) = &input.max_results {
        scope_2978.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2979).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("DryRun");
    if let Some(var_2981) = &input.dry_run {
        scope_2980.boolean(*var_2981);
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("Filter");
    if let Some(var_2983) = &input.filters {
        let mut list_2985 = scope_2982.start_list(true, Some("Filter"));
        for item_2984 in var_2983 {
            #[allow(unused_mut)]
            let mut entry_2986 = list_2985.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2986, item_2984);
        }
        list_2985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2988) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_2987, var_2988,
        );
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("MaxResults");
    if let Some(var_2990) = &input.max_results {
        scope_2989.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2990).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2992) = &input.max_slot_duration_in_hours {
        scope_2991.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2992).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2994) = &input.min_slot_duration_in_hours {
        scope_2993.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2994).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("NextToken");
    if let Some(var_2996) = &input.next_token {
        scope_2995.string(var_2996);
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("Recurrence");
    if let Some(var_2998) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_2997, var_2998,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("DryRun");
    if let Some(var_3000) = &input.dry_run {
        scope_2999.boolean(*var_3000);
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("Filter");
    if let Some(var_3002) = &input.filters {
        let mut list_3004 = scope_3001.start_list(true, Some("Filter"));
        for item_3003 in var_3002 {
            #[allow(unused_mut)]
            let mut entry_3005 = list_3004.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3005, item_3003);
        }
        list_3004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("MaxResults");
    if let Some(var_3007) = &input.max_results {
        scope_3006.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("NextToken");
    if let Some(var_3009) = &input.next_token {
        scope_3008.string(var_3009);
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3011) = &input.scheduled_instance_ids {
        let mut list_3013 = scope_3010.start_list(true, Some("ScheduledInstanceId"));
        for item_3012 in var_3011 {
            #[allow(unused_mut)]
            let mut entry_3014 = list_3013.entry();
            entry_3014.string(item_3012);
        }
        list_3013.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3015 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3016) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3015, var_3016,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("DryRun");
    if let Some(var_3018) = &input.dry_run {
        scope_3017.boolean(*var_3018);
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("GroupId");
    if let Some(var_3020) = &input.group_id {
        let mut list_3022 = scope_3019.start_list(true, Some("item"));
        for item_3021 in var_3020 {
            #[allow(unused_mut)]
            let mut entry_3023 = list_3022.entry();
            entry_3023.string(item_3021);
        }
        list_3022.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("Filter");
    if let Some(var_3025) = &input.filters {
        let mut list_3027 = scope_3024.start_list(true, Some("Filter"));
        for item_3026 in var_3025 {
            #[allow(unused_mut)]
            let mut entry_3028 = list_3027.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3028, item_3026);
        }
        list_3027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3030) = &input.security_group_rule_ids {
        let mut list_3032 = scope_3029.start_list(true, Some("item"));
        for item_3031 in var_3030 {
            #[allow(unused_mut)]
            let mut entry_3033 = list_3032.entry();
            entry_3033.string(item_3031);
        }
        list_3032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("DryRun");
    if let Some(var_3035) = &input.dry_run {
        scope_3034.boolean(*var_3035);
    }
    #[allow(unused_mut)]
    let mut scope_3036 = writer.prefix("NextToken");
    if let Some(var_3037) = &input.next_token {
        scope_3036.string(var_3037);
    }
    #[allow(unused_mut)]
    let mut scope_3038 = writer.prefix("MaxResults");
    if let Some(var_3039) = &input.max_results {
        scope_3038.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3039).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3040 = writer.prefix("Filter");
    if let Some(var_3041) = &input.filters {
        let mut list_3043 = scope_3040.start_list(true, Some("Filter"));
        for item_3042 in var_3041 {
            #[allow(unused_mut)]
            let mut entry_3044 = list_3043.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3044, item_3042);
        }
        list_3043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3045 = writer.prefix("GroupId");
    if let Some(var_3046) = &input.group_ids {
        let mut list_3048 = scope_3045.start_list(true, Some("groupId"));
        for item_3047 in var_3046 {
            #[allow(unused_mut)]
            let mut entry_3049 = list_3048.entry();
            entry_3049.string(item_3047);
        }
        list_3048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("GroupName");
    if let Some(var_3051) = &input.group_names {
        let mut list_3053 = scope_3050.start_list(true, Some("GroupName"));
        for item_3052 in var_3051 {
            #[allow(unused_mut)]
            let mut entry_3054 = list_3053.entry();
            entry_3054.string(item_3052);
        }
        list_3053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("DryRun");
    if let Some(var_3056) = &input.dry_run {
        scope_3055.boolean(*var_3056);
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("NextToken");
    if let Some(var_3058) = &input.next_token {
        scope_3057.string(var_3058);
    }
    #[allow(unused_mut)]
    let mut scope_3059 = writer.prefix("MaxResults");
    if let Some(var_3060) = &input.max_results {
        scope_3059.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3060).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3061 = writer.prefix("Attribute");
    if let Some(var_3062) = &input.attribute {
        scope_3061.string(var_3062.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("SnapshotId");
    if let Some(var_3064) = &input.snapshot_id {
        scope_3063.string(var_3064);
    }
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("DryRun");
    if let Some(var_3066) = &input.dry_run {
        scope_3065.boolean(*var_3066);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("Filter");
    if let Some(var_3068) = &input.filters {
        let mut list_3070 = scope_3067.start_list(true, Some("Filter"));
        for item_3069 in var_3068 {
            #[allow(unused_mut)]
            let mut entry_3071 = list_3070.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3071, item_3069);
        }
        list_3070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("MaxResults");
    if let Some(var_3073) = &input.max_results {
        scope_3072.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3073).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3074 = writer.prefix("NextToken");
    if let Some(var_3075) = &input.next_token {
        scope_3074.string(var_3075);
    }
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("Owner");
    if let Some(var_3077) = &input.owner_ids {
        let mut list_3079 = scope_3076.start_list(true, Some("Owner"));
        for item_3078 in var_3077 {
            #[allow(unused_mut)]
            let mut entry_3080 = list_3079.entry();
            entry_3080.string(item_3078);
        }
        list_3079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3081 = writer.prefix("RestorableBy");
    if let Some(var_3082) = &input.restorable_by_user_ids {
        let mut list_3084 = scope_3081.start_list(true, None);
        for item_3083 in var_3082 {
            #[allow(unused_mut)]
            let mut entry_3085 = list_3084.entry();
            entry_3085.string(item_3083);
        }
        list_3084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("SnapshotId");
    if let Some(var_3087) = &input.snapshot_ids {
        let mut list_3089 = scope_3086.start_list(true, Some("SnapshotId"));
        for item_3088 in var_3087 {
            #[allow(unused_mut)]
            let mut entry_3090 = list_3089.entry();
            entry_3090.string(item_3088);
        }
        list_3089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("DryRun");
    if let Some(var_3092) = &input.dry_run {
        scope_3091.boolean(*var_3092);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("DryRun");
    if let Some(var_3094) = &input.dry_run {
        scope_3093.boolean(*var_3094);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("DryRun");
    if let Some(var_3096) = &input.dry_run {
        scope_3095.boolean(*var_3096);
    }
    #[allow(unused_mut)]
    let mut scope_3097 = writer.prefix("MaxResults");
    if let Some(var_3098) = &input.max_results {
        scope_3097.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3098).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3099 = writer.prefix("NextToken");
    if let Some(var_3100) = &input.next_token {
        scope_3099.string(var_3100);
    }
    #[allow(unused_mut)]
    let mut scope_3101 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3102) = &input.spot_fleet_request_id {
        scope_3101.string(var_3102);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("DryRun");
    if let Some(var_3104) = &input.dry_run {
        scope_3103.boolean(*var_3104);
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("EventType");
    if let Some(var_3106) = &input.event_type {
        scope_3105.string(var_3106.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("MaxResults");
    if let Some(var_3108) = &input.max_results {
        scope_3107.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("NextToken");
    if let Some(var_3110) = &input.next_token {
        scope_3109.string(var_3110);
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3112) = &input.spot_fleet_request_id {
        scope_3111.string(var_3112);
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("StartTime");
    if let Some(var_3114) = &input.start_time {
        scope_3113.instant(var_3114, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("DryRun");
    if let Some(var_3116) = &input.dry_run {
        scope_3115.boolean(*var_3116);
    }
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("MaxResults");
    if let Some(var_3118) = &input.max_results {
        scope_3117.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("NextToken");
    if let Some(var_3120) = &input.next_token {
        scope_3119.string(var_3120);
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3122) = &input.spot_fleet_request_ids {
        let mut list_3124 = scope_3121.start_list(true, Some("item"));
        for item_3123 in var_3122 {
            #[allow(unused_mut)]
            let mut entry_3125 = list_3124.entry();
            entry_3125.string(item_3123);
        }
        list_3124.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("Filter");
    if let Some(var_3127) = &input.filters {
        let mut list_3129 = scope_3126.start_list(true, Some("Filter"));
        for item_3128 in var_3127 {
            #[allow(unused_mut)]
            let mut entry_3130 = list_3129.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3130, item_3128);
        }
        list_3129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3131 = writer.prefix("DryRun");
    if let Some(var_3132) = &input.dry_run {
        scope_3131.boolean(*var_3132);
    }
    #[allow(unused_mut)]
    let mut scope_3133 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3134) = &input.spot_instance_request_ids {
        let mut list_3136 = scope_3133.start_list(true, Some("SpotInstanceRequestId"));
        for item_3135 in var_3134 {
            #[allow(unused_mut)]
            let mut entry_3137 = list_3136.entry();
            entry_3137.string(item_3135);
        }
        list_3136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3138 = writer.prefix("NextToken");
    if let Some(var_3139) = &input.next_token {
        scope_3138.string(var_3139);
    }
    #[allow(unused_mut)]
    let mut scope_3140 = writer.prefix("MaxResults");
    if let Some(var_3141) = &input.max_results {
        scope_3140.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3141).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("Filter");
    if let Some(var_3143) = &input.filters {
        let mut list_3145 = scope_3142.start_list(true, Some("Filter"));
        for item_3144 in var_3143 {
            #[allow(unused_mut)]
            let mut entry_3146 = list_3145.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3146, item_3144);
        }
        list_3145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3147 = writer.prefix("AvailabilityZone");
    if let Some(var_3148) = &input.availability_zone {
        scope_3147.string(var_3148);
    }
    #[allow(unused_mut)]
    let mut scope_3149 = writer.prefix("DryRun");
    if let Some(var_3150) = &input.dry_run {
        scope_3149.boolean(*var_3150);
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("EndTime");
    if let Some(var_3152) = &input.end_time {
        scope_3151.instant(var_3152, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("InstanceType");
    if let Some(var_3154) = &input.instance_types {
        let mut list_3156 = scope_3153.start_list(true, None);
        for item_3155 in var_3154 {
            #[allow(unused_mut)]
            let mut entry_3157 = list_3156.entry();
            entry_3157.string(item_3155.as_str());
        }
        list_3156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("MaxResults");
    if let Some(var_3159) = &input.max_results {
        scope_3158.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("NextToken");
    if let Some(var_3161) = &input.next_token {
        scope_3160.string(var_3161);
    }
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("ProductDescription");
    if let Some(var_3163) = &input.product_descriptions {
        let mut list_3165 = scope_3162.start_list(true, None);
        for item_3164 in var_3163 {
            #[allow(unused_mut)]
            let mut entry_3166 = list_3165.entry();
            entry_3166.string(item_3164);
        }
        list_3165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3167 = writer.prefix("StartTime");
    if let Some(var_3168) = &input.start_time {
        scope_3167.instant(var_3168, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("DryRun");
    if let Some(var_3170) = &input.dry_run {
        scope_3169.boolean(*var_3170);
    }
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("MaxResults");
    if let Some(var_3172) = &input.max_results {
        scope_3171.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("NextToken");
    if let Some(var_3174) = &input.next_token {
        scope_3173.string(var_3174);
    }
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("VpcId");
    if let Some(var_3176) = &input.vpc_id {
        scope_3175.string(var_3176);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3177 = writer.prefix("ImageId");
    if let Some(var_3178) = &input.image_ids {
        let mut list_3180 = scope_3177.start_list(true, Some("item"));
        for item_3179 in var_3178 {
            #[allow(unused_mut)]
            let mut entry_3181 = list_3180.entry();
            entry_3181.string(item_3179);
        }
        list_3180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("DryRun");
    if let Some(var_3183) = &input.dry_run {
        scope_3182.boolean(*var_3183);
    }
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("Filter");
    if let Some(var_3185) = &input.filters {
        let mut list_3187 = scope_3184.start_list(true, Some("Filter"));
        for item_3186 in var_3185 {
            #[allow(unused_mut)]
            let mut entry_3188 = list_3187.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3188, item_3186);
        }
        list_3187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3189 = writer.prefix("NextToken");
    if let Some(var_3190) = &input.next_token {
        scope_3189.string(var_3190);
    }
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("MaxResults");
    if let Some(var_3192) = &input.max_results {
        scope_3191.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3192).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("Filter");
    if let Some(var_3194) = &input.filters {
        let mut list_3196 = scope_3193.start_list(true, Some("Filter"));
        for item_3195 in var_3194 {
            #[allow(unused_mut)]
            let mut entry_3197 = list_3196.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3197, item_3195);
        }
        list_3196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3198 = writer.prefix("SubnetId");
    if let Some(var_3199) = &input.subnet_ids {
        let mut list_3201 = scope_3198.start_list(true, Some("SubnetId"));
        for item_3200 in var_3199 {
            #[allow(unused_mut)]
            let mut entry_3202 = list_3201.entry();
            entry_3202.string(item_3200);
        }
        list_3201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("DryRun");
    if let Some(var_3204) = &input.dry_run {
        scope_3203.boolean(*var_3204);
    }
    #[allow(unused_mut)]
    let mut scope_3205 = writer.prefix("NextToken");
    if let Some(var_3206) = &input.next_token {
        scope_3205.string(var_3206);
    }
    #[allow(unused_mut)]
    let mut scope_3207 = writer.prefix("MaxResults");
    if let Some(var_3208) = &input.max_results {
        scope_3207.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3208).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3209 = writer.prefix("DryRun");
    if let Some(var_3210) = &input.dry_run {
        scope_3209.boolean(*var_3210);
    }
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("Filter");
    if let Some(var_3212) = &input.filters {
        let mut list_3214 = scope_3211.start_list(true, Some("Filter"));
        for item_3213 in var_3212 {
            #[allow(unused_mut)]
            let mut entry_3215 = list_3214.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3215, item_3213);
        }
        list_3214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3216 = writer.prefix("MaxResults");
    if let Some(var_3217) = &input.max_results {
        scope_3216.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("NextToken");
    if let Some(var_3219) = &input.next_token {
        scope_3218.string(var_3219);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3220 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3221) = &input.traffic_mirror_filter_ids {
        let mut list_3223 = scope_3220.start_list(true, Some("item"));
        for item_3222 in var_3221 {
            #[allow(unused_mut)]
            let mut entry_3224 = list_3223.entry();
            entry_3224.string(item_3222);
        }
        list_3223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("DryRun");
    if let Some(var_3226) = &input.dry_run {
        scope_3225.boolean(*var_3226);
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("Filter");
    if let Some(var_3228) = &input.filters {
        let mut list_3230 = scope_3227.start_list(true, Some("Filter"));
        for item_3229 in var_3228 {
            #[allow(unused_mut)]
            let mut entry_3231 = list_3230.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3231, item_3229);
        }
        list_3230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("MaxResults");
    if let Some(var_3233) = &input.max_results {
        scope_3232.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3233).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("NextToken");
    if let Some(var_3235) = &input.next_token {
        scope_3234.string(var_3235);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3237) = &input.traffic_mirror_session_ids {
        let mut list_3239 = scope_3236.start_list(true, Some("item"));
        for item_3238 in var_3237 {
            #[allow(unused_mut)]
            let mut entry_3240 = list_3239.entry();
            entry_3240.string(item_3238);
        }
        list_3239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3241 = writer.prefix("DryRun");
    if let Some(var_3242) = &input.dry_run {
        scope_3241.boolean(*var_3242);
    }
    #[allow(unused_mut)]
    let mut scope_3243 = writer.prefix("Filter");
    if let Some(var_3244) = &input.filters {
        let mut list_3246 = scope_3243.start_list(true, Some("Filter"));
        for item_3245 in var_3244 {
            #[allow(unused_mut)]
            let mut entry_3247 = list_3246.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3247, item_3245);
        }
        list_3246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("MaxResults");
    if let Some(var_3249) = &input.max_results {
        scope_3248.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3250 = writer.prefix("NextToken");
    if let Some(var_3251) = &input.next_token {
        scope_3250.string(var_3251);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3252 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3253) = &input.traffic_mirror_target_ids {
        let mut list_3255 = scope_3252.start_list(true, Some("item"));
        for item_3254 in var_3253 {
            #[allow(unused_mut)]
            let mut entry_3256 = list_3255.entry();
            entry_3256.string(item_3254);
        }
        list_3255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("DryRun");
    if let Some(var_3258) = &input.dry_run {
        scope_3257.boolean(*var_3258);
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("Filter");
    if let Some(var_3260) = &input.filters {
        let mut list_3262 = scope_3259.start_list(true, Some("Filter"));
        for item_3261 in var_3260 {
            #[allow(unused_mut)]
            let mut entry_3263 = list_3262.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3263, item_3261);
        }
        list_3262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3264 = writer.prefix("MaxResults");
    if let Some(var_3265) = &input.max_results {
        scope_3264.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3265).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("NextToken");
    if let Some(var_3267) = &input.next_token {
        scope_3266.string(var_3267);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3269) = &input.transit_gateway_attachment_ids {
        let mut list_3271 = scope_3268.start_list(true, None);
        for item_3270 in var_3269 {
            #[allow(unused_mut)]
            let mut entry_3272 = list_3271.entry();
            entry_3272.string(item_3270);
        }
        list_3271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("Filter");
    if let Some(var_3274) = &input.filters {
        let mut list_3276 = scope_3273.start_list(true, Some("Filter"));
        for item_3275 in var_3274 {
            #[allow(unused_mut)]
            let mut entry_3277 = list_3276.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3277, item_3275);
        }
        list_3276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3278 = writer.prefix("MaxResults");
    if let Some(var_3279) = &input.max_results {
        scope_3278.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3279).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3280 = writer.prefix("NextToken");
    if let Some(var_3281) = &input.next_token {
        scope_3280.string(var_3281);
    }
    #[allow(unused_mut)]
    let mut scope_3282 = writer.prefix("DryRun");
    if let Some(var_3283) = &input.dry_run {
        scope_3282.boolean(*var_3283);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3285) = &input.transit_gateway_connect_peer_ids {
        let mut list_3287 = scope_3284.start_list(true, Some("item"));
        for item_3286 in var_3285 {
            #[allow(unused_mut)]
            let mut entry_3288 = list_3287.entry();
            entry_3288.string(item_3286);
        }
        list_3287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3289 = writer.prefix("Filter");
    if let Some(var_3290) = &input.filters {
        let mut list_3292 = scope_3289.start_list(true, Some("Filter"));
        for item_3291 in var_3290 {
            #[allow(unused_mut)]
            let mut entry_3293 = list_3292.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3293, item_3291);
        }
        list_3292.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("MaxResults");
    if let Some(var_3295) = &input.max_results {
        scope_3294.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("NextToken");
    if let Some(var_3297) = &input.next_token {
        scope_3296.string(var_3297);
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("DryRun");
    if let Some(var_3299) = &input.dry_run {
        scope_3298.boolean(*var_3299);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3301) = &input.transit_gateway_attachment_ids {
        let mut list_3303 = scope_3300.start_list(true, None);
        for item_3302 in var_3301 {
            #[allow(unused_mut)]
            let mut entry_3304 = list_3303.entry();
            entry_3304.string(item_3302);
        }
        list_3303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3305 = writer.prefix("Filter");
    if let Some(var_3306) = &input.filters {
        let mut list_3308 = scope_3305.start_list(true, Some("Filter"));
        for item_3307 in var_3306 {
            #[allow(unused_mut)]
            let mut entry_3309 = list_3308.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3309, item_3307);
        }
        list_3308.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3310 = writer.prefix("MaxResults");
    if let Some(var_3311) = &input.max_results {
        scope_3310.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3312 = writer.prefix("NextToken");
    if let Some(var_3313) = &input.next_token {
        scope_3312.string(var_3313);
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("DryRun");
    if let Some(var_3315) = &input.dry_run {
        scope_3314.boolean(*var_3315);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3317) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3319 = scope_3316.start_list(true, Some("item"));
        for item_3318 in var_3317 {
            #[allow(unused_mut)]
            let mut entry_3320 = list_3319.entry();
            entry_3320.string(item_3318);
        }
        list_3319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3321 = writer.prefix("Filter");
    if let Some(var_3322) = &input.filters {
        let mut list_3324 = scope_3321.start_list(true, Some("Filter"));
        for item_3323 in var_3322 {
            #[allow(unused_mut)]
            let mut entry_3325 = list_3324.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3325, item_3323);
        }
        list_3324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3326 = writer.prefix("MaxResults");
    if let Some(var_3327) = &input.max_results {
        scope_3326.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("NextToken");
    if let Some(var_3329) = &input.next_token {
        scope_3328.string(var_3329);
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("DryRun");
    if let Some(var_3331) = &input.dry_run {
        scope_3330.boolean(*var_3331);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3332 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3333) = &input.transit_gateway_attachment_ids {
        let mut list_3335 = scope_3332.start_list(true, None);
        for item_3334 in var_3333 {
            #[allow(unused_mut)]
            let mut entry_3336 = list_3335.entry();
            entry_3336.string(item_3334);
        }
        list_3335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("Filter");
    if let Some(var_3338) = &input.filters {
        let mut list_3340 = scope_3337.start_list(true, Some("Filter"));
        for item_3339 in var_3338 {
            #[allow(unused_mut)]
            let mut entry_3341 = list_3340.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3341, item_3339);
        }
        list_3340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3342 = writer.prefix("MaxResults");
    if let Some(var_3343) = &input.max_results {
        scope_3342.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3344 = writer.prefix("NextToken");
    if let Some(var_3345) = &input.next_token {
        scope_3344.string(var_3345);
    }
    #[allow(unused_mut)]
    let mut scope_3346 = writer.prefix("DryRun");
    if let Some(var_3347) = &input.dry_run {
        scope_3346.boolean(*var_3347);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3348 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3349) = &input.transit_gateway_route_table_ids {
        let mut list_3351 = scope_3348.start_list(true, Some("item"));
        for item_3350 in var_3349 {
            #[allow(unused_mut)]
            let mut entry_3352 = list_3351.entry();
            entry_3352.string(item_3350);
        }
        list_3351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3353 = writer.prefix("Filter");
    if let Some(var_3354) = &input.filters {
        let mut list_3356 = scope_3353.start_list(true, Some("Filter"));
        for item_3355 in var_3354 {
            #[allow(unused_mut)]
            let mut entry_3357 = list_3356.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3357, item_3355);
        }
        list_3356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("MaxResults");
    if let Some(var_3359) = &input.max_results {
        scope_3358.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("NextToken");
    if let Some(var_3361) = &input.next_token {
        scope_3360.string(var_3361);
    }
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("DryRun");
    if let Some(var_3363) = &input.dry_run {
        scope_3362.boolean(*var_3363);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("TransitGatewayIds");
    if let Some(var_3365) = &input.transit_gateway_ids {
        let mut list_3367 = scope_3364.start_list(true, Some("item"));
        for item_3366 in var_3365 {
            #[allow(unused_mut)]
            let mut entry_3368 = list_3367.entry();
            entry_3368.string(item_3366);
        }
        list_3367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("Filter");
    if let Some(var_3370) = &input.filters {
        let mut list_3372 = scope_3369.start_list(true, Some("Filter"));
        for item_3371 in var_3370 {
            #[allow(unused_mut)]
            let mut entry_3373 = list_3372.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3373, item_3371);
        }
        list_3372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3374 = writer.prefix("MaxResults");
    if let Some(var_3375) = &input.max_results {
        scope_3374.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3375).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("NextToken");
    if let Some(var_3377) = &input.next_token {
        scope_3376.string(var_3377);
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("DryRun");
    if let Some(var_3379) = &input.dry_run {
        scope_3378.boolean(*var_3379);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3381) = &input.transit_gateway_attachment_ids {
        let mut list_3383 = scope_3380.start_list(true, None);
        for item_3382 in var_3381 {
            #[allow(unused_mut)]
            let mut entry_3384 = list_3383.entry();
            entry_3384.string(item_3382);
        }
        list_3383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("Filter");
    if let Some(var_3386) = &input.filters {
        let mut list_3388 = scope_3385.start_list(true, Some("Filter"));
        for item_3387 in var_3386 {
            #[allow(unused_mut)]
            let mut entry_3389 = list_3388.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3389, item_3387);
        }
        list_3388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("MaxResults");
    if let Some(var_3391) = &input.max_results {
        scope_3390.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3391).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("NextToken");
    if let Some(var_3393) = &input.next_token {
        scope_3392.string(var_3393);
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("DryRun");
    if let Some(var_3395) = &input.dry_run {
        scope_3394.boolean(*var_3395);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("AssociationId");
    if let Some(var_3397) = &input.association_ids {
        let mut list_3399 = scope_3396.start_list(true, Some("item"));
        for item_3398 in var_3397 {
            #[allow(unused_mut)]
            let mut entry_3400 = list_3399.entry();
            entry_3400.string(item_3398);
        }
        list_3399.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("DryRun");
    if let Some(var_3402) = &input.dry_run {
        scope_3401.boolean(*var_3402);
    }
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("Filter");
    if let Some(var_3404) = &input.filters {
        let mut list_3406 = scope_3403.start_list(true, Some("Filter"));
        for item_3405 in var_3404 {
            #[allow(unused_mut)]
            let mut entry_3407 = list_3406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3407, item_3405);
        }
        list_3406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("NextToken");
    if let Some(var_3409) = &input.next_token {
        scope_3408.string(var_3409);
    }
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("MaxResults");
    if let Some(var_3411) = &input.max_results {
        scope_3410.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3411).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("Attribute");
    if let Some(var_3413) = &input.attribute {
        scope_3412.string(var_3413.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("VolumeId");
    if let Some(var_3415) = &input.volume_id {
        scope_3414.string(var_3415);
    }
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("DryRun");
    if let Some(var_3417) = &input.dry_run {
        scope_3416.boolean(*var_3417);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3418 = writer.prefix("Filter");
    if let Some(var_3419) = &input.filters {
        let mut list_3421 = scope_3418.start_list(true, Some("Filter"));
        for item_3420 in var_3419 {
            #[allow(unused_mut)]
            let mut entry_3422 = list_3421.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3422, item_3420);
        }
        list_3421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("VolumeId");
    if let Some(var_3424) = &input.volume_ids {
        let mut list_3426 = scope_3423.start_list(true, Some("VolumeId"));
        for item_3425 in var_3424 {
            #[allow(unused_mut)]
            let mut entry_3427 = list_3426.entry();
            entry_3427.string(item_3425);
        }
        list_3426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3428 = writer.prefix("DryRun");
    if let Some(var_3429) = &input.dry_run {
        scope_3428.boolean(*var_3429);
    }
    #[allow(unused_mut)]
    let mut scope_3430 = writer.prefix("MaxResults");
    if let Some(var_3431) = &input.max_results {
        scope_3430.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("NextToken");
    if let Some(var_3433) = &input.next_token {
        scope_3432.string(var_3433);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("DryRun");
    if let Some(var_3435) = &input.dry_run {
        scope_3434.boolean(*var_3435);
    }
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("VolumeId");
    if let Some(var_3437) = &input.volume_ids {
        let mut list_3439 = scope_3436.start_list(true, Some("VolumeId"));
        for item_3438 in var_3437 {
            #[allow(unused_mut)]
            let mut entry_3440 = list_3439.entry();
            entry_3440.string(item_3438);
        }
        list_3439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("Filter");
    if let Some(var_3442) = &input.filters {
        let mut list_3444 = scope_3441.start_list(true, Some("Filter"));
        for item_3443 in var_3442 {
            #[allow(unused_mut)]
            let mut entry_3445 = list_3444.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3445, item_3443);
        }
        list_3444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("NextToken");
    if let Some(var_3447) = &input.next_token {
        scope_3446.string(var_3447);
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("MaxResults");
    if let Some(var_3449) = &input.max_results {
        scope_3448.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3449).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("Filter");
    if let Some(var_3451) = &input.filters {
        let mut list_3453 = scope_3450.start_list(true, Some("Filter"));
        for item_3452 in var_3451 {
            #[allow(unused_mut)]
            let mut entry_3454 = list_3453.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3454, item_3452);
        }
        list_3453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3455 = writer.prefix("MaxResults");
    if let Some(var_3456) = &input.max_results {
        scope_3455.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("NextToken");
    if let Some(var_3458) = &input.next_token {
        scope_3457.string(var_3458);
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("VolumeId");
    if let Some(var_3460) = &input.volume_ids {
        let mut list_3462 = scope_3459.start_list(true, Some("VolumeId"));
        for item_3461 in var_3460 {
            #[allow(unused_mut)]
            let mut entry_3463 = list_3462.entry();
            entry_3463.string(item_3461);
        }
        list_3462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("DryRun");
    if let Some(var_3465) = &input.dry_run {
        scope_3464.boolean(*var_3465);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("Attribute");
    if let Some(var_3467) = &input.attribute {
        scope_3466.string(var_3467.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("VpcId");
    if let Some(var_3469) = &input.vpc_id {
        scope_3468.string(var_3469);
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("DryRun");
    if let Some(var_3471) = &input.dry_run {
        scope_3470.boolean(*var_3471);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("Filter");
    if let Some(var_3473) = &input.filters {
        let mut list_3475 = scope_3472.start_list(true, Some("Filter"));
        for item_3474 in var_3473 {
            #[allow(unused_mut)]
            let mut entry_3476 = list_3475.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3476, item_3474);
        }
        list_3475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("DryRun");
    if let Some(var_3478) = &input.dry_run {
        scope_3477.boolean(*var_3478);
    }
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("VpcId");
    if let Some(var_3480) = &input.vpc_ids {
        let mut list_3482 = scope_3479.start_list(true, Some("VpcId"));
        for item_3481 in var_3480 {
            #[allow(unused_mut)]
            let mut entry_3483 = list_3482.entry();
            entry_3483.string(item_3481);
        }
        list_3482.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("MaxResults");
    if let Some(var_3485) = &input.max_results {
        scope_3484.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3485).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("NextToken");
    if let Some(var_3487) = &input.next_token {
        scope_3486.string(var_3487);
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("VpcIds");
    if let Some(var_3489) = &input.vpc_ids {
        let mut list_3491 = scope_3488.start_list(true, Some("VpcId"));
        for item_3490 in var_3489 {
            #[allow(unused_mut)]
            let mut entry_3492 = list_3491.entry();
            entry_3492.string(item_3490);
        }
        list_3491.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3493 = writer.prefix("DryRun");
    if let Some(var_3494) = &input.dry_run {
        scope_3493.boolean(*var_3494);
    }
    #[allow(unused_mut)]
    let mut scope_3495 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3496) = &input.connection_notification_id {
        scope_3495.string(var_3496);
    }
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("Filter");
    if let Some(var_3498) = &input.filters {
        let mut list_3500 = scope_3497.start_list(true, Some("Filter"));
        for item_3499 in var_3498 {
            #[allow(unused_mut)]
            let mut entry_3501 = list_3500.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3501, item_3499);
        }
        list_3500.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("MaxResults");
    if let Some(var_3503) = &input.max_results {
        scope_3502.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3503).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("NextToken");
    if let Some(var_3505) = &input.next_token {
        scope_3504.string(var_3505);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("DryRun");
    if let Some(var_3507) = &input.dry_run {
        scope_3506.boolean(*var_3507);
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("Filter");
    if let Some(var_3509) = &input.filters {
        let mut list_3511 = scope_3508.start_list(true, Some("Filter"));
        for item_3510 in var_3509 {
            #[allow(unused_mut)]
            let mut entry_3512 = list_3511.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3512, item_3510);
        }
        list_3511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("MaxResults");
    if let Some(var_3514) = &input.max_results {
        scope_3513.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3514).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("NextToken");
    if let Some(var_3516) = &input.next_token {
        scope_3515.string(var_3516);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("DryRun");
    if let Some(var_3518) = &input.dry_run {
        scope_3517.boolean(*var_3518);
    }
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("VpcEndpointId");
    if let Some(var_3520) = &input.vpc_endpoint_ids {
        let mut list_3522 = scope_3519.start_list(true, Some("item"));
        for item_3521 in var_3520 {
            #[allow(unused_mut)]
            let mut entry_3523 = list_3522.entry();
            entry_3523.string(item_3521);
        }
        list_3522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("Filter");
    if let Some(var_3525) = &input.filters {
        let mut list_3527 = scope_3524.start_list(true, Some("Filter"));
        for item_3526 in var_3525 {
            #[allow(unused_mut)]
            let mut entry_3528 = list_3527.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3528, item_3526);
        }
        list_3527.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3529 = writer.prefix("MaxResults");
    if let Some(var_3530) = &input.max_results {
        scope_3529.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3530).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("NextToken");
    if let Some(var_3532) = &input.next_token {
        scope_3531.string(var_3532);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("DryRun");
    if let Some(var_3534) = &input.dry_run {
        scope_3533.boolean(*var_3534);
    }
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("ServiceId");
    if let Some(var_3536) = &input.service_ids {
        let mut list_3538 = scope_3535.start_list(true, Some("item"));
        for item_3537 in var_3536 {
            #[allow(unused_mut)]
            let mut entry_3539 = list_3538.entry();
            entry_3539.string(item_3537);
        }
        list_3538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("Filter");
    if let Some(var_3541) = &input.filters {
        let mut list_3543 = scope_3540.start_list(true, Some("Filter"));
        for item_3542 in var_3541 {
            #[allow(unused_mut)]
            let mut entry_3544 = list_3543.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3544, item_3542);
        }
        list_3543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("MaxResults");
    if let Some(var_3546) = &input.max_results {
        scope_3545.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3546).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("NextToken");
    if let Some(var_3548) = &input.next_token {
        scope_3547.string(var_3548);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("DryRun");
    if let Some(var_3550) = &input.dry_run {
        scope_3549.boolean(*var_3550);
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("ServiceId");
    if let Some(var_3552) = &input.service_id {
        scope_3551.string(var_3552);
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("Filter");
    if let Some(var_3554) = &input.filters {
        let mut list_3556 = scope_3553.start_list(true, Some("Filter"));
        for item_3555 in var_3554 {
            #[allow(unused_mut)]
            let mut entry_3557 = list_3556.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3557, item_3555);
        }
        list_3556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3558 = writer.prefix("MaxResults");
    if let Some(var_3559) = &input.max_results {
        scope_3558.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3559).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("NextToken");
    if let Some(var_3561) = &input.next_token {
        scope_3560.string(var_3561);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("DryRun");
    if let Some(var_3563) = &input.dry_run {
        scope_3562.boolean(*var_3563);
    }
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("ServiceName");
    if let Some(var_3565) = &input.service_names {
        let mut list_3567 = scope_3564.start_list(true, Some("item"));
        for item_3566 in var_3565 {
            #[allow(unused_mut)]
            let mut entry_3568 = list_3567.entry();
            entry_3568.string(item_3566);
        }
        list_3567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("Filter");
    if let Some(var_3570) = &input.filters {
        let mut list_3572 = scope_3569.start_list(true, Some("Filter"));
        for item_3571 in var_3570 {
            #[allow(unused_mut)]
            let mut entry_3573 = list_3572.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3573, item_3571);
        }
        list_3572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3574 = writer.prefix("MaxResults");
    if let Some(var_3575) = &input.max_results {
        scope_3574.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("NextToken");
    if let Some(var_3577) = &input.next_token {
        scope_3576.string(var_3577);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("Filter");
    if let Some(var_3579) = &input.filters {
        let mut list_3581 = scope_3578.start_list(true, Some("Filter"));
        for item_3580 in var_3579 {
            #[allow(unused_mut)]
            let mut entry_3582 = list_3581.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3582, item_3580);
        }
        list_3581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("DryRun");
    if let Some(var_3584) = &input.dry_run {
        scope_3583.boolean(*var_3584);
    }
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3586) = &input.vpc_peering_connection_ids {
        let mut list_3588 = scope_3585.start_list(true, Some("item"));
        for item_3587 in var_3586 {
            #[allow(unused_mut)]
            let mut entry_3589 = list_3588.entry();
            entry_3589.string(item_3587);
        }
        list_3588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3590 = writer.prefix("NextToken");
    if let Some(var_3591) = &input.next_token {
        scope_3590.string(var_3591);
    }
    #[allow(unused_mut)]
    let mut scope_3592 = writer.prefix("MaxResults");
    if let Some(var_3593) = &input.max_results {
        scope_3592.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3593).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("Filter");
    if let Some(var_3595) = &input.filters {
        let mut list_3597 = scope_3594.start_list(true, Some("Filter"));
        for item_3596 in var_3595 {
            #[allow(unused_mut)]
            let mut entry_3598 = list_3597.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3598, item_3596);
        }
        list_3597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("VpcId");
    if let Some(var_3600) = &input.vpc_ids {
        let mut list_3602 = scope_3599.start_list(true, Some("VpcId"));
        for item_3601 in var_3600 {
            #[allow(unused_mut)]
            let mut entry_3603 = list_3602.entry();
            entry_3603.string(item_3601);
        }
        list_3602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3604 = writer.prefix("DryRun");
    if let Some(var_3605) = &input.dry_run {
        scope_3604.boolean(*var_3605);
    }
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("NextToken");
    if let Some(var_3607) = &input.next_token {
        scope_3606.string(var_3607);
    }
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("MaxResults");
    if let Some(var_3609) = &input.max_results {
        scope_3608.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3609).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("Filter");
    if let Some(var_3611) = &input.filters {
        let mut list_3613 = scope_3610.start_list(true, Some("Filter"));
        for item_3612 in var_3611 {
            #[allow(unused_mut)]
            let mut entry_3614 = list_3613.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3614, item_3612);
        }
        list_3613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("VpnConnectionId");
    if let Some(var_3616) = &input.vpn_connection_ids {
        let mut list_3618 = scope_3615.start_list(true, Some("VpnConnectionId"));
        for item_3617 in var_3616 {
            #[allow(unused_mut)]
            let mut entry_3619 = list_3618.entry();
            entry_3619.string(item_3617);
        }
        list_3618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3620 = writer.prefix("DryRun");
    if let Some(var_3621) = &input.dry_run {
        scope_3620.boolean(*var_3621);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("Filter");
    if let Some(var_3623) = &input.filters {
        let mut list_3625 = scope_3622.start_list(true, Some("Filter"));
        for item_3624 in var_3623 {
            #[allow(unused_mut)]
            let mut entry_3626 = list_3625.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3626, item_3624);
        }
        list_3625.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("VpnGatewayId");
    if let Some(var_3628) = &input.vpn_gateway_ids {
        let mut list_3630 = scope_3627.start_list(true, Some("VpnGatewayId"));
        for item_3629 in var_3628 {
            #[allow(unused_mut)]
            let mut entry_3631 = list_3630.entry();
            entry_3631.string(item_3629);
        }
        list_3630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3632 = writer.prefix("DryRun");
    if let Some(var_3633) = &input.dry_run {
        scope_3632.boolean(*var_3633);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3634 = writer.prefix("DryRun");
    if let Some(var_3635) = &input.dry_run {
        scope_3634.boolean(*var_3635);
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("InstanceId");
    if let Some(var_3637) = &input.instance_id {
        scope_3636.string(var_3637);
    }
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("VpcId");
    if let Some(var_3639) = &input.vpc_id {
        scope_3638.string(var_3639);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("DryRun");
    if let Some(var_3641) = &input.dry_run {
        scope_3640.boolean(*var_3641);
    }
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("InternetGatewayId");
    if let Some(var_3643) = &input.internet_gateway_id {
        scope_3642.string(var_3643);
    }
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("VpcId");
    if let Some(var_3645) = &input.vpc_id {
        scope_3644.string(var_3645);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3646 = writer.prefix("AttachmentId");
    if let Some(var_3647) = &input.attachment_id {
        scope_3646.string(var_3647);
    }
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("DryRun");
    if let Some(var_3649) = &input.dry_run {
        scope_3648.boolean(*var_3649);
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("Force");
    if let Some(var_3651) = &input.force {
        scope_3650.boolean(*var_3651);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("Device");
    if let Some(var_3653) = &input.device {
        scope_3652.string(var_3653);
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("Force");
    if let Some(var_3655) = &input.force {
        scope_3654.boolean(*var_3655);
    }
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("InstanceId");
    if let Some(var_3657) = &input.instance_id {
        scope_3656.string(var_3657);
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("VolumeId");
    if let Some(var_3659) = &input.volume_id {
        scope_3658.string(var_3659);
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("DryRun");
    if let Some(var_3661) = &input.dry_run {
        scope_3660.boolean(*var_3661);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("VpcId");
    if let Some(var_3663) = &input.vpc_id {
        scope_3662.string(var_3663);
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("VpnGatewayId");
    if let Some(var_3665) = &input.vpn_gateway_id {
        scope_3664.string(var_3665);
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("DryRun");
    if let Some(var_3667) = &input.dry_run {
        scope_3666.boolean(*var_3667);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("DryRun");
    if let Some(var_3669) = &input.dry_run {
        scope_3668.boolean(*var_3669);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("AvailabilityZone");
    if let Some(var_3671) = &input.availability_zones {
        let mut list_3673 = scope_3670.start_list(true, Some("AvailabilityZone"));
        for item_3672 in var_3671 {
            #[allow(unused_mut)]
            let mut entry_3674 = list_3673.entry();
            entry_3674.string(item_3672);
        }
        list_3673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("SourceSnapshotId");
    if let Some(var_3676) = &input.source_snapshot_ids {
        let mut list_3678 = scope_3675.start_list(true, Some("SnapshotId"));
        for item_3677 in var_3676 {
            #[allow(unused_mut)]
            let mut entry_3679 = list_3678.entry();
            entry_3679.string(item_3677);
        }
        list_3678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("DryRun");
    if let Some(var_3681) = &input.dry_run {
        scope_3680.boolean(*var_3681);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("ImageId");
    if let Some(var_3683) = &input.image_id {
        scope_3682.string(var_3683);
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("DryRun");
    if let Some(var_3685) = &input.dry_run {
        scope_3684.boolean(*var_3685);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("DryRun");
    if let Some(var_3687) = &input.dry_run {
        scope_3686.boolean(*var_3687);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3689) = &input.transit_gateway_route_table_id {
        scope_3688.string(var_3689);
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3691) = &input.transit_gateway_attachment_id {
        scope_3690.string(var_3691);
    }
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("DryRun");
    if let Some(var_3693) = &input.dry_run {
        scope_3692.boolean(*var_3693);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3694 = writer.prefix("GatewayId");
    if let Some(var_3695) = &input.gateway_id {
        scope_3694.string(var_3695);
    }
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("RouteTableId");
    if let Some(var_3697) = &input.route_table_id {
        scope_3696.string(var_3697);
    }
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("DryRun");
    if let Some(var_3699) = &input.dry_run {
        scope_3698.boolean(*var_3699);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("DryRun");
    if let Some(var_3701) = &input.dry_run {
        scope_3700.boolean(*var_3701);
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("VpcId");
    if let Some(var_3703) = &input.vpc_id {
        scope_3702.string(var_3703);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("VpcId");
    if let Some(var_3705) = &input.vpc_id {
        scope_3704.string(var_3705);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("AssociationId");
    if let Some(var_3707) = &input.association_id {
        scope_3706.string(var_3707);
    }
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("PublicIp");
    if let Some(var_3709) = &input.public_ip {
        scope_3708.string(var_3709);
    }
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("DryRun");
    if let Some(var_3711) = &input.dry_run {
        scope_3710.boolean(*var_3711);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3713) = &input.client_vpn_endpoint_id {
        scope_3712.string(var_3713);
    }
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("AssociationId");
    if let Some(var_3715) = &input.association_id {
        scope_3714.string(var_3715);
    }
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("DryRun");
    if let Some(var_3717) = &input.dry_run {
        scope_3716.boolean(*var_3717);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("CertificateArn");
    if let Some(var_3719) = &input.certificate_arn {
        scope_3718.string(var_3719);
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("RoleArn");
    if let Some(var_3721) = &input.role_arn {
        scope_3720.string(var_3721);
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("DryRun");
    if let Some(var_3723) = &input.dry_run {
        scope_3722.boolean(*var_3723);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("AssociationId");
    if let Some(var_3725) = &input.association_id {
        scope_3724.string(var_3725);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("DryRun");
    if let Some(var_3727) = &input.dry_run {
        scope_3726.boolean(*var_3727);
    }
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("InstanceEventWindowId");
    if let Some(var_3729) = &input.instance_event_window_id {
        scope_3728.string(var_3729);
    }
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("AssociationTarget");
    if let Some(var_3731) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_3730, var_3731);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("AssociationId");
    if let Some(var_3733) = &input.association_id {
        scope_3732.string(var_3733);
    }
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("DryRun");
    if let Some(var_3735) = &input.dry_run {
        scope_3734.boolean(*var_3735);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("AssociationId");
    if let Some(var_3737) = &input.association_id {
        scope_3736.string(var_3737);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3739) = &input.transit_gateway_multicast_domain_id {
        scope_3738.string(var_3739);
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3741) = &input.transit_gateway_attachment_id {
        scope_3740.string(var_3741);
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("SubnetIds");
    if let Some(var_3743) = &input.subnet_ids {
        let mut list_3745 = scope_3742.start_list(true, Some("item"));
        for item_3744 in var_3743 {
            #[allow(unused_mut)]
            let mut entry_3746 = list_3745.entry();
            entry_3746.string(item_3744);
        }
        list_3745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3747 = writer.prefix("DryRun");
    if let Some(var_3748) = &input.dry_run {
        scope_3747.boolean(*var_3748);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3749 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3750) = &input.transit_gateway_route_table_id {
        scope_3749.string(var_3750);
    }
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3752) = &input.transit_gateway_attachment_id {
        scope_3751.string(var_3752);
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("DryRun");
    if let Some(var_3754) = &input.dry_run {
        scope_3753.boolean(*var_3754);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("AssociationId");
    if let Some(var_3756) = &input.association_id {
        scope_3755.string(var_3756);
    }
    #[allow(unused_mut)]
    let mut scope_3757 = writer.prefix("ClientToken");
    if let Some(var_3758) = &input.client_token {
        scope_3757.string(var_3758);
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("DryRun");
    if let Some(var_3760) = &input.dry_run {
        scope_3759.boolean(*var_3760);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("AssociationId");
    if let Some(var_3762) = &input.association_id {
        scope_3761.string(var_3762);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("DryRun");
    if let Some(var_3764) = &input.dry_run {
        scope_3763.boolean(*var_3764);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("AvailabilityZone");
    if let Some(var_3766) = &input.availability_zones {
        let mut list_3768 = scope_3765.start_list(true, Some("AvailabilityZone"));
        for item_3767 in var_3766 {
            #[allow(unused_mut)]
            let mut entry_3769 = list_3768.entry();
            entry_3769.string(item_3767);
        }
        list_3768.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3770 = writer.prefix("SourceSnapshotId");
    if let Some(var_3771) = &input.source_snapshot_ids {
        let mut list_3773 = scope_3770.start_list(true, Some("SnapshotId"));
        for item_3772 in var_3771 {
            #[allow(unused_mut)]
            let mut entry_3774 = list_3773.entry();
            entry_3774.string(item_3772);
        }
        list_3773.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3775 = writer.prefix("DryRun");
    if let Some(var_3776) = &input.dry_run {
        scope_3775.boolean(*var_3776);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3777 = writer.prefix("ImageId");
    if let Some(var_3778) = &input.image_id {
        scope_3777.string(var_3778);
    }
    #[allow(unused_mut)]
    let mut scope_3779 = writer.prefix("DeprecateAt");
    if let Some(var_3780) = &input.deprecate_at {
        scope_3779.instant(var_3780, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("DryRun");
    if let Some(var_3782) = &input.dry_run {
        scope_3781.boolean(*var_3782);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("DryRun");
    if let Some(var_3784) = &input.dry_run {
        scope_3783.boolean(*var_3784);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3786) = &input.transit_gateway_route_table_id {
        scope_3785.string(var_3786);
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3788) = &input.transit_gateway_attachment_id {
        scope_3787.string(var_3788);
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("DryRun");
    if let Some(var_3790) = &input.dry_run {
        scope_3789.boolean(*var_3790);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("GatewayId");
    if let Some(var_3792) = &input.gateway_id {
        scope_3791.string(var_3792);
    }
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("RouteTableId");
    if let Some(var_3794) = &input.route_table_id {
        scope_3793.string(var_3794);
    }
    #[allow(unused_mut)]
    let mut scope_3795 = writer.prefix("DryRun");
    if let Some(var_3796) = &input.dry_run {
        scope_3795.boolean(*var_3796);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("DryRun");
    if let Some(var_3798) = &input.dry_run {
        scope_3797.boolean(*var_3798);
    }
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("VolumeId");
    if let Some(var_3800) = &input.volume_id {
        scope_3799.string(var_3800);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("DryRun");
    if let Some(var_3802) = &input.dry_run {
        scope_3801.boolean(*var_3802);
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("VpcId");
    if let Some(var_3804) = &input.vpc_id {
        scope_3803.string(var_3804);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("VpcId");
    if let Some(var_3806) = &input.vpc_id {
        scope_3805.string(var_3806);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3808) = &input.client_vpn_endpoint_id {
        scope_3807.string(var_3808);
    }
    #[allow(unused_mut)]
    let mut scope_3809 = writer.prefix("DryRun");
    if let Some(var_3810) = &input.dry_run {
        scope_3809.boolean(*var_3810);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3811 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3812) = &input.client_vpn_endpoint_id {
        scope_3811.string(var_3812);
    }
    #[allow(unused_mut)]
    let mut scope_3813 = writer.prefix("DryRun");
    if let Some(var_3814) = &input.dry_run {
        scope_3813.boolean(*var_3814);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3815 = writer.prefix("ClientToken");
    if let Some(var_3816) = &input.client_token {
        scope_3815.string(var_3816);
    }
    #[allow(unused_mut)]
    let mut scope_3817 = writer.prefix("Description");
    if let Some(var_3818) = &input.description {
        scope_3817.string(var_3818);
    }
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("DiskImageFormat");
    if let Some(var_3820) = &input.disk_image_format {
        scope_3819.string(var_3820.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("DryRun");
    if let Some(var_3822) = &input.dry_run {
        scope_3821.boolean(*var_3822);
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("ImageId");
    if let Some(var_3824) = &input.image_id {
        scope_3823.string(var_3824);
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("S3ExportLocation");
    if let Some(var_3826) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_3825, var_3826,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("RoleName");
    if let Some(var_3828) = &input.role_name {
        scope_3827.string(var_3828);
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("TagSpecification");
    if let Some(var_3830) = &input.tag_specifications {
        let mut list_3832 = scope_3829.start_list(true, Some("item"));
        for item_3831 in var_3830 {
            #[allow(unused_mut)]
            let mut entry_3833 = list_3832.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_3833, item_3831,
            );
        }
        list_3832.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3834 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3835) = &input.transit_gateway_route_table_id {
        scope_3834.string(var_3835);
    }
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("Filter");
    if let Some(var_3837) = &input.filters {
        let mut list_3839 = scope_3836.start_list(true, Some("Filter"));
        for item_3838 in var_3837 {
            #[allow(unused_mut)]
            let mut entry_3840 = list_3839.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3840, item_3838);
        }
        list_3839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("S3Bucket");
    if let Some(var_3842) = &input.s3_bucket {
        scope_3841.string(var_3842);
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("DryRun");
    if let Some(var_3844) = &input.dry_run {
        scope_3843.boolean(*var_3844);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("CertificateArn");
    if let Some(var_3846) = &input.certificate_arn {
        scope_3845.string(var_3846);
    }
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("DryRun");
    if let Some(var_3848) = &input.dry_run {
        scope_3847.boolean(*var_3848);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("PoolId");
    if let Some(var_3850) = &input.pool_id {
        scope_3849.string(var_3850);
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("NextToken");
    if let Some(var_3852) = &input.next_token {
        scope_3851.string(var_3852);
    }
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("MaxResults");
    if let Some(var_3854) = &input.max_results {
        scope_3853.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("DryRun");
    if let Some(var_3856) = &input.dry_run {
        scope_3855.boolean(*var_3856);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("CapacityReservationId");
    if let Some(var_3858) = &input.capacity_reservation_id {
        scope_3857.string(var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("NextToken");
    if let Some(var_3860) = &input.next_token {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("MaxResults");
    if let Some(var_3862) = &input.max_results {
        scope_3861.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("DryRun");
    if let Some(var_3864) = &input.dry_run {
        scope_3863.boolean(*var_3864);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("PoolId");
    if let Some(var_3866) = &input.pool_id {
        scope_3865.string(var_3866);
    }
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("Filter");
    if let Some(var_3868) = &input.filters {
        let mut list_3870 = scope_3867.start_list(true, Some("Filter"));
        for item_3869 in var_3868 {
            #[allow(unused_mut)]
            let mut entry_3871 = list_3870.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3871, item_3869);
        }
        list_3870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("MaxResults");
    if let Some(var_3873) = &input.max_results {
        scope_3872.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3873).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("NextToken");
    if let Some(var_3875) = &input.next_token {
        scope_3874.string(var_3875);
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("DryRun");
    if let Some(var_3877) = &input.dry_run {
        scope_3876.boolean(*var_3877);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("InstanceId");
    if let Some(var_3879) = &input.instance_id {
        scope_3878.string(var_3879);
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("DryRun");
    if let Some(var_3881) = &input.dry_run {
        scope_3880.boolean(*var_3881);
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("Latest");
    if let Some(var_3883) = &input.latest {
        scope_3882.boolean(*var_3883);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("DryRun");
    if let Some(var_3885) = &input.dry_run {
        scope_3884.boolean(*var_3885);
    }
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("InstanceId");
    if let Some(var_3887) = &input.instance_id {
        scope_3886.string(var_3887);
    }
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("WakeUp");
    if let Some(var_3889) = &input.wake_up {
        scope_3888.boolean(*var_3889);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("DryRun");
    if let Some(var_3891) = &input.dry_run {
        scope_3890.boolean(*var_3891);
    }
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("InstanceFamily");
    if let Some(var_3893) = &input.instance_family {
        scope_3892.string(var_3893.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("DryRun");
    if let Some(var_3895) = &input.dry_run {
        scope_3894.boolean(*var_3895);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("DryRun");
    if let Some(var_3897) = &input.dry_run {
        scope_3896.boolean(*var_3897);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("DryRun");
    if let Some(var_3899) = &input.dry_run {
        scope_3898.boolean(*var_3899);
    }
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("FlowLogId");
    if let Some(var_3901) = &input.flow_log_id {
        scope_3900.string(var_3901);
    }
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3903) = &input.config_delivery_s3_destination_arn {
        scope_3902.string(var_3903);
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("IntegrateService");
    if let Some(var_3905) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_3904, var_3905);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("CapacityReservationId");
    if let Some(var_3907) = &input.capacity_reservation_id {
        scope_3906.string(var_3907);
    }
    #[allow(unused_mut)]
    let mut scope_3908 = writer.prefix("NextToken");
    if let Some(var_3909) = &input.next_token {
        scope_3908.string(var_3909);
    }
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("MaxResults");
    if let Some(var_3911) = &input.max_results {
        scope_3910.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3911).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("DryRun");
    if let Some(var_3913) = &input.dry_run {
        scope_3912.boolean(*var_3913);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("HostIdSet");
    if let Some(var_3915) = &input.host_id_set {
        let mut list_3917 = scope_3914.start_list(true, Some("item"));
        for item_3916 in var_3915 {
            #[allow(unused_mut)]
            let mut entry_3918 = list_3917.entry();
            entry_3918.string(item_3916);
        }
        list_3917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3919 = writer.prefix("OfferingId");
    if let Some(var_3920) = &input.offering_id {
        scope_3919.string(var_3920);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("DryRun");
    if let Some(var_3922) = &input.dry_run {
        scope_3921.boolean(*var_3922);
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("InstanceId");
    if let Some(var_3924) = &input.instance_id {
        scope_3923.string(var_3924);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("DryRun");
    if let Some(var_3926) = &input.dry_run {
        scope_3925.boolean(*var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("PrefixListId");
    if let Some(var_3928) = &input.prefix_list_id {
        scope_3927.string(var_3928);
    }
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("MaxResults");
    if let Some(var_3930) = &input.max_results {
        scope_3929.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("NextToken");
    if let Some(var_3932) = &input.next_token {
        scope_3931.string(var_3932);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("DryRun");
    if let Some(var_3934) = &input.dry_run {
        scope_3933.boolean(*var_3934);
    }
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("PrefixListId");
    if let Some(var_3936) = &input.prefix_list_id {
        scope_3935.string(var_3936);
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("TargetVersion");
    if let Some(var_3938) = &input.target_version {
        scope_3937.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("MaxResults");
    if let Some(var_3940) = &input.max_results {
        scope_3939.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3940).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("NextToken");
    if let Some(var_3942) = &input.next_token {
        scope_3941.string(var_3942);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("InstanceId");
    if let Some(var_3944) = &input.instance_id {
        scope_3943.string(var_3944);
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("DryRun");
    if let Some(var_3946) = &input.dry_run {
        scope_3945.boolean(*var_3946);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("DryRun");
    if let Some(var_3948) = &input.dry_run {
        scope_3947.boolean(*var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("ReservedInstanceId");
    if let Some(var_3950) = &input.reserved_instance_ids {
        let mut list_3952 = scope_3949.start_list(true, Some("ReservedInstanceId"));
        for item_3951 in var_3950 {
            #[allow(unused_mut)]
            let mut entry_3953 = list_3952.entry();
            entry_3953.string(item_3951);
        }
        list_3952.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("TargetConfiguration");
    if let Some(var_3955) = &input.target_configurations {
        let mut list_3957 = scope_3954.start_list(true, Some("TargetConfigurationRequest"));
        for item_3956 in var_3955 {
            #[allow(unused_mut)]
            let mut entry_3958 = list_3957.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_3958, item_3956,
            );
        }
        list_3957.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("DryRun");
    if let Some(var_3960) = &input.dry_run {
        scope_3959.boolean(*var_3960);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("Filter");
    if let Some(var_3962) = &input.filters {
        let mut list_3964 = scope_3961.start_list(true, Some("Filter"));
        for item_3963 in var_3962 {
            #[allow(unused_mut)]
            let mut entry_3965 = list_3964.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3965, item_3963);
        }
        list_3964.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("SubnetId");
    if let Some(var_3967) = &input.subnet_id {
        scope_3966.string(var_3967);
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("DryRun");
    if let Some(var_3969) = &input.dry_run {
        scope_3968.boolean(*var_3969);
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("NextToken");
    if let Some(var_3971) = &input.next_token {
        scope_3970.string(var_3971);
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("MaxResults");
    if let Some(var_3973) = &input.max_results {
        scope_3972.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3973).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3975) = &input.transit_gateway_attachment_id {
        scope_3974.string(var_3975);
    }
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("Filter");
    if let Some(var_3977) = &input.filters {
        let mut list_3979 = scope_3976.start_list(true, Some("Filter"));
        for item_3978 in var_3977 {
            #[allow(unused_mut)]
            let mut entry_3980 = list_3979.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3980, item_3978);
        }
        list_3979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("MaxResults");
    if let Some(var_3982) = &input.max_results {
        scope_3981.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3982).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("NextToken");
    if let Some(var_3984) = &input.next_token {
        scope_3983.string(var_3984);
    }
    #[allow(unused_mut)]
    let mut scope_3985 = writer.prefix("DryRun");
    if let Some(var_3986) = &input.dry_run {
        scope_3985.boolean(*var_3986);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3988) = &input.transit_gateway_multicast_domain_id {
        scope_3987.string(var_3988);
    }
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("Filter");
    if let Some(var_3990) = &input.filters {
        let mut list_3992 = scope_3989.start_list(true, Some("Filter"));
        for item_3991 in var_3990 {
            #[allow(unused_mut)]
            let mut entry_3993 = list_3992.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3993, item_3991);
        }
        list_3992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("MaxResults");
    if let Some(var_3995) = &input.max_results {
        scope_3994.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3995).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("NextToken");
    if let Some(var_3997) = &input.next_token {
        scope_3996.string(var_3997);
    }
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("DryRun");
    if let Some(var_3999) = &input.dry_run {
        scope_3998.boolean(*var_3999);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4001) = &input.transit_gateway_route_table_id {
        scope_4000.string(var_4001);
    }
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("Filter");
    if let Some(var_4003) = &input.filters {
        let mut list_4005 = scope_4002.start_list(true, Some("Filter"));
        for item_4004 in var_4003 {
            #[allow(unused_mut)]
            let mut entry_4006 = list_4005.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4006, item_4004);
        }
        list_4005.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("MaxResults");
    if let Some(var_4008) = &input.max_results {
        scope_4007.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4008).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("NextToken");
    if let Some(var_4010) = &input.next_token {
        scope_4009.string(var_4010);
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("DryRun");
    if let Some(var_4012) = &input.dry_run {
        scope_4011.boolean(*var_4012);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4014) = &input.transit_gateway_route_table_id {
        scope_4013.string(var_4014);
    }
    #[allow(unused_mut)]
    let mut scope_4015 = writer.prefix("Filter");
    if let Some(var_4016) = &input.filters {
        let mut list_4018 = scope_4015.start_list(true, Some("Filter"));
        for item_4017 in var_4016 {
            #[allow(unused_mut)]
            let mut entry_4019 = list_4018.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4019, item_4017);
        }
        list_4018.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("MaxResults");
    if let Some(var_4021) = &input.max_results {
        scope_4020.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4021).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("NextToken");
    if let Some(var_4023) = &input.next_token {
        scope_4022.string(var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("DryRun");
    if let Some(var_4025) = &input.dry_run {
        scope_4024.boolean(*var_4025);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4027) = &input.transit_gateway_route_table_id {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("Filter");
    if let Some(var_4029) = &input.filters {
        let mut list_4031 = scope_4028.start_list(true, Some("Filter"));
        for item_4030 in var_4029 {
            #[allow(unused_mut)]
            let mut entry_4032 = list_4031.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4032, item_4030);
        }
        list_4031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("MaxResults");
    if let Some(var_4034) = &input.max_results {
        scope_4033.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4034).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("NextToken");
    if let Some(var_4036) = &input.next_token {
        scope_4035.string(var_4036);
    }
    #[allow(unused_mut)]
    let mut scope_4037 = writer.prefix("DryRun");
    if let Some(var_4038) = &input.dry_run {
        scope_4037.boolean(*var_4038);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4039 = writer.prefix("VpnConnectionId");
    if let Some(var_4040) = &input.vpn_connection_id {
        scope_4039.string(var_4040);
    }
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4042) = &input.vpn_connection_device_type_id {
        scope_4041.string(var_4042);
    }
    #[allow(unused_mut)]
    let mut scope_4043 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4044) = &input.internet_key_exchange_version {
        scope_4043.string(var_4044);
    }
    #[allow(unused_mut)]
    let mut scope_4045 = writer.prefix("DryRun");
    if let Some(var_4046) = &input.dry_run {
        scope_4045.boolean(*var_4046);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4047 = writer.prefix("MaxResults");
    if let Some(var_4048) = &input.max_results {
        scope_4047.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4049 = writer.prefix("NextToken");
    if let Some(var_4050) = &input.next_token {
        scope_4049.string(var_4050);
    }
    #[allow(unused_mut)]
    let mut scope_4051 = writer.prefix("DryRun");
    if let Some(var_4052) = &input.dry_run {
        scope_4051.boolean(*var_4052);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4053 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4054) = &input.client_vpn_endpoint_id {
        scope_4053.string(var_4054);
    }
    #[allow(unused_mut)]
    let mut scope_4055 = writer.prefix("CertificateRevocationList");
    if let Some(var_4056) = &input.certificate_revocation_list {
        scope_4055.string(var_4056);
    }
    #[allow(unused_mut)]
    let mut scope_4057 = writer.prefix("DryRun");
    if let Some(var_4058) = &input.dry_run {
        scope_4057.boolean(*var_4058);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("Architecture");
    if let Some(var_4060) = &input.architecture {
        scope_4059.string(var_4060);
    }
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("ClientData");
    if let Some(var_4062) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4061, var_4062);
    }
    #[allow(unused_mut)]
    let mut scope_4063 = writer.prefix("ClientToken");
    if let Some(var_4064) = &input.client_token {
        scope_4063.string(var_4064);
    }
    #[allow(unused_mut)]
    let mut scope_4065 = writer.prefix("Description");
    if let Some(var_4066) = &input.description {
        scope_4065.string(var_4066);
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("DiskContainer");
    if let Some(var_4068) = &input.disk_containers {
        let mut list_4070 = scope_4067.start_list(true, Some("item"));
        for item_4069 in var_4068 {
            #[allow(unused_mut)]
            let mut entry_4071 = list_4070.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4071, item_4069,
            );
        }
        list_4070.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("DryRun");
    if let Some(var_4073) = &input.dry_run {
        scope_4072.boolean(*var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("Encrypted");
    if let Some(var_4075) = &input.encrypted {
        scope_4074.boolean(*var_4075);
    }
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("Hypervisor");
    if let Some(var_4077) = &input.hypervisor {
        scope_4076.string(var_4077);
    }
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("KmsKeyId");
    if let Some(var_4079) = &input.kms_key_id {
        scope_4078.string(var_4079);
    }
    #[allow(unused_mut)]
    let mut scope_4080 = writer.prefix("LicenseType");
    if let Some(var_4081) = &input.license_type {
        scope_4080.string(var_4081);
    }
    #[allow(unused_mut)]
    let mut scope_4082 = writer.prefix("Platform");
    if let Some(var_4083) = &input.platform {
        scope_4082.string(var_4083);
    }
    #[allow(unused_mut)]
    let mut scope_4084 = writer.prefix("RoleName");
    if let Some(var_4085) = &input.role_name {
        scope_4084.string(var_4085);
    }
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("LicenseSpecifications");
    if let Some(var_4087) = &input.license_specifications {
        let mut list_4089 = scope_4086.start_list(true, Some("item"));
        for item_4088 in var_4087 {
            #[allow(unused_mut)]
            let mut entry_4090 = list_4089.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4090, item_4088);
        }
        list_4089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("TagSpecification");
    if let Some(var_4092) = &input.tag_specifications {
        let mut list_4094 = scope_4091.start_list(true, Some("item"));
        for item_4093 in var_4092 {
            #[allow(unused_mut)]
            let mut entry_4095 = list_4094.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4095, item_4093,
            );
        }
        list_4094.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("UsageOperation");
    if let Some(var_4097) = &input.usage_operation {
        scope_4096.string(var_4097);
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("BootMode");
    if let Some(var_4099) = &input.boot_mode {
        scope_4098.string(var_4099.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("Description");
    if let Some(var_4101) = &input.description {
        scope_4100.string(var_4101);
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("DiskImage");
    if let Some(var_4103) = &input.disk_images {
        let mut list_4105 = scope_4102.start_list(true, None);
        for item_4104 in var_4103 {
            #[allow(unused_mut)]
            let mut entry_4106 = list_4105.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4106, item_4104);
        }
        list_4105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("DryRun");
    if let Some(var_4108) = &input.dry_run {
        scope_4107.boolean(*var_4108);
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("LaunchSpecification");
    if let Some(var_4110) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4109, var_4110,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("Platform");
    if let Some(var_4112) = &input.platform {
        scope_4111.string(var_4112.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DryRun");
    if let Some(var_4114) = &input.dry_run {
        scope_4113.boolean(*var_4114);
    }
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("KeyName");
    if let Some(var_4116) = &input.key_name {
        scope_4115.string(var_4116);
    }
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4118) = &input.public_key_material {
        scope_4117.string(&smithy_types::base64::encode(var_4118));
    }
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("TagSpecification");
    if let Some(var_4120) = &input.tag_specifications {
        let mut list_4122 = scope_4119.start_list(true, Some("item"));
        for item_4121 in var_4120 {
            #[allow(unused_mut)]
            let mut entry_4123 = list_4122.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4123, item_4121,
            );
        }
        list_4122.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("ClientData");
    if let Some(var_4125) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4124, var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("ClientToken");
    if let Some(var_4127) = &input.client_token {
        scope_4126.string(var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("Description");
    if let Some(var_4129) = &input.description {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("DiskContainer");
    if let Some(var_4131) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4130, var_4131,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("DryRun");
    if let Some(var_4133) = &input.dry_run {
        scope_4132.boolean(*var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("Encrypted");
    if let Some(var_4135) = &input.encrypted {
        scope_4134.boolean(*var_4135);
    }
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("KmsKeyId");
    if let Some(var_4137) = &input.kms_key_id {
        scope_4136.string(var_4137);
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("RoleName");
    if let Some(var_4139) = &input.role_name {
        scope_4138.string(var_4139);
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("TagSpecification");
    if let Some(var_4141) = &input.tag_specifications {
        let mut list_4143 = scope_4140.start_list(true, Some("item"));
        for item_4142 in var_4141 {
            #[allow(unused_mut)]
            let mut entry_4144 = list_4143.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4144, item_4142,
            );
        }
        list_4143.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("AvailabilityZone");
    if let Some(var_4146) = &input.availability_zone {
        scope_4145.string(var_4146);
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("Description");
    if let Some(var_4148) = &input.description {
        scope_4147.string(var_4148);
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("DryRun");
    if let Some(var_4150) = &input.dry_run {
        scope_4149.boolean(*var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("Image");
    if let Some(var_4152) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4151, var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("Volume");
    if let Some(var_4154) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4153, var_4154);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("AllocationId");
    if let Some(var_4156) = &input.allocation_id {
        scope_4155.string(var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("DomainName");
    if let Some(var_4158) = &input.domain_name {
        scope_4157.string(var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("DryRun");
    if let Some(var_4160) = &input.dry_run {
        scope_4159.boolean(*var_4160);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("GroupName");
    if let Some(var_4162) = &input.group_name {
        scope_4161.string(var_4162);
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("OptInStatus");
    if let Some(var_4164) = &input.opt_in_status {
        scope_4163.string(var_4164.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("DryRun");
    if let Some(var_4166) = &input.dry_run {
        scope_4165.boolean(*var_4166);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4167 = writer.prefix("CapacityReservationId");
    if let Some(var_4168) = &input.capacity_reservation_id {
        scope_4167.string(var_4168);
    }
    #[allow(unused_mut)]
    let mut scope_4169 = writer.prefix("InstanceCount");
    if let Some(var_4170) = &input.instance_count {
        scope_4169.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4171 = writer.prefix("EndDate");
    if let Some(var_4172) = &input.end_date {
        scope_4171.instant(var_4172, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("EndDateType");
    if let Some(var_4174) = &input.end_date_type {
        scope_4173.string(var_4174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("Accept");
    if let Some(var_4176) = &input.accept {
        scope_4175.boolean(*var_4176);
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("DryRun");
    if let Some(var_4178) = &input.dry_run {
        scope_4177.boolean(*var_4178);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4180) = &input.capacity_reservation_fleet_id {
        scope_4179.string(var_4180);
    }
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4182) = &input.total_target_capacity {
        scope_4181.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("EndDate");
    if let Some(var_4184) = &input.end_date {
        scope_4183.instant(var_4184, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("DryRun");
    if let Some(var_4186) = &input.dry_run {
        scope_4185.boolean(*var_4186);
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("RemoveEndDate");
    if let Some(var_4188) = &input.remove_end_date {
        scope_4187.boolean(*var_4188);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4190) = &input.client_vpn_endpoint_id {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("ServerCertificateArn");
    if let Some(var_4192) = &input.server_certificate_arn {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4194) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4193, var_4194,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DnsServers");
    if let Some(var_4196) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4195, var_4196,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("VpnPort");
    if let Some(var_4198) = &input.vpn_port {
        scope_4197.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("Description");
    if let Some(var_4200) = &input.description {
        scope_4199.string(var_4200);
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("SplitTunnel");
    if let Some(var_4202) = &input.split_tunnel {
        scope_4201.boolean(*var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("DryRun");
    if let Some(var_4204) = &input.dry_run {
        scope_4203.boolean(*var_4204);
    }
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("SecurityGroupId");
    if let Some(var_4206) = &input.security_group_ids {
        let mut list_4208 = scope_4205.start_list(true, Some("item"));
        for item_4207 in var_4206 {
            #[allow(unused_mut)]
            let mut entry_4209 = list_4208.entry();
            entry_4209.string(item_4207);
        }
        list_4208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("VpcId");
    if let Some(var_4211) = &input.vpc_id {
        scope_4210.string(var_4211);
    }
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("SelfServicePortal");
    if let Some(var_4213) = &input.self_service_portal {
        scope_4212.string(var_4213.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("ClientConnectOptions");
    if let Some(var_4215) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4214, var_4215,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("DryRun");
    if let Some(var_4217) = &input.dry_run {
        scope_4216.boolean(*var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("InstanceFamily");
    if let Some(var_4219) = &input.instance_family {
        scope_4218.string(var_4219.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("CpuCredits");
    if let Some(var_4221) = &input.cpu_credits {
        scope_4220.string(var_4221);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("KmsKeyId");
    if let Some(var_4223) = &input.kms_key_id {
        scope_4222.string(var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("DryRun");
    if let Some(var_4225) = &input.dry_run {
        scope_4224.boolean(*var_4225);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("DryRun");
    if let Some(var_4227) = &input.dry_run {
        scope_4226.boolean(*var_4227);
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4229) = &input.excess_capacity_termination_policy {
        scope_4228.string(var_4229.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4231) = &input.launch_template_configs {
        let mut list_4233 = scope_4230.start_list(true, Some("item"));
        for item_4232 in var_4231 {
            #[allow(unused_mut)]
            let mut entry_4234 = list_4233.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4234, item_4232,
            );
        }
        list_4233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4235 = writer.prefix("FleetId");
    if let Some(var_4236) = &input.fleet_id {
        scope_4235.string(var_4236);
    }
    #[allow(unused_mut)]
    let mut scope_4237 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4238) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4237, var_4238,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4239 = writer.prefix("Context");
    if let Some(var_4240) = &input.context {
        scope_4239.string(var_4240);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("DryRun");
    if let Some(var_4242) = &input.dry_run {
        scope_4241.boolean(*var_4242);
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("FpgaImageId");
    if let Some(var_4244) = &input.fpga_image_id {
        scope_4243.string(var_4244);
    }
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("Attribute");
    if let Some(var_4246) = &input.attribute {
        scope_4245.string(var_4246.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("OperationType");
    if let Some(var_4248) = &input.operation_type {
        scope_4247.string(var_4248.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("UserId");
    if let Some(var_4250) = &input.user_ids {
        let mut list_4252 = scope_4249.start_list(true, Some("UserId"));
        for item_4251 in var_4250 {
            #[allow(unused_mut)]
            let mut entry_4253 = list_4252.entry();
            entry_4253.string(item_4251);
        }
        list_4252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("UserGroup");
    if let Some(var_4255) = &input.user_groups {
        let mut list_4257 = scope_4254.start_list(true, Some("UserGroup"));
        for item_4256 in var_4255 {
            #[allow(unused_mut)]
            let mut entry_4258 = list_4257.entry();
            entry_4258.string(item_4256);
        }
        list_4257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4259 = writer.prefix("ProductCode");
    if let Some(var_4260) = &input.product_codes {
        let mut list_4262 = scope_4259.start_list(true, Some("ProductCode"));
        for item_4261 in var_4260 {
            #[allow(unused_mut)]
            let mut entry_4263 = list_4262.entry();
            entry_4263.string(item_4261);
        }
        list_4262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("LoadPermission");
    if let Some(var_4265) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4264, var_4265,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("Description");
    if let Some(var_4267) = &input.description {
        scope_4266.string(var_4267);
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("Name");
    if let Some(var_4269) = &input.name {
        scope_4268.string(var_4269);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("AutoPlacement");
    if let Some(var_4271) = &input.auto_placement {
        scope_4270.string(var_4271.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("HostId");
    if let Some(var_4273) = &input.host_ids {
        let mut list_4275 = scope_4272.start_list(true, Some("item"));
        for item_4274 in var_4273 {
            #[allow(unused_mut)]
            let mut entry_4276 = list_4275.entry();
            entry_4276.string(item_4274);
        }
        list_4275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("HostRecovery");
    if let Some(var_4278) = &input.host_recovery {
        scope_4277.string(var_4278.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("InstanceType");
    if let Some(var_4280) = &input.instance_type {
        scope_4279.string(var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("InstanceFamily");
    if let Some(var_4282) = &input.instance_family {
        scope_4281.string(var_4282);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("PrincipalArn");
    if let Some(var_4284) = &input.principal_arn {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("Resource");
    if let Some(var_4286) = &input.resource {
        scope_4285.string(var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("UseLongIds");
    if let Some(var_4288) = &input.use_long_ids {
        scope_4287.boolean(*var_4288);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("Resource");
    if let Some(var_4290) = &input.resource {
        scope_4289.string(var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("UseLongIds");
    if let Some(var_4292) = &input.use_long_ids {
        scope_4291.boolean(*var_4292);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("Attribute");
    if let Some(var_4294) = &input.attribute {
        scope_4293.string(var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("Description");
    if let Some(var_4296) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4295, var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("ImageId");
    if let Some(var_4298) = &input.image_id {
        scope_4297.string(var_4298);
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("LaunchPermission");
    if let Some(var_4300) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4299, var_4300,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4301 = writer.prefix("OperationType");
    if let Some(var_4302) = &input.operation_type {
        scope_4301.string(var_4302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4303 = writer.prefix("ProductCode");
    if let Some(var_4304) = &input.product_codes {
        let mut list_4306 = scope_4303.start_list(true, Some("ProductCode"));
        for item_4305 in var_4304 {
            #[allow(unused_mut)]
            let mut entry_4307 = list_4306.entry();
            entry_4307.string(item_4305);
        }
        list_4306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("UserGroup");
    if let Some(var_4309) = &input.user_groups {
        let mut list_4311 = scope_4308.start_list(true, Some("UserGroup"));
        for item_4310 in var_4309 {
            #[allow(unused_mut)]
            let mut entry_4312 = list_4311.entry();
            entry_4312.string(item_4310);
        }
        list_4311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4313 = writer.prefix("UserId");
    if let Some(var_4314) = &input.user_ids {
        let mut list_4316 = scope_4313.start_list(true, Some("UserId"));
        for item_4315 in var_4314 {
            #[allow(unused_mut)]
            let mut entry_4317 = list_4316.entry();
            entry_4317.string(item_4315);
        }
        list_4316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("Value");
    if let Some(var_4319) = &input.value {
        scope_4318.string(var_4319);
    }
    #[allow(unused_mut)]
    let mut scope_4320 = writer.prefix("DryRun");
    if let Some(var_4321) = &input.dry_run {
        scope_4320.boolean(*var_4321);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4322 = writer.prefix("SourceDestCheck");
    if let Some(var_4323) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4322, var_4323,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4324 = writer.prefix("Attribute");
    if let Some(var_4325) = &input.attribute {
        scope_4324.string(var_4325.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4326 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4327) = &input.block_device_mappings {
        let mut list_4329 = scope_4326.start_list(true, Some("item"));
        for item_4328 in var_4327 {
            #[allow(unused_mut)]
            let mut entry_4330 = list_4329.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4330, item_4328);
        }
        list_4329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("DisableApiTermination");
    if let Some(var_4332) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4331, var_4332,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("DryRun");
    if let Some(var_4334) = &input.dry_run {
        scope_4333.boolean(*var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("EbsOptimized");
    if let Some(var_4336) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4335, var_4336,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("EnaSupport");
    if let Some(var_4338) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4337, var_4338,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("GroupId");
    if let Some(var_4340) = &input.groups {
        let mut list_4342 = scope_4339.start_list(true, Some("groupId"));
        for item_4341 in var_4340 {
            #[allow(unused_mut)]
            let mut entry_4343 = list_4342.entry();
            entry_4343.string(item_4341);
        }
        list_4342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("InstanceId");
    if let Some(var_4345) = &input.instance_id {
        scope_4344.string(var_4345);
    }
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4347) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4346, var_4347);
    }
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("InstanceType");
    if let Some(var_4349) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4348, var_4349);
    }
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("Kernel");
    if let Some(var_4351) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4350, var_4351);
    }
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("Ramdisk");
    if let Some(var_4353) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4352, var_4353);
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("SriovNetSupport");
    if let Some(var_4355) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4354, var_4355);
    }
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("UserData");
    if let Some(var_4357) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4356, var_4357,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("Value");
    if let Some(var_4359) = &input.value {
        scope_4358.string(var_4359);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("InstanceId");
    if let Some(var_4361) = &input.instance_id {
        scope_4360.string(var_4361);
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4363) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4362, var_4363,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("DryRun");
    if let Some(var_4365) = &input.dry_run {
        scope_4364.boolean(*var_4365);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("DryRun");
    if let Some(var_4367) = &input.dry_run {
        scope_4366.boolean(*var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("ClientToken");
    if let Some(var_4369) = &input.client_token {
        scope_4368.string(var_4369);
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4371) = &input.instance_credit_specifications {
        let mut list_4373 = scope_4370.start_list(true, Some("item"));
        for item_4372 in var_4371 {
            #[allow(unused_mut)]
            let mut entry_4374 = list_4373.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(
                entry_4374, item_4372,
            );
        }
        list_4373.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("DryRun");
    if let Some(var_4376) = &input.dry_run {
        scope_4375.boolean(*var_4376);
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("InstanceId");
    if let Some(var_4378) = &input.instance_id {
        scope_4377.string(var_4378);
    }
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("InstanceEventId");
    if let Some(var_4380) = &input.instance_event_id {
        scope_4379.string(var_4380);
    }
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("NotBefore");
    if let Some(var_4382) = &input.not_before {
        scope_4381.instant(var_4382, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4383 = writer.prefix("DryRun");
    if let Some(var_4384) = &input.dry_run {
        scope_4383.boolean(*var_4384);
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("Name");
    if let Some(var_4386) = &input.name {
        scope_4385.string(var_4386);
    }
    #[allow(unused_mut)]
    let mut scope_4387 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4388) = &input.instance_event_window_id {
        scope_4387.string(var_4388);
    }
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("TimeRange");
    if let Some(var_4390) = &input.time_ranges {
        let mut list_4392 = scope_4389.start_list(true, None);
        for item_4391 in var_4390 {
            #[allow(unused_mut)]
            let mut entry_4393 = list_4392.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4393, item_4391);
        }
        list_4392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("CronExpression");
    if let Some(var_4395) = &input.cron_expression {
        scope_4394.string(var_4395);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("InstanceId");
    if let Some(var_4397) = &input.instance_id {
        scope_4396.string(var_4397);
    }
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("HttpTokens");
    if let Some(var_4399) = &input.http_tokens {
        scope_4398.string(var_4399.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4400 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4401) = &input.http_put_response_hop_limit {
        scope_4400.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4401).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4402 = writer.prefix("HttpEndpoint");
    if let Some(var_4403) = &input.http_endpoint {
        scope_4402.string(var_4403.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("DryRun");
    if let Some(var_4405) = &input.dry_run {
        scope_4404.boolean(*var_4405);
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4407) = &input.http_protocol_ipv6 {
        scope_4406.string(var_4407.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("Affinity");
    if let Some(var_4409) = &input.affinity {
        scope_4408.string(var_4409.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("GroupName");
    if let Some(var_4411) = &input.group_name {
        scope_4410.string(var_4411);
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("HostId");
    if let Some(var_4413) = &input.host_id {
        scope_4412.string(var_4413);
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("InstanceId");
    if let Some(var_4415) = &input.instance_id {
        scope_4414.string(var_4415);
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("Tenancy");
    if let Some(var_4417) = &input.tenancy {
        scope_4416.string(var_4417.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("PartitionNumber");
    if let Some(var_4419) = &input.partition_number {
        scope_4418.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4419).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4421) = &input.host_resource_group_arn {
        scope_4420.string(var_4421);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("DryRun");
    if let Some(var_4423) = &input.dry_run {
        scope_4422.boolean(*var_4423);
    }
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("ClientToken");
    if let Some(var_4425) = &input.client_token {
        scope_4424.string(var_4425);
    }
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("LaunchTemplateId");
    if let Some(var_4427) = &input.launch_template_id {
        scope_4426.string(var_4427);
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("LaunchTemplateName");
    if let Some(var_4429) = &input.launch_template_name {
        scope_4428.string(var_4429);
    }
    #[allow(unused_mut)]
    let mut scope_4430 = writer.prefix("SetDefaultVersion");
    if let Some(var_4431) = &input.default_version {
        scope_4430.string(var_4431);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4432 = writer.prefix("DryRun");
    if let Some(var_4433) = &input.dry_run {
        scope_4432.boolean(*var_4433);
    }
    #[allow(unused_mut)]
    let mut scope_4434 = writer.prefix("PrefixListId");
    if let Some(var_4435) = &input.prefix_list_id {
        scope_4434.string(var_4435);
    }
    #[allow(unused_mut)]
    let mut scope_4436 = writer.prefix("CurrentVersion");
    if let Some(var_4437) = &input.current_version {
        scope_4436.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4437).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("PrefixListName");
    if let Some(var_4439) = &input.prefix_list_name {
        scope_4438.string(var_4439);
    }
    #[allow(unused_mut)]
    let mut scope_4440 = writer.prefix("AddEntry");
    if let Some(var_4441) = &input.add_entries {
        let mut list_4443 = scope_4440.start_list(true, None);
        for item_4442 in var_4441 {
            #[allow(unused_mut)]
            let mut entry_4444 = list_4443.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4444, item_4442,
            );
        }
        list_4443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("RemoveEntry");
    if let Some(var_4446) = &input.remove_entries {
        let mut list_4448 = scope_4445.start_list(true, None);
        for item_4447 in var_4446 {
            #[allow(unused_mut)]
            let mut entry_4449 = list_4448.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4449, item_4447,
            );
        }
        list_4448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("MaxEntries");
    if let Some(var_4451) = &input.max_entries {
        scope_4450.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4451).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("Attachment");
    if let Some(var_4453) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4452, var_4453,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("Description");
    if let Some(var_4455) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4454, var_4455);
    }
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("DryRun");
    if let Some(var_4457) = &input.dry_run {
        scope_4456.boolean(*var_4457);
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("SecurityGroupId");
    if let Some(var_4459) = &input.groups {
        let mut list_4461 = scope_4458.start_list(true, Some("SecurityGroupId"));
        for item_4460 in var_4459 {
            #[allow(unused_mut)]
            let mut entry_4462 = list_4461.entry();
            entry_4462.string(item_4460);
        }
        list_4461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4464) = &input.network_interface_id {
        scope_4463.string(var_4464);
    }
    #[allow(unused_mut)]
    let mut scope_4465 = writer.prefix("SourceDestCheck");
    if let Some(var_4466) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4465, var_4466,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4467 = writer.prefix("ReservedInstancesId");
    if let Some(var_4468) = &input.reserved_instances_ids {
        let mut list_4470 = scope_4467.start_list(true, Some("ReservedInstancesId"));
        for item_4469 in var_4468 {
            #[allow(unused_mut)]
            let mut entry_4471 = list_4470.entry();
            entry_4471.string(item_4469);
        }
        list_4470.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("ClientToken");
    if let Some(var_4473) = &input.client_token {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4475) = &input.target_configurations {
        let mut list_4477 = scope_4474.start_list(true, Some("item"));
        for item_4476 in var_4475 {
            #[allow(unused_mut)]
            let mut entry_4478 = list_4477.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_4478, item_4476,
            );
        }
        list_4477.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("GroupId");
    if let Some(var_4480) = &input.group_id {
        scope_4479.string(var_4480);
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("SecurityGroupRule");
    if let Some(var_4482) = &input.security_group_rules {
        let mut list_4484 = scope_4481.start_list(true, Some("item"));
        for item_4483 in var_4482 {
            #[allow(unused_mut)]
            let mut entry_4485 = list_4484.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_4485, item_4483,
            );
        }
        list_4484.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("DryRun");
    if let Some(var_4487) = &input.dry_run {
        scope_4486.boolean(*var_4487);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4488 = writer.prefix("Attribute");
    if let Some(var_4489) = &input.attribute {
        scope_4488.string(var_4489.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("CreateVolumePermission");
    if let Some(var_4491) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_4490, var_4491,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("UserGroup");
    if let Some(var_4493) = &input.group_names {
        let mut list_4495 = scope_4492.start_list(true, Some("GroupName"));
        for item_4494 in var_4493 {
            #[allow(unused_mut)]
            let mut entry_4496 = list_4495.entry();
            entry_4496.string(item_4494);
        }
        list_4495.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("OperationType");
    if let Some(var_4498) = &input.operation_type {
        scope_4497.string(var_4498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("SnapshotId");
    if let Some(var_4500) = &input.snapshot_id {
        scope_4499.string(var_4500);
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("UserId");
    if let Some(var_4502) = &input.user_ids {
        let mut list_4504 = scope_4501.start_list(true, Some("UserId"));
        for item_4503 in var_4502 {
            #[allow(unused_mut)]
            let mut entry_4505 = list_4504.entry();
            entry_4505.string(item_4503);
        }
        list_4504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("DryRun");
    if let Some(var_4507) = &input.dry_run {
        scope_4506.boolean(*var_4507);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4509) = &input.excess_capacity_termination_policy {
        scope_4508.string(var_4509.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4511) = &input.launch_template_configs {
        let mut list_4513 = scope_4510.start_list(true, Some("item"));
        for item_4512 in var_4511 {
            #[allow(unused_mut)]
            let mut entry_4514 = list_4513.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_4514, item_4512,
            );
        }
        list_4513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4515 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4516) = &input.spot_fleet_request_id {
        scope_4515.string(var_4516);
    }
    #[allow(unused_mut)]
    let mut scope_4517 = writer.prefix("TargetCapacity");
    if let Some(var_4518) = &input.target_capacity {
        scope_4517.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4518).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4519 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4520) = &input.on_demand_target_capacity {
        scope_4519.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4521 = writer.prefix("Context");
    if let Some(var_4522) = &input.context {
        scope_4521.string(var_4522);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4523 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4524) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4523, var_4524,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4525 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4526) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4525, var_4526,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4527 = writer.prefix("SubnetId");
    if let Some(var_4528) = &input.subnet_id {
        scope_4527.string(var_4528);
    }
    #[allow(unused_mut)]
    let mut scope_4529 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4530) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4529, var_4530,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4531 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4532) = &input.customer_owned_ipv4_pool {
        scope_4531.string(var_4532);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4534) = &input.traffic_mirror_filter_id {
        scope_4533.string(var_4534);
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("AddNetworkService");
    if let Some(var_4536) = &input.add_network_services {
        let mut list_4538 = scope_4535.start_list(true, Some("item"));
        for item_4537 in var_4536 {
            #[allow(unused_mut)]
            let mut entry_4539 = list_4538.entry();
            entry_4539.string(item_4537.as_str());
        }
        list_4538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4540 = writer.prefix("RemoveNetworkService");
    if let Some(var_4541) = &input.remove_network_services {
        let mut list_4543 = scope_4540.start_list(true, Some("item"));
        for item_4542 in var_4541 {
            #[allow(unused_mut)]
            let mut entry_4544 = list_4543.entry();
            entry_4544.string(item_4542.as_str());
        }
        list_4543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("DryRun");
    if let Some(var_4546) = &input.dry_run {
        scope_4545.boolean(*var_4546);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4548) = &input.traffic_mirror_filter_rule_id {
        scope_4547.string(var_4548);
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("TrafficDirection");
    if let Some(var_4550) = &input.traffic_direction {
        scope_4549.string(var_4550.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("RuleNumber");
    if let Some(var_4552) = &input.rule_number {
        scope_4551.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4552).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("RuleAction");
    if let Some(var_4554) = &input.rule_action {
        scope_4553.string(var_4554.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("DestinationPortRange");
    if let Some(var_4556) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4555, var_4556,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("SourcePortRange");
    if let Some(var_4558) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4557, var_4558,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("Protocol");
    if let Some(var_4560) = &input.protocol {
        scope_4559.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4560).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4562) = &input.destination_cidr_block {
        scope_4561.string(var_4562);
    }
    #[allow(unused_mut)]
    let mut scope_4563 = writer.prefix("SourceCidrBlock");
    if let Some(var_4564) = &input.source_cidr_block {
        scope_4563.string(var_4564);
    }
    #[allow(unused_mut)]
    let mut scope_4565 = writer.prefix("Description");
    if let Some(var_4566) = &input.description {
        scope_4565.string(var_4566);
    }
    #[allow(unused_mut)]
    let mut scope_4567 = writer.prefix("RemoveField");
    if let Some(var_4568) = &input.remove_fields {
        let mut list_4570 = scope_4567.start_list(true, None);
        for item_4569 in var_4568 {
            #[allow(unused_mut)]
            let mut entry_4571 = list_4570.entry();
            entry_4571.string(item_4569.as_str());
        }
        list_4570.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("DryRun");
    if let Some(var_4573) = &input.dry_run {
        scope_4572.boolean(*var_4573);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4575) = &input.traffic_mirror_session_id {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4577) = &input.traffic_mirror_target_id {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4579) = &input.traffic_mirror_filter_id {
        scope_4578.string(var_4579);
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("PacketLength");
    if let Some(var_4581) = &input.packet_length {
        scope_4580.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4581).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("SessionNumber");
    if let Some(var_4583) = &input.session_number {
        scope_4582.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4583).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4584 = writer.prefix("VirtualNetworkId");
    if let Some(var_4585) = &input.virtual_network_id {
        scope_4584.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4585).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4586 = writer.prefix("Description");
    if let Some(var_4587) = &input.description {
        scope_4586.string(var_4587);
    }
    #[allow(unused_mut)]
    let mut scope_4588 = writer.prefix("RemoveField");
    if let Some(var_4589) = &input.remove_fields {
        let mut list_4591 = scope_4588.start_list(true, None);
        for item_4590 in var_4589 {
            #[allow(unused_mut)]
            let mut entry_4592 = list_4591.entry();
            entry_4592.string(item_4590.as_str());
        }
        list_4591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("DryRun");
    if let Some(var_4594) = &input.dry_run {
        scope_4593.boolean(*var_4594);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("TransitGatewayId");
    if let Some(var_4596) = &input.transit_gateway_id {
        scope_4595.string(var_4596);
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("Description");
    if let Some(var_4598) = &input.description {
        scope_4597.string(var_4598);
    }
    #[allow(unused_mut)]
    let mut scope_4599 = writer.prefix("Options");
    if let Some(var_4600) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_4599, var_4600,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("DryRun");
    if let Some(var_4602) = &input.dry_run {
        scope_4601.boolean(*var_4602);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4603 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4604) = &input.transit_gateway_route_table_id {
        scope_4603.string(var_4604);
    }
    #[allow(unused_mut)]
    let mut scope_4605 = writer.prefix("PrefixListId");
    if let Some(var_4606) = &input.prefix_list_id {
        scope_4605.string(var_4606);
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4608) = &input.transit_gateway_attachment_id {
        scope_4607.string(var_4608);
    }
    #[allow(unused_mut)]
    let mut scope_4609 = writer.prefix("Blackhole");
    if let Some(var_4610) = &input.blackhole {
        scope_4609.boolean(*var_4610);
    }
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("DryRun");
    if let Some(var_4612) = &input.dry_run {
        scope_4611.boolean(*var_4612);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4614) = &input.transit_gateway_attachment_id {
        scope_4613.string(var_4614);
    }
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("AddSubnetIds");
    if let Some(var_4616) = &input.add_subnet_ids {
        let mut list_4618 = scope_4615.start_list(true, Some("item"));
        for item_4617 in var_4616 {
            #[allow(unused_mut)]
            let mut entry_4619 = list_4618.entry();
            entry_4619.string(item_4617);
        }
        list_4618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4620 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4621) = &input.remove_subnet_ids {
        let mut list_4623 = scope_4620.start_list(true, Some("item"));
        for item_4622 in var_4621 {
            #[allow(unused_mut)]
            let mut entry_4624 = list_4623.entry();
            entry_4624.string(item_4622);
        }
        list_4623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("Options");
    if let Some(var_4626) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_4625, var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("DryRun");
    if let Some(var_4628) = &input.dry_run {
        scope_4627.boolean(*var_4628);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("DryRun");
    if let Some(var_4630) = &input.dry_run {
        scope_4629.boolean(*var_4630);
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("VolumeId");
    if let Some(var_4632) = &input.volume_id {
        scope_4631.string(var_4632);
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("Size");
    if let Some(var_4634) = &input.size {
        scope_4633.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4634).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("VolumeType");
    if let Some(var_4636) = &input.volume_type {
        scope_4635.string(var_4636.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("Iops");
    if let Some(var_4638) = &input.iops {
        scope_4637.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4638).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("Throughput");
    if let Some(var_4640) = &input.throughput {
        scope_4639.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4642) = &input.multi_attach_enabled {
        scope_4641.boolean(*var_4642);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4643 = writer.prefix("AutoEnableIO");
    if let Some(var_4644) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4643, var_4644,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4645 = writer.prefix("VolumeId");
    if let Some(var_4646) = &input.volume_id {
        scope_4645.string(var_4646);
    }
    #[allow(unused_mut)]
    let mut scope_4647 = writer.prefix("DryRun");
    if let Some(var_4648) = &input.dry_run {
        scope_4647.boolean(*var_4648);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4649 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4650) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4649, var_4650,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4651 = writer.prefix("EnableDnsSupport");
    if let Some(var_4652) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4651, var_4652,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("VpcId");
    if let Some(var_4654) = &input.vpc_id {
        scope_4653.string(var_4654);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("DryRun");
    if let Some(var_4656) = &input.dry_run {
        scope_4655.boolean(*var_4656);
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("VpcEndpointId");
    if let Some(var_4658) = &input.vpc_endpoint_id {
        scope_4657.string(var_4658);
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("ResetPolicy");
    if let Some(var_4660) = &input.reset_policy {
        scope_4659.boolean(*var_4660);
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("PolicyDocument");
    if let Some(var_4662) = &input.policy_document {
        scope_4661.string(var_4662);
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("AddRouteTableId");
    if let Some(var_4664) = &input.add_route_table_ids {
        let mut list_4666 = scope_4663.start_list(true, Some("item"));
        for item_4665 in var_4664 {
            #[allow(unused_mut)]
            let mut entry_4667 = list_4666.entry();
            entry_4667.string(item_4665);
        }
        list_4666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4669) = &input.remove_route_table_ids {
        let mut list_4671 = scope_4668.start_list(true, Some("item"));
        for item_4670 in var_4669 {
            #[allow(unused_mut)]
            let mut entry_4672 = list_4671.entry();
            entry_4672.string(item_4670);
        }
        list_4671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("AddSubnetId");
    if let Some(var_4674) = &input.add_subnet_ids {
        let mut list_4676 = scope_4673.start_list(true, Some("item"));
        for item_4675 in var_4674 {
            #[allow(unused_mut)]
            let mut entry_4677 = list_4676.entry();
            entry_4677.string(item_4675);
        }
        list_4676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("RemoveSubnetId");
    if let Some(var_4679) = &input.remove_subnet_ids {
        let mut list_4681 = scope_4678.start_list(true, Some("item"));
        for item_4680 in var_4679 {
            #[allow(unused_mut)]
            let mut entry_4682 = list_4681.entry();
            entry_4682.string(item_4680);
        }
        list_4681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4683 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4684) = &input.add_security_group_ids {
        let mut list_4686 = scope_4683.start_list(true, Some("item"));
        for item_4685 in var_4684 {
            #[allow(unused_mut)]
            let mut entry_4687 = list_4686.entry();
            entry_4687.string(item_4685);
        }
        list_4686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4689) = &input.remove_security_group_ids {
        let mut list_4691 = scope_4688.start_list(true, Some("item"));
        for item_4690 in var_4689 {
            #[allow(unused_mut)]
            let mut entry_4692 = list_4691.entry();
            entry_4692.string(item_4690);
        }
        list_4691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4694) = &input.private_dns_enabled {
        scope_4693.boolean(*var_4694);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("DryRun");
    if let Some(var_4696) = &input.dry_run {
        scope_4695.boolean(*var_4696);
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4698) = &input.connection_notification_id {
        scope_4697.string(var_4698);
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4700) = &input.connection_notification_arn {
        scope_4699.string(var_4700);
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("ConnectionEvents");
    if let Some(var_4702) = &input.connection_events {
        let mut list_4704 = scope_4701.start_list(true, Some("item"));
        for item_4703 in var_4702 {
            #[allow(unused_mut)]
            let mut entry_4705 = list_4704.entry();
            entry_4705.string(item_4703);
        }
        list_4704.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4706 = writer.prefix("DryRun");
    if let Some(var_4707) = &input.dry_run {
        scope_4706.boolean(*var_4707);
    }
    #[allow(unused_mut)]
    let mut scope_4708 = writer.prefix("ServiceId");
    if let Some(var_4709) = &input.service_id {
        scope_4708.string(var_4709);
    }
    #[allow(unused_mut)]
    let mut scope_4710 = writer.prefix("PrivateDnsName");
    if let Some(var_4711) = &input.private_dns_name {
        scope_4710.string(var_4711);
    }
    #[allow(unused_mut)]
    let mut scope_4712 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4713) = &input.remove_private_dns_name {
        scope_4712.boolean(*var_4713);
    }
    #[allow(unused_mut)]
    let mut scope_4714 = writer.prefix("AcceptanceRequired");
    if let Some(var_4715) = &input.acceptance_required {
        scope_4714.boolean(*var_4715);
    }
    #[allow(unused_mut)]
    let mut scope_4716 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4717) = &input.add_network_load_balancer_arns {
        let mut list_4719 = scope_4716.start_list(true, Some("item"));
        for item_4718 in var_4717 {
            #[allow(unused_mut)]
            let mut entry_4720 = list_4719.entry();
            entry_4720.string(item_4718);
        }
        list_4719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4721 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4722) = &input.remove_network_load_balancer_arns {
        let mut list_4724 = scope_4721.start_list(true, Some("item"));
        for item_4723 in var_4722 {
            #[allow(unused_mut)]
            let mut entry_4725 = list_4724.entry();
            entry_4725.string(item_4723);
        }
        list_4724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4727) = &input.add_gateway_load_balancer_arns {
        let mut list_4729 = scope_4726.start_list(true, Some("item"));
        for item_4728 in var_4727 {
            #[allow(unused_mut)]
            let mut entry_4730 = list_4729.entry();
            entry_4730.string(item_4728);
        }
        list_4729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4731 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4732) = &input.remove_gateway_load_balancer_arns {
        let mut list_4734 = scope_4731.start_list(true, Some("item"));
        for item_4733 in var_4732 {
            #[allow(unused_mut)]
            let mut entry_4735 = list_4734.entry();
            entry_4735.string(item_4733);
        }
        list_4734.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("DryRun");
    if let Some(var_4737) = &input.dry_run {
        scope_4736.boolean(*var_4737);
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("ServiceId");
    if let Some(var_4739) = &input.service_id {
        scope_4738.string(var_4739);
    }
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4741) = &input.add_allowed_principals {
        let mut list_4743 = scope_4740.start_list(true, Some("item"));
        for item_4742 in var_4741 {
            #[allow(unused_mut)]
            let mut entry_4744 = list_4743.entry();
            entry_4744.string(item_4742);
        }
        list_4743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4746) = &input.remove_allowed_principals {
        let mut list_4748 = scope_4745.start_list(true, Some("item"));
        for item_4747 in var_4746 {
            #[allow(unused_mut)]
            let mut entry_4749 = list_4748.entry();
            entry_4749.string(item_4747);
        }
        list_4748.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4751) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4750, var_4751,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("DryRun");
    if let Some(var_4753) = &input.dry_run {
        scope_4752.boolean(*var_4753);
    }
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4755) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4754, var_4755,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4757) = &input.vpc_peering_connection_id {
        scope_4756.string(var_4757);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("VpcId");
    if let Some(var_4759) = &input.vpc_id {
        scope_4758.string(var_4759);
    }
    #[allow(unused_mut)]
    let mut scope_4760 = writer.prefix("InstanceTenancy");
    if let Some(var_4761) = &input.instance_tenancy {
        scope_4760.string(var_4761.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("DryRun");
    if let Some(var_4763) = &input.dry_run {
        scope_4762.boolean(*var_4763);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("VpnConnectionId");
    if let Some(var_4765) = &input.vpn_connection_id {
        scope_4764.string(var_4765);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("TransitGatewayId");
    if let Some(var_4767) = &input.transit_gateway_id {
        scope_4766.string(var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("CustomerGatewayId");
    if let Some(var_4769) = &input.customer_gateway_id {
        scope_4768.string(var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("VpnGatewayId");
    if let Some(var_4771) = &input.vpn_gateway_id {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("DryRun");
    if let Some(var_4773) = &input.dry_run {
        scope_4772.boolean(*var_4773);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("VpnConnectionId");
    if let Some(var_4775) = &input.vpn_connection_id {
        scope_4774.string(var_4775);
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4777) = &input.local_ipv4_network_cidr {
        scope_4776.string(var_4777);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4779) = &input.remote_ipv4_network_cidr {
        scope_4778.string(var_4779);
    }
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4781) = &input.local_ipv6_network_cidr {
        scope_4780.string(var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4783) = &input.remote_ipv6_network_cidr {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("DryRun");
    if let Some(var_4785) = &input.dry_run {
        scope_4784.boolean(*var_4785);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("VpnConnectionId");
    if let Some(var_4787) = &input.vpn_connection_id {
        scope_4786.string(var_4787);
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4789) = &input.vpn_tunnel_outside_ip_address {
        scope_4788.string(var_4789);
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("DryRun");
    if let Some(var_4791) = &input.dry_run {
        scope_4790.boolean(*var_4791);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("VpnConnectionId");
    if let Some(var_4793) = &input.vpn_connection_id {
        scope_4792.string(var_4793);
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4795) = &input.vpn_tunnel_outside_ip_address {
        scope_4794.string(var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("TunnelOptions");
    if let Some(var_4797) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_4796, var_4797,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("DryRun");
    if let Some(var_4799) = &input.dry_run {
        scope_4798.boolean(*var_4799);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("InstanceId");
    if let Some(var_4801) = &input.instance_ids {
        let mut list_4803 = scope_4800.start_list(true, Some("InstanceId"));
        for item_4802 in var_4801 {
            #[allow(unused_mut)]
            let mut entry_4804 = list_4803.entry();
            entry_4804.string(item_4802);
        }
        list_4803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("DryRun");
    if let Some(var_4806) = &input.dry_run {
        scope_4805.boolean(*var_4806);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("DryRun");
    if let Some(var_4808) = &input.dry_run {
        scope_4807.boolean(*var_4808);
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("PublicIp");
    if let Some(var_4810) = &input.public_ip {
        scope_4809.string(var_4810);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("Cidr");
    if let Some(var_4812) = &input.cidr {
        scope_4811.string(var_4812);
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4814) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_4813, var_4814,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4816) = &input.publicly_advertisable {
        scope_4815.boolean(*var_4816);
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("Description");
    if let Some(var_4818) = &input.description {
        scope_4817.string(var_4818);
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("DryRun");
    if let Some(var_4820) = &input.dry_run {
        scope_4819.boolean(*var_4820);
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("PoolTagSpecification");
    if let Some(var_4822) = &input.pool_tag_specifications {
        let mut list_4824 = scope_4821.start_list(true, Some("item"));
        for item_4823 in var_4822 {
            #[allow(unused_mut)]
            let mut entry_4825 = list_4824.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4825, item_4823,
            );
        }
        list_4824.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("MultiRegion");
    if let Some(var_4827) = &input.multi_region {
        scope_4826.boolean(*var_4827);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("ClientToken");
    if let Some(var_4829) = &input.client_token {
        scope_4828.string(var_4829);
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("CurrencyCode");
    if let Some(var_4831) = &input.currency_code {
        scope_4830.string(var_4831.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("HostIdSet");
    if let Some(var_4833) = &input.host_id_set {
        let mut list_4835 = scope_4832.start_list(true, Some("item"));
        for item_4834 in var_4833 {
            #[allow(unused_mut)]
            let mut entry_4836 = list_4835.entry();
            entry_4836.string(item_4834);
        }
        list_4835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4837 = writer.prefix("LimitPrice");
    if let Some(var_4838) = &input.limit_price {
        scope_4837.string(var_4838);
    }
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("OfferingId");
    if let Some(var_4840) = &input.offering_id {
        scope_4839.string(var_4840);
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("TagSpecification");
    if let Some(var_4842) = &input.tag_specifications {
        let mut list_4844 = scope_4841.start_list(true, Some("item"));
        for item_4843 in var_4842 {
            #[allow(unused_mut)]
            let mut entry_4845 = list_4844.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4845, item_4843,
            );
        }
        list_4844.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4846 = writer.prefix("InstanceCount");
    if let Some(var_4847) = &input.instance_count {
        scope_4846.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4847).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4848 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4849) = &input.reserved_instances_offering_id {
        scope_4848.string(var_4849);
    }
    #[allow(unused_mut)]
    let mut scope_4850 = writer.prefix("DryRun");
    if let Some(var_4851) = &input.dry_run {
        scope_4850.boolean(*var_4851);
    }
    #[allow(unused_mut)]
    let mut scope_4852 = writer.prefix("LimitPrice");
    if let Some(var_4853) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_4852, var_4853,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4854 = writer.prefix("PurchaseTime");
    if let Some(var_4855) = &input.purchase_time {
        scope_4854.instant(var_4855, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4856 = writer.prefix("ClientToken");
    if let Some(var_4857) = &input.client_token {
        scope_4856.string(var_4857);
    }
    #[allow(unused_mut)]
    let mut scope_4858 = writer.prefix("DryRun");
    if let Some(var_4859) = &input.dry_run {
        scope_4858.boolean(*var_4859);
    }
    #[allow(unused_mut)]
    let mut scope_4860 = writer.prefix("PurchaseRequest");
    if let Some(var_4861) = &input.purchase_requests {
        let mut list_4863 = scope_4860.start_list(true, Some("PurchaseRequest"));
        for item_4862 in var_4861 {
            #[allow(unused_mut)]
            let mut entry_4864 = list_4863.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_4864, item_4862,
            );
        }
        list_4863.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("InstanceId");
    if let Some(var_4866) = &input.instance_ids {
        let mut list_4868 = scope_4865.start_list(true, Some("InstanceId"));
        for item_4867 in var_4866 {
            #[allow(unused_mut)]
            let mut entry_4869 = list_4868.entry();
            entry_4869.string(item_4867);
        }
        list_4868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4870 = writer.prefix("DryRun");
    if let Some(var_4871) = &input.dry_run {
        scope_4870.boolean(*var_4871);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4872 = writer.prefix("ImageLocation");
    if let Some(var_4873) = &input.image_location {
        scope_4872.string(var_4873);
    }
    #[allow(unused_mut)]
    let mut scope_4874 = writer.prefix("Architecture");
    if let Some(var_4875) = &input.architecture {
        scope_4874.string(var_4875.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4877) = &input.block_device_mappings {
        let mut list_4879 = scope_4876.start_list(true, Some("BlockDeviceMapping"));
        for item_4878 in var_4877 {
            #[allow(unused_mut)]
            let mut entry_4880 = list_4879.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_4880, item_4878,
            );
        }
        list_4879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4881 = writer.prefix("Description");
    if let Some(var_4882) = &input.description {
        scope_4881.string(var_4882);
    }
    #[allow(unused_mut)]
    let mut scope_4883 = writer.prefix("DryRun");
    if let Some(var_4884) = &input.dry_run {
        scope_4883.boolean(*var_4884);
    }
    #[allow(unused_mut)]
    let mut scope_4885 = writer.prefix("EnaSupport");
    if let Some(var_4886) = &input.ena_support {
        scope_4885.boolean(*var_4886);
    }
    #[allow(unused_mut)]
    let mut scope_4887 = writer.prefix("KernelId");
    if let Some(var_4888) = &input.kernel_id {
        scope_4887.string(var_4888);
    }
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("Name");
    if let Some(var_4890) = &input.name {
        scope_4889.string(var_4890);
    }
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("BillingProduct");
    if let Some(var_4892) = &input.billing_products {
        let mut list_4894 = scope_4891.start_list(true, Some("item"));
        for item_4893 in var_4892 {
            #[allow(unused_mut)]
            let mut entry_4895 = list_4894.entry();
            entry_4895.string(item_4893);
        }
        list_4894.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("RamdiskId");
    if let Some(var_4897) = &input.ramdisk_id {
        scope_4896.string(var_4897);
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("RootDeviceName");
    if let Some(var_4899) = &input.root_device_name {
        scope_4898.string(var_4899);
    }
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("SriovNetSupport");
    if let Some(var_4901) = &input.sriov_net_support {
        scope_4900.string(var_4901);
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("VirtualizationType");
    if let Some(var_4903) = &input.virtualization_type {
        scope_4902.string(var_4903);
    }
    #[allow(unused_mut)]
    let mut scope_4904 = writer.prefix("BootMode");
    if let Some(var_4905) = &input.boot_mode {
        scope_4904.string(var_4905.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("DryRun");
    if let Some(var_4907) = &input.dry_run {
        scope_4906.boolean(*var_4907);
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4909) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_4908, var_4909,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4911) = &input.transit_gateway_multicast_domain_id {
        scope_4910.string(var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("GroupIpAddress");
    if let Some(var_4913) = &input.group_ip_address {
        scope_4912.string(var_4913);
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4915) = &input.network_interface_ids {
        let mut list_4917 = scope_4914.start_list(true, Some("item"));
        for item_4916 in var_4915 {
            #[allow(unused_mut)]
            let mut entry_4918 = list_4917.entry();
            entry_4918.string(item_4916);
        }
        list_4917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("DryRun");
    if let Some(var_4920) = &input.dry_run {
        scope_4919.boolean(*var_4920);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4922) = &input.transit_gateway_multicast_domain_id {
        scope_4921.string(var_4922);
    }
    #[allow(unused_mut)]
    let mut scope_4923 = writer.prefix("GroupIpAddress");
    if let Some(var_4924) = &input.group_ip_address {
        scope_4923.string(var_4924);
    }
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4926) = &input.network_interface_ids {
        let mut list_4928 = scope_4925.start_list(true, Some("item"));
        for item_4927 in var_4926 {
            #[allow(unused_mut)]
            let mut entry_4929 = list_4928.entry();
            entry_4929.string(item_4927);
        }
        list_4928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("DryRun");
    if let Some(var_4931) = &input.dry_run {
        scope_4930.boolean(*var_4931);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4933) = &input.transit_gateway_multicast_domain_id {
        scope_4932.string(var_4933);
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4935) = &input.transit_gateway_attachment_id {
        scope_4934.string(var_4935);
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("SubnetIds");
    if let Some(var_4937) = &input.subnet_ids {
        let mut list_4939 = scope_4936.start_list(true, Some("item"));
        for item_4938 in var_4937 {
            #[allow(unused_mut)]
            let mut entry_4940 = list_4939.entry();
            entry_4940.string(item_4938);
        }
        list_4939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("DryRun");
    if let Some(var_4942) = &input.dry_run {
        scope_4941.boolean(*var_4942);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4944) = &input.transit_gateway_attachment_id {
        scope_4943.string(var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("DryRun");
    if let Some(var_4946) = &input.dry_run {
        scope_4945.boolean(*var_4946);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4948) = &input.transit_gateway_attachment_id {
        scope_4947.string(var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("DryRun");
    if let Some(var_4950) = &input.dry_run {
        scope_4949.boolean(*var_4950);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("DryRun");
    if let Some(var_4952) = &input.dry_run {
        scope_4951.boolean(*var_4952);
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("ServiceId");
    if let Some(var_4954) = &input.service_id {
        scope_4953.string(var_4954);
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("VpcEndpointId");
    if let Some(var_4956) = &input.vpc_endpoint_ids {
        let mut list_4958 = scope_4955.start_list(true, Some("item"));
        for item_4957 in var_4956 {
            #[allow(unused_mut)]
            let mut entry_4959 = list_4958.entry();
            entry_4959.string(item_4957);
        }
        list_4958.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("DryRun");
    if let Some(var_4961) = &input.dry_run {
        scope_4960.boolean(*var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4963) = &input.vpc_peering_connection_id {
        scope_4962.string(var_4963);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("AllocationId");
    if let Some(var_4965) = &input.allocation_id {
        scope_4964.string(var_4965);
    }
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("PublicIp");
    if let Some(var_4967) = &input.public_ip {
        scope_4966.string(var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("NetworkBorderGroup");
    if let Some(var_4969) = &input.network_border_group {
        scope_4968.string(var_4969);
    }
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("DryRun");
    if let Some(var_4971) = &input.dry_run {
        scope_4970.boolean(*var_4971);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("HostId");
    if let Some(var_4973) = &input.host_ids {
        let mut list_4975 = scope_4972.start_list(true, Some("item"));
        for item_4974 in var_4973 {
            #[allow(unused_mut)]
            let mut entry_4976 = list_4975.entry();
            entry_4976.string(item_4974);
        }
        list_4975.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("IamInstanceProfile");
    if let Some(var_4978) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_4977, var_4978,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("AssociationId");
    if let Some(var_4980) = &input.association_id {
        scope_4979.string(var_4980);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("AssociationId");
    if let Some(var_4982) = &input.association_id {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("DryRun");
    if let Some(var_4984) = &input.dry_run {
        scope_4983.boolean(*var_4984);
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("NetworkAclId");
    if let Some(var_4986) = &input.network_acl_id {
        scope_4985.string(var_4986);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("CidrBlock");
    if let Some(var_4988) = &input.cidr_block {
        scope_4987.string(var_4988);
    }
    #[allow(unused_mut)]
    let mut scope_4989 = writer.prefix("DryRun");
    if let Some(var_4990) = &input.dry_run {
        scope_4989.boolean(*var_4990);
    }
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("Egress");
    if let Some(var_4992) = &input.egress {
        scope_4991.boolean(*var_4992);
    }
    #[allow(unused_mut)]
    let mut scope_4993 = writer.prefix("Icmp");
    if let Some(var_4994) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_4993, var_4994);
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_4996) = &input.ipv6_cidr_block {
        scope_4995.string(var_4996);
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("NetworkAclId");
    if let Some(var_4998) = &input.network_acl_id {
        scope_4997.string(var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("PortRange");
    if let Some(var_5000) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_4999, var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("Protocol");
    if let Some(var_5002) = &input.protocol {
        scope_5001.string(var_5002);
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("RuleAction");
    if let Some(var_5004) = &input.rule_action {
        scope_5003.string(var_5004.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("RuleNumber");
    if let Some(var_5006) = &input.rule_number {
        scope_5005.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5006).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5008) = &input.destination_cidr_block {
        scope_5007.string(var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5010) = &input.destination_ipv6_cidr_block {
        scope_5009.string(var_5010);
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5012) = &input.destination_prefix_list_id {
        scope_5011.string(var_5012);
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("DryRun");
    if let Some(var_5014) = &input.dry_run {
        scope_5013.boolean(*var_5014);
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("VpcEndpointId");
    if let Some(var_5016) = &input.vpc_endpoint_id {
        scope_5015.string(var_5016);
    }
    #[allow(unused_mut)]
    let mut scope_5017 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5018) = &input.egress_only_internet_gateway_id {
        scope_5017.string(var_5018);
    }
    #[allow(unused_mut)]
    let mut scope_5019 = writer.prefix("GatewayId");
    if let Some(var_5020) = &input.gateway_id {
        scope_5019.string(var_5020);
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("InstanceId");
    if let Some(var_5022) = &input.instance_id {
        scope_5021.string(var_5022);
    }
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("LocalTarget");
    if let Some(var_5024) = &input.local_target {
        scope_5023.boolean(*var_5024);
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("NatGatewayId");
    if let Some(var_5026) = &input.nat_gateway_id {
        scope_5025.string(var_5026);
    }
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("TransitGatewayId");
    if let Some(var_5028) = &input.transit_gateway_id {
        scope_5027.string(var_5028);
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("LocalGatewayId");
    if let Some(var_5030) = &input.local_gateway_id {
        scope_5029.string(var_5030);
    }
    #[allow(unused_mut)]
    let mut scope_5031 = writer.prefix("CarrierGatewayId");
    if let Some(var_5032) = &input.carrier_gateway_id {
        scope_5031.string(var_5032);
    }
    #[allow(unused_mut)]
    let mut scope_5033 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5034) = &input.network_interface_id {
        scope_5033.string(var_5034);
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("RouteTableId");
    if let Some(var_5036) = &input.route_table_id {
        scope_5035.string(var_5036);
    }
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5038) = &input.vpc_peering_connection_id {
        scope_5037.string(var_5038);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("AssociationId");
    if let Some(var_5040) = &input.association_id {
        scope_5039.string(var_5040);
    }
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("DryRun");
    if let Some(var_5042) = &input.dry_run {
        scope_5041.boolean(*var_5042);
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("RouteTableId");
    if let Some(var_5044) = &input.route_table_id {
        scope_5043.string(var_5044);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5046) = &input.destination_cidr_block {
        scope_5045.string(var_5046);
    }
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5048) = &input.transit_gateway_route_table_id {
        scope_5047.string(var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5050) = &input.transit_gateway_attachment_id {
        scope_5049.string(var_5050);
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("Blackhole");
    if let Some(var_5052) = &input.blackhole {
        scope_5051.boolean(*var_5052);
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("DryRun");
    if let Some(var_5054) = &input.dry_run {
        scope_5053.boolean(*var_5054);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("Description");
    if let Some(var_5056) = &input.description {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("DryRun");
    if let Some(var_5058) = &input.dry_run {
        scope_5057.boolean(*var_5058);
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("EndTime");
    if let Some(var_5060) = &input.end_time {
        scope_5059.instant(var_5060, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("InstanceId");
    if let Some(var_5062) = &input.instances {
        let mut list_5064 = scope_5061.start_list(true, Some("InstanceId"));
        for item_5063 in var_5062 {
            #[allow(unused_mut)]
            let mut entry_5065 = list_5064.entry();
            entry_5065.string(item_5063);
        }
        list_5064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5066 = writer.prefix("ReasonCode");
    if let Some(var_5067) = &input.reason_codes {
        let mut list_5069 = scope_5066.start_list(true, Some("item"));
        for item_5068 in var_5067 {
            #[allow(unused_mut)]
            let mut entry_5070 = list_5069.entry();
            entry_5070.string(item_5068.as_str());
        }
        list_5069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("StartTime");
    if let Some(var_5072) = &input.start_time {
        scope_5071.instant(var_5072, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("Status");
    if let Some(var_5074) = &input.status {
        scope_5073.string(var_5074.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("DryRun");
    if let Some(var_5076) = &input.dry_run {
        scope_5075.boolean(*var_5076);
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5078) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5077, var_5078,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5080) = &input.availability_zone_group {
        scope_5079.string(var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5082) = &input.block_duration_minutes {
        scope_5081.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5082).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("ClientToken");
    if let Some(var_5084) = &input.client_token {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("DryRun");
    if let Some(var_5086) = &input.dry_run {
        scope_5085.boolean(*var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("InstanceCount");
    if let Some(var_5088) = &input.instance_count {
        scope_5087.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5088).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("LaunchGroup");
    if let Some(var_5090) = &input.launch_group {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("LaunchSpecification");
    if let Some(var_5092) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5091, var_5092,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("SpotPrice");
    if let Some(var_5094) = &input.spot_price {
        scope_5093.string(var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("Type");
    if let Some(var_5096) = &input.r#type {
        scope_5095.string(var_5096.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("ValidFrom");
    if let Some(var_5098) = &input.valid_from {
        scope_5097.instant(var_5098, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("ValidUntil");
    if let Some(var_5100) = &input.valid_until {
        scope_5099.instant(var_5100, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("TagSpecification");
    if let Some(var_5102) = &input.tag_specifications {
        let mut list_5104 = scope_5101.start_list(true, Some("item"));
        for item_5103 in var_5102 {
            #[allow(unused_mut)]
            let mut entry_5105 = list_5104.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5105, item_5103,
            );
        }
        list_5104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5107) = &input.instance_interruption_behavior {
        scope_5106.string(var_5107.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("AllocationId");
    if let Some(var_5109) = &input.allocation_id {
        scope_5108.string(var_5109);
    }
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("Attribute");
    if let Some(var_5111) = &input.attribute {
        scope_5110.string(var_5111.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("DryRun");
    if let Some(var_5113) = &input.dry_run {
        scope_5112.boolean(*var_5113);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("DryRun");
    if let Some(var_5115) = &input.dry_run {
        scope_5114.boolean(*var_5115);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("DryRun");
    if let Some(var_5117) = &input.dry_run {
        scope_5116.boolean(*var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("FpgaImageId");
    if let Some(var_5119) = &input.fpga_image_id {
        scope_5118.string(var_5119);
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("Attribute");
    if let Some(var_5121) = &input.attribute {
        scope_5120.string(var_5121.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("Attribute");
    if let Some(var_5123) = &input.attribute {
        scope_5122.string(var_5123.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("ImageId");
    if let Some(var_5125) = &input.image_id {
        scope_5124.string(var_5125);
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("DryRun");
    if let Some(var_5127) = &input.dry_run {
        scope_5126.boolean(*var_5127);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("Attribute");
    if let Some(var_5129) = &input.attribute {
        scope_5128.string(var_5129.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("DryRun");
    if let Some(var_5131) = &input.dry_run {
        scope_5130.boolean(*var_5131);
    }
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("InstanceId");
    if let Some(var_5133) = &input.instance_id {
        scope_5132.string(var_5133);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("DryRun");
    if let Some(var_5135) = &input.dry_run {
        scope_5134.boolean(*var_5135);
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5137) = &input.network_interface_id {
        scope_5136.string(var_5137);
    }
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("SourceDestCheck");
    if let Some(var_5139) = &input.source_dest_check {
        scope_5138.string(var_5139);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("Attribute");
    if let Some(var_5141) = &input.attribute {
        scope_5140.string(var_5141.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("SnapshotId");
    if let Some(var_5143) = &input.snapshot_id {
        scope_5142.string(var_5143);
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("DryRun");
    if let Some(var_5145) = &input.dry_run {
        scope_5144.boolean(*var_5145);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("DryRun");
    if let Some(var_5147) = &input.dry_run {
        scope_5146.boolean(*var_5147);
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("PublicIp");
    if let Some(var_5149) = &input.public_ip {
        scope_5148.string(var_5149);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("DryRun");
    if let Some(var_5151) = &input.dry_run {
        scope_5150.boolean(*var_5151);
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("PrefixListId");
    if let Some(var_5153) = &input.prefix_list_id {
        scope_5152.string(var_5153);
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("PreviousVersion");
    if let Some(var_5155) = &input.previous_version {
        scope_5154.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5155).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("CurrentVersion");
    if let Some(var_5157) = &input.current_version {
        scope_5156.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5157).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5159) = &input.client_vpn_endpoint_id {
        scope_5158.string(var_5159);
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5161) = &input.target_network_cidr {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("AccessGroupId");
    if let Some(var_5163) = &input.access_group_id {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("RevokeAllGroups");
    if let Some(var_5165) = &input.revoke_all_groups {
        scope_5164.boolean(*var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("DryRun");
    if let Some(var_5167) = &input.dry_run {
        scope_5166.boolean(*var_5167);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("DryRun");
    if let Some(var_5169) = &input.dry_run {
        scope_5168.boolean(*var_5169);
    }
    #[allow(unused_mut)]
    let mut scope_5170 = writer.prefix("GroupId");
    if let Some(var_5171) = &input.group_id {
        scope_5170.string(var_5171);
    }
    #[allow(unused_mut)]
    let mut scope_5172 = writer.prefix("IpPermissions");
    if let Some(var_5173) = &input.ip_permissions {
        let mut list_5175 = scope_5172.start_list(true, Some("item"));
        for item_5174 in var_5173 {
            #[allow(unused_mut)]
            let mut entry_5176 = list_5175.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5176, item_5174);
        }
        list_5175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5178) = &input.security_group_rule_ids {
        let mut list_5180 = scope_5177.start_list(true, Some("item"));
        for item_5179 in var_5178 {
            #[allow(unused_mut)]
            let mut entry_5181 = list_5180.entry();
            entry_5181.string(item_5179);
        }
        list_5180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5182 = writer.prefix("CidrIp");
    if let Some(var_5183) = &input.cidr_ip {
        scope_5182.string(var_5183);
    }
    #[allow(unused_mut)]
    let mut scope_5184 = writer.prefix("FromPort");
    if let Some(var_5185) = &input.from_port {
        scope_5184.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5185).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("IpProtocol");
    if let Some(var_5187) = &input.ip_protocol {
        scope_5186.string(var_5187);
    }
    #[allow(unused_mut)]
    let mut scope_5188 = writer.prefix("ToPort");
    if let Some(var_5189) = &input.to_port {
        scope_5188.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5189).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5190 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5191) = &input.source_security_group_name {
        scope_5190.string(var_5191);
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5193) = &input.source_security_group_owner_id {
        scope_5192.string(var_5193);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("CidrIp");
    if let Some(var_5195) = &input.cidr_ip {
        scope_5194.string(var_5195);
    }
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("FromPort");
    if let Some(var_5197) = &input.from_port {
        scope_5196.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("GroupId");
    if let Some(var_5199) = &input.group_id {
        scope_5198.string(var_5199);
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("GroupName");
    if let Some(var_5201) = &input.group_name {
        scope_5200.string(var_5201);
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("IpPermissions");
    if let Some(var_5203) = &input.ip_permissions {
        let mut list_5205 = scope_5202.start_list(true, Some("item"));
        for item_5204 in var_5203 {
            #[allow(unused_mut)]
            let mut entry_5206 = list_5205.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5206, item_5204);
        }
        list_5205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5207 = writer.prefix("IpProtocol");
    if let Some(var_5208) = &input.ip_protocol {
        scope_5207.string(var_5208);
    }
    #[allow(unused_mut)]
    let mut scope_5209 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5210) = &input.source_security_group_name {
        scope_5209.string(var_5210);
    }
    #[allow(unused_mut)]
    let mut scope_5211 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5212) = &input.source_security_group_owner_id {
        scope_5211.string(var_5212);
    }
    #[allow(unused_mut)]
    let mut scope_5213 = writer.prefix("ToPort");
    if let Some(var_5214) = &input.to_port {
        scope_5213.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5214).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("DryRun");
    if let Some(var_5216) = &input.dry_run {
        scope_5215.boolean(*var_5216);
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5218) = &input.security_group_rule_ids {
        let mut list_5220 = scope_5217.start_list(true, Some("item"));
        for item_5219 in var_5218 {
            #[allow(unused_mut)]
            let mut entry_5221 = list_5220.entry();
            entry_5221.string(item_5219);
        }
        list_5220.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5223) = &input.block_device_mappings {
        let mut list_5225 = scope_5222.start_list(true, Some("BlockDeviceMapping"));
        for item_5224 in var_5223 {
            #[allow(unused_mut)]
            let mut entry_5226 = list_5225.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5226, item_5224,
            );
        }
        list_5225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5227 = writer.prefix("ImageId");
    if let Some(var_5228) = &input.image_id {
        scope_5227.string(var_5228);
    }
    #[allow(unused_mut)]
    let mut scope_5229 = writer.prefix("InstanceType");
    if let Some(var_5230) = &input.instance_type {
        scope_5229.string(var_5230.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5231 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5232) = &input.ipv6_address_count {
        scope_5231.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5233 = writer.prefix("Ipv6Address");
    if let Some(var_5234) = &input.ipv6_addresses {
        let mut list_5236 = scope_5233.start_list(true, Some("item"));
        for item_5235 in var_5234 {
            #[allow(unused_mut)]
            let mut entry_5237 = list_5236.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5237, item_5235,
            );
        }
        list_5236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("KernelId");
    if let Some(var_5239) = &input.kernel_id {
        scope_5238.string(var_5239);
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("KeyName");
    if let Some(var_5241) = &input.key_name {
        scope_5240.string(var_5241);
    }
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("MaxCount");
    if let Some(var_5243) = &input.max_count {
        scope_5242.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("MinCount");
    if let Some(var_5245) = &input.min_count {
        scope_5244.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("Monitoring");
    if let Some(var_5247) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5246, var_5247,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("Placement");
    if let Some(var_5249) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5248, var_5249);
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("RamdiskId");
    if let Some(var_5251) = &input.ramdisk_id {
        scope_5250.string(var_5251);
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("SecurityGroupId");
    if let Some(var_5253) = &input.security_group_ids {
        let mut list_5255 = scope_5252.start_list(true, Some("SecurityGroupId"));
        for item_5254 in var_5253 {
            #[allow(unused_mut)]
            let mut entry_5256 = list_5255.entry();
            entry_5256.string(item_5254);
        }
        list_5255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5257 = writer.prefix("SecurityGroup");
    if let Some(var_5258) = &input.security_groups {
        let mut list_5260 = scope_5257.start_list(true, Some("SecurityGroup"));
        for item_5259 in var_5258 {
            #[allow(unused_mut)]
            let mut entry_5261 = list_5260.entry();
            entry_5261.string(item_5259);
        }
        list_5260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("SubnetId");
    if let Some(var_5263) = &input.subnet_id {
        scope_5262.string(var_5263);
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("UserData");
    if let Some(var_5265) = &input.user_data {
        scope_5264.string(var_5265);
    }
    #[allow(unused_mut)]
    let mut scope_5266 = writer.prefix("AdditionalInfo");
    if let Some(var_5267) = &input.additional_info {
        scope_5266.string(var_5267);
    }
    #[allow(unused_mut)]
    let mut scope_5268 = writer.prefix("ClientToken");
    if let Some(var_5269) = &input.client_token {
        scope_5268.string(var_5269);
    }
    #[allow(unused_mut)]
    let mut scope_5270 = writer.prefix("DisableApiTermination");
    if let Some(var_5271) = &input.disable_api_termination {
        scope_5270.boolean(*var_5271);
    }
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("DryRun");
    if let Some(var_5273) = &input.dry_run {
        scope_5272.boolean(*var_5273);
    }
    #[allow(unused_mut)]
    let mut scope_5274 = writer.prefix("EbsOptimized");
    if let Some(var_5275) = &input.ebs_optimized {
        scope_5274.boolean(*var_5275);
    }
    #[allow(unused_mut)]
    let mut scope_5276 = writer.prefix("IamInstanceProfile");
    if let Some(var_5277) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5276, var_5277,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5278 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5279) = &input.instance_initiated_shutdown_behavior {
        scope_5278.string(var_5279.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5280 = writer.prefix("NetworkInterface");
    if let Some(var_5281) = &input.network_interfaces {
        let mut list_5283 = scope_5280.start_list(true, Some("item"));
        for item_5282 in var_5281 {
            #[allow(unused_mut)]
            let mut entry_5284 = list_5283.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5284, item_5282);
        }
        list_5283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("PrivateIpAddress");
    if let Some(var_5286) = &input.private_ip_address {
        scope_5285.string(var_5286);
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5288) = &input.elastic_gpu_specification {
        let mut list_5290 = scope_5287.start_list(true, Some("item"));
        for item_5289 in var_5288 {
            #[allow(unused_mut)]
            let mut entry_5291 = list_5290.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5291, item_5289,
            );
        }
        list_5290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5293) = &input.elastic_inference_accelerators {
        let mut list_5295 = scope_5292.start_list(true, Some("item"));
        for item_5294 in var_5293 {
            #[allow(unused_mut)]
            let mut entry_5296 = list_5295.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5296, item_5294,
            );
        }
        list_5295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5297 = writer.prefix("TagSpecification");
    if let Some(var_5298) = &input.tag_specifications {
        let mut list_5300 = scope_5297.start_list(true, Some("item"));
        for item_5299 in var_5298 {
            #[allow(unused_mut)]
            let mut entry_5301 = list_5300.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5301, item_5299,
            );
        }
        list_5300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("LaunchTemplate");
    if let Some(var_5303) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5302, var_5303,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5305) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5304, var_5305,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("CreditSpecification");
    if let Some(var_5307) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5306, var_5307,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("CpuOptions");
    if let Some(var_5309) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_5308, var_5309);
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5311) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5310, var_5311,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("HibernationOptions");
    if let Some(var_5313) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5312, var_5313,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("LicenseSpecification");
    if let Some(var_5315) = &input.license_specifications {
        let mut list_5317 = scope_5314.start_list(true, Some("item"));
        for item_5316 in var_5315 {
            #[allow(unused_mut)]
            let mut entry_5318 = list_5317.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5318, item_5316,
            );
        }
        list_5317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("MetadataOptions");
    if let Some(var_5320) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5319, var_5320,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5321 = writer.prefix("EnclaveOptions");
    if let Some(var_5322) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5321, var_5322,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5323 = writer.prefix("ClientToken");
    if let Some(var_5324) = &input.client_token {
        scope_5323.string(var_5324);
    }
    #[allow(unused_mut)]
    let mut scope_5325 = writer.prefix("DryRun");
    if let Some(var_5326) = &input.dry_run {
        scope_5325.boolean(*var_5326);
    }
    #[allow(unused_mut)]
    let mut scope_5327 = writer.prefix("InstanceCount");
    if let Some(var_5328) = &input.instance_count {
        scope_5327.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("LaunchSpecification");
    if let Some(var_5330) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5329, var_5330,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5331 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5332) = &input.scheduled_instance_id {
        scope_5331.string(var_5332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5333 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5334) = &input.local_gateway_route_table_id {
        scope_5333.string(var_5334);
    }
    #[allow(unused_mut)]
    let mut scope_5335 = writer.prefix("MaxResults");
    if let Some(var_5336) = &input.max_results {
        scope_5335.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5337 = writer.prefix("NextToken");
    if let Some(var_5338) = &input.next_token {
        scope_5337.string(var_5338);
    }
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("DryRun");
    if let Some(var_5340) = &input.dry_run {
        scope_5339.boolean(*var_5340);
    }
    #[allow(unused_mut)]
    let mut scope_5341 = writer.prefix("Filter");
    if let Some(var_5342) = &input.filters {
        let mut list_5344 = scope_5341.start_list(true, Some("Filter"));
        for item_5343 in var_5342 {
            #[allow(unused_mut)]
            let mut entry_5345 = list_5344.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5345, item_5343);
        }
        list_5344.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5346 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5347) = &input.transit_gateway_multicast_domain_id {
        scope_5346.string(var_5347);
    }
    #[allow(unused_mut)]
    let mut scope_5348 = writer.prefix("Filter");
    if let Some(var_5349) = &input.filters {
        let mut list_5351 = scope_5348.start_list(true, Some("Filter"));
        for item_5350 in var_5349 {
            #[allow(unused_mut)]
            let mut entry_5352 = list_5351.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5352, item_5350);
        }
        list_5351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("MaxResults");
    if let Some(var_5354) = &input.max_results {
        scope_5353.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5354).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5355 = writer.prefix("NextToken");
    if let Some(var_5356) = &input.next_token {
        scope_5355.string(var_5356);
    }
    #[allow(unused_mut)]
    let mut scope_5357 = writer.prefix("DryRun");
    if let Some(var_5358) = &input.dry_run {
        scope_5357.boolean(*var_5358);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5359 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5360) = &input.transit_gateway_route_table_id {
        scope_5359.string(var_5360);
    }
    #[allow(unused_mut)]
    let mut scope_5361 = writer.prefix("Filter");
    if let Some(var_5362) = &input.filters {
        let mut list_5364 = scope_5361.start_list(true, Some("Filter"));
        for item_5363 in var_5362 {
            #[allow(unused_mut)]
            let mut entry_5365 = list_5364.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5365, item_5363);
        }
        list_5364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("MaxResults");
    if let Some(var_5367) = &input.max_results {
        scope_5366.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("DryRun");
    if let Some(var_5369) = &input.dry_run {
        scope_5368.boolean(*var_5369);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("InstanceId");
    if let Some(var_5371) = &input.instance_id {
        scope_5370.string(var_5371);
    }
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("DryRun");
    if let Some(var_5373) = &input.dry_run {
        scope_5372.boolean(*var_5373);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5374 = writer.prefix("InstanceId");
    if let Some(var_5375) = &input.instance_ids {
        let mut list_5377 = scope_5374.start_list(true, Some("InstanceId"));
        for item_5376 in var_5375 {
            #[allow(unused_mut)]
            let mut entry_5378 = list_5377.entry();
            entry_5378.string(item_5376);
        }
        list_5377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("AdditionalInfo");
    if let Some(var_5380) = &input.additional_info {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("DryRun");
    if let Some(var_5382) = &input.dry_run {
        scope_5381.boolean(*var_5382);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5384) = &input.network_insights_path_id {
        scope_5383.string(var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("FilterInArn");
    if let Some(var_5386) = &input.filter_in_arns {
        let mut list_5388 = scope_5385.start_list(true, Some("item"));
        for item_5387 in var_5386 {
            #[allow(unused_mut)]
            let mut entry_5389 = list_5388.entry();
            entry_5389.string(item_5387);
        }
        list_5388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5390 = writer.prefix("DryRun");
    if let Some(var_5391) = &input.dry_run {
        scope_5390.boolean(*var_5391);
    }
    #[allow(unused_mut)]
    let mut scope_5392 = writer.prefix("TagSpecification");
    if let Some(var_5393) = &input.tag_specifications {
        let mut list_5395 = scope_5392.start_list(true, Some("item"));
        for item_5394 in var_5393 {
            #[allow(unused_mut)]
            let mut entry_5396 = list_5395.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5396, item_5394,
            );
        }
        list_5395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("ClientToken");
    if let Some(var_5398) = &input.client_token {
        scope_5397.string(var_5398);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("DryRun");
    if let Some(var_5400) = &input.dry_run {
        scope_5399.boolean(*var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("ServiceId");
    if let Some(var_5402) = &input.service_id {
        scope_5401.string(var_5402);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("InstanceId");
    if let Some(var_5404) = &input.instance_ids {
        let mut list_5406 = scope_5403.start_list(true, Some("InstanceId"));
        for item_5405 in var_5404 {
            #[allow(unused_mut)]
            let mut entry_5407 = list_5406.entry();
            entry_5407.string(item_5405);
        }
        list_5406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5408 = writer.prefix("Hibernate");
    if let Some(var_5409) = &input.hibernate {
        scope_5408.boolean(*var_5409);
    }
    #[allow(unused_mut)]
    let mut scope_5410 = writer.prefix("DryRun");
    if let Some(var_5411) = &input.dry_run {
        scope_5410.boolean(*var_5411);
    }
    #[allow(unused_mut)]
    let mut scope_5412 = writer.prefix("Force");
    if let Some(var_5413) = &input.force {
        scope_5412.boolean(*var_5413);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5414 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5415) = &input.client_vpn_endpoint_id {
        scope_5414.string(var_5415);
    }
    #[allow(unused_mut)]
    let mut scope_5416 = writer.prefix("ConnectionId");
    if let Some(var_5417) = &input.connection_id {
        scope_5416.string(var_5417);
    }
    #[allow(unused_mut)]
    let mut scope_5418 = writer.prefix("Username");
    if let Some(var_5419) = &input.username {
        scope_5418.string(var_5419);
    }
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("DryRun");
    if let Some(var_5421) = &input.dry_run {
        scope_5420.boolean(*var_5421);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("InstanceId");
    if let Some(var_5423) = &input.instance_ids {
        let mut list_5425 = scope_5422.start_list(true, Some("InstanceId"));
        for item_5424 in var_5423 {
            #[allow(unused_mut)]
            let mut entry_5426 = list_5425.entry();
            entry_5426.string(item_5424);
        }
        list_5425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5427 = writer.prefix("DryRun");
    if let Some(var_5428) = &input.dry_run {
        scope_5427.boolean(*var_5428);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5429 = writer.prefix("Ipv6Addresses");
    if let Some(var_5430) = &input.ipv6_addresses {
        let mut list_5432 = scope_5429.start_list(true, Some("item"));
        for item_5431 in var_5430 {
            #[allow(unused_mut)]
            let mut entry_5433 = list_5432.entry();
            entry_5433.string(item_5431);
        }
        list_5432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("Ipv6Prefix");
    if let Some(var_5435) = &input.ipv6_prefixes {
        let mut list_5437 = scope_5434.start_list(true, Some("item"));
        for item_5436 in var_5435 {
            #[allow(unused_mut)]
            let mut entry_5438 = list_5437.entry();
            entry_5438.string(item_5436);
        }
        list_5437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5439 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5440) = &input.network_interface_id {
        scope_5439.string(var_5440);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5442) = &input.network_interface_id {
        scope_5441.string(var_5442);
    }
    #[allow(unused_mut)]
    let mut scope_5443 = writer.prefix("PrivateIpAddress");
    if let Some(var_5444) = &input.private_ip_addresses {
        let mut list_5446 = scope_5443.start_list(true, Some("PrivateIpAddress"));
        for item_5445 in var_5444 {
            #[allow(unused_mut)]
            let mut entry_5447 = list_5446.entry();
            entry_5447.string(item_5445);
        }
        list_5446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("Ipv4Prefix");
    if let Some(var_5449) = &input.ipv4_prefixes {
        let mut list_5451 = scope_5448.start_list(true, Some("item"));
        for item_5450 in var_5449 {
            #[allow(unused_mut)]
            let mut entry_5452 = list_5451.entry();
            entry_5452.string(item_5450);
        }
        list_5451.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("InstanceId");
    if let Some(var_5454) = &input.instance_ids {
        let mut list_5456 = scope_5453.start_list(true, Some("InstanceId"));
        for item_5455 in var_5454 {
            #[allow(unused_mut)]
            let mut entry_5457 = list_5456.entry();
            entry_5457.string(item_5455);
        }
        list_5456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5458 = writer.prefix("DryRun");
    if let Some(var_5459) = &input.dry_run {
        scope_5458.boolean(*var_5459);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5460 = writer.prefix("DryRun");
    if let Some(var_5461) = &input.dry_run {
        scope_5460.boolean(*var_5461);
    }
    #[allow(unused_mut)]
    let mut scope_5462 = writer.prefix("GroupId");
    if let Some(var_5463) = &input.group_id {
        scope_5462.string(var_5463);
    }
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("GroupName");
    if let Some(var_5465) = &input.group_name {
        scope_5464.string(var_5465);
    }
    #[allow(unused_mut)]
    let mut scope_5466 = writer.prefix("IpPermissions");
    if let Some(var_5467) = &input.ip_permissions {
        let mut list_5469 = scope_5466.start_list(true, Some("item"));
        for item_5468 in var_5467 {
            #[allow(unused_mut)]
            let mut entry_5470 = list_5469.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5470, item_5468);
        }
        list_5469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5472) = &input.security_group_rule_descriptions {
        let mut list_5474 = scope_5471.start_list(true, Some("item"));
        for item_5473 in var_5472 {
            #[allow(unused_mut)]
            let mut entry_5475 = list_5474.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5475, item_5473,
            );
        }
        list_5474.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5476 = writer.prefix("DryRun");
    if let Some(var_5477) = &input.dry_run {
        scope_5476.boolean(*var_5477);
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("GroupId");
    if let Some(var_5479) = &input.group_id {
        scope_5478.string(var_5479);
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("GroupName");
    if let Some(var_5481) = &input.group_name {
        scope_5480.string(var_5481);
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("IpPermissions");
    if let Some(var_5483) = &input.ip_permissions {
        let mut list_5485 = scope_5482.start_list(true, Some("item"));
        for item_5484 in var_5483 {
            #[allow(unused_mut)]
            let mut entry_5486 = list_5485.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5486, item_5484);
        }
        list_5485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5487 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5488) = &input.security_group_rule_descriptions {
        let mut list_5490 = scope_5487.start_list(true, Some("item"));
        for item_5489 in var_5488 {
            #[allow(unused_mut)]
            let mut entry_5491 = list_5490.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5491, item_5489,
            );
        }
        list_5490.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5492 = writer.prefix("Cidr");
    if let Some(var_5493) = &input.cidr {
        scope_5492.string(var_5493);
    }
    #[allow(unused_mut)]
    let mut scope_5494 = writer.prefix("DryRun");
    if let Some(var_5495) = &input.dry_run {
        scope_5494.boolean(*var_5495);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
