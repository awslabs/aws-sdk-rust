// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_target_configuration_request(entry_12, item_10);
        }
        list_11.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_65, item_63);
        }
        list_64.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_82, item_80);
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("NetworkInterfaceId");
    if let Some(var_104) = &input.network_interface_id {
        scope_103.string(var_104);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("AllowReassignment");
    if let Some(var_106) = &input.allow_reassignment {
        scope_105.boolean(*var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("NetworkInterfaceId");
    if let Some(var_108) = &input.network_interface_id {
        scope_107.string(var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("PrivateIpAddress");
    if let Some(var_110) = &input.private_ip_addresses {
        let mut list_112 = scope_109.start_list(true, Some("PrivateIpAddress"));
        for item_111 in var_110 {
            #[allow(unused_mut)]
            let mut entry_113 = list_112.entry();
            entry_113.string(item_111);
        }
        list_112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_115) = &input.secondary_private_ip_address_count {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("AllocationId");
    if let Some(var_117) = &input.allocation_id {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("InstanceId");
    if let Some(var_119) = &input.instance_id {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("PublicIp");
    if let Some(var_121) = &input.public_ip {
        scope_120.string(var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("AllowReassociation");
    if let Some(var_123) = &input.allow_reassociation {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("DryRun");
    if let Some(var_125) = &input.dry_run {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("NetworkInterfaceId");
    if let Some(var_127) = &input.network_interface_id {
        scope_126.string(var_127);
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("PrivateIpAddress");
    if let Some(var_129) = &input.private_ip_address {
        scope_128.string(var_129);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_131) = &input.client_vpn_endpoint_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("SubnetId");
    if let Some(var_133) = &input.subnet_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("ClientToken");
    if let Some(var_135) = &input.client_token {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("DryRun");
    if let Some(var_137) = &input.dry_run {
        scope_136.boolean(*var_137);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DhcpOptionsId");
    if let Some(var_139) = &input.dhcp_options_id {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("VpcId");
    if let Some(var_141) = &input.vpc_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("DryRun");
    if let Some(var_143) = &input.dry_run {
        scope_142.boolean(*var_143);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("CertificateArn");
    if let Some(var_145) = &input.certificate_arn {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("RoleArn");
    if let Some(var_147) = &input.role_arn {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("DryRun");
    if let Some(var_149) = &input.dry_run {
        scope_148.boolean(*var_149);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("IamInstanceProfile");
    if let Some(var_151) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_150, var_151,
        );
    }
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("InstanceId");
    if let Some(var_153) = &input.instance_id {
        scope_152.string(var_153);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("DryRun");
    if let Some(var_155) = &input.dry_run {
        scope_154.boolean(*var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("RouteTableId");
    if let Some(var_157) = &input.route_table_id {
        scope_156.string(var_157);
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("SubnetId");
    if let Some(var_159) = &input.subnet_id {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("GatewayId");
    if let Some(var_161) = &input.gateway_id {
        scope_160.string(var_161);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_163) = &input.ipv6_cidr_block {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("SubnetId");
    if let Some(var_165) = &input.subnet_id {
        scope_164.string(var_165);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_167) = &input.transit_gateway_multicast_domain_id {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_169) = &input.transit_gateway_attachment_id {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("SubnetIds");
    if let Some(var_171) = &input.subnet_ids {
        let mut list_173 = scope_170.start_list(true, Some("item"));
        for item_172 in var_171 {
            #[allow(unused_mut)]
            let mut entry_174 = list_173.entry();
            entry_174.string(item_172);
        }
        list_173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DryRun");
    if let Some(var_176) = &input.dry_run {
        scope_175.boolean(*var_176);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_178) = &input.transit_gateway_route_table_id {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_180) = &input.transit_gateway_attachment_id {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("DryRun");
    if let Some(var_182) = &input.dry_run {
        scope_181.boolean(*var_182);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_184) = &input.amazon_provided_ipv6_cidr_block {
        scope_183.boolean(*var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("CidrBlock");
    if let Some(var_186) = &input.cidr_block {
        scope_185.string(var_186);
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("VpcId");
    if let Some(var_188) = &input.vpc_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_190) = &input.ipv6_cidr_block_network_border_group {
        scope_189.string(var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("Ipv6Pool");
    if let Some(var_192) = &input.ipv6_pool {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_194) = &input.ipv6_cidr_block {
        scope_193.string(var_194);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SecurityGroupId");
    if let Some(var_198) = &input.groups {
        let mut list_200 = scope_197.start_list(true, Some("groupId"));
        for item_199 in var_198 {
            #[allow(unused_mut)]
            let mut entry_201 = list_200.entry();
            entry_201.string(item_199);
        }
        list_200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("InstanceId");
    if let Some(var_203) = &input.instance_id {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("VpcId");
    if let Some(var_205) = &input.vpc_id {
        scope_204.string(var_205);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("DryRun");
    if let Some(var_207) = &input.dry_run {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("InternetGatewayId");
    if let Some(var_209) = &input.internet_gateway_id {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("VpcId");
    if let Some(var_211) = &input.vpc_id {
        scope_210.string(var_211);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("DeviceIndex");
    if let Some(var_213) = &input.device_index {
        scope_212.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DryRun");
    if let Some(var_215) = &input.dry_run {
        scope_214.boolean(*var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("InstanceId");
    if let Some(var_217) = &input.instance_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("NetworkInterfaceId");
    if let Some(var_219) = &input.network_interface_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("NetworkCardIndex");
    if let Some(var_221) = &input.network_card_index {
        scope_220.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("Device");
    if let Some(var_223) = &input.device {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("InstanceId");
    if let Some(var_225) = &input.instance_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("VolumeId");
    if let Some(var_227) = &input.volume_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("DryRun");
    if let Some(var_229) = &input.dry_run {
        scope_228.boolean(*var_229);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("VpcId");
    if let Some(var_231) = &input.vpc_id {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("VpnGatewayId");
    if let Some(var_233) = &input.vpn_gateway_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DryRun");
    if let Some(var_235) = &input.dry_run {
        scope_234.boolean(*var_235);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_237) = &input.client_vpn_endpoint_id {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("TargetNetworkCidr");
    if let Some(var_239) = &input.target_network_cidr {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("AccessGroupId");
    if let Some(var_241) = &input.access_group_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_243) = &input.authorize_all_groups {
        scope_242.boolean(*var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Description");
    if let Some(var_245) = &input.description {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("ClientToken");
    if let Some(var_247) = &input.client_token {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("DryRun");
    if let Some(var_249) = &input.dry_run {
        scope_248.boolean(*var_249);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("DryRun");
    if let Some(var_251) = &input.dry_run {
        scope_250.boolean(*var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("GroupId");
    if let Some(var_253) = &input.group_id {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("IpPermissions");
    if let Some(var_255) = &input.ip_permissions {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_258, item_256);
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("CidrIp");
    if let Some(var_260) = &input.cidr_ip {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("FromPort");
    if let Some(var_262) = &input.from_port {
        scope_261.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("IpProtocol");
    if let Some(var_264) = &input.ip_protocol {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("ToPort");
    if let Some(var_266) = &input.to_port {
        scope_265.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_268) = &input.source_security_group_name {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_270) = &input.source_security_group_owner_id {
        scope_269.string(var_270);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("CidrIp");
    if let Some(var_272) = &input.cidr_ip {
        scope_271.string(var_272);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("FromPort");
    if let Some(var_274) = &input.from_port {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("GroupId");
    if let Some(var_276) = &input.group_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("GroupName");
    if let Some(var_278) = &input.group_name {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("IpPermissions");
    if let Some(var_280) = &input.ip_permissions {
        let mut list_282 = scope_279.start_list(true, Some("item"));
        for item_281 in var_280 {
            #[allow(unused_mut)]
            let mut entry_283 = list_282.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_283, item_281);
        }
        list_282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("IpProtocol");
    if let Some(var_285) = &input.ip_protocol {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_287) = &input.source_security_group_name {
        scope_286.string(var_287);
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_289) = &input.source_security_group_owner_id {
        scope_288.string(var_289);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("ToPort");
    if let Some(var_291) = &input.to_port {
        scope_290.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("DryRun");
    if let Some(var_293) = &input.dry_run {
        scope_292.boolean(*var_293);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("InstanceId");
    if let Some(var_295) = &input.instance_id {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Storage");
    if let Some(var_297) = &input.storage {
        crate::query_ser::serialize_structure_storage(scope_296, var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("DryRun");
    if let Some(var_299) = &input.dry_run {
        scope_298.boolean(*var_299);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("BundleId");
    if let Some(var_301) = &input.bundle_id {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("DryRun");
    if let Some(var_303) = &input.dry_run {
        scope_302.boolean(*var_303);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("CapacityReservationId");
    if let Some(var_305) = &input.capacity_reservation_id {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("DryRun");
    if let Some(var_307) = &input.dry_run {
        scope_306.boolean(*var_307);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("ConversionTaskId");
    if let Some(var_309) = &input.conversion_task_id {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("DryRun");
    if let Some(var_311) = &input.dry_run {
        scope_310.boolean(*var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("ReasonMessage");
    if let Some(var_313) = &input.reason_message {
        scope_312.string(var_313);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("ExportTaskId");
    if let Some(var_315) = &input.export_task_id {
        scope_314.string(var_315);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("CancelReason");
    if let Some(var_317) = &input.cancel_reason {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("DryRun");
    if let Some(var_319) = &input.dry_run {
        scope_318.boolean(*var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("ImportTaskId");
    if let Some(var_321) = &input.import_task_id {
        scope_320.string(var_321);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_323) = &input.reserved_instances_listing_id {
        scope_322.string(var_323);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("DryRun");
    if let Some(var_325) = &input.dry_run {
        scope_324.boolean(*var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("SpotFleetRequestId");
    if let Some(var_327) = &input.spot_fleet_request_ids {
        let mut list_329 = scope_326.start_list(true, Some("item"));
        for item_328 in var_327 {
            #[allow(unused_mut)]
            let mut entry_330 = list_329.entry();
            entry_330.string(item_328);
        }
        list_329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TerminateInstances");
    if let Some(var_332) = &input.terminate_instances {
        scope_331.boolean(*var_332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("DryRun");
    if let Some(var_334) = &input.dry_run {
        scope_333.boolean(*var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_336) = &input.spot_instance_request_ids {
        let mut list_338 = scope_335.start_list(true, Some("SpotInstanceRequestId"));
        for item_337 in var_336 {
            #[allow(unused_mut)]
            let mut entry_339 = list_338.entry();
            entry_339.string(item_337);
        }
        list_338.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("InstanceId");
    if let Some(var_341) = &input.instance_id {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("ProductCode");
    if let Some(var_343) = &input.product_code {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("DryRun");
    if let Some(var_347) = &input.dry_run {
        scope_346.boolean(*var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("SourceFpgaImageId");
    if let Some(var_349) = &input.source_fpga_image_id {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("Description");
    if let Some(var_351) = &input.description {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Name");
    if let Some(var_353) = &input.name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SourceRegion");
    if let Some(var_355) = &input.source_region {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ClientToken");
    if let Some(var_357) = &input.client_token {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("ClientToken");
    if let Some(var_359) = &input.client_token {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Description");
    if let Some(var_361) = &input.description {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("Encrypted");
    if let Some(var_363) = &input.encrypted {
        scope_362.boolean(*var_363);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("KmsKeyId");
    if let Some(var_365) = &input.kms_key_id {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("Name");
    if let Some(var_367) = &input.name {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("SourceImageId");
    if let Some(var_369) = &input.source_image_id {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("SourceRegion");
    if let Some(var_371) = &input.source_region {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("DestinationOutpostArn");
    if let Some(var_373) = &input.destination_outpost_arn {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("DryRun");
    if let Some(var_375) = &input.dry_run {
        scope_374.boolean(*var_375);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("Description");
    if let Some(var_377) = &input.description {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("DestinationOutpostArn");
    if let Some(var_379) = &input.destination_outpost_arn {
        scope_378.string(var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("DestinationRegion");
    if let Some(var_381) = &input.destination_region {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("Encrypted");
    if let Some(var_383) = &input.encrypted {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("KmsKeyId");
    if let Some(var_385) = &input.kms_key_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("PresignedUrl");
    if let Some(var_387) = &input.presigned_url {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("SourceRegion");
    if let Some(var_389) = &input.source_region {
        scope_388.string(var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("SourceSnapshotId");
    if let Some(var_391) = &input.source_snapshot_id {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("TagSpecification");
    if let Some(var_393) = &input.tag_specifications {
        let mut list_395 = scope_392.start_list(true, Some("item"));
        for item_394 in var_393 {
            #[allow(unused_mut)]
            let mut entry_396 = list_395.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_396, item_394);
        }
        list_395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("DryRun");
    if let Some(var_398) = &input.dry_run {
        scope_397.boolean(*var_398);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("ClientToken");
    if let Some(var_400) = &input.client_token {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("InstanceType");
    if let Some(var_402) = &input.instance_type {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("InstancePlatform");
    if let Some(var_404) = &input.instance_platform {
        scope_403.string(var_404.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("AvailabilityZone");
    if let Some(var_406) = &input.availability_zone {
        scope_405.string(var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("AvailabilityZoneId");
    if let Some(var_408) = &input.availability_zone_id {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Tenancy");
    if let Some(var_410) = &input.tenancy {
        scope_409.string(var_410.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("InstanceCount");
    if let Some(var_412) = &input.instance_count {
        scope_411.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("EbsOptimized");
    if let Some(var_414) = &input.ebs_optimized {
        scope_413.boolean(*var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("EphemeralStorage");
    if let Some(var_416) = &input.ephemeral_storage {
        scope_415.boolean(*var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("EndDate");
    if let Some(var_418) = &input.end_date {
        scope_417.instant(var_418, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("EndDateType");
    if let Some(var_420) = &input.end_date_type {
        scope_419.string(var_420.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_422) = &input.instance_match_criteria {
        scope_421.string(var_422.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("TagSpecifications");
    if let Some(var_424) = &input.tag_specifications {
        let mut list_426 = scope_423.start_list(true, Some("item"));
        for item_425 in var_424 {
            #[allow(unused_mut)]
            let mut entry_427 = list_426.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_427, item_425);
        }
        list_426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("DryRun");
    if let Some(var_429) = &input.dry_run {
        scope_428.boolean(*var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("OutpostArn");
    if let Some(var_431) = &input.outpost_arn {
        scope_430.string(var_431);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("VpcId");
    if let Some(var_433) = &input.vpc_id {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("TagSpecification");
    if let Some(var_435) = &input.tag_specifications {
        let mut list_437 = scope_434.start_list(true, Some("item"));
        for item_436 in var_435 {
            #[allow(unused_mut)]
            let mut entry_438 = list_437.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_438, item_436);
        }
        list_437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("DryRun");
    if let Some(var_440) = &input.dry_run {
        scope_439.boolean(*var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("ClientToken");
    if let Some(var_442) = &input.client_token {
        scope_441.string(var_442);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("ClientCidrBlock");
    if let Some(var_444) = &input.client_cidr_block {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("ServerCertificateArn");
    if let Some(var_446) = &input.server_certificate_arn {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("Authentication");
    if let Some(var_448) = &input.authentication_options {
        let mut list_450 = scope_447.start_list(true, None);
        for item_449 in var_448 {
            #[allow(unused_mut)]
            let mut entry_451 = list_450.entry();
            crate::query_ser::serialize_structure_client_vpn_authentication_request(
                entry_451, item_449,
            );
        }
        list_450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("ConnectionLogOptions");
    if let Some(var_453) = &input.connection_log_options {
        crate::query_ser::serialize_structure_connection_log_options(scope_452, var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DnsServers");
    if let Some(var_455) = &input.dns_servers {
        let mut list_457 = scope_454.start_list(true, Some("item"));
        for item_456 in var_455 {
            #[allow(unused_mut)]
            let mut entry_458 = list_457.entry();
            entry_458.string(item_456);
        }
        list_457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("TransportProtocol");
    if let Some(var_460) = &input.transport_protocol {
        scope_459.string(var_460.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("VpnPort");
    if let Some(var_462) = &input.vpn_port {
        scope_461.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Description");
    if let Some(var_464) = &input.description {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("SplitTunnel");
    if let Some(var_466) = &input.split_tunnel {
        scope_465.boolean(*var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("DryRun");
    if let Some(var_468) = &input.dry_run {
        scope_467.boolean(*var_468);
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("ClientToken");
    if let Some(var_470) = &input.client_token {
        scope_469.string(var_470);
    }
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("TagSpecification");
    if let Some(var_472) = &input.tag_specifications {
        let mut list_474 = scope_471.start_list(true, Some("item"));
        for item_473 in var_472 {
            #[allow(unused_mut)]
            let mut entry_475 = list_474.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_475, item_473);
        }
        list_474.finish();
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("SecurityGroupId");
    if let Some(var_477) = &input.security_group_ids {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]
            let mut entry_480 = list_479.entry();
            entry_480.string(item_478);
        }
        list_479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("VpcId");
    if let Some(var_482) = &input.vpc_id {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("SelfServicePortal");
    if let Some(var_484) = &input.self_service_portal {
        scope_483.string(var_484.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("ClientConnectOptions");
    if let Some(var_486) = &input.client_connect_options {
        crate::query_ser::serialize_structure_client_connect_options(scope_485, var_486);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_488) = &input.client_vpn_endpoint_id {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("DestinationCidrBlock");
    if let Some(var_490) = &input.destination_cidr_block {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_492) = &input.target_vpc_subnet_id {
        scope_491.string(var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("Description");
    if let Some(var_494) = &input.description {
        scope_493.string(var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("ClientToken");
    if let Some(var_496) = &input.client_token {
        scope_495.string(var_496);
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("DryRun");
    if let Some(var_498) = &input.dry_run {
        scope_497.boolean(*var_498);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("BgpAsn");
    if let Some(var_500) = &input.bgp_asn {
        scope_499.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("IpAddress");
    if let Some(var_502) = &input.public_ip {
        scope_501.string(var_502);
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("CertificateArn");
    if let Some(var_504) = &input.certificate_arn {
        scope_503.string(var_504);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("Type");
    if let Some(var_506) = &input.r#type {
        scope_505.string(var_506.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecification");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_511, item_509);
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DeviceName");
    if let Some(var_513) = &input.device_name {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("DryRun");
    if let Some(var_515) = &input.dry_run {
        scope_514.boolean(*var_515);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("AvailabilityZone");
    if let Some(var_517) = &input.availability_zone {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("DryRun");
    if let Some(var_519) = &input.dry_run {
        scope_518.boolean(*var_519);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("DryRun");
    if let Some(var_521) = &input.dry_run {
        scope_520.boolean(*var_521);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("DhcpConfiguration");
    if let Some(var_523) = &input.dhcp_configurations {
        let mut list_525 = scope_522.start_list(true, Some("item"));
        for item_524 in var_523 {
            #[allow(unused_mut)]
            let mut entry_526 = list_525.entry();
            crate::query_ser::serialize_structure_new_dhcp_configuration(entry_526, item_524);
        }
        list_525.finish();
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("TagSpecification");
    if let Some(var_528) = &input.tag_specifications {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_531, item_529);
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("DryRun");
    if let Some(var_533) = &input.dry_run {
        scope_532.boolean(*var_533);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("ClientToken");
    if let Some(var_535) = &input.client_token {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("DryRun");
    if let Some(var_537) = &input.dry_run {
        scope_536.boolean(*var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("VpcId");
    if let Some(var_539) = &input.vpc_id {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("TagSpecification");
    if let Some(var_541) = &input.tag_specifications {
        let mut list_543 = scope_540.start_list(true, Some("item"));
        for item_542 in var_541 {
            #[allow(unused_mut)]
            let mut entry_544 = list_543.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_544, item_542);
        }
        list_543.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("DryRun");
    if let Some(var_546) = &input.dry_run {
        scope_545.boolean(*var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientToken");
    if let Some(var_548) = &input.client_token {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("SpotOptions");
    if let Some(var_550) = &input.spot_options {
        crate::query_ser::serialize_structure_spot_options_request(scope_549, var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("OnDemandOptions");
    if let Some(var_552) = &input.on_demand_options {
        crate::query_ser::serialize_structure_on_demand_options_request(scope_551, var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_554) = &input.excess_capacity_termination_policy {
        scope_553.string(var_554.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_556) = &input.launch_template_configs {
        let mut list_558 = scope_555.start_list(true, Some("item"));
        for item_557 in var_556 {
            #[allow(unused_mut)]
            let mut entry_559 = list_558.entry();
            crate::query_ser::serialize_structure_fleet_launch_template_config_request(
                entry_559, item_557,
            );
        }
        list_558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_561) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_target_capacity_specification_request(
            scope_560, var_561,
        );
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_563) = &input.terminate_instances_with_expiration {
        scope_562.boolean(*var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("Type");
    if let Some(var_565) = &input.r#type {
        scope_564.string(var_565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("ValidFrom");
    if let Some(var_567) = &input.valid_from {
        scope_566.instant(var_567, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("ValidUntil");
    if let Some(var_569) = &input.valid_until {
        scope_568.instant(var_569, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_571) = &input.replace_unhealthy_instances {
        scope_570.boolean(*var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("TagSpecification");
    if let Some(var_573) = &input.tag_specifications {
        let mut list_575 = scope_572.start_list(true, Some("item"));
        for item_574 in var_573 {
            #[allow(unused_mut)]
            let mut entry_576 = list_575.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_576, item_574);
        }
        list_575.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("DryRun");
    if let Some(var_578) = &input.dry_run {
        scope_577.boolean(*var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ClientToken");
    if let Some(var_580) = &input.client_token {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_582) = &input.deliver_logs_permission_arn {
        scope_581.string(var_582);
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("LogGroupName");
    if let Some(var_584) = &input.log_group_name {
        scope_583.string(var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("ResourceId");
    if let Some(var_586) = &input.resource_ids {
        let mut list_588 = scope_585.start_list(true, Some("item"));
        for item_587 in var_586 {
            #[allow(unused_mut)]
            let mut entry_589 = list_588.entry();
            entry_589.string(item_587);
        }
        list_588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("ResourceType");
    if let Some(var_591) = &input.resource_type {
        scope_590.string(var_591.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("TrafficType");
    if let Some(var_593) = &input.traffic_type {
        scope_592.string(var_593.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("LogDestinationType");
    if let Some(var_595) = &input.log_destination_type {
        scope_594.string(var_595.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("LogDestination");
    if let Some(var_597) = &input.log_destination {
        scope_596.string(var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("LogFormat");
    if let Some(var_599) = &input.log_format {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("TagSpecification");
    if let Some(var_601) = &input.tag_specifications {
        let mut list_603 = scope_600.start_list(true, Some("item"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_604, item_602);
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("MaxAggregationInterval");
    if let Some(var_606) = &input.max_aggregation_interval {
        scope_605.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_606).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("DryRun");
    if let Some(var_608) = &input.dry_run {
        scope_607.boolean(*var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("InputStorageLocation");
    if let Some(var_610) = &input.input_storage_location {
        crate::query_ser::serialize_structure_storage_location(scope_609, var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("LogsStorageLocation");
    if let Some(var_612) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_storage_location(scope_611, var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Description");
    if let Some(var_614) = &input.description {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("Name");
    if let Some(var_616) = &input.name {
        scope_615.string(var_616);
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("ClientToken");
    if let Some(var_618) = &input.client_token {
        scope_617.string(var_618);
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("TagSpecification");
    if let Some(var_620) = &input.tag_specifications {
        let mut list_622 = scope_619.start_list(true, Some("item"));
        for item_621 in var_620 {
            #[allow(unused_mut)]
            let mut entry_623 = list_622.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_623, item_621);
        }
        list_622.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("BlockDeviceMapping");
    if let Some(var_625) = &input.block_device_mappings {
        let mut list_627 = scope_624.start_list(true, Some("BlockDeviceMapping"));
        for item_626 in var_625 {
            #[allow(unused_mut)]
            let mut entry_628 = list_627.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_628, item_626);
        }
        list_627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Description");
    if let Some(var_630) = &input.description {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("DryRun");
    if let Some(var_632) = &input.dry_run {
        scope_631.boolean(*var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("InstanceId");
    if let Some(var_634) = &input.instance_id {
        scope_633.string(var_634);
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("Name");
    if let Some(var_636) = &input.name {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("NoReboot");
    if let Some(var_638) = &input.no_reboot {
        scope_637.boolean(*var_638);
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("TagSpecification");
    if let Some(var_640) = &input.tag_specifications {
        let mut list_642 = scope_639.start_list(true, Some("item"));
        for item_641 in var_640 {
            #[allow(unused_mut)]
            let mut entry_643 = list_642.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_643, item_641);
        }
        list_642.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("Description");
    if let Some(var_645) = &input.description {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("ExportToS3");
    if let Some(var_647) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_export_to_s3_task_specification(scope_646, var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("InstanceId");
    if let Some(var_649) = &input.instance_id {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("TargetEnvironment");
    if let Some(var_651) = &input.target_environment {
        scope_650.string(var_651.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("TagSpecification");
    if let Some(var_653) = &input.tag_specifications {
        let mut list_655 = scope_652.start_list(true, Some("item"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_656, item_654);
        }
        list_655.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("TagSpecification");
    if let Some(var_658) = &input.tag_specifications {
        let mut list_660 = scope_657.start_list(true, Some("item"));
        for item_659 in var_658 {
            #[allow(unused_mut)]
            let mut entry_661 = list_660.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_661, item_659);
        }
        list_660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("DryRun");
    if let Some(var_663) = &input.dry_run {
        scope_662.boolean(*var_663);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("KeyName");
    if let Some(var_665) = &input.key_name {
        scope_664.string(var_665);
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("DryRun");
    if let Some(var_667) = &input.dry_run {
        scope_666.boolean(*var_667);
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("TagSpecification");
    if let Some(var_669) = &input.tag_specifications {
        let mut list_671 = scope_668.start_list(true, Some("item"));
        for item_670 in var_669 {
            #[allow(unused_mut)]
            let mut entry_672 = list_671.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_672, item_670);
        }
        list_671.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("DryRun");
    if let Some(var_674) = &input.dry_run {
        scope_673.boolean(*var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("ClientToken");
    if let Some(var_676) = &input.client_token {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("LaunchTemplateName");
    if let Some(var_678) = &input.launch_template_name {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("VersionDescription");
    if let Some(var_680) = &input.version_description {
        scope_679.string(var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("LaunchTemplateData");
    if let Some(var_682) = &input.launch_template_data {
        crate::query_ser::serialize_structure_request_launch_template_data(scope_681, var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TagSpecification");
    if let Some(var_684) = &input.tag_specifications {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_687, item_685);
        }
        list_686.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("DryRun");
    if let Some(var_689) = &input.dry_run {
        scope_688.boolean(*var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("ClientToken");
    if let Some(var_691) = &input.client_token {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("LaunchTemplateId");
    if let Some(var_693) = &input.launch_template_id {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("LaunchTemplateName");
    if let Some(var_695) = &input.launch_template_name {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("SourceVersion");
    if let Some(var_697) = &input.source_version {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("VersionDescription");
    if let Some(var_699) = &input.version_description {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("LaunchTemplateData");
    if let Some(var_701) = &input.launch_template_data {
        crate::query_ser::serialize_structure_request_launch_template_data(scope_700, var_701);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("DestinationCidrBlock");
    if let Some(var_703) = &input.destination_cidr_block {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_705) = &input.local_gateway_route_table_id {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("DryRun");
    if let Some(var_707) = &input.dry_run {
        scope_706.boolean(*var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_709) = &input.local_gateway_virtual_interface_group_id {
        scope_708.string(var_709);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_711) = &input.local_gateway_route_table_id {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("VpcId");
    if let Some(var_713) = &input.vpc_id {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TagSpecification");
    if let Some(var_715) = &input.tag_specifications {
        let mut list_717 = scope_714.start_list(true, Some("item"));
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_718, item_716);
        }
        list_717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DryRun");
    if let Some(var_720) = &input.dry_run {
        scope_719.boolean(*var_720);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DryRun");
    if let Some(var_722) = &input.dry_run {
        scope_721.boolean(*var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("PrefixListName");
    if let Some(var_724) = &input.prefix_list_name {
        scope_723.string(var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("Entry");
    if let Some(var_726) = &input.entries {
        let mut list_728 = scope_725.start_list(true, None);
        for item_727 in var_726 {
            #[allow(unused_mut)]
            let mut entry_729 = list_728.entry();
            crate::query_ser::serialize_structure_add_prefix_list_entry(entry_729, item_727);
        }
        list_728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("MaxEntries");
    if let Some(var_731) = &input.max_entries {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("TagSpecification");
    if let Some(var_733) = &input.tag_specifications {
        let mut list_735 = scope_732.start_list(true, Some("item"));
        for item_734 in var_733 {
            #[allow(unused_mut)]
            let mut entry_736 = list_735.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_736, item_734);
        }
        list_735.finish();
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("AddressFamily");
    if let Some(var_738) = &input.address_family {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ClientToken");
    if let Some(var_740) = &input.client_token {
        scope_739.string(var_740);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("AllocationId");
    if let Some(var_742) = &input.allocation_id {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("ClientToken");
    if let Some(var_744) = &input.client_token {
        scope_743.string(var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("DryRun");
    if let Some(var_746) = &input.dry_run {
        scope_745.boolean(*var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("SubnetId");
    if let Some(var_748) = &input.subnet_id {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("TagSpecification");
    if let Some(var_750) = &input.tag_specifications {
        let mut list_752 = scope_749.start_list(true, Some("item"));
        for item_751 in var_750 {
            #[allow(unused_mut)]
            let mut entry_753 = list_752.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_753, item_751);
        }
        list_752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("ConnectivityType");
    if let Some(var_755) = &input.connectivity_type {
        scope_754.string(var_755.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DryRun");
    if let Some(var_757) = &input.dry_run {
        scope_756.boolean(*var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("VpcId");
    if let Some(var_759) = &input.vpc_id {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("TagSpecification");
    if let Some(var_761) = &input.tag_specifications {
        let mut list_763 = scope_760.start_list(true, Some("item"));
        for item_762 in var_761 {
            #[allow(unused_mut)]
            let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_764, item_762);
        }
        list_763.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("CidrBlock");
    if let Some(var_766) = &input.cidr_block {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("DryRun");
    if let Some(var_768) = &input.dry_run {
        scope_767.boolean(*var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("Egress");
    if let Some(var_770) = &input.egress {
        scope_769.boolean(*var_770);
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("Icmp");
    if let Some(var_772) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_icmp_type_code(scope_771, var_772);
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_774) = &input.ipv6_cidr_block {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("NetworkAclId");
    if let Some(var_776) = &input.network_acl_id {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("PortRange");
    if let Some(var_778) = &input.port_range {
        crate::query_ser::serialize_structure_port_range(scope_777, var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Protocol");
    if let Some(var_780) = &input.protocol {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("RuleAction");
    if let Some(var_782) = &input.rule_action {
        scope_781.string(var_782.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("RuleNumber");
    if let Some(var_784) = &input.rule_number {
        scope_783.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_784).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("SourceIp");
    if let Some(var_786) = &input.source_ip {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("DestinationIp");
    if let Some(var_788) = &input.destination_ip {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("Source");
    if let Some(var_790) = &input.source {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("Destination");
    if let Some(var_792) = &input.destination {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("Protocol");
    if let Some(var_794) = &input.protocol {
        scope_793.string(var_794.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("DestinationPort");
    if let Some(var_796) = &input.destination_port {
        scope_795.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_796).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("TagSpecification");
    if let Some(var_798) = &input.tag_specifications {
        let mut list_800 = scope_797.start_list(true, Some("item"));
        for item_799 in var_798 {
            #[allow(unused_mut)]
            let mut entry_801 = list_800.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_801, item_799);
        }
        list_800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("DryRun");
    if let Some(var_803) = &input.dry_run {
        scope_802.boolean(*var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("ClientToken");
    if let Some(var_805) = &input.client_token {
        scope_804.string(var_805);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("Description");
    if let Some(var_807) = &input.description {
        scope_806.string(var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DryRun");
    if let Some(var_809) = &input.dry_run {
        scope_808.boolean(*var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("SecurityGroupId");
    if let Some(var_811) = &input.groups {
        let mut list_813 = scope_810.start_list(true, Some("SecurityGroupId"));
        for item_812 in var_811 {
            #[allow(unused_mut)]
            let mut entry_814 = list_813.entry();
            entry_814.string(item_812);
        }
        list_813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("Ipv6AddressCount");
    if let Some(var_816) = &input.ipv6_address_count {
        scope_815.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_816).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("Ipv6Addresses");
    if let Some(var_818) = &input.ipv6_addresses {
        let mut list_820 = scope_817.start_list(true, Some("item"));
        for item_819 in var_818 {
            #[allow(unused_mut)]
            let mut entry_821 = list_820.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address(entry_821, item_819);
        }
        list_820.finish();
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("PrivateIpAddress");
    if let Some(var_823) = &input.private_ip_address {
        scope_822.string(var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("PrivateIpAddresses");
    if let Some(var_825) = &input.private_ip_addresses {
        let mut list_827 = scope_824.start_list(true, Some("item"));
        for item_826 in var_825 {
            #[allow(unused_mut)]
            let mut entry_828 = list_827.entry();
            crate::query_ser::serialize_structure_private_ip_address_specification(
                entry_828, item_826,
            );
        }
        list_827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_830) = &input.secondary_private_ip_address_count {
        scope_829.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_830).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("InterfaceType");
    if let Some(var_832) = &input.interface_type {
        scope_831.string(var_832.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("SubnetId");
    if let Some(var_834) = &input.subnet_id {
        scope_833.string(var_834);
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("TagSpecification");
    if let Some(var_836) = &input.tag_specifications {
        let mut list_838 = scope_835.start_list(true, Some("item"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_839, item_837);
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ClientToken");
    if let Some(var_841) = &input.client_token {
        scope_840.string(var_841);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("NetworkInterfaceId");
    if let Some(var_843) = &input.network_interface_id {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("AwsAccountId");
    if let Some(var_845) = &input.aws_account_id {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("AwsService");
    if let Some(var_847) = &input.aws_service {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Permission");
    if let Some(var_849) = &input.permission {
        scope_848.string(var_849.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("DryRun");
    if let Some(var_851) = &input.dry_run {
        scope_850.boolean(*var_851);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("DryRun");
    if let Some(var_853) = &input.dry_run {
        scope_852.boolean(*var_853);
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("GroupName");
    if let Some(var_855) = &input.group_name {
        scope_854.string(var_855);
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Strategy");
    if let Some(var_857) = &input.strategy {
        scope_856.string(var_857.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("PartitionCount");
    if let Some(var_859) = &input.partition_count {
        scope_858.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_859).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("TagSpecification");
    if let Some(var_861) = &input.tag_specifications {
        let mut list_863 = scope_860.start_list(true, Some("item"));
        for item_862 in var_861 {
            #[allow(unused_mut)]
            let mut entry_864 = list_863.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_864, item_862);
        }
        list_863.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("InstanceId");
    if let Some(var_866) = &input.instance_id {
        scope_865.string(var_866);
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("SnapshotId");
    if let Some(var_868) = &input.snapshot_id {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("ClientToken");
    if let Some(var_870) = &input.client_token {
        scope_869.string(var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("DryRun");
    if let Some(var_872) = &input.dry_run {
        scope_871.boolean(*var_872);
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("TagSpecification");
    if let Some(var_874) = &input.tag_specifications {
        let mut list_876 = scope_873.start_list(true, Some("item"));
        for item_875 in var_874 {
            #[allow(unused_mut)]
            let mut entry_877 = list_876.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_877, item_875);
        }
        list_876.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("ClientToken");
    if let Some(var_879) = &input.client_token {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("InstanceCount");
    if let Some(var_881) = &input.instance_count {
        scope_880.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_881).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("PriceSchedules");
    if let Some(var_883) = &input.price_schedules {
        let mut list_885 = scope_882.start_list(true, Some("item"));
        for item_884 in var_883 {
            #[allow(unused_mut)]
            let mut entry_886 = list_885.entry();
            crate::query_ser::serialize_structure_price_schedule_specification(entry_886, item_884);
        }
        list_885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("ReservedInstancesId");
    if let Some(var_888) = &input.reserved_instances_id {
        scope_887.string(var_888);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("Bucket");
    if let Some(var_890) = &input.bucket {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("ObjectKey");
    if let Some(var_892) = &input.object_key {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("Name");
    if let Some(var_894) = &input.name {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("TagSpecification");
    if let Some(var_896) = &input.tag_specifications {
        let mut list_898 = scope_895.start_list(true, Some("item"));
        for item_897 in var_896 {
            #[allow(unused_mut)]
            let mut entry_899 = list_898.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_899, item_897);
        }
        list_898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("DryRun");
    if let Some(var_901) = &input.dry_run {
        scope_900.boolean(*var_901);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("DestinationCidrBlock");
    if let Some(var_903) = &input.destination_cidr_block {
        scope_902.string(var_903);
    }
    #[allow(unused_mut)]
    let mut scope_904 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_905) = &input.destination_ipv6_cidr_block {
        scope_904.string(var_905);
    }
    #[allow(unused_mut)]
    let mut scope_906 = writer.prefix("DestinationPrefixListId");
    if let Some(var_907) = &input.destination_prefix_list_id {
        scope_906.string(var_907);
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("DryRun");
    if let Some(var_909) = &input.dry_run {
        scope_908.boolean(*var_909);
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("VpcEndpointId");
    if let Some(var_911) = &input.vpc_endpoint_id {
        scope_910.string(var_911);
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_913) = &input.egress_only_internet_gateway_id {
        scope_912.string(var_913);
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("GatewayId");
    if let Some(var_915) = &input.gateway_id {
        scope_914.string(var_915);
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("InstanceId");
    if let Some(var_917) = &input.instance_id {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("NatGatewayId");
    if let Some(var_919) = &input.nat_gateway_id {
        scope_918.string(var_919);
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("TransitGatewayId");
    if let Some(var_921) = &input.transit_gateway_id {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("LocalGatewayId");
    if let Some(var_923) = &input.local_gateway_id {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("CarrierGatewayId");
    if let Some(var_925) = &input.carrier_gateway_id {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("NetworkInterfaceId");
    if let Some(var_927) = &input.network_interface_id {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("RouteTableId");
    if let Some(var_929) = &input.route_table_id {
        scope_928.string(var_929);
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_931) = &input.vpc_peering_connection_id {
        scope_930.string(var_931);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("DryRun");
    if let Some(var_933) = &input.dry_run {
        scope_932.boolean(*var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("VpcId");
    if let Some(var_935) = &input.vpc_id {
        scope_934.string(var_935);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("TagSpecification");
    if let Some(var_937) = &input.tag_specifications {
        let mut list_939 = scope_936.start_list(true, Some("item"));
        for item_938 in var_937 {
            #[allow(unused_mut)]
            let mut entry_940 = list_939.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_940, item_938);
        }
        list_939.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("GroupDescription");
    if let Some(var_942) = &input.description {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("GroupName");
    if let Some(var_944) = &input.group_name {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("VpcId");
    if let Some(var_946) = &input.vpc_id {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("TagSpecification");
    if let Some(var_948) = &input.tag_specifications {
        let mut list_950 = scope_947.start_list(true, Some("item"));
        for item_949 in var_948 {
            #[allow(unused_mut)]
            let mut entry_951 = list_950.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_951, item_949);
        }
        list_950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("DryRun");
    if let Some(var_953) = &input.dry_run {
        scope_952.boolean(*var_953);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("Description");
    if let Some(var_955) = &input.description {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("OutpostArn");
    if let Some(var_957) = &input.outpost_arn {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("VolumeId");
    if let Some(var_959) = &input.volume_id {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("TagSpecification");
    if let Some(var_961) = &input.tag_specifications {
        let mut list_963 = scope_960.start_list(true, Some("item"));
        for item_962 in var_961 {
            #[allow(unused_mut)]
            let mut entry_964 = list_963.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_964, item_962);
        }
        list_963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("DryRun");
    if let Some(var_966) = &input.dry_run {
        scope_965.boolean(*var_966);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("Description");
    if let Some(var_968) = &input.description {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("InstanceSpecification");
    if let Some(var_970) = &input.instance_specification {
        crate::query_ser::serialize_structure_instance_specification(scope_969, var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("OutpostArn");
    if let Some(var_972) = &input.outpost_arn {
        scope_971.string(var_972);
    }
    #[allow(unused_mut)]
    let mut scope_973 = writer.prefix("TagSpecification");
    if let Some(var_974) = &input.tag_specifications {
        let mut list_976 = scope_973.start_list(true, Some("item"));
        for item_975 in var_974 {
            #[allow(unused_mut)]
            let mut entry_977 = list_976.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_977, item_975);
        }
        list_976.finish();
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("DryRun");
    if let Some(var_979) = &input.dry_run {
        scope_978.boolean(*var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("CopyTagsFromSource");
    if let Some(var_981) = &input.copy_tags_from_source {
        scope_980.string(var_981.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("Bucket");
    if let Some(var_983) = &input.bucket {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("DryRun");
    if let Some(var_985) = &input.dry_run {
        scope_984.boolean(*var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("Prefix");
    if let Some(var_987) = &input.prefix {
        scope_986.string(var_987);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("ImageId");
    if let Some(var_989) = &input.image_id {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("Bucket");
    if let Some(var_991) = &input.bucket {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("S3ObjectTag");
    if let Some(var_993) = &input.s3_object_tags {
        let mut list_995 = scope_992.start_list(true, Some("item"));
        for item_994 in var_993 {
            #[allow(unused_mut)]
            let mut entry_996 = list_995.entry();
            crate::query_ser::serialize_structure_s3_object_tag(entry_996, item_994);
        }
        list_995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("DryRun");
    if let Some(var_998) = &input.dry_run {
        scope_997.boolean(*var_998);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("TagSpecification");
    if let Some(var_1000) = &input.tag_specifications {
        let mut list_1002 = scope_999.start_list(true, Some("item"));
        for item_1001 in var_1000 {
            #[allow(unused_mut)]
            let mut entry_1003 = list_1002.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1003, item_1001);
        }
        list_1002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("AvailabilityZone");
    if let Some(var_1005) = &input.availability_zone {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1007) = &input.availability_zone_id {
        scope_1006.string(var_1007);
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("CidrBlock");
    if let Some(var_1009) = &input.cidr_block {
        scope_1008.string(var_1009);
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1011) = &input.ipv6_cidr_block {
        scope_1010.string(var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("OutpostArn");
    if let Some(var_1013) = &input.outpost_arn {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("VpcId");
    if let Some(var_1015) = &input.vpc_id {
        scope_1014.string(var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("DryRun");
    if let Some(var_1017) = &input.dry_run {
        scope_1016.boolean(*var_1017);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("DryRun");
    if let Some(var_1019) = &input.dry_run {
        scope_1018.boolean(*var_1019);
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("ResourceId");
    if let Some(var_1021) = &input.resources {
        let mut list_1023 = scope_1020.start_list(true, None);
        for item_1022 in var_1021 {
            #[allow(unused_mut)]
            let mut entry_1024 = list_1023.entry();
            entry_1024.string(item_1022);
        }
        list_1023.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("Tag");
    if let Some(var_1026) = &input.tags {
        let mut list_1028 = scope_1025.start_list(true, Some("item"));
        for item_1027 in var_1026 {
            #[allow(unused_mut)]
            let mut entry_1029 = list_1028.entry();
            crate::query_ser::serialize_structure_tag(entry_1029, item_1027);
        }
        list_1028.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("Description");
    if let Some(var_1031) = &input.description {
        scope_1030.string(var_1031);
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("TagSpecification");
    if let Some(var_1033) = &input.tag_specifications {
        let mut list_1035 = scope_1032.start_list(true, Some("item"));
        for item_1034 in var_1033 {
            #[allow(unused_mut)]
            let mut entry_1036 = list_1035.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1036, item_1034);
        }
        list_1035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("DryRun");
    if let Some(var_1038) = &input.dry_run {
        scope_1037.boolean(*var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("ClientToken");
    if let Some(var_1040) = &input.client_token {
        scope_1039.string(var_1040);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1042) = &input.traffic_mirror_filter_id {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("TrafficDirection");
    if let Some(var_1044) = &input.traffic_direction {
        scope_1043.string(var_1044.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("RuleNumber");
    if let Some(var_1046) = &input.rule_number {
        scope_1045.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1046).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("RuleAction");
    if let Some(var_1048) = &input.rule_action {
        scope_1047.string(var_1048.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("DestinationPortRange");
    if let Some(var_1050) = &input.destination_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_1049, var_1050,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("SourcePortRange");
    if let Some(var_1052) = &input.source_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_1051, var_1052,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Protocol");
    if let Some(var_1054) = &input.protocol {
        scope_1053.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1054).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1056) = &input.destination_cidr_block {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("SourceCidrBlock");
    if let Some(var_1058) = &input.source_cidr_block {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("Description");
    if let Some(var_1060) = &input.description {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("DryRun");
    if let Some(var_1062) = &input.dry_run {
        scope_1061.boolean(*var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("ClientToken");
    if let Some(var_1064) = &input.client_token {
        scope_1063.string(var_1064);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1066) = &input.network_interface_id {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1068) = &input.traffic_mirror_target_id {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1070) = &input.traffic_mirror_filter_id {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("PacketLength");
    if let Some(var_1072) = &input.packet_length {
        scope_1071.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1072).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("SessionNumber");
    if let Some(var_1074) = &input.session_number {
        scope_1073.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1074).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("VirtualNetworkId");
    if let Some(var_1076) = &input.virtual_network_id {
        scope_1075.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1076).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("Description");
    if let Some(var_1078) = &input.description {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("TagSpecification");
    if let Some(var_1080) = &input.tag_specifications {
        let mut list_1082 = scope_1079.start_list(true, Some("item"));
        for item_1081 in var_1080 {
            #[allow(unused_mut)]
            let mut entry_1083 = list_1082.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1083, item_1081);
        }
        list_1082.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("DryRun");
    if let Some(var_1085) = &input.dry_run {
        scope_1084.boolean(*var_1085);
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("ClientToken");
    if let Some(var_1087) = &input.client_token {
        scope_1086.string(var_1087);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1089) = &input.network_interface_id {
        scope_1088.string(var_1089);
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1091) = &input.network_load_balancer_arn {
        scope_1090.string(var_1091);
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("Description");
    if let Some(var_1093) = &input.description {
        scope_1092.string(var_1093);
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("TagSpecification");
    if let Some(var_1095) = &input.tag_specifications {
        let mut list_1097 = scope_1094.start_list(true, Some("item"));
        for item_1096 in var_1095 {
            #[allow(unused_mut)]
            let mut entry_1098 = list_1097.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1098, item_1096);
        }
        list_1097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("DryRun");
    if let Some(var_1100) = &input.dry_run {
        scope_1099.boolean(*var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("ClientToken");
    if let Some(var_1102) = &input.client_token {
        scope_1101.string(var_1102);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("Description");
    if let Some(var_1104) = &input.description {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("Options");
    if let Some(var_1106) = &input.options {
        crate::query_ser::serialize_structure_transit_gateway_request_options(scope_1105, var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("TagSpecification");
    if let Some(var_1108) = &input.tag_specifications {
        let mut list_1110 = scope_1107.start_list(true, Some("item"));
        for item_1109 in var_1108 {
            #[allow(unused_mut)]
            let mut entry_1111 = list_1110.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1111, item_1109);
        }
        list_1110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("DryRun");
    if let Some(var_1113) = &input.dry_run {
        scope_1112.boolean(*var_1113);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1115) = &input.transport_transit_gateway_attachment_id {
        scope_1114.string(var_1115);
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("Options");
    if let Some(var_1117) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_connect_request_options(
            scope_1116, var_1117,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("TagSpecification");
    if let Some(var_1119) = &input.tag_specifications {
        let mut list_1121 = scope_1118.start_list(true, Some("item"));
        for item_1120 in var_1119 {
            #[allow(unused_mut)]
            let mut entry_1122 = list_1121.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1122, item_1120);
        }
        list_1121.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("DryRun");
    if let Some(var_1124) = &input.dry_run {
        scope_1123.boolean(*var_1124);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1126) = &input.transit_gateway_attachment_id {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1128) = &input.transit_gateway_address {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("PeerAddress");
    if let Some(var_1130) = &input.peer_address {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("BgpOptions");
    if let Some(var_1132) = &input.bgp_options {
        crate::query_ser::serialize_structure_transit_gateway_connect_request_bgp_options(
            scope_1131, var_1132,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1134) = &input.inside_cidr_blocks {
        let mut list_1136 = scope_1133.start_list(true, Some("item"));
        for item_1135 in var_1134 {
            #[allow(unused_mut)]
            let mut entry_1137 = list_1136.entry();
            entry_1137.string(item_1135);
        }
        list_1136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("TagSpecification");
    if let Some(var_1139) = &input.tag_specifications {
        let mut list_1141 = scope_1138.start_list(true, Some("item"));
        for item_1140 in var_1139 {
            #[allow(unused_mut)]
            let mut entry_1142 = list_1141.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1142, item_1140);
        }
        list_1141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DryRun");
    if let Some(var_1144) = &input.dry_run {
        scope_1143.boolean(*var_1144);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("TransitGatewayId");
    if let Some(var_1146) = &input.transit_gateway_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Options");
    if let Some(var_1148) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_multicast_domain_request_options(scope_1147, var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("TagSpecification");
    if let Some(var_1150) = &input.tag_specifications {
        let mut list_1152 = scope_1149.start_list(true, Some("item"));
        for item_1151 in var_1150 {
            #[allow(unused_mut)]
            let mut entry_1153 = list_1152.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1153, item_1151);
        }
        list_1152.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("DryRun");
    if let Some(var_1155) = &input.dry_run {
        scope_1154.boolean(*var_1155);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("TransitGatewayId");
    if let Some(var_1157) = &input.transit_gateway_id {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1159) = &input.peer_transit_gateway_id {
        scope_1158.string(var_1159);
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("PeerAccountId");
    if let Some(var_1161) = &input.peer_account_id {
        scope_1160.string(var_1161);
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("PeerRegion");
    if let Some(var_1163) = &input.peer_region {
        scope_1162.string(var_1163);
    }
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("TagSpecification");
    if let Some(var_1165) = &input.tag_specifications {
        let mut list_1167 = scope_1164.start_list(true, Some("item"));
        for item_1166 in var_1165 {
            #[allow(unused_mut)]
            let mut entry_1168 = list_1167.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1168, item_1166);
        }
        list_1167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("DryRun");
    if let Some(var_1170) = &input.dry_run {
        scope_1169.boolean(*var_1170);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1172) = &input.transit_gateway_route_table_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("PrefixListId");
    if let Some(var_1174) = &input.prefix_list_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1176) = &input.transit_gateway_attachment_id {
        scope_1175.string(var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("Blackhole");
    if let Some(var_1178) = &input.blackhole {
        scope_1177.boolean(*var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("DryRun");
    if let Some(var_1180) = &input.dry_run {
        scope_1179.boolean(*var_1180);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1182) = &input.destination_cidr_block {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1184) = &input.transit_gateway_route_table_id {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1186) = &input.transit_gateway_attachment_id {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("Blackhole");
    if let Some(var_1188) = &input.blackhole {
        scope_1187.boolean(*var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("DryRun");
    if let Some(var_1190) = &input.dry_run {
        scope_1189.boolean(*var_1190);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("TransitGatewayId");
    if let Some(var_1192) = &input.transit_gateway_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("TagSpecifications");
    if let Some(var_1194) = &input.tag_specifications {
        let mut list_1196 = scope_1193.start_list(true, Some("item"));
        for item_1195 in var_1194 {
            #[allow(unused_mut)]
            let mut entry_1197 = list_1196.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1197, item_1195);
        }
        list_1196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("DryRun");
    if let Some(var_1199) = &input.dry_run {
        scope_1198.boolean(*var_1199);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("TransitGatewayId");
    if let Some(var_1201) = &input.transit_gateway_id {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("VpcId");
    if let Some(var_1203) = &input.vpc_id {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("SubnetIds");
    if let Some(var_1205) = &input.subnet_ids {
        let mut list_1207 = scope_1204.start_list(true, Some("item"));
        for item_1206 in var_1205 {
            #[allow(unused_mut)]
            let mut entry_1208 = list_1207.entry();
            entry_1208.string(item_1206);
        }
        list_1207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("Options");
    if let Some(var_1210) = &input.options {
        crate::query_ser::serialize_structure_create_transit_gateway_vpc_attachment_request_options(
            scope_1209, var_1210,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("TagSpecifications");
    if let Some(var_1212) = &input.tag_specifications {
        let mut list_1214 = scope_1211.start_list(true, Some("item"));
        for item_1213 in var_1212 {
            #[allow(unused_mut)]
            let mut entry_1215 = list_1214.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1215, item_1213);
        }
        list_1214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("DryRun");
    if let Some(var_1217) = &input.dry_run {
        scope_1216.boolean(*var_1217);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("AvailabilityZone");
    if let Some(var_1219) = &input.availability_zone {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("Encrypted");
    if let Some(var_1221) = &input.encrypted {
        scope_1220.boolean(*var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("Iops");
    if let Some(var_1223) = &input.iops {
        scope_1222.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1223).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("KmsKeyId");
    if let Some(var_1225) = &input.kms_key_id {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("OutpostArn");
    if let Some(var_1227) = &input.outpost_arn {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("Size");
    if let Some(var_1229) = &input.size {
        scope_1228.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("SnapshotId");
    if let Some(var_1231) = &input.snapshot_id {
        scope_1230.string(var_1231);
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("VolumeType");
    if let Some(var_1233) = &input.volume_type {
        scope_1232.string(var_1233.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("DryRun");
    if let Some(var_1235) = &input.dry_run {
        scope_1234.boolean(*var_1235);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("TagSpecification");
    if let Some(var_1237) = &input.tag_specifications {
        let mut list_1239 = scope_1236.start_list(true, Some("item"));
        for item_1238 in var_1237 {
            #[allow(unused_mut)]
            let mut entry_1240 = list_1239.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1240, item_1238);
        }
        list_1239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1242) = &input.multi_attach_enabled {
        scope_1241.boolean(*var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("Throughput");
    if let Some(var_1244) = &input.throughput {
        scope_1243.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1244).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CidrBlock");
    if let Some(var_1246) = &input.cidr_block {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1248) = &input.amazon_provided_ipv6_cidr_block {
        scope_1247.boolean(*var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("Ipv6Pool");
    if let Some(var_1250) = &input.ipv6_pool {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1252) = &input.ipv6_cidr_block {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("DryRun");
    if let Some(var_1254) = &input.dry_run {
        scope_1253.boolean(*var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("InstanceTenancy");
    if let Some(var_1256) = &input.instance_tenancy {
        scope_1255.string(var_1256.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1258) = &input.ipv6_cidr_block_network_border_group {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("TagSpecification");
    if let Some(var_1260) = &input.tag_specifications {
        let mut list_1262 = scope_1259.start_list(true, Some("item"));
        for item_1261 in var_1260 {
            #[allow(unused_mut)]
            let mut entry_1263 = list_1262.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1263, item_1261);
        }
        list_1262.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("DryRun");
    if let Some(var_1265) = &input.dry_run {
        scope_1264.boolean(*var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("VpcEndpointType");
    if let Some(var_1267) = &input.vpc_endpoint_type {
        scope_1266.string(var_1267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("VpcId");
    if let Some(var_1269) = &input.vpc_id {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("ServiceName");
    if let Some(var_1271) = &input.service_name {
        scope_1270.string(var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("PolicyDocument");
    if let Some(var_1273) = &input.policy_document {
        scope_1272.string(var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("RouteTableId");
    if let Some(var_1275) = &input.route_table_ids {
        let mut list_1277 = scope_1274.start_list(true, Some("item"));
        for item_1276 in var_1275 {
            #[allow(unused_mut)]
            let mut entry_1278 = list_1277.entry();
            entry_1278.string(item_1276);
        }
        list_1277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("SubnetId");
    if let Some(var_1280) = &input.subnet_ids {
        let mut list_1282 = scope_1279.start_list(true, Some("item"));
        for item_1281 in var_1280 {
            #[allow(unused_mut)]
            let mut entry_1283 = list_1282.entry();
            entry_1283.string(item_1281);
        }
        list_1282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("SecurityGroupId");
    if let Some(var_1285) = &input.security_group_ids {
        let mut list_1287 = scope_1284.start_list(true, Some("item"));
        for item_1286 in var_1285 {
            #[allow(unused_mut)]
            let mut entry_1288 = list_1287.entry();
            entry_1288.string(item_1286);
        }
        list_1287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("ClientToken");
    if let Some(var_1290) = &input.client_token {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1292) = &input.private_dns_enabled {
        scope_1291.boolean(*var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("TagSpecification");
    if let Some(var_1294) = &input.tag_specifications {
        let mut list_1296 = scope_1293.start_list(true, Some("item"));
        for item_1295 in var_1294 {
            #[allow(unused_mut)]
            let mut entry_1297 = list_1296.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1297, item_1295);
        }
        list_1296.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("DryRun");
    if let Some(var_1299) = &input.dry_run {
        scope_1298.boolean(*var_1299);
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("ServiceId");
    if let Some(var_1301) = &input.service_id {
        scope_1300.string(var_1301);
    }
    #[allow(unused_mut)]
    let mut scope_1302 = writer.prefix("VpcEndpointId");
    if let Some(var_1303) = &input.vpc_endpoint_id {
        scope_1302.string(var_1303);
    }
    #[allow(unused_mut)]
    let mut scope_1304 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1305) = &input.connection_notification_arn {
        scope_1304.string(var_1305);
    }
    #[allow(unused_mut)]
    let mut scope_1306 = writer.prefix("ConnectionEvents");
    if let Some(var_1307) = &input.connection_events {
        let mut list_1309 = scope_1306.start_list(true, Some("item"));
        for item_1308 in var_1307 {
            #[allow(unused_mut)]
            let mut entry_1310 = list_1309.entry();
            entry_1310.string(item_1308);
        }
        list_1309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("ClientToken");
    if let Some(var_1312) = &input.client_token {
        scope_1311.string(var_1312);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("DryRun");
    if let Some(var_1314) = &input.dry_run {
        scope_1313.boolean(*var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("AcceptanceRequired");
    if let Some(var_1316) = &input.acceptance_required {
        scope_1315.boolean(*var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("PrivateDnsName");
    if let Some(var_1318) = &input.private_dns_name {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1320) = &input.network_load_balancer_arns {
        let mut list_1322 = scope_1319.start_list(true, Some("item"));
        for item_1321 in var_1320 {
            #[allow(unused_mut)]
            let mut entry_1323 = list_1322.entry();
            entry_1323.string(item_1321);
        }
        list_1322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1325) = &input.gateway_load_balancer_arns {
        let mut list_1327 = scope_1324.start_list(true, Some("item"));
        for item_1326 in var_1325 {
            #[allow(unused_mut)]
            let mut entry_1328 = list_1327.entry();
            entry_1328.string(item_1326);
        }
        list_1327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("ClientToken");
    if let Some(var_1330) = &input.client_token {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("TagSpecification");
    if let Some(var_1332) = &input.tag_specifications {
        let mut list_1334 = scope_1331.start_list(true, Some("item"));
        for item_1333 in var_1332 {
            #[allow(unused_mut)]
            let mut entry_1335 = list_1334.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1335, item_1333);
        }
        list_1334.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("DryRun");
    if let Some(var_1337) = &input.dry_run {
        scope_1336.boolean(*var_1337);
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("PeerOwnerId");
    if let Some(var_1339) = &input.peer_owner_id {
        scope_1338.string(var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("PeerVpcId");
    if let Some(var_1341) = &input.peer_vpc_id {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("VpcId");
    if let Some(var_1343) = &input.vpc_id {
        scope_1342.string(var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("PeerRegion");
    if let Some(var_1345) = &input.peer_region {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("TagSpecification");
    if let Some(var_1347) = &input.tag_specifications {
        let mut list_1349 = scope_1346.start_list(true, Some("item"));
        for item_1348 in var_1347 {
            #[allow(unused_mut)]
            let mut entry_1350 = list_1349.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1350, item_1348);
        }
        list_1349.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("CustomerGatewayId");
    if let Some(var_1352) = &input.customer_gateway_id {
        scope_1351.string(var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("Type");
    if let Some(var_1354) = &input.r#type {
        scope_1353.string(var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("VpnGatewayId");
    if let Some(var_1356) = &input.vpn_gateway_id {
        scope_1355.string(var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("TransitGatewayId");
    if let Some(var_1358) = &input.transit_gateway_id {
        scope_1357.string(var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("DryRun");
    if let Some(var_1360) = &input.dry_run {
        scope_1359.boolean(*var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("Options");
    if let Some(var_1362) = &input.options {
        crate::query_ser::serialize_structure_vpn_connection_options_specification(
            scope_1361, var_1362,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("TagSpecification");
    if let Some(var_1364) = &input.tag_specifications {
        let mut list_1366 = scope_1363.start_list(true, Some("item"));
        for item_1365 in var_1364 {
            #[allow(unused_mut)]
            let mut entry_1367 = list_1366.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1367, item_1365);
        }
        list_1366.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1369) = &input.destination_cidr_block {
        scope_1368.string(var_1369);
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("VpnConnectionId");
    if let Some(var_1371) = &input.vpn_connection_id {
        scope_1370.string(var_1371);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("AvailabilityZone");
    if let Some(var_1373) = &input.availability_zone {
        scope_1372.string(var_1373);
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Type");
    if let Some(var_1375) = &input.r#type {
        scope_1374.string(var_1375.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("TagSpecification");
    if let Some(var_1377) = &input.tag_specifications {
        let mut list_1379 = scope_1376.start_list(true, Some("item"));
        for item_1378 in var_1377 {
            #[allow(unused_mut)]
            let mut entry_1380 = list_1379.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_1380, item_1378);
        }
        list_1379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("AmazonSideAsn");
    if let Some(var_1382) = &input.amazon_side_asn {
        scope_1381.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1382).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("DryRun");
    if let Some(var_1384) = &input.dry_run {
        scope_1383.boolean(*var_1384);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("CarrierGatewayId");
    if let Some(var_1386) = &input.carrier_gateway_id {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("DryRun");
    if let Some(var_1388) = &input.dry_run {
        scope_1387.boolean(*var_1388);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1390) = &input.client_vpn_endpoint_id {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("DryRun");
    if let Some(var_1392) = &input.dry_run {
        scope_1391.boolean(*var_1392);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1394) = &input.client_vpn_endpoint_id {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1396) = &input.target_vpc_subnet_id {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1398) = &input.destination_cidr_block {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("DryRun");
    if let Some(var_1400) = &input.dry_run {
        scope_1399.boolean(*var_1400);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("CustomerGatewayId");
    if let Some(var_1402) = &input.customer_gateway_id {
        scope_1401.string(var_1402);
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("DryRun");
    if let Some(var_1404) = &input.dry_run {
        scope_1403.boolean(*var_1404);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("DhcpOptionsId");
    if let Some(var_1406) = &input.dhcp_options_id {
        scope_1405.string(var_1406);
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("DryRun");
    if let Some(var_1408) = &input.dry_run {
        scope_1407.boolean(*var_1408);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("DryRun");
    if let Some(var_1410) = &input.dry_run {
        scope_1409.boolean(*var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1412) = &input.egress_only_internet_gateway_id {
        scope_1411.string(var_1412);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("DryRun");
    if let Some(var_1414) = &input.dry_run {
        scope_1413.boolean(*var_1414);
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("FleetId");
    if let Some(var_1416) = &input.fleet_ids {
        let mut list_1418 = scope_1415.start_list(true, None);
        for item_1417 in var_1416 {
            #[allow(unused_mut)]
            let mut entry_1419 = list_1418.entry();
            entry_1419.string(item_1417);
        }
        list_1418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("TerminateInstances");
    if let Some(var_1421) = &input.terminate_instances {
        scope_1420.boolean(*var_1421);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("DryRun");
    if let Some(var_1423) = &input.dry_run {
        scope_1422.boolean(*var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("FlowLogId");
    if let Some(var_1425) = &input.flow_log_ids {
        let mut list_1427 = scope_1424.start_list(true, Some("item"));
        for item_1426 in var_1425 {
            #[allow(unused_mut)]
            let mut entry_1428 = list_1427.entry();
            entry_1428.string(item_1426);
        }
        list_1427.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("DryRun");
    if let Some(var_1430) = &input.dry_run {
        scope_1429.boolean(*var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("FpgaImageId");
    if let Some(var_1432) = &input.fpga_image_id {
        scope_1431.string(var_1432);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("DryRun");
    if let Some(var_1434) = &input.dry_run {
        scope_1433.boolean(*var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("InternetGatewayId");
    if let Some(var_1436) = &input.internet_gateway_id {
        scope_1435.string(var_1436);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("KeyName");
    if let Some(var_1438) = &input.key_name {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("KeyPairId");
    if let Some(var_1440) = &input.key_pair_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DryRun");
    if let Some(var_1442) = &input.dry_run {
        scope_1441.boolean(*var_1442);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("DryRun");
    if let Some(var_1444) = &input.dry_run {
        scope_1443.boolean(*var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("LaunchTemplateId");
    if let Some(var_1446) = &input.launch_template_id {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("LaunchTemplateName");
    if let Some(var_1448) = &input.launch_template_name {
        scope_1447.string(var_1448);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("DryRun");
    if let Some(var_1450) = &input.dry_run {
        scope_1449.boolean(*var_1450);
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("LaunchTemplateId");
    if let Some(var_1452) = &input.launch_template_id {
        scope_1451.string(var_1452);
    }
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("LaunchTemplateName");
    if let Some(var_1454) = &input.launch_template_name {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1456) = &input.versions {
        let mut list_1458 = scope_1455.start_list(true, Some("item"));
        for item_1457 in var_1456 {
            #[allow(unused_mut)]
            let mut entry_1459 = list_1458.entry();
            entry_1459.string(item_1457);
        }
        list_1458.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1461) = &input.destination_cidr_block {
        scope_1460.string(var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1463) = &input.local_gateway_route_table_id {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("DryRun");
    if let Some(var_1465) = &input.dry_run {
        scope_1464.boolean(*var_1465);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1467) = &input.local_gateway_route_table_vpc_association_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("DryRun");
    if let Some(var_1469) = &input.dry_run {
        scope_1468.boolean(*var_1469);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("DryRun");
    if let Some(var_1471) = &input.dry_run {
        scope_1470.boolean(*var_1471);
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("PrefixListId");
    if let Some(var_1473) = &input.prefix_list_id {
        scope_1472.string(var_1473);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("DryRun");
    if let Some(var_1475) = &input.dry_run {
        scope_1474.boolean(*var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("NatGatewayId");
    if let Some(var_1477) = &input.nat_gateway_id {
        scope_1476.string(var_1477);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("DryRun");
    if let Some(var_1479) = &input.dry_run {
        scope_1478.boolean(*var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("NetworkAclId");
    if let Some(var_1481) = &input.network_acl_id {
        scope_1480.string(var_1481);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("DryRun");
    if let Some(var_1483) = &input.dry_run {
        scope_1482.boolean(*var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("Egress");
    if let Some(var_1485) = &input.egress {
        scope_1484.boolean(*var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("NetworkAclId");
    if let Some(var_1487) = &input.network_acl_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("RuleNumber");
    if let Some(var_1489) = &input.rule_number {
        scope_1488.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1489).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("DryRun");
    if let Some(var_1491) = &input.dry_run {
        scope_1490.boolean(*var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1493) = &input.network_insights_analysis_id {
        scope_1492.string(var_1493);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DryRun");
    if let Some(var_1495) = &input.dry_run {
        scope_1494.boolean(*var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1497) = &input.network_insights_path_id {
        scope_1496.string(var_1497);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("DryRun");
    if let Some(var_1499) = &input.dry_run {
        scope_1498.boolean(*var_1499);
    }
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1501) = &input.network_interface_id {
        scope_1500.string(var_1501);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1503) = &input.network_interface_permission_id {
        scope_1502.string(var_1503);
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("Force");
    if let Some(var_1505) = &input.force {
        scope_1504.boolean(*var_1505);
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("DryRun");
    if let Some(var_1507) = &input.dry_run {
        scope_1506.boolean(*var_1507);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("DryRun");
    if let Some(var_1509) = &input.dry_run {
        scope_1508.boolean(*var_1509);
    }
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("GroupName");
    if let Some(var_1511) = &input.group_name {
        scope_1510.string(var_1511);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("DryRun");
    if let Some(var_1513) = &input.dry_run {
        scope_1512.boolean(*var_1513);
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("ReservedInstancesId");
    if let Some(var_1515) = &input.reserved_instances_ids {
        let mut list_1517 = scope_1514.start_list(true, Some("item"));
        for item_1516 in var_1515 {
            #[allow(unused_mut)]
            let mut entry_1518 = list_1517.entry();
            entry_1518.string(item_1516);
        }
        list_1517.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1520) = &input.destination_cidr_block {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1522) = &input.destination_ipv6_cidr_block {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1524) = &input.destination_prefix_list_id {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("DryRun");
    if let Some(var_1526) = &input.dry_run {
        scope_1525.boolean(*var_1526);
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("RouteTableId");
    if let Some(var_1528) = &input.route_table_id {
        scope_1527.string(var_1528);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("DryRun");
    if let Some(var_1530) = &input.dry_run {
        scope_1529.boolean(*var_1530);
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("RouteTableId");
    if let Some(var_1532) = &input.route_table_id {
        scope_1531.string(var_1532);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("GroupId");
    if let Some(var_1534) = &input.group_id {
        scope_1533.string(var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("GroupName");
    if let Some(var_1536) = &input.group_name {
        scope_1535.string(var_1536);
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("DryRun");
    if let Some(var_1538) = &input.dry_run {
        scope_1537.boolean(*var_1538);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("SnapshotId");
    if let Some(var_1540) = &input.snapshot_id {
        scope_1539.string(var_1540);
    }
    #[allow(unused_mut)]
    let mut scope_1541 = writer.prefix("DryRun");
    if let Some(var_1542) = &input.dry_run {
        scope_1541.boolean(*var_1542);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1543 = writer.prefix("DryRun");
    if let Some(var_1544) = &input.dry_run {
        scope_1543.boolean(*var_1544);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1545 = writer.prefix("SubnetId");
    if let Some(var_1546) = &input.subnet_id {
        scope_1545.string(var_1546);
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("DryRun");
    if let Some(var_1548) = &input.dry_run {
        scope_1547.boolean(*var_1548);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1549 = writer.prefix("DryRun");
    if let Some(var_1550) = &input.dry_run {
        scope_1549.boolean(*var_1550);
    }
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("ResourceId");
    if let Some(var_1552) = &input.resources {
        let mut list_1554 = scope_1551.start_list(true, None);
        for item_1553 in var_1552 {
            #[allow(unused_mut)]
            let mut entry_1555 = list_1554.entry();
            entry_1555.string(item_1553);
        }
        list_1554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("Tag");
    if let Some(var_1557) = &input.tags {
        let mut list_1559 = scope_1556.start_list(true, Some("item"));
        for item_1558 in var_1557 {
            #[allow(unused_mut)]
            let mut entry_1560 = list_1559.entry();
            crate::query_ser::serialize_structure_tag(entry_1560, item_1558);
        }
        list_1559.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1562) = &input.traffic_mirror_filter_id {
        scope_1561.string(var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("DryRun");
    if let Some(var_1564) = &input.dry_run {
        scope_1563.boolean(*var_1564);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1566) = &input.traffic_mirror_filter_rule_id {
        scope_1565.string(var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DryRun");
    if let Some(var_1568) = &input.dry_run {
        scope_1567.boolean(*var_1568);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1570) = &input.traffic_mirror_session_id {
        scope_1569.string(var_1570);
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("DryRun");
    if let Some(var_1572) = &input.dry_run {
        scope_1571.boolean(*var_1572);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1574) = &input.traffic_mirror_target_id {
        scope_1573.string(var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("DryRun");
    if let Some(var_1576) = &input.dry_run {
        scope_1575.boolean(*var_1576);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("TransitGatewayId");
    if let Some(var_1578) = &input.transit_gateway_id {
        scope_1577.string(var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("DryRun");
    if let Some(var_1580) = &input.dry_run {
        scope_1579.boolean(*var_1580);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1582) = &input.transit_gateway_attachment_id {
        scope_1581.string(var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("DryRun");
    if let Some(var_1584) = &input.dry_run {
        scope_1583.boolean(*var_1584);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1586) = &input.transit_gateway_connect_peer_id {
        scope_1585.string(var_1586);
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("DryRun");
    if let Some(var_1588) = &input.dry_run {
        scope_1587.boolean(*var_1588);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1590) = &input.transit_gateway_multicast_domain_id {
        scope_1589.string(var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("DryRun");
    if let Some(var_1592) = &input.dry_run {
        scope_1591.boolean(*var_1592);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1594) = &input.transit_gateway_attachment_id {
        scope_1593.string(var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("DryRun");
    if let Some(var_1596) = &input.dry_run {
        scope_1595.boolean(*var_1596);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1598) = &input.transit_gateway_route_table_id {
        scope_1597.string(var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("PrefixListId");
    if let Some(var_1600) = &input.prefix_list_id {
        scope_1599.string(var_1600);
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("DryRun");
    if let Some(var_1602) = &input.dry_run {
        scope_1601.boolean(*var_1602);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1604) = &input.transit_gateway_route_table_id {
        scope_1603.string(var_1604);
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1606) = &input.destination_cidr_block {
        scope_1605.string(var_1606);
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("DryRun");
    if let Some(var_1608) = &input.dry_run {
        scope_1607.boolean(*var_1608);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1610) = &input.transit_gateway_route_table_id {
        scope_1609.string(var_1610);
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("DryRun");
    if let Some(var_1612) = &input.dry_run {
        scope_1611.boolean(*var_1612);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1614) = &input.transit_gateway_attachment_id {
        scope_1613.string(var_1614);
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("DryRun");
    if let Some(var_1616) = &input.dry_run {
        scope_1615.boolean(*var_1616);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("VolumeId");
    if let Some(var_1618) = &input.volume_id {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("DryRun");
    if let Some(var_1620) = &input.dry_run {
        scope_1619.boolean(*var_1620);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("VpcId");
    if let Some(var_1622) = &input.vpc_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("DryRun");
    if let Some(var_1624) = &input.dry_run {
        scope_1623.boolean(*var_1624);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("DryRun");
    if let Some(var_1626) = &input.dry_run {
        scope_1625.boolean(*var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1628) = &input.connection_notification_ids {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            entry_1631.string(item_1629);
        }
        list_1630.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("DryRun");
    if let Some(var_1633) = &input.dry_run {
        scope_1632.boolean(*var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("VpcEndpointId");
    if let Some(var_1635) = &input.vpc_endpoint_ids {
        let mut list_1637 = scope_1634.start_list(true, Some("item"));
        for item_1636 in var_1635 {
            #[allow(unused_mut)]
            let mut entry_1638 = list_1637.entry();
            entry_1638.string(item_1636);
        }
        list_1637.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1639 = writer.prefix("DryRun");
    if let Some(var_1640) = &input.dry_run {
        scope_1639.boolean(*var_1640);
    }
    #[allow(unused_mut)]
    let mut scope_1641 = writer.prefix("ServiceId");
    if let Some(var_1642) = &input.service_ids {
        let mut list_1644 = scope_1641.start_list(true, Some("item"));
        for item_1643 in var_1642 {
            #[allow(unused_mut)]
            let mut entry_1645 = list_1644.entry();
            entry_1645.string(item_1643);
        }
        list_1644.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("DryRun");
    if let Some(var_1647) = &input.dry_run {
        scope_1646.boolean(*var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1649) = &input.vpc_peering_connection_id {
        scope_1648.string(var_1649);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("VpnConnectionId");
    if let Some(var_1651) = &input.vpn_connection_id {
        scope_1650.string(var_1651);
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("DryRun");
    if let Some(var_1653) = &input.dry_run {
        scope_1652.boolean(*var_1653);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1655) = &input.destination_cidr_block {
        scope_1654.string(var_1655);
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("VpnConnectionId");
    if let Some(var_1657) = &input.vpn_connection_id {
        scope_1656.string(var_1657);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("VpnGatewayId");
    if let Some(var_1659) = &input.vpn_gateway_id {
        scope_1658.string(var_1659);
    }
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("DryRun");
    if let Some(var_1661) = &input.dry_run {
        scope_1660.boolean(*var_1661);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("Cidr");
    if let Some(var_1663) = &input.cidr {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("DryRun");
    if let Some(var_1665) = &input.dry_run {
        scope_1664.boolean(*var_1665);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("ImageId");
    if let Some(var_1667) = &input.image_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("DryRun");
    if let Some(var_1669) = &input.dry_run {
        scope_1668.boolean(*var_1669);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("DryRun");
    if let Some(var_1671) = &input.dry_run {
        scope_1670.boolean(*var_1671);
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1673) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_deregister_instance_tag_attribute_request(
            scope_1672, var_1673,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1675) = &input.transit_gateway_multicast_domain_id {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("GroupIpAddress");
    if let Some(var_1677) = &input.group_ip_address {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1679) = &input.network_interface_ids {
        let mut list_1681 = scope_1678.start_list(true, Some("item"));
        for item_1680 in var_1679 {
            #[allow(unused_mut)]
            let mut entry_1682 = list_1681.entry();
            entry_1682.string(item_1680);
        }
        list_1681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("DryRun");
    if let Some(var_1684) = &input.dry_run {
        scope_1683.boolean(*var_1684);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1686) = &input.transit_gateway_multicast_domain_id {
        scope_1685.string(var_1686);
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("GroupIpAddress");
    if let Some(var_1688) = &input.group_ip_address {
        scope_1687.string(var_1688);
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1690) = &input.network_interface_ids {
        let mut list_1692 = scope_1689.start_list(true, Some("item"));
        for item_1691 in var_1690 {
            #[allow(unused_mut)]
            let mut entry_1693 = list_1692.entry();
            entry_1693.string(item_1691);
        }
        list_1692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("DryRun");
    if let Some(var_1695) = &input.dry_run {
        scope_1694.boolean(*var_1695);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("AttributeName");
    if let Some(var_1697) = &input.attribute_names {
        let mut list_1699 = scope_1696.start_list(true, Some("attributeName"));
        for item_1698 in var_1697 {
            #[allow(unused_mut)]
            let mut entry_1700 = list_1699.entry();
            entry_1700.string(item_1698.as_str());
        }
        list_1699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DryRun");
    if let Some(var_1702) = &input.dry_run {
        scope_1701.boolean(*var_1702);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("Filter");
    if let Some(var_1704) = &input.filters {
        let mut list_1706 = scope_1703.start_list(true, Some("Filter"));
        for item_1705 in var_1704 {
            #[allow(unused_mut)]
            let mut entry_1707 = list_1706.entry();
            crate::query_ser::serialize_structure_filter(entry_1707, item_1705);
        }
        list_1706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("PublicIp");
    if let Some(var_1709) = &input.public_ips {
        let mut list_1711 = scope_1708.start_list(true, Some("PublicIp"));
        for item_1710 in var_1709 {
            #[allow(unused_mut)]
            let mut entry_1712 = list_1711.entry();
            entry_1712.string(item_1710);
        }
        list_1711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("AllocationId");
    if let Some(var_1714) = &input.allocation_ids {
        let mut list_1716 = scope_1713.start_list(true, Some("AllocationId"));
        for item_1715 in var_1714 {
            #[allow(unused_mut)]
            let mut entry_1717 = list_1716.entry();
            entry_1717.string(item_1715);
        }
        list_1716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("DryRun");
    if let Some(var_1719) = &input.dry_run {
        scope_1718.boolean(*var_1719);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("AllocationId");
    if let Some(var_1721) = &input.allocation_ids {
        let mut list_1723 = scope_1720.start_list(true, Some("item"));
        for item_1722 in var_1721 {
            #[allow(unused_mut)]
            let mut entry_1724 = list_1723.entry();
            entry_1724.string(item_1722);
        }
        list_1723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("Attribute");
    if let Some(var_1726) = &input.attribute {
        scope_1725.string(var_1726.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("NextToken");
    if let Some(var_1728) = &input.next_token {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("MaxResults");
    if let Some(var_1730) = &input.max_results {
        scope_1729.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1730).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("DryRun");
    if let Some(var_1732) = &input.dry_run {
        scope_1731.boolean(*var_1732);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("DryRun");
    if let Some(var_1734) = &input.dry_run {
        scope_1733.boolean(*var_1734);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("Filter");
    if let Some(var_1736) = &input.filters {
        let mut list_1738 = scope_1735.start_list(true, Some("Filter"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]
            let mut entry_1739 = list_1738.entry();
            crate::query_ser::serialize_structure_filter(entry_1739, item_1737);
        }
        list_1738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("ZoneName");
    if let Some(var_1741) = &input.zone_names {
        let mut list_1743 = scope_1740.start_list(true, Some("ZoneName"));
        for item_1742 in var_1741 {
            #[allow(unused_mut)]
            let mut entry_1744 = list_1743.entry();
            entry_1744.string(item_1742);
        }
        list_1743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("ZoneId");
    if let Some(var_1746) = &input.zone_ids {
        let mut list_1748 = scope_1745.start_list(true, Some("ZoneId"));
        for item_1747 in var_1746 {
            #[allow(unused_mut)]
            let mut entry_1749 = list_1748.entry();
            entry_1749.string(item_1747);
        }
        list_1748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1751) = &input.all_availability_zones {
        scope_1750.boolean(*var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("DryRun");
    if let Some(var_1753) = &input.dry_run {
        scope_1752.boolean(*var_1753);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("BundleId");
    if let Some(var_1755) = &input.bundle_ids {
        let mut list_1757 = scope_1754.start_list(true, Some("BundleId"));
        for item_1756 in var_1755 {
            #[allow(unused_mut)]
            let mut entry_1758 = list_1757.entry();
            entry_1758.string(item_1756);
        }
        list_1757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("Filter");
    if let Some(var_1760) = &input.filters {
        let mut list_1762 = scope_1759.start_list(true, Some("Filter"));
        for item_1761 in var_1760 {
            #[allow(unused_mut)]
            let mut entry_1763 = list_1762.entry();
            crate::query_ser::serialize_structure_filter(entry_1763, item_1761);
        }
        list_1762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("DryRun");
    if let Some(var_1765) = &input.dry_run {
        scope_1764.boolean(*var_1765);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("DryRun");
    if let Some(var_1767) = &input.dry_run {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("MaxResults");
    if let Some(var_1769) = &input.max_results {
        scope_1768.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1769).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("NextToken");
    if let Some(var_1771) = &input.next_token {
        scope_1770.string(var_1771);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("CapacityReservationId");
    if let Some(var_1773) = &input.capacity_reservation_ids {
        let mut list_1775 = scope_1772.start_list(true, Some("item"));
        for item_1774 in var_1773 {
            #[allow(unused_mut)]
            let mut entry_1776 = list_1775.entry();
            entry_1776.string(item_1774);
        }
        list_1775.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("NextToken");
    if let Some(var_1778) = &input.next_token {
        scope_1777.string(var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("MaxResults");
    if let Some(var_1780) = &input.max_results {
        scope_1779.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("Filter");
    if let Some(var_1782) = &input.filters {
        let mut list_1784 = scope_1781.start_list(true, Some("Filter"));
        for item_1783 in var_1782 {
            #[allow(unused_mut)]
            let mut entry_1785 = list_1784.entry();
            crate::query_ser::serialize_structure_filter(entry_1785, item_1783);
        }
        list_1784.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("DryRun");
    if let Some(var_1787) = &input.dry_run {
        scope_1786.boolean(*var_1787);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("CarrierGatewayId");
    if let Some(var_1789) = &input.carrier_gateway_ids {
        let mut list_1791 = scope_1788.start_list(true, None);
        for item_1790 in var_1789 {
            #[allow(unused_mut)]
            let mut entry_1792 = list_1791.entry();
            entry_1792.string(item_1790);
        }
        list_1791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("Filter");
    if let Some(var_1794) = &input.filters {
        let mut list_1796 = scope_1793.start_list(true, Some("Filter"));
        for item_1795 in var_1794 {
            #[allow(unused_mut)]
            let mut entry_1797 = list_1796.entry();
            crate::query_ser::serialize_structure_filter(entry_1797, item_1795);
        }
        list_1796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("MaxResults");
    if let Some(var_1799) = &input.max_results {
        scope_1798.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1799).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("NextToken");
    if let Some(var_1801) = &input.next_token {
        scope_1800.string(var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("Filter");
    if let Some(var_1805) = &input.filters {
        let mut list_1807 = scope_1804.start_list(true, Some("Filter"));
        for item_1806 in var_1805 {
            #[allow(unused_mut)]
            let mut entry_1808 = list_1807.entry();
            crate::query_ser::serialize_structure_filter(entry_1808, item_1806);
        }
        list_1807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DryRun");
    if let Some(var_1810) = &input.dry_run {
        scope_1809.boolean(*var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("InstanceId");
    if let Some(var_1812) = &input.instance_ids {
        let mut list_1814 = scope_1811.start_list(true, Some("InstanceId"));
        for item_1813 in var_1812 {
            #[allow(unused_mut)]
            let mut entry_1815 = list_1814.entry();
            entry_1815.string(item_1813);
        }
        list_1814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1816 = writer.prefix("MaxResults");
    if let Some(var_1817) = &input.max_results {
        scope_1816.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1817).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1818 = writer.prefix("NextToken");
    if let Some(var_1819) = &input.next_token {
        scope_1818.string(var_1819);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1820 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1821) = &input.client_vpn_endpoint_id {
        scope_1820.string(var_1821);
    }
    #[allow(unused_mut)]
    let mut scope_1822 = writer.prefix("DryRun");
    if let Some(var_1823) = &input.dry_run {
        scope_1822.boolean(*var_1823);
    }
    #[allow(unused_mut)]
    let mut scope_1824 = writer.prefix("NextToken");
    if let Some(var_1825) = &input.next_token {
        scope_1824.string(var_1825);
    }
    #[allow(unused_mut)]
    let mut scope_1826 = writer.prefix("Filter");
    if let Some(var_1827) = &input.filters {
        let mut list_1829 = scope_1826.start_list(true, Some("Filter"));
        for item_1828 in var_1827 {
            #[allow(unused_mut)]
            let mut entry_1830 = list_1829.entry();
            crate::query_ser::serialize_structure_filter(entry_1830, item_1828);
        }
        list_1829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("MaxResults");
    if let Some(var_1832) = &input.max_results {
        scope_1831.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1832).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1834) = &input.client_vpn_endpoint_id {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("Filter");
    if let Some(var_1836) = &input.filters {
        let mut list_1838 = scope_1835.start_list(true, Some("Filter"));
        for item_1837 in var_1836 {
            #[allow(unused_mut)]
            let mut entry_1839 = list_1838.entry();
            crate::query_ser::serialize_structure_filter(entry_1839, item_1837);
        }
        list_1838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("NextToken");
    if let Some(var_1841) = &input.next_token {
        scope_1840.string(var_1841);
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("MaxResults");
    if let Some(var_1843) = &input.max_results {
        scope_1842.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1843).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("DryRun");
    if let Some(var_1845) = &input.dry_run {
        scope_1844.boolean(*var_1845);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1847) = &input.client_vpn_endpoint_ids {
        let mut list_1849 = scope_1846.start_list(true, Some("item"));
        for item_1848 in var_1847 {
            #[allow(unused_mut)]
            let mut entry_1850 = list_1849.entry();
            entry_1850.string(item_1848);
        }
        list_1849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("MaxResults");
    if let Some(var_1852) = &input.max_results {
        scope_1851.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("NextToken");
    if let Some(var_1854) = &input.next_token {
        scope_1853.string(var_1854);
    }
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("Filter");
    if let Some(var_1856) = &input.filters {
        let mut list_1858 = scope_1855.start_list(true, Some("Filter"));
        for item_1857 in var_1856 {
            #[allow(unused_mut)]
            let mut entry_1859 = list_1858.entry();
            crate::query_ser::serialize_structure_filter(entry_1859, item_1857);
        }
        list_1858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("DryRun");
    if let Some(var_1861) = &input.dry_run {
        scope_1860.boolean(*var_1861);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1863) = &input.client_vpn_endpoint_id {
        scope_1862.string(var_1863);
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("Filter");
    if let Some(var_1865) = &input.filters {
        let mut list_1867 = scope_1864.start_list(true, Some("Filter"));
        for item_1866 in var_1865 {
            #[allow(unused_mut)]
            let mut entry_1868 = list_1867.entry();
            crate::query_ser::serialize_structure_filter(entry_1868, item_1866);
        }
        list_1867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("MaxResults");
    if let Some(var_1870) = &input.max_results {
        scope_1869.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("NextToken");
    if let Some(var_1872) = &input.next_token {
        scope_1871.string(var_1872);
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("DryRun");
    if let Some(var_1874) = &input.dry_run {
        scope_1873.boolean(*var_1874);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1876) = &input.client_vpn_endpoint_id {
        scope_1875.string(var_1876);
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("AssociationIds");
    if let Some(var_1878) = &input.association_ids {
        let mut list_1880 = scope_1877.start_list(true, Some("item"));
        for item_1879 in var_1878 {
            #[allow(unused_mut)]
            let mut entry_1881 = list_1880.entry();
            entry_1881.string(item_1879);
        }
        list_1880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("MaxResults");
    if let Some(var_1883) = &input.max_results {
        scope_1882.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1883).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("NextToken");
    if let Some(var_1885) = &input.next_token {
        scope_1884.string(var_1885);
    }
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("Filter");
    if let Some(var_1887) = &input.filters {
        let mut list_1889 = scope_1886.start_list(true, Some("Filter"));
        for item_1888 in var_1887 {
            #[allow(unused_mut)]
            let mut entry_1890 = list_1889.entry();
            crate::query_ser::serialize_structure_filter(entry_1890, item_1888);
        }
        list_1889.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("DryRun");
    if let Some(var_1892) = &input.dry_run {
        scope_1891.boolean(*var_1892);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("PoolId");
    if let Some(var_1894) = &input.pool_ids {
        let mut list_1896 = scope_1893.start_list(true, Some("item"));
        for item_1895 in var_1894 {
            #[allow(unused_mut)]
            let mut entry_1897 = list_1896.entry();
            entry_1897.string(item_1895);
        }
        list_1896.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("Filter");
    if let Some(var_1899) = &input.filters {
        let mut list_1901 = scope_1898.start_list(true, Some("Filter"));
        for item_1900 in var_1899 {
            #[allow(unused_mut)]
            let mut entry_1902 = list_1901.entry();
            crate::query_ser::serialize_structure_filter(entry_1902, item_1900);
        }
        list_1901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("MaxResults");
    if let Some(var_1904) = &input.max_results {
        scope_1903.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1904).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("NextToken");
    if let Some(var_1906) = &input.next_token {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("DryRun");
    if let Some(var_1908) = &input.dry_run {
        scope_1907.boolean(*var_1908);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("ConversionTaskId");
    if let Some(var_1910) = &input.conversion_task_ids {
        let mut list_1912 = scope_1909.start_list(true, Some("item"));
        for item_1911 in var_1910 {
            #[allow(unused_mut)]
            let mut entry_1913 = list_1912.entry();
            entry_1913.string(item_1911);
        }
        list_1912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("DryRun");
    if let Some(var_1915) = &input.dry_run {
        scope_1914.boolean(*var_1915);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("CustomerGatewayId");
    if let Some(var_1917) = &input.customer_gateway_ids {
        let mut list_1919 = scope_1916.start_list(true, Some("CustomerGatewayId"));
        for item_1918 in var_1917 {
            #[allow(unused_mut)]
            let mut entry_1920 = list_1919.entry();
            entry_1920.string(item_1918);
        }
        list_1919.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("Filter");
    if let Some(var_1922) = &input.filters {
        let mut list_1924 = scope_1921.start_list(true, Some("Filter"));
        for item_1923 in var_1922 {
            #[allow(unused_mut)]
            let mut entry_1925 = list_1924.entry();
            crate::query_ser::serialize_structure_filter(entry_1925, item_1923);
        }
        list_1924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("DryRun");
    if let Some(var_1927) = &input.dry_run {
        scope_1926.boolean(*var_1927);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("DhcpOptionsId");
    if let Some(var_1929) = &input.dhcp_options_ids {
        let mut list_1931 = scope_1928.start_list(true, Some("DhcpOptionsId"));
        for item_1930 in var_1929 {
            #[allow(unused_mut)]
            let mut entry_1932 = list_1931.entry();
            entry_1932.string(item_1930);
        }
        list_1931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("Filter");
    if let Some(var_1934) = &input.filters {
        let mut list_1936 = scope_1933.start_list(true, Some("Filter"));
        for item_1935 in var_1934 {
            #[allow(unused_mut)]
            let mut entry_1937 = list_1936.entry();
            crate::query_ser::serialize_structure_filter(entry_1937, item_1935);
        }
        list_1936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("NextToken");
    if let Some(var_1941) = &input.next_token {
        scope_1940.string(var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("MaxResults");
    if let Some(var_1943) = &input.max_results {
        scope_1942.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1943).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("DryRun");
    if let Some(var_1945) = &input.dry_run {
        scope_1944.boolean(*var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1947) = &input.egress_only_internet_gateway_ids {
        let mut list_1949 = scope_1946.start_list(true, Some("item"));
        for item_1948 in var_1947 {
            #[allow(unused_mut)]
            let mut entry_1950 = list_1949.entry();
            entry_1950.string(item_1948);
        }
        list_1949.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("MaxResults");
    if let Some(var_1952) = &input.max_results {
        scope_1951.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1953 = writer.prefix("NextToken");
    if let Some(var_1954) = &input.next_token {
        scope_1953.string(var_1954);
    }
    #[allow(unused_mut)]
    let mut scope_1955 = writer.prefix("Filter");
    if let Some(var_1956) = &input.filters {
        let mut list_1958 = scope_1955.start_list(true, Some("Filter"));
        for item_1957 in var_1956 {
            #[allow(unused_mut)]
            let mut entry_1959 = list_1958.entry();
            crate::query_ser::serialize_structure_filter(entry_1959, item_1957);
        }
        list_1958.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("ElasticGpuId");
    if let Some(var_1961) = &input.elastic_gpu_ids {
        let mut list_1963 = scope_1960.start_list(true, Some("item"));
        for item_1962 in var_1961 {
            #[allow(unused_mut)]
            let mut entry_1964 = list_1963.entry();
            entry_1964.string(item_1962);
        }
        list_1963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("DryRun");
    if let Some(var_1966) = &input.dry_run {
        scope_1965.boolean(*var_1966);
    }
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("Filter");
    if let Some(var_1968) = &input.filters {
        let mut list_1970 = scope_1967.start_list(true, Some("Filter"));
        for item_1969 in var_1968 {
            #[allow(unused_mut)]
            let mut entry_1971 = list_1970.entry();
            crate::query_ser::serialize_structure_filter(entry_1971, item_1969);
        }
        list_1970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("MaxResults");
    if let Some(var_1973) = &input.max_results {
        scope_1972.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1973).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("NextToken");
    if let Some(var_1975) = &input.next_token {
        scope_1974.string(var_1975);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("DryRun");
    if let Some(var_1977) = &input.dry_run {
        scope_1976.boolean(*var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("Filter");
    if let Some(var_1979) = &input.filters {
        let mut list_1981 = scope_1978.start_list(true, Some("Filter"));
        for item_1980 in var_1979 {
            #[allow(unused_mut)]
            let mut entry_1982 = list_1981.entry();
            crate::query_ser::serialize_structure_filter(entry_1982, item_1980);
        }
        list_1981.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("ExportImageTaskId");
    if let Some(var_1984) = &input.export_image_task_ids {
        let mut list_1986 = scope_1983.start_list(true, Some("ExportImageTaskId"));
        for item_1985 in var_1984 {
            #[allow(unused_mut)]
            let mut entry_1987 = list_1986.entry();
            entry_1987.string(item_1985);
        }
        list_1986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("MaxResults");
    if let Some(var_1989) = &input.max_results {
        scope_1988.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1989).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("NextToken");
    if let Some(var_1991) = &input.next_token {
        scope_1990.string(var_1991);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("ExportTaskId");
    if let Some(var_1993) = &input.export_task_ids {
        let mut list_1995 = scope_1992.start_list(true, Some("ExportTaskId"));
        for item_1994 in var_1993 {
            #[allow(unused_mut)]
            let mut entry_1996 = list_1995.entry();
            entry_1996.string(item_1994);
        }
        list_1995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("Filter");
    if let Some(var_1998) = &input.filters {
        let mut list_2000 = scope_1997.start_list(true, Some("Filter"));
        for item_1999 in var_1998 {
            #[allow(unused_mut)]
            let mut entry_2001 = list_2000.entry();
            crate::query_ser::serialize_structure_filter(entry_2001, item_1999);
        }
        list_2000.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2002 = writer.prefix("Filter");
    if let Some(var_2003) = &input.filters {
        let mut list_2005 = scope_2002.start_list(true, Some("Filter"));
        for item_2004 in var_2003 {
            #[allow(unused_mut)]
            let mut entry_2006 = list_2005.entry();
            crate::query_ser::serialize_structure_filter(entry_2006, item_2004);
        }
        list_2005.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("MaxResults");
    if let Some(var_2008) = &input.max_results {
        scope_2007.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2008).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("NextToken");
    if let Some(var_2010) = &input.next_token {
        scope_2009.string(var_2010);
    }
    #[allow(unused_mut)]
    let mut scope_2011 = writer.prefix("DryRun");
    if let Some(var_2012) = &input.dry_run {
        scope_2011.boolean(*var_2012);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("DryRun");
    if let Some(var_2014) = &input.dry_run {
        scope_2013.boolean(*var_2014);
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("EventType");
    if let Some(var_2016) = &input.event_type {
        scope_2015.string(var_2016.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("MaxResults");
    if let Some(var_2018) = &input.max_results {
        scope_2017.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("NextToken");
    if let Some(var_2020) = &input.next_token {
        scope_2019.string(var_2020);
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("FleetId");
    if let Some(var_2022) = &input.fleet_id {
        scope_2021.string(var_2022);
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("StartTime");
    if let Some(var_2024) = &input.start_time {
        scope_2023.instant(var_2024, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("DryRun");
    if let Some(var_2026) = &input.dry_run {
        scope_2025.boolean(*var_2026);
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("MaxResults");
    if let Some(var_2028) = &input.max_results {
        scope_2027.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("NextToken");
    if let Some(var_2030) = &input.next_token {
        scope_2029.string(var_2030);
    }
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("FleetId");
    if let Some(var_2032) = &input.fleet_id {
        scope_2031.string(var_2032);
    }
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("Filter");
    if let Some(var_2034) = &input.filters {
        let mut list_2036 = scope_2033.start_list(true, Some("Filter"));
        for item_2035 in var_2034 {
            #[allow(unused_mut)]
            let mut entry_2037 = list_2036.entry();
            crate::query_ser::serialize_structure_filter(entry_2037, item_2035);
        }
        list_2036.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2038 = writer.prefix("DryRun");
    if let Some(var_2039) = &input.dry_run {
        scope_2038.boolean(*var_2039);
    }
    #[allow(unused_mut)]
    let mut scope_2040 = writer.prefix("MaxResults");
    if let Some(var_2041) = &input.max_results {
        scope_2040.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2041).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2042 = writer.prefix("NextToken");
    if let Some(var_2043) = &input.next_token {
        scope_2042.string(var_2043);
    }
    #[allow(unused_mut)]
    let mut scope_2044 = writer.prefix("FleetId");
    if let Some(var_2045) = &input.fleet_ids {
        let mut list_2047 = scope_2044.start_list(true, None);
        for item_2046 in var_2045 {
            #[allow(unused_mut)]
            let mut entry_2048 = list_2047.entry();
            entry_2048.string(item_2046);
        }
        list_2047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("Filter");
    if let Some(var_2050) = &input.filters {
        let mut list_2052 = scope_2049.start_list(true, Some("Filter"));
        for item_2051 in var_2050 {
            #[allow(unused_mut)]
            let mut entry_2053 = list_2052.entry();
            crate::query_ser::serialize_structure_filter(entry_2053, item_2051);
        }
        list_2052.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("DryRun");
    if let Some(var_2055) = &input.dry_run {
        scope_2054.boolean(*var_2055);
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("Filter");
    if let Some(var_2057) = &input.filter {
        let mut list_2059 = scope_2056.start_list(true, Some("Filter"));
        for item_2058 in var_2057 {
            #[allow(unused_mut)]
            let mut entry_2060 = list_2059.entry();
            crate::query_ser::serialize_structure_filter(entry_2060, item_2058);
        }
        list_2059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("FlowLogId");
    if let Some(var_2062) = &input.flow_log_ids {
        let mut list_2064 = scope_2061.start_list(true, Some("item"));
        for item_2063 in var_2062 {
            #[allow(unused_mut)]
            let mut entry_2065 = list_2064.entry();
            entry_2065.string(item_2063);
        }
        list_2064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2066 = writer.prefix("MaxResults");
    if let Some(var_2067) = &input.max_results {
        scope_2066.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2067).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("NextToken");
    if let Some(var_2069) = &input.next_token {
        scope_2068.string(var_2069);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("DryRun");
    if let Some(var_2071) = &input.dry_run {
        scope_2070.boolean(*var_2071);
    }
    #[allow(unused_mut)]
    let mut scope_2072 = writer.prefix("FpgaImageId");
    if let Some(var_2073) = &input.fpga_image_id {
        scope_2072.string(var_2073);
    }
    #[allow(unused_mut)]
    let mut scope_2074 = writer.prefix("Attribute");
    if let Some(var_2075) = &input.attribute {
        scope_2074.string(var_2075.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("DryRun");
    if let Some(var_2077) = &input.dry_run {
        scope_2076.boolean(*var_2077);
    }
    #[allow(unused_mut)]
    let mut scope_2078 = writer.prefix("FpgaImageId");
    if let Some(var_2079) = &input.fpga_image_ids {
        let mut list_2081 = scope_2078.start_list(true, Some("item"));
        for item_2080 in var_2079 {
            #[allow(unused_mut)]
            let mut entry_2082 = list_2081.entry();
            entry_2082.string(item_2080);
        }
        list_2081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("Owner");
    if let Some(var_2084) = &input.owners {
        let mut list_2086 = scope_2083.start_list(true, Some("Owner"));
        for item_2085 in var_2084 {
            #[allow(unused_mut)]
            let mut entry_2087 = list_2086.entry();
            entry_2087.string(item_2085);
        }
        list_2086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2088 = writer.prefix("Filter");
    if let Some(var_2089) = &input.filters {
        let mut list_2091 = scope_2088.start_list(true, Some("Filter"));
        for item_2090 in var_2089 {
            #[allow(unused_mut)]
            let mut entry_2092 = list_2091.entry();
            crate::query_ser::serialize_structure_filter(entry_2092, item_2090);
        }
        list_2091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("NextToken");
    if let Some(var_2094) = &input.next_token {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("MaxResults");
    if let Some(var_2096) = &input.max_results {
        scope_2095.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2096).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("Filter");
    if let Some(var_2098) = &input.filter {
        let mut list_2100 = scope_2097.start_list(true, Some("Filter"));
        for item_2099 in var_2098 {
            #[allow(unused_mut)]
            let mut entry_2101 = list_2100.entry();
            crate::query_ser::serialize_structure_filter(entry_2101, item_2099);
        }
        list_2100.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2102 = writer.prefix("MaxDuration");
    if let Some(var_2103) = &input.max_duration {
        scope_2102.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2103).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2104 = writer.prefix("MaxResults");
    if let Some(var_2105) = &input.max_results {
        scope_2104.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("MinDuration");
    if let Some(var_2107) = &input.min_duration {
        scope_2106.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("NextToken");
    if let Some(var_2109) = &input.next_token {
        scope_2108.string(var_2109);
    }
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("OfferingId");
    if let Some(var_2111) = &input.offering_id {
        scope_2110.string(var_2111);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2112 = writer.prefix("Filter");
    if let Some(var_2113) = &input.filter {
        let mut list_2115 = scope_2112.start_list(true, Some("Filter"));
        for item_2114 in var_2113 {
            #[allow(unused_mut)]
            let mut entry_2116 = list_2115.entry();
            crate::query_ser::serialize_structure_filter(entry_2116, item_2114);
        }
        list_2115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("HostReservationIdSet");
    if let Some(var_2118) = &input.host_reservation_id_set {
        let mut list_2120 = scope_2117.start_list(true, Some("item"));
        for item_2119 in var_2118 {
            #[allow(unused_mut)]
            let mut entry_2121 = list_2120.entry();
            entry_2121.string(item_2119);
        }
        list_2120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("MaxResults");
    if let Some(var_2123) = &input.max_results {
        scope_2122.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("NextToken");
    if let Some(var_2125) = &input.next_token {
        scope_2124.string(var_2125);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("Filter");
    if let Some(var_2127) = &input.filter {
        let mut list_2129 = scope_2126.start_list(true, Some("Filter"));
        for item_2128 in var_2127 {
            #[allow(unused_mut)]
            let mut entry_2130 = list_2129.entry();
            crate::query_ser::serialize_structure_filter(entry_2130, item_2128);
        }
        list_2129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("HostId");
    if let Some(var_2132) = &input.host_ids {
        let mut list_2134 = scope_2131.start_list(true, Some("item"));
        for item_2133 in var_2132 {
            #[allow(unused_mut)]
            let mut entry_2135 = list_2134.entry();
            entry_2135.string(item_2133);
        }
        list_2134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2136 = writer.prefix("MaxResults");
    if let Some(var_2137) = &input.max_results {
        scope_2136.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2137).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2138 = writer.prefix("NextToken");
    if let Some(var_2139) = &input.next_token {
        scope_2138.string(var_2139);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("AssociationId");
    if let Some(var_2141) = &input.association_ids {
        let mut list_2143 = scope_2140.start_list(true, Some("AssociationId"));
        for item_2142 in var_2141 {
            #[allow(unused_mut)]
            let mut entry_2144 = list_2143.entry();
            entry_2144.string(item_2142);
        }
        list_2143.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("Filter");
    if let Some(var_2146) = &input.filters {
        let mut list_2148 = scope_2145.start_list(true, Some("Filter"));
        for item_2147 in var_2146 {
            #[allow(unused_mut)]
            let mut entry_2149 = list_2148.entry();
            crate::query_ser::serialize_structure_filter(entry_2149, item_2147);
        }
        list_2148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("MaxResults");
    if let Some(var_2151) = &input.max_results {
        scope_2150.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2151).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2152 = writer.prefix("NextToken");
    if let Some(var_2153) = &input.next_token {
        scope_2152.string(var_2153);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("PrincipalArn");
    if let Some(var_2155) = &input.principal_arn {
        scope_2154.string(var_2155);
    }
    #[allow(unused_mut)]
    let mut scope_2156 = writer.prefix("Resource");
    if let Some(var_2157) = &input.resource {
        scope_2156.string(var_2157);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2158 = writer.prefix("Resource");
    if let Some(var_2159) = &input.resource {
        scope_2158.string(var_2159);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2160 = writer.prefix("Attribute");
    if let Some(var_2161) = &input.attribute {
        scope_2160.string(var_2161.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2162 = writer.prefix("ImageId");
    if let Some(var_2163) = &input.image_id {
        scope_2162.string(var_2163);
    }
    #[allow(unused_mut)]
    let mut scope_2164 = writer.prefix("DryRun");
    if let Some(var_2165) = &input.dry_run {
        scope_2164.boolean(*var_2165);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2166 = writer.prefix("ExecutableBy");
    if let Some(var_2167) = &input.executable_users {
        let mut list_2169 = scope_2166.start_list(true, Some("ExecutableBy"));
        for item_2168 in var_2167 {
            #[allow(unused_mut)]
            let mut entry_2170 = list_2169.entry();
            entry_2170.string(item_2168);
        }
        list_2169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("Filter");
    if let Some(var_2172) = &input.filters {
        let mut list_2174 = scope_2171.start_list(true, Some("Filter"));
        for item_2173 in var_2172 {
            #[allow(unused_mut)]
            let mut entry_2175 = list_2174.entry();
            crate::query_ser::serialize_structure_filter(entry_2175, item_2173);
        }
        list_2174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("ImageId");
    if let Some(var_2177) = &input.image_ids {
        let mut list_2179 = scope_2176.start_list(true, Some("ImageId"));
        for item_2178 in var_2177 {
            #[allow(unused_mut)]
            let mut entry_2180 = list_2179.entry();
            entry_2180.string(item_2178);
        }
        list_2179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("Owner");
    if let Some(var_2182) = &input.owners {
        let mut list_2184 = scope_2181.start_list(true, Some("Owner"));
        for item_2183 in var_2182 {
            #[allow(unused_mut)]
            let mut entry_2185 = list_2184.entry();
            entry_2185.string(item_2183);
        }
        list_2184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2186 = writer.prefix("DryRun");
    if let Some(var_2187) = &input.dry_run {
        scope_2186.boolean(*var_2187);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2188 = writer.prefix("DryRun");
    if let Some(var_2189) = &input.dry_run {
        scope_2188.boolean(*var_2189);
    }
    #[allow(unused_mut)]
    let mut scope_2190 = writer.prefix("Filters");
    if let Some(var_2191) = &input.filters {
        let mut list_2193 = scope_2190.start_list(true, Some("Filter"));
        for item_2192 in var_2191 {
            #[allow(unused_mut)]
            let mut entry_2194 = list_2193.entry();
            crate::query_ser::serialize_structure_filter(entry_2194, item_2192);
        }
        list_2193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2195 = writer.prefix("ImportTaskId");
    if let Some(var_2196) = &input.import_task_ids {
        let mut list_2198 = scope_2195.start_list(true, Some("ImportTaskId"));
        for item_2197 in var_2196 {
            #[allow(unused_mut)]
            let mut entry_2199 = list_2198.entry();
            entry_2199.string(item_2197);
        }
        list_2198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2200 = writer.prefix("MaxResults");
    if let Some(var_2201) = &input.max_results {
        scope_2200.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2202 = writer.prefix("NextToken");
    if let Some(var_2203) = &input.next_token {
        scope_2202.string(var_2203);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2204 = writer.prefix("DryRun");
    if let Some(var_2205) = &input.dry_run {
        scope_2204.boolean(*var_2205);
    }
    #[allow(unused_mut)]
    let mut scope_2206 = writer.prefix("Filters");
    if let Some(var_2207) = &input.filters {
        let mut list_2209 = scope_2206.start_list(true, Some("Filter"));
        for item_2208 in var_2207 {
            #[allow(unused_mut)]
            let mut entry_2210 = list_2209.entry();
            crate::query_ser::serialize_structure_filter(entry_2210, item_2208);
        }
        list_2209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("ImportTaskId");
    if let Some(var_2212) = &input.import_task_ids {
        let mut list_2214 = scope_2211.start_list(true, Some("ImportTaskId"));
        for item_2213 in var_2212 {
            #[allow(unused_mut)]
            let mut entry_2215 = list_2214.entry();
            entry_2215.string(item_2213);
        }
        list_2214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("MaxResults");
    if let Some(var_2217) = &input.max_results {
        scope_2216.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("NextToken");
    if let Some(var_2219) = &input.next_token {
        scope_2218.string(var_2219);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("Attribute");
    if let Some(var_2221) = &input.attribute {
        scope_2220.string(var_2221.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("DryRun");
    if let Some(var_2223) = &input.dry_run {
        scope_2222.boolean(*var_2223);
    }
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("InstanceId");
    if let Some(var_2225) = &input.instance_id {
        scope_2224.string(var_2225);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("DryRun");
    if let Some(var_2227) = &input.dry_run {
        scope_2226.boolean(*var_2227);
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("Filter");
    if let Some(var_2229) = &input.filters {
        let mut list_2231 = scope_2228.start_list(true, Some("Filter"));
        for item_2230 in var_2229 {
            #[allow(unused_mut)]
            let mut entry_2232 = list_2231.entry();
            crate::query_ser::serialize_structure_filter(entry_2232, item_2230);
        }
        list_2231.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2233 = writer.prefix("InstanceId");
    if let Some(var_2234) = &input.instance_ids {
        let mut list_2236 = scope_2233.start_list(true, Some("InstanceId"));
        for item_2235 in var_2234 {
            #[allow(unused_mut)]
            let mut entry_2237 = list_2236.entry();
            entry_2237.string(item_2235);
        }
        list_2236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("MaxResults");
    if let Some(var_2239) = &input.max_results {
        scope_2238.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2240 = writer.prefix("NextToken");
    if let Some(var_2241) = &input.next_token {
        scope_2240.string(var_2241);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("DryRun");
    if let Some(var_2243) = &input.dry_run {
        scope_2242.boolean(*var_2243);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2244 = writer.prefix("Filter");
    if let Some(var_2245) = &input.filters {
        let mut list_2247 = scope_2244.start_list(true, Some("Filter"));
        for item_2246 in var_2245 {
            #[allow(unused_mut)]
            let mut entry_2248 = list_2247.entry();
            crate::query_ser::serialize_structure_filter(entry_2248, item_2246);
        }
        list_2247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2249 = writer.prefix("InstanceId");
    if let Some(var_2250) = &input.instance_ids {
        let mut list_2252 = scope_2249.start_list(true, Some("InstanceId"));
        for item_2251 in var_2250 {
            #[allow(unused_mut)]
            let mut entry_2253 = list_2252.entry();
            entry_2253.string(item_2251);
        }
        list_2252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("DryRun");
    if let Some(var_2255) = &input.dry_run {
        scope_2254.boolean(*var_2255);
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("MaxResults");
    if let Some(var_2257) = &input.max_results {
        scope_2256.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("NextToken");
    if let Some(var_2259) = &input.next_token {
        scope_2258.string(var_2259);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("Filter");
    if let Some(var_2261) = &input.filters {
        let mut list_2263 = scope_2260.start_list(true, Some("Filter"));
        for item_2262 in var_2261 {
            #[allow(unused_mut)]
            let mut entry_2264 = list_2263.entry();
            crate::query_ser::serialize_structure_filter(entry_2264, item_2262);
        }
        list_2263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2265 = writer.prefix("InstanceId");
    if let Some(var_2266) = &input.instance_ids {
        let mut list_2268 = scope_2265.start_list(true, Some("InstanceId"));
        for item_2267 in var_2266 {
            #[allow(unused_mut)]
            let mut entry_2269 = list_2268.entry();
            entry_2269.string(item_2267);
        }
        list_2268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2270 = writer.prefix("MaxResults");
    if let Some(var_2271) = &input.max_results {
        scope_2270.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2271).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2272 = writer.prefix("NextToken");
    if let Some(var_2273) = &input.next_token {
        scope_2272.string(var_2273);
    }
    #[allow(unused_mut)]
    let mut scope_2274 = writer.prefix("DryRun");
    if let Some(var_2275) = &input.dry_run {
        scope_2274.boolean(*var_2275);
    }
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("IncludeAllInstances");
    if let Some(var_2277) = &input.include_all_instances {
        scope_2276.boolean(*var_2277);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2278 = writer.prefix("DryRun");
    if let Some(var_2279) = &input.dry_run {
        scope_2278.boolean(*var_2279);
    }
    #[allow(unused_mut)]
    let mut scope_2280 = writer.prefix("LocationType");
    if let Some(var_2281) = &input.location_type {
        scope_2280.string(var_2281.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2282 = writer.prefix("Filter");
    if let Some(var_2283) = &input.filters {
        let mut list_2285 = scope_2282.start_list(true, Some("Filter"));
        for item_2284 in var_2283 {
            #[allow(unused_mut)]
            let mut entry_2286 = list_2285.entry();
            crate::query_ser::serialize_structure_filter(entry_2286, item_2284);
        }
        list_2285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("MaxResults");
    if let Some(var_2288) = &input.max_results {
        scope_2287.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("NextToken");
    if let Some(var_2290) = &input.next_token {
        scope_2289.string(var_2290);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("DryRun");
    if let Some(var_2292) = &input.dry_run {
        scope_2291.boolean(*var_2292);
    }
    #[allow(unused_mut)]
    let mut scope_2293 = writer.prefix("InstanceType");
    if let Some(var_2294) = &input.instance_types {
        let mut list_2296 = scope_2293.start_list(true, None);
        for item_2295 in var_2294 {
            #[allow(unused_mut)]
            let mut entry_2297 = list_2296.entry();
            entry_2297.string(item_2295.as_str());
        }
        list_2296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("Filter");
    if let Some(var_2299) = &input.filters {
        let mut list_2301 = scope_2298.start_list(true, Some("Filter"));
        for item_2300 in var_2299 {
            #[allow(unused_mut)]
            let mut entry_2302 = list_2301.entry();
            crate::query_ser::serialize_structure_filter(entry_2302, item_2300);
        }
        list_2301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2303 = writer.prefix("MaxResults");
    if let Some(var_2304) = &input.max_results {
        scope_2303.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2305 = writer.prefix("NextToken");
    if let Some(var_2306) = &input.next_token {
        scope_2305.string(var_2306);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2307 = writer.prefix("Filter");
    if let Some(var_2308) = &input.filters {
        let mut list_2310 = scope_2307.start_list(true, Some("Filter"));
        for item_2309 in var_2308 {
            #[allow(unused_mut)]
            let mut entry_2311 = list_2310.entry();
            crate::query_ser::serialize_structure_filter(entry_2311, item_2309);
        }
        list_2310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("DryRun");
    if let Some(var_2313) = &input.dry_run {
        scope_2312.boolean(*var_2313);
    }
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("InternetGatewayId");
    if let Some(var_2315) = &input.internet_gateway_ids {
        let mut list_2317 = scope_2314.start_list(true, Some("item"));
        for item_2316 in var_2315 {
            #[allow(unused_mut)]
            let mut entry_2318 = list_2317.entry();
            entry_2318.string(item_2316);
        }
        list_2317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("NextToken");
    if let Some(var_2320) = &input.next_token {
        scope_2319.string(var_2320);
    }
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("MaxResults");
    if let Some(var_2322) = &input.max_results {
        scope_2321.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2322).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("PoolId");
    if let Some(var_2324) = &input.pool_ids {
        let mut list_2326 = scope_2323.start_list(true, Some("item"));
        for item_2325 in var_2324 {
            #[allow(unused_mut)]
            let mut entry_2327 = list_2326.entry();
            entry_2327.string(item_2325);
        }
        list_2326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2328 = writer.prefix("NextToken");
    if let Some(var_2329) = &input.next_token {
        scope_2328.string(var_2329);
    }
    #[allow(unused_mut)]
    let mut scope_2330 = writer.prefix("MaxResults");
    if let Some(var_2331) = &input.max_results {
        scope_2330.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2331).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2332 = writer.prefix("DryRun");
    if let Some(var_2333) = &input.dry_run {
        scope_2332.boolean(*var_2333);
    }
    #[allow(unused_mut)]
    let mut scope_2334 = writer.prefix("Filter");
    if let Some(var_2335) = &input.filters {
        let mut list_2337 = scope_2334.start_list(true, Some("Filter"));
        for item_2336 in var_2335 {
            #[allow(unused_mut)]
            let mut entry_2338 = list_2337.entry();
            crate::query_ser::serialize_structure_filter(entry_2338, item_2336);
        }
        list_2337.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2339 = writer.prefix("Filter");
    if let Some(var_2340) = &input.filters {
        let mut list_2342 = scope_2339.start_list(true, Some("Filter"));
        for item_2341 in var_2340 {
            #[allow(unused_mut)]
            let mut entry_2343 = list_2342.entry();
            crate::query_ser::serialize_structure_filter(entry_2343, item_2341);
        }
        list_2342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("KeyName");
    if let Some(var_2345) = &input.key_names {
        let mut list_2347 = scope_2344.start_list(true, Some("KeyName"));
        for item_2346 in var_2345 {
            #[allow(unused_mut)]
            let mut entry_2348 = list_2347.entry();
            entry_2348.string(item_2346);
        }
        list_2347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("KeyPairId");
    if let Some(var_2350) = &input.key_pair_ids {
        let mut list_2352 = scope_2349.start_list(true, Some("KeyPairId"));
        for item_2351 in var_2350 {
            #[allow(unused_mut)]
            let mut entry_2353 = list_2352.entry();
            entry_2353.string(item_2351);
        }
        list_2352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2354 = writer.prefix("DryRun");
    if let Some(var_2355) = &input.dry_run {
        scope_2354.boolean(*var_2355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("DryRun");
    if let Some(var_2357) = &input.dry_run {
        scope_2356.boolean(*var_2357);
    }
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("LaunchTemplateId");
    if let Some(var_2359) = &input.launch_template_ids {
        let mut list_2361 = scope_2358.start_list(true, Some("item"));
        for item_2360 in var_2359 {
            #[allow(unused_mut)]
            let mut entry_2362 = list_2361.entry();
            entry_2362.string(item_2360);
        }
        list_2361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("LaunchTemplateName");
    if let Some(var_2364) = &input.launch_template_names {
        let mut list_2366 = scope_2363.start_list(true, Some("item"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]
            let mut entry_2367 = list_2366.entry();
            entry_2367.string(item_2365);
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("Filter");
    if let Some(var_2369) = &input.filters {
        let mut list_2371 = scope_2368.start_list(true, Some("Filter"));
        for item_2370 in var_2369 {
            #[allow(unused_mut)]
            let mut entry_2372 = list_2371.entry();
            crate::query_ser::serialize_structure_filter(entry_2372, item_2370);
        }
        list_2371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2373 = writer.prefix("NextToken");
    if let Some(var_2374) = &input.next_token {
        scope_2373.string(var_2374);
    }
    #[allow(unused_mut)]
    let mut scope_2375 = writer.prefix("MaxResults");
    if let Some(var_2376) = &input.max_results {
        scope_2375.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2376).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2377 = writer.prefix("DryRun");
    if let Some(var_2378) = &input.dry_run {
        scope_2377.boolean(*var_2378);
    }
    #[allow(unused_mut)]
    let mut scope_2379 = writer.prefix("LaunchTemplateId");
    if let Some(var_2380) = &input.launch_template_id {
        scope_2379.string(var_2380);
    }
    #[allow(unused_mut)]
    let mut scope_2381 = writer.prefix("LaunchTemplateName");
    if let Some(var_2382) = &input.launch_template_name {
        scope_2381.string(var_2382);
    }
    #[allow(unused_mut)]
    let mut scope_2383 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2384) = &input.versions {
        let mut list_2386 = scope_2383.start_list(true, Some("item"));
        for item_2385 in var_2384 {
            #[allow(unused_mut)]
            let mut entry_2387 = list_2386.entry();
            entry_2387.string(item_2385);
        }
        list_2386.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("MinVersion");
    if let Some(var_2389) = &input.min_version {
        scope_2388.string(var_2389);
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("MaxVersion");
    if let Some(var_2391) = &input.max_version {
        scope_2390.string(var_2391);
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("NextToken");
    if let Some(var_2393) = &input.next_token {
        scope_2392.string(var_2393);
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("MaxResults");
    if let Some(var_2395) = &input.max_results {
        scope_2394.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2395).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("Filter");
    if let Some(var_2397) = &input.filters {
        let mut list_2399 = scope_2396.start_list(true, Some("Filter"));
        for item_2398 in var_2397 {
            #[allow(unused_mut)]
            let mut entry_2400 = list_2399.entry();
            crate::query_ser::serialize_structure_filter(entry_2400, item_2398);
        }
        list_2399.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2402) = &input.local_gateway_route_table_ids {
        let mut list_2404 = scope_2401.start_list(true, Some("item"));
        for item_2403 in var_2402 {
            #[allow(unused_mut)]
            let mut entry_2405 = list_2404.entry();
            entry_2405.string(item_2403);
        }
        list_2404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2406 = writer.prefix("Filter");
    if let Some(var_2407) = &input.filters {
        let mut list_2409 = scope_2406.start_list(true, Some("Filter"));
        for item_2408 in var_2407 {
            #[allow(unused_mut)]
            let mut entry_2410 = list_2409.entry();
            crate::query_ser::serialize_structure_filter(entry_2410, item_2408);
        }
        list_2409.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2411 = writer.prefix("MaxResults");
    if let Some(var_2412) = &input.max_results {
        scope_2411.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2412).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2413 = writer.prefix("NextToken");
    if let Some(var_2414) = &input.next_token {
        scope_2413.string(var_2414);
    }
    #[allow(unused_mut)]
    let mut scope_2415 = writer.prefix("DryRun");
    if let Some(var_2416) = &input.dry_run {
        scope_2415.boolean(*var_2416);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2418) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2420 = scope_2417.start_list(true, Some("item"));
        for item_2419 in var_2418 {
            #[allow(unused_mut)]
            let mut entry_2421 = list_2420.entry();
            entry_2421.string(item_2419);
        }
        list_2420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("Filter");
    if let Some(var_2423) = &input.filters {
        let mut list_2425 = scope_2422.start_list(true, Some("Filter"));
        for item_2424 in var_2423 {
            #[allow(unused_mut)]
            let mut entry_2426 = list_2425.entry();
            crate::query_ser::serialize_structure_filter(entry_2426, item_2424);
        }
        list_2425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2427 = writer.prefix("MaxResults");
    if let Some(var_2428) = &input.max_results {
        scope_2427.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2428).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("NextToken");
    if let Some(var_2430) = &input.next_token {
        scope_2429.string(var_2430);
    }
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("DryRun");
    if let Some(var_2432) = &input.dry_run {
        scope_2431.boolean(*var_2432);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2434) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2436 = scope_2433.start_list(true, Some("item"));
        for item_2435 in var_2434 {
            #[allow(unused_mut)]
            let mut entry_2437 = list_2436.entry();
            entry_2437.string(item_2435);
        }
        list_2436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2438 = writer.prefix("Filter");
    if let Some(var_2439) = &input.filters {
        let mut list_2441 = scope_2438.start_list(true, Some("Filter"));
        for item_2440 in var_2439 {
            #[allow(unused_mut)]
            let mut entry_2442 = list_2441.entry();
            crate::query_ser::serialize_structure_filter(entry_2442, item_2440);
        }
        list_2441.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2443 = writer.prefix("MaxResults");
    if let Some(var_2444) = &input.max_results {
        scope_2443.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2444).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2445 = writer.prefix("NextToken");
    if let Some(var_2446) = &input.next_token {
        scope_2445.string(var_2446);
    }
    #[allow(unused_mut)]
    let mut scope_2447 = writer.prefix("DryRun");
    if let Some(var_2448) = &input.dry_run {
        scope_2447.boolean(*var_2448);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2449 = writer.prefix("LocalGatewayId");
    if let Some(var_2450) = &input.local_gateway_ids {
        let mut list_2452 = scope_2449.start_list(true, Some("item"));
        for item_2451 in var_2450 {
            #[allow(unused_mut)]
            let mut entry_2453 = list_2452.entry();
            entry_2453.string(item_2451);
        }
        list_2452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("Filter");
    if let Some(var_2455) = &input.filters {
        let mut list_2457 = scope_2454.start_list(true, Some("Filter"));
        for item_2456 in var_2455 {
            #[allow(unused_mut)]
            let mut entry_2458 = list_2457.entry();
            crate::query_ser::serialize_structure_filter(entry_2458, item_2456);
        }
        list_2457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("MaxResults");
    if let Some(var_2460) = &input.max_results {
        scope_2459.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("NextToken");
    if let Some(var_2462) = &input.next_token {
        scope_2461.string(var_2462);
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("DryRun");
    if let Some(var_2464) = &input.dry_run {
        scope_2463.boolean(*var_2464);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2466) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2468 = scope_2465.start_list(true, Some("item"));
        for item_2467 in var_2466 {
            #[allow(unused_mut)]
            let mut entry_2469 = list_2468.entry();
            entry_2469.string(item_2467);
        }
        list_2468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("Filter");
    if let Some(var_2471) = &input.filters {
        let mut list_2473 = scope_2470.start_list(true, Some("Filter"));
        for item_2472 in var_2471 {
            #[allow(unused_mut)]
            let mut entry_2474 = list_2473.entry();
            crate::query_ser::serialize_structure_filter(entry_2474, item_2472);
        }
        list_2473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("MaxResults");
    if let Some(var_2476) = &input.max_results {
        scope_2475.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2476).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("NextToken");
    if let Some(var_2478) = &input.next_token {
        scope_2477.string(var_2478);
    }
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("DryRun");
    if let Some(var_2480) = &input.dry_run {
        scope_2479.boolean(*var_2480);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2481 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2482) = &input.local_gateway_virtual_interface_ids {
        let mut list_2484 = scope_2481.start_list(true, Some("item"));
        for item_2483 in var_2482 {
            #[allow(unused_mut)]
            let mut entry_2485 = list_2484.entry();
            entry_2485.string(item_2483);
        }
        list_2484.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2486 = writer.prefix("Filter");
    if let Some(var_2487) = &input.filters {
        let mut list_2489 = scope_2486.start_list(true, Some("Filter"));
        for item_2488 in var_2487 {
            #[allow(unused_mut)]
            let mut entry_2490 = list_2489.entry();
            crate::query_ser::serialize_structure_filter(entry_2490, item_2488);
        }
        list_2489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("MaxResults");
    if let Some(var_2492) = &input.max_results {
        scope_2491.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2492).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2493 = writer.prefix("NextToken");
    if let Some(var_2494) = &input.next_token {
        scope_2493.string(var_2494);
    }
    #[allow(unused_mut)]
    let mut scope_2495 = writer.prefix("DryRun");
    if let Some(var_2496) = &input.dry_run {
        scope_2495.boolean(*var_2496);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2497 = writer.prefix("DryRun");
    if let Some(var_2498) = &input.dry_run {
        scope_2497.boolean(*var_2498);
    }
    #[allow(unused_mut)]
    let mut scope_2499 = writer.prefix("Filter");
    if let Some(var_2500) = &input.filters {
        let mut list_2502 = scope_2499.start_list(true, Some("Filter"));
        for item_2501 in var_2500 {
            #[allow(unused_mut)]
            let mut entry_2503 = list_2502.entry();
            crate::query_ser::serialize_structure_filter(entry_2503, item_2501);
        }
        list_2502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("MaxResults");
    if let Some(var_2505) = &input.max_results {
        scope_2504.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2505).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("NextToken");
    if let Some(var_2507) = &input.next_token {
        scope_2506.string(var_2507);
    }
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("PrefixListId");
    if let Some(var_2509) = &input.prefix_list_ids {
        let mut list_2511 = scope_2508.start_list(true, Some("item"));
        for item_2510 in var_2509 {
            #[allow(unused_mut)]
            let mut entry_2512 = list_2511.entry();
            entry_2512.string(item_2510);
        }
        list_2511.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("Filter");
    if let Some(var_2514) = &input.filters {
        let mut list_2516 = scope_2513.start_list(true, Some("Filter"));
        for item_2515 in var_2514 {
            #[allow(unused_mut)]
            let mut entry_2517 = list_2516.entry();
            crate::query_ser::serialize_structure_filter(entry_2517, item_2515);
        }
        list_2516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2518 = writer.prefix("DryRun");
    if let Some(var_2519) = &input.dry_run {
        scope_2518.boolean(*var_2519);
    }
    #[allow(unused_mut)]
    let mut scope_2520 = writer.prefix("MaxResults");
    if let Some(var_2521) = &input.max_results {
        scope_2520.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2521).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2522 = writer.prefix("NextToken");
    if let Some(var_2523) = &input.next_token {
        scope_2522.string(var_2523);
    }
    #[allow(unused_mut)]
    let mut scope_2524 = writer.prefix("PublicIp");
    if let Some(var_2525) = &input.public_ips {
        let mut list_2527 = scope_2524.start_list(true, Some("item"));
        for item_2526 in var_2525 {
            #[allow(unused_mut)]
            let mut entry_2528 = list_2527.entry();
            entry_2528.string(item_2526);
        }
        list_2527.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2529 = writer.prefix("DryRun");
    if let Some(var_2530) = &input.dry_run {
        scope_2529.boolean(*var_2530);
    }
    #[allow(unused_mut)]
    let mut scope_2531 = writer.prefix("Filter");
    if let Some(var_2532) = &input.filter {
        let mut list_2534 = scope_2531.start_list(true, Some("Filter"));
        for item_2533 in var_2532 {
            #[allow(unused_mut)]
            let mut entry_2535 = list_2534.entry();
            crate::query_ser::serialize_structure_filter(entry_2535, item_2533);
        }
        list_2534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2536 = writer.prefix("MaxResults");
    if let Some(var_2537) = &input.max_results {
        scope_2536.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2537).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("NatGatewayId");
    if let Some(var_2539) = &input.nat_gateway_ids {
        let mut list_2541 = scope_2538.start_list(true, Some("item"));
        for item_2540 in var_2539 {
            #[allow(unused_mut)]
            let mut entry_2542 = list_2541.entry();
            entry_2542.string(item_2540);
        }
        list_2541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2543 = writer.prefix("NextToken");
    if let Some(var_2544) = &input.next_token {
        scope_2543.string(var_2544);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("Filter");
    if let Some(var_2546) = &input.filters {
        let mut list_2548 = scope_2545.start_list(true, Some("Filter"));
        for item_2547 in var_2546 {
            #[allow(unused_mut)]
            let mut entry_2549 = list_2548.entry();
            crate::query_ser::serialize_structure_filter(entry_2549, item_2547);
        }
        list_2548.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("DryRun");
    if let Some(var_2551) = &input.dry_run {
        scope_2550.boolean(*var_2551);
    }
    #[allow(unused_mut)]
    let mut scope_2552 = writer.prefix("NetworkAclId");
    if let Some(var_2553) = &input.network_acl_ids {
        let mut list_2555 = scope_2552.start_list(true, Some("item"));
        for item_2554 in var_2553 {
            #[allow(unused_mut)]
            let mut entry_2556 = list_2555.entry();
            entry_2556.string(item_2554);
        }
        list_2555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2557 = writer.prefix("NextToken");
    if let Some(var_2558) = &input.next_token {
        scope_2557.string(var_2558);
    }
    #[allow(unused_mut)]
    let mut scope_2559 = writer.prefix("MaxResults");
    if let Some(var_2560) = &input.max_results {
        scope_2559.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2560).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2561 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2562) = &input.network_insights_analysis_ids {
        let mut list_2564 = scope_2561.start_list(true, Some("item"));
        for item_2563 in var_2562 {
            #[allow(unused_mut)]
            let mut entry_2565 = list_2564.entry();
            entry_2565.string(item_2563);
        }
        list_2564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2567) = &input.network_insights_path_id {
        scope_2566.string(var_2567);
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("AnalysisStartTime");
    if let Some(var_2569) = &input.analysis_start_time {
        scope_2568.instant(var_2569, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2570 = writer.prefix("AnalysisEndTime");
    if let Some(var_2571) = &input.analysis_end_time {
        scope_2570.instant(var_2571, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2572 = writer.prefix("Filter");
    if let Some(var_2573) = &input.filters {
        let mut list_2575 = scope_2572.start_list(true, Some("Filter"));
        for item_2574 in var_2573 {
            #[allow(unused_mut)]
            let mut entry_2576 = list_2575.entry();
            crate::query_ser::serialize_structure_filter(entry_2576, item_2574);
        }
        list_2575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2577 = writer.prefix("MaxResults");
    if let Some(var_2578) = &input.max_results {
        scope_2577.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("DryRun");
    if let Some(var_2580) = &input.dry_run {
        scope_2579.boolean(*var_2580);
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("NextToken");
    if let Some(var_2582) = &input.next_token {
        scope_2581.string(var_2582);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2584) = &input.network_insights_path_ids {
        let mut list_2586 = scope_2583.start_list(true, Some("item"));
        for item_2585 in var_2584 {
            #[allow(unused_mut)]
            let mut entry_2587 = list_2586.entry();
            entry_2587.string(item_2585);
        }
        list_2586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2588 = writer.prefix("Filter");
    if let Some(var_2589) = &input.filters {
        let mut list_2591 = scope_2588.start_list(true, Some("Filter"));
        for item_2590 in var_2589 {
            #[allow(unused_mut)]
            let mut entry_2592 = list_2591.entry();
            crate::query_ser::serialize_structure_filter(entry_2592, item_2590);
        }
        list_2591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2593 = writer.prefix("MaxResults");
    if let Some(var_2594) = &input.max_results {
        scope_2593.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2594).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2595 = writer.prefix("DryRun");
    if let Some(var_2596) = &input.dry_run {
        scope_2595.boolean(*var_2596);
    }
    #[allow(unused_mut)]
    let mut scope_2597 = writer.prefix("NextToken");
    if let Some(var_2598) = &input.next_token {
        scope_2597.string(var_2598);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("Attribute");
    if let Some(var_2600) = &input.attribute {
        scope_2599.string(var_2600.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("DryRun");
    if let Some(var_2602) = &input.dry_run {
        scope_2601.boolean(*var_2602);
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2604) = &input.network_interface_id {
        scope_2603.string(var_2604);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2606) = &input.network_interface_permission_ids {
        let mut list_2608 = scope_2605.start_list(true, None);
        for item_2607 in var_2606 {
            #[allow(unused_mut)]
            let mut entry_2609 = list_2608.entry();
            entry_2609.string(item_2607);
        }
        list_2608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("Filter");
    if let Some(var_2611) = &input.filters {
        let mut list_2613 = scope_2610.start_list(true, Some("Filter"));
        for item_2612 in var_2611 {
            #[allow(unused_mut)]
            let mut entry_2614 = list_2613.entry();
            crate::query_ser::serialize_structure_filter(entry_2614, item_2612);
        }
        list_2613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2615 = writer.prefix("NextToken");
    if let Some(var_2616) = &input.next_token {
        scope_2615.string(var_2616);
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("MaxResults");
    if let Some(var_2618) = &input.max_results {
        scope_2617.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2618).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("Filter");
    if let Some(var_2620) = &input.filters {
        let mut list_2622 = scope_2619.start_list(true, Some("Filter"));
        for item_2621 in var_2620 {
            #[allow(unused_mut)]
            let mut entry_2623 = list_2622.entry();
            crate::query_ser::serialize_structure_filter(entry_2623, item_2621);
        }
        list_2622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2624 = writer.prefix("DryRun");
    if let Some(var_2625) = &input.dry_run {
        scope_2624.boolean(*var_2625);
    }
    #[allow(unused_mut)]
    let mut scope_2626 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2627) = &input.network_interface_ids {
        let mut list_2629 = scope_2626.start_list(true, Some("item"));
        for item_2628 in var_2627 {
            #[allow(unused_mut)]
            let mut entry_2630 = list_2629.entry();
            entry_2630.string(item_2628);
        }
        list_2629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("NextToken");
    if let Some(var_2632) = &input.next_token {
        scope_2631.string(var_2632);
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("MaxResults");
    if let Some(var_2634) = &input.max_results {
        scope_2633.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2634).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("Filter");
    if let Some(var_2636) = &input.filters {
        let mut list_2638 = scope_2635.start_list(true, Some("Filter"));
        for item_2637 in var_2636 {
            #[allow(unused_mut)]
            let mut entry_2639 = list_2638.entry();
            crate::query_ser::serialize_structure_filter(entry_2639, item_2637);
        }
        list_2638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2640 = writer.prefix("DryRun");
    if let Some(var_2641) = &input.dry_run {
        scope_2640.boolean(*var_2641);
    }
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("GroupName");
    if let Some(var_2643) = &input.group_names {
        let mut list_2645 = scope_2642.start_list(true, None);
        for item_2644 in var_2643 {
            #[allow(unused_mut)]
            let mut entry_2646 = list_2645.entry();
            entry_2646.string(item_2644);
        }
        list_2645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("GroupId");
    if let Some(var_2648) = &input.group_ids {
        let mut list_2650 = scope_2647.start_list(true, Some("GroupId"));
        for item_2649 in var_2648 {
            #[allow(unused_mut)]
            let mut entry_2651 = list_2650.entry();
            entry_2651.string(item_2649);
        }
        list_2650.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2652 = writer.prefix("DryRun");
    if let Some(var_2653) = &input.dry_run {
        scope_2652.boolean(*var_2653);
    }
    #[allow(unused_mut)]
    let mut scope_2654 = writer.prefix("Filter");
    if let Some(var_2655) = &input.filters {
        let mut list_2657 = scope_2654.start_list(true, Some("Filter"));
        for item_2656 in var_2655 {
            #[allow(unused_mut)]
            let mut entry_2658 = list_2657.entry();
            crate::query_ser::serialize_structure_filter(entry_2658, item_2656);
        }
        list_2657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("MaxResults");
    if let Some(var_2660) = &input.max_results {
        scope_2659.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("NextToken");
    if let Some(var_2662) = &input.next_token {
        scope_2661.string(var_2662);
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("PrefixListId");
    if let Some(var_2664) = &input.prefix_list_ids {
        let mut list_2666 = scope_2663.start_list(true, Some("item"));
        for item_2665 in var_2664 {
            #[allow(unused_mut)]
            let mut entry_2667 = list_2666.entry();
            entry_2667.string(item_2665);
        }
        list_2666.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("DryRun");
    if let Some(var_2669) = &input.dry_run {
        scope_2668.boolean(*var_2669);
    }
    #[allow(unused_mut)]
    let mut scope_2670 = writer.prefix("Resource");
    if let Some(var_2671) = &input.resources {
        let mut list_2673 = scope_2670.start_list(true, Some("item"));
        for item_2672 in var_2671 {
            #[allow(unused_mut)]
            let mut entry_2674 = list_2673.entry();
            entry_2674.string(item_2672);
        }
        list_2673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2675 = writer.prefix("MaxResults");
    if let Some(var_2676) = &input.max_results {
        scope_2675.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2676).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2677 = writer.prefix("NextToken");
    if let Some(var_2678) = &input.next_token {
        scope_2677.string(var_2678);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2679 = writer.prefix("PoolId");
    if let Some(var_2680) = &input.pool_ids {
        let mut list_2682 = scope_2679.start_list(true, Some("item"));
        for item_2681 in var_2680 {
            #[allow(unused_mut)]
            let mut entry_2683 = list_2682.entry();
            entry_2683.string(item_2681);
        }
        list_2682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("NextToken");
    if let Some(var_2685) = &input.next_token {
        scope_2684.string(var_2685);
    }
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("MaxResults");
    if let Some(var_2687) = &input.max_results {
        scope_2686.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2687).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("Filter");
    if let Some(var_2689) = &input.filters {
        let mut list_2691 = scope_2688.start_list(true, Some("Filter"));
        for item_2690 in var_2689 {
            #[allow(unused_mut)]
            let mut entry_2692 = list_2691.entry();
            crate::query_ser::serialize_structure_filter(entry_2692, item_2690);
        }
        list_2691.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("Filter");
    if let Some(var_2694) = &input.filters {
        let mut list_2696 = scope_2693.start_list(true, Some("Filter"));
        for item_2695 in var_2694 {
            #[allow(unused_mut)]
            let mut entry_2697 = list_2696.entry();
            crate::query_ser::serialize_structure_filter(entry_2697, item_2695);
        }
        list_2696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("RegionName");
    if let Some(var_2699) = &input.region_names {
        let mut list_2701 = scope_2698.start_list(true, Some("RegionName"));
        for item_2700 in var_2699 {
            #[allow(unused_mut)]
            let mut entry_2702 = list_2701.entry();
            entry_2702.string(item_2700);
        }
        list_2701.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2703 = writer.prefix("DryRun");
    if let Some(var_2704) = &input.dry_run {
        scope_2703.boolean(*var_2704);
    }
    #[allow(unused_mut)]
    let mut scope_2705 = writer.prefix("AllRegions");
    if let Some(var_2706) = &input.all_regions {
        scope_2705.boolean(*var_2706);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2707 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2708) = &input.replace_root_volume_task_ids {
        let mut list_2710 = scope_2707.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2709 in var_2708 {
            #[allow(unused_mut)]
            let mut entry_2711 = list_2710.entry();
            entry_2711.string(item_2709);
        }
        list_2710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2712 = writer.prefix("Filter");
    if let Some(var_2713) = &input.filters {
        let mut list_2715 = scope_2712.start_list(true, Some("Filter"));
        for item_2714 in var_2713 {
            #[allow(unused_mut)]
            let mut entry_2716 = list_2715.entry();
            crate::query_ser::serialize_structure_filter(entry_2716, item_2714);
        }
        list_2715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2717 = writer.prefix("MaxResults");
    if let Some(var_2718) = &input.max_results {
        scope_2717.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2718).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2719 = writer.prefix("NextToken");
    if let Some(var_2720) = &input.next_token {
        scope_2719.string(var_2720);
    }
    #[allow(unused_mut)]
    let mut scope_2721 = writer.prefix("DryRun");
    if let Some(var_2722) = &input.dry_run {
        scope_2721.boolean(*var_2722);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2723 = writer.prefix("Filter");
    if let Some(var_2724) = &input.filters {
        let mut list_2726 = scope_2723.start_list(true, Some("Filter"));
        for item_2725 in var_2724 {
            #[allow(unused_mut)]
            let mut entry_2727 = list_2726.entry();
            crate::query_ser::serialize_structure_filter(entry_2727, item_2725);
        }
        list_2726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2728 = writer.prefix("OfferingClass");
    if let Some(var_2729) = &input.offering_class {
        scope_2728.string(var_2729.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("ReservedInstancesId");
    if let Some(var_2731) = &input.reserved_instances_ids {
        let mut list_2733 = scope_2730.start_list(true, Some("ReservedInstancesId"));
        for item_2732 in var_2731 {
            #[allow(unused_mut)]
            let mut entry_2734 = list_2733.entry();
            entry_2734.string(item_2732);
        }
        list_2733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2735 = writer.prefix("DryRun");
    if let Some(var_2736) = &input.dry_run {
        scope_2735.boolean(*var_2736);
    }
    #[allow(unused_mut)]
    let mut scope_2737 = writer.prefix("OfferingType");
    if let Some(var_2738) = &input.offering_type {
        scope_2737.string(var_2738.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2739 = writer.prefix("Filter");
    if let Some(var_2740) = &input.filters {
        let mut list_2742 = scope_2739.start_list(true, Some("Filter"));
        for item_2741 in var_2740 {
            #[allow(unused_mut)]
            let mut entry_2743 = list_2742.entry();
            crate::query_ser::serialize_structure_filter(entry_2743, item_2741);
        }
        list_2742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("ReservedInstancesId");
    if let Some(var_2745) = &input.reserved_instances_id {
        scope_2744.string(var_2745);
    }
    #[allow(unused_mut)]
    let mut scope_2746 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2747) = &input.reserved_instances_listing_id {
        scope_2746.string(var_2747);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2748 = writer.prefix("Filter");
    if let Some(var_2749) = &input.filters {
        let mut list_2751 = scope_2748.start_list(true, Some("Filter"));
        for item_2750 in var_2749 {
            #[allow(unused_mut)]
            let mut entry_2752 = list_2751.entry();
            crate::query_ser::serialize_structure_filter(entry_2752, item_2750);
        }
        list_2751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2753 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2754) = &input.reserved_instances_modification_ids {
        let mut list_2756 = scope_2753.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2755 in var_2754 {
            #[allow(unused_mut)]
            let mut entry_2757 = list_2756.entry();
            entry_2757.string(item_2755);
        }
        list_2756.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2758 = writer.prefix("NextToken");
    if let Some(var_2759) = &input.next_token {
        scope_2758.string(var_2759);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2760 = writer.prefix("AvailabilityZone");
    if let Some(var_2761) = &input.availability_zone {
        scope_2760.string(var_2761);
    }
    #[allow(unused_mut)]
    let mut scope_2762 = writer.prefix("Filter");
    if let Some(var_2763) = &input.filters {
        let mut list_2765 = scope_2762.start_list(true, Some("Filter"));
        for item_2764 in var_2763 {
            #[allow(unused_mut)]
            let mut entry_2766 = list_2765.entry();
            crate::query_ser::serialize_structure_filter(entry_2766, item_2764);
        }
        list_2765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("IncludeMarketplace");
    if let Some(var_2768) = &input.include_marketplace {
        scope_2767.boolean(*var_2768);
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("InstanceType");
    if let Some(var_2770) = &input.instance_type {
        scope_2769.string(var_2770.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("MaxDuration");
    if let Some(var_2772) = &input.max_duration {
        scope_2771.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2772).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("MaxInstanceCount");
    if let Some(var_2774) = &input.max_instance_count {
        scope_2773.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2774).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2775 = writer.prefix("MinDuration");
    if let Some(var_2776) = &input.min_duration {
        scope_2775.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2776).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2777 = writer.prefix("OfferingClass");
    if let Some(var_2778) = &input.offering_class {
        scope_2777.string(var_2778.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2779 = writer.prefix("ProductDescription");
    if let Some(var_2780) = &input.product_description {
        scope_2779.string(var_2780.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2782) = &input.reserved_instances_offering_ids {
        let mut list_2784 = scope_2781.start_list(true, None);
        for item_2783 in var_2782 {
            #[allow(unused_mut)]
            let mut entry_2785 = list_2784.entry();
            entry_2785.string(item_2783);
        }
        list_2784.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2786 = writer.prefix("DryRun");
    if let Some(var_2787) = &input.dry_run {
        scope_2786.boolean(*var_2787);
    }
    #[allow(unused_mut)]
    let mut scope_2788 = writer.prefix("InstanceTenancy");
    if let Some(var_2789) = &input.instance_tenancy {
        scope_2788.string(var_2789.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2790 = writer.prefix("MaxResults");
    if let Some(var_2791) = &input.max_results {
        scope_2790.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2792 = writer.prefix("NextToken");
    if let Some(var_2793) = &input.next_token {
        scope_2792.string(var_2793);
    }
    #[allow(unused_mut)]
    let mut scope_2794 = writer.prefix("OfferingType");
    if let Some(var_2795) = &input.offering_type {
        scope_2794.string(var_2795.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("Filter");
    if let Some(var_2797) = &input.filters {
        let mut list_2799 = scope_2796.start_list(true, Some("Filter"));
        for item_2798 in var_2797 {
            #[allow(unused_mut)]
            let mut entry_2800 = list_2799.entry();
            crate::query_ser::serialize_structure_filter(entry_2800, item_2798);
        }
        list_2799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2801 = writer.prefix("DryRun");
    if let Some(var_2802) = &input.dry_run {
        scope_2801.boolean(*var_2802);
    }
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("RouteTableId");
    if let Some(var_2804) = &input.route_table_ids {
        let mut list_2806 = scope_2803.start_list(true, Some("item"));
        for item_2805 in var_2804 {
            #[allow(unused_mut)]
            let mut entry_2807 = list_2806.entry();
            entry_2807.string(item_2805);
        }
        list_2806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("NextToken");
    if let Some(var_2809) = &input.next_token {
        scope_2808.string(var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("MaxResults");
    if let Some(var_2811) = &input.max_results {
        scope_2810.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2811).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("DryRun");
    if let Some(var_2813) = &input.dry_run {
        scope_2812.boolean(*var_2813);
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("Filter");
    if let Some(var_2815) = &input.filters {
        let mut list_2817 = scope_2814.start_list(true, Some("Filter"));
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            crate::query_ser::serialize_structure_filter(entry_2818, item_2816);
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2820) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_slot_date_time_range_request(scope_2819, var_2820);
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("MaxResults");
    if let Some(var_2822) = &input.max_results {
        scope_2821.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2822).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2824) = &input.max_slot_duration_in_hours {
        scope_2823.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2826) = &input.min_slot_duration_in_hours {
        scope_2825.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2827 = writer.prefix("NextToken");
    if let Some(var_2828) = &input.next_token {
        scope_2827.string(var_2828);
    }
    #[allow(unused_mut)]
    let mut scope_2829 = writer.prefix("Recurrence");
    if let Some(var_2830) = &input.recurrence {
        crate::query_ser::serialize_structure_scheduled_instance_recurrence_request(
            scope_2829, var_2830,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("DryRun");
    if let Some(var_2832) = &input.dry_run {
        scope_2831.boolean(*var_2832);
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("Filter");
    if let Some(var_2834) = &input.filters {
        let mut list_2836 = scope_2833.start_list(true, Some("Filter"));
        for item_2835 in var_2834 {
            #[allow(unused_mut)]
            let mut entry_2837 = list_2836.entry();
            crate::query_ser::serialize_structure_filter(entry_2837, item_2835);
        }
        list_2836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2838 = writer.prefix("MaxResults");
    if let Some(var_2839) = &input.max_results {
        scope_2838.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2839).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("NextToken");
    if let Some(var_2841) = &input.next_token {
        scope_2840.string(var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("ScheduledInstanceId");
    if let Some(var_2843) = &input.scheduled_instance_ids {
        let mut list_2845 = scope_2842.start_list(true, Some("ScheduledInstanceId"));
        for item_2844 in var_2843 {
            #[allow(unused_mut)]
            let mut entry_2846 = list_2845.entry();
            entry_2846.string(item_2844);
        }
        list_2845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("SlotStartTimeRange");
    if let Some(var_2848) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_slot_start_time_range_request(scope_2847, var_2848);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("DryRun");
    if let Some(var_2850) = &input.dry_run {
        scope_2849.boolean(*var_2850);
    }
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("GroupId");
    if let Some(var_2852) = &input.group_id {
        let mut list_2854 = scope_2851.start_list(true, Some("item"));
        for item_2853 in var_2852 {
            #[allow(unused_mut)]
            let mut entry_2855 = list_2854.entry();
            entry_2855.string(item_2853);
        }
        list_2854.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("Filter");
    if let Some(var_2857) = &input.filters {
        let mut list_2859 = scope_2856.start_list(true, Some("Filter"));
        for item_2858 in var_2857 {
            #[allow(unused_mut)]
            let mut entry_2860 = list_2859.entry();
            crate::query_ser::serialize_structure_filter(entry_2860, item_2858);
        }
        list_2859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2861 = writer.prefix("GroupId");
    if let Some(var_2862) = &input.group_ids {
        let mut list_2864 = scope_2861.start_list(true, Some("groupId"));
        for item_2863 in var_2862 {
            #[allow(unused_mut)]
            let mut entry_2865 = list_2864.entry();
            entry_2865.string(item_2863);
        }
        list_2864.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2866 = writer.prefix("GroupName");
    if let Some(var_2867) = &input.group_names {
        let mut list_2869 = scope_2866.start_list(true, Some("GroupName"));
        for item_2868 in var_2867 {
            #[allow(unused_mut)]
            let mut entry_2870 = list_2869.entry();
            entry_2870.string(item_2868);
        }
        list_2869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2871 = writer.prefix("DryRun");
    if let Some(var_2872) = &input.dry_run {
        scope_2871.boolean(*var_2872);
    }
    #[allow(unused_mut)]
    let mut scope_2873 = writer.prefix("NextToken");
    if let Some(var_2874) = &input.next_token {
        scope_2873.string(var_2874);
    }
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("MaxResults");
    if let Some(var_2876) = &input.max_results {
        scope_2875.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2876).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("Attribute");
    if let Some(var_2878) = &input.attribute {
        scope_2877.string(var_2878.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("SnapshotId");
    if let Some(var_2880) = &input.snapshot_id {
        scope_2879.string(var_2880);
    }
    #[allow(unused_mut)]
    let mut scope_2881 = writer.prefix("DryRun");
    if let Some(var_2882) = &input.dry_run {
        scope_2881.boolean(*var_2882);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2883 = writer.prefix("Filter");
    if let Some(var_2884) = &input.filters {
        let mut list_2886 = scope_2883.start_list(true, Some("Filter"));
        for item_2885 in var_2884 {
            #[allow(unused_mut)]
            let mut entry_2887 = list_2886.entry();
            crate::query_ser::serialize_structure_filter(entry_2887, item_2885);
        }
        list_2886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("MaxResults");
    if let Some(var_2889) = &input.max_results {
        scope_2888.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("NextToken");
    if let Some(var_2891) = &input.next_token {
        scope_2890.string(var_2891);
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("Owner");
    if let Some(var_2893) = &input.owner_ids {
        let mut list_2895 = scope_2892.start_list(true, Some("Owner"));
        for item_2894 in var_2893 {
            #[allow(unused_mut)]
            let mut entry_2896 = list_2895.entry();
            entry_2896.string(item_2894);
        }
        list_2895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2897 = writer.prefix("RestorableBy");
    if let Some(var_2898) = &input.restorable_by_user_ids {
        let mut list_2900 = scope_2897.start_list(true, None);
        for item_2899 in var_2898 {
            #[allow(unused_mut)]
            let mut entry_2901 = list_2900.entry();
            entry_2901.string(item_2899);
        }
        list_2900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2902 = writer.prefix("SnapshotId");
    if let Some(var_2903) = &input.snapshot_ids {
        let mut list_2905 = scope_2902.start_list(true, Some("SnapshotId"));
        for item_2904 in var_2903 {
            #[allow(unused_mut)]
            let mut entry_2906 = list_2905.entry();
            entry_2906.string(item_2904);
        }
        list_2905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("DryRun");
    if let Some(var_2908) = &input.dry_run {
        scope_2907.boolean(*var_2908);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("DryRun");
    if let Some(var_2910) = &input.dry_run {
        scope_2909.boolean(*var_2910);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("DryRun");
    if let Some(var_2912) = &input.dry_run {
        scope_2911.boolean(*var_2912);
    }
    #[allow(unused_mut)]
    let mut scope_2913 = writer.prefix("MaxResults");
    if let Some(var_2914) = &input.max_results {
        scope_2913.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2915 = writer.prefix("NextToken");
    if let Some(var_2916) = &input.next_token {
        scope_2915.string(var_2916);
    }
    #[allow(unused_mut)]
    let mut scope_2917 = writer.prefix("SpotFleetRequestId");
    if let Some(var_2918) = &input.spot_fleet_request_id {
        scope_2917.string(var_2918);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2919 = writer.prefix("DryRun");
    if let Some(var_2920) = &input.dry_run {
        scope_2919.boolean(*var_2920);
    }
    #[allow(unused_mut)]
    let mut scope_2921 = writer.prefix("EventType");
    if let Some(var_2922) = &input.event_type {
        scope_2921.string(var_2922.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2923 = writer.prefix("MaxResults");
    if let Some(var_2924) = &input.max_results {
        scope_2923.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2924).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2925 = writer.prefix("NextToken");
    if let Some(var_2926) = &input.next_token {
        scope_2925.string(var_2926);
    }
    #[allow(unused_mut)]
    let mut scope_2927 = writer.prefix("SpotFleetRequestId");
    if let Some(var_2928) = &input.spot_fleet_request_id {
        scope_2927.string(var_2928);
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("StartTime");
    if let Some(var_2930) = &input.start_time {
        scope_2929.instant(var_2930, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("DryRun");
    if let Some(var_2932) = &input.dry_run {
        scope_2931.boolean(*var_2932);
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("MaxResults");
    if let Some(var_2934) = &input.max_results {
        scope_2933.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2934).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("NextToken");
    if let Some(var_2936) = &input.next_token {
        scope_2935.string(var_2936);
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("SpotFleetRequestId");
    if let Some(var_2938) = &input.spot_fleet_request_ids {
        let mut list_2940 = scope_2937.start_list(true, Some("item"));
        for item_2939 in var_2938 {
            #[allow(unused_mut)]
            let mut entry_2941 = list_2940.entry();
            entry_2941.string(item_2939);
        }
        list_2940.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2942 = writer.prefix("Filter");
    if let Some(var_2943) = &input.filters {
        let mut list_2945 = scope_2942.start_list(true, Some("Filter"));
        for item_2944 in var_2943 {
            #[allow(unused_mut)]
            let mut entry_2946 = list_2945.entry();
            crate::query_ser::serialize_structure_filter(entry_2946, item_2944);
        }
        list_2945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("DryRun");
    if let Some(var_2948) = &input.dry_run {
        scope_2947.boolean(*var_2948);
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_2950) = &input.spot_instance_request_ids {
        let mut list_2952 = scope_2949.start_list(true, Some("SpotInstanceRequestId"));
        for item_2951 in var_2950 {
            #[allow(unused_mut)]
            let mut entry_2953 = list_2952.entry();
            entry_2953.string(item_2951);
        }
        list_2952.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("NextToken");
    if let Some(var_2955) = &input.next_token {
        scope_2954.string(var_2955);
    }
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("MaxResults");
    if let Some(var_2957) = &input.max_results {
        scope_2956.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2957).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("Filter");
    if let Some(var_2959) = &input.filters {
        let mut list_2961 = scope_2958.start_list(true, Some("Filter"));
        for item_2960 in var_2959 {
            #[allow(unused_mut)]
            let mut entry_2962 = list_2961.entry();
            crate::query_ser::serialize_structure_filter(entry_2962, item_2960);
        }
        list_2961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("AvailabilityZone");
    if let Some(var_2964) = &input.availability_zone {
        scope_2963.string(var_2964);
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("DryRun");
    if let Some(var_2966) = &input.dry_run {
        scope_2965.boolean(*var_2966);
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("EndTime");
    if let Some(var_2968) = &input.end_time {
        scope_2967.instant(var_2968, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("InstanceType");
    if let Some(var_2970) = &input.instance_types {
        let mut list_2972 = scope_2969.start_list(true, None);
        for item_2971 in var_2970 {
            #[allow(unused_mut)]
            let mut entry_2973 = list_2972.entry();
            entry_2973.string(item_2971.as_str());
        }
        list_2972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("MaxResults");
    if let Some(var_2975) = &input.max_results {
        scope_2974.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2976 = writer.prefix("NextToken");
    if let Some(var_2977) = &input.next_token {
        scope_2976.string(var_2977);
    }
    #[allow(unused_mut)]
    let mut scope_2978 = writer.prefix("ProductDescription");
    if let Some(var_2979) = &input.product_descriptions {
        let mut list_2981 = scope_2978.start_list(true, None);
        for item_2980 in var_2979 {
            #[allow(unused_mut)]
            let mut entry_2982 = list_2981.entry();
            entry_2982.string(item_2980);
        }
        list_2981.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2983 = writer.prefix("StartTime");
    if let Some(var_2984) = &input.start_time {
        scope_2983.instant(var_2984, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("DryRun");
    if let Some(var_2986) = &input.dry_run {
        scope_2985.boolean(*var_2986);
    }
    #[allow(unused_mut)]
    let mut scope_2987 = writer.prefix("MaxResults");
    if let Some(var_2988) = &input.max_results {
        scope_2987.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2989 = writer.prefix("NextToken");
    if let Some(var_2990) = &input.next_token {
        scope_2989.string(var_2990);
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("VpcId");
    if let Some(var_2992) = &input.vpc_id {
        scope_2991.string(var_2992);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("ImageId");
    if let Some(var_2994) = &input.image_ids {
        let mut list_2996 = scope_2993.start_list(true, Some("item"));
        for item_2995 in var_2994 {
            #[allow(unused_mut)]
            let mut entry_2997 = list_2996.entry();
            entry_2997.string(item_2995);
        }
        list_2996.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2998 = writer.prefix("DryRun");
    if let Some(var_2999) = &input.dry_run {
        scope_2998.boolean(*var_2999);
    }
    #[allow(unused_mut)]
    let mut scope_3000 = writer.prefix("Filter");
    if let Some(var_3001) = &input.filters {
        let mut list_3003 = scope_3000.start_list(true, Some("Filter"));
        for item_3002 in var_3001 {
            #[allow(unused_mut)]
            let mut entry_3004 = list_3003.entry();
            crate::query_ser::serialize_structure_filter(entry_3004, item_3002);
        }
        list_3003.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("NextToken");
    if let Some(var_3006) = &input.next_token {
        scope_3005.string(var_3006);
    }
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("MaxResults");
    if let Some(var_3008) = &input.max_results {
        scope_3007.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3008).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3009 = writer.prefix("Filter");
    if let Some(var_3010) = &input.filters {
        let mut list_3012 = scope_3009.start_list(true, Some("Filter"));
        for item_3011 in var_3010 {
            #[allow(unused_mut)]
            let mut entry_3013 = list_3012.entry();
            crate::query_ser::serialize_structure_filter(entry_3013, item_3011);
        }
        list_3012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("SubnetId");
    if let Some(var_3015) = &input.subnet_ids {
        let mut list_3017 = scope_3014.start_list(true, Some("SubnetId"));
        for item_3016 in var_3015 {
            #[allow(unused_mut)]
            let mut entry_3018 = list_3017.entry();
            entry_3018.string(item_3016);
        }
        list_3017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("DryRun");
    if let Some(var_3020) = &input.dry_run {
        scope_3019.boolean(*var_3020);
    }
    #[allow(unused_mut)]
    let mut scope_3021 = writer.prefix("NextToken");
    if let Some(var_3022) = &input.next_token {
        scope_3021.string(var_3022);
    }
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("MaxResults");
    if let Some(var_3024) = &input.max_results {
        scope_3023.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3024).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("DryRun");
    if let Some(var_3026) = &input.dry_run {
        scope_3025.boolean(*var_3026);
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("Filter");
    if let Some(var_3028) = &input.filters {
        let mut list_3030 = scope_3027.start_list(true, Some("Filter"));
        for item_3029 in var_3028 {
            #[allow(unused_mut)]
            let mut entry_3031 = list_3030.entry();
            crate::query_ser::serialize_structure_filter(entry_3031, item_3029);
        }
        list_3030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3032 = writer.prefix("MaxResults");
    if let Some(var_3033) = &input.max_results {
        scope_3032.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3033).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("NextToken");
    if let Some(var_3035) = &input.next_token {
        scope_3034.string(var_3035);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3036 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3037) = &input.traffic_mirror_filter_ids {
        let mut list_3039 = scope_3036.start_list(true, Some("item"));
        for item_3038 in var_3037 {
            #[allow(unused_mut)]
            let mut entry_3040 = list_3039.entry();
            entry_3040.string(item_3038);
        }
        list_3039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3041 = writer.prefix("DryRun");
    if let Some(var_3042) = &input.dry_run {
        scope_3041.boolean(*var_3042);
    }
    #[allow(unused_mut)]
    let mut scope_3043 = writer.prefix("Filter");
    if let Some(var_3044) = &input.filters {
        let mut list_3046 = scope_3043.start_list(true, Some("Filter"));
        for item_3045 in var_3044 {
            #[allow(unused_mut)]
            let mut entry_3047 = list_3046.entry();
            crate::query_ser::serialize_structure_filter(entry_3047, item_3045);
        }
        list_3046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("MaxResults");
    if let Some(var_3049) = &input.max_results {
        scope_3048.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3049).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NextToken");
    if let Some(var_3051) = &input.next_token {
        scope_3050.string(var_3051);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3052 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3053) = &input.traffic_mirror_session_ids {
        let mut list_3055 = scope_3052.start_list(true, Some("item"));
        for item_3054 in var_3053 {
            #[allow(unused_mut)]
            let mut entry_3056 = list_3055.entry();
            entry_3056.string(item_3054);
        }
        list_3055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("DryRun");
    if let Some(var_3058) = &input.dry_run {
        scope_3057.boolean(*var_3058);
    }
    #[allow(unused_mut)]
    let mut scope_3059 = writer.prefix("Filter");
    if let Some(var_3060) = &input.filters {
        let mut list_3062 = scope_3059.start_list(true, Some("Filter"));
        for item_3061 in var_3060 {
            #[allow(unused_mut)]
            let mut entry_3063 = list_3062.entry();
            crate::query_ser::serialize_structure_filter(entry_3063, item_3061);
        }
        list_3062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("MaxResults");
    if let Some(var_3065) = &input.max_results {
        scope_3064.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3065).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("NextToken");
    if let Some(var_3067) = &input.next_token {
        scope_3066.string(var_3067);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3069) = &input.traffic_mirror_target_ids {
        let mut list_3071 = scope_3068.start_list(true, Some("item"));
        for item_3070 in var_3069 {
            #[allow(unused_mut)]
            let mut entry_3072 = list_3071.entry();
            entry_3072.string(item_3070);
        }
        list_3071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3073 = writer.prefix("DryRun");
    if let Some(var_3074) = &input.dry_run {
        scope_3073.boolean(*var_3074);
    }
    #[allow(unused_mut)]
    let mut scope_3075 = writer.prefix("Filter");
    if let Some(var_3076) = &input.filters {
        let mut list_3078 = scope_3075.start_list(true, Some("Filter"));
        for item_3077 in var_3076 {
            #[allow(unused_mut)]
            let mut entry_3079 = list_3078.entry();
            crate::query_ser::serialize_structure_filter(entry_3079, item_3077);
        }
        list_3078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3080 = writer.prefix("MaxResults");
    if let Some(var_3081) = &input.max_results {
        scope_3080.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3081).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("NextToken");
    if let Some(var_3083) = &input.next_token {
        scope_3082.string(var_3083);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3085) = &input.transit_gateway_attachment_ids {
        let mut list_3087 = scope_3084.start_list(true, None);
        for item_3086 in var_3085 {
            #[allow(unused_mut)]
            let mut entry_3088 = list_3087.entry();
            entry_3088.string(item_3086);
        }
        list_3087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3089 = writer.prefix("Filter");
    if let Some(var_3090) = &input.filters {
        let mut list_3092 = scope_3089.start_list(true, Some("Filter"));
        for item_3091 in var_3090 {
            #[allow(unused_mut)]
            let mut entry_3093 = list_3092.entry();
            crate::query_ser::serialize_structure_filter(entry_3093, item_3091);
        }
        list_3092.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3094 = writer.prefix("MaxResults");
    if let Some(var_3095) = &input.max_results {
        scope_3094.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3095).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3096 = writer.prefix("NextToken");
    if let Some(var_3097) = &input.next_token {
        scope_3096.string(var_3097);
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("DryRun");
    if let Some(var_3099) = &input.dry_run {
        scope_3098.boolean(*var_3099);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3101) = &input.transit_gateway_connect_peer_ids {
        let mut list_3103 = scope_3100.start_list(true, Some("item"));
        for item_3102 in var_3101 {
            #[allow(unused_mut)]
            let mut entry_3104 = list_3103.entry();
            entry_3104.string(item_3102);
        }
        list_3103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("Filter");
    if let Some(var_3106) = &input.filters {
        let mut list_3108 = scope_3105.start_list(true, Some("Filter"));
        for item_3107 in var_3106 {
            #[allow(unused_mut)]
            let mut entry_3109 = list_3108.entry();
            crate::query_ser::serialize_structure_filter(entry_3109, item_3107);
        }
        list_3108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3110 = writer.prefix("MaxResults");
    if let Some(var_3111) = &input.max_results {
        scope_3110.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3112 = writer.prefix("NextToken");
    if let Some(var_3113) = &input.next_token {
        scope_3112.string(var_3113);
    }
    #[allow(unused_mut)]
    let mut scope_3114 = writer.prefix("DryRun");
    if let Some(var_3115) = &input.dry_run {
        scope_3114.boolean(*var_3115);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3116 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3117) = &input.transit_gateway_attachment_ids {
        let mut list_3119 = scope_3116.start_list(true, None);
        for item_3118 in var_3117 {
            #[allow(unused_mut)]
            let mut entry_3120 = list_3119.entry();
            entry_3120.string(item_3118);
        }
        list_3119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("Filter");
    if let Some(var_3122) = &input.filters {
        let mut list_3124 = scope_3121.start_list(true, Some("Filter"));
        for item_3123 in var_3122 {
            #[allow(unused_mut)]
            let mut entry_3125 = list_3124.entry();
            crate::query_ser::serialize_structure_filter(entry_3125, item_3123);
        }
        list_3124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("MaxResults");
    if let Some(var_3127) = &input.max_results {
        scope_3126.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("NextToken");
    if let Some(var_3129) = &input.next_token {
        scope_3128.string(var_3129);
    }
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("DryRun");
    if let Some(var_3131) = &input.dry_run {
        scope_3130.boolean(*var_3131);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3132 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3133) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3135 = scope_3132.start_list(true, Some("item"));
        for item_3134 in var_3133 {
            #[allow(unused_mut)]
            let mut entry_3136 = list_3135.entry();
            entry_3136.string(item_3134);
        }
        list_3135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("Filter");
    if let Some(var_3138) = &input.filters {
        let mut list_3140 = scope_3137.start_list(true, Some("Filter"));
        for item_3139 in var_3138 {
            #[allow(unused_mut)]
            let mut entry_3141 = list_3140.entry();
            crate::query_ser::serialize_structure_filter(entry_3141, item_3139);
        }
        list_3140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("MaxResults");
    if let Some(var_3143) = &input.max_results {
        scope_3142.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("NextToken");
    if let Some(var_3145) = &input.next_token {
        scope_3144.string(var_3145);
    }
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("DryRun");
    if let Some(var_3147) = &input.dry_run {
        scope_3146.boolean(*var_3147);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3148 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3149) = &input.transit_gateway_attachment_ids {
        let mut list_3151 = scope_3148.start_list(true, None);
        for item_3150 in var_3149 {
            #[allow(unused_mut)]
            let mut entry_3152 = list_3151.entry();
            entry_3152.string(item_3150);
        }
        list_3151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("Filter");
    if let Some(var_3154) = &input.filters {
        let mut list_3156 = scope_3153.start_list(true, Some("Filter"));
        for item_3155 in var_3154 {
            #[allow(unused_mut)]
            let mut entry_3157 = list_3156.entry();
            crate::query_ser::serialize_structure_filter(entry_3157, item_3155);
        }
        list_3156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3158 = writer.prefix("MaxResults");
    if let Some(var_3159) = &input.max_results {
        scope_3158.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("NextToken");
    if let Some(var_3161) = &input.next_token {
        scope_3160.string(var_3161);
    }
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("DryRun");
    if let Some(var_3163) = &input.dry_run {
        scope_3162.boolean(*var_3163);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3165) = &input.transit_gateway_route_table_ids {
        let mut list_3167 = scope_3164.start_list(true, Some("item"));
        for item_3166 in var_3165 {
            #[allow(unused_mut)]
            let mut entry_3168 = list_3167.entry();
            entry_3168.string(item_3166);
        }
        list_3167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3169 = writer.prefix("Filter");
    if let Some(var_3170) = &input.filters {
        let mut list_3172 = scope_3169.start_list(true, Some("Filter"));
        for item_3171 in var_3170 {
            #[allow(unused_mut)]
            let mut entry_3173 = list_3172.entry();
            crate::query_ser::serialize_structure_filter(entry_3173, item_3171);
        }
        list_3172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3174 = writer.prefix("MaxResults");
    if let Some(var_3175) = &input.max_results {
        scope_3174.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3175).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3176 = writer.prefix("NextToken");
    if let Some(var_3177) = &input.next_token {
        scope_3176.string(var_3177);
    }
    #[allow(unused_mut)]
    let mut scope_3178 = writer.prefix("DryRun");
    if let Some(var_3179) = &input.dry_run {
        scope_3178.boolean(*var_3179);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3180 = writer.prefix("TransitGatewayIds");
    if let Some(var_3181) = &input.transit_gateway_ids {
        let mut list_3183 = scope_3180.start_list(true, Some("item"));
        for item_3182 in var_3181 {
            #[allow(unused_mut)]
            let mut entry_3184 = list_3183.entry();
            entry_3184.string(item_3182);
        }
        list_3183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3185 = writer.prefix("Filter");
    if let Some(var_3186) = &input.filters {
        let mut list_3188 = scope_3185.start_list(true, Some("Filter"));
        for item_3187 in var_3186 {
            #[allow(unused_mut)]
            let mut entry_3189 = list_3188.entry();
            crate::query_ser::serialize_structure_filter(entry_3189, item_3187);
        }
        list_3188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3190 = writer.prefix("MaxResults");
    if let Some(var_3191) = &input.max_results {
        scope_3190.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3191).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3192 = writer.prefix("NextToken");
    if let Some(var_3193) = &input.next_token {
        scope_3192.string(var_3193);
    }
    #[allow(unused_mut)]
    let mut scope_3194 = writer.prefix("DryRun");
    if let Some(var_3195) = &input.dry_run {
        scope_3194.boolean(*var_3195);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3196 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3197) = &input.transit_gateway_attachment_ids {
        let mut list_3199 = scope_3196.start_list(true, None);
        for item_3198 in var_3197 {
            #[allow(unused_mut)]
            let mut entry_3200 = list_3199.entry();
            entry_3200.string(item_3198);
        }
        list_3199.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3201 = writer.prefix("Filter");
    if let Some(var_3202) = &input.filters {
        let mut list_3204 = scope_3201.start_list(true, Some("Filter"));
        for item_3203 in var_3202 {
            #[allow(unused_mut)]
            let mut entry_3205 = list_3204.entry();
            crate::query_ser::serialize_structure_filter(entry_3205, item_3203);
        }
        list_3204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("MaxResults");
    if let Some(var_3207) = &input.max_results {
        scope_3206.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3207).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3208 = writer.prefix("NextToken");
    if let Some(var_3209) = &input.next_token {
        scope_3208.string(var_3209);
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("DryRun");
    if let Some(var_3211) = &input.dry_run {
        scope_3210.boolean(*var_3211);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("Attribute");
    if let Some(var_3213) = &input.attribute {
        scope_3212.string(var_3213.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3214 = writer.prefix("VolumeId");
    if let Some(var_3215) = &input.volume_id {
        scope_3214.string(var_3215);
    }
    #[allow(unused_mut)]
    let mut scope_3216 = writer.prefix("DryRun");
    if let Some(var_3217) = &input.dry_run {
        scope_3216.boolean(*var_3217);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("Filter");
    if let Some(var_3219) = &input.filters {
        let mut list_3221 = scope_3218.start_list(true, Some("Filter"));
        for item_3220 in var_3219 {
            #[allow(unused_mut)]
            let mut entry_3222 = list_3221.entry();
            crate::query_ser::serialize_structure_filter(entry_3222, item_3220);
        }
        list_3221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3223 = writer.prefix("VolumeId");
    if let Some(var_3224) = &input.volume_ids {
        let mut list_3226 = scope_3223.start_list(true, Some("VolumeId"));
        for item_3225 in var_3224 {
            #[allow(unused_mut)]
            let mut entry_3227 = list_3226.entry();
            entry_3227.string(item_3225);
        }
        list_3226.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3228 = writer.prefix("DryRun");
    if let Some(var_3229) = &input.dry_run {
        scope_3228.boolean(*var_3229);
    }
    #[allow(unused_mut)]
    let mut scope_3230 = writer.prefix("MaxResults");
    if let Some(var_3231) = &input.max_results {
        scope_3230.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("NextToken");
    if let Some(var_3233) = &input.next_token {
        scope_3232.string(var_3233);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("DryRun");
    if let Some(var_3235) = &input.dry_run {
        scope_3234.boolean(*var_3235);
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("VolumeId");
    if let Some(var_3237) = &input.volume_ids {
        let mut list_3239 = scope_3236.start_list(true, Some("VolumeId"));
        for item_3238 in var_3237 {
            #[allow(unused_mut)]
            let mut entry_3240 = list_3239.entry();
            entry_3240.string(item_3238);
        }
        list_3239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3241 = writer.prefix("Filter");
    if let Some(var_3242) = &input.filters {
        let mut list_3244 = scope_3241.start_list(true, Some("Filter"));
        for item_3243 in var_3242 {
            #[allow(unused_mut)]
            let mut entry_3245 = list_3244.entry();
            crate::query_ser::serialize_structure_filter(entry_3245, item_3243);
        }
        list_3244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3246 = writer.prefix("NextToken");
    if let Some(var_3247) = &input.next_token {
        scope_3246.string(var_3247);
    }
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("MaxResults");
    if let Some(var_3249) = &input.max_results {
        scope_3248.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3249).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3250 = writer.prefix("Filter");
    if let Some(var_3251) = &input.filters {
        let mut list_3253 = scope_3250.start_list(true, Some("Filter"));
        for item_3252 in var_3251 {
            #[allow(unused_mut)]
            let mut entry_3254 = list_3253.entry();
            crate::query_ser::serialize_structure_filter(entry_3254, item_3252);
        }
        list_3253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("MaxResults");
    if let Some(var_3256) = &input.max_results {
        scope_3255.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3256).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("NextToken");
    if let Some(var_3258) = &input.next_token {
        scope_3257.string(var_3258);
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("VolumeId");
    if let Some(var_3260) = &input.volume_ids {
        let mut list_3262 = scope_3259.start_list(true, Some("VolumeId"));
        for item_3261 in var_3260 {
            #[allow(unused_mut)]
            let mut entry_3263 = list_3262.entry();
            entry_3263.string(item_3261);
        }
        list_3262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3264 = writer.prefix("DryRun");
    if let Some(var_3265) = &input.dry_run {
        scope_3264.boolean(*var_3265);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("Attribute");
    if let Some(var_3267) = &input.attribute {
        scope_3266.string(var_3267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("VpcId");
    if let Some(var_3269) = &input.vpc_id {
        scope_3268.string(var_3269);
    }
    #[allow(unused_mut)]
    let mut scope_3270 = writer.prefix("DryRun");
    if let Some(var_3271) = &input.dry_run {
        scope_3270.boolean(*var_3271);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3272 = writer.prefix("Filter");
    if let Some(var_3273) = &input.filters {
        let mut list_3275 = scope_3272.start_list(true, Some("Filter"));
        for item_3274 in var_3273 {
            #[allow(unused_mut)]
            let mut entry_3276 = list_3275.entry();
            crate::query_ser::serialize_structure_filter(entry_3276, item_3274);
        }
        list_3275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("DryRun");
    if let Some(var_3278) = &input.dry_run {
        scope_3277.boolean(*var_3278);
    }
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("VpcId");
    if let Some(var_3280) = &input.vpc_ids {
        let mut list_3282 = scope_3279.start_list(true, Some("VpcId"));
        for item_3281 in var_3280 {
            #[allow(unused_mut)]
            let mut entry_3283 = list_3282.entry();
            entry_3283.string(item_3281);
        }
        list_3282.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("MaxResults");
    if let Some(var_3285) = &input.max_results {
        scope_3284.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3285).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("NextToken");
    if let Some(var_3287) = &input.next_token {
        scope_3286.string(var_3287);
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("VpcIds");
    if let Some(var_3289) = &input.vpc_ids {
        let mut list_3291 = scope_3288.start_list(true, Some("VpcId"));
        for item_3290 in var_3289 {
            #[allow(unused_mut)]
            let mut entry_3292 = list_3291.entry();
            entry_3292.string(item_3290);
        }
        list_3291.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3293 = writer.prefix("DryRun");
    if let Some(var_3294) = &input.dry_run {
        scope_3293.boolean(*var_3294);
    }
    #[allow(unused_mut)]
    let mut scope_3295 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3296) = &input.connection_notification_id {
        scope_3295.string(var_3296);
    }
    #[allow(unused_mut)]
    let mut scope_3297 = writer.prefix("Filter");
    if let Some(var_3298) = &input.filters {
        let mut list_3300 = scope_3297.start_list(true, Some("Filter"));
        for item_3299 in var_3298 {
            #[allow(unused_mut)]
            let mut entry_3301 = list_3300.entry();
            crate::query_ser::serialize_structure_filter(entry_3301, item_3299);
        }
        list_3300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3302 = writer.prefix("MaxResults");
    if let Some(var_3303) = &input.max_results {
        scope_3302.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3304 = writer.prefix("NextToken");
    if let Some(var_3305) = &input.next_token {
        scope_3304.string(var_3305);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3306 = writer.prefix("DryRun");
    if let Some(var_3307) = &input.dry_run {
        scope_3306.boolean(*var_3307);
    }
    #[allow(unused_mut)]
    let mut scope_3308 = writer.prefix("Filter");
    if let Some(var_3309) = &input.filters {
        let mut list_3311 = scope_3308.start_list(true, Some("Filter"));
        for item_3310 in var_3309 {
            #[allow(unused_mut)]
            let mut entry_3312 = list_3311.entry();
            crate::query_ser::serialize_structure_filter(entry_3312, item_3310);
        }
        list_3311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("MaxResults");
    if let Some(var_3314) = &input.max_results {
        scope_3313.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3315 = writer.prefix("NextToken");
    if let Some(var_3316) = &input.next_token {
        scope_3315.string(var_3316);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3317 = writer.prefix("DryRun");
    if let Some(var_3318) = &input.dry_run {
        scope_3317.boolean(*var_3318);
    }
    #[allow(unused_mut)]
    let mut scope_3319 = writer.prefix("VpcEndpointId");
    if let Some(var_3320) = &input.vpc_endpoint_ids {
        let mut list_3322 = scope_3319.start_list(true, Some("item"));
        for item_3321 in var_3320 {
            #[allow(unused_mut)]
            let mut entry_3323 = list_3322.entry();
            entry_3323.string(item_3321);
        }
        list_3322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3324 = writer.prefix("Filter");
    if let Some(var_3325) = &input.filters {
        let mut list_3327 = scope_3324.start_list(true, Some("Filter"));
        for item_3326 in var_3325 {
            #[allow(unused_mut)]
            let mut entry_3328 = list_3327.entry();
            crate::query_ser::serialize_structure_filter(entry_3328, item_3326);
        }
        list_3327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3329 = writer.prefix("MaxResults");
    if let Some(var_3330) = &input.max_results {
        scope_3329.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3331 = writer.prefix("NextToken");
    if let Some(var_3332) = &input.next_token {
        scope_3331.string(var_3332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("DryRun");
    if let Some(var_3334) = &input.dry_run {
        scope_3333.boolean(*var_3334);
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("ServiceId");
    if let Some(var_3336) = &input.service_ids {
        let mut list_3338 = scope_3335.start_list(true, Some("item"));
        for item_3337 in var_3336 {
            #[allow(unused_mut)]
            let mut entry_3339 = list_3338.entry();
            entry_3339.string(item_3337);
        }
        list_3338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3340 = writer.prefix("Filter");
    if let Some(var_3341) = &input.filters {
        let mut list_3343 = scope_3340.start_list(true, Some("Filter"));
        for item_3342 in var_3341 {
            #[allow(unused_mut)]
            let mut entry_3344 = list_3343.entry();
            crate::query_ser::serialize_structure_filter(entry_3344, item_3342);
        }
        list_3343.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3345 = writer.prefix("MaxResults");
    if let Some(var_3346) = &input.max_results {
        scope_3345.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("NextToken");
    if let Some(var_3348) = &input.next_token {
        scope_3347.string(var_3348);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3349 = writer.prefix("DryRun");
    if let Some(var_3350) = &input.dry_run {
        scope_3349.boolean(*var_3350);
    }
    #[allow(unused_mut)]
    let mut scope_3351 = writer.prefix("ServiceId");
    if let Some(var_3352) = &input.service_id {
        scope_3351.string(var_3352);
    }
    #[allow(unused_mut)]
    let mut scope_3353 = writer.prefix("Filter");
    if let Some(var_3354) = &input.filters {
        let mut list_3356 = scope_3353.start_list(true, Some("Filter"));
        for item_3355 in var_3354 {
            #[allow(unused_mut)]
            let mut entry_3357 = list_3356.entry();
            crate::query_ser::serialize_structure_filter(entry_3357, item_3355);
        }
        list_3356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("MaxResults");
    if let Some(var_3359) = &input.max_results {
        scope_3358.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("NextToken");
    if let Some(var_3361) = &input.next_token {
        scope_3360.string(var_3361);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("DryRun");
    if let Some(var_3363) = &input.dry_run {
        scope_3362.boolean(*var_3363);
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("ServiceName");
    if let Some(var_3365) = &input.service_names {
        let mut list_3367 = scope_3364.start_list(true, Some("item"));
        for item_3366 in var_3365 {
            #[allow(unused_mut)]
            let mut entry_3368 = list_3367.entry();
            entry_3368.string(item_3366);
        }
        list_3367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3369 = writer.prefix("Filter");
    if let Some(var_3370) = &input.filters {
        let mut list_3372 = scope_3369.start_list(true, Some("Filter"));
        for item_3371 in var_3370 {
            #[allow(unused_mut)]
            let mut entry_3373 = list_3372.entry();
            crate::query_ser::serialize_structure_filter(entry_3373, item_3371);
        }
        list_3372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3374 = writer.prefix("MaxResults");
    if let Some(var_3375) = &input.max_results {
        scope_3374.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3375).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("NextToken");
    if let Some(var_3377) = &input.next_token {
        scope_3376.string(var_3377);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("Filter");
    if let Some(var_3379) = &input.filters {
        let mut list_3381 = scope_3378.start_list(true, Some("Filter"));
        for item_3380 in var_3379 {
            #[allow(unused_mut)]
            let mut entry_3382 = list_3381.entry();
            crate::query_ser::serialize_structure_filter(entry_3382, item_3380);
        }
        list_3381.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3383 = writer.prefix("DryRun");
    if let Some(var_3384) = &input.dry_run {
        scope_3383.boolean(*var_3384);
    }
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3386) = &input.vpc_peering_connection_ids {
        let mut list_3388 = scope_3385.start_list(true, Some("item"));
        for item_3387 in var_3386 {
            #[allow(unused_mut)]
            let mut entry_3389 = list_3388.entry();
            entry_3389.string(item_3387);
        }
        list_3388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("NextToken");
    if let Some(var_3391) = &input.next_token {
        scope_3390.string(var_3391);
    }
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("MaxResults");
    if let Some(var_3393) = &input.max_results {
        scope_3392.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3393).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("Filter");
    if let Some(var_3395) = &input.filters {
        let mut list_3397 = scope_3394.start_list(true, Some("Filter"));
        for item_3396 in var_3395 {
            #[allow(unused_mut)]
            let mut entry_3398 = list_3397.entry();
            crate::query_ser::serialize_structure_filter(entry_3398, item_3396);
        }
        list_3397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("VpcId");
    if let Some(var_3400) = &input.vpc_ids {
        let mut list_3402 = scope_3399.start_list(true, Some("VpcId"));
        for item_3401 in var_3400 {
            #[allow(unused_mut)]
            let mut entry_3403 = list_3402.entry();
            entry_3403.string(item_3401);
        }
        list_3402.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3404 = writer.prefix("DryRun");
    if let Some(var_3405) = &input.dry_run {
        scope_3404.boolean(*var_3405);
    }
    #[allow(unused_mut)]
    let mut scope_3406 = writer.prefix("NextToken");
    if let Some(var_3407) = &input.next_token {
        scope_3406.string(var_3407);
    }
    #[allow(unused_mut)]
    let mut scope_3408 = writer.prefix("MaxResults");
    if let Some(var_3409) = &input.max_results {
        scope_3408.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3409).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3410 = writer.prefix("Filter");
    if let Some(var_3411) = &input.filters {
        let mut list_3413 = scope_3410.start_list(true, Some("Filter"));
        for item_3412 in var_3411 {
            #[allow(unused_mut)]
            let mut entry_3414 = list_3413.entry();
            crate::query_ser::serialize_structure_filter(entry_3414, item_3412);
        }
        list_3413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("VpnConnectionId");
    if let Some(var_3416) = &input.vpn_connection_ids {
        let mut list_3418 = scope_3415.start_list(true, Some("VpnConnectionId"));
        for item_3417 in var_3416 {
            #[allow(unused_mut)]
            let mut entry_3419 = list_3418.entry();
            entry_3419.string(item_3417);
        }
        list_3418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("DryRun");
    if let Some(var_3421) = &input.dry_run {
        scope_3420.boolean(*var_3421);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3422 = writer.prefix("Filter");
    if let Some(var_3423) = &input.filters {
        let mut list_3425 = scope_3422.start_list(true, Some("Filter"));
        for item_3424 in var_3423 {
            #[allow(unused_mut)]
            let mut entry_3426 = list_3425.entry();
            crate::query_ser::serialize_structure_filter(entry_3426, item_3424);
        }
        list_3425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("VpnGatewayId");
    if let Some(var_3428) = &input.vpn_gateway_ids {
        let mut list_3430 = scope_3427.start_list(true, Some("VpnGatewayId"));
        for item_3429 in var_3428 {
            #[allow(unused_mut)]
            let mut entry_3431 = list_3430.entry();
            entry_3431.string(item_3429);
        }
        list_3430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("DryRun");
    if let Some(var_3433) = &input.dry_run {
        scope_3432.boolean(*var_3433);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("DryRun");
    if let Some(var_3435) = &input.dry_run {
        scope_3434.boolean(*var_3435);
    }
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("InstanceId");
    if let Some(var_3437) = &input.instance_id {
        scope_3436.string(var_3437);
    }
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("VpcId");
    if let Some(var_3439) = &input.vpc_id {
        scope_3438.string(var_3439);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("DryRun");
    if let Some(var_3441) = &input.dry_run {
        scope_3440.boolean(*var_3441);
    }
    #[allow(unused_mut)]
    let mut scope_3442 = writer.prefix("InternetGatewayId");
    if let Some(var_3443) = &input.internet_gateway_id {
        scope_3442.string(var_3443);
    }
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("VpcId");
    if let Some(var_3445) = &input.vpc_id {
        scope_3444.string(var_3445);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3446 = writer.prefix("AttachmentId");
    if let Some(var_3447) = &input.attachment_id {
        scope_3446.string(var_3447);
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("DryRun");
    if let Some(var_3449) = &input.dry_run {
        scope_3448.boolean(*var_3449);
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("Force");
    if let Some(var_3451) = &input.force {
        scope_3450.boolean(*var_3451);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3452 = writer.prefix("Device");
    if let Some(var_3453) = &input.device {
        scope_3452.string(var_3453);
    }
    #[allow(unused_mut)]
    let mut scope_3454 = writer.prefix("Force");
    if let Some(var_3455) = &input.force {
        scope_3454.boolean(*var_3455);
    }
    #[allow(unused_mut)]
    let mut scope_3456 = writer.prefix("InstanceId");
    if let Some(var_3457) = &input.instance_id {
        scope_3456.string(var_3457);
    }
    #[allow(unused_mut)]
    let mut scope_3458 = writer.prefix("VolumeId");
    if let Some(var_3459) = &input.volume_id {
        scope_3458.string(var_3459);
    }
    #[allow(unused_mut)]
    let mut scope_3460 = writer.prefix("DryRun");
    if let Some(var_3461) = &input.dry_run {
        scope_3460.boolean(*var_3461);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3462 = writer.prefix("VpcId");
    if let Some(var_3463) = &input.vpc_id {
        scope_3462.string(var_3463);
    }
    #[allow(unused_mut)]
    let mut scope_3464 = writer.prefix("VpnGatewayId");
    if let Some(var_3465) = &input.vpn_gateway_id {
        scope_3464.string(var_3465);
    }
    #[allow(unused_mut)]
    let mut scope_3466 = writer.prefix("DryRun");
    if let Some(var_3467) = &input.dry_run {
        scope_3466.boolean(*var_3467);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("DryRun");
    if let Some(var_3469) = &input.dry_run {
        scope_3468.boolean(*var_3469);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("AvailabilityZone");
    if let Some(var_3471) = &input.availability_zones {
        let mut list_3473 = scope_3470.start_list(true, Some("AvailabilityZone"));
        for item_3472 in var_3471 {
            #[allow(unused_mut)]
            let mut entry_3474 = list_3473.entry();
            entry_3474.string(item_3472);
        }
        list_3473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3475 = writer.prefix("SourceSnapshotId");
    if let Some(var_3476) = &input.source_snapshot_ids {
        let mut list_3478 = scope_3475.start_list(true, Some("SnapshotId"));
        for item_3477 in var_3476 {
            #[allow(unused_mut)]
            let mut entry_3479 = list_3478.entry();
            entry_3479.string(item_3477);
        }
        list_3478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3480 = writer.prefix("DryRun");
    if let Some(var_3481) = &input.dry_run {
        scope_3480.boolean(*var_3481);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3482 = writer.prefix("DryRun");
    if let Some(var_3483) = &input.dry_run {
        scope_3482.boolean(*var_3483);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3484 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3485) = &input.transit_gateway_route_table_id {
        scope_3484.string(var_3485);
    }
    #[allow(unused_mut)]
    let mut scope_3486 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3487) = &input.transit_gateway_attachment_id {
        scope_3486.string(var_3487);
    }
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("DryRun");
    if let Some(var_3489) = &input.dry_run {
        scope_3488.boolean(*var_3489);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("GatewayId");
    if let Some(var_3491) = &input.gateway_id {
        scope_3490.string(var_3491);
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("RouteTableId");
    if let Some(var_3493) = &input.route_table_id {
        scope_3492.string(var_3493);
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("DryRun");
    if let Some(var_3495) = &input.dry_run {
        scope_3494.boolean(*var_3495);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3496 = writer.prefix("DryRun");
    if let Some(var_3497) = &input.dry_run {
        scope_3496.boolean(*var_3497);
    }
    #[allow(unused_mut)]
    let mut scope_3498 = writer.prefix("VpcId");
    if let Some(var_3499) = &input.vpc_id {
        scope_3498.string(var_3499);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3500 = writer.prefix("VpcId");
    if let Some(var_3501) = &input.vpc_id {
        scope_3500.string(var_3501);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3502 = writer.prefix("AssociationId");
    if let Some(var_3503) = &input.association_id {
        scope_3502.string(var_3503);
    }
    #[allow(unused_mut)]
    let mut scope_3504 = writer.prefix("PublicIp");
    if let Some(var_3505) = &input.public_ip {
        scope_3504.string(var_3505);
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("DryRun");
    if let Some(var_3507) = &input.dry_run {
        scope_3506.boolean(*var_3507);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3509) = &input.client_vpn_endpoint_id {
        scope_3508.string(var_3509);
    }
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("AssociationId");
    if let Some(var_3511) = &input.association_id {
        scope_3510.string(var_3511);
    }
    #[allow(unused_mut)]
    let mut scope_3512 = writer.prefix("DryRun");
    if let Some(var_3513) = &input.dry_run {
        scope_3512.boolean(*var_3513);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3514 = writer.prefix("CertificateArn");
    if let Some(var_3515) = &input.certificate_arn {
        scope_3514.string(var_3515);
    }
    #[allow(unused_mut)]
    let mut scope_3516 = writer.prefix("RoleArn");
    if let Some(var_3517) = &input.role_arn {
        scope_3516.string(var_3517);
    }
    #[allow(unused_mut)]
    let mut scope_3518 = writer.prefix("DryRun");
    if let Some(var_3519) = &input.dry_run {
        scope_3518.boolean(*var_3519);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3520 = writer.prefix("AssociationId");
    if let Some(var_3521) = &input.association_id {
        scope_3520.string(var_3521);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3522 = writer.prefix("AssociationId");
    if let Some(var_3523) = &input.association_id {
        scope_3522.string(var_3523);
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("DryRun");
    if let Some(var_3525) = &input.dry_run {
        scope_3524.boolean(*var_3525);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("AssociationId");
    if let Some(var_3527) = &input.association_id {
        scope_3526.string(var_3527);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3529) = &input.transit_gateway_multicast_domain_id {
        scope_3528.string(var_3529);
    }
    #[allow(unused_mut)]
    let mut scope_3530 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3531) = &input.transit_gateway_attachment_id {
        scope_3530.string(var_3531);
    }
    #[allow(unused_mut)]
    let mut scope_3532 = writer.prefix("SubnetIds");
    if let Some(var_3533) = &input.subnet_ids {
        let mut list_3535 = scope_3532.start_list(true, Some("item"));
        for item_3534 in var_3533 {
            #[allow(unused_mut)]
            let mut entry_3536 = list_3535.entry();
            entry_3536.string(item_3534);
        }
        list_3535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("DryRun");
    if let Some(var_3538) = &input.dry_run {
        scope_3537.boolean(*var_3538);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3540) = &input.transit_gateway_route_table_id {
        scope_3539.string(var_3540);
    }
    #[allow(unused_mut)]
    let mut scope_3541 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3542) = &input.transit_gateway_attachment_id {
        scope_3541.string(var_3542);
    }
    #[allow(unused_mut)]
    let mut scope_3543 = writer.prefix("DryRun");
    if let Some(var_3544) = &input.dry_run {
        scope_3543.boolean(*var_3544);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("AssociationId");
    if let Some(var_3546) = &input.association_id {
        scope_3545.string(var_3546);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("DryRun");
    if let Some(var_3548) = &input.dry_run {
        scope_3547.boolean(*var_3548);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("AvailabilityZone");
    if let Some(var_3550) = &input.availability_zones {
        let mut list_3552 = scope_3549.start_list(true, Some("AvailabilityZone"));
        for item_3551 in var_3550 {
            #[allow(unused_mut)]
            let mut entry_3553 = list_3552.entry();
            entry_3553.string(item_3551);
        }
        list_3552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3554 = writer.prefix("SourceSnapshotId");
    if let Some(var_3555) = &input.source_snapshot_ids {
        let mut list_3557 = scope_3554.start_list(true, Some("SnapshotId"));
        for item_3556 in var_3555 {
            #[allow(unused_mut)]
            let mut entry_3558 = list_3557.entry();
            entry_3558.string(item_3556);
        }
        list_3557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3559 = writer.prefix("DryRun");
    if let Some(var_3560) = &input.dry_run {
        scope_3559.boolean(*var_3560);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("DryRun");
    if let Some(var_3562) = &input.dry_run {
        scope_3561.boolean(*var_3562);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3563 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3564) = &input.transit_gateway_route_table_id {
        scope_3563.string(var_3564);
    }
    #[allow(unused_mut)]
    let mut scope_3565 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3566) = &input.transit_gateway_attachment_id {
        scope_3565.string(var_3566);
    }
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("DryRun");
    if let Some(var_3568) = &input.dry_run {
        scope_3567.boolean(*var_3568);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("GatewayId");
    if let Some(var_3570) = &input.gateway_id {
        scope_3569.string(var_3570);
    }
    #[allow(unused_mut)]
    let mut scope_3571 = writer.prefix("RouteTableId");
    if let Some(var_3572) = &input.route_table_id {
        scope_3571.string(var_3572);
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("DryRun");
    if let Some(var_3574) = &input.dry_run {
        scope_3573.boolean(*var_3574);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIOInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3575 = writer.prefix("DryRun");
    if let Some(var_3576) = &input.dry_run {
        scope_3575.boolean(*var_3576);
    }
    #[allow(unused_mut)]
    let mut scope_3577 = writer.prefix("VolumeId");
    if let Some(var_3578) = &input.volume_id {
        scope_3577.string(var_3578);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3579 = writer.prefix("DryRun");
    if let Some(var_3580) = &input.dry_run {
        scope_3579.boolean(*var_3580);
    }
    #[allow(unused_mut)]
    let mut scope_3581 = writer.prefix("VpcId");
    if let Some(var_3582) = &input.vpc_id {
        scope_3581.string(var_3582);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("VpcId");
    if let Some(var_3584) = &input.vpc_id {
        scope_3583.string(var_3584);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3585 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3586) = &input.client_vpn_endpoint_id {
        scope_3585.string(var_3586);
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("DryRun");
    if let Some(var_3588) = &input.dry_run {
        scope_3587.boolean(*var_3588);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3590) = &input.client_vpn_endpoint_id {
        scope_3589.string(var_3590);
    }
    #[allow(unused_mut)]
    let mut scope_3591 = writer.prefix("DryRun");
    if let Some(var_3592) = &input.dry_run {
        scope_3591.boolean(*var_3592);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3593 = writer.prefix("ClientToken");
    if let Some(var_3594) = &input.client_token {
        scope_3593.string(var_3594);
    }
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("Description");
    if let Some(var_3596) = &input.description {
        scope_3595.string(var_3596);
    }
    #[allow(unused_mut)]
    let mut scope_3597 = writer.prefix("DiskImageFormat");
    if let Some(var_3598) = &input.disk_image_format {
        scope_3597.string(var_3598.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("DryRun");
    if let Some(var_3600) = &input.dry_run {
        scope_3599.boolean(*var_3600);
    }
    #[allow(unused_mut)]
    let mut scope_3601 = writer.prefix("ImageId");
    if let Some(var_3602) = &input.image_id {
        scope_3601.string(var_3602);
    }
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("S3ExportLocation");
    if let Some(var_3604) = &input.s3_export_location {
        crate::query_ser::serialize_structure_export_task_s3_location_request(scope_3603, var_3604);
    }
    #[allow(unused_mut)]
    let mut scope_3605 = writer.prefix("RoleName");
    if let Some(var_3606) = &input.role_name {
        scope_3605.string(var_3606);
    }
    #[allow(unused_mut)]
    let mut scope_3607 = writer.prefix("TagSpecification");
    if let Some(var_3608) = &input.tag_specifications {
        let mut list_3610 = scope_3607.start_list(true, Some("item"));
        for item_3609 in var_3608 {
            #[allow(unused_mut)]
            let mut entry_3611 = list_3610.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_3611, item_3609);
        }
        list_3610.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3613) = &input.transit_gateway_route_table_id {
        scope_3612.string(var_3613);
    }
    #[allow(unused_mut)]
    let mut scope_3614 = writer.prefix("Filter");
    if let Some(var_3615) = &input.filters {
        let mut list_3617 = scope_3614.start_list(true, Some("Filter"));
        for item_3616 in var_3615 {
            #[allow(unused_mut)]
            let mut entry_3618 = list_3617.entry();
            crate::query_ser::serialize_structure_filter(entry_3618, item_3616);
        }
        list_3617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("S3Bucket");
    if let Some(var_3620) = &input.s3_bucket {
        scope_3619.string(var_3620);
    }
    #[allow(unused_mut)]
    let mut scope_3621 = writer.prefix("DryRun");
    if let Some(var_3622) = &input.dry_run {
        scope_3621.boolean(*var_3622);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3623 = writer.prefix("CertificateArn");
    if let Some(var_3624) = &input.certificate_arn {
        scope_3623.string(var_3624);
    }
    #[allow(unused_mut)]
    let mut scope_3625 = writer.prefix("DryRun");
    if let Some(var_3626) = &input.dry_run {
        scope_3625.boolean(*var_3626);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("PoolId");
    if let Some(var_3628) = &input.pool_id {
        scope_3627.string(var_3628);
    }
    #[allow(unused_mut)]
    let mut scope_3629 = writer.prefix("NextToken");
    if let Some(var_3630) = &input.next_token {
        scope_3629.string(var_3630);
    }
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("MaxResults");
    if let Some(var_3632) = &input.max_results {
        scope_3631.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3632).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3633 = writer.prefix("DryRun");
    if let Some(var_3634) = &input.dry_run {
        scope_3633.boolean(*var_3634);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3635 = writer.prefix("CapacityReservationId");
    if let Some(var_3636) = &input.capacity_reservation_id {
        scope_3635.string(var_3636);
    }
    #[allow(unused_mut)]
    let mut scope_3637 = writer.prefix("NextToken");
    if let Some(var_3638) = &input.next_token {
        scope_3637.string(var_3638);
    }
    #[allow(unused_mut)]
    let mut scope_3639 = writer.prefix("MaxResults");
    if let Some(var_3640) = &input.max_results {
        scope_3639.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("DryRun");
    if let Some(var_3642) = &input.dry_run {
        scope_3641.boolean(*var_3642);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("PoolId");
    if let Some(var_3644) = &input.pool_id {
        scope_3643.string(var_3644);
    }
    #[allow(unused_mut)]
    let mut scope_3645 = writer.prefix("Filter");
    if let Some(var_3646) = &input.filters {
        let mut list_3648 = scope_3645.start_list(true, Some("Filter"));
        for item_3647 in var_3646 {
            #[allow(unused_mut)]
            let mut entry_3649 = list_3648.entry();
            crate::query_ser::serialize_structure_filter(entry_3649, item_3647);
        }
        list_3648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("MaxResults");
    if let Some(var_3651) = &input.max_results {
        scope_3650.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3651).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("NextToken");
    if let Some(var_3653) = &input.next_token {
        scope_3652.string(var_3653);
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("DryRun");
    if let Some(var_3655) = &input.dry_run {
        scope_3654.boolean(*var_3655);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("InstanceId");
    if let Some(var_3657) = &input.instance_id {
        scope_3656.string(var_3657);
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("DryRun");
    if let Some(var_3659) = &input.dry_run {
        scope_3658.boolean(*var_3659);
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("Latest");
    if let Some(var_3661) = &input.latest {
        scope_3660.boolean(*var_3661);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("DryRun");
    if let Some(var_3663) = &input.dry_run {
        scope_3662.boolean(*var_3663);
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("InstanceId");
    if let Some(var_3665) = &input.instance_id {
        scope_3664.string(var_3665);
    }
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("WakeUp");
    if let Some(var_3667) = &input.wake_up {
        scope_3666.boolean(*var_3667);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("DryRun");
    if let Some(var_3669) = &input.dry_run {
        scope_3668.boolean(*var_3669);
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("InstanceFamily");
    if let Some(var_3671) = &input.instance_family {
        scope_3670.string(var_3671.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("DryRun");
    if let Some(var_3673) = &input.dry_run {
        scope_3672.boolean(*var_3673);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("DryRun");
    if let Some(var_3675) = &input.dry_run {
        scope_3674.boolean(*var_3675);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3676 = writer.prefix("DryRun");
    if let Some(var_3677) = &input.dry_run {
        scope_3676.boolean(*var_3677);
    }
    #[allow(unused_mut)]
    let mut scope_3678 = writer.prefix("FlowLogId");
    if let Some(var_3679) = &input.flow_log_id {
        scope_3678.string(var_3679);
    }
    #[allow(unused_mut)]
    let mut scope_3680 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3681) = &input.config_delivery_s3_destination_arn {
        scope_3680.string(var_3681);
    }
    #[allow(unused_mut)]
    let mut scope_3682 = writer.prefix("IntegrateService");
    if let Some(var_3683) = &input.integrate_services {
        crate::query_ser::serialize_structure_integrate_services(scope_3682, var_3683);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("CapacityReservationId");
    if let Some(var_3685) = &input.capacity_reservation_id {
        scope_3684.string(var_3685);
    }
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("NextToken");
    if let Some(var_3687) = &input.next_token {
        scope_3686.string(var_3687);
    }
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("MaxResults");
    if let Some(var_3689) = &input.max_results {
        scope_3688.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3689).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("DryRun");
    if let Some(var_3691) = &input.dry_run {
        scope_3690.boolean(*var_3691);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("HostIdSet");
    if let Some(var_3693) = &input.host_id_set {
        let mut list_3695 = scope_3692.start_list(true, Some("item"));
        for item_3694 in var_3693 {
            #[allow(unused_mut)]
            let mut entry_3696 = list_3695.entry();
            entry_3696.string(item_3694);
        }
        list_3695.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3697 = writer.prefix("OfferingId");
    if let Some(var_3698) = &input.offering_id {
        scope_3697.string(var_3698);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3699 = writer.prefix("DryRun");
    if let Some(var_3700) = &input.dry_run {
        scope_3699.boolean(*var_3700);
    }
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("InstanceId");
    if let Some(var_3702) = &input.instance_id {
        scope_3701.string(var_3702);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("DryRun");
    if let Some(var_3704) = &input.dry_run {
        scope_3703.boolean(*var_3704);
    }
    #[allow(unused_mut)]
    let mut scope_3705 = writer.prefix("PrefixListId");
    if let Some(var_3706) = &input.prefix_list_id {
        scope_3705.string(var_3706);
    }
    #[allow(unused_mut)]
    let mut scope_3707 = writer.prefix("MaxResults");
    if let Some(var_3708) = &input.max_results {
        scope_3707.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3708).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3709 = writer.prefix("NextToken");
    if let Some(var_3710) = &input.next_token {
        scope_3709.string(var_3710);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3711 = writer.prefix("DryRun");
    if let Some(var_3712) = &input.dry_run {
        scope_3711.boolean(*var_3712);
    }
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("PrefixListId");
    if let Some(var_3714) = &input.prefix_list_id {
        scope_3713.string(var_3714);
    }
    #[allow(unused_mut)]
    let mut scope_3715 = writer.prefix("TargetVersion");
    if let Some(var_3716) = &input.target_version {
        scope_3715.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3716).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3717 = writer.prefix("MaxResults");
    if let Some(var_3718) = &input.max_results {
        scope_3717.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3718).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3719 = writer.prefix("NextToken");
    if let Some(var_3720) = &input.next_token {
        scope_3719.string(var_3720);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3721 = writer.prefix("InstanceId");
    if let Some(var_3722) = &input.instance_id {
        scope_3721.string(var_3722);
    }
    #[allow(unused_mut)]
    let mut scope_3723 = writer.prefix("DryRun");
    if let Some(var_3724) = &input.dry_run {
        scope_3723.boolean(*var_3724);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3725 = writer.prefix("DryRun");
    if let Some(var_3726) = &input.dry_run {
        scope_3725.boolean(*var_3726);
    }
    #[allow(unused_mut)]
    let mut scope_3727 = writer.prefix("ReservedInstanceId");
    if let Some(var_3728) = &input.reserved_instance_ids {
        let mut list_3730 = scope_3727.start_list(true, Some("ReservedInstanceId"));
        for item_3729 in var_3728 {
            #[allow(unused_mut)]
            let mut entry_3731 = list_3730.entry();
            entry_3731.string(item_3729);
        }
        list_3730.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("TargetConfiguration");
    if let Some(var_3733) = &input.target_configurations {
        let mut list_3735 = scope_3732.start_list(true, Some("TargetConfigurationRequest"));
        for item_3734 in var_3733 {
            #[allow(unused_mut)]
            let mut entry_3736 = list_3735.entry();
            crate::query_ser::serialize_structure_target_configuration_request(
                entry_3736, item_3734,
            );
        }
        list_3735.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3737 = writer.prefix("DryRun");
    if let Some(var_3738) = &input.dry_run {
        scope_3737.boolean(*var_3738);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3739 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3740) = &input.transit_gateway_attachment_id {
        scope_3739.string(var_3740);
    }
    #[allow(unused_mut)]
    let mut scope_3741 = writer.prefix("Filter");
    if let Some(var_3742) = &input.filters {
        let mut list_3744 = scope_3741.start_list(true, Some("Filter"));
        for item_3743 in var_3742 {
            #[allow(unused_mut)]
            let mut entry_3745 = list_3744.entry();
            crate::query_ser::serialize_structure_filter(entry_3745, item_3743);
        }
        list_3744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("MaxResults");
    if let Some(var_3747) = &input.max_results {
        scope_3746.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3748 = writer.prefix("NextToken");
    if let Some(var_3749) = &input.next_token {
        scope_3748.string(var_3749);
    }
    #[allow(unused_mut)]
    let mut scope_3750 = writer.prefix("DryRun");
    if let Some(var_3751) = &input.dry_run {
        scope_3750.boolean(*var_3751);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3752 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3753) = &input.transit_gateway_multicast_domain_id {
        scope_3752.string(var_3753);
    }
    #[allow(unused_mut)]
    let mut scope_3754 = writer.prefix("Filter");
    if let Some(var_3755) = &input.filters {
        let mut list_3757 = scope_3754.start_list(true, Some("Filter"));
        for item_3756 in var_3755 {
            #[allow(unused_mut)]
            let mut entry_3758 = list_3757.entry();
            crate::query_ser::serialize_structure_filter(entry_3758, item_3756);
        }
        list_3757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("MaxResults");
    if let Some(var_3760) = &input.max_results {
        scope_3759.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3760).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("NextToken");
    if let Some(var_3762) = &input.next_token {
        scope_3761.string(var_3762);
    }
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("DryRun");
    if let Some(var_3764) = &input.dry_run {
        scope_3763.boolean(*var_3764);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3766) = &input.transit_gateway_route_table_id {
        scope_3765.string(var_3766);
    }
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("Filter");
    if let Some(var_3768) = &input.filters {
        let mut list_3770 = scope_3767.start_list(true, Some("Filter"));
        for item_3769 in var_3768 {
            #[allow(unused_mut)]
            let mut entry_3771 = list_3770.entry();
            crate::query_ser::serialize_structure_filter(entry_3771, item_3769);
        }
        list_3770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3772 = writer.prefix("MaxResults");
    if let Some(var_3773) = &input.max_results {
        scope_3772.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3773).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("NextToken");
    if let Some(var_3775) = &input.next_token {
        scope_3774.string(var_3775);
    }
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("DryRun");
    if let Some(var_3777) = &input.dry_run {
        scope_3776.boolean(*var_3777);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3779) = &input.transit_gateway_route_table_id {
        scope_3778.string(var_3779);
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("Filter");
    if let Some(var_3781) = &input.filters {
        let mut list_3783 = scope_3780.start_list(true, Some("Filter"));
        for item_3782 in var_3781 {
            #[allow(unused_mut)]
            let mut entry_3784 = list_3783.entry();
            crate::query_ser::serialize_structure_filter(entry_3784, item_3782);
        }
        list_3783.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("MaxResults");
    if let Some(var_3786) = &input.max_results {
        scope_3785.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3786).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("NextToken");
    if let Some(var_3788) = &input.next_token {
        scope_3787.string(var_3788);
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("DryRun");
    if let Some(var_3790) = &input.dry_run {
        scope_3789.boolean(*var_3790);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3792) = &input.transit_gateway_route_table_id {
        scope_3791.string(var_3792);
    }
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("Filter");
    if let Some(var_3794) = &input.filters {
        let mut list_3796 = scope_3793.start_list(true, Some("Filter"));
        for item_3795 in var_3794 {
            #[allow(unused_mut)]
            let mut entry_3797 = list_3796.entry();
            crate::query_ser::serialize_structure_filter(entry_3797, item_3795);
        }
        list_3796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("MaxResults");
    if let Some(var_3799) = &input.max_results {
        scope_3798.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3799).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3800 = writer.prefix("NextToken");
    if let Some(var_3801) = &input.next_token {
        scope_3800.string(var_3801);
    }
    #[allow(unused_mut)]
    let mut scope_3802 = writer.prefix("DryRun");
    if let Some(var_3803) = &input.dry_run {
        scope_3802.boolean(*var_3803);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3804 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3805) = &input.client_vpn_endpoint_id {
        scope_3804.string(var_3805);
    }
    #[allow(unused_mut)]
    let mut scope_3806 = writer.prefix("CertificateRevocationList");
    if let Some(var_3807) = &input.certificate_revocation_list {
        scope_3806.string(var_3807);
    }
    #[allow(unused_mut)]
    let mut scope_3808 = writer.prefix("DryRun");
    if let Some(var_3809) = &input.dry_run {
        scope_3808.boolean(*var_3809);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3810 = writer.prefix("Architecture");
    if let Some(var_3811) = &input.architecture {
        scope_3810.string(var_3811);
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("ClientData");
    if let Some(var_3813) = &input.client_data {
        crate::query_ser::serialize_structure_client_data(scope_3812, var_3813);
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("ClientToken");
    if let Some(var_3815) = &input.client_token {
        scope_3814.string(var_3815);
    }
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("Description");
    if let Some(var_3817) = &input.description {
        scope_3816.string(var_3817);
    }
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("DiskContainer");
    if let Some(var_3819) = &input.disk_containers {
        let mut list_3821 = scope_3818.start_list(true, Some("item"));
        for item_3820 in var_3819 {
            #[allow(unused_mut)]
            let mut entry_3822 = list_3821.entry();
            crate::query_ser::serialize_structure_image_disk_container(entry_3822, item_3820);
        }
        list_3821.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("DryRun");
    if let Some(var_3824) = &input.dry_run {
        scope_3823.boolean(*var_3824);
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("Encrypted");
    if let Some(var_3826) = &input.encrypted {
        scope_3825.boolean(*var_3826);
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("Hypervisor");
    if let Some(var_3828) = &input.hypervisor {
        scope_3827.string(var_3828);
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("KmsKeyId");
    if let Some(var_3830) = &input.kms_key_id {
        scope_3829.string(var_3830);
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("LicenseType");
    if let Some(var_3832) = &input.license_type {
        scope_3831.string(var_3832);
    }
    #[allow(unused_mut)]
    let mut scope_3833 = writer.prefix("Platform");
    if let Some(var_3834) = &input.platform {
        scope_3833.string(var_3834);
    }
    #[allow(unused_mut)]
    let mut scope_3835 = writer.prefix("RoleName");
    if let Some(var_3836) = &input.role_name {
        scope_3835.string(var_3836);
    }
    #[allow(unused_mut)]
    let mut scope_3837 = writer.prefix("LicenseSpecifications");
    if let Some(var_3838) = &input.license_specifications {
        let mut list_3840 = scope_3837.start_list(true, Some("item"));
        for item_3839 in var_3838 {
            #[allow(unused_mut)]
            let mut entry_3841 = list_3840.entry();
            crate::query_ser::serialize_structure_import_image_license_configuration_request(
                entry_3841, item_3839,
            );
        }
        list_3840.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3842 = writer.prefix("TagSpecification");
    if let Some(var_3843) = &input.tag_specifications {
        let mut list_3845 = scope_3842.start_list(true, Some("item"));
        for item_3844 in var_3843 {
            #[allow(unused_mut)]
            let mut entry_3846 = list_3845.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_3846, item_3844);
        }
        list_3845.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("Description");
    if let Some(var_3848) = &input.description {
        scope_3847.string(var_3848);
    }
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("DiskImage");
    if let Some(var_3850) = &input.disk_images {
        let mut list_3852 = scope_3849.start_list(true, None);
        for item_3851 in var_3850 {
            #[allow(unused_mut)]
            let mut entry_3853 = list_3852.entry();
            crate::query_ser::serialize_structure_disk_image(entry_3853, item_3851);
        }
        list_3852.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3854 = writer.prefix("DryRun");
    if let Some(var_3855) = &input.dry_run {
        scope_3854.boolean(*var_3855);
    }
    #[allow(unused_mut)]
    let mut scope_3856 = writer.prefix("LaunchSpecification");
    if let Some(var_3857) = &input.launch_specification {
        crate::query_ser::serialize_structure_import_instance_launch_specification(
            scope_3856, var_3857,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3858 = writer.prefix("Platform");
    if let Some(var_3859) = &input.platform {
        scope_3858.string(var_3859.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3860 = writer.prefix("DryRun");
    if let Some(var_3861) = &input.dry_run {
        scope_3860.boolean(*var_3861);
    }
    #[allow(unused_mut)]
    let mut scope_3862 = writer.prefix("KeyName");
    if let Some(var_3863) = &input.key_name {
        scope_3862.string(var_3863);
    }
    #[allow(unused_mut)]
    let mut scope_3864 = writer.prefix("PublicKeyMaterial");
    if let Some(var_3865) = &input.public_key_material {
        scope_3864.string(&smithy_types::base64::encode(var_3865));
    }
    #[allow(unused_mut)]
    let mut scope_3866 = writer.prefix("TagSpecification");
    if let Some(var_3867) = &input.tag_specifications {
        let mut list_3869 = scope_3866.start_list(true, Some("item"));
        for item_3868 in var_3867 {
            #[allow(unused_mut)]
            let mut entry_3870 = list_3869.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_3870, item_3868);
        }
        list_3869.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("ClientData");
    if let Some(var_3872) = &input.client_data {
        crate::query_ser::serialize_structure_client_data(scope_3871, var_3872);
    }
    #[allow(unused_mut)]
    let mut scope_3873 = writer.prefix("ClientToken");
    if let Some(var_3874) = &input.client_token {
        scope_3873.string(var_3874);
    }
    #[allow(unused_mut)]
    let mut scope_3875 = writer.prefix("Description");
    if let Some(var_3876) = &input.description {
        scope_3875.string(var_3876);
    }
    #[allow(unused_mut)]
    let mut scope_3877 = writer.prefix("DiskContainer");
    if let Some(var_3878) = &input.disk_container {
        crate::query_ser::serialize_structure_snapshot_disk_container(scope_3877, var_3878);
    }
    #[allow(unused_mut)]
    let mut scope_3879 = writer.prefix("DryRun");
    if let Some(var_3880) = &input.dry_run {
        scope_3879.boolean(*var_3880);
    }
    #[allow(unused_mut)]
    let mut scope_3881 = writer.prefix("Encrypted");
    if let Some(var_3882) = &input.encrypted {
        scope_3881.boolean(*var_3882);
    }
    #[allow(unused_mut)]
    let mut scope_3883 = writer.prefix("KmsKeyId");
    if let Some(var_3884) = &input.kms_key_id {
        scope_3883.string(var_3884);
    }
    #[allow(unused_mut)]
    let mut scope_3885 = writer.prefix("RoleName");
    if let Some(var_3886) = &input.role_name {
        scope_3885.string(var_3886);
    }
    #[allow(unused_mut)]
    let mut scope_3887 = writer.prefix("TagSpecification");
    if let Some(var_3888) = &input.tag_specifications {
        let mut list_3890 = scope_3887.start_list(true, Some("item"));
        for item_3889 in var_3888 {
            #[allow(unused_mut)]
            let mut entry_3891 = list_3890.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_3891, item_3889);
        }
        list_3890.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("AvailabilityZone");
    if let Some(var_3893) = &input.availability_zone {
        scope_3892.string(var_3893);
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("Description");
    if let Some(var_3895) = &input.description {
        scope_3894.string(var_3895);
    }
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("DryRun");
    if let Some(var_3897) = &input.dry_run {
        scope_3896.boolean(*var_3897);
    }
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("Image");
    if let Some(var_3899) = &input.image {
        crate::query_ser::serialize_structure_disk_image_detail(scope_3898, var_3899);
    }
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("Volume");
    if let Some(var_3901) = &input.volume {
        crate::query_ser::serialize_structure_volume_detail(scope_3900, var_3901);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("AllocationId");
    if let Some(var_3903) = &input.allocation_id {
        scope_3902.string(var_3903);
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("DomainName");
    if let Some(var_3905) = &input.domain_name {
        scope_3904.string(var_3905);
    }
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("DryRun");
    if let Some(var_3907) = &input.dry_run {
        scope_3906.boolean(*var_3907);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3908 = writer.prefix("GroupName");
    if let Some(var_3909) = &input.group_name {
        scope_3908.string(var_3909);
    }
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("OptInStatus");
    if let Some(var_3911) = &input.opt_in_status {
        scope_3910.string(var_3911.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("DryRun");
    if let Some(var_3913) = &input.dry_run {
        scope_3912.boolean(*var_3913);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("CapacityReservationId");
    if let Some(var_3915) = &input.capacity_reservation_id {
        scope_3914.string(var_3915);
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("InstanceCount");
    if let Some(var_3917) = &input.instance_count {
        scope_3916.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3917).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("EndDate");
    if let Some(var_3919) = &input.end_date {
        scope_3918.instant(var_3919, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_3920 = writer.prefix("EndDateType");
    if let Some(var_3921) = &input.end_date_type {
        scope_3920.string(var_3921.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3922 = writer.prefix("Accept");
    if let Some(var_3923) = &input.accept {
        scope_3922.boolean(*var_3923);
    }
    #[allow(unused_mut)]
    let mut scope_3924 = writer.prefix("DryRun");
    if let Some(var_3925) = &input.dry_run {
        scope_3924.boolean(*var_3925);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3926 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3927) = &input.client_vpn_endpoint_id {
        scope_3926.string(var_3927);
    }
    #[allow(unused_mut)]
    let mut scope_3928 = writer.prefix("ServerCertificateArn");
    if let Some(var_3929) = &input.server_certificate_arn {
        scope_3928.string(var_3929);
    }
    #[allow(unused_mut)]
    let mut scope_3930 = writer.prefix("ConnectionLogOptions");
    if let Some(var_3931) = &input.connection_log_options {
        crate::query_ser::serialize_structure_connection_log_options(scope_3930, var_3931);
    }
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("DnsServers");
    if let Some(var_3933) = &input.dns_servers {
        crate::query_ser::serialize_structure_dns_servers_options_modify_structure(
            scope_3932, var_3933,
        );
    }
    #[allow(unused_mut)]
    let mut scope_3934 = writer.prefix("VpnPort");
    if let Some(var_3935) = &input.vpn_port {
        scope_3934.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_3935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3936 = writer.prefix("Description");
    if let Some(var_3937) = &input.description {
        scope_3936.string(var_3937);
    }
    #[allow(unused_mut)]
    let mut scope_3938 = writer.prefix("SplitTunnel");
    if let Some(var_3939) = &input.split_tunnel {
        scope_3938.boolean(*var_3939);
    }
    #[allow(unused_mut)]
    let mut scope_3940 = writer.prefix("DryRun");
    if let Some(var_3941) = &input.dry_run {
        scope_3940.boolean(*var_3941);
    }
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("SecurityGroupId");
    if let Some(var_3943) = &input.security_group_ids {
        let mut list_3945 = scope_3942.start_list(true, Some("item"));
        for item_3944 in var_3943 {
            #[allow(unused_mut)]
            let mut entry_3946 = list_3945.entry();
            entry_3946.string(item_3944);
        }
        list_3945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("VpcId");
    if let Some(var_3948) = &input.vpc_id {
        scope_3947.string(var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("SelfServicePortal");
    if let Some(var_3950) = &input.self_service_portal {
        scope_3949.string(var_3950.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("ClientConnectOptions");
    if let Some(var_3952) = &input.client_connect_options {
        crate::query_ser::serialize_structure_client_connect_options(scope_3951, var_3952);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("DryRun");
    if let Some(var_3954) = &input.dry_run {
        scope_3953.boolean(*var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("InstanceFamily");
    if let Some(var_3956) = &input.instance_family {
        scope_3955.string(var_3956.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("CpuCredits");
    if let Some(var_3958) = &input.cpu_credits {
        scope_3957.string(var_3958);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("KmsKeyId");
    if let Some(var_3960) = &input.kms_key_id {
        scope_3959.string(var_3960);
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("DryRun");
    if let Some(var_3962) = &input.dry_run {
        scope_3961.boolean(*var_3962);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("DryRun");
    if let Some(var_3964) = &input.dry_run {
        scope_3963.boolean(*var_3964);
    }
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_3966) = &input.excess_capacity_termination_policy {
        scope_3965.string(var_3966.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_3968) = &input.launch_template_configs {
        let mut list_3970 = scope_3967.start_list(true, Some("item"));
        for item_3969 in var_3968 {
            #[allow(unused_mut)]
            let mut entry_3971 = list_3970.entry();
            crate::query_ser::serialize_structure_fleet_launch_template_config_request(
                entry_3971, item_3969,
            );
        }
        list_3970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("FleetId");
    if let Some(var_3973) = &input.fleet_id {
        scope_3972.string(var_3973);
    }
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_3975) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_target_capacity_specification_request(
            scope_3974, var_3975,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("DryRun");
    if let Some(var_3977) = &input.dry_run {
        scope_3976.boolean(*var_3977);
    }
    #[allow(unused_mut)]
    let mut scope_3978 = writer.prefix("FpgaImageId");
    if let Some(var_3979) = &input.fpga_image_id {
        scope_3978.string(var_3979);
    }
    #[allow(unused_mut)]
    let mut scope_3980 = writer.prefix("Attribute");
    if let Some(var_3981) = &input.attribute {
        scope_3980.string(var_3981.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3982 = writer.prefix("OperationType");
    if let Some(var_3983) = &input.operation_type {
        scope_3982.string(var_3983.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("UserId");
    if let Some(var_3985) = &input.user_ids {
        let mut list_3987 = scope_3984.start_list(true, Some("UserId"));
        for item_3986 in var_3985 {
            #[allow(unused_mut)]
            let mut entry_3988 = list_3987.entry();
            entry_3988.string(item_3986);
        }
        list_3987.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("UserGroup");
    if let Some(var_3990) = &input.user_groups {
        let mut list_3992 = scope_3989.start_list(true, Some("UserGroup"));
        for item_3991 in var_3990 {
            #[allow(unused_mut)]
            let mut entry_3993 = list_3992.entry();
            entry_3993.string(item_3991);
        }
        list_3992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("ProductCode");
    if let Some(var_3995) = &input.product_codes {
        let mut list_3997 = scope_3994.start_list(true, Some("ProductCode"));
        for item_3996 in var_3995 {
            #[allow(unused_mut)]
            let mut entry_3998 = list_3997.entry();
            entry_3998.string(item_3996);
        }
        list_3997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("LoadPermission");
    if let Some(var_4000) = &input.load_permission {
        crate::query_ser::serialize_structure_load_permission_modifications(scope_3999, var_4000);
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("Description");
    if let Some(var_4002) = &input.description {
        scope_4001.string(var_4002);
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("Name");
    if let Some(var_4004) = &input.name {
        scope_4003.string(var_4004);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("AutoPlacement");
    if let Some(var_4006) = &input.auto_placement {
        scope_4005.string(var_4006.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("HostId");
    if let Some(var_4008) = &input.host_ids {
        let mut list_4010 = scope_4007.start_list(true, Some("item"));
        for item_4009 in var_4008 {
            #[allow(unused_mut)]
            let mut entry_4011 = list_4010.entry();
            entry_4011.string(item_4009);
        }
        list_4010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("HostRecovery");
    if let Some(var_4013) = &input.host_recovery {
        scope_4012.string(var_4013.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("InstanceType");
    if let Some(var_4015) = &input.instance_type {
        scope_4014.string(var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("InstanceFamily");
    if let Some(var_4017) = &input.instance_family {
        scope_4016.string(var_4017);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("PrincipalArn");
    if let Some(var_4019) = &input.principal_arn {
        scope_4018.string(var_4019);
    }
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("Resource");
    if let Some(var_4021) = &input.resource {
        scope_4020.string(var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("UseLongIds");
    if let Some(var_4023) = &input.use_long_ids {
        scope_4022.boolean(*var_4023);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("Resource");
    if let Some(var_4025) = &input.resource {
        scope_4024.string(var_4025);
    }
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("UseLongIds");
    if let Some(var_4027) = &input.use_long_ids {
        scope_4026.boolean(*var_4027);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("Attribute");
    if let Some(var_4029) = &input.attribute {
        scope_4028.string(var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("Description");
    if let Some(var_4031) = &input.description {
        crate::query_ser::serialize_structure_attribute_value(scope_4030, var_4031);
    }
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("ImageId");
    if let Some(var_4033) = &input.image_id {
        scope_4032.string(var_4033);
    }
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("LaunchPermission");
    if let Some(var_4035) = &input.launch_permission {
        crate::query_ser::serialize_structure_launch_permission_modifications(scope_4034, var_4035);
    }
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("OperationType");
    if let Some(var_4037) = &input.operation_type {
        scope_4036.string(var_4037.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("ProductCode");
    if let Some(var_4039) = &input.product_codes {
        let mut list_4041 = scope_4038.start_list(true, Some("ProductCode"));
        for item_4040 in var_4039 {
            #[allow(unused_mut)]
            let mut entry_4042 = list_4041.entry();
            entry_4042.string(item_4040);
        }
        list_4041.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4043 = writer.prefix("UserGroup");
    if let Some(var_4044) = &input.user_groups {
        let mut list_4046 = scope_4043.start_list(true, Some("UserGroup"));
        for item_4045 in var_4044 {
            #[allow(unused_mut)]
            let mut entry_4047 = list_4046.entry();
            entry_4047.string(item_4045);
        }
        list_4046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("UserId");
    if let Some(var_4049) = &input.user_ids {
        let mut list_4051 = scope_4048.start_list(true, Some("UserId"));
        for item_4050 in var_4049 {
            #[allow(unused_mut)]
            let mut entry_4052 = list_4051.entry();
            entry_4052.string(item_4050);
        }
        list_4051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4053 = writer.prefix("Value");
    if let Some(var_4054) = &input.value {
        scope_4053.string(var_4054);
    }
    #[allow(unused_mut)]
    let mut scope_4055 = writer.prefix("DryRun");
    if let Some(var_4056) = &input.dry_run {
        scope_4055.boolean(*var_4056);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4057 = writer.prefix("SourceDestCheck");
    if let Some(var_4058) = &input.source_dest_check {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4057, var_4058);
    }
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("Attribute");
    if let Some(var_4060) = &input.attribute {
        scope_4059.string(var_4060.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4062) = &input.block_device_mappings {
        let mut list_4064 = scope_4061.start_list(true, Some("item"));
        for item_4063 in var_4062 {
            #[allow(unused_mut)]
            let mut entry_4065 = list_4064.entry();
            crate::query_ser::serialize_structure_instance_block_device_mapping_specification(
                entry_4065, item_4063,
            );
        }
        list_4064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("DisableApiTermination");
    if let Some(var_4067) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4066, var_4067);
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("DryRun");
    if let Some(var_4069) = &input.dry_run {
        scope_4068.boolean(*var_4069);
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("EbsOptimized");
    if let Some(var_4071) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4070, var_4071);
    }
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("EnaSupport");
    if let Some(var_4073) = &input.ena_support {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4072, var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("GroupId");
    if let Some(var_4075) = &input.groups {
        let mut list_4077 = scope_4074.start_list(true, Some("groupId"));
        for item_4076 in var_4075 {
            #[allow(unused_mut)]
            let mut entry_4078 = list_4077.entry();
            entry_4078.string(item_4076);
        }
        list_4077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("InstanceId");
    if let Some(var_4080) = &input.instance_id {
        scope_4079.string(var_4080);
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4082) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_attribute_value(scope_4081, var_4082);
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("InstanceType");
    if let Some(var_4084) = &input.instance_type {
        crate::query_ser::serialize_structure_attribute_value(scope_4083, var_4084);
    }
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("Kernel");
    if let Some(var_4086) = &input.kernel {
        crate::query_ser::serialize_structure_attribute_value(scope_4085, var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("Ramdisk");
    if let Some(var_4088) = &input.ramdisk {
        crate::query_ser::serialize_structure_attribute_value(scope_4087, var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("SriovNetSupport");
    if let Some(var_4090) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_attribute_value(scope_4089, var_4090);
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("UserData");
    if let Some(var_4092) = &input.user_data {
        crate::query_ser::serialize_structure_blob_attribute_value(scope_4091, var_4092);
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("Value");
    if let Some(var_4094) = &input.value {
        scope_4093.string(var_4094);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("InstanceId");
    if let Some(var_4096) = &input.instance_id {
        scope_4095.string(var_4096);
    }
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4098) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_capacity_reservation_specification(
            scope_4097, var_4098,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("DryRun");
    if let Some(var_4100) = &input.dry_run {
        scope_4099.boolean(*var_4100);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4101 = writer.prefix("DryRun");
    if let Some(var_4102) = &input.dry_run {
        scope_4101.boolean(*var_4102);
    }
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("ClientToken");
    if let Some(var_4104) = &input.client_token {
        scope_4103.string(var_4104);
    }
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4106) = &input.instance_credit_specifications {
        let mut list_4108 = scope_4105.start_list(true, Some("item"));
        for item_4107 in var_4106 {
            #[allow(unused_mut)]
            let mut entry_4109 = list_4108.entry();
            crate::query_ser::serialize_structure_instance_credit_specification_request(
                entry_4109, item_4107,
            );
        }
        list_4108.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4110 = writer.prefix("DryRun");
    if let Some(var_4111) = &input.dry_run {
        scope_4110.boolean(*var_4111);
    }
    #[allow(unused_mut)]
    let mut scope_4112 = writer.prefix("InstanceId");
    if let Some(var_4113) = &input.instance_id {
        scope_4112.string(var_4113);
    }
    #[allow(unused_mut)]
    let mut scope_4114 = writer.prefix("InstanceEventId");
    if let Some(var_4115) = &input.instance_event_id {
        scope_4114.string(var_4115);
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("NotBefore");
    if let Some(var_4117) = &input.not_before {
        scope_4116.instant(var_4117, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("InstanceId");
    if let Some(var_4119) = &input.instance_id {
        scope_4118.string(var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("HttpTokens");
    if let Some(var_4121) = &input.http_tokens {
        scope_4120.string(var_4121.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4123) = &input.http_put_response_hop_limit {
        scope_4122.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("HttpEndpoint");
    if let Some(var_4125) = &input.http_endpoint {
        scope_4124.string(var_4125.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("DryRun");
    if let Some(var_4127) = &input.dry_run {
        scope_4126.boolean(*var_4127);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("Affinity");
    if let Some(var_4129) = &input.affinity {
        scope_4128.string(var_4129.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("GroupName");
    if let Some(var_4131) = &input.group_name {
        scope_4130.string(var_4131);
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("HostId");
    if let Some(var_4133) = &input.host_id {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("InstanceId");
    if let Some(var_4135) = &input.instance_id {
        scope_4134.string(var_4135);
    }
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("Tenancy");
    if let Some(var_4137) = &input.tenancy {
        scope_4136.string(var_4137.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("PartitionNumber");
    if let Some(var_4139) = &input.partition_number {
        scope_4138.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4141) = &input.host_resource_group_arn {
        scope_4140.string(var_4141);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("DryRun");
    if let Some(var_4143) = &input.dry_run {
        scope_4142.boolean(*var_4143);
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("ClientToken");
    if let Some(var_4145) = &input.client_token {
        scope_4144.string(var_4145);
    }
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("LaunchTemplateId");
    if let Some(var_4147) = &input.launch_template_id {
        scope_4146.string(var_4147);
    }
    #[allow(unused_mut)]
    let mut scope_4148 = writer.prefix("LaunchTemplateName");
    if let Some(var_4149) = &input.launch_template_name {
        scope_4148.string(var_4149);
    }
    #[allow(unused_mut)]
    let mut scope_4150 = writer.prefix("SetDefaultVersion");
    if let Some(var_4151) = &input.default_version {
        scope_4150.string(var_4151);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4152 = writer.prefix("DryRun");
    if let Some(var_4153) = &input.dry_run {
        scope_4152.boolean(*var_4153);
    }
    #[allow(unused_mut)]
    let mut scope_4154 = writer.prefix("PrefixListId");
    if let Some(var_4155) = &input.prefix_list_id {
        scope_4154.string(var_4155);
    }
    #[allow(unused_mut)]
    let mut scope_4156 = writer.prefix("CurrentVersion");
    if let Some(var_4157) = &input.current_version {
        scope_4156.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4157).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4158 = writer.prefix("PrefixListName");
    if let Some(var_4159) = &input.prefix_list_name {
        scope_4158.string(var_4159);
    }
    #[allow(unused_mut)]
    let mut scope_4160 = writer.prefix("AddEntry");
    if let Some(var_4161) = &input.add_entries {
        let mut list_4163 = scope_4160.start_list(true, None);
        for item_4162 in var_4161 {
            #[allow(unused_mut)]
            let mut entry_4164 = list_4163.entry();
            crate::query_ser::serialize_structure_add_prefix_list_entry(entry_4164, item_4162);
        }
        list_4163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("RemoveEntry");
    if let Some(var_4166) = &input.remove_entries {
        let mut list_4168 = scope_4165.start_list(true, None);
        for item_4167 in var_4166 {
            #[allow(unused_mut)]
            let mut entry_4169 = list_4168.entry();
            crate::query_ser::serialize_structure_remove_prefix_list_entry(entry_4169, item_4167);
        }
        list_4168.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("Attachment");
    if let Some(var_4171) = &input.attachment {
        crate::query_ser::serialize_structure_network_interface_attachment_changes(
            scope_4170, var_4171,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("Description");
    if let Some(var_4173) = &input.description {
        crate::query_ser::serialize_structure_attribute_value(scope_4172, var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("DryRun");
    if let Some(var_4175) = &input.dry_run {
        scope_4174.boolean(*var_4175);
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("SecurityGroupId");
    if let Some(var_4177) = &input.groups {
        let mut list_4179 = scope_4176.start_list(true, Some("SecurityGroupId"));
        for item_4178 in var_4177 {
            #[allow(unused_mut)]
            let mut entry_4180 = list_4179.entry();
            entry_4180.string(item_4178);
        }
        list_4179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4182) = &input.network_interface_id {
        scope_4181.string(var_4182);
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("SourceDestCheck");
    if let Some(var_4184) = &input.source_dest_check {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4183, var_4184);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("ReservedInstancesId");
    if let Some(var_4186) = &input.reserved_instances_ids {
        let mut list_4188 = scope_4185.start_list(true, Some("ReservedInstancesId"));
        for item_4187 in var_4186 {
            #[allow(unused_mut)]
            let mut entry_4189 = list_4188.entry();
            entry_4189.string(item_4187);
        }
        list_4188.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4190 = writer.prefix("ClientToken");
    if let Some(var_4191) = &input.client_token {
        scope_4190.string(var_4191);
    }
    #[allow(unused_mut)]
    let mut scope_4192 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4193) = &input.target_configurations {
        let mut list_4195 = scope_4192.start_list(true, Some("item"));
        for item_4194 in var_4193 {
            #[allow(unused_mut)]
            let mut entry_4196 = list_4195.entry();
            crate::query_ser::serialize_structure_reserved_instances_configuration(
                entry_4196, item_4194,
            );
        }
        list_4195.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Attribute");
    if let Some(var_4198) = &input.attribute {
        scope_4197.string(var_4198.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("CreateVolumePermission");
    if let Some(var_4200) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_create_volume_permission_modifications(
            scope_4199, var_4200,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("UserGroup");
    if let Some(var_4202) = &input.group_names {
        let mut list_4204 = scope_4201.start_list(true, Some("GroupName"));
        for item_4203 in var_4202 {
            #[allow(unused_mut)]
            let mut entry_4205 = list_4204.entry();
            entry_4205.string(item_4203);
        }
        list_4204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4206 = writer.prefix("OperationType");
    if let Some(var_4207) = &input.operation_type {
        scope_4206.string(var_4207.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("SnapshotId");
    if let Some(var_4209) = &input.snapshot_id {
        scope_4208.string(var_4209);
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("UserId");
    if let Some(var_4211) = &input.user_ids {
        let mut list_4213 = scope_4210.start_list(true, Some("UserId"));
        for item_4212 in var_4211 {
            #[allow(unused_mut)]
            let mut entry_4214 = list_4213.entry();
            entry_4214.string(item_4212);
        }
        list_4213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("DryRun");
    if let Some(var_4216) = &input.dry_run {
        scope_4215.boolean(*var_4216);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4218) = &input.excess_capacity_termination_policy {
        scope_4217.string(var_4218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4220) = &input.launch_template_configs {
        let mut list_4222 = scope_4219.start_list(true, Some("item"));
        for item_4221 in var_4220 {
            #[allow(unused_mut)]
            let mut entry_4223 = list_4222.entry();
            crate::query_ser::serialize_structure_launch_template_config(entry_4223, item_4221);
        }
        list_4222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4225) = &input.spot_fleet_request_id {
        scope_4224.string(var_4225);
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("TargetCapacity");
    if let Some(var_4227) = &input.target_capacity {
        scope_4226.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4229) = &input.on_demand_target_capacity {
        scope_4228.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4229).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4231) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4230, var_4231);
    }
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4233) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4232, var_4233);
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("SubnetId");
    if let Some(var_4235) = &input.subnet_id {
        scope_4234.string(var_4235);
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4237) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4236, var_4237);
    }
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4239) = &input.customer_owned_ipv4_pool {
        scope_4238.string(var_4239);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4241) = &input.traffic_mirror_filter_id {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("AddNetworkService");
    if let Some(var_4243) = &input.add_network_services {
        let mut list_4245 = scope_4242.start_list(true, Some("item"));
        for item_4244 in var_4243 {
            #[allow(unused_mut)]
            let mut entry_4246 = list_4245.entry();
            entry_4246.string(item_4244.as_str());
        }
        list_4245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("RemoveNetworkService");
    if let Some(var_4248) = &input.remove_network_services {
        let mut list_4250 = scope_4247.start_list(true, Some("item"));
        for item_4249 in var_4248 {
            #[allow(unused_mut)]
            let mut entry_4251 = list_4250.entry();
            entry_4251.string(item_4249.as_str());
        }
        list_4250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4252 = writer.prefix("DryRun");
    if let Some(var_4253) = &input.dry_run {
        scope_4252.boolean(*var_4253);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4255) = &input.traffic_mirror_filter_rule_id {
        scope_4254.string(var_4255);
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("TrafficDirection");
    if let Some(var_4257) = &input.traffic_direction {
        scope_4256.string(var_4257.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("RuleNumber");
    if let Some(var_4259) = &input.rule_number {
        scope_4258.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("RuleAction");
    if let Some(var_4261) = &input.rule_action {
        scope_4260.string(var_4261.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("DestinationPortRange");
    if let Some(var_4263) = &input.destination_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_4262, var_4263,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("SourcePortRange");
    if let Some(var_4265) = &input.source_port_range {
        crate::query_ser::serialize_structure_traffic_mirror_port_range_request(
            scope_4264, var_4265,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("Protocol");
    if let Some(var_4267) = &input.protocol {
        scope_4266.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4267).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4269) = &input.destination_cidr_block {
        scope_4268.string(var_4269);
    }
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("SourceCidrBlock");
    if let Some(var_4271) = &input.source_cidr_block {
        scope_4270.string(var_4271);
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("Description");
    if let Some(var_4273) = &input.description {
        scope_4272.string(var_4273);
    }
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("RemoveField");
    if let Some(var_4275) = &input.remove_fields {
        let mut list_4277 = scope_4274.start_list(true, None);
        for item_4276 in var_4275 {
            #[allow(unused_mut)]
            let mut entry_4278 = list_4277.entry();
            entry_4278.string(item_4276.as_str());
        }
        list_4277.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("DryRun");
    if let Some(var_4280) = &input.dry_run {
        scope_4279.boolean(*var_4280);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4282) = &input.traffic_mirror_session_id {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4284) = &input.traffic_mirror_target_id {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4286) = &input.traffic_mirror_filter_id {
        scope_4285.string(var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("PacketLength");
    if let Some(var_4288) = &input.packet_length {
        scope_4287.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("SessionNumber");
    if let Some(var_4290) = &input.session_number {
        scope_4289.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("VirtualNetworkId");
    if let Some(var_4292) = &input.virtual_network_id {
        scope_4291.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4292).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("Description");
    if let Some(var_4294) = &input.description {
        scope_4293.string(var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("RemoveField");
    if let Some(var_4296) = &input.remove_fields {
        let mut list_4298 = scope_4295.start_list(true, None);
        for item_4297 in var_4296 {
            #[allow(unused_mut)]
            let mut entry_4299 = list_4298.entry();
            entry_4299.string(item_4297.as_str());
        }
        list_4298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4300 = writer.prefix("DryRun");
    if let Some(var_4301) = &input.dry_run {
        scope_4300.boolean(*var_4301);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("TransitGatewayId");
    if let Some(var_4303) = &input.transit_gateway_id {
        scope_4302.string(var_4303);
    }
    #[allow(unused_mut)]
    let mut scope_4304 = writer.prefix("Description");
    if let Some(var_4305) = &input.description {
        scope_4304.string(var_4305);
    }
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("Options");
    if let Some(var_4307) = &input.options {
        crate::query_ser::serialize_structure_modify_transit_gateway_options(scope_4306, var_4307);
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("DryRun");
    if let Some(var_4309) = &input.dry_run {
        scope_4308.boolean(*var_4309);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4311) = &input.transit_gateway_route_table_id {
        scope_4310.string(var_4311);
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("PrefixListId");
    if let Some(var_4313) = &input.prefix_list_id {
        scope_4312.string(var_4313);
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4315) = &input.transit_gateway_attachment_id {
        scope_4314.string(var_4315);
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("Blackhole");
    if let Some(var_4317) = &input.blackhole {
        scope_4316.boolean(*var_4317);
    }
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("DryRun");
    if let Some(var_4319) = &input.dry_run {
        scope_4318.boolean(*var_4319);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4320 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4321) = &input.transit_gateway_attachment_id {
        scope_4320.string(var_4321);
    }
    #[allow(unused_mut)]
    let mut scope_4322 = writer.prefix("AddSubnetIds");
    if let Some(var_4323) = &input.add_subnet_ids {
        let mut list_4325 = scope_4322.start_list(true, Some("item"));
        for item_4324 in var_4323 {
            #[allow(unused_mut)]
            let mut entry_4326 = list_4325.entry();
            entry_4326.string(item_4324);
        }
        list_4325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4328) = &input.remove_subnet_ids {
        let mut list_4330 = scope_4327.start_list(true, Some("item"));
        for item_4329 in var_4328 {
            #[allow(unused_mut)]
            let mut entry_4331 = list_4330.entry();
            entry_4331.string(item_4329);
        }
        list_4330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("Options");
    if let Some(var_4333) = &input.options {
        crate::query_ser::serialize_structure_modify_transit_gateway_vpc_attachment_request_options(
            scope_4332, var_4333,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("DryRun");
    if let Some(var_4335) = &input.dry_run {
        scope_4334.boolean(*var_4335);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("DryRun");
    if let Some(var_4337) = &input.dry_run {
        scope_4336.boolean(*var_4337);
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("VolumeId");
    if let Some(var_4339) = &input.volume_id {
        scope_4338.string(var_4339);
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("Size");
    if let Some(var_4341) = &input.size {
        scope_4340.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4341).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("VolumeType");
    if let Some(var_4343) = &input.volume_type {
        scope_4342.string(var_4343.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("Iops");
    if let Some(var_4345) = &input.iops {
        scope_4344.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4345).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("Throughput");
    if let Some(var_4347) = &input.throughput {
        scope_4346.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4349) = &input.multi_attach_enabled {
        scope_4348.boolean(*var_4349);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("AutoEnableIO");
    if let Some(var_4351) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4350, var_4351);
    }
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("VolumeId");
    if let Some(var_4353) = &input.volume_id {
        scope_4352.string(var_4353);
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("DryRun");
    if let Some(var_4355) = &input.dry_run {
        scope_4354.boolean(*var_4355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4357) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4356, var_4357);
    }
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("EnableDnsSupport");
    if let Some(var_4359) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_attribute_boolean_value(scope_4358, var_4359);
    }
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("VpcId");
    if let Some(var_4361) = &input.vpc_id {
        scope_4360.string(var_4361);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("DryRun");
    if let Some(var_4363) = &input.dry_run {
        scope_4362.boolean(*var_4363);
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("VpcEndpointId");
    if let Some(var_4365) = &input.vpc_endpoint_id {
        scope_4364.string(var_4365);
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("ResetPolicy");
    if let Some(var_4367) = &input.reset_policy {
        scope_4366.boolean(*var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("PolicyDocument");
    if let Some(var_4369) = &input.policy_document {
        scope_4368.string(var_4369);
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("AddRouteTableId");
    if let Some(var_4371) = &input.add_route_table_ids {
        let mut list_4373 = scope_4370.start_list(true, Some("item"));
        for item_4372 in var_4371 {
            #[allow(unused_mut)]
            let mut entry_4374 = list_4373.entry();
            entry_4374.string(item_4372);
        }
        list_4373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4376) = &input.remove_route_table_ids {
        let mut list_4378 = scope_4375.start_list(true, Some("item"));
        for item_4377 in var_4376 {
            #[allow(unused_mut)]
            let mut entry_4379 = list_4378.entry();
            entry_4379.string(item_4377);
        }
        list_4378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("AddSubnetId");
    if let Some(var_4381) = &input.add_subnet_ids {
        let mut list_4383 = scope_4380.start_list(true, Some("item"));
        for item_4382 in var_4381 {
            #[allow(unused_mut)]
            let mut entry_4384 = list_4383.entry();
            entry_4384.string(item_4382);
        }
        list_4383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("RemoveSubnetId");
    if let Some(var_4386) = &input.remove_subnet_ids {
        let mut list_4388 = scope_4385.start_list(true, Some("item"));
        for item_4387 in var_4386 {
            #[allow(unused_mut)]
            let mut entry_4389 = list_4388.entry();
            entry_4389.string(item_4387);
        }
        list_4388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4390 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4391) = &input.add_security_group_ids {
        let mut list_4393 = scope_4390.start_list(true, Some("item"));
        for item_4392 in var_4391 {
            #[allow(unused_mut)]
            let mut entry_4394 = list_4393.entry();
            entry_4394.string(item_4392);
        }
        list_4393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4396) = &input.remove_security_group_ids {
        let mut list_4398 = scope_4395.start_list(true, Some("item"));
        for item_4397 in var_4396 {
            #[allow(unused_mut)]
            let mut entry_4399 = list_4398.entry();
            entry_4399.string(item_4397);
        }
        list_4398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4400 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4401) = &input.private_dns_enabled {
        scope_4400.boolean(*var_4401);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4402 = writer.prefix("DryRun");
    if let Some(var_4403) = &input.dry_run {
        scope_4402.boolean(*var_4403);
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4405) = &input.connection_notification_id {
        scope_4404.string(var_4405);
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4407) = &input.connection_notification_arn {
        scope_4406.string(var_4407);
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("ConnectionEvents");
    if let Some(var_4409) = &input.connection_events {
        let mut list_4411 = scope_4408.start_list(true, Some("item"));
        for item_4410 in var_4409 {
            #[allow(unused_mut)]
            let mut entry_4412 = list_4411.entry();
            entry_4412.string(item_4410);
        }
        list_4411.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4413 = writer.prefix("DryRun");
    if let Some(var_4414) = &input.dry_run {
        scope_4413.boolean(*var_4414);
    }
    #[allow(unused_mut)]
    let mut scope_4415 = writer.prefix("ServiceId");
    if let Some(var_4416) = &input.service_id {
        scope_4415.string(var_4416);
    }
    #[allow(unused_mut)]
    let mut scope_4417 = writer.prefix("PrivateDnsName");
    if let Some(var_4418) = &input.private_dns_name {
        scope_4417.string(var_4418);
    }
    #[allow(unused_mut)]
    let mut scope_4419 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4420) = &input.remove_private_dns_name {
        scope_4419.boolean(*var_4420);
    }
    #[allow(unused_mut)]
    let mut scope_4421 = writer.prefix("AcceptanceRequired");
    if let Some(var_4422) = &input.acceptance_required {
        scope_4421.boolean(*var_4422);
    }
    #[allow(unused_mut)]
    let mut scope_4423 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4424) = &input.add_network_load_balancer_arns {
        let mut list_4426 = scope_4423.start_list(true, Some("item"));
        for item_4425 in var_4424 {
            #[allow(unused_mut)]
            let mut entry_4427 = list_4426.entry();
            entry_4427.string(item_4425);
        }
        list_4426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4429) = &input.remove_network_load_balancer_arns {
        let mut list_4431 = scope_4428.start_list(true, Some("item"));
        for item_4430 in var_4429 {
            #[allow(unused_mut)]
            let mut entry_4432 = list_4431.entry();
            entry_4432.string(item_4430);
        }
        list_4431.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4434) = &input.add_gateway_load_balancer_arns {
        let mut list_4436 = scope_4433.start_list(true, Some("item"));
        for item_4435 in var_4434 {
            #[allow(unused_mut)]
            let mut entry_4437 = list_4436.entry();
            entry_4437.string(item_4435);
        }
        list_4436.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4438 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4439) = &input.remove_gateway_load_balancer_arns {
        let mut list_4441 = scope_4438.start_list(true, Some("item"));
        for item_4440 in var_4439 {
            #[allow(unused_mut)]
            let mut entry_4442 = list_4441.entry();
            entry_4442.string(item_4440);
        }
        list_4441.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("DryRun");
    if let Some(var_4444) = &input.dry_run {
        scope_4443.boolean(*var_4444);
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("ServiceId");
    if let Some(var_4446) = &input.service_id {
        scope_4445.string(var_4446);
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4448) = &input.add_allowed_principals {
        let mut list_4450 = scope_4447.start_list(true, Some("item"));
        for item_4449 in var_4448 {
            #[allow(unused_mut)]
            let mut entry_4451 = list_4450.entry();
            entry_4451.string(item_4449);
        }
        list_4450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4453) = &input.remove_allowed_principals {
        let mut list_4455 = scope_4452.start_list(true, Some("item"));
        for item_4454 in var_4453 {
            #[allow(unused_mut)]
            let mut entry_4456 = list_4455.entry();
            entry_4456.string(item_4454);
        }
        list_4455.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4458) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_peering_connection_options_request(
            scope_4457, var_4458,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("DryRun");
    if let Some(var_4460) = &input.dry_run {
        scope_4459.boolean(*var_4460);
    }
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4462) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_peering_connection_options_request(
            scope_4461, var_4462,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4464) = &input.vpc_peering_connection_id {
        scope_4463.string(var_4464);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4465 = writer.prefix("VpcId");
    if let Some(var_4466) = &input.vpc_id {
        scope_4465.string(var_4466);
    }
    #[allow(unused_mut)]
    let mut scope_4467 = writer.prefix("InstanceTenancy");
    if let Some(var_4468) = &input.instance_tenancy {
        scope_4467.string(var_4468.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4469 = writer.prefix("DryRun");
    if let Some(var_4470) = &input.dry_run {
        scope_4469.boolean(*var_4470);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4471 = writer.prefix("VpnConnectionId");
    if let Some(var_4472) = &input.vpn_connection_id {
        scope_4471.string(var_4472);
    }
    #[allow(unused_mut)]
    let mut scope_4473 = writer.prefix("TransitGatewayId");
    if let Some(var_4474) = &input.transit_gateway_id {
        scope_4473.string(var_4474);
    }
    #[allow(unused_mut)]
    let mut scope_4475 = writer.prefix("CustomerGatewayId");
    if let Some(var_4476) = &input.customer_gateway_id {
        scope_4475.string(var_4476);
    }
    #[allow(unused_mut)]
    let mut scope_4477 = writer.prefix("VpnGatewayId");
    if let Some(var_4478) = &input.vpn_gateway_id {
        scope_4477.string(var_4478);
    }
    #[allow(unused_mut)]
    let mut scope_4479 = writer.prefix("DryRun");
    if let Some(var_4480) = &input.dry_run {
        scope_4479.boolean(*var_4480);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("VpnConnectionId");
    if let Some(var_4482) = &input.vpn_connection_id {
        scope_4481.string(var_4482);
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4484) = &input.local_ipv4_network_cidr {
        scope_4483.string(var_4484);
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4486) = &input.remote_ipv4_network_cidr {
        scope_4485.string(var_4486);
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4488) = &input.local_ipv6_network_cidr {
        scope_4487.string(var_4488);
    }
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4490) = &input.remote_ipv6_network_cidr {
        scope_4489.string(var_4490);
    }
    #[allow(unused_mut)]
    let mut scope_4491 = writer.prefix("DryRun");
    if let Some(var_4492) = &input.dry_run {
        scope_4491.boolean(*var_4492);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4493 = writer.prefix("VpnConnectionId");
    if let Some(var_4494) = &input.vpn_connection_id {
        scope_4493.string(var_4494);
    }
    #[allow(unused_mut)]
    let mut scope_4495 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4496) = &input.vpn_tunnel_outside_ip_address {
        scope_4495.string(var_4496);
    }
    #[allow(unused_mut)]
    let mut scope_4497 = writer.prefix("DryRun");
    if let Some(var_4498) = &input.dry_run {
        scope_4497.boolean(*var_4498);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4499 = writer.prefix("VpnConnectionId");
    if let Some(var_4500) = &input.vpn_connection_id {
        scope_4499.string(var_4500);
    }
    #[allow(unused_mut)]
    let mut scope_4501 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4502) = &input.vpn_tunnel_outside_ip_address {
        scope_4501.string(var_4502);
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("TunnelOptions");
    if let Some(var_4504) = &input.tunnel_options {
        crate::query_ser::serialize_structure_modify_vpn_tunnel_options_specification(
            scope_4503, var_4504,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("DryRun");
    if let Some(var_4506) = &input.dry_run {
        scope_4505.boolean(*var_4506);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("InstanceId");
    if let Some(var_4508) = &input.instance_ids {
        let mut list_4510 = scope_4507.start_list(true, Some("InstanceId"));
        for item_4509 in var_4508 {
            #[allow(unused_mut)]
            let mut entry_4511 = list_4510.entry();
            entry_4511.string(item_4509);
        }
        list_4510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("DryRun");
    if let Some(var_4513) = &input.dry_run {
        scope_4512.boolean(*var_4513);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("DryRun");
    if let Some(var_4515) = &input.dry_run {
        scope_4514.boolean(*var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("PublicIp");
    if let Some(var_4517) = &input.public_ip {
        scope_4516.string(var_4517);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("Cidr");
    if let Some(var_4519) = &input.cidr {
        scope_4518.string(var_4519);
    }
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4521) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_cidr_authorization_context(scope_4520, var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4523) = &input.publicly_advertisable {
        scope_4522.boolean(*var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("Description");
    if let Some(var_4525) = &input.description {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("DryRun");
    if let Some(var_4527) = &input.dry_run {
        scope_4526.boolean(*var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("PoolTagSpecification");
    if let Some(var_4529) = &input.pool_tag_specifications {
        let mut list_4531 = scope_4528.start_list(true, Some("item"));
        for item_4530 in var_4529 {
            #[allow(unused_mut)]
            let mut entry_4532 = list_4531.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4532, item_4530);
        }
        list_4531.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("ClientToken");
    if let Some(var_4534) = &input.client_token {
        scope_4533.string(var_4534);
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("CurrencyCode");
    if let Some(var_4536) = &input.currency_code {
        scope_4535.string(var_4536.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("HostIdSet");
    if let Some(var_4538) = &input.host_id_set {
        let mut list_4540 = scope_4537.start_list(true, Some("item"));
        for item_4539 in var_4538 {
            #[allow(unused_mut)]
            let mut entry_4541 = list_4540.entry();
            entry_4541.string(item_4539);
        }
        list_4540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4542 = writer.prefix("LimitPrice");
    if let Some(var_4543) = &input.limit_price {
        scope_4542.string(var_4543);
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("OfferingId");
    if let Some(var_4545) = &input.offering_id {
        scope_4544.string(var_4545);
    }
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("TagSpecification");
    if let Some(var_4547) = &input.tag_specifications {
        let mut list_4549 = scope_4546.start_list(true, Some("item"));
        for item_4548 in var_4547 {
            #[allow(unused_mut)]
            let mut entry_4550 = list_4549.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4550, item_4548);
        }
        list_4549.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("InstanceCount");
    if let Some(var_4552) = &input.instance_count {
        scope_4551.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4552).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4554) = &input.reserved_instances_offering_id {
        scope_4553.string(var_4554);
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("DryRun");
    if let Some(var_4556) = &input.dry_run {
        scope_4555.boolean(*var_4556);
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("LimitPrice");
    if let Some(var_4558) = &input.limit_price {
        crate::query_ser::serialize_structure_reserved_instance_limit_price(scope_4557, var_4558);
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("PurchaseTime");
    if let Some(var_4560) = &input.purchase_time {
        scope_4559.instant(var_4560, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("ClientToken");
    if let Some(var_4562) = &input.client_token {
        scope_4561.string(var_4562);
    }
    #[allow(unused_mut)]
    let mut scope_4563 = writer.prefix("DryRun");
    if let Some(var_4564) = &input.dry_run {
        scope_4563.boolean(*var_4564);
    }
    #[allow(unused_mut)]
    let mut scope_4565 = writer.prefix("PurchaseRequest");
    if let Some(var_4566) = &input.purchase_requests {
        let mut list_4568 = scope_4565.start_list(true, Some("PurchaseRequest"));
        for item_4567 in var_4566 {
            #[allow(unused_mut)]
            let mut entry_4569 = list_4568.entry();
            crate::query_ser::serialize_structure_purchase_request(entry_4569, item_4567);
        }
        list_4568.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("InstanceId");
    if let Some(var_4571) = &input.instance_ids {
        let mut list_4573 = scope_4570.start_list(true, Some("InstanceId"));
        for item_4572 in var_4571 {
            #[allow(unused_mut)]
            let mut entry_4574 = list_4573.entry();
            entry_4574.string(item_4572);
        }
        list_4573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4575 = writer.prefix("DryRun");
    if let Some(var_4576) = &input.dry_run {
        scope_4575.boolean(*var_4576);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4577 = writer.prefix("ImageLocation");
    if let Some(var_4578) = &input.image_location {
        scope_4577.string(var_4578);
    }
    #[allow(unused_mut)]
    let mut scope_4579 = writer.prefix("Architecture");
    if let Some(var_4580) = &input.architecture {
        scope_4579.string(var_4580.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4582) = &input.block_device_mappings {
        let mut list_4584 = scope_4581.start_list(true, Some("BlockDeviceMapping"));
        for item_4583 in var_4582 {
            #[allow(unused_mut)]
            let mut entry_4585 = list_4584.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_4585, item_4583);
        }
        list_4584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4586 = writer.prefix("Description");
    if let Some(var_4587) = &input.description {
        scope_4586.string(var_4587);
    }
    #[allow(unused_mut)]
    let mut scope_4588 = writer.prefix("DryRun");
    if let Some(var_4589) = &input.dry_run {
        scope_4588.boolean(*var_4589);
    }
    #[allow(unused_mut)]
    let mut scope_4590 = writer.prefix("EnaSupport");
    if let Some(var_4591) = &input.ena_support {
        scope_4590.boolean(*var_4591);
    }
    #[allow(unused_mut)]
    let mut scope_4592 = writer.prefix("KernelId");
    if let Some(var_4593) = &input.kernel_id {
        scope_4592.string(var_4593);
    }
    #[allow(unused_mut)]
    let mut scope_4594 = writer.prefix("Name");
    if let Some(var_4595) = &input.name {
        scope_4594.string(var_4595);
    }
    #[allow(unused_mut)]
    let mut scope_4596 = writer.prefix("BillingProduct");
    if let Some(var_4597) = &input.billing_products {
        let mut list_4599 = scope_4596.start_list(true, Some("item"));
        for item_4598 in var_4597 {
            #[allow(unused_mut)]
            let mut entry_4600 = list_4599.entry();
            entry_4600.string(item_4598);
        }
        list_4599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("RamdiskId");
    if let Some(var_4602) = &input.ramdisk_id {
        scope_4601.string(var_4602);
    }
    #[allow(unused_mut)]
    let mut scope_4603 = writer.prefix("RootDeviceName");
    if let Some(var_4604) = &input.root_device_name {
        scope_4603.string(var_4604);
    }
    #[allow(unused_mut)]
    let mut scope_4605 = writer.prefix("SriovNetSupport");
    if let Some(var_4606) = &input.sriov_net_support {
        scope_4605.string(var_4606);
    }
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("VirtualizationType");
    if let Some(var_4608) = &input.virtualization_type {
        scope_4607.string(var_4608);
    }
    #[allow(unused_mut)]
    let mut scope_4609 = writer.prefix("BootMode");
    if let Some(var_4610) = &input.boot_mode {
        scope_4609.string(var_4610.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("DryRun");
    if let Some(var_4612) = &input.dry_run {
        scope_4611.boolean(*var_4612);
    }
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4614) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_register_instance_tag_attribute_request(
            scope_4613, var_4614,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4616) = &input.transit_gateway_multicast_domain_id {
        scope_4615.string(var_4616);
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("GroupIpAddress");
    if let Some(var_4618) = &input.group_ip_address {
        scope_4617.string(var_4618);
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4620) = &input.network_interface_ids {
        let mut list_4622 = scope_4619.start_list(true, Some("item"));
        for item_4621 in var_4620 {
            #[allow(unused_mut)]
            let mut entry_4623 = list_4622.entry();
            entry_4623.string(item_4621);
        }
        list_4622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4624 = writer.prefix("DryRun");
    if let Some(var_4625) = &input.dry_run {
        scope_4624.boolean(*var_4625);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4626 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4627) = &input.transit_gateway_multicast_domain_id {
        scope_4626.string(var_4627);
    }
    #[allow(unused_mut)]
    let mut scope_4628 = writer.prefix("GroupIpAddress");
    if let Some(var_4629) = &input.group_ip_address {
        scope_4628.string(var_4629);
    }
    #[allow(unused_mut)]
    let mut scope_4630 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4631) = &input.network_interface_ids {
        let mut list_4633 = scope_4630.start_list(true, Some("item"));
        for item_4632 in var_4631 {
            #[allow(unused_mut)]
            let mut entry_4634 = list_4633.entry();
            entry_4634.string(item_4632);
        }
        list_4633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("DryRun");
    if let Some(var_4636) = &input.dry_run {
        scope_4635.boolean(*var_4636);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4638) = &input.transit_gateway_multicast_domain_id {
        scope_4637.string(var_4638);
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4640) = &input.transit_gateway_attachment_id {
        scope_4639.string(var_4640);
    }
    #[allow(unused_mut)]
    let mut scope_4641 = writer.prefix("SubnetIds");
    if let Some(var_4642) = &input.subnet_ids {
        let mut list_4644 = scope_4641.start_list(true, Some("item"));
        for item_4643 in var_4642 {
            #[allow(unused_mut)]
            let mut entry_4645 = list_4644.entry();
            entry_4645.string(item_4643);
        }
        list_4644.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("DryRun");
    if let Some(var_4647) = &input.dry_run {
        scope_4646.boolean(*var_4647);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4649) = &input.transit_gateway_attachment_id {
        scope_4648.string(var_4649);
    }
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("DryRun");
    if let Some(var_4651) = &input.dry_run {
        scope_4650.boolean(*var_4651);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4653) = &input.transit_gateway_attachment_id {
        scope_4652.string(var_4653);
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("DryRun");
    if let Some(var_4655) = &input.dry_run {
        scope_4654.boolean(*var_4655);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("DryRun");
    if let Some(var_4657) = &input.dry_run {
        scope_4656.boolean(*var_4657);
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("ServiceId");
    if let Some(var_4659) = &input.service_id {
        scope_4658.string(var_4659);
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("VpcEndpointId");
    if let Some(var_4661) = &input.vpc_endpoint_ids {
        let mut list_4663 = scope_4660.start_list(true, Some("item"));
        for item_4662 in var_4661 {
            #[allow(unused_mut)]
            let mut entry_4664 = list_4663.entry();
            entry_4664.string(item_4662);
        }
        list_4663.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("DryRun");
    if let Some(var_4666) = &input.dry_run {
        scope_4665.boolean(*var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4668) = &input.vpc_peering_connection_id {
        scope_4667.string(var_4668);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("AllocationId");
    if let Some(var_4670) = &input.allocation_id {
        scope_4669.string(var_4670);
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("PublicIp");
    if let Some(var_4672) = &input.public_ip {
        scope_4671.string(var_4672);
    }
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("NetworkBorderGroup");
    if let Some(var_4674) = &input.network_border_group {
        scope_4673.string(var_4674);
    }
    #[allow(unused_mut)]
    let mut scope_4675 = writer.prefix("DryRun");
    if let Some(var_4676) = &input.dry_run {
        scope_4675.boolean(*var_4676);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4677 = writer.prefix("HostId");
    if let Some(var_4678) = &input.host_ids {
        let mut list_4680 = scope_4677.start_list(true, Some("item"));
        for item_4679 in var_4678 {
            #[allow(unused_mut)]
            let mut entry_4681 = list_4680.entry();
            entry_4681.string(item_4679);
        }
        list_4680.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("IamInstanceProfile");
    if let Some(var_4683) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_4682, var_4683,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("AssociationId");
    if let Some(var_4685) = &input.association_id {
        scope_4684.string(var_4685);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("AssociationId");
    if let Some(var_4687) = &input.association_id {
        scope_4686.string(var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("DryRun");
    if let Some(var_4689) = &input.dry_run {
        scope_4688.boolean(*var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("NetworkAclId");
    if let Some(var_4691) = &input.network_acl_id {
        scope_4690.string(var_4691);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("CidrBlock");
    if let Some(var_4693) = &input.cidr_block {
        scope_4692.string(var_4693);
    }
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("DryRun");
    if let Some(var_4695) = &input.dry_run {
        scope_4694.boolean(*var_4695);
    }
    #[allow(unused_mut)]
    let mut scope_4696 = writer.prefix("Egress");
    if let Some(var_4697) = &input.egress {
        scope_4696.boolean(*var_4697);
    }
    #[allow(unused_mut)]
    let mut scope_4698 = writer.prefix("Icmp");
    if let Some(var_4699) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_icmp_type_code(scope_4698, var_4699);
    }
    #[allow(unused_mut)]
    let mut scope_4700 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_4701) = &input.ipv6_cidr_block {
        scope_4700.string(var_4701);
    }
    #[allow(unused_mut)]
    let mut scope_4702 = writer.prefix("NetworkAclId");
    if let Some(var_4703) = &input.network_acl_id {
        scope_4702.string(var_4703);
    }
    #[allow(unused_mut)]
    let mut scope_4704 = writer.prefix("PortRange");
    if let Some(var_4705) = &input.port_range {
        crate::query_ser::serialize_structure_port_range(scope_4704, var_4705);
    }
    #[allow(unused_mut)]
    let mut scope_4706 = writer.prefix("Protocol");
    if let Some(var_4707) = &input.protocol {
        scope_4706.string(var_4707);
    }
    #[allow(unused_mut)]
    let mut scope_4708 = writer.prefix("RuleAction");
    if let Some(var_4709) = &input.rule_action {
        scope_4708.string(var_4709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4710 = writer.prefix("RuleNumber");
    if let Some(var_4711) = &input.rule_number {
        scope_4710.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4711).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4712 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4713) = &input.destination_cidr_block {
        scope_4712.string(var_4713);
    }
    #[allow(unused_mut)]
    let mut scope_4714 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_4715) = &input.destination_ipv6_cidr_block {
        scope_4714.string(var_4715);
    }
    #[allow(unused_mut)]
    let mut scope_4716 = writer.prefix("DestinationPrefixListId");
    if let Some(var_4717) = &input.destination_prefix_list_id {
        scope_4716.string(var_4717);
    }
    #[allow(unused_mut)]
    let mut scope_4718 = writer.prefix("DryRun");
    if let Some(var_4719) = &input.dry_run {
        scope_4718.boolean(*var_4719);
    }
    #[allow(unused_mut)]
    let mut scope_4720 = writer.prefix("VpcEndpointId");
    if let Some(var_4721) = &input.vpc_endpoint_id {
        scope_4720.string(var_4721);
    }
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_4723) = &input.egress_only_internet_gateway_id {
        scope_4722.string(var_4723);
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("GatewayId");
    if let Some(var_4725) = &input.gateway_id {
        scope_4724.string(var_4725);
    }
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("InstanceId");
    if let Some(var_4727) = &input.instance_id {
        scope_4726.string(var_4727);
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("LocalTarget");
    if let Some(var_4729) = &input.local_target {
        scope_4728.boolean(*var_4729);
    }
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("NatGatewayId");
    if let Some(var_4731) = &input.nat_gateway_id {
        scope_4730.string(var_4731);
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("TransitGatewayId");
    if let Some(var_4733) = &input.transit_gateway_id {
        scope_4732.string(var_4733);
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("LocalGatewayId");
    if let Some(var_4735) = &input.local_gateway_id {
        scope_4734.string(var_4735);
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("CarrierGatewayId");
    if let Some(var_4737) = &input.carrier_gateway_id {
        scope_4736.string(var_4737);
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4739) = &input.network_interface_id {
        scope_4738.string(var_4739);
    }
    #[allow(unused_mut)]
    let mut scope_4740 = writer.prefix("RouteTableId");
    if let Some(var_4741) = &input.route_table_id {
        scope_4740.string(var_4741);
    }
    #[allow(unused_mut)]
    let mut scope_4742 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4743) = &input.vpc_peering_connection_id {
        scope_4742.string(var_4743);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4744 = writer.prefix("AssociationId");
    if let Some(var_4745) = &input.association_id {
        scope_4744.string(var_4745);
    }
    #[allow(unused_mut)]
    let mut scope_4746 = writer.prefix("DryRun");
    if let Some(var_4747) = &input.dry_run {
        scope_4746.boolean(*var_4747);
    }
    #[allow(unused_mut)]
    let mut scope_4748 = writer.prefix("RouteTableId");
    if let Some(var_4749) = &input.route_table_id {
        scope_4748.string(var_4749);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4751) = &input.destination_cidr_block {
        scope_4750.string(var_4751);
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4753) = &input.transit_gateway_route_table_id {
        scope_4752.string(var_4753);
    }
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4755) = &input.transit_gateway_attachment_id {
        scope_4754.string(var_4755);
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("Blackhole");
    if let Some(var_4757) = &input.blackhole {
        scope_4756.boolean(*var_4757);
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("DryRun");
    if let Some(var_4759) = &input.dry_run {
        scope_4758.boolean(*var_4759);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4760 = writer.prefix("Description");
    if let Some(var_4761) = &input.description {
        scope_4760.string(var_4761);
    }
    #[allow(unused_mut)]
    let mut scope_4762 = writer.prefix("DryRun");
    if let Some(var_4763) = &input.dry_run {
        scope_4762.boolean(*var_4763);
    }
    #[allow(unused_mut)]
    let mut scope_4764 = writer.prefix("EndTime");
    if let Some(var_4765) = &input.end_time {
        scope_4764.instant(var_4765, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("InstanceId");
    if let Some(var_4767) = &input.instances {
        let mut list_4769 = scope_4766.start_list(true, Some("InstanceId"));
        for item_4768 in var_4767 {
            #[allow(unused_mut)]
            let mut entry_4770 = list_4769.entry();
            entry_4770.string(item_4768);
        }
        list_4769.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4771 = writer.prefix("ReasonCode");
    if let Some(var_4772) = &input.reason_codes {
        let mut list_4774 = scope_4771.start_list(true, Some("item"));
        for item_4773 in var_4772 {
            #[allow(unused_mut)]
            let mut entry_4775 = list_4774.entry();
            entry_4775.string(item_4773.as_str());
        }
        list_4774.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("StartTime");
    if let Some(var_4777) = &input.start_time {
        scope_4776.instant(var_4777, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("Status");
    if let Some(var_4779) = &input.status {
        scope_4778.string(var_4779.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("DryRun");
    if let Some(var_4781) = &input.dry_run {
        scope_4780.boolean(*var_4781);
    }
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_4783) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_spot_fleet_request_config_data(scope_4782, var_4783);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_4785) = &input.availability_zone_group {
        scope_4784.string(var_4785);
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("BlockDurationMinutes");
    if let Some(var_4787) = &input.block_duration_minutes {
        scope_4786.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4787).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("ClientToken");
    if let Some(var_4789) = &input.client_token {
        scope_4788.string(var_4789);
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("DryRun");
    if let Some(var_4791) = &input.dry_run {
        scope_4790.boolean(*var_4791);
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("InstanceCount");
    if let Some(var_4793) = &input.instance_count {
        scope_4792.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("LaunchGroup");
    if let Some(var_4795) = &input.launch_group {
        scope_4794.string(var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("LaunchSpecification");
    if let Some(var_4797) = &input.launch_specification {
        crate::query_ser::serialize_structure_request_spot_launch_specification(
            scope_4796, var_4797,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("SpotPrice");
    if let Some(var_4799) = &input.spot_price {
        scope_4798.string(var_4799);
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("Type");
    if let Some(var_4801) = &input.r#type {
        scope_4800.string(var_4801.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("ValidFrom");
    if let Some(var_4803) = &input.valid_from {
        scope_4802.instant(var_4803, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("ValidUntil");
    if let Some(var_4805) = &input.valid_until {
        scope_4804.instant(var_4805, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("TagSpecification");
    if let Some(var_4807) = &input.tag_specifications {
        let mut list_4809 = scope_4806.start_list(true, Some("item"));
        for item_4808 in var_4807 {
            #[allow(unused_mut)]
            let mut entry_4810 = list_4809.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4810, item_4808);
        }
        list_4809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_4812) = &input.instance_interruption_behavior {
        scope_4811.string(var_4812.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("AllocationId");
    if let Some(var_4814) = &input.allocation_id {
        scope_4813.string(var_4814);
    }
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("Attribute");
    if let Some(var_4816) = &input.attribute {
        scope_4815.string(var_4816.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("DryRun");
    if let Some(var_4818) = &input.dry_run {
        scope_4817.boolean(*var_4818);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("DryRun");
    if let Some(var_4820) = &input.dry_run {
        scope_4819.boolean(*var_4820);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("DryRun");
    if let Some(var_4822) = &input.dry_run {
        scope_4821.boolean(*var_4822);
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("FpgaImageId");
    if let Some(var_4824) = &input.fpga_image_id {
        scope_4823.string(var_4824);
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("Attribute");
    if let Some(var_4826) = &input.attribute {
        scope_4825.string(var_4826.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("Attribute");
    if let Some(var_4828) = &input.attribute {
        scope_4827.string(var_4828.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4829 = writer.prefix("ImageId");
    if let Some(var_4830) = &input.image_id {
        scope_4829.string(var_4830);
    }
    #[allow(unused_mut)]
    let mut scope_4831 = writer.prefix("DryRun");
    if let Some(var_4832) = &input.dry_run {
        scope_4831.boolean(*var_4832);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4833 = writer.prefix("Attribute");
    if let Some(var_4834) = &input.attribute {
        scope_4833.string(var_4834.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4835 = writer.prefix("DryRun");
    if let Some(var_4836) = &input.dry_run {
        scope_4835.boolean(*var_4836);
    }
    #[allow(unused_mut)]
    let mut scope_4837 = writer.prefix("InstanceId");
    if let Some(var_4838) = &input.instance_id {
        scope_4837.string(var_4838);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("DryRun");
    if let Some(var_4840) = &input.dry_run {
        scope_4839.boolean(*var_4840);
    }
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4842) = &input.network_interface_id {
        scope_4841.string(var_4842);
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("SourceDestCheck");
    if let Some(var_4844) = &input.source_dest_check {
        scope_4843.string(var_4844);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("Attribute");
    if let Some(var_4846) = &input.attribute {
        scope_4845.string(var_4846.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("SnapshotId");
    if let Some(var_4848) = &input.snapshot_id {
        scope_4847.string(var_4848);
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("DryRun");
    if let Some(var_4850) = &input.dry_run {
        scope_4849.boolean(*var_4850);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("DryRun");
    if let Some(var_4852) = &input.dry_run {
        scope_4851.boolean(*var_4852);
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("PublicIp");
    if let Some(var_4854) = &input.public_ip {
        scope_4853.string(var_4854);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("DryRun");
    if let Some(var_4856) = &input.dry_run {
        scope_4855.boolean(*var_4856);
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("PrefixListId");
    if let Some(var_4858) = &input.prefix_list_id {
        scope_4857.string(var_4858);
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("PreviousVersion");
    if let Some(var_4860) = &input.previous_version {
        scope_4859.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4860).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("CurrentVersion");
    if let Some(var_4862) = &input.current_version {
        scope_4861.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4862).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4864) = &input.client_vpn_endpoint_id {
        scope_4863.string(var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("TargetNetworkCidr");
    if let Some(var_4866) = &input.target_network_cidr {
        scope_4865.string(var_4866);
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("AccessGroupId");
    if let Some(var_4868) = &input.access_group_id {
        scope_4867.string(var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("RevokeAllGroups");
    if let Some(var_4870) = &input.revoke_all_groups {
        scope_4869.boolean(*var_4870);
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("DryRun");
    if let Some(var_4872) = &input.dry_run {
        scope_4871.boolean(*var_4872);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("DryRun");
    if let Some(var_4874) = &input.dry_run {
        scope_4873.boolean(*var_4874);
    }
    #[allow(unused_mut)]
    let mut scope_4875 = writer.prefix("GroupId");
    if let Some(var_4876) = &input.group_id {
        scope_4875.string(var_4876);
    }
    #[allow(unused_mut)]
    let mut scope_4877 = writer.prefix("IpPermissions");
    if let Some(var_4878) = &input.ip_permissions {
        let mut list_4880 = scope_4877.start_list(true, Some("item"));
        for item_4879 in var_4878 {
            #[allow(unused_mut)]
            let mut entry_4881 = list_4880.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_4881, item_4879);
        }
        list_4880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("CidrIp");
    if let Some(var_4883) = &input.cidr_ip {
        scope_4882.string(var_4883);
    }
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("FromPort");
    if let Some(var_4885) = &input.from_port {
        scope_4884.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4885).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("IpProtocol");
    if let Some(var_4887) = &input.ip_protocol {
        scope_4886.string(var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("ToPort");
    if let Some(var_4889) = &input.to_port {
        scope_4888.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_4891) = &input.source_security_group_name {
        scope_4890.string(var_4891);
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_4893) = &input.source_security_group_owner_id {
        scope_4892.string(var_4893);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4894 = writer.prefix("CidrIp");
    if let Some(var_4895) = &input.cidr_ip {
        scope_4894.string(var_4895);
    }
    #[allow(unused_mut)]
    let mut scope_4896 = writer.prefix("FromPort");
    if let Some(var_4897) = &input.from_port {
        scope_4896.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4897).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4898 = writer.prefix("GroupId");
    if let Some(var_4899) = &input.group_id {
        scope_4898.string(var_4899);
    }
    #[allow(unused_mut)]
    let mut scope_4900 = writer.prefix("GroupName");
    if let Some(var_4901) = &input.group_name {
        scope_4900.string(var_4901);
    }
    #[allow(unused_mut)]
    let mut scope_4902 = writer.prefix("IpPermissions");
    if let Some(var_4903) = &input.ip_permissions {
        let mut list_4905 = scope_4902.start_list(true, Some("item"));
        for item_4904 in var_4903 {
            #[allow(unused_mut)]
            let mut entry_4906 = list_4905.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_4906, item_4904);
        }
        list_4905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("IpProtocol");
    if let Some(var_4908) = &input.ip_protocol {
        scope_4907.string(var_4908);
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_4910) = &input.source_security_group_name {
        scope_4909.string(var_4910);
    }
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_4912) = &input.source_security_group_owner_id {
        scope_4911.string(var_4912);
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("ToPort");
    if let Some(var_4914) = &input.to_port {
        scope_4913.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("DryRun");
    if let Some(var_4916) = &input.dry_run {
        scope_4915.boolean(*var_4916);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4918) = &input.block_device_mappings {
        let mut list_4920 = scope_4917.start_list(true, Some("BlockDeviceMapping"));
        for item_4919 in var_4918 {
            #[allow(unused_mut)]
            let mut entry_4921 = list_4920.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_4921, item_4919);
        }
        list_4920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4922 = writer.prefix("ImageId");
    if let Some(var_4923) = &input.image_id {
        scope_4922.string(var_4923);
    }
    #[allow(unused_mut)]
    let mut scope_4924 = writer.prefix("InstanceType");
    if let Some(var_4925) = &input.instance_type {
        scope_4924.string(var_4925.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("Ipv6AddressCount");
    if let Some(var_4927) = &input.ipv6_address_count {
        scope_4926.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4927).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4928 = writer.prefix("Ipv6Address");
    if let Some(var_4929) = &input.ipv6_addresses {
        let mut list_4931 = scope_4928.start_list(true, Some("item"));
        for item_4930 in var_4929 {
            #[allow(unused_mut)]
            let mut entry_4932 = list_4931.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address(entry_4932, item_4930);
        }
        list_4931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("KernelId");
    if let Some(var_4934) = &input.kernel_id {
        scope_4933.string(var_4934);
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("KeyName");
    if let Some(var_4936) = &input.key_name {
        scope_4935.string(var_4936);
    }
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("MaxCount");
    if let Some(var_4938) = &input.max_count {
        scope_4937.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4939 = writer.prefix("MinCount");
    if let Some(var_4940) = &input.min_count {
        scope_4939.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_4940).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("Monitoring");
    if let Some(var_4942) = &input.monitoring {
        crate::query_ser::serialize_structure_run_instances_monitoring_enabled(
            scope_4941, var_4942,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("Placement");
    if let Some(var_4944) = &input.placement {
        crate::query_ser::serialize_structure_placement(scope_4943, var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("RamdiskId");
    if let Some(var_4946) = &input.ramdisk_id {
        scope_4945.string(var_4946);
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("SecurityGroupId");
    if let Some(var_4948) = &input.security_group_ids {
        let mut list_4950 = scope_4947.start_list(true, Some("SecurityGroupId"));
        for item_4949 in var_4948 {
            #[allow(unused_mut)]
            let mut entry_4951 = list_4950.entry();
            entry_4951.string(item_4949);
        }
        list_4950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("SecurityGroup");
    if let Some(var_4953) = &input.security_groups {
        let mut list_4955 = scope_4952.start_list(true, Some("SecurityGroup"));
        for item_4954 in var_4953 {
            #[allow(unused_mut)]
            let mut entry_4956 = list_4955.entry();
            entry_4956.string(item_4954);
        }
        list_4955.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("SubnetId");
    if let Some(var_4958) = &input.subnet_id {
        scope_4957.string(var_4958);
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("UserData");
    if let Some(var_4960) = &input.user_data {
        scope_4959.string(var_4960);
    }
    #[allow(unused_mut)]
    let mut scope_4961 = writer.prefix("AdditionalInfo");
    if let Some(var_4962) = &input.additional_info {
        scope_4961.string(var_4962);
    }
    #[allow(unused_mut)]
    let mut scope_4963 = writer.prefix("ClientToken");
    if let Some(var_4964) = &input.client_token {
        scope_4963.string(var_4964);
    }
    #[allow(unused_mut)]
    let mut scope_4965 = writer.prefix("DisableApiTermination");
    if let Some(var_4966) = &input.disable_api_termination {
        scope_4965.boolean(*var_4966);
    }
    #[allow(unused_mut)]
    let mut scope_4967 = writer.prefix("DryRun");
    if let Some(var_4968) = &input.dry_run {
        scope_4967.boolean(*var_4968);
    }
    #[allow(unused_mut)]
    let mut scope_4969 = writer.prefix("EbsOptimized");
    if let Some(var_4970) = &input.ebs_optimized {
        scope_4969.boolean(*var_4970);
    }
    #[allow(unused_mut)]
    let mut scope_4971 = writer.prefix("IamInstanceProfile");
    if let Some(var_4972) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_4971, var_4972,
        );
    }
    #[allow(unused_mut)]
    let mut scope_4973 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4974) = &input.instance_initiated_shutdown_behavior {
        scope_4973.string(var_4974.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("NetworkInterface");
    if let Some(var_4976) = &input.network_interfaces {
        let mut list_4978 = scope_4975.start_list(true, Some("item"));
        for item_4977 in var_4976 {
            #[allow(unused_mut)]
            let mut entry_4979 = list_4978.entry();
            crate::query_ser::serialize_structure_instance_network_interface_specification(
                entry_4979, item_4977,
            );
        }
        list_4978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4980 = writer.prefix("PrivateIpAddress");
    if let Some(var_4981) = &input.private_ip_address {
        scope_4980.string(var_4981);
    }
    #[allow(unused_mut)]
    let mut scope_4982 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_4983) = &input.elastic_gpu_specification {
        let mut list_4985 = scope_4982.start_list(true, Some("item"));
        for item_4984 in var_4983 {
            #[allow(unused_mut)]
            let mut entry_4986 = list_4985.entry();
            crate::query_ser::serialize_structure_elastic_gpu_specification(entry_4986, item_4984);
        }
        list_4985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_4988) = &input.elastic_inference_accelerators {
        let mut list_4990 = scope_4987.start_list(true, Some("item"));
        for item_4989 in var_4988 {
            #[allow(unused_mut)]
            let mut entry_4991 = list_4990.entry();
            crate::query_ser::serialize_structure_elastic_inference_accelerator(
                entry_4991, item_4989,
            );
        }
        list_4990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("TagSpecification");
    if let Some(var_4993) = &input.tag_specifications {
        let mut list_4995 = scope_4992.start_list(true, Some("item"));
        for item_4994 in var_4993 {
            #[allow(unused_mut)]
            let mut entry_4996 = list_4995.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_4996, item_4994);
        }
        list_4995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("LaunchTemplate");
    if let Some(var_4998) = &input.launch_template {
        crate::query_ser::serialize_structure_launch_template_specification(scope_4997, var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5000) = &input.instance_market_options {
        crate::query_ser::serialize_structure_instance_market_options_request(scope_4999, var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("CreditSpecification");
    if let Some(var_5002) = &input.credit_specification {
        crate::query_ser::serialize_structure_credit_specification_request(scope_5001, var_5002);
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("CpuOptions");
    if let Some(var_5004) = &input.cpu_options {
        crate::query_ser::serialize_structure_cpu_options_request(scope_5003, var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5006) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_capacity_reservation_specification(
            scope_5005, var_5006,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("HibernationOptions");
    if let Some(var_5008) = &input.hibernation_options {
        crate::query_ser::serialize_structure_hibernation_options_request(scope_5007, var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("LicenseSpecification");
    if let Some(var_5010) = &input.license_specifications {
        let mut list_5012 = scope_5009.start_list(true, Some("item"));
        for item_5011 in var_5010 {
            #[allow(unused_mut)]
            let mut entry_5013 = list_5012.entry();
            crate::query_ser::serialize_structure_license_configuration_request(
                entry_5013, item_5011,
            );
        }
        list_5012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("MetadataOptions");
    if let Some(var_5015) = &input.metadata_options {
        crate::query_ser::serialize_structure_instance_metadata_options_request(
            scope_5014, var_5015,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("EnclaveOptions");
    if let Some(var_5017) = &input.enclave_options {
        crate::query_ser::serialize_structure_enclave_options_request(scope_5016, var_5017);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("ClientToken");
    if let Some(var_5019) = &input.client_token {
        scope_5018.string(var_5019);
    }
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("DryRun");
    if let Some(var_5021) = &input.dry_run {
        scope_5020.boolean(*var_5021);
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("InstanceCount");
    if let Some(var_5023) = &input.instance_count {
        scope_5022.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5023).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("LaunchSpecification");
    if let Some(var_5025) = &input.launch_specification {
        crate::query_ser::serialize_structure_scheduled_instances_launch_specification(
            scope_5024, var_5025,
        );
    }
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5027) = &input.scheduled_instance_id {
        scope_5026.string(var_5027);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5029) = &input.local_gateway_route_table_id {
        scope_5028.string(var_5029);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("Filter");
    if let Some(var_5031) = &input.filters {
        let mut list_5033 = scope_5030.start_list(true, Some("Filter"));
        for item_5032 in var_5031 {
            #[allow(unused_mut)]
            let mut entry_5034 = list_5033.entry();
            crate::query_ser::serialize_structure_filter(entry_5034, item_5032);
        }
        list_5033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5035 = writer.prefix("MaxResults");
    if let Some(var_5036) = &input.max_results {
        scope_5035.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5036).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("NextToken");
    if let Some(var_5038) = &input.next_token {
        scope_5037.string(var_5038);
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("DryRun");
    if let Some(var_5040) = &input.dry_run {
        scope_5039.boolean(*var_5040);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5042) = &input.transit_gateway_multicast_domain_id {
        scope_5041.string(var_5042);
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("Filter");
    if let Some(var_5044) = &input.filters {
        let mut list_5046 = scope_5043.start_list(true, Some("Filter"));
        for item_5045 in var_5044 {
            #[allow(unused_mut)]
            let mut entry_5047 = list_5046.entry();
            crate::query_ser::serialize_structure_filter(entry_5047, item_5045);
        }
        list_5046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("MaxResults");
    if let Some(var_5049) = &input.max_results {
        scope_5048.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5049).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5050 = writer.prefix("NextToken");
    if let Some(var_5051) = &input.next_token {
        scope_5050.string(var_5051);
    }
    #[allow(unused_mut)]
    let mut scope_5052 = writer.prefix("DryRun");
    if let Some(var_5053) = &input.dry_run {
        scope_5052.boolean(*var_5053);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5054 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5055) = &input.transit_gateway_route_table_id {
        scope_5054.string(var_5055);
    }
    #[allow(unused_mut)]
    let mut scope_5056 = writer.prefix("Filter");
    if let Some(var_5057) = &input.filters {
        let mut list_5059 = scope_5056.start_list(true, Some("Filter"));
        for item_5058 in var_5057 {
            #[allow(unused_mut)]
            let mut entry_5060 = list_5059.entry();
            crate::query_ser::serialize_structure_filter(entry_5060, item_5058);
        }
        list_5059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("MaxResults");
    if let Some(var_5062) = &input.max_results {
        scope_5061.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_5062).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("DryRun");
    if let Some(var_5064) = &input.dry_run {
        scope_5063.boolean(*var_5064);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("InstanceId");
    if let Some(var_5066) = &input.instance_id {
        scope_5065.string(var_5066);
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("DryRun");
    if let Some(var_5068) = &input.dry_run {
        scope_5067.boolean(*var_5068);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("InstanceId");
    if let Some(var_5070) = &input.instance_ids {
        let mut list_5072 = scope_5069.start_list(true, Some("InstanceId"));
        for item_5071 in var_5070 {
            #[allow(unused_mut)]
            let mut entry_5073 = list_5072.entry();
            entry_5073.string(item_5071);
        }
        list_5072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("AdditionalInfo");
    if let Some(var_5075) = &input.additional_info {
        scope_5074.string(var_5075);
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("DryRun");
    if let Some(var_5077) = &input.dry_run {
        scope_5076.boolean(*var_5077);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5078 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5079) = &input.network_insights_path_id {
        scope_5078.string(var_5079);
    }
    #[allow(unused_mut)]
    let mut scope_5080 = writer.prefix("FilterInArn");
    if let Some(var_5081) = &input.filter_in_arns {
        let mut list_5083 = scope_5080.start_list(true, Some("item"));
        for item_5082 in var_5081 {
            #[allow(unused_mut)]
            let mut entry_5084 = list_5083.entry();
            entry_5084.string(item_5082);
        }
        list_5083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("DryRun");
    if let Some(var_5086) = &input.dry_run {
        scope_5085.boolean(*var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("TagSpecification");
    if let Some(var_5088) = &input.tag_specifications {
        let mut list_5090 = scope_5087.start_list(true, Some("item"));
        for item_5089 in var_5088 {
            #[allow(unused_mut)]
            let mut entry_5091 = list_5090.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_5091, item_5089);
        }
        list_5090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5092 = writer.prefix("ClientToken");
    if let Some(var_5093) = &input.client_token {
        scope_5092.string(var_5093);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5094 = writer.prefix("DryRun");
    if let Some(var_5095) = &input.dry_run {
        scope_5094.boolean(*var_5095);
    }
    #[allow(unused_mut)]
    let mut scope_5096 = writer.prefix("ServiceId");
    if let Some(var_5097) = &input.service_id {
        scope_5096.string(var_5097);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5098 = writer.prefix("InstanceId");
    if let Some(var_5099) = &input.instance_ids {
        let mut list_5101 = scope_5098.start_list(true, Some("InstanceId"));
        for item_5100 in var_5099 {
            #[allow(unused_mut)]
            let mut entry_5102 = list_5101.entry();
            entry_5102.string(item_5100);
        }
        list_5101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("Hibernate");
    if let Some(var_5104) = &input.hibernate {
        scope_5103.boolean(*var_5104);
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("DryRun");
    if let Some(var_5106) = &input.dry_run {
        scope_5105.boolean(*var_5106);
    }
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("Force");
    if let Some(var_5108) = &input.force {
        scope_5107.boolean(*var_5108);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5110) = &input.client_vpn_endpoint_id {
        scope_5109.string(var_5110);
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("ConnectionId");
    if let Some(var_5112) = &input.connection_id {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("Username");
    if let Some(var_5114) = &input.username {
        scope_5113.string(var_5114);
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("DryRun");
    if let Some(var_5116) = &input.dry_run {
        scope_5115.boolean(*var_5116);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("InstanceId");
    if let Some(var_5118) = &input.instance_ids {
        let mut list_5120 = scope_5117.start_list(true, Some("InstanceId"));
        for item_5119 in var_5118 {
            #[allow(unused_mut)]
            let mut entry_5121 = list_5120.entry();
            entry_5121.string(item_5119);
        }
        list_5120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("DryRun");
    if let Some(var_5123) = &input.dry_run {
        scope_5122.boolean(*var_5123);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5125) = &input.network_interface_id {
        scope_5124.string(var_5125);
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("Ipv6Addresses");
    if let Some(var_5127) = &input.ipv6_addresses {
        let mut list_5129 = scope_5126.start_list(true, Some("item"));
        for item_5128 in var_5127 {
            #[allow(unused_mut)]
            let mut entry_5130 = list_5129.entry();
            entry_5130.string(item_5128);
        }
        list_5129.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5132) = &input.network_interface_id {
        scope_5131.string(var_5132);
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("PrivateIpAddress");
    if let Some(var_5134) = &input.private_ip_addresses {
        let mut list_5136 = scope_5133.start_list(true, Some("PrivateIpAddress"));
        for item_5135 in var_5134 {
            #[allow(unused_mut)]
            let mut entry_5137 = list_5136.entry();
            entry_5137.string(item_5135);
        }
        list_5136.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("InstanceId");
    if let Some(var_5139) = &input.instance_ids {
        let mut list_5141 = scope_5138.start_list(true, Some("InstanceId"));
        for item_5140 in var_5139 {
            #[allow(unused_mut)]
            let mut entry_5142 = list_5141.entry();
            entry_5142.string(item_5140);
        }
        list_5141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5143 = writer.prefix("DryRun");
    if let Some(var_5144) = &input.dry_run {
        scope_5143.boolean(*var_5144);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5145 = writer.prefix("DryRun");
    if let Some(var_5146) = &input.dry_run {
        scope_5145.boolean(*var_5146);
    }
    #[allow(unused_mut)]
    let mut scope_5147 = writer.prefix("GroupId");
    if let Some(var_5148) = &input.group_id {
        scope_5147.string(var_5148);
    }
    #[allow(unused_mut)]
    let mut scope_5149 = writer.prefix("GroupName");
    if let Some(var_5150) = &input.group_name {
        scope_5149.string(var_5150);
    }
    #[allow(unused_mut)]
    let mut scope_5151 = writer.prefix("IpPermissions");
    if let Some(var_5152) = &input.ip_permissions {
        let mut list_5154 = scope_5151.start_list(true, Some("item"));
        for item_5153 in var_5152 {
            #[allow(unused_mut)]
            let mut entry_5155 = list_5154.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5155, item_5153);
        }
        list_5154.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("DryRun");
    if let Some(var_5157) = &input.dry_run {
        scope_5156.boolean(*var_5157);
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("GroupId");
    if let Some(var_5159) = &input.group_id {
        scope_5158.string(var_5159);
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("GroupName");
    if let Some(var_5161) = &input.group_name {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("IpPermissions");
    if let Some(var_5163) = &input.ip_permissions {
        let mut list_5165 = scope_5162.start_list(true, Some("item"));
        for item_5164 in var_5163 {
            #[allow(unused_mut)]
            let mut entry_5166 = list_5165.entry();
            crate::query_ser::serialize_structure_ip_permission(entry_5166, item_5164);
        }
        list_5165.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5167 = writer.prefix("Cidr");
    if let Some(var_5168) = &input.cidr {
        scope_5167.string(var_5168);
    }
    #[allow(unused_mut)]
    let mut scope_5169 = writer.prefix("DryRun");
    if let Some(var_5170) = &input.dry_run {
        scope_5169.boolean(*var_5170);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
