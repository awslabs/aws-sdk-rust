// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_86) = &input.client_vpn_endpoint_id {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VpcId");
    if let Some(var_88) = &input.vpc_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SecurityGroupId");
    if let Some(var_90) = &input.security_group_ids {
        let mut list_92 = scope_89.start_list(true, Some("item"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DryRun");
    if let Some(var_95) = &input.dry_run {
        scope_94.boolean(*var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("Ipv6AddressCount");
    if let Some(var_97) = &input.ipv6_address_count {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("Ipv6Addresses");
    if let Some(var_99) = &input.ipv6_addresses {
        let mut list_101 = scope_98.start_list(true, Some("item"));
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            entry_102.string(item_100);
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_104) = &input.ipv6_prefix_count {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Ipv6Prefix");
    if let Some(var_106) = &input.ipv6_prefixes {
        let mut list_108 = scope_105.start_list(true, Some("item"));
        for item_107 in var_106 {
            #[allow(unused_mut)]
            let mut entry_109 = list_108.entry();
            entry_109.string(item_107);
        }
        list_108.finish();
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("NetworkInterfaceId");
    if let Some(var_111) = &input.network_interface_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("AllowReassignment");
    if let Some(var_113) = &input.allow_reassignment {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("NetworkInterfaceId");
    if let Some(var_115) = &input.network_interface_id {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("PrivateIpAddress");
    if let Some(var_117) = &input.private_ip_addresses {
        let mut list_119 = scope_116.start_list(true, Some("PrivateIpAddress"));
        for item_118 in var_117 {
            #[allow(unused_mut)]
            let mut entry_120 = list_119.entry();
            entry_120.string(item_118);
        }
        list_119.finish();
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_122) = &input.secondary_private_ip_address_count {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("Ipv4Prefix");
    if let Some(var_124) = &input.ipv4_prefixes {
        let mut list_126 = scope_123.start_list(true, Some("item"));
        for item_125 in var_124 {
            #[allow(unused_mut)]
            let mut entry_127 = list_126.entry();
            entry_127.string(item_125);
        }
        list_126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_129) = &input.ipv4_prefix_count {
        scope_128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("AllocationId");
    if let Some(var_131) = &input.allocation_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("InstanceId");
    if let Some(var_133) = &input.instance_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("PublicIp");
    if let Some(var_135) = &input.public_ip {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AllowReassociation");
    if let Some(var_137) = &input.allow_reassociation {
        scope_136.boolean(*var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("DryRun");
    if let Some(var_139) = &input.dry_run {
        scope_138.boolean(*var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("PrivateIpAddress");
    if let Some(var_143) = &input.private_ip_address {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_145) = &input.client_vpn_endpoint_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("SubnetId");
    if let Some(var_147) = &input.subnet_id {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ClientToken");
    if let Some(var_149) = &input.client_token {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("DryRun");
    if let Some(var_151) = &input.dry_run {
        scope_150.boolean(*var_151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("DhcpOptionsId");
    if let Some(var_153) = &input.dhcp_options_id {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("VpcId");
    if let Some(var_155) = &input.vpc_id {
        scope_154.string(var_155);
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DryRun");
    if let Some(var_157) = &input.dry_run {
        scope_156.boolean(*var_157);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("CertificateArn");
    if let Some(var_159) = &input.certificate_arn {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("RoleArn");
    if let Some(var_161) = &input.role_arn {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("DryRun");
    if let Some(var_163) = &input.dry_run {
        scope_162.boolean(*var_163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("IamInstanceProfile");
    if let Some(var_165) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_164, var_165,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("InstanceId");
    if let Some(var_167) = &input.instance_id {
        scope_166.string(var_167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("InstanceEventWindowId");
    if let Some(var_171) = &input.instance_event_window_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("AssociationTarget");
    if let Some(var_173) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_172, var_173)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("DryRun");
    if let Some(var_175) = &input.dry_run {
        scope_174.boolean(*var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("RouteTableId");
    if let Some(var_177) = &input.route_table_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("SubnetId");
    if let Some(var_179) = &input.subnet_id {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("GatewayId");
    if let Some(var_181) = &input.gateway_id {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_183) = &input.ipv6_cidr_block {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("SubnetId");
    if let Some(var_185) = &input.subnet_id {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_187) = &input.transit_gateway_multicast_domain_id {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_189) = &input.transit_gateway_attachment_id {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("SubnetIds");
    if let Some(var_191) = &input.subnet_ids {
        let mut list_193 = scope_190.start_list(true, Some("item"));
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            entry_194.string(item_192);
        }
        list_193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_198) = &input.transit_gateway_route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_200) = &input.transit_gateway_attachment_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DryRun");
    if let Some(var_202) = &input.dry_run {
        scope_201.boolean(*var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("BranchInterfaceId");
    if let Some(var_204) = &input.branch_interface_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TrunkInterfaceId");
    if let Some(var_206) = &input.trunk_interface_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("VlanId");
    if let Some(var_208) = &input.vlan_id {
        scope_207.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("GreKey");
    if let Some(var_210) = &input.gre_key {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("ClientToken");
    if let Some(var_212) = &input.client_token {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("DryRun");
    if let Some(var_214) = &input.dry_run {
        scope_213.boolean(*var_214);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_216) = &input.amazon_provided_ipv6_cidr_block {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("CidrBlock");
    if let Some(var_218) = &input.cidr_block {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("VpcId");
    if let Some(var_220) = &input.vpc_id {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_222) = &input.ipv6_cidr_block_network_border_group {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("Ipv6Pool");
    if let Some(var_224) = &input.ipv6_pool {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_226) = &input.ipv6_cidr_block {
        scope_225.string(var_226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("DryRun");
    if let Some(var_228) = &input.dry_run {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("SecurityGroupId");
    if let Some(var_230) = &input.groups {
        let mut list_232 = scope_229.start_list(true, Some("groupId"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            entry_233.string(item_231);
        }
        list_232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("VpcId");
    if let Some(var_237) = &input.vpc_id {
        scope_236.string(var_237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DryRun");
    if let Some(var_239) = &input.dry_run {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("InternetGatewayId");
    if let Some(var_241) = &input.internet_gateway_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("VpcId");
    if let Some(var_243) = &input.vpc_id {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DeviceIndex");
    if let Some(var_245) = &input.device_index {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DryRun");
    if let Some(var_247) = &input.dry_run {
        scope_246.boolean(*var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("InstanceId");
    if let Some(var_249) = &input.instance_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NetworkInterfaceId");
    if let Some(var_251) = &input.network_interface_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkCardIndex");
    if let Some(var_253) = &input.network_card_index {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Device");
    if let Some(var_255) = &input.device {
        scope_254.string(var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("InstanceId");
    if let Some(var_257) = &input.instance_id {
        scope_256.string(var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VolumeId");
    if let Some(var_259) = &input.volume_id {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DryRun");
    if let Some(var_261) = &input.dry_run {
        scope_260.boolean(*var_261);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("VpcId");
    if let Some(var_263) = &input.vpc_id {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("VpnGatewayId");
    if let Some(var_265) = &input.vpn_gateway_id {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("DryRun");
    if let Some(var_267) = &input.dry_run {
        scope_266.boolean(*var_267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_269) = &input.client_vpn_endpoint_id {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("TargetNetworkCidr");
    if let Some(var_271) = &input.target_network_cidr {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AccessGroupId");
    if let Some(var_273) = &input.access_group_id {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_275) = &input.authorize_all_groups {
        scope_274.boolean(*var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Description");
    if let Some(var_277) = &input.description {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ClientToken");
    if let Some(var_279) = &input.client_token {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("DryRun");
    if let Some(var_281) = &input.dry_run {
        scope_280.boolean(*var_281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("GroupId");
    if let Some(var_285) = &input.group_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IpPermissions");
    if let Some(var_287) = &input.ip_permissions {
        let mut list_289 = scope_286.start_list(true, Some("item"));
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_290, item_288)?;
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TagSpecification");
    if let Some(var_292) = &input.tag_specifications {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_295, item_293,
            )?;
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CidrIp");
    if let Some(var_297) = &input.cidr_ip {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("FromPort");
    if let Some(var_299) = &input.from_port {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("IpProtocol");
    if let Some(var_301) = &input.ip_protocol {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("ToPort");
    if let Some(var_303) = &input.to_port {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_305) = &input.source_security_group_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_307) = &input.source_security_group_owner_id {
        scope_306.string(var_307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("CidrIp");
    if let Some(var_309) = &input.cidr_ip {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FromPort");
    if let Some(var_311) = &input.from_port {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("GroupId");
    if let Some(var_313) = &input.group_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("GroupName");
    if let Some(var_315) = &input.group_name {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("IpPermissions");
    if let Some(var_317) = &input.ip_permissions {
        let mut list_319 = scope_316.start_list(true, Some("item"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_320, item_318)?;
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("IpProtocol");
    if let Some(var_322) = &input.ip_protocol {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_324) = &input.source_security_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_326) = &input.source_security_group_owner_id {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("ToPort");
    if let Some(var_328) = &input.to_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("DryRun");
    if let Some(var_330) = &input.dry_run {
        scope_329.boolean(*var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("TagSpecification");
    if let Some(var_332) = &input.tag_specifications {
        let mut list_334 = scope_331.start_list(true, Some("item"));
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_335, item_333,
            )?;
        }
        list_334.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("InstanceId");
    if let Some(var_337) = &input.instance_id {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Storage");
    if let Some(var_339) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_338, var_339)?;
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DryRun");
    if let Some(var_341) = &input.dry_run {
        scope_340.boolean(*var_341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("BundleId");
    if let Some(var_343) = &input.bundle_id {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DryRun");
    if let Some(var_345) = &input.dry_run {
        scope_344.boolean(*var_345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("CapacityReservationId");
    if let Some(var_347) = &input.capacity_reservation_id {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("DryRun");
    if let Some(var_349) = &input.dry_run {
        scope_348.boolean(*var_349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("DryRun");
    if let Some(var_351) = &input.dry_run {
        scope_350.boolean(*var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_353) = &input.capacity_reservation_fleet_ids {
        let mut list_355 = scope_352.start_list(true, Some("item"));
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            entry_356.string(item_354);
        }
        list_355.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ConversionTaskId");
    if let Some(var_358) = &input.conversion_task_id {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("DryRun");
    if let Some(var_360) = &input.dry_run {
        scope_359.boolean(*var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ReasonMessage");
    if let Some(var_362) = &input.reason_message {
        scope_361.string(var_362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("ExportTaskId");
    if let Some(var_364) = &input.export_task_id {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("CancelReason");
    if let Some(var_366) = &input.cancel_reason {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("ImportTaskId");
    if let Some(var_370) = &input.import_task_id {
        scope_369.string(var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_372) = &input.reserved_instances_listing_id {
        scope_371.string(var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("SpotFleetRequestId");
    if let Some(var_376) = &input.spot_fleet_request_ids {
        let mut list_378 = scope_375.start_list(true, Some("item"));
        for item_377 in var_376 {
            #[allow(unused_mut)]
            let mut entry_379 = list_378.entry();
            entry_379.string(item_377);
        }
        list_378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("TerminateInstances");
    if let Some(var_381) = &input.terminate_instances {
        scope_380.boolean(*var_381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DryRun");
    if let Some(var_383) = &input.dry_run {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_385) = &input.spot_instance_request_ids {
        let mut list_387 = scope_384.start_list(true, Some("SpotInstanceRequestId"));
        for item_386 in var_385 {
            #[allow(unused_mut)]
            let mut entry_388 = list_387.entry();
            entry_388.string(item_386);
        }
        list_387.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("InstanceId");
    if let Some(var_390) = &input.instance_id {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("ProductCode");
    if let Some(var_392) = &input.product_code {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("DryRun");
    if let Some(var_394) = &input.dry_run {
        scope_393.boolean(*var_394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("DryRun");
    if let Some(var_396) = &input.dry_run {
        scope_395.boolean(*var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("SourceFpgaImageId");
    if let Some(var_398) = &input.source_fpga_image_id {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("Description");
    if let Some(var_400) = &input.description {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Name");
    if let Some(var_402) = &input.name {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("SourceRegion");
    if let Some(var_404) = &input.source_region {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("ClientToken");
    if let Some(var_406) = &input.client_token {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("ClientToken");
    if let Some(var_408) = &input.client_token {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Description");
    if let Some(var_410) = &input.description {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Encrypted");
    if let Some(var_412) = &input.encrypted {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("KmsKeyId");
    if let Some(var_414) = &input.kms_key_id {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("Name");
    if let Some(var_416) = &input.name {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("SourceImageId");
    if let Some(var_418) = &input.source_image_id {
        scope_417.string(var_418);
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("SourceRegion");
    if let Some(var_420) = &input.source_region {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DestinationOutpostArn");
    if let Some(var_422) = &input.destination_outpost_arn {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("DryRun");
    if let Some(var_424) = &input.dry_run {
        scope_423.boolean(*var_424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Description");
    if let Some(var_426) = &input.description {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("DestinationOutpostArn");
    if let Some(var_428) = &input.destination_outpost_arn {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("DestinationRegion");
    if let Some(var_430) = &input.destination_region {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("Encrypted");
    if let Some(var_432) = &input.encrypted {
        scope_431.boolean(*var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("KmsKeyId");
    if let Some(var_434) = &input.kms_key_id {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("PresignedUrl");
    if let Some(var_436) = &input.presigned_url {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("SourceRegion");
    if let Some(var_438) = &input.source_region {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("SourceSnapshotId");
    if let Some(var_440) = &input.source_snapshot_id {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("TagSpecification");
    if let Some(var_442) = &input.tag_specifications {
        let mut list_444 = scope_441.start_list(true, Some("item"));
        for item_443 in var_442 {
            #[allow(unused_mut)]
            let mut entry_445 = list_444.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_445, item_443,
            )?;
        }
        list_444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("DryRun");
    if let Some(var_447) = &input.dry_run {
        scope_446.boolean(*var_447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("ClientToken");
    if let Some(var_449) = &input.client_token {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("InstanceType");
    if let Some(var_451) = &input.instance_type {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("InstancePlatform");
    if let Some(var_453) = &input.instance_platform {
        scope_452.string(var_453.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("AvailabilityZone");
    if let Some(var_455) = &input.availability_zone {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("AvailabilityZoneId");
    if let Some(var_457) = &input.availability_zone_id {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Tenancy");
    if let Some(var_459) = &input.tenancy {
        scope_458.string(var_459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("InstanceCount");
    if let Some(var_461) = &input.instance_count {
        scope_460.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_461).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("EbsOptimized");
    if let Some(var_463) = &input.ebs_optimized {
        scope_462.boolean(*var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("EphemeralStorage");
    if let Some(var_465) = &input.ephemeral_storage {
        scope_464.boolean(*var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("EndDate");
    if let Some(var_467) = &input.end_date {
        scope_466.date_time(var_467, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("EndDateType");
    if let Some(var_469) = &input.end_date_type {
        scope_468.string(var_469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_471) = &input.instance_match_criteria {
        scope_470.string(var_471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("TagSpecifications");
    if let Some(var_473) = &input.tag_specifications {
        let mut list_475 = scope_472.start_list(true, Some("item"));
        for item_474 in var_473 {
            #[allow(unused_mut)]
            let mut entry_476 = list_475.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_476, item_474,
            )?;
        }
        list_475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("DryRun");
    if let Some(var_478) = &input.dry_run {
        scope_477.boolean(*var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("OutpostArn");
    if let Some(var_480) = &input.outpost_arn {
        scope_479.string(var_480);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AllocationStrategy");
    if let Some(var_482) = &input.allocation_strategy {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("ClientToken");
    if let Some(var_484) = &input.client_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_486) = &input.instance_type_specifications {
        let mut list_488 = scope_485.start_list(true, None);
        for item_487 in var_486 {
            #[allow(unused_mut)]
            let mut entry_489 = list_488.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_489, item_487)?;
        }
        list_488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Tenancy");
    if let Some(var_491) = &input.tenancy {
        scope_490.string(var_491.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("TotalTargetCapacity");
    if let Some(var_493) = &input.total_target_capacity {
        scope_492.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("EndDate");
    if let Some(var_495) = &input.end_date {
        scope_494.date_time(var_495, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_497) = &input.instance_match_criteria {
        scope_496.string(var_497.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("TagSpecification");
    if let Some(var_499) = &input.tag_specifications {
        let mut list_501 = scope_498.start_list(true, Some("item"));
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_502, item_500,
            )?;
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("DryRun");
    if let Some(var_504) = &input.dry_run {
        scope_503.boolean(*var_504);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("VpcId");
    if let Some(var_506) = &input.vpc_id {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("TagSpecification");
    if let Some(var_508) = &input.tag_specifications {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_511, item_509,
            )?;
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("DryRun");
    if let Some(var_513) = &input.dry_run {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("ClientCidrBlock");
    if let Some(var_517) = &input.client_cidr_block {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("ServerCertificateArn");
    if let Some(var_519) = &input.server_certificate_arn {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Authentication");
    if let Some(var_521) = &input.authentication_options {
        let mut list_523 = scope_520.start_list(true, None);
        for item_522 in var_521 {
            #[allow(unused_mut)]
            let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_524, item_522,
            )?;
        }
        list_523.finish();
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("ConnectionLogOptions");
    if let Some(var_526) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_525, var_526,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("DnsServers");
    if let Some(var_528) = &input.dns_servers {
        let mut list_530 = scope_527.start_list(true, Some("item"));
        for item_529 in var_528 {
            #[allow(unused_mut)]
            let mut entry_531 = list_530.entry();
            entry_531.string(item_529);
        }
        list_530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("TransportProtocol");
    if let Some(var_533) = &input.transport_protocol {
        scope_532.string(var_533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("VpnPort");
    if let Some(var_535) = &input.vpn_port {
        scope_534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Description");
    if let Some(var_537) = &input.description {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("SplitTunnel");
    if let Some(var_539) = &input.split_tunnel {
        scope_538.boolean(*var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DryRun");
    if let Some(var_541) = &input.dry_run {
        scope_540.boolean(*var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("ClientToken");
    if let Some(var_543) = &input.client_token {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("TagSpecification");
    if let Some(var_545) = &input.tag_specifications {
        let mut list_547 = scope_544.start_list(true, Some("item"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_548, item_546,
            )?;
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("SecurityGroupId");
    if let Some(var_550) = &input.security_group_ids {
        let mut list_552 = scope_549.start_list(true, Some("item"));
        for item_551 in var_550 {
            #[allow(unused_mut)]
            let mut entry_553 = list_552.entry();
            entry_553.string(item_551);
        }
        list_552.finish();
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("VpcId");
    if let Some(var_555) = &input.vpc_id {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("SelfServicePortal");
    if let Some(var_557) = &input.self_service_portal {
        scope_556.string(var_557.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("ClientConnectOptions");
    if let Some(var_559) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_558, var_559,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_561) = &input.client_vpn_endpoint_id {
        scope_560.string(var_561);
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("DestinationCidrBlock");
    if let Some(var_563) = &input.destination_cidr_block {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_565) = &input.target_vpc_subnet_id {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Description");
    if let Some(var_567) = &input.description {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("ClientToken");
    if let Some(var_569) = &input.client_token {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("DryRun");
    if let Some(var_571) = &input.dry_run {
        scope_570.boolean(*var_571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("BgpAsn");
    if let Some(var_573) = &input.bgp_asn {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("IpAddress");
    if let Some(var_575) = &input.public_ip {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("CertificateArn");
    if let Some(var_577) = &input.certificate_arn {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Type");
    if let Some(var_579) = &input.r#type {
        scope_578.string(var_579.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("TagSpecification");
    if let Some(var_581) = &input.tag_specifications {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_584, item_582,
            )?;
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("DeviceName");
    if let Some(var_586) = &input.device_name {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DryRun");
    if let Some(var_588) = &input.dry_run {
        scope_587.boolean(*var_588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("AvailabilityZone");
    if let Some(var_590) = &input.availability_zone {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("DryRun");
    if let Some(var_592) = &input.dry_run {
        scope_591.boolean(*var_592);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("DryRun");
    if let Some(var_594) = &input.dry_run {
        scope_593.boolean(*var_594);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("DhcpConfiguration");
    if let Some(var_596) = &input.dhcp_configurations {
        let mut list_598 = scope_595.start_list(true, Some("item"));
        for item_597 in var_596 {
            #[allow(unused_mut)]
            let mut entry_599 = list_598.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_599, item_597,
            )?;
        }
        list_598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("TagSpecification");
    if let Some(var_601) = &input.tag_specifications {
        let mut list_603 = scope_600.start_list(true, Some("item"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_604, item_602,
            )?;
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("ClientToken");
    if let Some(var_608) = &input.client_token {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DryRun");
    if let Some(var_610) = &input.dry_run {
        scope_609.boolean(*var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("VpcId");
    if let Some(var_612) = &input.vpc_id {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("TagSpecification");
    if let Some(var_614) = &input.tag_specifications {
        let mut list_616 = scope_613.start_list(true, Some("item"));
        for item_615 in var_614 {
            #[allow(unused_mut)]
            let mut entry_617 = list_616.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_617, item_615,
            )?;
        }
        list_616.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DryRun");
    if let Some(var_619) = &input.dry_run {
        scope_618.boolean(*var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ClientToken");
    if let Some(var_621) = &input.client_token {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("SpotOptions");
    if let Some(var_623) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_622, var_623)?;
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("OnDemandOptions");
    if let Some(var_625) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_624, var_625,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_627) = &input.excess_capacity_termination_policy {
        scope_626.string(var_627.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_629) = &input.launch_template_configs {
        let mut list_631 = scope_628.start_list(true, Some("item"));
        for item_630 in var_629 {
            #[allow(unused_mut)]
            let mut entry_632 = list_631.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_632, item_630,
            )?;
        }
        list_631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_634) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_633, var_634,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_636) = &input.terminate_instances_with_expiration {
        scope_635.boolean(*var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("Type");
    if let Some(var_638) = &input.r#type {
        scope_637.string(var_638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("ValidFrom");
    if let Some(var_640) = &input.valid_from {
        scope_639.date_time(var_640, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("ValidUntil");
    if let Some(var_642) = &input.valid_until {
        scope_641.date_time(var_642, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_644) = &input.replace_unhealthy_instances {
        scope_643.boolean(*var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("TagSpecification");
    if let Some(var_646) = &input.tag_specifications {
        let mut list_648 = scope_645.start_list(true, Some("item"));
        for item_647 in var_646 {
            #[allow(unused_mut)]
            let mut entry_649 = list_648.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_649, item_647,
            )?;
        }
        list_648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("Context");
    if let Some(var_651) = &input.context {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DryRun");
    if let Some(var_653) = &input.dry_run {
        scope_652.boolean(*var_653);
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("ClientToken");
    if let Some(var_655) = &input.client_token {
        scope_654.string(var_655);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_657) = &input.deliver_logs_permission_arn {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("LogGroupName");
    if let Some(var_659) = &input.log_group_name {
        scope_658.string(var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("ResourceId");
    if let Some(var_661) = &input.resource_ids {
        let mut list_663 = scope_660.start_list(true, Some("item"));
        for item_662 in var_661 {
            #[allow(unused_mut)]
            let mut entry_664 = list_663.entry();
            entry_664.string(item_662);
        }
        list_663.finish();
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ResourceType");
    if let Some(var_666) = &input.resource_type {
        scope_665.string(var_666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("TrafficType");
    if let Some(var_668) = &input.traffic_type {
        scope_667.string(var_668.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("LogDestinationType");
    if let Some(var_670) = &input.log_destination_type {
        scope_669.string(var_670.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("LogDestination");
    if let Some(var_672) = &input.log_destination {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("LogFormat");
    if let Some(var_674) = &input.log_format {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("TagSpecification");
    if let Some(var_676) = &input.tag_specifications {
        let mut list_678 = scope_675.start_list(true, Some("item"));
        for item_677 in var_676 {
            #[allow(unused_mut)]
            let mut entry_679 = list_678.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_679, item_677,
            )?;
        }
        list_678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("MaxAggregationInterval");
    if let Some(var_681) = &input.max_aggregation_interval {
        scope_680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("DestinationOptions");
    if let Some(var_683) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_682, var_683,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("DryRun");
    if let Some(var_685) = &input.dry_run {
        scope_684.boolean(*var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("InputStorageLocation");
    if let Some(var_687) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_686, var_687)?;
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("LogsStorageLocation");
    if let Some(var_689) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_688, var_689)?;
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("Description");
    if let Some(var_691) = &input.description {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("Name");
    if let Some(var_693) = &input.name {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("ClientToken");
    if let Some(var_695) = &input.client_token {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("TagSpecification");
    if let Some(var_697) = &input.tag_specifications {
        let mut list_699 = scope_696.start_list(true, Some("item"));
        for item_698 in var_697 {
            #[allow(unused_mut)]
            let mut entry_700 = list_699.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_700, item_698,
            )?;
        }
        list_699.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("BlockDeviceMapping");
    if let Some(var_702) = &input.block_device_mappings {
        let mut list_704 = scope_701.start_list(true, Some("BlockDeviceMapping"));
        for item_703 in var_702 {
            #[allow(unused_mut)]
            let mut entry_705 = list_704.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_705, item_703,
            )?;
        }
        list_704.finish();
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("Description");
    if let Some(var_707) = &input.description {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DryRun");
    if let Some(var_709) = &input.dry_run {
        scope_708.boolean(*var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("InstanceId");
    if let Some(var_711) = &input.instance_id {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("Name");
    if let Some(var_713) = &input.name {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("NoReboot");
    if let Some(var_715) = &input.no_reboot {
        scope_714.boolean(*var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TagSpecification");
    if let Some(var_717) = &input.tag_specifications {
        let mut list_719 = scope_716.start_list(true, Some("item"));
        for item_718 in var_717 {
            #[allow(unused_mut)]
            let mut entry_720 = list_719.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_720, item_718,
            )?;
        }
        list_719.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DryRun");
    if let Some(var_722) = &input.dry_run {
        scope_721.boolean(*var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("Name");
    if let Some(var_724) = &input.name {
        scope_723.string(var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("TimeRange");
    if let Some(var_726) = &input.time_ranges {
        let mut list_728 = scope_725.start_list(true, None);
        for item_727 in var_726 {
            #[allow(unused_mut)]
            let mut entry_729 = list_728.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_729, item_727)?;
        }
        list_728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("CronExpression");
    if let Some(var_731) = &input.cron_expression {
        scope_730.string(var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("TagSpecification");
    if let Some(var_733) = &input.tag_specifications {
        let mut list_735 = scope_732.start_list(true, Some("item"));
        for item_734 in var_733 {
            #[allow(unused_mut)]
            let mut entry_736 = list_735.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_736, item_734,
            )?;
        }
        list_735.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Description");
    if let Some(var_738) = &input.description {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("ExportToS3");
    if let Some(var_740) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_739, var_740,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("InstanceId");
    if let Some(var_742) = &input.instance_id {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("TargetEnvironment");
    if let Some(var_744) = &input.target_environment {
        scope_743.string(var_744.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("TagSpecification");
    if let Some(var_746) = &input.tag_specifications {
        let mut list_748 = scope_745.start_list(true, Some("item"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_749, item_747,
            )?;
        }
        list_748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("TagSpecification");
    if let Some(var_751) = &input.tag_specifications {
        let mut list_753 = scope_750.start_list(true, Some("item"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_754, item_752,
            )?;
        }
        list_753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("DryRun");
    if let Some(var_756) = &input.dry_run {
        scope_755.boolean(*var_756);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("KeyName");
    if let Some(var_758) = &input.key_name {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("DryRun");
    if let Some(var_760) = &input.dry_run {
        scope_759.boolean(*var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("KeyType");
    if let Some(var_762) = &input.key_type {
        scope_761.string(var_762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("TagSpecification");
    if let Some(var_764) = &input.tag_specifications {
        let mut list_766 = scope_763.start_list(true, Some("item"));
        for item_765 in var_764 {
            #[allow(unused_mut)]
            let mut entry_767 = list_766.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_767, item_765,
            )?;
        }
        list_766.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("DryRun");
    if let Some(var_769) = &input.dry_run {
        scope_768.boolean(*var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("ClientToken");
    if let Some(var_771) = &input.client_token {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("LaunchTemplateName");
    if let Some(var_773) = &input.launch_template_name {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("VersionDescription");
    if let Some(var_775) = &input.version_description {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("LaunchTemplateData");
    if let Some(var_777) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_776, var_777,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("TagSpecification");
    if let Some(var_779) = &input.tag_specifications {
        let mut list_781 = scope_778.start_list(true, Some("item"));
        for item_780 in var_779 {
            #[allow(unused_mut)]
            let mut entry_782 = list_781.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_782, item_780,
            )?;
        }
        list_781.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("DryRun");
    if let Some(var_784) = &input.dry_run {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("ClientToken");
    if let Some(var_786) = &input.client_token {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("LaunchTemplateId");
    if let Some(var_788) = &input.launch_template_id {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("LaunchTemplateName");
    if let Some(var_790) = &input.launch_template_name {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("SourceVersion");
    if let Some(var_792) = &input.source_version {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("VersionDescription");
    if let Some(var_794) = &input.version_description {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("LaunchTemplateData");
    if let Some(var_796) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_795, var_796,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("DestinationCidrBlock");
    if let Some(var_798) = &input.destination_cidr_block {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_800) = &input.local_gateway_route_table_id {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_802) = &input.local_gateway_virtual_interface_group_id {
        scope_801.string(var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("DryRun");
    if let Some(var_804) = &input.dry_run {
        scope_803.boolean(*var_804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_806) = &input.local_gateway_route_table_id {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("VpcId");
    if let Some(var_808) = &input.vpc_id {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("TagSpecification");
    if let Some(var_810) = &input.tag_specifications {
        let mut list_812 = scope_809.start_list(true, Some("item"));
        for item_811 in var_810 {
            #[allow(unused_mut)]
            let mut entry_813 = list_812.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_813, item_811,
            )?;
        }
        list_812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("DryRun");
    if let Some(var_815) = &input.dry_run {
        scope_814.boolean(*var_815);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("DryRun");
    if let Some(var_817) = &input.dry_run {
        scope_816.boolean(*var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("PrefixListName");
    if let Some(var_819) = &input.prefix_list_name {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Entry");
    if let Some(var_821) = &input.entries {
        let mut list_823 = scope_820.start_list(true, None);
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_824, item_822,
            )?;
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("MaxEntries");
    if let Some(var_826) = &input.max_entries {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("TagSpecification");
    if let Some(var_828) = &input.tag_specifications {
        let mut list_830 = scope_827.start_list(true, Some("item"));
        for item_829 in var_828 {
            #[allow(unused_mut)]
            let mut entry_831 = list_830.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_831, item_829,
            )?;
        }
        list_830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AddressFamily");
    if let Some(var_833) = &input.address_family {
        scope_832.string(var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ClientToken");
    if let Some(var_835) = &input.client_token {
        scope_834.string(var_835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("AllocationId");
    if let Some(var_837) = &input.allocation_id {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("ClientToken");
    if let Some(var_839) = &input.client_token {
        scope_838.string(var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("DryRun");
    if let Some(var_841) = &input.dry_run {
        scope_840.boolean(*var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("SubnetId");
    if let Some(var_843) = &input.subnet_id {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("TagSpecification");
    if let Some(var_845) = &input.tag_specifications {
        let mut list_847 = scope_844.start_list(true, Some("item"));
        for item_846 in var_845 {
            #[allow(unused_mut)]
            let mut entry_848 = list_847.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_848, item_846,
            )?;
        }
        list_847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("ConnectivityType");
    if let Some(var_850) = &input.connectivity_type {
        scope_849.string(var_850.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("DryRun");
    if let Some(var_852) = &input.dry_run {
        scope_851.boolean(*var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("VpcId");
    if let Some(var_854) = &input.vpc_id {
        scope_853.string(var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("TagSpecification");
    if let Some(var_856) = &input.tag_specifications {
        let mut list_858 = scope_855.start_list(true, Some("item"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_859, item_857,
            )?;
        }
        list_858.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("CidrBlock");
    if let Some(var_861) = &input.cidr_block {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("DryRun");
    if let Some(var_863) = &input.dry_run {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Egress");
    if let Some(var_865) = &input.egress {
        scope_864.boolean(*var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("Icmp");
    if let Some(var_867) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_866, var_867)?;
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_869) = &input.ipv6_cidr_block {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("NetworkAclId");
    if let Some(var_871) = &input.network_acl_id {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("PortRange");
    if let Some(var_873) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_872, var_873)?;
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("Protocol");
    if let Some(var_875) = &input.protocol {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("RuleAction");
    if let Some(var_877) = &input.rule_action {
        scope_876.string(var_877.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("RuleNumber");
    if let Some(var_879) = &input.rule_number {
        scope_878.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_879).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("SourceIp");
    if let Some(var_881) = &input.source_ip {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("DestinationIp");
    if let Some(var_883) = &input.destination_ip {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("Source");
    if let Some(var_885) = &input.source {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Destination");
    if let Some(var_887) = &input.destination {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("Protocol");
    if let Some(var_889) = &input.protocol {
        scope_888.string(var_889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("DestinationPort");
    if let Some(var_891) = &input.destination_port {
        scope_890.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("TagSpecification");
    if let Some(var_893) = &input.tag_specifications {
        let mut list_895 = scope_892.start_list(true, Some("item"));
        for item_894 in var_893 {
            #[allow(unused_mut)]
            let mut entry_896 = list_895.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_896, item_894,
            )?;
        }
        list_895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DryRun");
    if let Some(var_898) = &input.dry_run {
        scope_897.boolean(*var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("ClientToken");
    if let Some(var_900) = &input.client_token {
        scope_899.string(var_900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("Description");
    if let Some(var_902) = &input.description {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DryRun");
    if let Some(var_904) = &input.dry_run {
        scope_903.boolean(*var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("SecurityGroupId");
    if let Some(var_906) = &input.groups {
        let mut list_908 = scope_905.start_list(true, Some("SecurityGroupId"));
        for item_907 in var_906 {
            #[allow(unused_mut)]
            let mut entry_909 = list_908.entry();
            entry_909.string(item_907);
        }
        list_908.finish();
    }
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("Ipv6AddressCount");
    if let Some(var_911) = &input.ipv6_address_count {
        scope_910.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_911).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("Ipv6Addresses");
    if let Some(var_913) = &input.ipv6_addresses {
        let mut list_915 = scope_912.start_list(true, Some("item"));
        for item_914 in var_913 {
            #[allow(unused_mut)]
            let mut entry_916 = list_915.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_916, item_914,
            )?;
        }
        list_915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("PrivateIpAddress");
    if let Some(var_918) = &input.private_ip_address {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("PrivateIpAddresses");
    if let Some(var_920) = &input.private_ip_addresses {
        let mut list_922 = scope_919.start_list(true, Some("item"));
        for item_921 in var_920 {
            #[allow(unused_mut)]
            let mut entry_923 = list_922.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_923, item_921,
            )?;
        }
        list_922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_925) = &input.secondary_private_ip_address_count {
        scope_924.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_925).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Ipv4Prefix");
    if let Some(var_927) = &input.ipv4_prefixes {
        let mut list_929 = scope_926.start_list(true, Some("item"));
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_930, item_928,
            )?;
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_932) = &input.ipv4_prefix_count {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Ipv6Prefix");
    if let Some(var_934) = &input.ipv6_prefixes {
        let mut list_936 = scope_933.start_list(true, Some("item"));
        for item_935 in var_934 {
            #[allow(unused_mut)]
            let mut entry_937 = list_936.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_937, item_935,
            )?;
        }
        list_936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_939) = &input.ipv6_prefix_count {
        scope_938.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_939).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("InterfaceType");
    if let Some(var_941) = &input.interface_type {
        scope_940.string(var_941.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("SubnetId");
    if let Some(var_943) = &input.subnet_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("TagSpecification");
    if let Some(var_945) = &input.tag_specifications {
        let mut list_947 = scope_944.start_list(true, Some("item"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_948, item_946,
            )?;
        }
        list_947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ClientToken");
    if let Some(var_950) = &input.client_token {
        scope_949.string(var_950);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("NetworkInterfaceId");
    if let Some(var_952) = &input.network_interface_id {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("AwsAccountId");
    if let Some(var_954) = &input.aws_account_id {
        scope_953.string(var_954);
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("AwsService");
    if let Some(var_956) = &input.aws_service {
        scope_955.string(var_956);
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("Permission");
    if let Some(var_958) = &input.permission {
        scope_957.string(var_958.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("DryRun");
    if let Some(var_960) = &input.dry_run {
        scope_959.boolean(*var_960);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("DryRun");
    if let Some(var_962) = &input.dry_run {
        scope_961.boolean(*var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("GroupName");
    if let Some(var_964) = &input.group_name {
        scope_963.string(var_964);
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Strategy");
    if let Some(var_966) = &input.strategy {
        scope_965.string(var_966.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("PartitionCount");
    if let Some(var_968) = &input.partition_count {
        scope_967.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_968).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("TagSpecification");
    if let Some(var_970) = &input.tag_specifications {
        let mut list_972 = scope_969.start_list(true, Some("item"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_973, item_971,
            )?;
        }
        list_972.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("InstanceId");
    if let Some(var_975) = &input.instance_id {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("SnapshotId");
    if let Some(var_977) = &input.snapshot_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("ClientToken");
    if let Some(var_979) = &input.client_token {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("DryRun");
    if let Some(var_981) = &input.dry_run {
        scope_980.boolean(*var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("TagSpecification");
    if let Some(var_983) = &input.tag_specifications {
        let mut list_985 = scope_982.start_list(true, Some("item"));
        for item_984 in var_983 {
            #[allow(unused_mut)]
            let mut entry_986 = list_985.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_986, item_984,
            )?;
        }
        list_985.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("ClientToken");
    if let Some(var_988) = &input.client_token {
        scope_987.string(var_988);
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("InstanceCount");
    if let Some(var_990) = &input.instance_count {
        scope_989.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_990).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("PriceSchedules");
    if let Some(var_992) = &input.price_schedules {
        let mut list_994 = scope_991.start_list(true, Some("item"));
        for item_993 in var_992 {
            #[allow(unused_mut)]
            let mut entry_995 = list_994.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_995, item_993,
            )?;
        }
        list_994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ReservedInstancesId");
    if let Some(var_997) = &input.reserved_instances_id {
        scope_996.string(var_997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("Bucket");
    if let Some(var_999) = &input.bucket {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("ObjectKey");
    if let Some(var_1001) = &input.object_key {
        scope_1000.string(var_1001);
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("Name");
    if let Some(var_1003) = &input.name {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("TagSpecification");
    if let Some(var_1005) = &input.tag_specifications {
        let mut list_1007 = scope_1004.start_list(true, Some("item"));
        for item_1006 in var_1005 {
            #[allow(unused_mut)]
            let mut entry_1008 = list_1007.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1008, item_1006,
            )?;
        }
        list_1007.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("DryRun");
    if let Some(var_1010) = &input.dry_run {
        scope_1009.boolean(*var_1010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1012) = &input.destination_cidr_block {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1014) = &input.destination_ipv6_cidr_block {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1016) = &input.destination_prefix_list_id {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("DryRun");
    if let Some(var_1018) = &input.dry_run {
        scope_1017.boolean(*var_1018);
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("VpcEndpointId");
    if let Some(var_1020) = &input.vpc_endpoint_id {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1022) = &input.egress_only_internet_gateway_id {
        scope_1021.string(var_1022);
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("GatewayId");
    if let Some(var_1024) = &input.gateway_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("InstanceId");
    if let Some(var_1026) = &input.instance_id {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("NatGatewayId");
    if let Some(var_1028) = &input.nat_gateway_id {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("TransitGatewayId");
    if let Some(var_1030) = &input.transit_gateway_id {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("LocalGatewayId");
    if let Some(var_1032) = &input.local_gateway_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("CarrierGatewayId");
    if let Some(var_1034) = &input.carrier_gateway_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1036) = &input.network_interface_id {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("RouteTableId");
    if let Some(var_1038) = &input.route_table_id {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1040) = &input.vpc_peering_connection_id {
        scope_1039.string(var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("CoreNetworkArn");
    if let Some(var_1042) = &input.core_network_arn {
        scope_1041.string(var_1042);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("DryRun");
    if let Some(var_1044) = &input.dry_run {
        scope_1043.boolean(*var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("VpcId");
    if let Some(var_1046) = &input.vpc_id {
        scope_1045.string(var_1046);
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("TagSpecification");
    if let Some(var_1048) = &input.tag_specifications {
        let mut list_1050 = scope_1047.start_list(true, Some("item"));
        for item_1049 in var_1048 {
            #[allow(unused_mut)]
            let mut entry_1051 = list_1050.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1051, item_1049,
            )?;
        }
        list_1050.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("GroupDescription");
    if let Some(var_1053) = &input.description {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("GroupName");
    if let Some(var_1055) = &input.group_name {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("VpcId");
    if let Some(var_1057) = &input.vpc_id {
        scope_1056.string(var_1057);
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("TagSpecification");
    if let Some(var_1059) = &input.tag_specifications {
        let mut list_1061 = scope_1058.start_list(true, Some("item"));
        for item_1060 in var_1059 {
            #[allow(unused_mut)]
            let mut entry_1062 = list_1061.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1062, item_1060,
            )?;
        }
        list_1061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("DryRun");
    if let Some(var_1064) = &input.dry_run {
        scope_1063.boolean(*var_1064);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("Description");
    if let Some(var_1066) = &input.description {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("OutpostArn");
    if let Some(var_1068) = &input.outpost_arn {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("VolumeId");
    if let Some(var_1070) = &input.volume_id {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("TagSpecification");
    if let Some(var_1072) = &input.tag_specifications {
        let mut list_1074 = scope_1071.start_list(true, Some("item"));
        for item_1073 in var_1072 {
            #[allow(unused_mut)]
            let mut entry_1075 = list_1074.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1075, item_1073,
            )?;
        }
        list_1074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("DryRun");
    if let Some(var_1077) = &input.dry_run {
        scope_1076.boolean(*var_1077);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Description");
    if let Some(var_1079) = &input.description {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("InstanceSpecification");
    if let Some(var_1081) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1080, var_1081,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("OutpostArn");
    if let Some(var_1083) = &input.outpost_arn {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("TagSpecification");
    if let Some(var_1085) = &input.tag_specifications {
        let mut list_1087 = scope_1084.start_list(true, Some("item"));
        for item_1086 in var_1085 {
            #[allow(unused_mut)]
            let mut entry_1088 = list_1087.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1088, item_1086,
            )?;
        }
        list_1087.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("DryRun");
    if let Some(var_1090) = &input.dry_run {
        scope_1089.boolean(*var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1092) = &input.copy_tags_from_source {
        scope_1091.string(var_1092.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("Bucket");
    if let Some(var_1094) = &input.bucket {
        scope_1093.string(var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("DryRun");
    if let Some(var_1096) = &input.dry_run {
        scope_1095.boolean(*var_1096);
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("Prefix");
    if let Some(var_1098) = &input.prefix {
        scope_1097.string(var_1098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("ImageId");
    if let Some(var_1100) = &input.image_id {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("Bucket");
    if let Some(var_1102) = &input.bucket {
        scope_1101.string(var_1102);
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("S3ObjectTag");
    if let Some(var_1104) = &input.s3_object_tags {
        let mut list_1106 = scope_1103.start_list(true, Some("item"));
        for item_1105 in var_1104 {
            #[allow(unused_mut)]
            let mut entry_1107 = list_1106.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1107, item_1105)?;
        }
        list_1106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("DryRun");
    if let Some(var_1109) = &input.dry_run {
        scope_1108.boolean(*var_1109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("TagSpecification");
    if let Some(var_1111) = &input.tag_specifications {
        let mut list_1113 = scope_1110.start_list(true, Some("item"));
        for item_1112 in var_1111 {
            #[allow(unused_mut)]
            let mut entry_1114 = list_1113.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1114, item_1112,
            )?;
        }
        list_1113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("AvailabilityZone");
    if let Some(var_1116) = &input.availability_zone {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1118) = &input.availability_zone_id {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("CidrBlock");
    if let Some(var_1120) = &input.cidr_block {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1122) = &input.ipv6_cidr_block {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("OutpostArn");
    if let Some(var_1124) = &input.outpost_arn {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("VpcId");
    if let Some(var_1126) = &input.vpc_id {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("DryRun");
    if let Some(var_1128) = &input.dry_run {
        scope_1127.boolean(*var_1128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("TagSpecification");
    if let Some(var_1130) = &input.tag_specifications {
        let mut list_1132 = scope_1129.start_list(true, Some("item"));
        for item_1131 in var_1130 {
            #[allow(unused_mut)]
            let mut entry_1133 = list_1132.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1133, item_1131,
            )?;
        }
        list_1132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("SubnetId");
    if let Some(var_1135) = &input.subnet_id {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("Cidr");
    if let Some(var_1137) = &input.cidr {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("ReservationType");
    if let Some(var_1139) = &input.reservation_type {
        scope_1138.string(var_1139.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("Description");
    if let Some(var_1141) = &input.description {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("DryRun");
    if let Some(var_1143) = &input.dry_run {
        scope_1142.boolean(*var_1143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("DryRun");
    if let Some(var_1145) = &input.dry_run {
        scope_1144.boolean(*var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("ResourceId");
    if let Some(var_1147) = &input.resources {
        let mut list_1149 = scope_1146.start_list(true, None);
        for item_1148 in var_1147 {
            #[allow(unused_mut)]
            let mut entry_1150 = list_1149.entry();
            entry_1150.string(item_1148);
        }
        list_1149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Tag");
    if let Some(var_1152) = &input.tags {
        let mut list_1154 = scope_1151.start_list(true, Some("item"));
        for item_1153 in var_1152 {
            #[allow(unused_mut)]
            let mut entry_1155 = list_1154.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1155, item_1153)?;
        }
        list_1154.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("Description");
    if let Some(var_1157) = &input.description {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("TagSpecification");
    if let Some(var_1159) = &input.tag_specifications {
        let mut list_1161 = scope_1158.start_list(true, Some("item"));
        for item_1160 in var_1159 {
            #[allow(unused_mut)]
            let mut entry_1162 = list_1161.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1162, item_1160,
            )?;
        }
        list_1161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("DryRun");
    if let Some(var_1164) = &input.dry_run {
        scope_1163.boolean(*var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("ClientToken");
    if let Some(var_1166) = &input.client_token {
        scope_1165.string(var_1166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1168) = &input.traffic_mirror_filter_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("TrafficDirection");
    if let Some(var_1170) = &input.traffic_direction {
        scope_1169.string(var_1170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("RuleNumber");
    if let Some(var_1172) = &input.rule_number {
        scope_1171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("RuleAction");
    if let Some(var_1174) = &input.rule_action {
        scope_1173.string(var_1174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("DestinationPortRange");
    if let Some(var_1176) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1175, var_1176,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("SourcePortRange");
    if let Some(var_1178) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1177, var_1178,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("Protocol");
    if let Some(var_1180) = &input.protocol {
        scope_1179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1182) = &input.destination_cidr_block {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("SourceCidrBlock");
    if let Some(var_1184) = &input.source_cidr_block {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("Description");
    if let Some(var_1186) = &input.description {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("DryRun");
    if let Some(var_1188) = &input.dry_run {
        scope_1187.boolean(*var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("ClientToken");
    if let Some(var_1190) = &input.client_token {
        scope_1189.string(var_1190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1192) = &input.network_interface_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1194) = &input.traffic_mirror_target_id {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1196) = &input.traffic_mirror_filter_id {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("PacketLength");
    if let Some(var_1198) = &input.packet_length {
        scope_1197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("SessionNumber");
    if let Some(var_1200) = &input.session_number {
        scope_1199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("VirtualNetworkId");
    if let Some(var_1202) = &input.virtual_network_id {
        scope_1201.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1202).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("Description");
    if let Some(var_1204) = &input.description {
        scope_1203.string(var_1204);
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("TagSpecification");
    if let Some(var_1206) = &input.tag_specifications {
        let mut list_1208 = scope_1205.start_list(true, Some("item"));
        for item_1207 in var_1206 {
            #[allow(unused_mut)]
            let mut entry_1209 = list_1208.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1209, item_1207,
            )?;
        }
        list_1208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("DryRun");
    if let Some(var_1211) = &input.dry_run {
        scope_1210.boolean(*var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("ClientToken");
    if let Some(var_1213) = &input.client_token {
        scope_1212.string(var_1213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1215) = &input.network_interface_id {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1217) = &input.network_load_balancer_arn {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Description");
    if let Some(var_1219) = &input.description {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("TagSpecification");
    if let Some(var_1221) = &input.tag_specifications {
        let mut list_1223 = scope_1220.start_list(true, Some("item"));
        for item_1222 in var_1221 {
            #[allow(unused_mut)]
            let mut entry_1224 = list_1223.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1224, item_1222,
            )?;
        }
        list_1223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("DryRun");
    if let Some(var_1226) = &input.dry_run {
        scope_1225.boolean(*var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("ClientToken");
    if let Some(var_1228) = &input.client_token {
        scope_1227.string(var_1228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("Description");
    if let Some(var_1230) = &input.description {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("Options");
    if let Some(var_1232) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1231, var_1232,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("TagSpecification");
    if let Some(var_1234) = &input.tag_specifications {
        let mut list_1236 = scope_1233.start_list(true, Some("item"));
        for item_1235 in var_1234 {
            #[allow(unused_mut)]
            let mut entry_1237 = list_1236.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1237, item_1235,
            )?;
        }
        list_1236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("DryRun");
    if let Some(var_1239) = &input.dry_run {
        scope_1238.boolean(*var_1239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1241) = &input.transport_transit_gateway_attachment_id {
        scope_1240.string(var_1241);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("Options");
    if let Some(var_1243) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1242, var_1243)?;
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("TagSpecification");
    if let Some(var_1245) = &input.tag_specifications {
        let mut list_1247 = scope_1244.start_list(true, Some("item"));
        for item_1246 in var_1245 {
            #[allow(unused_mut)]
            let mut entry_1248 = list_1247.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1248, item_1246,
            )?;
        }
        list_1247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("DryRun");
    if let Some(var_1250) = &input.dry_run {
        scope_1249.boolean(*var_1250);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1252) = &input.transit_gateway_attachment_id {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1254) = &input.transit_gateway_address {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("PeerAddress");
    if let Some(var_1256) = &input.peer_address {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("BgpOptions");
    if let Some(var_1258) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1257, var_1258)?;
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1260) = &input.inside_cidr_blocks {
        let mut list_1262 = scope_1259.start_list(true, Some("item"));
        for item_1261 in var_1260 {
            #[allow(unused_mut)]
            let mut entry_1263 = list_1262.entry();
            entry_1263.string(item_1261);
        }
        list_1262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("TagSpecification");
    if let Some(var_1265) = &input.tag_specifications {
        let mut list_1267 = scope_1264.start_list(true, Some("item"));
        for item_1266 in var_1265 {
            #[allow(unused_mut)]
            let mut entry_1268 = list_1267.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1268, item_1266,
            )?;
        }
        list_1267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("DryRun");
    if let Some(var_1270) = &input.dry_run {
        scope_1269.boolean(*var_1270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("TransitGatewayId");
    if let Some(var_1272) = &input.transit_gateway_id {
        scope_1271.string(var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("Options");
    if let Some(var_1274) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1273, var_1274)?;
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("TagSpecification");
    if let Some(var_1276) = &input.tag_specifications {
        let mut list_1278 = scope_1275.start_list(true, Some("item"));
        for item_1277 in var_1276 {
            #[allow(unused_mut)]
            let mut entry_1279 = list_1278.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1279, item_1277,
            )?;
        }
        list_1278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("DryRun");
    if let Some(var_1281) = &input.dry_run {
        scope_1280.boolean(*var_1281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("TransitGatewayId");
    if let Some(var_1283) = &input.transit_gateway_id {
        scope_1282.string(var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1285) = &input.peer_transit_gateway_id {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("PeerAccountId");
    if let Some(var_1287) = &input.peer_account_id {
        scope_1286.string(var_1287);
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("PeerRegion");
    if let Some(var_1289) = &input.peer_region {
        scope_1288.string(var_1289);
    }
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("TagSpecification");
    if let Some(var_1291) = &input.tag_specifications {
        let mut list_1293 = scope_1290.start_list(true, Some("item"));
        for item_1292 in var_1291 {
            #[allow(unused_mut)]
            let mut entry_1294 = list_1293.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1294, item_1292,
            )?;
        }
        list_1293.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("DryRun");
    if let Some(var_1296) = &input.dry_run {
        scope_1295.boolean(*var_1296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1298) = &input.transit_gateway_route_table_id {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("PrefixListId");
    if let Some(var_1300) = &input.prefix_list_id {
        scope_1299.string(var_1300);
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1302) = &input.transit_gateway_attachment_id {
        scope_1301.string(var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("Blackhole");
    if let Some(var_1304) = &input.blackhole {
        scope_1303.boolean(*var_1304);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("DryRun");
    if let Some(var_1306) = &input.dry_run {
        scope_1305.boolean(*var_1306);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1308) = &input.destination_cidr_block {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1310) = &input.transit_gateway_route_table_id {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1312) = &input.transit_gateway_attachment_id {
        scope_1311.string(var_1312);
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Blackhole");
    if let Some(var_1314) = &input.blackhole {
        scope_1313.boolean(*var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("DryRun");
    if let Some(var_1316) = &input.dry_run {
        scope_1315.boolean(*var_1316);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("TransitGatewayId");
    if let Some(var_1318) = &input.transit_gateway_id {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("TagSpecifications");
    if let Some(var_1320) = &input.tag_specifications {
        let mut list_1322 = scope_1319.start_list(true, Some("item"));
        for item_1321 in var_1320 {
            #[allow(unused_mut)]
            let mut entry_1323 = list_1322.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1323, item_1321,
            )?;
        }
        list_1322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("DryRun");
    if let Some(var_1325) = &input.dry_run {
        scope_1324.boolean(*var_1325);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("TransitGatewayId");
    if let Some(var_1327) = &input.transit_gateway_id {
        scope_1326.string(var_1327);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("VpcId");
    if let Some(var_1329) = &input.vpc_id {
        scope_1328.string(var_1329);
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("SubnetIds");
    if let Some(var_1331) = &input.subnet_ids {
        let mut list_1333 = scope_1330.start_list(true, Some("item"));
        for item_1332 in var_1331 {
            #[allow(unused_mut)]
            let mut entry_1334 = list_1333.entry();
            entry_1334.string(item_1332);
        }
        list_1333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("Options");
    if let Some(var_1336) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1335, var_1336)?;
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("TagSpecifications");
    if let Some(var_1338) = &input.tag_specifications {
        let mut list_1340 = scope_1337.start_list(true, Some("item"));
        for item_1339 in var_1338 {
            #[allow(unused_mut)]
            let mut entry_1341 = list_1340.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1341, item_1339,
            )?;
        }
        list_1340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("DryRun");
    if let Some(var_1343) = &input.dry_run {
        scope_1342.boolean(*var_1343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("AvailabilityZone");
    if let Some(var_1345) = &input.availability_zone {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Encrypted");
    if let Some(var_1347) = &input.encrypted {
        scope_1346.boolean(*var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Iops");
    if let Some(var_1349) = &input.iops {
        scope_1348.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1349).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("KmsKeyId");
    if let Some(var_1351) = &input.kms_key_id {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("OutpostArn");
    if let Some(var_1353) = &input.outpost_arn {
        scope_1352.string(var_1353);
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Size");
    if let Some(var_1355) = &input.size {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("SnapshotId");
    if let Some(var_1357) = &input.snapshot_id {
        scope_1356.string(var_1357);
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("VolumeType");
    if let Some(var_1359) = &input.volume_type {
        scope_1358.string(var_1359.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("DryRun");
    if let Some(var_1361) = &input.dry_run {
        scope_1360.boolean(*var_1361);
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("TagSpecification");
    if let Some(var_1363) = &input.tag_specifications {
        let mut list_1365 = scope_1362.start_list(true, Some("item"));
        for item_1364 in var_1363 {
            #[allow(unused_mut)]
            let mut entry_1366 = list_1365.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1366, item_1364,
            )?;
        }
        list_1365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1368) = &input.multi_attach_enabled {
        scope_1367.boolean(*var_1368);
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("Throughput");
    if let Some(var_1370) = &input.throughput {
        scope_1369.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1370).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("ClientToken");
    if let Some(var_1372) = &input.client_token {
        scope_1371.string(var_1372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("CidrBlock");
    if let Some(var_1374) = &input.cidr_block {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1376) = &input.amazon_provided_ipv6_cidr_block {
        scope_1375.boolean(*var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("Ipv6Pool");
    if let Some(var_1378) = &input.ipv6_pool {
        scope_1377.string(var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1380) = &input.ipv6_cidr_block {
        scope_1379.string(var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("DryRun");
    if let Some(var_1382) = &input.dry_run {
        scope_1381.boolean(*var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("InstanceTenancy");
    if let Some(var_1384) = &input.instance_tenancy {
        scope_1383.string(var_1384.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1386) = &input.ipv6_cidr_block_network_border_group {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("TagSpecification");
    if let Some(var_1388) = &input.tag_specifications {
        let mut list_1390 = scope_1387.start_list(true, Some("item"));
        for item_1389 in var_1388 {
            #[allow(unused_mut)]
            let mut entry_1391 = list_1390.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1391, item_1389,
            )?;
        }
        list_1390.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("DryRun");
    if let Some(var_1393) = &input.dry_run {
        scope_1392.boolean(*var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("VpcEndpointType");
    if let Some(var_1395) = &input.vpc_endpoint_type {
        scope_1394.string(var_1395.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("VpcId");
    if let Some(var_1397) = &input.vpc_id {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("ServiceName");
    if let Some(var_1399) = &input.service_name {
        scope_1398.string(var_1399);
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("PolicyDocument");
    if let Some(var_1401) = &input.policy_document {
        scope_1400.string(var_1401);
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("RouteTableId");
    if let Some(var_1403) = &input.route_table_ids {
        let mut list_1405 = scope_1402.start_list(true, Some("item"));
        for item_1404 in var_1403 {
            #[allow(unused_mut)]
            let mut entry_1406 = list_1405.entry();
            entry_1406.string(item_1404);
        }
        list_1405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("SubnetId");
    if let Some(var_1408) = &input.subnet_ids {
        let mut list_1410 = scope_1407.start_list(true, Some("item"));
        for item_1409 in var_1408 {
            #[allow(unused_mut)]
            let mut entry_1411 = list_1410.entry();
            entry_1411.string(item_1409);
        }
        list_1410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("SecurityGroupId");
    if let Some(var_1413) = &input.security_group_ids {
        let mut list_1415 = scope_1412.start_list(true, Some("item"));
        for item_1414 in var_1413 {
            #[allow(unused_mut)]
            let mut entry_1416 = list_1415.entry();
            entry_1416.string(item_1414);
        }
        list_1415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("ClientToken");
    if let Some(var_1418) = &input.client_token {
        scope_1417.string(var_1418);
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1420) = &input.private_dns_enabled {
        scope_1419.boolean(*var_1420);
    }
    #[allow(unused_mut)]
    let mut scope_1421 = writer.prefix("TagSpecification");
    if let Some(var_1422) = &input.tag_specifications {
        let mut list_1424 = scope_1421.start_list(true, Some("item"));
        for item_1423 in var_1422 {
            #[allow(unused_mut)]
            let mut entry_1425 = list_1424.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1425, item_1423,
            )?;
        }
        list_1424.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("DryRun");
    if let Some(var_1427) = &input.dry_run {
        scope_1426.boolean(*var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("ServiceId");
    if let Some(var_1429) = &input.service_id {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("VpcEndpointId");
    if let Some(var_1431) = &input.vpc_endpoint_id {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1433) = &input.connection_notification_arn {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("ConnectionEvents");
    if let Some(var_1435) = &input.connection_events {
        let mut list_1437 = scope_1434.start_list(true, Some("item"));
        for item_1436 in var_1435 {
            #[allow(unused_mut)]
            let mut entry_1438 = list_1437.entry();
            entry_1438.string(item_1436);
        }
        list_1437.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("ClientToken");
    if let Some(var_1440) = &input.client_token {
        scope_1439.string(var_1440);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DryRun");
    if let Some(var_1442) = &input.dry_run {
        scope_1441.boolean(*var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("AcceptanceRequired");
    if let Some(var_1444) = &input.acceptance_required {
        scope_1443.boolean(*var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("PrivateDnsName");
    if let Some(var_1446) = &input.private_dns_name {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1448) = &input.network_load_balancer_arns {
        let mut list_1450 = scope_1447.start_list(true, Some("item"));
        for item_1449 in var_1448 {
            #[allow(unused_mut)]
            let mut entry_1451 = list_1450.entry();
            entry_1451.string(item_1449);
        }
        list_1450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1453) = &input.gateway_load_balancer_arns {
        let mut list_1455 = scope_1452.start_list(true, Some("item"));
        for item_1454 in var_1453 {
            #[allow(unused_mut)]
            let mut entry_1456 = list_1455.entry();
            entry_1456.string(item_1454);
        }
        list_1455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1457 = writer.prefix("ClientToken");
    if let Some(var_1458) = &input.client_token {
        scope_1457.string(var_1458);
    }
    #[allow(unused_mut)]
    let mut scope_1459 = writer.prefix("TagSpecification");
    if let Some(var_1460) = &input.tag_specifications {
        let mut list_1462 = scope_1459.start_list(true, Some("item"));
        for item_1461 in var_1460 {
            #[allow(unused_mut)]
            let mut entry_1463 = list_1462.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1463, item_1461,
            )?;
        }
        list_1462.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("DryRun");
    if let Some(var_1465) = &input.dry_run {
        scope_1464.boolean(*var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("PeerOwnerId");
    if let Some(var_1467) = &input.peer_owner_id {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("PeerVpcId");
    if let Some(var_1469) = &input.peer_vpc_id {
        scope_1468.string(var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("VpcId");
    if let Some(var_1471) = &input.vpc_id {
        scope_1470.string(var_1471);
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("PeerRegion");
    if let Some(var_1473) = &input.peer_region {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("TagSpecification");
    if let Some(var_1475) = &input.tag_specifications {
        let mut list_1477 = scope_1474.start_list(true, Some("item"));
        for item_1476 in var_1475 {
            #[allow(unused_mut)]
            let mut entry_1478 = list_1477.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1478, item_1476,
            )?;
        }
        list_1477.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("CustomerGatewayId");
    if let Some(var_1480) = &input.customer_gateway_id {
        scope_1479.string(var_1480);
    }
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("Type");
    if let Some(var_1482) = &input.r#type {
        scope_1481.string(var_1482);
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("VpnGatewayId");
    if let Some(var_1484) = &input.vpn_gateway_id {
        scope_1483.string(var_1484);
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("TransitGatewayId");
    if let Some(var_1486) = &input.transit_gateway_id {
        scope_1485.string(var_1486);
    }
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("DryRun");
    if let Some(var_1488) = &input.dry_run {
        scope_1487.boolean(*var_1488);
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("Options");
    if let Some(var_1490) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1489, var_1490,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("TagSpecification");
    if let Some(var_1492) = &input.tag_specifications {
        let mut list_1494 = scope_1491.start_list(true, Some("item"));
        for item_1493 in var_1492 {
            #[allow(unused_mut)]
            let mut entry_1495 = list_1494.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1495, item_1493,
            )?;
        }
        list_1494.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1497) = &input.destination_cidr_block {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("VpnConnectionId");
    if let Some(var_1499) = &input.vpn_connection_id {
        scope_1498.string(var_1499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("AvailabilityZone");
    if let Some(var_1501) = &input.availability_zone {
        scope_1500.string(var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("Type");
    if let Some(var_1503) = &input.r#type {
        scope_1502.string(var_1503.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("TagSpecification");
    if let Some(var_1505) = &input.tag_specifications {
        let mut list_1507 = scope_1504.start_list(true, Some("item"));
        for item_1506 in var_1505 {
            #[allow(unused_mut)]
            let mut entry_1508 = list_1507.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1508, item_1506,
            )?;
        }
        list_1507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("AmazonSideAsn");
    if let Some(var_1510) = &input.amazon_side_asn {
        scope_1509.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("DryRun");
    if let Some(var_1512) = &input.dry_run {
        scope_1511.boolean(*var_1512);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("CarrierGatewayId");
    if let Some(var_1514) = &input.carrier_gateway_id {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("DryRun");
    if let Some(var_1516) = &input.dry_run {
        scope_1515.boolean(*var_1516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1518) = &input.client_vpn_endpoint_id {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("DryRun");
    if let Some(var_1520) = &input.dry_run {
        scope_1519.boolean(*var_1520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1522) = &input.client_vpn_endpoint_id {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1524) = &input.target_vpc_subnet_id {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1526) = &input.destination_cidr_block {
        scope_1525.string(var_1526);
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("DryRun");
    if let Some(var_1528) = &input.dry_run {
        scope_1527.boolean(*var_1528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("CustomerGatewayId");
    if let Some(var_1530) = &input.customer_gateway_id {
        scope_1529.string(var_1530);
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("DryRun");
    if let Some(var_1532) = &input.dry_run {
        scope_1531.boolean(*var_1532);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("DhcpOptionsId");
    if let Some(var_1534) = &input.dhcp_options_id {
        scope_1533.string(var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("DryRun");
    if let Some(var_1536) = &input.dry_run {
        scope_1535.boolean(*var_1536);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("DryRun");
    if let Some(var_1538) = &input.dry_run {
        scope_1537.boolean(*var_1538);
    }
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1540) = &input.egress_only_internet_gateway_id {
        scope_1539.string(var_1540);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1541 = writer.prefix("DryRun");
    if let Some(var_1542) = &input.dry_run {
        scope_1541.boolean(*var_1542);
    }
    #[allow(unused_mut)]
    let mut scope_1543 = writer.prefix("FleetId");
    if let Some(var_1544) = &input.fleet_ids {
        let mut list_1546 = scope_1543.start_list(true, None);
        for item_1545 in var_1544 {
            #[allow(unused_mut)]
            let mut entry_1547 = list_1546.entry();
            entry_1547.string(item_1545);
        }
        list_1546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("TerminateInstances");
    if let Some(var_1549) = &input.terminate_instances {
        scope_1548.boolean(*var_1549);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("DryRun");
    if let Some(var_1551) = &input.dry_run {
        scope_1550.boolean(*var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("FlowLogId");
    if let Some(var_1553) = &input.flow_log_ids {
        let mut list_1555 = scope_1552.start_list(true, Some("item"));
        for item_1554 in var_1553 {
            #[allow(unused_mut)]
            let mut entry_1556 = list_1555.entry();
            entry_1556.string(item_1554);
        }
        list_1555.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("DryRun");
    if let Some(var_1558) = &input.dry_run {
        scope_1557.boolean(*var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("FpgaImageId");
    if let Some(var_1560) = &input.fpga_image_id {
        scope_1559.string(var_1560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("DryRun");
    if let Some(var_1562) = &input.dry_run {
        scope_1561.boolean(*var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("ForceDelete");
    if let Some(var_1564) = &input.force_delete {
        scope_1563.boolean(*var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1566) = &input.instance_event_window_id {
        scope_1565.string(var_1566);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DryRun");
    if let Some(var_1568) = &input.dry_run {
        scope_1567.boolean(*var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("InternetGatewayId");
    if let Some(var_1570) = &input.internet_gateway_id {
        scope_1569.string(var_1570);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("KeyName");
    if let Some(var_1572) = &input.key_name {
        scope_1571.string(var_1572);
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("KeyPairId");
    if let Some(var_1574) = &input.key_pair_id {
        scope_1573.string(var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("DryRun");
    if let Some(var_1576) = &input.dry_run {
        scope_1575.boolean(*var_1576);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("DryRun");
    if let Some(var_1578) = &input.dry_run {
        scope_1577.boolean(*var_1578);
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("LaunchTemplateId");
    if let Some(var_1580) = &input.launch_template_id {
        scope_1579.string(var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("LaunchTemplateName");
    if let Some(var_1582) = &input.launch_template_name {
        scope_1581.string(var_1582);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("DryRun");
    if let Some(var_1584) = &input.dry_run {
        scope_1583.boolean(*var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("LaunchTemplateId");
    if let Some(var_1586) = &input.launch_template_id {
        scope_1585.string(var_1586);
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("LaunchTemplateName");
    if let Some(var_1588) = &input.launch_template_name {
        scope_1587.string(var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1590) = &input.versions {
        let mut list_1592 = scope_1589.start_list(true, Some("item"));
        for item_1591 in var_1590 {
            #[allow(unused_mut)]
            let mut entry_1593 = list_1592.entry();
            entry_1593.string(item_1591);
        }
        list_1592.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1595) = &input.destination_cidr_block {
        scope_1594.string(var_1595);
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1597) = &input.local_gateway_route_table_id {
        scope_1596.string(var_1597);
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("DryRun");
    if let Some(var_1599) = &input.dry_run {
        scope_1598.boolean(*var_1599);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1601) = &input.local_gateway_route_table_vpc_association_id {
        scope_1600.string(var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("DryRun");
    if let Some(var_1603) = &input.dry_run {
        scope_1602.boolean(*var_1603);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("DryRun");
    if let Some(var_1605) = &input.dry_run {
        scope_1604.boolean(*var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("PrefixListId");
    if let Some(var_1607) = &input.prefix_list_id {
        scope_1606.string(var_1607);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("DryRun");
    if let Some(var_1609) = &input.dry_run {
        scope_1608.boolean(*var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("NatGatewayId");
    if let Some(var_1611) = &input.nat_gateway_id {
        scope_1610.string(var_1611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("DryRun");
    if let Some(var_1613) = &input.dry_run {
        scope_1612.boolean(*var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("NetworkAclId");
    if let Some(var_1615) = &input.network_acl_id {
        scope_1614.string(var_1615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("DryRun");
    if let Some(var_1617) = &input.dry_run {
        scope_1616.boolean(*var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("Egress");
    if let Some(var_1619) = &input.egress {
        scope_1618.boolean(*var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("NetworkAclId");
    if let Some(var_1621) = &input.network_acl_id {
        scope_1620.string(var_1621);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("RuleNumber");
    if let Some(var_1623) = &input.rule_number {
        scope_1622.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1623).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("DryRun");
    if let Some(var_1625) = &input.dry_run {
        scope_1624.boolean(*var_1625);
    }
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1627) = &input.network_insights_analysis_id {
        scope_1626.string(var_1627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("DryRun");
    if let Some(var_1629) = &input.dry_run {
        scope_1628.boolean(*var_1629);
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1631) = &input.network_insights_path_id {
        scope_1630.string(var_1631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("DryRun");
    if let Some(var_1633) = &input.dry_run {
        scope_1632.boolean(*var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1635) = &input.network_interface_id {
        scope_1634.string(var_1635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1637) = &input.network_interface_permission_id {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("Force");
    if let Some(var_1639) = &input.force {
        scope_1638.boolean(*var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DryRun");
    if let Some(var_1643) = &input.dry_run {
        scope_1642.boolean(*var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("GroupName");
    if let Some(var_1645) = &input.group_name {
        scope_1644.string(var_1645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("DryRun");
    if let Some(var_1647) = &input.dry_run {
        scope_1646.boolean(*var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("ReservedInstancesId");
    if let Some(var_1649) = &input.reserved_instances_ids {
        let mut list_1651 = scope_1648.start_list(true, Some("item"));
        for item_1650 in var_1649 {
            #[allow(unused_mut)]
            let mut entry_1652 = list_1651.entry();
            entry_1652.string(item_1650);
        }
        list_1651.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1654) = &input.destination_cidr_block {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1656) = &input.destination_ipv6_cidr_block {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1658) = &input.destination_prefix_list_id {
        scope_1657.string(var_1658);
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("DryRun");
    if let Some(var_1660) = &input.dry_run {
        scope_1659.boolean(*var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("RouteTableId");
    if let Some(var_1662) = &input.route_table_id {
        scope_1661.string(var_1662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DryRun");
    if let Some(var_1664) = &input.dry_run {
        scope_1663.boolean(*var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("RouteTableId");
    if let Some(var_1666) = &input.route_table_id {
        scope_1665.string(var_1666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("GroupId");
    if let Some(var_1668) = &input.group_id {
        scope_1667.string(var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("GroupName");
    if let Some(var_1670) = &input.group_name {
        scope_1669.string(var_1670);
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DryRun");
    if let Some(var_1672) = &input.dry_run {
        scope_1671.boolean(*var_1672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("SnapshotId");
    if let Some(var_1674) = &input.snapshot_id {
        scope_1673.string(var_1674);
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("DryRun");
    if let Some(var_1676) = &input.dry_run {
        scope_1675.boolean(*var_1676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("DryRun");
    if let Some(var_1678) = &input.dry_run {
        scope_1677.boolean(*var_1678);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("SubnetId");
    if let Some(var_1680) = &input.subnet_id {
        scope_1679.string(var_1680);
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("DryRun");
    if let Some(var_1682) = &input.dry_run {
        scope_1681.boolean(*var_1682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1684) = &input.subnet_cidr_reservation_id {
        scope_1683.string(var_1684);
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("DryRun");
    if let Some(var_1686) = &input.dry_run {
        scope_1685.boolean(*var_1686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("DryRun");
    if let Some(var_1688) = &input.dry_run {
        scope_1687.boolean(*var_1688);
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("ResourceId");
    if let Some(var_1690) = &input.resources {
        let mut list_1692 = scope_1689.start_list(true, None);
        for item_1691 in var_1690 {
            #[allow(unused_mut)]
            let mut entry_1693 = list_1692.entry();
            entry_1693.string(item_1691);
        }
        list_1692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("Tag");
    if let Some(var_1695) = &input.tags {
        let mut list_1697 = scope_1694.start_list(true, Some("item"));
        for item_1696 in var_1695 {
            #[allow(unused_mut)]
            let mut entry_1698 = list_1697.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1698, item_1696)?;
        }
        list_1697.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1700) = &input.traffic_mirror_filter_id {
        scope_1699.string(var_1700);
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DryRun");
    if let Some(var_1702) = &input.dry_run {
        scope_1701.boolean(*var_1702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1704) = &input.traffic_mirror_filter_rule_id {
        scope_1703.string(var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1708) = &input.traffic_mirror_session_id {
        scope_1707.string(var_1708);
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("DryRun");
    if let Some(var_1710) = &input.dry_run {
        scope_1709.boolean(*var_1710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1712) = &input.traffic_mirror_target_id {
        scope_1711.string(var_1712);
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("DryRun");
    if let Some(var_1714) = &input.dry_run {
        scope_1713.boolean(*var_1714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("TransitGatewayId");
    if let Some(var_1716) = &input.transit_gateway_id {
        scope_1715.string(var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DryRun");
    if let Some(var_1718) = &input.dry_run {
        scope_1717.boolean(*var_1718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1720) = &input.transit_gateway_attachment_id {
        scope_1719.string(var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("DryRun");
    if let Some(var_1722) = &input.dry_run {
        scope_1721.boolean(*var_1722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1724) = &input.transit_gateway_connect_peer_id {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DryRun");
    if let Some(var_1726) = &input.dry_run {
        scope_1725.boolean(*var_1726);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1728) = &input.transit_gateway_multicast_domain_id {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("DryRun");
    if let Some(var_1730) = &input.dry_run {
        scope_1729.boolean(*var_1730);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1732) = &input.transit_gateway_attachment_id {
        scope_1731.string(var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("DryRun");
    if let Some(var_1734) = &input.dry_run {
        scope_1733.boolean(*var_1734);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1736) = &input.transit_gateway_route_table_id {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("PrefixListId");
    if let Some(var_1738) = &input.prefix_list_id {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("DryRun");
    if let Some(var_1740) = &input.dry_run {
        scope_1739.boolean(*var_1740);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1742) = &input.transit_gateway_route_table_id {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1744) = &input.destination_cidr_block {
        scope_1743.string(var_1744);
    }
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("DryRun");
    if let Some(var_1746) = &input.dry_run {
        scope_1745.boolean(*var_1746);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1748) = &input.transit_gateway_route_table_id {
        scope_1747.string(var_1748);
    }
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("DryRun");
    if let Some(var_1750) = &input.dry_run {
        scope_1749.boolean(*var_1750);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1752) = &input.transit_gateway_attachment_id {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("DryRun");
    if let Some(var_1754) = &input.dry_run {
        scope_1753.boolean(*var_1754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("VolumeId");
    if let Some(var_1756) = &input.volume_id {
        scope_1755.string(var_1756);
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DryRun");
    if let Some(var_1758) = &input.dry_run {
        scope_1757.boolean(*var_1758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("VpcId");
    if let Some(var_1760) = &input.vpc_id {
        scope_1759.string(var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DryRun");
    if let Some(var_1762) = &input.dry_run {
        scope_1761.boolean(*var_1762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("DryRun");
    if let Some(var_1764) = &input.dry_run {
        scope_1763.boolean(*var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1766) = &input.connection_notification_ids {
        let mut list_1768 = scope_1765.start_list(true, Some("item"));
        for item_1767 in var_1766 {
            #[allow(unused_mut)]
            let mut entry_1769 = list_1768.entry();
            entry_1769.string(item_1767);
        }
        list_1768.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("DryRun");
    if let Some(var_1771) = &input.dry_run {
        scope_1770.boolean(*var_1771);
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("VpcEndpointId");
    if let Some(var_1773) = &input.vpc_endpoint_ids {
        let mut list_1775 = scope_1772.start_list(true, Some("item"));
        for item_1774 in var_1773 {
            #[allow(unused_mut)]
            let mut entry_1776 = list_1775.entry();
            entry_1776.string(item_1774);
        }
        list_1775.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("DryRun");
    if let Some(var_1778) = &input.dry_run {
        scope_1777.boolean(*var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("ServiceId");
    if let Some(var_1780) = &input.service_ids {
        let mut list_1782 = scope_1779.start_list(true, Some("item"));
        for item_1781 in var_1780 {
            #[allow(unused_mut)]
            let mut entry_1783 = list_1782.entry();
            entry_1783.string(item_1781);
        }
        list_1782.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DryRun");
    if let Some(var_1785) = &input.dry_run {
        scope_1784.boolean(*var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1787) = &input.vpc_peering_connection_id {
        scope_1786.string(var_1787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("VpnConnectionId");
    if let Some(var_1789) = &input.vpn_connection_id {
        scope_1788.string(var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("DryRun");
    if let Some(var_1791) = &input.dry_run {
        scope_1790.boolean(*var_1791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1793) = &input.destination_cidr_block {
        scope_1792.string(var_1793);
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("VpnConnectionId");
    if let Some(var_1795) = &input.vpn_connection_id {
        scope_1794.string(var_1795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("VpnGatewayId");
    if let Some(var_1797) = &input.vpn_gateway_id {
        scope_1796.string(var_1797);
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("DryRun");
    if let Some(var_1799) = &input.dry_run {
        scope_1798.boolean(*var_1799);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("Cidr");
    if let Some(var_1801) = &input.cidr {
        scope_1800.string(var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("DryRun");
    if let Some(var_1803) = &input.dry_run {
        scope_1802.boolean(*var_1803);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("ImageId");
    if let Some(var_1805) = &input.image_id {
        scope_1804.string(var_1805);
    }
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("DryRun");
    if let Some(var_1807) = &input.dry_run {
        scope_1806.boolean(*var_1807);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("DryRun");
    if let Some(var_1809) = &input.dry_run {
        scope_1808.boolean(*var_1809);
    }
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1811) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1810, var_1811)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1812 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1813) = &input.transit_gateway_multicast_domain_id {
        scope_1812.string(var_1813);
    }
    #[allow(unused_mut)]
    let mut scope_1814 = writer.prefix("GroupIpAddress");
    if let Some(var_1815) = &input.group_ip_address {
        scope_1814.string(var_1815);
    }
    #[allow(unused_mut)]
    let mut scope_1816 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1817) = &input.network_interface_ids {
        let mut list_1819 = scope_1816.start_list(true, Some("item"));
        for item_1818 in var_1817 {
            #[allow(unused_mut)]
            let mut entry_1820 = list_1819.entry();
            entry_1820.string(item_1818);
        }
        list_1819.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1824) = &input.transit_gateway_multicast_domain_id {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("GroupIpAddress");
    if let Some(var_1826) = &input.group_ip_address {
        scope_1825.string(var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1828) = &input.network_interface_ids {
        let mut list_1830 = scope_1827.start_list(true, Some("item"));
        for item_1829 in var_1828 {
            #[allow(unused_mut)]
            let mut entry_1831 = list_1830.entry();
            entry_1831.string(item_1829);
        }
        list_1830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("DryRun");
    if let Some(var_1833) = &input.dry_run {
        scope_1832.boolean(*var_1833);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("AttributeName");
    if let Some(var_1835) = &input.attribute_names {
        let mut list_1837 = scope_1834.start_list(true, Some("attributeName"));
        for item_1836 in var_1835 {
            #[allow(unused_mut)]
            let mut entry_1838 = list_1837.entry();
            entry_1838.string(item_1836.as_str());
        }
        list_1837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("DryRun");
    if let Some(var_1840) = &input.dry_run {
        scope_1839.boolean(*var_1840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("Filter");
    if let Some(var_1842) = &input.filters {
        let mut list_1844 = scope_1841.start_list(true, Some("Filter"));
        for item_1843 in var_1842 {
            #[allow(unused_mut)]
            let mut entry_1845 = list_1844.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1845, item_1843)?;
        }
        list_1844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("PublicIp");
    if let Some(var_1847) = &input.public_ips {
        let mut list_1849 = scope_1846.start_list(true, Some("PublicIp"));
        for item_1848 in var_1847 {
            #[allow(unused_mut)]
            let mut entry_1850 = list_1849.entry();
            entry_1850.string(item_1848);
        }
        list_1849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("AllocationId");
    if let Some(var_1852) = &input.allocation_ids {
        let mut list_1854 = scope_1851.start_list(true, Some("AllocationId"));
        for item_1853 in var_1852 {
            #[allow(unused_mut)]
            let mut entry_1855 = list_1854.entry();
            entry_1855.string(item_1853);
        }
        list_1854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("DryRun");
    if let Some(var_1857) = &input.dry_run {
        scope_1856.boolean(*var_1857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("AllocationId");
    if let Some(var_1859) = &input.allocation_ids {
        let mut list_1861 = scope_1858.start_list(true, Some("item"));
        for item_1860 in var_1859 {
            #[allow(unused_mut)]
            let mut entry_1862 = list_1861.entry();
            entry_1862.string(item_1860);
        }
        list_1861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("Attribute");
    if let Some(var_1864) = &input.attribute {
        scope_1863.string(var_1864.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("NextToken");
    if let Some(var_1866) = &input.next_token {
        scope_1865.string(var_1866);
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("MaxResults");
    if let Some(var_1868) = &input.max_results {
        scope_1867.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1868).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("DryRun");
    if let Some(var_1870) = &input.dry_run {
        scope_1869.boolean(*var_1870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DryRun");
    if let Some(var_1872) = &input.dry_run {
        scope_1871.boolean(*var_1872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("Filter");
    if let Some(var_1874) = &input.filters {
        let mut list_1876 = scope_1873.start_list(true, Some("Filter"));
        for item_1875 in var_1874 {
            #[allow(unused_mut)]
            let mut entry_1877 = list_1876.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1877, item_1875)?;
        }
        list_1876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("ZoneName");
    if let Some(var_1879) = &input.zone_names {
        let mut list_1881 = scope_1878.start_list(true, Some("ZoneName"));
        for item_1880 in var_1879 {
            #[allow(unused_mut)]
            let mut entry_1882 = list_1881.entry();
            entry_1882.string(item_1880);
        }
        list_1881.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("ZoneId");
    if let Some(var_1884) = &input.zone_ids {
        let mut list_1886 = scope_1883.start_list(true, Some("ZoneId"));
        for item_1885 in var_1884 {
            #[allow(unused_mut)]
            let mut entry_1887 = list_1886.entry();
            entry_1887.string(item_1885);
        }
        list_1886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("AllAvailabilityZones");
    if let Some(var_1889) = &input.all_availability_zones {
        scope_1888.boolean(*var_1889);
    }
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("DryRun");
    if let Some(var_1891) = &input.dry_run {
        scope_1890.boolean(*var_1891);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("BundleId");
    if let Some(var_1893) = &input.bundle_ids {
        let mut list_1895 = scope_1892.start_list(true, Some("BundleId"));
        for item_1894 in var_1893 {
            #[allow(unused_mut)]
            let mut entry_1896 = list_1895.entry();
            entry_1896.string(item_1894);
        }
        list_1895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("Filter");
    if let Some(var_1898) = &input.filters {
        let mut list_1900 = scope_1897.start_list(true, Some("Filter"));
        for item_1899 in var_1898 {
            #[allow(unused_mut)]
            let mut entry_1901 = list_1900.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1901, item_1899)?;
        }
        list_1900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("DryRun");
    if let Some(var_1903) = &input.dry_run {
        scope_1902.boolean(*var_1903);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("DryRun");
    if let Some(var_1905) = &input.dry_run {
        scope_1904.boolean(*var_1905);
    }
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("MaxResults");
    if let Some(var_1907) = &input.max_results {
        scope_1906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("NextToken");
    if let Some(var_1909) = &input.next_token {
        scope_1908.string(var_1909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_1911) = &input.capacity_reservation_fleet_ids {
        let mut list_1913 = scope_1910.start_list(true, Some("item"));
        for item_1912 in var_1911 {
            #[allow(unused_mut)]
            let mut entry_1914 = list_1913.entry();
            entry_1914.string(item_1912);
        }
        list_1913.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("NextToken");
    if let Some(var_1916) = &input.next_token {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("MaxResults");
    if let Some(var_1918) = &input.max_results {
        scope_1917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("Filter");
    if let Some(var_1920) = &input.filters {
        let mut list_1922 = scope_1919.start_list(true, Some("Filter"));
        for item_1921 in var_1920 {
            #[allow(unused_mut)]
            let mut entry_1923 = list_1922.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1923, item_1921)?;
        }
        list_1922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("DryRun");
    if let Some(var_1925) = &input.dry_run {
        scope_1924.boolean(*var_1925);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("CapacityReservationId");
    if let Some(var_1927) = &input.capacity_reservation_ids {
        let mut list_1929 = scope_1926.start_list(true, Some("item"));
        for item_1928 in var_1927 {
            #[allow(unused_mut)]
            let mut entry_1930 = list_1929.entry();
            entry_1930.string(item_1928);
        }
        list_1929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("NextToken");
    if let Some(var_1932) = &input.next_token {
        scope_1931.string(var_1932);
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("MaxResults");
    if let Some(var_1934) = &input.max_results {
        scope_1933.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1934).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("Filter");
    if let Some(var_1936) = &input.filters {
        let mut list_1938 = scope_1935.start_list(true, Some("Filter"));
        for item_1937 in var_1936 {
            #[allow(unused_mut)]
            let mut entry_1939 = list_1938.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1939, item_1937)?;
        }
        list_1938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("DryRun");
    if let Some(var_1941) = &input.dry_run {
        scope_1940.boolean(*var_1941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("CarrierGatewayId");
    if let Some(var_1943) = &input.carrier_gateway_ids {
        let mut list_1945 = scope_1942.start_list(true, None);
        for item_1944 in var_1943 {
            #[allow(unused_mut)]
            let mut entry_1946 = list_1945.entry();
            entry_1946.string(item_1944);
        }
        list_1945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("Filter");
    if let Some(var_1948) = &input.filters {
        let mut list_1950 = scope_1947.start_list(true, Some("Filter"));
        for item_1949 in var_1948 {
            #[allow(unused_mut)]
            let mut entry_1951 = list_1950.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1951, item_1949)?;
        }
        list_1950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("MaxResults");
    if let Some(var_1953) = &input.max_results {
        scope_1952.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1953).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("NextToken");
    if let Some(var_1955) = &input.next_token {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DryRun");
    if let Some(var_1957) = &input.dry_run {
        scope_1956.boolean(*var_1957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("Filter");
    if let Some(var_1959) = &input.filters {
        let mut list_1961 = scope_1958.start_list(true, Some("Filter"));
        for item_1960 in var_1959 {
            #[allow(unused_mut)]
            let mut entry_1962 = list_1961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1962, item_1960)?;
        }
        list_1961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("DryRun");
    if let Some(var_1964) = &input.dry_run {
        scope_1963.boolean(*var_1964);
    }
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("InstanceId");
    if let Some(var_1966) = &input.instance_ids {
        let mut list_1968 = scope_1965.start_list(true, Some("InstanceId"));
        for item_1967 in var_1966 {
            #[allow(unused_mut)]
            let mut entry_1969 = list_1968.entry();
            entry_1969.string(item_1967);
        }
        list_1968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("MaxResults");
    if let Some(var_1971) = &input.max_results {
        scope_1970.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1971).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("NextToken");
    if let Some(var_1973) = &input.next_token {
        scope_1972.string(var_1973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1975) = &input.client_vpn_endpoint_id {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("DryRun");
    if let Some(var_1977) = &input.dry_run {
        scope_1976.boolean(*var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("NextToken");
    if let Some(var_1979) = &input.next_token {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("Filter");
    if let Some(var_1981) = &input.filters {
        let mut list_1983 = scope_1980.start_list(true, Some("Filter"));
        for item_1982 in var_1981 {
            #[allow(unused_mut)]
            let mut entry_1984 = list_1983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1984, item_1982)?;
        }
        list_1983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("MaxResults");
    if let Some(var_1986) = &input.max_results {
        scope_1985.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1986).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1988) = &input.client_vpn_endpoint_id {
        scope_1987.string(var_1988);
    }
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("Filter");
    if let Some(var_1990) = &input.filters {
        let mut list_1992 = scope_1989.start_list(true, Some("Filter"));
        for item_1991 in var_1990 {
            #[allow(unused_mut)]
            let mut entry_1993 = list_1992.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1993, item_1991)?;
        }
        list_1992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("NextToken");
    if let Some(var_1995) = &input.next_token {
        scope_1994.string(var_1995);
    }
    #[allow(unused_mut)]
    let mut scope_1996 = writer.prefix("MaxResults");
    if let Some(var_1997) = &input.max_results {
        scope_1996.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1997).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1998 = writer.prefix("DryRun");
    if let Some(var_1999) = &input.dry_run {
        scope_1998.boolean(*var_1999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2000 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2001) = &input.client_vpn_endpoint_ids {
        let mut list_2003 = scope_2000.start_list(true, Some("item"));
        for item_2002 in var_2001 {
            #[allow(unused_mut)]
            let mut entry_2004 = list_2003.entry();
            entry_2004.string(item_2002);
        }
        list_2003.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("MaxResults");
    if let Some(var_2006) = &input.max_results {
        scope_2005.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2006).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("NextToken");
    if let Some(var_2008) = &input.next_token {
        scope_2007.string(var_2008);
    }
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("Filter");
    if let Some(var_2010) = &input.filters {
        let mut list_2012 = scope_2009.start_list(true, Some("Filter"));
        for item_2011 in var_2010 {
            #[allow(unused_mut)]
            let mut entry_2013 = list_2012.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2013, item_2011)?;
        }
        list_2012.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("DryRun");
    if let Some(var_2015) = &input.dry_run {
        scope_2014.boolean(*var_2015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2017) = &input.client_vpn_endpoint_id {
        scope_2016.string(var_2017);
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("Filter");
    if let Some(var_2019) = &input.filters {
        let mut list_2021 = scope_2018.start_list(true, Some("Filter"));
        for item_2020 in var_2019 {
            #[allow(unused_mut)]
            let mut entry_2022 = list_2021.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2022, item_2020)?;
        }
        list_2021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("MaxResults");
    if let Some(var_2024) = &input.max_results {
        scope_2023.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2024).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("NextToken");
    if let Some(var_2026) = &input.next_token {
        scope_2025.string(var_2026);
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("DryRun");
    if let Some(var_2028) = &input.dry_run {
        scope_2027.boolean(*var_2028);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2030) = &input.client_vpn_endpoint_id {
        scope_2029.string(var_2030);
    }
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("AssociationIds");
    if let Some(var_2032) = &input.association_ids {
        let mut list_2034 = scope_2031.start_list(true, Some("item"));
        for item_2033 in var_2032 {
            #[allow(unused_mut)]
            let mut entry_2035 = list_2034.entry();
            entry_2035.string(item_2033);
        }
        list_2034.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2036 = writer.prefix("MaxResults");
    if let Some(var_2037) = &input.max_results {
        scope_2036.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2037).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2038 = writer.prefix("NextToken");
    if let Some(var_2039) = &input.next_token {
        scope_2038.string(var_2039);
    }
    #[allow(unused_mut)]
    let mut scope_2040 = writer.prefix("Filter");
    if let Some(var_2041) = &input.filters {
        let mut list_2043 = scope_2040.start_list(true, Some("Filter"));
        for item_2042 in var_2041 {
            #[allow(unused_mut)]
            let mut entry_2044 = list_2043.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2044, item_2042)?;
        }
        list_2043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2045 = writer.prefix("DryRun");
    if let Some(var_2046) = &input.dry_run {
        scope_2045.boolean(*var_2046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("PoolId");
    if let Some(var_2048) = &input.pool_ids {
        let mut list_2050 = scope_2047.start_list(true, Some("item"));
        for item_2049 in var_2048 {
            #[allow(unused_mut)]
            let mut entry_2051 = list_2050.entry();
            entry_2051.string(item_2049);
        }
        list_2050.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("Filter");
    if let Some(var_2053) = &input.filters {
        let mut list_2055 = scope_2052.start_list(true, Some("Filter"));
        for item_2054 in var_2053 {
            #[allow(unused_mut)]
            let mut entry_2056 = list_2055.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2056, item_2054)?;
        }
        list_2055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("MaxResults");
    if let Some(var_2058) = &input.max_results {
        scope_2057.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2058).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("NextToken");
    if let Some(var_2060) = &input.next_token {
        scope_2059.string(var_2060);
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("DryRun");
    if let Some(var_2062) = &input.dry_run {
        scope_2061.boolean(*var_2062);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("ConversionTaskId");
    if let Some(var_2064) = &input.conversion_task_ids {
        let mut list_2066 = scope_2063.start_list(true, Some("item"));
        for item_2065 in var_2064 {
            #[allow(unused_mut)]
            let mut entry_2067 = list_2066.entry();
            entry_2067.string(item_2065);
        }
        list_2066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("DryRun");
    if let Some(var_2069) = &input.dry_run {
        scope_2068.boolean(*var_2069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("CustomerGatewayId");
    if let Some(var_2071) = &input.customer_gateway_ids {
        let mut list_2073 = scope_2070.start_list(true, Some("CustomerGatewayId"));
        for item_2072 in var_2071 {
            #[allow(unused_mut)]
            let mut entry_2074 = list_2073.entry();
            entry_2074.string(item_2072);
        }
        list_2073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("Filter");
    if let Some(var_2076) = &input.filters {
        let mut list_2078 = scope_2075.start_list(true, Some("Filter"));
        for item_2077 in var_2076 {
            #[allow(unused_mut)]
            let mut entry_2079 = list_2078.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2079, item_2077)?;
        }
        list_2078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2080 = writer.prefix("DryRun");
    if let Some(var_2081) = &input.dry_run {
        scope_2080.boolean(*var_2081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2082 = writer.prefix("DhcpOptionsId");
    if let Some(var_2083) = &input.dhcp_options_ids {
        let mut list_2085 = scope_2082.start_list(true, Some("DhcpOptionsId"));
        for item_2084 in var_2083 {
            #[allow(unused_mut)]
            let mut entry_2086 = list_2085.entry();
            entry_2086.string(item_2084);
        }
        list_2085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("Filter");
    if let Some(var_2088) = &input.filters {
        let mut list_2090 = scope_2087.start_list(true, Some("Filter"));
        for item_2089 in var_2088 {
            #[allow(unused_mut)]
            let mut entry_2091 = list_2090.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2091, item_2089)?;
        }
        list_2090.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("DryRun");
    if let Some(var_2093) = &input.dry_run {
        scope_2092.boolean(*var_2093);
    }
    #[allow(unused_mut)]
    let mut scope_2094 = writer.prefix("NextToken");
    if let Some(var_2095) = &input.next_token {
        scope_2094.string(var_2095);
    }
    #[allow(unused_mut)]
    let mut scope_2096 = writer.prefix("MaxResults");
    if let Some(var_2097) = &input.max_results {
        scope_2096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2097).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2098 = writer.prefix("DryRun");
    if let Some(var_2099) = &input.dry_run {
        scope_2098.boolean(*var_2099);
    }
    #[allow(unused_mut)]
    let mut scope_2100 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2101) = &input.egress_only_internet_gateway_ids {
        let mut list_2103 = scope_2100.start_list(true, Some("item"));
        for item_2102 in var_2101 {
            #[allow(unused_mut)]
            let mut entry_2104 = list_2103.entry();
            entry_2104.string(item_2102);
        }
        list_2103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("MaxResults");
    if let Some(var_2106) = &input.max_results {
        scope_2105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("NextToken");
    if let Some(var_2108) = &input.next_token {
        scope_2107.string(var_2108);
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("Filter");
    if let Some(var_2110) = &input.filters {
        let mut list_2112 = scope_2109.start_list(true, Some("Filter"));
        for item_2111 in var_2110 {
            #[allow(unused_mut)]
            let mut entry_2113 = list_2112.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2113, item_2111)?;
        }
        list_2112.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2114 = writer.prefix("ElasticGpuId");
    if let Some(var_2115) = &input.elastic_gpu_ids {
        let mut list_2117 = scope_2114.start_list(true, Some("item"));
        for item_2116 in var_2115 {
            #[allow(unused_mut)]
            let mut entry_2118 = list_2117.entry();
            entry_2118.string(item_2116);
        }
        list_2117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("DryRun");
    if let Some(var_2120) = &input.dry_run {
        scope_2119.boolean(*var_2120);
    }
    #[allow(unused_mut)]
    let mut scope_2121 = writer.prefix("Filter");
    if let Some(var_2122) = &input.filters {
        let mut list_2124 = scope_2121.start_list(true, Some("Filter"));
        for item_2123 in var_2122 {
            #[allow(unused_mut)]
            let mut entry_2125 = list_2124.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2125, item_2123)?;
        }
        list_2124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("MaxResults");
    if let Some(var_2127) = &input.max_results {
        scope_2126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("NextToken");
    if let Some(var_2129) = &input.next_token {
        scope_2128.string(var_2129);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("DryRun");
    if let Some(var_2131) = &input.dry_run {
        scope_2130.boolean(*var_2131);
    }
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("Filter");
    if let Some(var_2133) = &input.filters {
        let mut list_2135 = scope_2132.start_list(true, Some("Filter"));
        for item_2134 in var_2133 {
            #[allow(unused_mut)]
            let mut entry_2136 = list_2135.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2136, item_2134)?;
        }
        list_2135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2137 = writer.prefix("ExportImageTaskId");
    if let Some(var_2138) = &input.export_image_task_ids {
        let mut list_2140 = scope_2137.start_list(true, Some("ExportImageTaskId"));
        for item_2139 in var_2138 {
            #[allow(unused_mut)]
            let mut entry_2141 = list_2140.entry();
            entry_2141.string(item_2139);
        }
        list_2140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("MaxResults");
    if let Some(var_2143) = &input.max_results {
        scope_2142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("NextToken");
    if let Some(var_2145) = &input.next_token {
        scope_2144.string(var_2145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("ExportTaskId");
    if let Some(var_2147) = &input.export_task_ids {
        let mut list_2149 = scope_2146.start_list(true, Some("ExportTaskId"));
        for item_2148 in var_2147 {
            #[allow(unused_mut)]
            let mut entry_2150 = list_2149.entry();
            entry_2150.string(item_2148);
        }
        list_2149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2151 = writer.prefix("Filter");
    if let Some(var_2152) = &input.filters {
        let mut list_2154 = scope_2151.start_list(true, Some("Filter"));
        for item_2153 in var_2152 {
            #[allow(unused_mut)]
            let mut entry_2155 = list_2154.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2155, item_2153)?;
        }
        list_2154.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2156 = writer.prefix("Filter");
    if let Some(var_2157) = &input.filters {
        let mut list_2159 = scope_2156.start_list(true, Some("Filter"));
        for item_2158 in var_2157 {
            #[allow(unused_mut)]
            let mut entry_2160 = list_2159.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2160, item_2158)?;
        }
        list_2159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("MaxResults");
    if let Some(var_2162) = &input.max_results {
        scope_2161.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2162).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("NextToken");
    if let Some(var_2164) = &input.next_token {
        scope_2163.string(var_2164);
    }
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("DryRun");
    if let Some(var_2166) = &input.dry_run {
        scope_2165.boolean(*var_2166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("DryRun");
    if let Some(var_2168) = &input.dry_run {
        scope_2167.boolean(*var_2168);
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("EventType");
    if let Some(var_2170) = &input.event_type {
        scope_2169.string(var_2170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("MaxResults");
    if let Some(var_2172) = &input.max_results {
        scope_2171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("NextToken");
    if let Some(var_2174) = &input.next_token {
        scope_2173.string(var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("FleetId");
    if let Some(var_2176) = &input.fleet_id {
        scope_2175.string(var_2176);
    }
    #[allow(unused_mut)]
    let mut scope_2177 = writer.prefix("StartTime");
    if let Some(var_2178) = &input.start_time {
        scope_2177.date_time(var_2178, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2179 = writer.prefix("DryRun");
    if let Some(var_2180) = &input.dry_run {
        scope_2179.boolean(*var_2180);
    }
    #[allow(unused_mut)]
    let mut scope_2181 = writer.prefix("MaxResults");
    if let Some(var_2182) = &input.max_results {
        scope_2181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2183 = writer.prefix("NextToken");
    if let Some(var_2184) = &input.next_token {
        scope_2183.string(var_2184);
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("FleetId");
    if let Some(var_2186) = &input.fleet_id {
        scope_2185.string(var_2186);
    }
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("Filter");
    if let Some(var_2188) = &input.filters {
        let mut list_2190 = scope_2187.start_list(true, Some("Filter"));
        for item_2189 in var_2188 {
            #[allow(unused_mut)]
            let mut entry_2191 = list_2190.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2191, item_2189)?;
        }
        list_2190.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2192 = writer.prefix("DryRun");
    if let Some(var_2193) = &input.dry_run {
        scope_2192.boolean(*var_2193);
    }
    #[allow(unused_mut)]
    let mut scope_2194 = writer.prefix("MaxResults");
    if let Some(var_2195) = &input.max_results {
        scope_2194.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2195).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("NextToken");
    if let Some(var_2197) = &input.next_token {
        scope_2196.string(var_2197);
    }
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("FleetId");
    if let Some(var_2199) = &input.fleet_ids {
        let mut list_2201 = scope_2198.start_list(true, None);
        for item_2200 in var_2199 {
            #[allow(unused_mut)]
            let mut entry_2202 = list_2201.entry();
            entry_2202.string(item_2200);
        }
        list_2201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2203 = writer.prefix("Filter");
    if let Some(var_2204) = &input.filters {
        let mut list_2206 = scope_2203.start_list(true, Some("Filter"));
        for item_2205 in var_2204 {
            #[allow(unused_mut)]
            let mut entry_2207 = list_2206.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2207, item_2205)?;
        }
        list_2206.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2208 = writer.prefix("DryRun");
    if let Some(var_2209) = &input.dry_run {
        scope_2208.boolean(*var_2209);
    }
    #[allow(unused_mut)]
    let mut scope_2210 = writer.prefix("Filter");
    if let Some(var_2211) = &input.filter {
        let mut list_2213 = scope_2210.start_list(true, Some("Filter"));
        for item_2212 in var_2211 {
            #[allow(unused_mut)]
            let mut entry_2214 = list_2213.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2214, item_2212)?;
        }
        list_2213.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2215 = writer.prefix("FlowLogId");
    if let Some(var_2216) = &input.flow_log_ids {
        let mut list_2218 = scope_2215.start_list(true, Some("item"));
        for item_2217 in var_2216 {
            #[allow(unused_mut)]
            let mut entry_2219 = list_2218.entry();
            entry_2219.string(item_2217);
        }
        list_2218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("MaxResults");
    if let Some(var_2221) = &input.max_results {
        scope_2220.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2221).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("NextToken");
    if let Some(var_2223) = &input.next_token {
        scope_2222.string(var_2223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2224 = writer.prefix("DryRun");
    if let Some(var_2225) = &input.dry_run {
        scope_2224.boolean(*var_2225);
    }
    #[allow(unused_mut)]
    let mut scope_2226 = writer.prefix("FpgaImageId");
    if let Some(var_2227) = &input.fpga_image_id {
        scope_2226.string(var_2227);
    }
    #[allow(unused_mut)]
    let mut scope_2228 = writer.prefix("Attribute");
    if let Some(var_2229) = &input.attribute {
        scope_2228.string(var_2229.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2230 = writer.prefix("DryRun");
    if let Some(var_2231) = &input.dry_run {
        scope_2230.boolean(*var_2231);
    }
    #[allow(unused_mut)]
    let mut scope_2232 = writer.prefix("FpgaImageId");
    if let Some(var_2233) = &input.fpga_image_ids {
        let mut list_2235 = scope_2232.start_list(true, Some("item"));
        for item_2234 in var_2233 {
            #[allow(unused_mut)]
            let mut entry_2236 = list_2235.entry();
            entry_2236.string(item_2234);
        }
        list_2235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2237 = writer.prefix("Owner");
    if let Some(var_2238) = &input.owners {
        let mut list_2240 = scope_2237.start_list(true, Some("Owner"));
        for item_2239 in var_2238 {
            #[allow(unused_mut)]
            let mut entry_2241 = list_2240.entry();
            entry_2241.string(item_2239);
        }
        list_2240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2242 = writer.prefix("Filter");
    if let Some(var_2243) = &input.filters {
        let mut list_2245 = scope_2242.start_list(true, Some("Filter"));
        for item_2244 in var_2243 {
            #[allow(unused_mut)]
            let mut entry_2246 = list_2245.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2246, item_2244)?;
        }
        list_2245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2247 = writer.prefix("NextToken");
    if let Some(var_2248) = &input.next_token {
        scope_2247.string(var_2248);
    }
    #[allow(unused_mut)]
    let mut scope_2249 = writer.prefix("MaxResults");
    if let Some(var_2250) = &input.max_results {
        scope_2249.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2250).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2251 = writer.prefix("Filter");
    if let Some(var_2252) = &input.filter {
        let mut list_2254 = scope_2251.start_list(true, Some("Filter"));
        for item_2253 in var_2252 {
            #[allow(unused_mut)]
            let mut entry_2255 = list_2254.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2255, item_2253)?;
        }
        list_2254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2256 = writer.prefix("MaxDuration");
    if let Some(var_2257) = &input.max_duration {
        scope_2256.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2257).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("MaxResults");
    if let Some(var_2259) = &input.max_results {
        scope_2258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("MinDuration");
    if let Some(var_2261) = &input.min_duration {
        scope_2260.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2261).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("NextToken");
    if let Some(var_2263) = &input.next_token {
        scope_2262.string(var_2263);
    }
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("OfferingId");
    if let Some(var_2265) = &input.offering_id {
        scope_2264.string(var_2265);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("Filter");
    if let Some(var_2267) = &input.filter {
        let mut list_2269 = scope_2266.start_list(true, Some("Filter"));
        for item_2268 in var_2267 {
            #[allow(unused_mut)]
            let mut entry_2270 = list_2269.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2270, item_2268)?;
        }
        list_2269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2271 = writer.prefix("HostReservationIdSet");
    if let Some(var_2272) = &input.host_reservation_id_set {
        let mut list_2274 = scope_2271.start_list(true, Some("item"));
        for item_2273 in var_2272 {
            #[allow(unused_mut)]
            let mut entry_2275 = list_2274.entry();
            entry_2275.string(item_2273);
        }
        list_2274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2276 = writer.prefix("MaxResults");
    if let Some(var_2277) = &input.max_results {
        scope_2276.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2277).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2278 = writer.prefix("NextToken");
    if let Some(var_2279) = &input.next_token {
        scope_2278.string(var_2279);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2280 = writer.prefix("Filter");
    if let Some(var_2281) = &input.filter {
        let mut list_2283 = scope_2280.start_list(true, Some("Filter"));
        for item_2282 in var_2281 {
            #[allow(unused_mut)]
            let mut entry_2284 = list_2283.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2284, item_2282)?;
        }
        list_2283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("HostId");
    if let Some(var_2286) = &input.host_ids {
        let mut list_2288 = scope_2285.start_list(true, Some("item"));
        for item_2287 in var_2286 {
            #[allow(unused_mut)]
            let mut entry_2289 = list_2288.entry();
            entry_2289.string(item_2287);
        }
        list_2288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2290 = writer.prefix("MaxResults");
    if let Some(var_2291) = &input.max_results {
        scope_2290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2292 = writer.prefix("NextToken");
    if let Some(var_2293) = &input.next_token {
        scope_2292.string(var_2293);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2294 = writer.prefix("AssociationId");
    if let Some(var_2295) = &input.association_ids {
        let mut list_2297 = scope_2294.start_list(true, Some("AssociationId"));
        for item_2296 in var_2295 {
            #[allow(unused_mut)]
            let mut entry_2298 = list_2297.entry();
            entry_2298.string(item_2296);
        }
        list_2297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2299 = writer.prefix("Filter");
    if let Some(var_2300) = &input.filters {
        let mut list_2302 = scope_2299.start_list(true, Some("Filter"));
        for item_2301 in var_2300 {
            #[allow(unused_mut)]
            let mut entry_2303 = list_2302.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2303, item_2301)?;
        }
        list_2302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2304 = writer.prefix("MaxResults");
    if let Some(var_2305) = &input.max_results {
        scope_2304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2305).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2306 = writer.prefix("NextToken");
    if let Some(var_2307) = &input.next_token {
        scope_2306.string(var_2307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("PrincipalArn");
    if let Some(var_2309) = &input.principal_arn {
        scope_2308.string(var_2309);
    }
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("Resource");
    if let Some(var_2311) = &input.resource {
        scope_2310.string(var_2311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("Resource");
    if let Some(var_2313) = &input.resource {
        scope_2312.string(var_2313);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2314 = writer.prefix("Attribute");
    if let Some(var_2315) = &input.attribute {
        scope_2314.string(var_2315.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2316 = writer.prefix("ImageId");
    if let Some(var_2317) = &input.image_id {
        scope_2316.string(var_2317);
    }
    #[allow(unused_mut)]
    let mut scope_2318 = writer.prefix("DryRun");
    if let Some(var_2319) = &input.dry_run {
        scope_2318.boolean(*var_2319);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2320 = writer.prefix("ExecutableBy");
    if let Some(var_2321) = &input.executable_users {
        let mut list_2323 = scope_2320.start_list(true, Some("ExecutableBy"));
        for item_2322 in var_2321 {
            #[allow(unused_mut)]
            let mut entry_2324 = list_2323.entry();
            entry_2324.string(item_2322);
        }
        list_2323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2325 = writer.prefix("Filter");
    if let Some(var_2326) = &input.filters {
        let mut list_2328 = scope_2325.start_list(true, Some("Filter"));
        for item_2327 in var_2326 {
            #[allow(unused_mut)]
            let mut entry_2329 = list_2328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2329, item_2327)?;
        }
        list_2328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2330 = writer.prefix("ImageId");
    if let Some(var_2331) = &input.image_ids {
        let mut list_2333 = scope_2330.start_list(true, Some("ImageId"));
        for item_2332 in var_2331 {
            #[allow(unused_mut)]
            let mut entry_2334 = list_2333.entry();
            entry_2334.string(item_2332);
        }
        list_2333.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("Owner");
    if let Some(var_2336) = &input.owners {
        let mut list_2338 = scope_2335.start_list(true, Some("Owner"));
        for item_2337 in var_2336 {
            #[allow(unused_mut)]
            let mut entry_2339 = list_2338.entry();
            entry_2339.string(item_2337);
        }
        list_2338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2340 = writer.prefix("IncludeDeprecated");
    if let Some(var_2341) = &input.include_deprecated {
        scope_2340.boolean(*var_2341);
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("DryRun");
    if let Some(var_2343) = &input.dry_run {
        scope_2342.boolean(*var_2343);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2344 = writer.prefix("DryRun");
    if let Some(var_2345) = &input.dry_run {
        scope_2344.boolean(*var_2345);
    }
    #[allow(unused_mut)]
    let mut scope_2346 = writer.prefix("Filters");
    if let Some(var_2347) = &input.filters {
        let mut list_2349 = scope_2346.start_list(true, Some("Filter"));
        for item_2348 in var_2347 {
            #[allow(unused_mut)]
            let mut entry_2350 = list_2349.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2350, item_2348)?;
        }
        list_2349.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("ImportTaskId");
    if let Some(var_2352) = &input.import_task_ids {
        let mut list_2354 = scope_2351.start_list(true, Some("ImportTaskId"));
        for item_2353 in var_2352 {
            #[allow(unused_mut)]
            let mut entry_2355 = list_2354.entry();
            entry_2355.string(item_2353);
        }
        list_2354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2356 = writer.prefix("MaxResults");
    if let Some(var_2357) = &input.max_results {
        scope_2356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("NextToken");
    if let Some(var_2359) = &input.next_token {
        scope_2358.string(var_2359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2360 = writer.prefix("DryRun");
    if let Some(var_2361) = &input.dry_run {
        scope_2360.boolean(*var_2361);
    }
    #[allow(unused_mut)]
    let mut scope_2362 = writer.prefix("Filters");
    if let Some(var_2363) = &input.filters {
        let mut list_2365 = scope_2362.start_list(true, Some("Filter"));
        for item_2364 in var_2363 {
            #[allow(unused_mut)]
            let mut entry_2366 = list_2365.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2366, item_2364)?;
        }
        list_2365.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2367 = writer.prefix("ImportTaskId");
    if let Some(var_2368) = &input.import_task_ids {
        let mut list_2370 = scope_2367.start_list(true, Some("ImportTaskId"));
        for item_2369 in var_2368 {
            #[allow(unused_mut)]
            let mut entry_2371 = list_2370.entry();
            entry_2371.string(item_2369);
        }
        list_2370.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("MaxResults");
    if let Some(var_2373) = &input.max_results {
        scope_2372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("NextToken");
    if let Some(var_2375) = &input.next_token {
        scope_2374.string(var_2375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("Attribute");
    if let Some(var_2377) = &input.attribute {
        scope_2376.string(var_2377.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("DryRun");
    if let Some(var_2379) = &input.dry_run {
        scope_2378.boolean(*var_2379);
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("InstanceId");
    if let Some(var_2381) = &input.instance_id {
        scope_2380.string(var_2381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("DryRun");
    if let Some(var_2383) = &input.dry_run {
        scope_2382.boolean(*var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("Filter");
    if let Some(var_2385) = &input.filters {
        let mut list_2387 = scope_2384.start_list(true, Some("Filter"));
        for item_2386 in var_2385 {
            #[allow(unused_mut)]
            let mut entry_2388 = list_2387.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2388, item_2386)?;
        }
        list_2387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2389 = writer.prefix("InstanceId");
    if let Some(var_2390) = &input.instance_ids {
        let mut list_2392 = scope_2389.start_list(true, Some("InstanceId"));
        for item_2391 in var_2390 {
            #[allow(unused_mut)]
            let mut entry_2393 = list_2392.entry();
            entry_2393.string(item_2391);
        }
        list_2392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("MaxResults");
    if let Some(var_2395) = &input.max_results {
        scope_2394.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2395).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("NextToken");
    if let Some(var_2397) = &input.next_token {
        scope_2396.string(var_2397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("DryRun");
    if let Some(var_2399) = &input.dry_run {
        scope_2398.boolean(*var_2399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2400 = writer.prefix("DryRun");
    if let Some(var_2401) = &input.dry_run {
        scope_2400.boolean(*var_2401);
    }
    #[allow(unused_mut)]
    let mut scope_2402 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2403) = &input.instance_event_window_ids {
        let mut list_2405 = scope_2402.start_list(true, Some("InstanceEventWindowId"));
        for item_2404 in var_2403 {
            #[allow(unused_mut)]
            let mut entry_2406 = list_2405.entry();
            entry_2406.string(item_2404);
        }
        list_2405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2407 = writer.prefix("Filter");
    if let Some(var_2408) = &input.filters {
        let mut list_2410 = scope_2407.start_list(true, Some("Filter"));
        for item_2409 in var_2408 {
            #[allow(unused_mut)]
            let mut entry_2411 = list_2410.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2411, item_2409)?;
        }
        list_2410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2412 = writer.prefix("MaxResults");
    if let Some(var_2413) = &input.max_results {
        scope_2412.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2414 = writer.prefix("NextToken");
    if let Some(var_2415) = &input.next_token {
        scope_2414.string(var_2415);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2416 = writer.prefix("Filter");
    if let Some(var_2417) = &input.filters {
        let mut list_2419 = scope_2416.start_list(true, Some("Filter"));
        for item_2418 in var_2417 {
            #[allow(unused_mut)]
            let mut entry_2420 = list_2419.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2420, item_2418)?;
        }
        list_2419.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2421 = writer.prefix("InstanceId");
    if let Some(var_2422) = &input.instance_ids {
        let mut list_2424 = scope_2421.start_list(true, Some("InstanceId"));
        for item_2423 in var_2422 {
            #[allow(unused_mut)]
            let mut entry_2425 = list_2424.entry();
            entry_2425.string(item_2423);
        }
        list_2424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("DryRun");
    if let Some(var_2427) = &input.dry_run {
        scope_2426.boolean(*var_2427);
    }
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("MaxResults");
    if let Some(var_2429) = &input.max_results {
        scope_2428.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2429).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("NextToken");
    if let Some(var_2431) = &input.next_token {
        scope_2430.string(var_2431);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2432 = writer.prefix("Filter");
    if let Some(var_2433) = &input.filters {
        let mut list_2435 = scope_2432.start_list(true, Some("Filter"));
        for item_2434 in var_2433 {
            #[allow(unused_mut)]
            let mut entry_2436 = list_2435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2436, item_2434)?;
        }
        list_2435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("InstanceId");
    if let Some(var_2438) = &input.instance_ids {
        let mut list_2440 = scope_2437.start_list(true, Some("InstanceId"));
        for item_2439 in var_2438 {
            #[allow(unused_mut)]
            let mut entry_2441 = list_2440.entry();
            entry_2441.string(item_2439);
        }
        list_2440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("MaxResults");
    if let Some(var_2443) = &input.max_results {
        scope_2442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("NextToken");
    if let Some(var_2445) = &input.next_token {
        scope_2444.string(var_2445);
    }
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("DryRun");
    if let Some(var_2447) = &input.dry_run {
        scope_2446.boolean(*var_2447);
    }
    #[allow(unused_mut)]
    let mut scope_2448 = writer.prefix("IncludeAllInstances");
    if let Some(var_2449) = &input.include_all_instances {
        scope_2448.boolean(*var_2449);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2450 = writer.prefix("DryRun");
    if let Some(var_2451) = &input.dry_run {
        scope_2450.boolean(*var_2451);
    }
    #[allow(unused_mut)]
    let mut scope_2452 = writer.prefix("LocationType");
    if let Some(var_2453) = &input.location_type {
        scope_2452.string(var_2453.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("Filter");
    if let Some(var_2455) = &input.filters {
        let mut list_2457 = scope_2454.start_list(true, Some("Filter"));
        for item_2456 in var_2455 {
            #[allow(unused_mut)]
            let mut entry_2458 = list_2457.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2458, item_2456)?;
        }
        list_2457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2459 = writer.prefix("MaxResults");
    if let Some(var_2460) = &input.max_results {
        scope_2459.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2461 = writer.prefix("NextToken");
    if let Some(var_2462) = &input.next_token {
        scope_2461.string(var_2462);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("DryRun");
    if let Some(var_2464) = &input.dry_run {
        scope_2463.boolean(*var_2464);
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("InstanceType");
    if let Some(var_2466) = &input.instance_types {
        let mut list_2468 = scope_2465.start_list(true, None);
        for item_2467 in var_2466 {
            #[allow(unused_mut)]
            let mut entry_2469 = list_2468.entry();
            entry_2469.string(item_2467.as_str());
        }
        list_2468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("Filter");
    if let Some(var_2471) = &input.filters {
        let mut list_2473 = scope_2470.start_list(true, Some("Filter"));
        for item_2472 in var_2471 {
            #[allow(unused_mut)]
            let mut entry_2474 = list_2473.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2474, item_2472)?;
        }
        list_2473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2475 = writer.prefix("MaxResults");
    if let Some(var_2476) = &input.max_results {
        scope_2475.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2476).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2477 = writer.prefix("NextToken");
    if let Some(var_2478) = &input.next_token {
        scope_2477.string(var_2478);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2479 = writer.prefix("Filter");
    if let Some(var_2480) = &input.filters {
        let mut list_2482 = scope_2479.start_list(true, Some("Filter"));
        for item_2481 in var_2480 {
            #[allow(unused_mut)]
            let mut entry_2483 = list_2482.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2483, item_2481)?;
        }
        list_2482.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("DryRun");
    if let Some(var_2485) = &input.dry_run {
        scope_2484.boolean(*var_2485);
    }
    #[allow(unused_mut)]
    let mut scope_2486 = writer.prefix("InternetGatewayId");
    if let Some(var_2487) = &input.internet_gateway_ids {
        let mut list_2489 = scope_2486.start_list(true, Some("item"));
        for item_2488 in var_2487 {
            #[allow(unused_mut)]
            let mut entry_2490 = list_2489.entry();
            entry_2490.string(item_2488);
        }
        list_2489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("NextToken");
    if let Some(var_2492) = &input.next_token {
        scope_2491.string(var_2492);
    }
    #[allow(unused_mut)]
    let mut scope_2493 = writer.prefix("MaxResults");
    if let Some(var_2494) = &input.max_results {
        scope_2493.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2494).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2495 = writer.prefix("PoolId");
    if let Some(var_2496) = &input.pool_ids {
        let mut list_2498 = scope_2495.start_list(true, Some("item"));
        for item_2497 in var_2496 {
            #[allow(unused_mut)]
            let mut entry_2499 = list_2498.entry();
            entry_2499.string(item_2497);
        }
        list_2498.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2500 = writer.prefix("NextToken");
    if let Some(var_2501) = &input.next_token {
        scope_2500.string(var_2501);
    }
    #[allow(unused_mut)]
    let mut scope_2502 = writer.prefix("MaxResults");
    if let Some(var_2503) = &input.max_results {
        scope_2502.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2503).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2504 = writer.prefix("DryRun");
    if let Some(var_2505) = &input.dry_run {
        scope_2504.boolean(*var_2505);
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("Filter");
    if let Some(var_2507) = &input.filters {
        let mut list_2509 = scope_2506.start_list(true, Some("Filter"));
        for item_2508 in var_2507 {
            #[allow(unused_mut)]
            let mut entry_2510 = list_2509.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2510, item_2508)?;
        }
        list_2509.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("Filter");
    if let Some(var_2512) = &input.filters {
        let mut list_2514 = scope_2511.start_list(true, Some("Filter"));
        for item_2513 in var_2512 {
            #[allow(unused_mut)]
            let mut entry_2515 = list_2514.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2515, item_2513)?;
        }
        list_2514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2516 = writer.prefix("KeyName");
    if let Some(var_2517) = &input.key_names {
        let mut list_2519 = scope_2516.start_list(true, Some("KeyName"));
        for item_2518 in var_2517 {
            #[allow(unused_mut)]
            let mut entry_2520 = list_2519.entry();
            entry_2520.string(item_2518);
        }
        list_2519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("KeyPairId");
    if let Some(var_2522) = &input.key_pair_ids {
        let mut list_2524 = scope_2521.start_list(true, Some("KeyPairId"));
        for item_2523 in var_2522 {
            #[allow(unused_mut)]
            let mut entry_2525 = list_2524.entry();
            entry_2525.string(item_2523);
        }
        list_2524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2526 = writer.prefix("DryRun");
    if let Some(var_2527) = &input.dry_run {
        scope_2526.boolean(*var_2527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("DryRun");
    if let Some(var_2529) = &input.dry_run {
        scope_2528.boolean(*var_2529);
    }
    #[allow(unused_mut)]
    let mut scope_2530 = writer.prefix("LaunchTemplateId");
    if let Some(var_2531) = &input.launch_template_ids {
        let mut list_2533 = scope_2530.start_list(true, Some("item"));
        for item_2532 in var_2531 {
            #[allow(unused_mut)]
            let mut entry_2534 = list_2533.entry();
            entry_2534.string(item_2532);
        }
        list_2533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2535 = writer.prefix("LaunchTemplateName");
    if let Some(var_2536) = &input.launch_template_names {
        let mut list_2538 = scope_2535.start_list(true, Some("item"));
        for item_2537 in var_2536 {
            #[allow(unused_mut)]
            let mut entry_2539 = list_2538.entry();
            entry_2539.string(item_2537);
        }
        list_2538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2540 = writer.prefix("Filter");
    if let Some(var_2541) = &input.filters {
        let mut list_2543 = scope_2540.start_list(true, Some("Filter"));
        for item_2542 in var_2541 {
            #[allow(unused_mut)]
            let mut entry_2544 = list_2543.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2544, item_2542)?;
        }
        list_2543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2545 = writer.prefix("NextToken");
    if let Some(var_2546) = &input.next_token {
        scope_2545.string(var_2546);
    }
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("MaxResults");
    if let Some(var_2548) = &input.max_results {
        scope_2547.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2548).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("DryRun");
    if let Some(var_2550) = &input.dry_run {
        scope_2549.boolean(*var_2550);
    }
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("LaunchTemplateId");
    if let Some(var_2552) = &input.launch_template_id {
        scope_2551.string(var_2552);
    }
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("LaunchTemplateName");
    if let Some(var_2554) = &input.launch_template_name {
        scope_2553.string(var_2554);
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2556) = &input.versions {
        let mut list_2558 = scope_2555.start_list(true, Some("item"));
        for item_2557 in var_2556 {
            #[allow(unused_mut)]
            let mut entry_2559 = list_2558.entry();
            entry_2559.string(item_2557);
        }
        list_2558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("MinVersion");
    if let Some(var_2561) = &input.min_version {
        scope_2560.string(var_2561);
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("MaxVersion");
    if let Some(var_2563) = &input.max_version {
        scope_2562.string(var_2563);
    }
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("NextToken");
    if let Some(var_2565) = &input.next_token {
        scope_2564.string(var_2565);
    }
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("MaxResults");
    if let Some(var_2567) = &input.max_results {
        scope_2566.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2567).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("Filter");
    if let Some(var_2569) = &input.filters {
        let mut list_2571 = scope_2568.start_list(true, Some("Filter"));
        for item_2570 in var_2569 {
            #[allow(unused_mut)]
            let mut entry_2572 = list_2571.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2572, item_2570)?;
        }
        list_2571.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2573 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2574) = &input.local_gateway_route_table_ids {
        let mut list_2576 = scope_2573.start_list(true, Some("item"));
        for item_2575 in var_2574 {
            #[allow(unused_mut)]
            let mut entry_2577 = list_2576.entry();
            entry_2577.string(item_2575);
        }
        list_2576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2578 = writer.prefix("Filter");
    if let Some(var_2579) = &input.filters {
        let mut list_2581 = scope_2578.start_list(true, Some("Filter"));
        for item_2580 in var_2579 {
            #[allow(unused_mut)]
            let mut entry_2582 = list_2581.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2582, item_2580)?;
        }
        list_2581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("MaxResults");
    if let Some(var_2584) = &input.max_results {
        scope_2583.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2584).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("NextToken");
    if let Some(var_2586) = &input.next_token {
        scope_2585.string(var_2586);
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("DryRun");
    if let Some(var_2588) = &input.dry_run {
        scope_2587.boolean(*var_2588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2590) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2592 = scope_2589.start_list(true, Some("item"));
        for item_2591 in var_2590 {
            #[allow(unused_mut)]
            let mut entry_2593 = list_2592.entry();
            entry_2593.string(item_2591);
        }
        list_2592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("Filter");
    if let Some(var_2595) = &input.filters {
        let mut list_2597 = scope_2594.start_list(true, Some("Filter"));
        for item_2596 in var_2595 {
            #[allow(unused_mut)]
            let mut entry_2598 = list_2597.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2598, item_2596)?;
        }
        list_2597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2599 = writer.prefix("MaxResults");
    if let Some(var_2600) = &input.max_results {
        scope_2599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("NextToken");
    if let Some(var_2602) = &input.next_token {
        scope_2601.string(var_2602);
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("DryRun");
    if let Some(var_2604) = &input.dry_run {
        scope_2603.boolean(*var_2604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2606) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2608 = scope_2605.start_list(true, Some("item"));
        for item_2607 in var_2606 {
            #[allow(unused_mut)]
            let mut entry_2609 = list_2608.entry();
            entry_2609.string(item_2607);
        }
        list_2608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("Filter");
    if let Some(var_2611) = &input.filters {
        let mut list_2613 = scope_2610.start_list(true, Some("Filter"));
        for item_2612 in var_2611 {
            #[allow(unused_mut)]
            let mut entry_2614 = list_2613.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2614, item_2612)?;
        }
        list_2613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2615 = writer.prefix("MaxResults");
    if let Some(var_2616) = &input.max_results {
        scope_2615.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2616).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2617 = writer.prefix("NextToken");
    if let Some(var_2618) = &input.next_token {
        scope_2617.string(var_2618);
    }
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("DryRun");
    if let Some(var_2620) = &input.dry_run {
        scope_2619.boolean(*var_2620);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2621 = writer.prefix("LocalGatewayId");
    if let Some(var_2622) = &input.local_gateway_ids {
        let mut list_2624 = scope_2621.start_list(true, Some("item"));
        for item_2623 in var_2622 {
            #[allow(unused_mut)]
            let mut entry_2625 = list_2624.entry();
            entry_2625.string(item_2623);
        }
        list_2624.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2626 = writer.prefix("Filter");
    if let Some(var_2627) = &input.filters {
        let mut list_2629 = scope_2626.start_list(true, Some("Filter"));
        for item_2628 in var_2627 {
            #[allow(unused_mut)]
            let mut entry_2630 = list_2629.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2630, item_2628)?;
        }
        list_2629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("MaxResults");
    if let Some(var_2632) = &input.max_results {
        scope_2631.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2632).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("NextToken");
    if let Some(var_2634) = &input.next_token {
        scope_2633.string(var_2634);
    }
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("DryRun");
    if let Some(var_2636) = &input.dry_run {
        scope_2635.boolean(*var_2636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2638) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2640 = scope_2637.start_list(true, Some("item"));
        for item_2639 in var_2638 {
            #[allow(unused_mut)]
            let mut entry_2641 = list_2640.entry();
            entry_2641.string(item_2639);
        }
        list_2640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2642 = writer.prefix("Filter");
    if let Some(var_2643) = &input.filters {
        let mut list_2645 = scope_2642.start_list(true, Some("Filter"));
        for item_2644 in var_2643 {
            #[allow(unused_mut)]
            let mut entry_2646 = list_2645.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2646, item_2644)?;
        }
        list_2645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2647 = writer.prefix("MaxResults");
    if let Some(var_2648) = &input.max_results {
        scope_2647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("NextToken");
    if let Some(var_2650) = &input.next_token {
        scope_2649.string(var_2650);
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("DryRun");
    if let Some(var_2652) = &input.dry_run {
        scope_2651.boolean(*var_2652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2654) = &input.local_gateway_virtual_interface_ids {
        let mut list_2656 = scope_2653.start_list(true, Some("item"));
        for item_2655 in var_2654 {
            #[allow(unused_mut)]
            let mut entry_2657 = list_2656.entry();
            entry_2657.string(item_2655);
        }
        list_2656.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2658 = writer.prefix("Filter");
    if let Some(var_2659) = &input.filters {
        let mut list_2661 = scope_2658.start_list(true, Some("Filter"));
        for item_2660 in var_2659 {
            #[allow(unused_mut)]
            let mut entry_2662 = list_2661.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2662, item_2660)?;
        }
        list_2661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("MaxResults");
    if let Some(var_2664) = &input.max_results {
        scope_2663.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2664).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2665 = writer.prefix("NextToken");
    if let Some(var_2666) = &input.next_token {
        scope_2665.string(var_2666);
    }
    #[allow(unused_mut)]
    let mut scope_2667 = writer.prefix("DryRun");
    if let Some(var_2668) = &input.dry_run {
        scope_2667.boolean(*var_2668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2669 = writer.prefix("DryRun");
    if let Some(var_2670) = &input.dry_run {
        scope_2669.boolean(*var_2670);
    }
    #[allow(unused_mut)]
    let mut scope_2671 = writer.prefix("Filter");
    if let Some(var_2672) = &input.filters {
        let mut list_2674 = scope_2671.start_list(true, Some("Filter"));
        for item_2673 in var_2672 {
            #[allow(unused_mut)]
            let mut entry_2675 = list_2674.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2675, item_2673)?;
        }
        list_2674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2676 = writer.prefix("MaxResults");
    if let Some(var_2677) = &input.max_results {
        scope_2676.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2677).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2678 = writer.prefix("NextToken");
    if let Some(var_2679) = &input.next_token {
        scope_2678.string(var_2679);
    }
    #[allow(unused_mut)]
    let mut scope_2680 = writer.prefix("PrefixListId");
    if let Some(var_2681) = &input.prefix_list_ids {
        let mut list_2683 = scope_2680.start_list(true, Some("item"));
        for item_2682 in var_2681 {
            #[allow(unused_mut)]
            let mut entry_2684 = list_2683.entry();
            entry_2684.string(item_2682);
        }
        list_2683.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2685 = writer.prefix("Filter");
    if let Some(var_2686) = &input.filters {
        let mut list_2688 = scope_2685.start_list(true, Some("Filter"));
        for item_2687 in var_2686 {
            #[allow(unused_mut)]
            let mut entry_2689 = list_2688.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2689, item_2687)?;
        }
        list_2688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2690 = writer.prefix("DryRun");
    if let Some(var_2691) = &input.dry_run {
        scope_2690.boolean(*var_2691);
    }
    #[allow(unused_mut)]
    let mut scope_2692 = writer.prefix("MaxResults");
    if let Some(var_2693) = &input.max_results {
        scope_2692.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2693).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2694 = writer.prefix("NextToken");
    if let Some(var_2695) = &input.next_token {
        scope_2694.string(var_2695);
    }
    #[allow(unused_mut)]
    let mut scope_2696 = writer.prefix("PublicIp");
    if let Some(var_2697) = &input.public_ips {
        let mut list_2699 = scope_2696.start_list(true, Some("item"));
        for item_2698 in var_2697 {
            #[allow(unused_mut)]
            let mut entry_2700 = list_2699.entry();
            entry_2700.string(item_2698);
        }
        list_2699.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2701 = writer.prefix("DryRun");
    if let Some(var_2702) = &input.dry_run {
        scope_2701.boolean(*var_2702);
    }
    #[allow(unused_mut)]
    let mut scope_2703 = writer.prefix("Filter");
    if let Some(var_2704) = &input.filter {
        let mut list_2706 = scope_2703.start_list(true, Some("Filter"));
        for item_2705 in var_2704 {
            #[allow(unused_mut)]
            let mut entry_2707 = list_2706.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2707, item_2705)?;
        }
        list_2706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2708 = writer.prefix("MaxResults");
    if let Some(var_2709) = &input.max_results {
        scope_2708.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2709).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2710 = writer.prefix("NatGatewayId");
    if let Some(var_2711) = &input.nat_gateway_ids {
        let mut list_2713 = scope_2710.start_list(true, Some("item"));
        for item_2712 in var_2711 {
            #[allow(unused_mut)]
            let mut entry_2714 = list_2713.entry();
            entry_2714.string(item_2712);
        }
        list_2713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2715 = writer.prefix("NextToken");
    if let Some(var_2716) = &input.next_token {
        scope_2715.string(var_2716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2717 = writer.prefix("Filter");
    if let Some(var_2718) = &input.filters {
        let mut list_2720 = scope_2717.start_list(true, Some("Filter"));
        for item_2719 in var_2718 {
            #[allow(unused_mut)]
            let mut entry_2721 = list_2720.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2721, item_2719)?;
        }
        list_2720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2722 = writer.prefix("DryRun");
    if let Some(var_2723) = &input.dry_run {
        scope_2722.boolean(*var_2723);
    }
    #[allow(unused_mut)]
    let mut scope_2724 = writer.prefix("NetworkAclId");
    if let Some(var_2725) = &input.network_acl_ids {
        let mut list_2727 = scope_2724.start_list(true, Some("item"));
        for item_2726 in var_2725 {
            #[allow(unused_mut)]
            let mut entry_2728 = list_2727.entry();
            entry_2728.string(item_2726);
        }
        list_2727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("NextToken");
    if let Some(var_2730) = &input.next_token {
        scope_2729.string(var_2730);
    }
    #[allow(unused_mut)]
    let mut scope_2731 = writer.prefix("MaxResults");
    if let Some(var_2732) = &input.max_results {
        scope_2731.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2732).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2733 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2734) = &input.network_insights_analysis_ids {
        let mut list_2736 = scope_2733.start_list(true, Some("item"));
        for item_2735 in var_2734 {
            #[allow(unused_mut)]
            let mut entry_2737 = list_2736.entry();
            entry_2737.string(item_2735);
        }
        list_2736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2738 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2739) = &input.network_insights_path_id {
        scope_2738.string(var_2739);
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("AnalysisStartTime");
    if let Some(var_2741) = &input.analysis_start_time {
        scope_2740.date_time(var_2741, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("AnalysisEndTime");
    if let Some(var_2743) = &input.analysis_end_time {
        scope_2742.date_time(var_2743, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("Filter");
    if let Some(var_2745) = &input.filters {
        let mut list_2747 = scope_2744.start_list(true, Some("Filter"));
        for item_2746 in var_2745 {
            #[allow(unused_mut)]
            let mut entry_2748 = list_2747.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2748, item_2746)?;
        }
        list_2747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("MaxResults");
    if let Some(var_2750) = &input.max_results {
        scope_2749.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2750).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2751 = writer.prefix("DryRun");
    if let Some(var_2752) = &input.dry_run {
        scope_2751.boolean(*var_2752);
    }
    #[allow(unused_mut)]
    let mut scope_2753 = writer.prefix("NextToken");
    if let Some(var_2754) = &input.next_token {
        scope_2753.string(var_2754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2755 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2756) = &input.network_insights_path_ids {
        let mut list_2758 = scope_2755.start_list(true, Some("item"));
        for item_2757 in var_2756 {
            #[allow(unused_mut)]
            let mut entry_2759 = list_2758.entry();
            entry_2759.string(item_2757);
        }
        list_2758.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2760 = writer.prefix("Filter");
    if let Some(var_2761) = &input.filters {
        let mut list_2763 = scope_2760.start_list(true, Some("Filter"));
        for item_2762 in var_2761 {
            #[allow(unused_mut)]
            let mut entry_2764 = list_2763.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2764, item_2762)?;
        }
        list_2763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("MaxResults");
    if let Some(var_2766) = &input.max_results {
        scope_2765.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2766).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("DryRun");
    if let Some(var_2768) = &input.dry_run {
        scope_2767.boolean(*var_2768);
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("NextToken");
    if let Some(var_2770) = &input.next_token {
        scope_2769.string(var_2770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("Attribute");
    if let Some(var_2772) = &input.attribute {
        scope_2771.string(var_2772.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2773 = writer.prefix("DryRun");
    if let Some(var_2774) = &input.dry_run {
        scope_2773.boolean(*var_2774);
    }
    #[allow(unused_mut)]
    let mut scope_2775 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2776) = &input.network_interface_id {
        scope_2775.string(var_2776);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2777 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_2778) = &input.network_interface_permission_ids {
        let mut list_2780 = scope_2777.start_list(true, None);
        for item_2779 in var_2778 {
            #[allow(unused_mut)]
            let mut entry_2781 = list_2780.entry();
            entry_2781.string(item_2779);
        }
        list_2780.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("Filter");
    if let Some(var_2783) = &input.filters {
        let mut list_2785 = scope_2782.start_list(true, Some("Filter"));
        for item_2784 in var_2783 {
            #[allow(unused_mut)]
            let mut entry_2786 = list_2785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2786, item_2784)?;
        }
        list_2785.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("NextToken");
    if let Some(var_2788) = &input.next_token {
        scope_2787.string(var_2788);
    }
    #[allow(unused_mut)]
    let mut scope_2789 = writer.prefix("MaxResults");
    if let Some(var_2790) = &input.max_results {
        scope_2789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2790).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2791 = writer.prefix("Filter");
    if let Some(var_2792) = &input.filters {
        let mut list_2794 = scope_2791.start_list(true, Some("Filter"));
        for item_2793 in var_2792 {
            #[allow(unused_mut)]
            let mut entry_2795 = list_2794.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2795, item_2793)?;
        }
        list_2794.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2796 = writer.prefix("DryRun");
    if let Some(var_2797) = &input.dry_run {
        scope_2796.boolean(*var_2797);
    }
    #[allow(unused_mut)]
    let mut scope_2798 = writer.prefix("NetworkInterfaceId");
    if let Some(var_2799) = &input.network_interface_ids {
        let mut list_2801 = scope_2798.start_list(true, Some("item"));
        for item_2800 in var_2799 {
            #[allow(unused_mut)]
            let mut entry_2802 = list_2801.entry();
            entry_2802.string(item_2800);
        }
        list_2801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("NextToken");
    if let Some(var_2804) = &input.next_token {
        scope_2803.string(var_2804);
    }
    #[allow(unused_mut)]
    let mut scope_2805 = writer.prefix("MaxResults");
    if let Some(var_2806) = &input.max_results {
        scope_2805.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2806).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2807 = writer.prefix("Filter");
    if let Some(var_2808) = &input.filters {
        let mut list_2810 = scope_2807.start_list(true, Some("Filter"));
        for item_2809 in var_2808 {
            #[allow(unused_mut)]
            let mut entry_2811 = list_2810.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2811, item_2809)?;
        }
        list_2810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("DryRun");
    if let Some(var_2813) = &input.dry_run {
        scope_2812.boolean(*var_2813);
    }
    #[allow(unused_mut)]
    let mut scope_2814 = writer.prefix("GroupName");
    if let Some(var_2815) = &input.group_names {
        let mut list_2817 = scope_2814.start_list(true, None);
        for item_2816 in var_2815 {
            #[allow(unused_mut)]
            let mut entry_2818 = list_2817.entry();
            entry_2818.string(item_2816);
        }
        list_2817.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("GroupId");
    if let Some(var_2820) = &input.group_ids {
        let mut list_2822 = scope_2819.start_list(true, Some("GroupId"));
        for item_2821 in var_2820 {
            #[allow(unused_mut)]
            let mut entry_2823 = list_2822.entry();
            entry_2823.string(item_2821);
        }
        list_2822.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("DryRun");
    if let Some(var_2825) = &input.dry_run {
        scope_2824.boolean(*var_2825);
    }
    #[allow(unused_mut)]
    let mut scope_2826 = writer.prefix("Filter");
    if let Some(var_2827) = &input.filters {
        let mut list_2829 = scope_2826.start_list(true, Some("Filter"));
        for item_2828 in var_2827 {
            #[allow(unused_mut)]
            let mut entry_2830 = list_2829.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2830, item_2828)?;
        }
        list_2829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("MaxResults");
    if let Some(var_2832) = &input.max_results {
        scope_2831.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2832).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("NextToken");
    if let Some(var_2834) = &input.next_token {
        scope_2833.string(var_2834);
    }
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("PrefixListId");
    if let Some(var_2836) = &input.prefix_list_ids {
        let mut list_2838 = scope_2835.start_list(true, Some("item"));
        for item_2837 in var_2836 {
            #[allow(unused_mut)]
            let mut entry_2839 = list_2838.entry();
            entry_2839.string(item_2837);
        }
        list_2838.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("DryRun");
    if let Some(var_2841) = &input.dry_run {
        scope_2840.boolean(*var_2841);
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("Resource");
    if let Some(var_2843) = &input.resources {
        let mut list_2845 = scope_2842.start_list(true, Some("item"));
        for item_2844 in var_2843 {
            #[allow(unused_mut)]
            let mut entry_2846 = list_2845.entry();
            entry_2846.string(item_2844);
        }
        list_2845.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("MaxResults");
    if let Some(var_2848) = &input.max_results {
        scope_2847.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2848).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("NextToken");
    if let Some(var_2850) = &input.next_token {
        scope_2849.string(var_2850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("PoolId");
    if let Some(var_2852) = &input.pool_ids {
        let mut list_2854 = scope_2851.start_list(true, Some("item"));
        for item_2853 in var_2852 {
            #[allow(unused_mut)]
            let mut entry_2855 = list_2854.entry();
            entry_2855.string(item_2853);
        }
        list_2854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("NextToken");
    if let Some(var_2857) = &input.next_token {
        scope_2856.string(var_2857);
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("MaxResults");
    if let Some(var_2859) = &input.max_results {
        scope_2858.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2859).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2860 = writer.prefix("Filter");
    if let Some(var_2861) = &input.filters {
        let mut list_2863 = scope_2860.start_list(true, Some("Filter"));
        for item_2862 in var_2861 {
            #[allow(unused_mut)]
            let mut entry_2864 = list_2863.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2864, item_2862)?;
        }
        list_2863.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2865 = writer.prefix("Filter");
    if let Some(var_2866) = &input.filters {
        let mut list_2868 = scope_2865.start_list(true, Some("Filter"));
        for item_2867 in var_2866 {
            #[allow(unused_mut)]
            let mut entry_2869 = list_2868.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2869, item_2867)?;
        }
        list_2868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2870 = writer.prefix("RegionName");
    if let Some(var_2871) = &input.region_names {
        let mut list_2873 = scope_2870.start_list(true, Some("RegionName"));
        for item_2872 in var_2871 {
            #[allow(unused_mut)]
            let mut entry_2874 = list_2873.entry();
            entry_2874.string(item_2872);
        }
        list_2873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2875 = writer.prefix("DryRun");
    if let Some(var_2876) = &input.dry_run {
        scope_2875.boolean(*var_2876);
    }
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("AllRegions");
    if let Some(var_2878) = &input.all_regions {
        scope_2877.boolean(*var_2878);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_2880) = &input.replace_root_volume_task_ids {
        let mut list_2882 = scope_2879.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_2881 in var_2880 {
            #[allow(unused_mut)]
            let mut entry_2883 = list_2882.entry();
            entry_2883.string(item_2881);
        }
        list_2882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2884 = writer.prefix("Filter");
    if let Some(var_2885) = &input.filters {
        let mut list_2887 = scope_2884.start_list(true, Some("Filter"));
        for item_2886 in var_2885 {
            #[allow(unused_mut)]
            let mut entry_2888 = list_2887.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2888, item_2886)?;
        }
        list_2887.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2889 = writer.prefix("MaxResults");
    if let Some(var_2890) = &input.max_results {
        scope_2889.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2890).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2891 = writer.prefix("NextToken");
    if let Some(var_2892) = &input.next_token {
        scope_2891.string(var_2892);
    }
    #[allow(unused_mut)]
    let mut scope_2893 = writer.prefix("DryRun");
    if let Some(var_2894) = &input.dry_run {
        scope_2893.boolean(*var_2894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2895 = writer.prefix("Filter");
    if let Some(var_2896) = &input.filters {
        let mut list_2898 = scope_2895.start_list(true, Some("Filter"));
        for item_2897 in var_2896 {
            #[allow(unused_mut)]
            let mut entry_2899 = list_2898.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2899, item_2897)?;
        }
        list_2898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2900 = writer.prefix("OfferingClass");
    if let Some(var_2901) = &input.offering_class {
        scope_2900.string(var_2901.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2902 = writer.prefix("ReservedInstancesId");
    if let Some(var_2903) = &input.reserved_instances_ids {
        let mut list_2905 = scope_2902.start_list(true, Some("ReservedInstancesId"));
        for item_2904 in var_2903 {
            #[allow(unused_mut)]
            let mut entry_2906 = list_2905.entry();
            entry_2906.string(item_2904);
        }
        list_2905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2907 = writer.prefix("DryRun");
    if let Some(var_2908) = &input.dry_run {
        scope_2907.boolean(*var_2908);
    }
    #[allow(unused_mut)]
    let mut scope_2909 = writer.prefix("OfferingType");
    if let Some(var_2910) = &input.offering_type {
        scope_2909.string(var_2910.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2911 = writer.prefix("Filter");
    if let Some(var_2912) = &input.filters {
        let mut list_2914 = scope_2911.start_list(true, Some("Filter"));
        for item_2913 in var_2912 {
            #[allow(unused_mut)]
            let mut entry_2915 = list_2914.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2915, item_2913)?;
        }
        list_2914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2916 = writer.prefix("ReservedInstancesId");
    if let Some(var_2917) = &input.reserved_instances_id {
        scope_2916.string(var_2917);
    }
    #[allow(unused_mut)]
    let mut scope_2918 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_2919) = &input.reserved_instances_listing_id {
        scope_2918.string(var_2919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("Filter");
    if let Some(var_2921) = &input.filters {
        let mut list_2923 = scope_2920.start_list(true, Some("Filter"));
        for item_2922 in var_2921 {
            #[allow(unused_mut)]
            let mut entry_2924 = list_2923.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2924, item_2922)?;
        }
        list_2923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2925 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_2926) = &input.reserved_instances_modification_ids {
        let mut list_2928 = scope_2925.start_list(true, Some("ReservedInstancesModificationId"));
        for item_2927 in var_2926 {
            #[allow(unused_mut)]
            let mut entry_2929 = list_2928.entry();
            entry_2929.string(item_2927);
        }
        list_2928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2930 = writer.prefix("NextToken");
    if let Some(var_2931) = &input.next_token {
        scope_2930.string(var_2931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2932 = writer.prefix("AvailabilityZone");
    if let Some(var_2933) = &input.availability_zone {
        scope_2932.string(var_2933);
    }
    #[allow(unused_mut)]
    let mut scope_2934 = writer.prefix("Filter");
    if let Some(var_2935) = &input.filters {
        let mut list_2937 = scope_2934.start_list(true, Some("Filter"));
        for item_2936 in var_2935 {
            #[allow(unused_mut)]
            let mut entry_2938 = list_2937.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2938, item_2936)?;
        }
        list_2937.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2939 = writer.prefix("IncludeMarketplace");
    if let Some(var_2940) = &input.include_marketplace {
        scope_2939.boolean(*var_2940);
    }
    #[allow(unused_mut)]
    let mut scope_2941 = writer.prefix("InstanceType");
    if let Some(var_2942) = &input.instance_type {
        scope_2941.string(var_2942.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("MaxDuration");
    if let Some(var_2944) = &input.max_duration {
        scope_2943.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2944).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("MaxInstanceCount");
    if let Some(var_2946) = &input.max_instance_count {
        scope_2945.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2946).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("MinDuration");
    if let Some(var_2948) = &input.min_duration {
        scope_2947.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2948).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("OfferingClass");
    if let Some(var_2950) = &input.offering_class {
        scope_2949.string(var_2950.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("ProductDescription");
    if let Some(var_2952) = &input.product_description {
        scope_2951.string(var_2952.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_2954) = &input.reserved_instances_offering_ids {
        let mut list_2956 = scope_2953.start_list(true, None);
        for item_2955 in var_2954 {
            #[allow(unused_mut)]
            let mut entry_2957 = list_2956.entry();
            entry_2957.string(item_2955);
        }
        list_2956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("DryRun");
    if let Some(var_2959) = &input.dry_run {
        scope_2958.boolean(*var_2959);
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("InstanceTenancy");
    if let Some(var_2961) = &input.instance_tenancy {
        scope_2960.string(var_2961.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2962 = writer.prefix("MaxResults");
    if let Some(var_2963) = &input.max_results {
        scope_2962.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2963).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2964 = writer.prefix("NextToken");
    if let Some(var_2965) = &input.next_token {
        scope_2964.string(var_2965);
    }
    #[allow(unused_mut)]
    let mut scope_2966 = writer.prefix("OfferingType");
    if let Some(var_2967) = &input.offering_type {
        scope_2966.string(var_2967.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2968 = writer.prefix("Filter");
    if let Some(var_2969) = &input.filters {
        let mut list_2971 = scope_2968.start_list(true, Some("Filter"));
        for item_2970 in var_2969 {
            #[allow(unused_mut)]
            let mut entry_2972 = list_2971.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2972, item_2970)?;
        }
        list_2971.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2973 = writer.prefix("DryRun");
    if let Some(var_2974) = &input.dry_run {
        scope_2973.boolean(*var_2974);
    }
    #[allow(unused_mut)]
    let mut scope_2975 = writer.prefix("RouteTableId");
    if let Some(var_2976) = &input.route_table_ids {
        let mut list_2978 = scope_2975.start_list(true, Some("item"));
        for item_2977 in var_2976 {
            #[allow(unused_mut)]
            let mut entry_2979 = list_2978.entry();
            entry_2979.string(item_2977);
        }
        list_2978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2980 = writer.prefix("NextToken");
    if let Some(var_2981) = &input.next_token {
        scope_2980.string(var_2981);
    }
    #[allow(unused_mut)]
    let mut scope_2982 = writer.prefix("MaxResults");
    if let Some(var_2983) = &input.max_results {
        scope_2982.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2983).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2984 = writer.prefix("DryRun");
    if let Some(var_2985) = &input.dry_run {
        scope_2984.boolean(*var_2985);
    }
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("Filter");
    if let Some(var_2987) = &input.filters {
        let mut list_2989 = scope_2986.start_list(true, Some("Filter"));
        for item_2988 in var_2987 {
            #[allow(unused_mut)]
            let mut entry_2990 = list_2989.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2990, item_2988)?;
        }
        list_2989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2991 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_2992) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_2991, var_2992,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_2993 = writer.prefix("MaxResults");
    if let Some(var_2994) = &input.max_results {
        scope_2993.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2994).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_2996) = &input.max_slot_duration_in_hours {
        scope_2995.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2996).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_2998) = &input.min_slot_duration_in_hours {
        scope_2997.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2998).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("NextToken");
    if let Some(var_3000) = &input.next_token {
        scope_2999.string(var_3000);
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("Recurrence");
    if let Some(var_3002) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3001, var_3002,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("DryRun");
    if let Some(var_3004) = &input.dry_run {
        scope_3003.boolean(*var_3004);
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("Filter");
    if let Some(var_3006) = &input.filters {
        let mut list_3008 = scope_3005.start_list(true, Some("Filter"));
        for item_3007 in var_3006 {
            #[allow(unused_mut)]
            let mut entry_3009 = list_3008.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3009, item_3007)?;
        }
        list_3008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("MaxResults");
    if let Some(var_3011) = &input.max_results {
        scope_3010.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3011).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("NextToken");
    if let Some(var_3013) = &input.next_token {
        scope_3012.string(var_3013);
    }
    #[allow(unused_mut)]
    let mut scope_3014 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3015) = &input.scheduled_instance_ids {
        let mut list_3017 = scope_3014.start_list(true, Some("ScheduledInstanceId"));
        for item_3016 in var_3015 {
            #[allow(unused_mut)]
            let mut entry_3018 = list_3017.entry();
            entry_3018.string(item_3016);
        }
        list_3017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3020) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3019, var_3020,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3021 = writer.prefix("DryRun");
    if let Some(var_3022) = &input.dry_run {
        scope_3021.boolean(*var_3022);
    }
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("GroupId");
    if let Some(var_3024) = &input.group_id {
        let mut list_3026 = scope_3023.start_list(true, Some("item"));
        for item_3025 in var_3024 {
            #[allow(unused_mut)]
            let mut entry_3027 = list_3026.entry();
            entry_3027.string(item_3025);
        }
        list_3026.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3028 = writer.prefix("Filter");
    if let Some(var_3029) = &input.filters {
        let mut list_3031 = scope_3028.start_list(true, Some("Filter"));
        for item_3030 in var_3029 {
            #[allow(unused_mut)]
            let mut entry_3032 = list_3031.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3032, item_3030)?;
        }
        list_3031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3034) = &input.security_group_rule_ids {
        let mut list_3036 = scope_3033.start_list(true, Some("item"));
        for item_3035 in var_3034 {
            #[allow(unused_mut)]
            let mut entry_3037 = list_3036.entry();
            entry_3037.string(item_3035);
        }
        list_3036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3038 = writer.prefix("DryRun");
    if let Some(var_3039) = &input.dry_run {
        scope_3038.boolean(*var_3039);
    }
    #[allow(unused_mut)]
    let mut scope_3040 = writer.prefix("NextToken");
    if let Some(var_3041) = &input.next_token {
        scope_3040.string(var_3041);
    }
    #[allow(unused_mut)]
    let mut scope_3042 = writer.prefix("MaxResults");
    if let Some(var_3043) = &input.max_results {
        scope_3042.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3043).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("Filter");
    if let Some(var_3045) = &input.filters {
        let mut list_3047 = scope_3044.start_list(true, Some("Filter"));
        for item_3046 in var_3045 {
            #[allow(unused_mut)]
            let mut entry_3048 = list_3047.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3048, item_3046)?;
        }
        list_3047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3049 = writer.prefix("GroupId");
    if let Some(var_3050) = &input.group_ids {
        let mut list_3052 = scope_3049.start_list(true, Some("groupId"));
        for item_3051 in var_3050 {
            #[allow(unused_mut)]
            let mut entry_3053 = list_3052.entry();
            entry_3053.string(item_3051);
        }
        list_3052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3054 = writer.prefix("GroupName");
    if let Some(var_3055) = &input.group_names {
        let mut list_3057 = scope_3054.start_list(true, Some("GroupName"));
        for item_3056 in var_3055 {
            #[allow(unused_mut)]
            let mut entry_3058 = list_3057.entry();
            entry_3058.string(item_3056);
        }
        list_3057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3059 = writer.prefix("DryRun");
    if let Some(var_3060) = &input.dry_run {
        scope_3059.boolean(*var_3060);
    }
    #[allow(unused_mut)]
    let mut scope_3061 = writer.prefix("NextToken");
    if let Some(var_3062) = &input.next_token {
        scope_3061.string(var_3062);
    }
    #[allow(unused_mut)]
    let mut scope_3063 = writer.prefix("MaxResults");
    if let Some(var_3064) = &input.max_results {
        scope_3063.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3064).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3065 = writer.prefix("Attribute");
    if let Some(var_3066) = &input.attribute {
        scope_3065.string(var_3066.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3067 = writer.prefix("SnapshotId");
    if let Some(var_3068) = &input.snapshot_id {
        scope_3067.string(var_3068);
    }
    #[allow(unused_mut)]
    let mut scope_3069 = writer.prefix("DryRun");
    if let Some(var_3070) = &input.dry_run {
        scope_3069.boolean(*var_3070);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("Filter");
    if let Some(var_3072) = &input.filters {
        let mut list_3074 = scope_3071.start_list(true, Some("Filter"));
        for item_3073 in var_3072 {
            #[allow(unused_mut)]
            let mut entry_3075 = list_3074.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3075, item_3073)?;
        }
        list_3074.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("MaxResults");
    if let Some(var_3077) = &input.max_results {
        scope_3076.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3077).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("NextToken");
    if let Some(var_3079) = &input.next_token {
        scope_3078.string(var_3079);
    }
    #[allow(unused_mut)]
    let mut scope_3080 = writer.prefix("Owner");
    if let Some(var_3081) = &input.owner_ids {
        let mut list_3083 = scope_3080.start_list(true, Some("Owner"));
        for item_3082 in var_3081 {
            #[allow(unused_mut)]
            let mut entry_3084 = list_3083.entry();
            entry_3084.string(item_3082);
        }
        list_3083.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3085 = writer.prefix("RestorableBy");
    if let Some(var_3086) = &input.restorable_by_user_ids {
        let mut list_3088 = scope_3085.start_list(true, None);
        for item_3087 in var_3086 {
            #[allow(unused_mut)]
            let mut entry_3089 = list_3088.entry();
            entry_3089.string(item_3087);
        }
        list_3088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3090 = writer.prefix("SnapshotId");
    if let Some(var_3091) = &input.snapshot_ids {
        let mut list_3093 = scope_3090.start_list(true, Some("SnapshotId"));
        for item_3092 in var_3091 {
            #[allow(unused_mut)]
            let mut entry_3094 = list_3093.entry();
            entry_3094.string(item_3092);
        }
        list_3093.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3095 = writer.prefix("DryRun");
    if let Some(var_3096) = &input.dry_run {
        scope_3095.boolean(*var_3096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3097 = writer.prefix("DryRun");
    if let Some(var_3098) = &input.dry_run {
        scope_3097.boolean(*var_3098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3099 = writer.prefix("DryRun");
    if let Some(var_3100) = &input.dry_run {
        scope_3099.boolean(*var_3100);
    }
    #[allow(unused_mut)]
    let mut scope_3101 = writer.prefix("MaxResults");
    if let Some(var_3102) = &input.max_results {
        scope_3101.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3102).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("NextToken");
    if let Some(var_3104) = &input.next_token {
        scope_3103.string(var_3104);
    }
    #[allow(unused_mut)]
    let mut scope_3105 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3106) = &input.spot_fleet_request_id {
        scope_3105.string(var_3106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("DryRun");
    if let Some(var_3108) = &input.dry_run {
        scope_3107.boolean(*var_3108);
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("EventType");
    if let Some(var_3110) = &input.event_type {
        scope_3109.string(var_3110.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3111 = writer.prefix("MaxResults");
    if let Some(var_3112) = &input.max_results {
        scope_3111.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3112).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3113 = writer.prefix("NextToken");
    if let Some(var_3114) = &input.next_token {
        scope_3113.string(var_3114);
    }
    #[allow(unused_mut)]
    let mut scope_3115 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3116) = &input.spot_fleet_request_id {
        scope_3115.string(var_3116);
    }
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("StartTime");
    if let Some(var_3118) = &input.start_time {
        scope_3117.date_time(var_3118, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("DryRun");
    if let Some(var_3120) = &input.dry_run {
        scope_3119.boolean(*var_3120);
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("MaxResults");
    if let Some(var_3122) = &input.max_results {
        scope_3121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3123 = writer.prefix("NextToken");
    if let Some(var_3124) = &input.next_token {
        scope_3123.string(var_3124);
    }
    #[allow(unused_mut)]
    let mut scope_3125 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3126) = &input.spot_fleet_request_ids {
        let mut list_3128 = scope_3125.start_list(true, Some("item"));
        for item_3127 in var_3126 {
            #[allow(unused_mut)]
            let mut entry_3129 = list_3128.entry();
            entry_3129.string(item_3127);
        }
        list_3128.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("Filter");
    if let Some(var_3131) = &input.filters {
        let mut list_3133 = scope_3130.start_list(true, Some("Filter"));
        for item_3132 in var_3131 {
            #[allow(unused_mut)]
            let mut entry_3134 = list_3133.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3134, item_3132)?;
        }
        list_3133.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("DryRun");
    if let Some(var_3136) = &input.dry_run {
        scope_3135.boolean(*var_3136);
    }
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3138) = &input.spot_instance_request_ids {
        let mut list_3140 = scope_3137.start_list(true, Some("SpotInstanceRequestId"));
        for item_3139 in var_3138 {
            #[allow(unused_mut)]
            let mut entry_3141 = list_3140.entry();
            entry_3141.string(item_3139);
        }
        list_3140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("NextToken");
    if let Some(var_3143) = &input.next_token {
        scope_3142.string(var_3143);
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("MaxResults");
    if let Some(var_3145) = &input.max_results {
        scope_3144.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3145).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("Filter");
    if let Some(var_3147) = &input.filters {
        let mut list_3149 = scope_3146.start_list(true, Some("Filter"));
        for item_3148 in var_3147 {
            #[allow(unused_mut)]
            let mut entry_3150 = list_3149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3150, item_3148)?;
        }
        list_3149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("AvailabilityZone");
    if let Some(var_3152) = &input.availability_zone {
        scope_3151.string(var_3152);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("DryRun");
    if let Some(var_3154) = &input.dry_run {
        scope_3153.boolean(*var_3154);
    }
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("EndTime");
    if let Some(var_3156) = &input.end_time {
        scope_3155.date_time(var_3156, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3157 = writer.prefix("InstanceType");
    if let Some(var_3158) = &input.instance_types {
        let mut list_3160 = scope_3157.start_list(true, None);
        for item_3159 in var_3158 {
            #[allow(unused_mut)]
            let mut entry_3161 = list_3160.entry();
            entry_3161.string(item_3159.as_str());
        }
        list_3160.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3162 = writer.prefix("MaxResults");
    if let Some(var_3163) = &input.max_results {
        scope_3162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3164 = writer.prefix("NextToken");
    if let Some(var_3165) = &input.next_token {
        scope_3164.string(var_3165);
    }
    #[allow(unused_mut)]
    let mut scope_3166 = writer.prefix("ProductDescription");
    if let Some(var_3167) = &input.product_descriptions {
        let mut list_3169 = scope_3166.start_list(true, None);
        for item_3168 in var_3167 {
            #[allow(unused_mut)]
            let mut entry_3170 = list_3169.entry();
            entry_3170.string(item_3168);
        }
        list_3169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3171 = writer.prefix("StartTime");
    if let Some(var_3172) = &input.start_time {
        scope_3171.date_time(var_3172, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3173 = writer.prefix("DryRun");
    if let Some(var_3174) = &input.dry_run {
        scope_3173.boolean(*var_3174);
    }
    #[allow(unused_mut)]
    let mut scope_3175 = writer.prefix("MaxResults");
    if let Some(var_3176) = &input.max_results {
        scope_3175.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3176).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3177 = writer.prefix("NextToken");
    if let Some(var_3178) = &input.next_token {
        scope_3177.string(var_3178);
    }
    #[allow(unused_mut)]
    let mut scope_3179 = writer.prefix("VpcId");
    if let Some(var_3180) = &input.vpc_id {
        scope_3179.string(var_3180);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3181 = writer.prefix("ImageId");
    if let Some(var_3182) = &input.image_ids {
        let mut list_3184 = scope_3181.start_list(true, Some("item"));
        for item_3183 in var_3182 {
            #[allow(unused_mut)]
            let mut entry_3185 = list_3184.entry();
            entry_3185.string(item_3183);
        }
        list_3184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("DryRun");
    if let Some(var_3187) = &input.dry_run {
        scope_3186.boolean(*var_3187);
    }
    #[allow(unused_mut)]
    let mut scope_3188 = writer.prefix("Filter");
    if let Some(var_3189) = &input.filters {
        let mut list_3191 = scope_3188.start_list(true, Some("Filter"));
        for item_3190 in var_3189 {
            #[allow(unused_mut)]
            let mut entry_3192 = list_3191.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3192, item_3190)?;
        }
        list_3191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("NextToken");
    if let Some(var_3194) = &input.next_token {
        scope_3193.string(var_3194);
    }
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("MaxResults");
    if let Some(var_3196) = &input.max_results {
        scope_3195.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3196).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3197 = writer.prefix("Filter");
    if let Some(var_3198) = &input.filters {
        let mut list_3200 = scope_3197.start_list(true, Some("Filter"));
        for item_3199 in var_3198 {
            #[allow(unused_mut)]
            let mut entry_3201 = list_3200.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3201, item_3199)?;
        }
        list_3200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3202 = writer.prefix("SubnetId");
    if let Some(var_3203) = &input.subnet_ids {
        let mut list_3205 = scope_3202.start_list(true, Some("SubnetId"));
        for item_3204 in var_3203 {
            #[allow(unused_mut)]
            let mut entry_3206 = list_3205.entry();
            entry_3206.string(item_3204);
        }
        list_3205.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3207 = writer.prefix("DryRun");
    if let Some(var_3208) = &input.dry_run {
        scope_3207.boolean(*var_3208);
    }
    #[allow(unused_mut)]
    let mut scope_3209 = writer.prefix("NextToken");
    if let Some(var_3210) = &input.next_token {
        scope_3209.string(var_3210);
    }
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("MaxResults");
    if let Some(var_3212) = &input.max_results {
        scope_3211.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3212).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("DryRun");
    if let Some(var_3214) = &input.dry_run {
        scope_3213.boolean(*var_3214);
    }
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("Filter");
    if let Some(var_3216) = &input.filters {
        let mut list_3218 = scope_3215.start_list(true, Some("Filter"));
        for item_3217 in var_3216 {
            #[allow(unused_mut)]
            let mut entry_3219 = list_3218.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3219, item_3217)?;
        }
        list_3218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3220 = writer.prefix("MaxResults");
    if let Some(var_3221) = &input.max_results {
        scope_3220.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3221).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3222 = writer.prefix("NextToken");
    if let Some(var_3223) = &input.next_token {
        scope_3222.string(var_3223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3224 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3225) = &input.traffic_mirror_filter_ids {
        let mut list_3227 = scope_3224.start_list(true, Some("item"));
        for item_3226 in var_3225 {
            #[allow(unused_mut)]
            let mut entry_3228 = list_3227.entry();
            entry_3228.string(item_3226);
        }
        list_3227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("DryRun");
    if let Some(var_3230) = &input.dry_run {
        scope_3229.boolean(*var_3230);
    }
    #[allow(unused_mut)]
    let mut scope_3231 = writer.prefix("Filter");
    if let Some(var_3232) = &input.filters {
        let mut list_3234 = scope_3231.start_list(true, Some("Filter"));
        for item_3233 in var_3232 {
            #[allow(unused_mut)]
            let mut entry_3235 = list_3234.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3235, item_3233)?;
        }
        list_3234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("MaxResults");
    if let Some(var_3237) = &input.max_results {
        scope_3236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("NextToken");
    if let Some(var_3239) = &input.next_token {
        scope_3238.string(var_3239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3241) = &input.traffic_mirror_session_ids {
        let mut list_3243 = scope_3240.start_list(true, Some("item"));
        for item_3242 in var_3241 {
            #[allow(unused_mut)]
            let mut entry_3244 = list_3243.entry();
            entry_3244.string(item_3242);
        }
        list_3243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3245 = writer.prefix("DryRun");
    if let Some(var_3246) = &input.dry_run {
        scope_3245.boolean(*var_3246);
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("Filter");
    if let Some(var_3248) = &input.filters {
        let mut list_3250 = scope_3247.start_list(true, Some("Filter"));
        for item_3249 in var_3248 {
            #[allow(unused_mut)]
            let mut entry_3251 = list_3250.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3251, item_3249)?;
        }
        list_3250.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3252 = writer.prefix("MaxResults");
    if let Some(var_3253) = &input.max_results {
        scope_3252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3253).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3254 = writer.prefix("NextToken");
    if let Some(var_3255) = &input.next_token {
        scope_3254.string(var_3255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3256 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3257) = &input.traffic_mirror_target_ids {
        let mut list_3259 = scope_3256.start_list(true, Some("item"));
        for item_3258 in var_3257 {
            #[allow(unused_mut)]
            let mut entry_3260 = list_3259.entry();
            entry_3260.string(item_3258);
        }
        list_3259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("DryRun");
    if let Some(var_3262) = &input.dry_run {
        scope_3261.boolean(*var_3262);
    }
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("Filter");
    if let Some(var_3264) = &input.filters {
        let mut list_3266 = scope_3263.start_list(true, Some("Filter"));
        for item_3265 in var_3264 {
            #[allow(unused_mut)]
            let mut entry_3267 = list_3266.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3267, item_3265)?;
        }
        list_3266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("MaxResults");
    if let Some(var_3269) = &input.max_results {
        scope_3268.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3269).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3270 = writer.prefix("NextToken");
    if let Some(var_3271) = &input.next_token {
        scope_3270.string(var_3271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3272 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3273) = &input.transit_gateway_attachment_ids {
        let mut list_3275 = scope_3272.start_list(true, None);
        for item_3274 in var_3273 {
            #[allow(unused_mut)]
            let mut entry_3276 = list_3275.entry();
            entry_3276.string(item_3274);
        }
        list_3275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("Filter");
    if let Some(var_3278) = &input.filters {
        let mut list_3280 = scope_3277.start_list(true, Some("Filter"));
        for item_3279 in var_3278 {
            #[allow(unused_mut)]
            let mut entry_3281 = list_3280.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3281, item_3279)?;
        }
        list_3280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3282 = writer.prefix("MaxResults");
    if let Some(var_3283) = &input.max_results {
        scope_3282.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3283).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3284 = writer.prefix("NextToken");
    if let Some(var_3285) = &input.next_token {
        scope_3284.string(var_3285);
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("DryRun");
    if let Some(var_3287) = &input.dry_run {
        scope_3286.boolean(*var_3287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3289) = &input.transit_gateway_connect_peer_ids {
        let mut list_3291 = scope_3288.start_list(true, Some("item"));
        for item_3290 in var_3289 {
            #[allow(unused_mut)]
            let mut entry_3292 = list_3291.entry();
            entry_3292.string(item_3290);
        }
        list_3291.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3293 = writer.prefix("Filter");
    if let Some(var_3294) = &input.filters {
        let mut list_3296 = scope_3293.start_list(true, Some("Filter"));
        for item_3295 in var_3294 {
            #[allow(unused_mut)]
            let mut entry_3297 = list_3296.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3297, item_3295)?;
        }
        list_3296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("MaxResults");
    if let Some(var_3299) = &input.max_results {
        scope_3298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("NextToken");
    if let Some(var_3301) = &input.next_token {
        scope_3300.string(var_3301);
    }
    #[allow(unused_mut)]
    let mut scope_3302 = writer.prefix("DryRun");
    if let Some(var_3303) = &input.dry_run {
        scope_3302.boolean(*var_3303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3304 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3305) = &input.transit_gateway_attachment_ids {
        let mut list_3307 = scope_3304.start_list(true, None);
        for item_3306 in var_3305 {
            #[allow(unused_mut)]
            let mut entry_3308 = list_3307.entry();
            entry_3308.string(item_3306);
        }
        list_3307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("Filter");
    if let Some(var_3310) = &input.filters {
        let mut list_3312 = scope_3309.start_list(true, Some("Filter"));
        for item_3311 in var_3310 {
            #[allow(unused_mut)]
            let mut entry_3313 = list_3312.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3313, item_3311)?;
        }
        list_3312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("MaxResults");
    if let Some(var_3315) = &input.max_results {
        scope_3314.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3315).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("NextToken");
    if let Some(var_3317) = &input.next_token {
        scope_3316.string(var_3317);
    }
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("DryRun");
    if let Some(var_3319) = &input.dry_run {
        scope_3318.boolean(*var_3319);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3320 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3321) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3323 = scope_3320.start_list(true, Some("item"));
        for item_3322 in var_3321 {
            #[allow(unused_mut)]
            let mut entry_3324 = list_3323.entry();
            entry_3324.string(item_3322);
        }
        list_3323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3325 = writer.prefix("Filter");
    if let Some(var_3326) = &input.filters {
        let mut list_3328 = scope_3325.start_list(true, Some("Filter"));
        for item_3327 in var_3326 {
            #[allow(unused_mut)]
            let mut entry_3329 = list_3328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3329, item_3327)?;
        }
        list_3328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("MaxResults");
    if let Some(var_3331) = &input.max_results {
        scope_3330.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3331).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3332 = writer.prefix("NextToken");
    if let Some(var_3333) = &input.next_token {
        scope_3332.string(var_3333);
    }
    #[allow(unused_mut)]
    let mut scope_3334 = writer.prefix("DryRun");
    if let Some(var_3335) = &input.dry_run {
        scope_3334.boolean(*var_3335);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3336 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3337) = &input.transit_gateway_attachment_ids {
        let mut list_3339 = scope_3336.start_list(true, None);
        for item_3338 in var_3337 {
            #[allow(unused_mut)]
            let mut entry_3340 = list_3339.entry();
            entry_3340.string(item_3338);
        }
        list_3339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3341 = writer.prefix("Filter");
    if let Some(var_3342) = &input.filters {
        let mut list_3344 = scope_3341.start_list(true, Some("Filter"));
        for item_3343 in var_3342 {
            #[allow(unused_mut)]
            let mut entry_3345 = list_3344.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3345, item_3343)?;
        }
        list_3344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3346 = writer.prefix("MaxResults");
    if let Some(var_3347) = &input.max_results {
        scope_3346.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3348 = writer.prefix("NextToken");
    if let Some(var_3349) = &input.next_token {
        scope_3348.string(var_3349);
    }
    #[allow(unused_mut)]
    let mut scope_3350 = writer.prefix("DryRun");
    if let Some(var_3351) = &input.dry_run {
        scope_3350.boolean(*var_3351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3352 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3353) = &input.transit_gateway_route_table_ids {
        let mut list_3355 = scope_3352.start_list(true, Some("item"));
        for item_3354 in var_3353 {
            #[allow(unused_mut)]
            let mut entry_3356 = list_3355.entry();
            entry_3356.string(item_3354);
        }
        list_3355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3357 = writer.prefix("Filter");
    if let Some(var_3358) = &input.filters {
        let mut list_3360 = scope_3357.start_list(true, Some("Filter"));
        for item_3359 in var_3358 {
            #[allow(unused_mut)]
            let mut entry_3361 = list_3360.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3361, item_3359)?;
        }
        list_3360.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("MaxResults");
    if let Some(var_3363) = &input.max_results {
        scope_3362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("NextToken");
    if let Some(var_3365) = &input.next_token {
        scope_3364.string(var_3365);
    }
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("DryRun");
    if let Some(var_3367) = &input.dry_run {
        scope_3366.boolean(*var_3367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3368 = writer.prefix("TransitGatewayIds");
    if let Some(var_3369) = &input.transit_gateway_ids {
        let mut list_3371 = scope_3368.start_list(true, Some("item"));
        for item_3370 in var_3369 {
            #[allow(unused_mut)]
            let mut entry_3372 = list_3371.entry();
            entry_3372.string(item_3370);
        }
        list_3371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("Filter");
    if let Some(var_3374) = &input.filters {
        let mut list_3376 = scope_3373.start_list(true, Some("Filter"));
        for item_3375 in var_3374 {
            #[allow(unused_mut)]
            let mut entry_3377 = list_3376.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3377, item_3375)?;
        }
        list_3376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("MaxResults");
    if let Some(var_3379) = &input.max_results {
        scope_3378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("NextToken");
    if let Some(var_3381) = &input.next_token {
        scope_3380.string(var_3381);
    }
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("DryRun");
    if let Some(var_3383) = &input.dry_run {
        scope_3382.boolean(*var_3383);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3384 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3385) = &input.transit_gateway_attachment_ids {
        let mut list_3387 = scope_3384.start_list(true, None);
        for item_3386 in var_3385 {
            #[allow(unused_mut)]
            let mut entry_3388 = list_3387.entry();
            entry_3388.string(item_3386);
        }
        list_3387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3389 = writer.prefix("Filter");
    if let Some(var_3390) = &input.filters {
        let mut list_3392 = scope_3389.start_list(true, Some("Filter"));
        for item_3391 in var_3390 {
            #[allow(unused_mut)]
            let mut entry_3393 = list_3392.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3393, item_3391)?;
        }
        list_3392.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3394 = writer.prefix("MaxResults");
    if let Some(var_3395) = &input.max_results {
        scope_3394.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3395).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3396 = writer.prefix("NextToken");
    if let Some(var_3397) = &input.next_token {
        scope_3396.string(var_3397);
    }
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("DryRun");
    if let Some(var_3399) = &input.dry_run {
        scope_3398.boolean(*var_3399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("AssociationId");
    if let Some(var_3401) = &input.association_ids {
        let mut list_3403 = scope_3400.start_list(true, Some("item"));
        for item_3402 in var_3401 {
            #[allow(unused_mut)]
            let mut entry_3404 = list_3403.entry();
            entry_3404.string(item_3402);
        }
        list_3403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("DryRun");
    if let Some(var_3406) = &input.dry_run {
        scope_3405.boolean(*var_3406);
    }
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("Filter");
    if let Some(var_3408) = &input.filters {
        let mut list_3410 = scope_3407.start_list(true, Some("Filter"));
        for item_3409 in var_3408 {
            #[allow(unused_mut)]
            let mut entry_3411 = list_3410.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3411, item_3409)?;
        }
        list_3410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3412 = writer.prefix("NextToken");
    if let Some(var_3413) = &input.next_token {
        scope_3412.string(var_3413);
    }
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("MaxResults");
    if let Some(var_3415) = &input.max_results {
        scope_3414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3415).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("Attribute");
    if let Some(var_3417) = &input.attribute {
        scope_3416.string(var_3417.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3418 = writer.prefix("VolumeId");
    if let Some(var_3419) = &input.volume_id {
        scope_3418.string(var_3419);
    }
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("DryRun");
    if let Some(var_3421) = &input.dry_run {
        scope_3420.boolean(*var_3421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3422 = writer.prefix("Filter");
    if let Some(var_3423) = &input.filters {
        let mut list_3425 = scope_3422.start_list(true, Some("Filter"));
        for item_3424 in var_3423 {
            #[allow(unused_mut)]
            let mut entry_3426 = list_3425.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3426, item_3424)?;
        }
        list_3425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("VolumeId");
    if let Some(var_3428) = &input.volume_ids {
        let mut list_3430 = scope_3427.start_list(true, Some("VolumeId"));
        for item_3429 in var_3428 {
            #[allow(unused_mut)]
            let mut entry_3431 = list_3430.entry();
            entry_3431.string(item_3429);
        }
        list_3430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3432 = writer.prefix("DryRun");
    if let Some(var_3433) = &input.dry_run {
        scope_3432.boolean(*var_3433);
    }
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("MaxResults");
    if let Some(var_3435) = &input.max_results {
        scope_3434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3435).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("NextToken");
    if let Some(var_3437) = &input.next_token {
        scope_3436.string(var_3437);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("DryRun");
    if let Some(var_3439) = &input.dry_run {
        scope_3438.boolean(*var_3439);
    }
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("VolumeId");
    if let Some(var_3441) = &input.volume_ids {
        let mut list_3443 = scope_3440.start_list(true, Some("VolumeId"));
        for item_3442 in var_3441 {
            #[allow(unused_mut)]
            let mut entry_3444 = list_3443.entry();
            entry_3444.string(item_3442);
        }
        list_3443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3445 = writer.prefix("Filter");
    if let Some(var_3446) = &input.filters {
        let mut list_3448 = scope_3445.start_list(true, Some("Filter"));
        for item_3447 in var_3446 {
            #[allow(unused_mut)]
            let mut entry_3449 = list_3448.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3449, item_3447)?;
        }
        list_3448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("NextToken");
    if let Some(var_3451) = &input.next_token {
        scope_3450.string(var_3451);
    }
    #[allow(unused_mut)]
    let mut scope_3452 = writer.prefix("MaxResults");
    if let Some(var_3453) = &input.max_results {
        scope_3452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3453).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3454 = writer.prefix("Filter");
    if let Some(var_3455) = &input.filters {
        let mut list_3457 = scope_3454.start_list(true, Some("Filter"));
        for item_3456 in var_3455 {
            #[allow(unused_mut)]
            let mut entry_3458 = list_3457.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3458, item_3456)?;
        }
        list_3457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("MaxResults");
    if let Some(var_3460) = &input.max_results {
        scope_3459.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3460).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("NextToken");
    if let Some(var_3462) = &input.next_token {
        scope_3461.string(var_3462);
    }
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("VolumeId");
    if let Some(var_3464) = &input.volume_ids {
        let mut list_3466 = scope_3463.start_list(true, Some("VolumeId"));
        for item_3465 in var_3464 {
            #[allow(unused_mut)]
            let mut entry_3467 = list_3466.entry();
            entry_3467.string(item_3465);
        }
        list_3466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("DryRun");
    if let Some(var_3469) = &input.dry_run {
        scope_3468.boolean(*var_3469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("Attribute");
    if let Some(var_3471) = &input.attribute {
        scope_3470.string(var_3471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("VpcId");
    if let Some(var_3473) = &input.vpc_id {
        scope_3472.string(var_3473);
    }
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("DryRun");
    if let Some(var_3475) = &input.dry_run {
        scope_3474.boolean(*var_3475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3476 = writer.prefix("Filter");
    if let Some(var_3477) = &input.filters {
        let mut list_3479 = scope_3476.start_list(true, Some("Filter"));
        for item_3478 in var_3477 {
            #[allow(unused_mut)]
            let mut entry_3480 = list_3479.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3480, item_3478)?;
        }
        list_3479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("DryRun");
    if let Some(var_3482) = &input.dry_run {
        scope_3481.boolean(*var_3482);
    }
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("VpcId");
    if let Some(var_3484) = &input.vpc_ids {
        let mut list_3486 = scope_3483.start_list(true, Some("VpcId"));
        for item_3485 in var_3484 {
            #[allow(unused_mut)]
            let mut entry_3487 = list_3486.entry();
            entry_3487.string(item_3485);
        }
        list_3486.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3488 = writer.prefix("MaxResults");
    if let Some(var_3489) = &input.max_results {
        scope_3488.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3489).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3490 = writer.prefix("NextToken");
    if let Some(var_3491) = &input.next_token {
        scope_3490.string(var_3491);
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("VpcIds");
    if let Some(var_3493) = &input.vpc_ids {
        let mut list_3495 = scope_3492.start_list(true, Some("VpcId"));
        for item_3494 in var_3493 {
            #[allow(unused_mut)]
            let mut entry_3496 = list_3495.entry();
            entry_3496.string(item_3494);
        }
        list_3495.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3497 = writer.prefix("DryRun");
    if let Some(var_3498) = &input.dry_run {
        scope_3497.boolean(*var_3498);
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3500) = &input.connection_notification_id {
        scope_3499.string(var_3500);
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("Filter");
    if let Some(var_3502) = &input.filters {
        let mut list_3504 = scope_3501.start_list(true, Some("Filter"));
        for item_3503 in var_3502 {
            #[allow(unused_mut)]
            let mut entry_3505 = list_3504.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3505, item_3503)?;
        }
        list_3504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3506 = writer.prefix("MaxResults");
    if let Some(var_3507) = &input.max_results {
        scope_3506.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3507).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("NextToken");
    if let Some(var_3509) = &input.next_token {
        scope_3508.string(var_3509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("DryRun");
    if let Some(var_3511) = &input.dry_run {
        scope_3510.boolean(*var_3511);
    }
    #[allow(unused_mut)]
    let mut scope_3512 = writer.prefix("Filter");
    if let Some(var_3513) = &input.filters {
        let mut list_3515 = scope_3512.start_list(true, Some("Filter"));
        for item_3514 in var_3513 {
            #[allow(unused_mut)]
            let mut entry_3516 = list_3515.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3516, item_3514)?;
        }
        list_3515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("MaxResults");
    if let Some(var_3518) = &input.max_results {
        scope_3517.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3518).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("NextToken");
    if let Some(var_3520) = &input.next_token {
        scope_3519.string(var_3520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("DryRun");
    if let Some(var_3522) = &input.dry_run {
        scope_3521.boolean(*var_3522);
    }
    #[allow(unused_mut)]
    let mut scope_3523 = writer.prefix("VpcEndpointId");
    if let Some(var_3524) = &input.vpc_endpoint_ids {
        let mut list_3526 = scope_3523.start_list(true, Some("item"));
        for item_3525 in var_3524 {
            #[allow(unused_mut)]
            let mut entry_3527 = list_3526.entry();
            entry_3527.string(item_3525);
        }
        list_3526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("Filter");
    if let Some(var_3529) = &input.filters {
        let mut list_3531 = scope_3528.start_list(true, Some("Filter"));
        for item_3530 in var_3529 {
            #[allow(unused_mut)]
            let mut entry_3532 = list_3531.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3532, item_3530)?;
        }
        list_3531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("MaxResults");
    if let Some(var_3534) = &input.max_results {
        scope_3533.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3534).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("NextToken");
    if let Some(var_3536) = &input.next_token {
        scope_3535.string(var_3536);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("DryRun");
    if let Some(var_3538) = &input.dry_run {
        scope_3537.boolean(*var_3538);
    }
    #[allow(unused_mut)]
    let mut scope_3539 = writer.prefix("ServiceId");
    if let Some(var_3540) = &input.service_ids {
        let mut list_3542 = scope_3539.start_list(true, Some("item"));
        for item_3541 in var_3540 {
            #[allow(unused_mut)]
            let mut entry_3543 = list_3542.entry();
            entry_3543.string(item_3541);
        }
        list_3542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3544 = writer.prefix("Filter");
    if let Some(var_3545) = &input.filters {
        let mut list_3547 = scope_3544.start_list(true, Some("Filter"));
        for item_3546 in var_3545 {
            #[allow(unused_mut)]
            let mut entry_3548 = list_3547.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3548, item_3546)?;
        }
        list_3547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("MaxResults");
    if let Some(var_3550) = &input.max_results {
        scope_3549.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3550).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("NextToken");
    if let Some(var_3552) = &input.next_token {
        scope_3551.string(var_3552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("DryRun");
    if let Some(var_3554) = &input.dry_run {
        scope_3553.boolean(*var_3554);
    }
    #[allow(unused_mut)]
    let mut scope_3555 = writer.prefix("ServiceId");
    if let Some(var_3556) = &input.service_id {
        scope_3555.string(var_3556);
    }
    #[allow(unused_mut)]
    let mut scope_3557 = writer.prefix("Filter");
    if let Some(var_3558) = &input.filters {
        let mut list_3560 = scope_3557.start_list(true, Some("Filter"));
        for item_3559 in var_3558 {
            #[allow(unused_mut)]
            let mut entry_3561 = list_3560.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3561, item_3559)?;
        }
        list_3560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("MaxResults");
    if let Some(var_3563) = &input.max_results {
        scope_3562.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3564 = writer.prefix("NextToken");
    if let Some(var_3565) = &input.next_token {
        scope_3564.string(var_3565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3566 = writer.prefix("DryRun");
    if let Some(var_3567) = &input.dry_run {
        scope_3566.boolean(*var_3567);
    }
    #[allow(unused_mut)]
    let mut scope_3568 = writer.prefix("ServiceName");
    if let Some(var_3569) = &input.service_names {
        let mut list_3571 = scope_3568.start_list(true, Some("item"));
        for item_3570 in var_3569 {
            #[allow(unused_mut)]
            let mut entry_3572 = list_3571.entry();
            entry_3572.string(item_3570);
        }
        list_3571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3573 = writer.prefix("Filter");
    if let Some(var_3574) = &input.filters {
        let mut list_3576 = scope_3573.start_list(true, Some("Filter"));
        for item_3575 in var_3574 {
            #[allow(unused_mut)]
            let mut entry_3577 = list_3576.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3577, item_3575)?;
        }
        list_3576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("MaxResults");
    if let Some(var_3579) = &input.max_results {
        scope_3578.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3579).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3580 = writer.prefix("NextToken");
    if let Some(var_3581) = &input.next_token {
        scope_3580.string(var_3581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3582 = writer.prefix("Filter");
    if let Some(var_3583) = &input.filters {
        let mut list_3585 = scope_3582.start_list(true, Some("Filter"));
        for item_3584 in var_3583 {
            #[allow(unused_mut)]
            let mut entry_3586 = list_3585.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3586, item_3584)?;
        }
        list_3585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3587 = writer.prefix("DryRun");
    if let Some(var_3588) = &input.dry_run {
        scope_3587.boolean(*var_3588);
    }
    #[allow(unused_mut)]
    let mut scope_3589 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3590) = &input.vpc_peering_connection_ids {
        let mut list_3592 = scope_3589.start_list(true, Some("item"));
        for item_3591 in var_3590 {
            #[allow(unused_mut)]
            let mut entry_3593 = list_3592.entry();
            entry_3593.string(item_3591);
        }
        list_3592.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("NextToken");
    if let Some(var_3595) = &input.next_token {
        scope_3594.string(var_3595);
    }
    #[allow(unused_mut)]
    let mut scope_3596 = writer.prefix("MaxResults");
    if let Some(var_3597) = &input.max_results {
        scope_3596.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3597).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3598 = writer.prefix("Filter");
    if let Some(var_3599) = &input.filters {
        let mut list_3601 = scope_3598.start_list(true, Some("Filter"));
        for item_3600 in var_3599 {
            #[allow(unused_mut)]
            let mut entry_3602 = list_3601.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3602, item_3600)?;
        }
        list_3601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3603 = writer.prefix("VpcId");
    if let Some(var_3604) = &input.vpc_ids {
        let mut list_3606 = scope_3603.start_list(true, Some("VpcId"));
        for item_3605 in var_3604 {
            #[allow(unused_mut)]
            let mut entry_3607 = list_3606.entry();
            entry_3607.string(item_3605);
        }
        list_3606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("DryRun");
    if let Some(var_3609) = &input.dry_run {
        scope_3608.boolean(*var_3609);
    }
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("NextToken");
    if let Some(var_3611) = &input.next_token {
        scope_3610.string(var_3611);
    }
    #[allow(unused_mut)]
    let mut scope_3612 = writer.prefix("MaxResults");
    if let Some(var_3613) = &input.max_results {
        scope_3612.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3613).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3614 = writer.prefix("Filter");
    if let Some(var_3615) = &input.filters {
        let mut list_3617 = scope_3614.start_list(true, Some("Filter"));
        for item_3616 in var_3615 {
            #[allow(unused_mut)]
            let mut entry_3618 = list_3617.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3618, item_3616)?;
        }
        list_3617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3619 = writer.prefix("VpnConnectionId");
    if let Some(var_3620) = &input.vpn_connection_ids {
        let mut list_3622 = scope_3619.start_list(true, Some("VpnConnectionId"));
        for item_3621 in var_3620 {
            #[allow(unused_mut)]
            let mut entry_3623 = list_3622.entry();
            entry_3623.string(item_3621);
        }
        list_3622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3624 = writer.prefix("DryRun");
    if let Some(var_3625) = &input.dry_run {
        scope_3624.boolean(*var_3625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("Filter");
    if let Some(var_3627) = &input.filters {
        let mut list_3629 = scope_3626.start_list(true, Some("Filter"));
        for item_3628 in var_3627 {
            #[allow(unused_mut)]
            let mut entry_3630 = list_3629.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3630, item_3628)?;
        }
        list_3629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("VpnGatewayId");
    if let Some(var_3632) = &input.vpn_gateway_ids {
        let mut list_3634 = scope_3631.start_list(true, Some("VpnGatewayId"));
        for item_3633 in var_3632 {
            #[allow(unused_mut)]
            let mut entry_3635 = list_3634.entry();
            entry_3635.string(item_3633);
        }
        list_3634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("DryRun");
    if let Some(var_3637) = &input.dry_run {
        scope_3636.boolean(*var_3637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("DryRun");
    if let Some(var_3639) = &input.dry_run {
        scope_3638.boolean(*var_3639);
    }
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("InstanceId");
    if let Some(var_3641) = &input.instance_id {
        scope_3640.string(var_3641);
    }
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("VpcId");
    if let Some(var_3643) = &input.vpc_id {
        scope_3642.string(var_3643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3644 = writer.prefix("DryRun");
    if let Some(var_3645) = &input.dry_run {
        scope_3644.boolean(*var_3645);
    }
    #[allow(unused_mut)]
    let mut scope_3646 = writer.prefix("InternetGatewayId");
    if let Some(var_3647) = &input.internet_gateway_id {
        scope_3646.string(var_3647);
    }
    #[allow(unused_mut)]
    let mut scope_3648 = writer.prefix("VpcId");
    if let Some(var_3649) = &input.vpc_id {
        scope_3648.string(var_3649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3650 = writer.prefix("AttachmentId");
    if let Some(var_3651) = &input.attachment_id {
        scope_3650.string(var_3651);
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("DryRun");
    if let Some(var_3653) = &input.dry_run {
        scope_3652.boolean(*var_3653);
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("Force");
    if let Some(var_3655) = &input.force {
        scope_3654.boolean(*var_3655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("Device");
    if let Some(var_3657) = &input.device {
        scope_3656.string(var_3657);
    }
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("Force");
    if let Some(var_3659) = &input.force {
        scope_3658.boolean(*var_3659);
    }
    #[allow(unused_mut)]
    let mut scope_3660 = writer.prefix("InstanceId");
    if let Some(var_3661) = &input.instance_id {
        scope_3660.string(var_3661);
    }
    #[allow(unused_mut)]
    let mut scope_3662 = writer.prefix("VolumeId");
    if let Some(var_3663) = &input.volume_id {
        scope_3662.string(var_3663);
    }
    #[allow(unused_mut)]
    let mut scope_3664 = writer.prefix("DryRun");
    if let Some(var_3665) = &input.dry_run {
        scope_3664.boolean(*var_3665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3666 = writer.prefix("VpcId");
    if let Some(var_3667) = &input.vpc_id {
        scope_3666.string(var_3667);
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("VpnGatewayId");
    if let Some(var_3669) = &input.vpn_gateway_id {
        scope_3668.string(var_3669);
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("DryRun");
    if let Some(var_3671) = &input.dry_run {
        scope_3670.boolean(*var_3671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("DryRun");
    if let Some(var_3673) = &input.dry_run {
        scope_3672.boolean(*var_3673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("AvailabilityZone");
    if let Some(var_3675) = &input.availability_zones {
        let mut list_3677 = scope_3674.start_list(true, Some("AvailabilityZone"));
        for item_3676 in var_3675 {
            #[allow(unused_mut)]
            let mut entry_3678 = list_3677.entry();
            entry_3678.string(item_3676);
        }
        list_3677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("SourceSnapshotId");
    if let Some(var_3680) = &input.source_snapshot_ids {
        let mut list_3682 = scope_3679.start_list(true, Some("SnapshotId"));
        for item_3681 in var_3680 {
            #[allow(unused_mut)]
            let mut entry_3683 = list_3682.entry();
            entry_3683.string(item_3681);
        }
        list_3682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("DryRun");
    if let Some(var_3685) = &input.dry_run {
        scope_3684.boolean(*var_3685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("ImageId");
    if let Some(var_3687) = &input.image_id {
        scope_3686.string(var_3687);
    }
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("DryRun");
    if let Some(var_3689) = &input.dry_run {
        scope_3688.boolean(*var_3689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("DryRun");
    if let Some(var_3691) = &input.dry_run {
        scope_3690.boolean(*var_3691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3692 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3693) = &input.transit_gateway_route_table_id {
        scope_3692.string(var_3693);
    }
    #[allow(unused_mut)]
    let mut scope_3694 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3695) = &input.transit_gateway_attachment_id {
        scope_3694.string(var_3695);
    }
    #[allow(unused_mut)]
    let mut scope_3696 = writer.prefix("DryRun");
    if let Some(var_3697) = &input.dry_run {
        scope_3696.boolean(*var_3697);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3698 = writer.prefix("GatewayId");
    if let Some(var_3699) = &input.gateway_id {
        scope_3698.string(var_3699);
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("RouteTableId");
    if let Some(var_3701) = &input.route_table_id {
        scope_3700.string(var_3701);
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("DryRun");
    if let Some(var_3703) = &input.dry_run {
        scope_3702.boolean(*var_3703);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("DryRun");
    if let Some(var_3705) = &input.dry_run {
        scope_3704.boolean(*var_3705);
    }
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("VpcId");
    if let Some(var_3707) = &input.vpc_id {
        scope_3706.string(var_3707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("VpcId");
    if let Some(var_3709) = &input.vpc_id {
        scope_3708.string(var_3709);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3710 = writer.prefix("AssociationId");
    if let Some(var_3711) = &input.association_id {
        scope_3710.string(var_3711);
    }
    #[allow(unused_mut)]
    let mut scope_3712 = writer.prefix("PublicIp");
    if let Some(var_3713) = &input.public_ip {
        scope_3712.string(var_3713);
    }
    #[allow(unused_mut)]
    let mut scope_3714 = writer.prefix("DryRun");
    if let Some(var_3715) = &input.dry_run {
        scope_3714.boolean(*var_3715);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3716 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3717) = &input.client_vpn_endpoint_id {
        scope_3716.string(var_3717);
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("AssociationId");
    if let Some(var_3719) = &input.association_id {
        scope_3718.string(var_3719);
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("DryRun");
    if let Some(var_3721) = &input.dry_run {
        scope_3720.boolean(*var_3721);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("CertificateArn");
    if let Some(var_3723) = &input.certificate_arn {
        scope_3722.string(var_3723);
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("RoleArn");
    if let Some(var_3725) = &input.role_arn {
        scope_3724.string(var_3725);
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("DryRun");
    if let Some(var_3727) = &input.dry_run {
        scope_3726.boolean(*var_3727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("AssociationId");
    if let Some(var_3729) = &input.association_id {
        scope_3728.string(var_3729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3730 = writer.prefix("DryRun");
    if let Some(var_3731) = &input.dry_run {
        scope_3730.boolean(*var_3731);
    }
    #[allow(unused_mut)]
    let mut scope_3732 = writer.prefix("InstanceEventWindowId");
    if let Some(var_3733) = &input.instance_event_window_id {
        scope_3732.string(var_3733);
    }
    #[allow(unused_mut)]
    let mut scope_3734 = writer.prefix("AssociationTarget");
    if let Some(var_3735) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_3734, var_3735)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3736 = writer.prefix("AssociationId");
    if let Some(var_3737) = &input.association_id {
        scope_3736.string(var_3737);
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("DryRun");
    if let Some(var_3739) = &input.dry_run {
        scope_3738.boolean(*var_3739);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("AssociationId");
    if let Some(var_3741) = &input.association_id {
        scope_3740.string(var_3741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_3743) = &input.transit_gateway_multicast_domain_id {
        scope_3742.string(var_3743);
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3745) = &input.transit_gateway_attachment_id {
        scope_3744.string(var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("SubnetIds");
    if let Some(var_3747) = &input.subnet_ids {
        let mut list_3749 = scope_3746.start_list(true, Some("item"));
        for item_3748 in var_3747 {
            #[allow(unused_mut)]
            let mut entry_3750 = list_3749.entry();
            entry_3750.string(item_3748);
        }
        list_3749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("DryRun");
    if let Some(var_3752) = &input.dry_run {
        scope_3751.boolean(*var_3752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3754) = &input.transit_gateway_route_table_id {
        scope_3753.string(var_3754);
    }
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3756) = &input.transit_gateway_attachment_id {
        scope_3755.string(var_3756);
    }
    #[allow(unused_mut)]
    let mut scope_3757 = writer.prefix("DryRun");
    if let Some(var_3758) = &input.dry_run {
        scope_3757.boolean(*var_3758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3759 = writer.prefix("AssociationId");
    if let Some(var_3760) = &input.association_id {
        scope_3759.string(var_3760);
    }
    #[allow(unused_mut)]
    let mut scope_3761 = writer.prefix("ClientToken");
    if let Some(var_3762) = &input.client_token {
        scope_3761.string(var_3762);
    }
    #[allow(unused_mut)]
    let mut scope_3763 = writer.prefix("DryRun");
    if let Some(var_3764) = &input.dry_run {
        scope_3763.boolean(*var_3764);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("AssociationId");
    if let Some(var_3766) = &input.association_id {
        scope_3765.string(var_3766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("DryRun");
    if let Some(var_3768) = &input.dry_run {
        scope_3767.boolean(*var_3768);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("AvailabilityZone");
    if let Some(var_3770) = &input.availability_zones {
        let mut list_3772 = scope_3769.start_list(true, Some("AvailabilityZone"));
        for item_3771 in var_3770 {
            #[allow(unused_mut)]
            let mut entry_3773 = list_3772.entry();
            entry_3773.string(item_3771);
        }
        list_3772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("SourceSnapshotId");
    if let Some(var_3775) = &input.source_snapshot_ids {
        let mut list_3777 = scope_3774.start_list(true, Some("SnapshotId"));
        for item_3776 in var_3775 {
            #[allow(unused_mut)]
            let mut entry_3778 = list_3777.entry();
            entry_3778.string(item_3776);
        }
        list_3777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3779 = writer.prefix("DryRun");
    if let Some(var_3780) = &input.dry_run {
        scope_3779.boolean(*var_3780);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3781 = writer.prefix("ImageId");
    if let Some(var_3782) = &input.image_id {
        scope_3781.string(var_3782);
    }
    #[allow(unused_mut)]
    let mut scope_3783 = writer.prefix("DeprecateAt");
    if let Some(var_3784) = &input.deprecate_at {
        scope_3783.date_time(var_3784, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3785 = writer.prefix("DryRun");
    if let Some(var_3786) = &input.dry_run {
        scope_3785.boolean(*var_3786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("DryRun");
    if let Some(var_3788) = &input.dry_run {
        scope_3787.boolean(*var_3788);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3790) = &input.transit_gateway_route_table_id {
        scope_3789.string(var_3790);
    }
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3792) = &input.transit_gateway_attachment_id {
        scope_3791.string(var_3792);
    }
    #[allow(unused_mut)]
    let mut scope_3793 = writer.prefix("DryRun");
    if let Some(var_3794) = &input.dry_run {
        scope_3793.boolean(*var_3794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3795 = writer.prefix("GatewayId");
    if let Some(var_3796) = &input.gateway_id {
        scope_3795.string(var_3796);
    }
    #[allow(unused_mut)]
    let mut scope_3797 = writer.prefix("RouteTableId");
    if let Some(var_3798) = &input.route_table_id {
        scope_3797.string(var_3798);
    }
    #[allow(unused_mut)]
    let mut scope_3799 = writer.prefix("DryRun");
    if let Some(var_3800) = &input.dry_run {
        scope_3799.boolean(*var_3800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3801 = writer.prefix("DryRun");
    if let Some(var_3802) = &input.dry_run {
        scope_3801.boolean(*var_3802);
    }
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("VolumeId");
    if let Some(var_3804) = &input.volume_id {
        scope_3803.string(var_3804);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("DryRun");
    if let Some(var_3806) = &input.dry_run {
        scope_3805.boolean(*var_3806);
    }
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("VpcId");
    if let Some(var_3808) = &input.vpc_id {
        scope_3807.string(var_3808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3809 = writer.prefix("VpcId");
    if let Some(var_3810) = &input.vpc_id {
        scope_3809.string(var_3810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3811 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3812) = &input.client_vpn_endpoint_id {
        scope_3811.string(var_3812);
    }
    #[allow(unused_mut)]
    let mut scope_3813 = writer.prefix("DryRun");
    if let Some(var_3814) = &input.dry_run {
        scope_3813.boolean(*var_3814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3815 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3816) = &input.client_vpn_endpoint_id {
        scope_3815.string(var_3816);
    }
    #[allow(unused_mut)]
    let mut scope_3817 = writer.prefix("DryRun");
    if let Some(var_3818) = &input.dry_run {
        scope_3817.boolean(*var_3818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3819 = writer.prefix("ClientToken");
    if let Some(var_3820) = &input.client_token {
        scope_3819.string(var_3820);
    }
    #[allow(unused_mut)]
    let mut scope_3821 = writer.prefix("Description");
    if let Some(var_3822) = &input.description {
        scope_3821.string(var_3822);
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("DiskImageFormat");
    if let Some(var_3824) = &input.disk_image_format {
        scope_3823.string(var_3824.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("DryRun");
    if let Some(var_3826) = &input.dry_run {
        scope_3825.boolean(*var_3826);
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("ImageId");
    if let Some(var_3828) = &input.image_id {
        scope_3827.string(var_3828);
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("S3ExportLocation");
    if let Some(var_3830) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_3829, var_3830,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("RoleName");
    if let Some(var_3832) = &input.role_name {
        scope_3831.string(var_3832);
    }
    #[allow(unused_mut)]
    let mut scope_3833 = writer.prefix("TagSpecification");
    if let Some(var_3834) = &input.tag_specifications {
        let mut list_3836 = scope_3833.start_list(true, Some("item"));
        for item_3835 in var_3834 {
            #[allow(unused_mut)]
            let mut entry_3837 = list_3836.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_3837, item_3835,
            )?;
        }
        list_3836.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3838 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3839) = &input.transit_gateway_route_table_id {
        scope_3838.string(var_3839);
    }
    #[allow(unused_mut)]
    let mut scope_3840 = writer.prefix("Filter");
    if let Some(var_3841) = &input.filters {
        let mut list_3843 = scope_3840.start_list(true, Some("Filter"));
        for item_3842 in var_3841 {
            #[allow(unused_mut)]
            let mut entry_3844 = list_3843.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3844, item_3842)?;
        }
        list_3843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("S3Bucket");
    if let Some(var_3846) = &input.s3_bucket {
        scope_3845.string(var_3846);
    }
    #[allow(unused_mut)]
    let mut scope_3847 = writer.prefix("DryRun");
    if let Some(var_3848) = &input.dry_run {
        scope_3847.boolean(*var_3848);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3849 = writer.prefix("CertificateArn");
    if let Some(var_3850) = &input.certificate_arn {
        scope_3849.string(var_3850);
    }
    #[allow(unused_mut)]
    let mut scope_3851 = writer.prefix("DryRun");
    if let Some(var_3852) = &input.dry_run {
        scope_3851.boolean(*var_3852);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3853 = writer.prefix("PoolId");
    if let Some(var_3854) = &input.pool_id {
        scope_3853.string(var_3854);
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("NextToken");
    if let Some(var_3856) = &input.next_token {
        scope_3855.string(var_3856);
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("MaxResults");
    if let Some(var_3858) = &input.max_results {
        scope_3857.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("DryRun");
    if let Some(var_3860) = &input.dry_run {
        scope_3859.boolean(*var_3860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("CapacityReservationId");
    if let Some(var_3862) = &input.capacity_reservation_id {
        scope_3861.string(var_3862);
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("NextToken");
    if let Some(var_3864) = &input.next_token {
        scope_3863.string(var_3864);
    }
    #[allow(unused_mut)]
    let mut scope_3865 = writer.prefix("MaxResults");
    if let Some(var_3866) = &input.max_results {
        scope_3865.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3866).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3867 = writer.prefix("DryRun");
    if let Some(var_3868) = &input.dry_run {
        scope_3867.boolean(*var_3868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3869 = writer.prefix("PoolId");
    if let Some(var_3870) = &input.pool_id {
        scope_3869.string(var_3870);
    }
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("Filter");
    if let Some(var_3872) = &input.filters {
        let mut list_3874 = scope_3871.start_list(true, Some("Filter"));
        for item_3873 in var_3872 {
            #[allow(unused_mut)]
            let mut entry_3875 = list_3874.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3875, item_3873)?;
        }
        list_3874.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3876 = writer.prefix("MaxResults");
    if let Some(var_3877) = &input.max_results {
        scope_3876.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3877).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3878 = writer.prefix("NextToken");
    if let Some(var_3879) = &input.next_token {
        scope_3878.string(var_3879);
    }
    #[allow(unused_mut)]
    let mut scope_3880 = writer.prefix("DryRun");
    if let Some(var_3881) = &input.dry_run {
        scope_3880.boolean(*var_3881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("InstanceId");
    if let Some(var_3883) = &input.instance_id {
        scope_3882.string(var_3883);
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("DryRun");
    if let Some(var_3885) = &input.dry_run {
        scope_3884.boolean(*var_3885);
    }
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("Latest");
    if let Some(var_3887) = &input.latest {
        scope_3886.boolean(*var_3887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("DryRun");
    if let Some(var_3889) = &input.dry_run {
        scope_3888.boolean(*var_3889);
    }
    #[allow(unused_mut)]
    let mut scope_3890 = writer.prefix("InstanceId");
    if let Some(var_3891) = &input.instance_id {
        scope_3890.string(var_3891);
    }
    #[allow(unused_mut)]
    let mut scope_3892 = writer.prefix("WakeUp");
    if let Some(var_3893) = &input.wake_up {
        scope_3892.boolean(*var_3893);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("DryRun");
    if let Some(var_3895) = &input.dry_run {
        scope_3894.boolean(*var_3895);
    }
    #[allow(unused_mut)]
    let mut scope_3896 = writer.prefix("InstanceFamily");
    if let Some(var_3897) = &input.instance_family {
        scope_3896.string(var_3897.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3898 = writer.prefix("DryRun");
    if let Some(var_3899) = &input.dry_run {
        scope_3898.boolean(*var_3899);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("DryRun");
    if let Some(var_3901) = &input.dry_run {
        scope_3900.boolean(*var_3901);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("DryRun");
    if let Some(var_3903) = &input.dry_run {
        scope_3902.boolean(*var_3903);
    }
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("FlowLogId");
    if let Some(var_3905) = &input.flow_log_id {
        scope_3904.string(var_3905);
    }
    #[allow(unused_mut)]
    let mut scope_3906 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_3907) = &input.config_delivery_s3_destination_arn {
        scope_3906.string(var_3907);
    }
    #[allow(unused_mut)]
    let mut scope_3908 = writer.prefix("IntegrateService");
    if let Some(var_3909) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_3908, var_3909)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3910 = writer.prefix("CapacityReservationId");
    if let Some(var_3911) = &input.capacity_reservation_id {
        scope_3910.string(var_3911);
    }
    #[allow(unused_mut)]
    let mut scope_3912 = writer.prefix("NextToken");
    if let Some(var_3913) = &input.next_token {
        scope_3912.string(var_3913);
    }
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("MaxResults");
    if let Some(var_3915) = &input.max_results {
        scope_3914.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3915).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("DryRun");
    if let Some(var_3917) = &input.dry_run {
        scope_3916.boolean(*var_3917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("HostIdSet");
    if let Some(var_3919) = &input.host_id_set {
        let mut list_3921 = scope_3918.start_list(true, Some("item"));
        for item_3920 in var_3919 {
            #[allow(unused_mut)]
            let mut entry_3922 = list_3921.entry();
            entry_3922.string(item_3920);
        }
        list_3921.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("OfferingId");
    if let Some(var_3924) = &input.offering_id {
        scope_3923.string(var_3924);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("DryRun");
    if let Some(var_3926) = &input.dry_run {
        scope_3925.boolean(*var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("ArchitectureType");
    if let Some(var_3928) = &input.architecture_types {
        let mut list_3930 = scope_3927.start_list(true, Some("item"));
        for item_3929 in var_3928 {
            #[allow(unused_mut)]
            let mut entry_3931 = list_3930.entry();
            entry_3931.string(item_3929.as_str());
        }
        list_3930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("VirtualizationType");
    if let Some(var_3933) = &input.virtualization_types {
        let mut list_3935 = scope_3932.start_list(true, Some("item"));
        for item_3934 in var_3933 {
            #[allow(unused_mut)]
            let mut entry_3936 = list_3935.entry();
            entry_3936.string(item_3934.as_str());
        }
        list_3935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("InstanceRequirements");
    if let Some(var_3938) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_3937, var_3938,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3939 = writer.prefix("MaxResults");
    if let Some(var_3940) = &input.max_results {
        scope_3939.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3940).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3941 = writer.prefix("NextToken");
    if let Some(var_3942) = &input.next_token {
        scope_3941.string(var_3942);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3943 = writer.prefix("DryRun");
    if let Some(var_3944) = &input.dry_run {
        scope_3943.boolean(*var_3944);
    }
    #[allow(unused_mut)]
    let mut scope_3945 = writer.prefix("InstanceId");
    if let Some(var_3946) = &input.instance_id {
        scope_3945.string(var_3946);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("DryRun");
    if let Some(var_3948) = &input.dry_run {
        scope_3947.boolean(*var_3948);
    }
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("PrefixListId");
    if let Some(var_3950) = &input.prefix_list_id {
        scope_3949.string(var_3950);
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("MaxResults");
    if let Some(var_3952) = &input.max_results {
        scope_3951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("NextToken");
    if let Some(var_3954) = &input.next_token {
        scope_3953.string(var_3954);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("DryRun");
    if let Some(var_3956) = &input.dry_run {
        scope_3955.boolean(*var_3956);
    }
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("PrefixListId");
    if let Some(var_3958) = &input.prefix_list_id {
        scope_3957.string(var_3958);
    }
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("TargetVersion");
    if let Some(var_3960) = &input.target_version {
        scope_3959.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3960).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("MaxResults");
    if let Some(var_3962) = &input.max_results {
        scope_3961.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3962).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("NextToken");
    if let Some(var_3964) = &input.next_token {
        scope_3963.string(var_3964);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("InstanceId");
    if let Some(var_3966) = &input.instance_id {
        scope_3965.string(var_3966);
    }
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("DryRun");
    if let Some(var_3968) = &input.dry_run {
        scope_3967.boolean(*var_3968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3969 = writer.prefix("DryRun");
    if let Some(var_3970) = &input.dry_run {
        scope_3969.boolean(*var_3970);
    }
    #[allow(unused_mut)]
    let mut scope_3971 = writer.prefix("ReservedInstanceId");
    if let Some(var_3972) = &input.reserved_instance_ids {
        let mut list_3974 = scope_3971.start_list(true, Some("ReservedInstanceId"));
        for item_3973 in var_3972 {
            #[allow(unused_mut)]
            let mut entry_3975 = list_3974.entry();
            entry_3975.string(item_3973);
        }
        list_3974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("TargetConfiguration");
    if let Some(var_3977) = &input.target_configurations {
        let mut list_3979 = scope_3976.start_list(true, Some("TargetConfigurationRequest"));
        for item_3978 in var_3977 {
            #[allow(unused_mut)]
            let mut entry_3980 = list_3979.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_3980, item_3978,
            )?;
        }
        list_3979.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("InstanceType");
    if let Some(var_3984) = &input.instance_types {
        let mut list_3986 = scope_3983.start_list(true, None);
        for item_3985 in var_3984 {
            #[allow(unused_mut)]
            let mut entry_3987 = list_3986.entry();
            entry_3987.string(item_3985);
        }
        list_3986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3988 = writer.prefix("TargetCapacity");
    if let Some(var_3989) = &input.target_capacity {
        scope_3988.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3989).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3990 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_3991) = &input.target_capacity_unit_type {
        scope_3990.string(var_3991.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3992 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_3993) = &input.single_availability_zone {
        scope_3992.boolean(*var_3993);
    }
    #[allow(unused_mut)]
    let mut scope_3994 = writer.prefix("RegionName");
    if let Some(var_3995) = &input.region_names {
        let mut list_3997 = scope_3994.start_list(true, None);
        for item_3996 in var_3995 {
            #[allow(unused_mut)]
            let mut entry_3998 = list_3997.entry();
            entry_3998.string(item_3996);
        }
        list_3997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4000) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_3999, var_4000)?;
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("DryRun");
    if let Some(var_4002) = &input.dry_run {
        scope_4001.boolean(*var_4002);
    }
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("MaxResults");
    if let Some(var_4004) = &input.max_results {
        scope_4003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4004).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("NextToken");
    if let Some(var_4006) = &input.next_token {
        scope_4005.string(var_4006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("Filter");
    if let Some(var_4008) = &input.filters {
        let mut list_4010 = scope_4007.start_list(true, Some("Filter"));
        for item_4009 in var_4008 {
            #[allow(unused_mut)]
            let mut entry_4011 = list_4010.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4011, item_4009)?;
        }
        list_4010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("SubnetId");
    if let Some(var_4013) = &input.subnet_id {
        scope_4012.string(var_4013);
    }
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("DryRun");
    if let Some(var_4015) = &input.dry_run {
        scope_4014.boolean(*var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("NextToken");
    if let Some(var_4017) = &input.next_token {
        scope_4016.string(var_4017);
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("MaxResults");
    if let Some(var_4019) = &input.max_results {
        scope_4018.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4019).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4021) = &input.transit_gateway_attachment_id {
        scope_4020.string(var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("Filter");
    if let Some(var_4023) = &input.filters {
        let mut list_4025 = scope_4022.start_list(true, Some("Filter"));
        for item_4024 in var_4023 {
            #[allow(unused_mut)]
            let mut entry_4026 = list_4025.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4026, item_4024)?;
        }
        list_4025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4027 = writer.prefix("MaxResults");
    if let Some(var_4028) = &input.max_results {
        scope_4027.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4029 = writer.prefix("NextToken");
    if let Some(var_4030) = &input.next_token {
        scope_4029.string(var_4030);
    }
    #[allow(unused_mut)]
    let mut scope_4031 = writer.prefix("DryRun");
    if let Some(var_4032) = &input.dry_run {
        scope_4031.boolean(*var_4032);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4033 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4034) = &input.transit_gateway_multicast_domain_id {
        scope_4033.string(var_4034);
    }
    #[allow(unused_mut)]
    let mut scope_4035 = writer.prefix("Filter");
    if let Some(var_4036) = &input.filters {
        let mut list_4038 = scope_4035.start_list(true, Some("Filter"));
        for item_4037 in var_4036 {
            #[allow(unused_mut)]
            let mut entry_4039 = list_4038.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4039, item_4037)?;
        }
        list_4038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("MaxResults");
    if let Some(var_4041) = &input.max_results {
        scope_4040.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4041).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("NextToken");
    if let Some(var_4043) = &input.next_token {
        scope_4042.string(var_4043);
    }
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("DryRun");
    if let Some(var_4045) = &input.dry_run {
        scope_4044.boolean(*var_4045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4047) = &input.transit_gateway_route_table_id {
        scope_4046.string(var_4047);
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("Filter");
    if let Some(var_4049) = &input.filters {
        let mut list_4051 = scope_4048.start_list(true, Some("Filter"));
        for item_4050 in var_4049 {
            #[allow(unused_mut)]
            let mut entry_4052 = list_4051.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4052, item_4050)?;
        }
        list_4051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4053 = writer.prefix("MaxResults");
    if let Some(var_4054) = &input.max_results {
        scope_4053.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4054).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4055 = writer.prefix("NextToken");
    if let Some(var_4056) = &input.next_token {
        scope_4055.string(var_4056);
    }
    #[allow(unused_mut)]
    let mut scope_4057 = writer.prefix("DryRun");
    if let Some(var_4058) = &input.dry_run {
        scope_4057.boolean(*var_4058);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4059 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4060) = &input.transit_gateway_route_table_id {
        scope_4059.string(var_4060);
    }
    #[allow(unused_mut)]
    let mut scope_4061 = writer.prefix("Filter");
    if let Some(var_4062) = &input.filters {
        let mut list_4064 = scope_4061.start_list(true, Some("Filter"));
        for item_4063 in var_4062 {
            #[allow(unused_mut)]
            let mut entry_4065 = list_4064.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4065, item_4063)?;
        }
        list_4064.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("MaxResults");
    if let Some(var_4067) = &input.max_results {
        scope_4066.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4067).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("NextToken");
    if let Some(var_4069) = &input.next_token {
        scope_4068.string(var_4069);
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("DryRun");
    if let Some(var_4071) = &input.dry_run {
        scope_4070.boolean(*var_4071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4073) = &input.transit_gateway_route_table_id {
        scope_4072.string(var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("Filter");
    if let Some(var_4075) = &input.filters {
        let mut list_4077 = scope_4074.start_list(true, Some("Filter"));
        for item_4076 in var_4075 {
            #[allow(unused_mut)]
            let mut entry_4078 = list_4077.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4078, item_4076)?;
        }
        list_4077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("MaxResults");
    if let Some(var_4080) = &input.max_results {
        scope_4079.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4080).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("NextToken");
    if let Some(var_4082) = &input.next_token {
        scope_4081.string(var_4082);
    }
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("DryRun");
    if let Some(var_4084) = &input.dry_run {
        scope_4083.boolean(*var_4084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("VpnConnectionId");
    if let Some(var_4086) = &input.vpn_connection_id {
        scope_4085.string(var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4088) = &input.vpn_connection_device_type_id {
        scope_4087.string(var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4090) = &input.internet_key_exchange_version {
        scope_4089.string(var_4090);
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("DryRun");
    if let Some(var_4092) = &input.dry_run {
        scope_4091.boolean(*var_4092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("MaxResults");
    if let Some(var_4094) = &input.max_results {
        scope_4093.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4094).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("NextToken");
    if let Some(var_4096) = &input.next_token {
        scope_4095.string(var_4096);
    }
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("DryRun");
    if let Some(var_4098) = &input.dry_run {
        scope_4097.boolean(*var_4098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4099 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4100) = &input.client_vpn_endpoint_id {
        scope_4099.string(var_4100);
    }
    #[allow(unused_mut)]
    let mut scope_4101 = writer.prefix("CertificateRevocationList");
    if let Some(var_4102) = &input.certificate_revocation_list {
        scope_4101.string(var_4102);
    }
    #[allow(unused_mut)]
    let mut scope_4103 = writer.prefix("DryRun");
    if let Some(var_4104) = &input.dry_run {
        scope_4103.boolean(*var_4104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4105 = writer.prefix("Architecture");
    if let Some(var_4106) = &input.architecture {
        scope_4105.string(var_4106);
    }
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("ClientData");
    if let Some(var_4108) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4107, var_4108)?;
    }
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("ClientToken");
    if let Some(var_4110) = &input.client_token {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("Description");
    if let Some(var_4112) = &input.description {
        scope_4111.string(var_4112);
    }
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DiskContainer");
    if let Some(var_4114) = &input.disk_containers {
        let mut list_4116 = scope_4113.start_list(true, Some("item"));
        for item_4115 in var_4114 {
            #[allow(unused_mut)]
            let mut entry_4117 = list_4116.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4117, item_4115,
            )?;
        }
        list_4116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DryRun");
    if let Some(var_4119) = &input.dry_run {
        scope_4118.boolean(*var_4119);
    }
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("Encrypted");
    if let Some(var_4121) = &input.encrypted {
        scope_4120.boolean(*var_4121);
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("Hypervisor");
    if let Some(var_4123) = &input.hypervisor {
        scope_4122.string(var_4123);
    }
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("KmsKeyId");
    if let Some(var_4125) = &input.kms_key_id {
        scope_4124.string(var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("LicenseType");
    if let Some(var_4127) = &input.license_type {
        scope_4126.string(var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("Platform");
    if let Some(var_4129) = &input.platform {
        scope_4128.string(var_4129);
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("RoleName");
    if let Some(var_4131) = &input.role_name {
        scope_4130.string(var_4131);
    }
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("LicenseSpecifications");
    if let Some(var_4133) = &input.license_specifications {
        let mut list_4135 = scope_4132.start_list(true, Some("item"));
        for item_4134 in var_4133 {
            #[allow(unused_mut)]
            let mut entry_4136 = list_4135.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4136, item_4134)?;
        }
        list_4135.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("TagSpecification");
    if let Some(var_4138) = &input.tag_specifications {
        let mut list_4140 = scope_4137.start_list(true, Some("item"));
        for item_4139 in var_4138 {
            #[allow(unused_mut)]
            let mut entry_4141 = list_4140.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4141, item_4139,
            )?;
        }
        list_4140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("UsageOperation");
    if let Some(var_4143) = &input.usage_operation {
        scope_4142.string(var_4143);
    }
    #[allow(unused_mut)]
    let mut scope_4144 = writer.prefix("BootMode");
    if let Some(var_4145) = &input.boot_mode {
        scope_4144.string(var_4145.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4146 = writer.prefix("Description");
    if let Some(var_4147) = &input.description {
        scope_4146.string(var_4147);
    }
    #[allow(unused_mut)]
    let mut scope_4148 = writer.prefix("DiskImage");
    if let Some(var_4149) = &input.disk_images {
        let mut list_4151 = scope_4148.start_list(true, None);
        for item_4150 in var_4149 {
            #[allow(unused_mut)]
            let mut entry_4152 = list_4151.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4152, item_4150)?;
        }
        list_4151.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("DryRun");
    if let Some(var_4154) = &input.dry_run {
        scope_4153.boolean(*var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("LaunchSpecification");
    if let Some(var_4156) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4155, var_4156,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("Platform");
    if let Some(var_4158) = &input.platform {
        scope_4157.string(var_4158.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("DryRun");
    if let Some(var_4160) = &input.dry_run {
        scope_4159.boolean(*var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("KeyName");
    if let Some(var_4162) = &input.key_name {
        scope_4161.string(var_4162);
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4164) = &input.public_key_material {
        scope_4163.string(&aws_smithy_types::base64::encode(var_4164));
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("TagSpecification");
    if let Some(var_4166) = &input.tag_specifications {
        let mut list_4168 = scope_4165.start_list(true, Some("item"));
        for item_4167 in var_4166 {
            #[allow(unused_mut)]
            let mut entry_4169 = list_4168.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4169, item_4167,
            )?;
        }
        list_4168.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("ClientData");
    if let Some(var_4171) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4170, var_4171)?;
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("ClientToken");
    if let Some(var_4173) = &input.client_token {
        scope_4172.string(var_4173);
    }
    #[allow(unused_mut)]
    let mut scope_4174 = writer.prefix("Description");
    if let Some(var_4175) = &input.description {
        scope_4174.string(var_4175);
    }
    #[allow(unused_mut)]
    let mut scope_4176 = writer.prefix("DiskContainer");
    if let Some(var_4177) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4176, var_4177,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4178 = writer.prefix("DryRun");
    if let Some(var_4179) = &input.dry_run {
        scope_4178.boolean(*var_4179);
    }
    #[allow(unused_mut)]
    let mut scope_4180 = writer.prefix("Encrypted");
    if let Some(var_4181) = &input.encrypted {
        scope_4180.boolean(*var_4181);
    }
    #[allow(unused_mut)]
    let mut scope_4182 = writer.prefix("KmsKeyId");
    if let Some(var_4183) = &input.kms_key_id {
        scope_4182.string(var_4183);
    }
    #[allow(unused_mut)]
    let mut scope_4184 = writer.prefix("RoleName");
    if let Some(var_4185) = &input.role_name {
        scope_4184.string(var_4185);
    }
    #[allow(unused_mut)]
    let mut scope_4186 = writer.prefix("TagSpecification");
    if let Some(var_4187) = &input.tag_specifications {
        let mut list_4189 = scope_4186.start_list(true, Some("item"));
        for item_4188 in var_4187 {
            #[allow(unused_mut)]
            let mut entry_4190 = list_4189.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4190, item_4188,
            )?;
        }
        list_4189.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("AvailabilityZone");
    if let Some(var_4192) = &input.availability_zone {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("Description");
    if let Some(var_4194) = &input.description {
        scope_4193.string(var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("DryRun");
    if let Some(var_4196) = &input.dry_run {
        scope_4195.boolean(*var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("Image");
    if let Some(var_4198) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4197, var_4198)?;
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("Volume");
    if let Some(var_4200) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4199, var_4200)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("AllocationId");
    if let Some(var_4202) = &input.allocation_id {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("DomainName");
    if let Some(var_4204) = &input.domain_name {
        scope_4203.string(var_4204);
    }
    #[allow(unused_mut)]
    let mut scope_4205 = writer.prefix("DryRun");
    if let Some(var_4206) = &input.dry_run {
        scope_4205.boolean(*var_4206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4207 = writer.prefix("GroupName");
    if let Some(var_4208) = &input.group_name {
        scope_4207.string(var_4208);
    }
    #[allow(unused_mut)]
    let mut scope_4209 = writer.prefix("OptInStatus");
    if let Some(var_4210) = &input.opt_in_status {
        scope_4209.string(var_4210.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4211 = writer.prefix("DryRun");
    if let Some(var_4212) = &input.dry_run {
        scope_4211.boolean(*var_4212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4213 = writer.prefix("CapacityReservationId");
    if let Some(var_4214) = &input.capacity_reservation_id {
        scope_4213.string(var_4214);
    }
    #[allow(unused_mut)]
    let mut scope_4215 = writer.prefix("InstanceCount");
    if let Some(var_4216) = &input.instance_count {
        scope_4215.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4216).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4217 = writer.prefix("EndDate");
    if let Some(var_4218) = &input.end_date {
        scope_4217.date_time(var_4218, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4219 = writer.prefix("EndDateType");
    if let Some(var_4220) = &input.end_date_type {
        scope_4219.string(var_4220.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4221 = writer.prefix("Accept");
    if let Some(var_4222) = &input.accept {
        scope_4221.boolean(*var_4222);
    }
    #[allow(unused_mut)]
    let mut scope_4223 = writer.prefix("DryRun");
    if let Some(var_4224) = &input.dry_run {
        scope_4223.boolean(*var_4224);
    }
    #[allow(unused_mut)]
    let mut scope_4225 = writer.prefix("AdditionalInfo");
    if let Some(var_4226) = &input.additional_info {
        scope_4225.string(var_4226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4227 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4228) = &input.capacity_reservation_fleet_id {
        scope_4227.string(var_4228);
    }
    #[allow(unused_mut)]
    let mut scope_4229 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4230) = &input.total_target_capacity {
        scope_4229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4230).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4231 = writer.prefix("EndDate");
    if let Some(var_4232) = &input.end_date {
        scope_4231.date_time(var_4232, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4233 = writer.prefix("DryRun");
    if let Some(var_4234) = &input.dry_run {
        scope_4233.boolean(*var_4234);
    }
    #[allow(unused_mut)]
    let mut scope_4235 = writer.prefix("RemoveEndDate");
    if let Some(var_4236) = &input.remove_end_date {
        scope_4235.boolean(*var_4236);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4237 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4238) = &input.client_vpn_endpoint_id {
        scope_4237.string(var_4238);
    }
    #[allow(unused_mut)]
    let mut scope_4239 = writer.prefix("ServerCertificateArn");
    if let Some(var_4240) = &input.server_certificate_arn {
        scope_4239.string(var_4240);
    }
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4242) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4241, var_4242,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("DnsServers");
    if let Some(var_4244) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4243, var_4244,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("VpnPort");
    if let Some(var_4246) = &input.vpn_port {
        scope_4245.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("Description");
    if let Some(var_4248) = &input.description {
        scope_4247.string(var_4248);
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("SplitTunnel");
    if let Some(var_4250) = &input.split_tunnel {
        scope_4249.boolean(*var_4250);
    }
    #[allow(unused_mut)]
    let mut scope_4251 = writer.prefix("DryRun");
    if let Some(var_4252) = &input.dry_run {
        scope_4251.boolean(*var_4252);
    }
    #[allow(unused_mut)]
    let mut scope_4253 = writer.prefix("SecurityGroupId");
    if let Some(var_4254) = &input.security_group_ids {
        let mut list_4256 = scope_4253.start_list(true, Some("item"));
        for item_4255 in var_4254 {
            #[allow(unused_mut)]
            let mut entry_4257 = list_4256.entry();
            entry_4257.string(item_4255);
        }
        list_4256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("VpcId");
    if let Some(var_4259) = &input.vpc_id {
        scope_4258.string(var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("SelfServicePortal");
    if let Some(var_4261) = &input.self_service_portal {
        scope_4260.string(var_4261.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4262 = writer.prefix("ClientConnectOptions");
    if let Some(var_4263) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4262, var_4263,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("DryRun");
    if let Some(var_4265) = &input.dry_run {
        scope_4264.boolean(*var_4265);
    }
    #[allow(unused_mut)]
    let mut scope_4266 = writer.prefix("InstanceFamily");
    if let Some(var_4267) = &input.instance_family {
        scope_4266.string(var_4267.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4268 = writer.prefix("CpuCredits");
    if let Some(var_4269) = &input.cpu_credits {
        scope_4268.string(var_4269);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4270 = writer.prefix("KmsKeyId");
    if let Some(var_4271) = &input.kms_key_id {
        scope_4270.string(var_4271);
    }
    #[allow(unused_mut)]
    let mut scope_4272 = writer.prefix("DryRun");
    if let Some(var_4273) = &input.dry_run {
        scope_4272.boolean(*var_4273);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4274 = writer.prefix("DryRun");
    if let Some(var_4275) = &input.dry_run {
        scope_4274.boolean(*var_4275);
    }
    #[allow(unused_mut)]
    let mut scope_4276 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4277) = &input.excess_capacity_termination_policy {
        scope_4276.string(var_4277.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4278 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4279) = &input.launch_template_configs {
        let mut list_4281 = scope_4278.start_list(true, Some("item"));
        for item_4280 in var_4279 {
            #[allow(unused_mut)]
            let mut entry_4282 = list_4281.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4282, item_4280,
            )?;
        }
        list_4281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("FleetId");
    if let Some(var_4284) = &input.fleet_id {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4286) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4285, var_4286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("Context");
    if let Some(var_4288) = &input.context {
        scope_4287.string(var_4288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("DryRun");
    if let Some(var_4290) = &input.dry_run {
        scope_4289.boolean(*var_4290);
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("FpgaImageId");
    if let Some(var_4292) = &input.fpga_image_id {
        scope_4291.string(var_4292);
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("Attribute");
    if let Some(var_4294) = &input.attribute {
        scope_4293.string(var_4294.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("OperationType");
    if let Some(var_4296) = &input.operation_type {
        scope_4295.string(var_4296.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("UserId");
    if let Some(var_4298) = &input.user_ids {
        let mut list_4300 = scope_4297.start_list(true, Some("UserId"));
        for item_4299 in var_4298 {
            #[allow(unused_mut)]
            let mut entry_4301 = list_4300.entry();
            entry_4301.string(item_4299);
        }
        list_4300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4302 = writer.prefix("UserGroup");
    if let Some(var_4303) = &input.user_groups {
        let mut list_4305 = scope_4302.start_list(true, Some("UserGroup"));
        for item_4304 in var_4303 {
            #[allow(unused_mut)]
            let mut entry_4306 = list_4305.entry();
            entry_4306.string(item_4304);
        }
        list_4305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4307 = writer.prefix("ProductCode");
    if let Some(var_4308) = &input.product_codes {
        let mut list_4310 = scope_4307.start_list(true, Some("ProductCode"));
        for item_4309 in var_4308 {
            #[allow(unused_mut)]
            let mut entry_4311 = list_4310.entry();
            entry_4311.string(item_4309);
        }
        list_4310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("LoadPermission");
    if let Some(var_4313) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4312, var_4313,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("Description");
    if let Some(var_4315) = &input.description {
        scope_4314.string(var_4315);
    }
    #[allow(unused_mut)]
    let mut scope_4316 = writer.prefix("Name");
    if let Some(var_4317) = &input.name {
        scope_4316.string(var_4317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4318 = writer.prefix("AutoPlacement");
    if let Some(var_4319) = &input.auto_placement {
        scope_4318.string(var_4319.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4320 = writer.prefix("HostId");
    if let Some(var_4321) = &input.host_ids {
        let mut list_4323 = scope_4320.start_list(true, Some("item"));
        for item_4322 in var_4321 {
            #[allow(unused_mut)]
            let mut entry_4324 = list_4323.entry();
            entry_4324.string(item_4322);
        }
        list_4323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("HostRecovery");
    if let Some(var_4326) = &input.host_recovery {
        scope_4325.string(var_4326.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4327 = writer.prefix("InstanceType");
    if let Some(var_4328) = &input.instance_type {
        scope_4327.string(var_4328);
    }
    #[allow(unused_mut)]
    let mut scope_4329 = writer.prefix("InstanceFamily");
    if let Some(var_4330) = &input.instance_family {
        scope_4329.string(var_4330);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("PrincipalArn");
    if let Some(var_4332) = &input.principal_arn {
        scope_4331.string(var_4332);
    }
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("Resource");
    if let Some(var_4334) = &input.resource {
        scope_4333.string(var_4334);
    }
    #[allow(unused_mut)]
    let mut scope_4335 = writer.prefix("UseLongIds");
    if let Some(var_4336) = &input.use_long_ids {
        scope_4335.boolean(*var_4336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4337 = writer.prefix("Resource");
    if let Some(var_4338) = &input.resource {
        scope_4337.string(var_4338);
    }
    #[allow(unused_mut)]
    let mut scope_4339 = writer.prefix("UseLongIds");
    if let Some(var_4340) = &input.use_long_ids {
        scope_4339.boolean(*var_4340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4341 = writer.prefix("Attribute");
    if let Some(var_4342) = &input.attribute {
        scope_4341.string(var_4342);
    }
    #[allow(unused_mut)]
    let mut scope_4343 = writer.prefix("Description");
    if let Some(var_4344) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4343, var_4344)?;
    }
    #[allow(unused_mut)]
    let mut scope_4345 = writer.prefix("ImageId");
    if let Some(var_4346) = &input.image_id {
        scope_4345.string(var_4346);
    }
    #[allow(unused_mut)]
    let mut scope_4347 = writer.prefix("LaunchPermission");
    if let Some(var_4348) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4347, var_4348,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("OperationType");
    if let Some(var_4350) = &input.operation_type {
        scope_4349.string(var_4350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("ProductCode");
    if let Some(var_4352) = &input.product_codes {
        let mut list_4354 = scope_4351.start_list(true, Some("ProductCode"));
        for item_4353 in var_4352 {
            #[allow(unused_mut)]
            let mut entry_4355 = list_4354.entry();
            entry_4355.string(item_4353);
        }
        list_4354.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("UserGroup");
    if let Some(var_4357) = &input.user_groups {
        let mut list_4359 = scope_4356.start_list(true, Some("UserGroup"));
        for item_4358 in var_4357 {
            #[allow(unused_mut)]
            let mut entry_4360 = list_4359.entry();
            entry_4360.string(item_4358);
        }
        list_4359.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4361 = writer.prefix("UserId");
    if let Some(var_4362) = &input.user_ids {
        let mut list_4364 = scope_4361.start_list(true, Some("UserId"));
        for item_4363 in var_4362 {
            #[allow(unused_mut)]
            let mut entry_4365 = list_4364.entry();
            entry_4365.string(item_4363);
        }
        list_4364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("Value");
    if let Some(var_4367) = &input.value {
        scope_4366.string(var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("DryRun");
    if let Some(var_4369) = &input.dry_run {
        scope_4368.boolean(*var_4369);
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("OrganizationArn");
    if let Some(var_4371) = &input.organization_arns {
        let mut list_4373 = scope_4370.start_list(true, Some("OrganizationArn"));
        for item_4372 in var_4371 {
            #[allow(unused_mut)]
            let mut entry_4374 = list_4373.entry();
            entry_4374.string(item_4372);
        }
        list_4373.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4375 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4376) = &input.organizational_unit_arns {
        let mut list_4378 = scope_4375.start_list(true, Some("OrganizationalUnitArn"));
        for item_4377 in var_4376 {
            #[allow(unused_mut)]
            let mut entry_4379 = list_4378.entry();
            entry_4379.string(item_4377);
        }
        list_4378.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("SourceDestCheck");
    if let Some(var_4381) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4380, var_4381,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("Attribute");
    if let Some(var_4383) = &input.attribute {
        scope_4382.string(var_4383.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4385) = &input.block_device_mappings {
        let mut list_4387 = scope_4384.start_list(true, Some("item"));
        for item_4386 in var_4385 {
            #[allow(unused_mut)]
            let mut entry_4388 = list_4387.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4388, item_4386)?;
        }
        list_4387.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4389 = writer.prefix("DisableApiTermination");
    if let Some(var_4390) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4389, var_4390,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("DryRun");
    if let Some(var_4392) = &input.dry_run {
        scope_4391.boolean(*var_4392);
    }
    #[allow(unused_mut)]
    let mut scope_4393 = writer.prefix("EbsOptimized");
    if let Some(var_4394) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4393, var_4394,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4395 = writer.prefix("EnaSupport");
    if let Some(var_4396) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4395, var_4396,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4397 = writer.prefix("GroupId");
    if let Some(var_4398) = &input.groups {
        let mut list_4400 = scope_4397.start_list(true, Some("groupId"));
        for item_4399 in var_4398 {
            #[allow(unused_mut)]
            let mut entry_4401 = list_4400.entry();
            entry_4401.string(item_4399);
        }
        list_4400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4402 = writer.prefix("InstanceId");
    if let Some(var_4403) = &input.instance_id {
        scope_4402.string(var_4403);
    }
    #[allow(unused_mut)]
    let mut scope_4404 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4405) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4404, var_4405)?;
    }
    #[allow(unused_mut)]
    let mut scope_4406 = writer.prefix("InstanceType");
    if let Some(var_4407) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4406, var_4407)?;
    }
    #[allow(unused_mut)]
    let mut scope_4408 = writer.prefix("Kernel");
    if let Some(var_4409) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4408, var_4409)?;
    }
    #[allow(unused_mut)]
    let mut scope_4410 = writer.prefix("Ramdisk");
    if let Some(var_4411) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4410, var_4411)?;
    }
    #[allow(unused_mut)]
    let mut scope_4412 = writer.prefix("SriovNetSupport");
    if let Some(var_4413) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4412, var_4413)?;
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("UserData");
    if let Some(var_4415) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4414, var_4415,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("Value");
    if let Some(var_4417) = &input.value {
        scope_4416.string(var_4417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("InstanceId");
    if let Some(var_4419) = &input.instance_id {
        scope_4418.string(var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4421) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4420, var_4421,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("DryRun");
    if let Some(var_4423) = &input.dry_run {
        scope_4422.boolean(*var_4423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("DryRun");
    if let Some(var_4425) = &input.dry_run {
        scope_4424.boolean(*var_4425);
    }
    #[allow(unused_mut)]
    let mut scope_4426 = writer.prefix("ClientToken");
    if let Some(var_4427) = &input.client_token {
        scope_4426.string(var_4427);
    }
    #[allow(unused_mut)]
    let mut scope_4428 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4429) = &input.instance_credit_specifications {
        let mut list_4431 = scope_4428.start_list(true, Some("item"));
        for item_4430 in var_4429 {
            #[allow(unused_mut)]
            let mut entry_4432 = list_4431.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4432, item_4430)?;
        }
        list_4431.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("DryRun");
    if let Some(var_4434) = &input.dry_run {
        scope_4433.boolean(*var_4434);
    }
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("InstanceId");
    if let Some(var_4436) = &input.instance_id {
        scope_4435.string(var_4436);
    }
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("InstanceEventId");
    if let Some(var_4438) = &input.instance_event_id {
        scope_4437.string(var_4438);
    }
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("NotBefore");
    if let Some(var_4440) = &input.not_before {
        scope_4439.date_time(var_4440, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4441 = writer.prefix("DryRun");
    if let Some(var_4442) = &input.dry_run {
        scope_4441.boolean(*var_4442);
    }
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("Name");
    if let Some(var_4444) = &input.name {
        scope_4443.string(var_4444);
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4446) = &input.instance_event_window_id {
        scope_4445.string(var_4446);
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("TimeRange");
    if let Some(var_4448) = &input.time_ranges {
        let mut list_4450 = scope_4447.start_list(true, None);
        for item_4449 in var_4448 {
            #[allow(unused_mut)]
            let mut entry_4451 = list_4450.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4451, item_4449)?;
        }
        list_4450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4452 = writer.prefix("CronExpression");
    if let Some(var_4453) = &input.cron_expression {
        scope_4452.string(var_4453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4454 = writer.prefix("InstanceId");
    if let Some(var_4455) = &input.instance_id {
        scope_4454.string(var_4455);
    }
    #[allow(unused_mut)]
    let mut scope_4456 = writer.prefix("HttpTokens");
    if let Some(var_4457) = &input.http_tokens {
        scope_4456.string(var_4457.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4458 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4459) = &input.http_put_response_hop_limit {
        scope_4458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4459).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4460 = writer.prefix("HttpEndpoint");
    if let Some(var_4461) = &input.http_endpoint {
        scope_4460.string(var_4461.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4462 = writer.prefix("DryRun");
    if let Some(var_4463) = &input.dry_run {
        scope_4462.boolean(*var_4463);
    }
    #[allow(unused_mut)]
    let mut scope_4464 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4465) = &input.http_protocol_ipv6 {
        scope_4464.string(var_4465.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4466 = writer.prefix("Affinity");
    if let Some(var_4467) = &input.affinity {
        scope_4466.string(var_4467.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("GroupName");
    if let Some(var_4469) = &input.group_name {
        scope_4468.string(var_4469);
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("HostId");
    if let Some(var_4471) = &input.host_id {
        scope_4470.string(var_4471);
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("InstanceId");
    if let Some(var_4473) = &input.instance_id {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("Tenancy");
    if let Some(var_4475) = &input.tenancy {
        scope_4474.string(var_4475.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("PartitionNumber");
    if let Some(var_4477) = &input.partition_number {
        scope_4476.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4477).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4479) = &input.host_resource_group_arn {
        scope_4478.string(var_4479);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("DryRun");
    if let Some(var_4481) = &input.dry_run {
        scope_4480.boolean(*var_4481);
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("ClientToken");
    if let Some(var_4483) = &input.client_token {
        scope_4482.string(var_4483);
    }
    #[allow(unused_mut)]
    let mut scope_4484 = writer.prefix("LaunchTemplateId");
    if let Some(var_4485) = &input.launch_template_id {
        scope_4484.string(var_4485);
    }
    #[allow(unused_mut)]
    let mut scope_4486 = writer.prefix("LaunchTemplateName");
    if let Some(var_4487) = &input.launch_template_name {
        scope_4486.string(var_4487);
    }
    #[allow(unused_mut)]
    let mut scope_4488 = writer.prefix("SetDefaultVersion");
    if let Some(var_4489) = &input.default_version {
        scope_4488.string(var_4489);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4490 = writer.prefix("DryRun");
    if let Some(var_4491) = &input.dry_run {
        scope_4490.boolean(*var_4491);
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("PrefixListId");
    if let Some(var_4493) = &input.prefix_list_id {
        scope_4492.string(var_4493);
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("CurrentVersion");
    if let Some(var_4495) = &input.current_version {
        scope_4494.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4495).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("PrefixListName");
    if let Some(var_4497) = &input.prefix_list_name {
        scope_4496.string(var_4497);
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("AddEntry");
    if let Some(var_4499) = &input.add_entries {
        let mut list_4501 = scope_4498.start_list(true, None);
        for item_4500 in var_4499 {
            #[allow(unused_mut)]
            let mut entry_4502 = list_4501.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4502, item_4500,
            )?;
        }
        list_4501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("RemoveEntry");
    if let Some(var_4504) = &input.remove_entries {
        let mut list_4506 = scope_4503.start_list(true, None);
        for item_4505 in var_4504 {
            #[allow(unused_mut)]
            let mut entry_4507 = list_4506.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4507, item_4505,
            )?;
        }
        list_4506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("MaxEntries");
    if let Some(var_4509) = &input.max_entries {
        scope_4508.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4509).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("Attachment");
    if let Some(var_4511) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4510, var_4511,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("Description");
    if let Some(var_4513) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4512, var_4513)?;
    }
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("DryRun");
    if let Some(var_4515) = &input.dry_run {
        scope_4514.boolean(*var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("SecurityGroupId");
    if let Some(var_4517) = &input.groups {
        let mut list_4519 = scope_4516.start_list(true, Some("SecurityGroupId"));
        for item_4518 in var_4517 {
            #[allow(unused_mut)]
            let mut entry_4520 = list_4519.entry();
            entry_4520.string(item_4518);
        }
        list_4519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4521 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4522) = &input.network_interface_id {
        scope_4521.string(var_4522);
    }
    #[allow(unused_mut)]
    let mut scope_4523 = writer.prefix("SourceDestCheck");
    if let Some(var_4524) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4523, var_4524,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4525 = writer.prefix("ReservedInstancesId");
    if let Some(var_4526) = &input.reserved_instances_ids {
        let mut list_4528 = scope_4525.start_list(true, Some("ReservedInstancesId"));
        for item_4527 in var_4526 {
            #[allow(unused_mut)]
            let mut entry_4529 = list_4528.entry();
            entry_4529.string(item_4527);
        }
        list_4528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("ClientToken");
    if let Some(var_4531) = &input.client_token {
        scope_4530.string(var_4531);
    }
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4533) = &input.target_configurations {
        let mut list_4535 = scope_4532.start_list(true, Some("item"));
        for item_4534 in var_4533 {
            #[allow(unused_mut)]
            let mut entry_4536 = list_4535.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_4536, item_4534,
            )?;
        }
        list_4535.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("GroupId");
    if let Some(var_4538) = &input.group_id {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("SecurityGroupRule");
    if let Some(var_4540) = &input.security_group_rules {
        let mut list_4542 = scope_4539.start_list(true, Some("item"));
        for item_4541 in var_4540 {
            #[allow(unused_mut)]
            let mut entry_4543 = list_4542.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_4543, item_4541,
            )?;
        }
        list_4542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4544 = writer.prefix("DryRun");
    if let Some(var_4545) = &input.dry_run {
        scope_4544.boolean(*var_4545);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4546 = writer.prefix("Attribute");
    if let Some(var_4547) = &input.attribute {
        scope_4546.string(var_4547.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4548 = writer.prefix("CreateVolumePermission");
    if let Some(var_4549) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_4548, var_4549,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4550 = writer.prefix("UserGroup");
    if let Some(var_4551) = &input.group_names {
        let mut list_4553 = scope_4550.start_list(true, Some("GroupName"));
        for item_4552 in var_4551 {
            #[allow(unused_mut)]
            let mut entry_4554 = list_4553.entry();
            entry_4554.string(item_4552);
        }
        list_4553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("OperationType");
    if let Some(var_4556) = &input.operation_type {
        scope_4555.string(var_4556.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("SnapshotId");
    if let Some(var_4558) = &input.snapshot_id {
        scope_4557.string(var_4558);
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("UserId");
    if let Some(var_4560) = &input.user_ids {
        let mut list_4562 = scope_4559.start_list(true, Some("UserId"));
        for item_4561 in var_4560 {
            #[allow(unused_mut)]
            let mut entry_4563 = list_4562.entry();
            entry_4563.string(item_4561);
        }
        list_4562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("DryRun");
    if let Some(var_4565) = &input.dry_run {
        scope_4564.boolean(*var_4565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4567) = &input.excess_capacity_termination_policy {
        scope_4566.string(var_4567.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4569) = &input.launch_template_configs {
        let mut list_4571 = scope_4568.start_list(true, Some("item"));
        for item_4570 in var_4569 {
            #[allow(unused_mut)]
            let mut entry_4572 = list_4571.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_4572, item_4570,
            )?;
        }
        list_4571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4573 = writer.prefix("SpotFleetRequestId");
    if let Some(var_4574) = &input.spot_fleet_request_id {
        scope_4573.string(var_4574);
    }
    #[allow(unused_mut)]
    let mut scope_4575 = writer.prefix("TargetCapacity");
    if let Some(var_4576) = &input.target_capacity {
        scope_4575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4577 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_4578) = &input.on_demand_target_capacity {
        scope_4577.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4579 = writer.prefix("Context");
    if let Some(var_4580) = &input.context {
        scope_4579.string(var_4580);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4581 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_4582) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4581, var_4582,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4583 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_4584) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4583, var_4584,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("SubnetId");
    if let Some(var_4586) = &input.subnet_id {
        scope_4585.string(var_4586);
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_4588) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4587, var_4588,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_4590) = &input.customer_owned_ipv4_pool {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("EnableDns64");
    if let Some(var_4592) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4591, var_4592,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4594) = &input.traffic_mirror_filter_id {
        scope_4593.string(var_4594);
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("AddNetworkService");
    if let Some(var_4596) = &input.add_network_services {
        let mut list_4598 = scope_4595.start_list(true, Some("item"));
        for item_4597 in var_4596 {
            #[allow(unused_mut)]
            let mut entry_4599 = list_4598.entry();
            entry_4599.string(item_4597.as_str());
        }
        list_4598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("RemoveNetworkService");
    if let Some(var_4601) = &input.remove_network_services {
        let mut list_4603 = scope_4600.start_list(true, Some("item"));
        for item_4602 in var_4601 {
            #[allow(unused_mut)]
            let mut entry_4604 = list_4603.entry();
            entry_4604.string(item_4602.as_str());
        }
        list_4603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4605 = writer.prefix("DryRun");
    if let Some(var_4606) = &input.dry_run {
        scope_4605.boolean(*var_4606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4607 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_4608) = &input.traffic_mirror_filter_rule_id {
        scope_4607.string(var_4608);
    }
    #[allow(unused_mut)]
    let mut scope_4609 = writer.prefix("TrafficDirection");
    if let Some(var_4610) = &input.traffic_direction {
        scope_4609.string(var_4610.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4611 = writer.prefix("RuleNumber");
    if let Some(var_4612) = &input.rule_number {
        scope_4611.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4612).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4613 = writer.prefix("RuleAction");
    if let Some(var_4614) = &input.rule_action {
        scope_4613.string(var_4614.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4615 = writer.prefix("DestinationPortRange");
    if let Some(var_4616) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4615, var_4616,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4617 = writer.prefix("SourcePortRange");
    if let Some(var_4618) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_4617, var_4618,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("Protocol");
    if let Some(var_4620) = &input.protocol {
        scope_4619.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4620).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("DestinationCidrBlock");
    if let Some(var_4622) = &input.destination_cidr_block {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("SourceCidrBlock");
    if let Some(var_4624) = &input.source_cidr_block {
        scope_4623.string(var_4624);
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("Description");
    if let Some(var_4626) = &input.description {
        scope_4625.string(var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("RemoveField");
    if let Some(var_4628) = &input.remove_fields {
        let mut list_4630 = scope_4627.start_list(true, None);
        for item_4629 in var_4628 {
            #[allow(unused_mut)]
            let mut entry_4631 = list_4630.entry();
            entry_4631.string(item_4629.as_str());
        }
        list_4630.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4632 = writer.prefix("DryRun");
    if let Some(var_4633) = &input.dry_run {
        scope_4632.boolean(*var_4633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4634 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_4635) = &input.traffic_mirror_session_id {
        scope_4634.string(var_4635);
    }
    #[allow(unused_mut)]
    let mut scope_4636 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_4637) = &input.traffic_mirror_target_id {
        scope_4636.string(var_4637);
    }
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_4639) = &input.traffic_mirror_filter_id {
        scope_4638.string(var_4639);
    }
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("PacketLength");
    if let Some(var_4641) = &input.packet_length {
        scope_4640.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4641).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("SessionNumber");
    if let Some(var_4643) = &input.session_number {
        scope_4642.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4643).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("VirtualNetworkId");
    if let Some(var_4645) = &input.virtual_network_id {
        scope_4644.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4645).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("Description");
    if let Some(var_4647) = &input.description {
        scope_4646.string(var_4647);
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("RemoveField");
    if let Some(var_4649) = &input.remove_fields {
        let mut list_4651 = scope_4648.start_list(true, None);
        for item_4650 in var_4649 {
            #[allow(unused_mut)]
            let mut entry_4652 = list_4651.entry();
            entry_4652.string(item_4650.as_str());
        }
        list_4651.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4653 = writer.prefix("DryRun");
    if let Some(var_4654) = &input.dry_run {
        scope_4653.boolean(*var_4654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4655 = writer.prefix("TransitGatewayId");
    if let Some(var_4656) = &input.transit_gateway_id {
        scope_4655.string(var_4656);
    }
    #[allow(unused_mut)]
    let mut scope_4657 = writer.prefix("Description");
    if let Some(var_4658) = &input.description {
        scope_4657.string(var_4658);
    }
    #[allow(unused_mut)]
    let mut scope_4659 = writer.prefix("Options");
    if let Some(var_4660) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_4659, var_4660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4661 = writer.prefix("DryRun");
    if let Some(var_4662) = &input.dry_run {
        scope_4661.boolean(*var_4662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4664) = &input.transit_gateway_route_table_id {
        scope_4663.string(var_4664);
    }
    #[allow(unused_mut)]
    let mut scope_4665 = writer.prefix("PrefixListId");
    if let Some(var_4666) = &input.prefix_list_id {
        scope_4665.string(var_4666);
    }
    #[allow(unused_mut)]
    let mut scope_4667 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4668) = &input.transit_gateway_attachment_id {
        scope_4667.string(var_4668);
    }
    #[allow(unused_mut)]
    let mut scope_4669 = writer.prefix("Blackhole");
    if let Some(var_4670) = &input.blackhole {
        scope_4669.boolean(*var_4670);
    }
    #[allow(unused_mut)]
    let mut scope_4671 = writer.prefix("DryRun");
    if let Some(var_4672) = &input.dry_run {
        scope_4671.boolean(*var_4672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4674) = &input.transit_gateway_attachment_id {
        scope_4673.string(var_4674);
    }
    #[allow(unused_mut)]
    let mut scope_4675 = writer.prefix("AddSubnetIds");
    if let Some(var_4676) = &input.add_subnet_ids {
        let mut list_4678 = scope_4675.start_list(true, Some("item"));
        for item_4677 in var_4676 {
            #[allow(unused_mut)]
            let mut entry_4679 = list_4678.entry();
            entry_4679.string(item_4677);
        }
        list_4678.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("RemoveSubnetIds");
    if let Some(var_4681) = &input.remove_subnet_ids {
        let mut list_4683 = scope_4680.start_list(true, Some("item"));
        for item_4682 in var_4681 {
            #[allow(unused_mut)]
            let mut entry_4684 = list_4683.entry();
            entry_4684.string(item_4682);
        }
        list_4683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4685 = writer.prefix("Options");
    if let Some(var_4686) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_4685, var_4686)?;
    }
    #[allow(unused_mut)]
    let mut scope_4687 = writer.prefix("DryRun");
    if let Some(var_4688) = &input.dry_run {
        scope_4687.boolean(*var_4688);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4689 = writer.prefix("DryRun");
    if let Some(var_4690) = &input.dry_run {
        scope_4689.boolean(*var_4690);
    }
    #[allow(unused_mut)]
    let mut scope_4691 = writer.prefix("VolumeId");
    if let Some(var_4692) = &input.volume_id {
        scope_4691.string(var_4692);
    }
    #[allow(unused_mut)]
    let mut scope_4693 = writer.prefix("Size");
    if let Some(var_4694) = &input.size {
        scope_4693.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4694).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("VolumeType");
    if let Some(var_4696) = &input.volume_type {
        scope_4695.string(var_4696.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("Iops");
    if let Some(var_4698) = &input.iops {
        scope_4697.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4698).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("Throughput");
    if let Some(var_4700) = &input.throughput {
        scope_4699.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4700).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("MultiAttachEnabled");
    if let Some(var_4702) = &input.multi_attach_enabled {
        scope_4701.boolean(*var_4702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("AutoEnableIO");
    if let Some(var_4704) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4703, var_4704,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("VolumeId");
    if let Some(var_4706) = &input.volume_id {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("DryRun");
    if let Some(var_4708) = &input.dry_run {
        scope_4707.boolean(*var_4708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("EnableDnsHostnames");
    if let Some(var_4710) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4709, var_4710,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("EnableDnsSupport");
    if let Some(var_4712) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4711, var_4712,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("VpcId");
    if let Some(var_4714) = &input.vpc_id {
        scope_4713.string(var_4714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("DryRun");
    if let Some(var_4716) = &input.dry_run {
        scope_4715.boolean(*var_4716);
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("VpcEndpointId");
    if let Some(var_4718) = &input.vpc_endpoint_id {
        scope_4717.string(var_4718);
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("ResetPolicy");
    if let Some(var_4720) = &input.reset_policy {
        scope_4719.boolean(*var_4720);
    }
    #[allow(unused_mut)]
    let mut scope_4721 = writer.prefix("PolicyDocument");
    if let Some(var_4722) = &input.policy_document {
        scope_4721.string(var_4722);
    }
    #[allow(unused_mut)]
    let mut scope_4723 = writer.prefix("AddRouteTableId");
    if let Some(var_4724) = &input.add_route_table_ids {
        let mut list_4726 = scope_4723.start_list(true, Some("item"));
        for item_4725 in var_4724 {
            #[allow(unused_mut)]
            let mut entry_4727 = list_4726.entry();
            entry_4727.string(item_4725);
        }
        list_4726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("RemoveRouteTableId");
    if let Some(var_4729) = &input.remove_route_table_ids {
        let mut list_4731 = scope_4728.start_list(true, Some("item"));
        for item_4730 in var_4729 {
            #[allow(unused_mut)]
            let mut entry_4732 = list_4731.entry();
            entry_4732.string(item_4730);
        }
        list_4731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4733 = writer.prefix("AddSubnetId");
    if let Some(var_4734) = &input.add_subnet_ids {
        let mut list_4736 = scope_4733.start_list(true, Some("item"));
        for item_4735 in var_4734 {
            #[allow(unused_mut)]
            let mut entry_4737 = list_4736.entry();
            entry_4737.string(item_4735);
        }
        list_4736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("RemoveSubnetId");
    if let Some(var_4739) = &input.remove_subnet_ids {
        let mut list_4741 = scope_4738.start_list(true, Some("item"));
        for item_4740 in var_4739 {
            #[allow(unused_mut)]
            let mut entry_4742 = list_4741.entry();
            entry_4742.string(item_4740);
        }
        list_4741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("AddSecurityGroupId");
    if let Some(var_4744) = &input.add_security_group_ids {
        let mut list_4746 = scope_4743.start_list(true, Some("item"));
        for item_4745 in var_4744 {
            #[allow(unused_mut)]
            let mut entry_4747 = list_4746.entry();
            entry_4747.string(item_4745);
        }
        list_4746.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4748 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_4749) = &input.remove_security_group_ids {
        let mut list_4751 = scope_4748.start_list(true, Some("item"));
        for item_4750 in var_4749 {
            #[allow(unused_mut)]
            let mut entry_4752 = list_4751.entry();
            entry_4752.string(item_4750);
        }
        list_4751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_4754) = &input.private_dns_enabled {
        scope_4753.boolean(*var_4754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("DryRun");
    if let Some(var_4756) = &input.dry_run {
        scope_4755.boolean(*var_4756);
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("ConnectionNotificationId");
    if let Some(var_4758) = &input.connection_notification_id {
        scope_4757.string(var_4758);
    }
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_4760) = &input.connection_notification_arn {
        scope_4759.string(var_4760);
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("ConnectionEvents");
    if let Some(var_4762) = &input.connection_events {
        let mut list_4764 = scope_4761.start_list(true, Some("item"));
        for item_4763 in var_4762 {
            #[allow(unused_mut)]
            let mut entry_4765 = list_4764.entry();
            entry_4765.string(item_4763);
        }
        list_4764.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("DryRun");
    if let Some(var_4767) = &input.dry_run {
        scope_4766.boolean(*var_4767);
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("ServiceId");
    if let Some(var_4769) = &input.service_id {
        scope_4768.string(var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("PrivateDnsName");
    if let Some(var_4771) = &input.private_dns_name {
        scope_4770.string(var_4771);
    }
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_4773) = &input.remove_private_dns_name {
        scope_4772.boolean(*var_4773);
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("AcceptanceRequired");
    if let Some(var_4775) = &input.acceptance_required {
        scope_4774.boolean(*var_4775);
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_4777) = &input.add_network_load_balancer_arns {
        let mut list_4779 = scope_4776.start_list(true, Some("item"));
        for item_4778 in var_4777 {
            #[allow(unused_mut)]
            let mut entry_4780 = list_4779.entry();
            entry_4780.string(item_4778);
        }
        list_4779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4781 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_4782) = &input.remove_network_load_balancer_arns {
        let mut list_4784 = scope_4781.start_list(true, Some("item"));
        for item_4783 in var_4782 {
            #[allow(unused_mut)]
            let mut entry_4785 = list_4784.entry();
            entry_4785.string(item_4783);
        }
        list_4784.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_4787) = &input.add_gateway_load_balancer_arns {
        let mut list_4789 = scope_4786.start_list(true, Some("item"));
        for item_4788 in var_4787 {
            #[allow(unused_mut)]
            let mut entry_4790 = list_4789.entry();
            entry_4790.string(item_4788);
        }
        list_4789.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4791 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_4792) = &input.remove_gateway_load_balancer_arns {
        let mut list_4794 = scope_4791.start_list(true, Some("item"));
        for item_4793 in var_4792 {
            #[allow(unused_mut)]
            let mut entry_4795 = list_4794.entry();
            entry_4795.string(item_4793);
        }
        list_4794.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("DryRun");
    if let Some(var_4797) = &input.dry_run {
        scope_4796.boolean(*var_4797);
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("ServiceId");
    if let Some(var_4799) = &input.service_id {
        scope_4798.string(var_4799);
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_4801) = &input.add_allowed_principals {
        let mut list_4803 = scope_4800.start_list(true, Some("item"));
        for item_4802 in var_4801 {
            #[allow(unused_mut)]
            let mut entry_4804 = list_4803.entry();
            entry_4804.string(item_4802);
        }
        list_4803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4805 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_4806) = &input.remove_allowed_principals {
        let mut list_4808 = scope_4805.start_list(true, Some("item"));
        for item_4807 in var_4806 {
            #[allow(unused_mut)]
            let mut entry_4809 = list_4808.entry();
            entry_4809.string(item_4807);
        }
        list_4808.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4810 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_4811) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4810, var_4811,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4812 = writer.prefix("DryRun");
    if let Some(var_4813) = &input.dry_run {
        scope_4812.boolean(*var_4813);
    }
    #[allow(unused_mut)]
    let mut scope_4814 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_4815) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_4814, var_4815,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4816 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4817) = &input.vpc_peering_connection_id {
        scope_4816.string(var_4817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4818 = writer.prefix("VpcId");
    if let Some(var_4819) = &input.vpc_id {
        scope_4818.string(var_4819);
    }
    #[allow(unused_mut)]
    let mut scope_4820 = writer.prefix("InstanceTenancy");
    if let Some(var_4821) = &input.instance_tenancy {
        scope_4820.string(var_4821.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4822 = writer.prefix("DryRun");
    if let Some(var_4823) = &input.dry_run {
        scope_4822.boolean(*var_4823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4824 = writer.prefix("VpnConnectionId");
    if let Some(var_4825) = &input.vpn_connection_id {
        scope_4824.string(var_4825);
    }
    #[allow(unused_mut)]
    let mut scope_4826 = writer.prefix("TransitGatewayId");
    if let Some(var_4827) = &input.transit_gateway_id {
        scope_4826.string(var_4827);
    }
    #[allow(unused_mut)]
    let mut scope_4828 = writer.prefix("CustomerGatewayId");
    if let Some(var_4829) = &input.customer_gateway_id {
        scope_4828.string(var_4829);
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("VpnGatewayId");
    if let Some(var_4831) = &input.vpn_gateway_id {
        scope_4830.string(var_4831);
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("DryRun");
    if let Some(var_4833) = &input.dry_run {
        scope_4832.boolean(*var_4833);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("VpnConnectionId");
    if let Some(var_4835) = &input.vpn_connection_id {
        scope_4834.string(var_4835);
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_4837) = &input.local_ipv4_network_cidr {
        scope_4836.string(var_4837);
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_4839) = &input.remote_ipv4_network_cidr {
        scope_4838.string(var_4839);
    }
    #[allow(unused_mut)]
    let mut scope_4840 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_4841) = &input.local_ipv6_network_cidr {
        scope_4840.string(var_4841);
    }
    #[allow(unused_mut)]
    let mut scope_4842 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_4843) = &input.remote_ipv6_network_cidr {
        scope_4842.string(var_4843);
    }
    #[allow(unused_mut)]
    let mut scope_4844 = writer.prefix("DryRun");
    if let Some(var_4845) = &input.dry_run {
        scope_4844.boolean(*var_4845);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4846 = writer.prefix("VpnConnectionId");
    if let Some(var_4847) = &input.vpn_connection_id {
        scope_4846.string(var_4847);
    }
    #[allow(unused_mut)]
    let mut scope_4848 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4849) = &input.vpn_tunnel_outside_ip_address {
        scope_4848.string(var_4849);
    }
    #[allow(unused_mut)]
    let mut scope_4850 = writer.prefix("DryRun");
    if let Some(var_4851) = &input.dry_run {
        scope_4850.boolean(*var_4851);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4852 = writer.prefix("VpnConnectionId");
    if let Some(var_4853) = &input.vpn_connection_id {
        scope_4852.string(var_4853);
    }
    #[allow(unused_mut)]
    let mut scope_4854 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_4855) = &input.vpn_tunnel_outside_ip_address {
        scope_4854.string(var_4855);
    }
    #[allow(unused_mut)]
    let mut scope_4856 = writer.prefix("TunnelOptions");
    if let Some(var_4857) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_4856, var_4857,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4858 = writer.prefix("DryRun");
    if let Some(var_4859) = &input.dry_run {
        scope_4858.boolean(*var_4859);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4860 = writer.prefix("InstanceId");
    if let Some(var_4861) = &input.instance_ids {
        let mut list_4863 = scope_4860.start_list(true, Some("InstanceId"));
        for item_4862 in var_4861 {
            #[allow(unused_mut)]
            let mut entry_4864 = list_4863.entry();
            entry_4864.string(item_4862);
        }
        list_4863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("DryRun");
    if let Some(var_4866) = &input.dry_run {
        scope_4865.boolean(*var_4866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("DryRun");
    if let Some(var_4868) = &input.dry_run {
        scope_4867.boolean(*var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("PublicIp");
    if let Some(var_4870) = &input.public_ip {
        scope_4869.string(var_4870);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("Cidr");
    if let Some(var_4872) = &input.cidr {
        scope_4871.string(var_4872);
    }
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_4874) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_4873, var_4874,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4875 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_4876) = &input.publicly_advertisable {
        scope_4875.boolean(*var_4876);
    }
    #[allow(unused_mut)]
    let mut scope_4877 = writer.prefix("Description");
    if let Some(var_4878) = &input.description {
        scope_4877.string(var_4878);
    }
    #[allow(unused_mut)]
    let mut scope_4879 = writer.prefix("DryRun");
    if let Some(var_4880) = &input.dry_run {
        scope_4879.boolean(*var_4880);
    }
    #[allow(unused_mut)]
    let mut scope_4881 = writer.prefix("PoolTagSpecification");
    if let Some(var_4882) = &input.pool_tag_specifications {
        let mut list_4884 = scope_4881.start_list(true, Some("item"));
        for item_4883 in var_4882 {
            #[allow(unused_mut)]
            let mut entry_4885 = list_4884.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4885, item_4883,
            )?;
        }
        list_4884.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("MultiRegion");
    if let Some(var_4887) = &input.multi_region {
        scope_4886.boolean(*var_4887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("ClientToken");
    if let Some(var_4889) = &input.client_token {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("CurrencyCode");
    if let Some(var_4891) = &input.currency_code {
        scope_4890.string(var_4891.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4892 = writer.prefix("HostIdSet");
    if let Some(var_4893) = &input.host_id_set {
        let mut list_4895 = scope_4892.start_list(true, Some("item"));
        for item_4894 in var_4893 {
            #[allow(unused_mut)]
            let mut entry_4896 = list_4895.entry();
            entry_4896.string(item_4894);
        }
        list_4895.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("LimitPrice");
    if let Some(var_4898) = &input.limit_price {
        scope_4897.string(var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("OfferingId");
    if let Some(var_4900) = &input.offering_id {
        scope_4899.string(var_4900);
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("TagSpecification");
    if let Some(var_4902) = &input.tag_specifications {
        let mut list_4904 = scope_4901.start_list(true, Some("item"));
        for item_4903 in var_4902 {
            #[allow(unused_mut)]
            let mut entry_4905 = list_4904.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4905, item_4903,
            )?;
        }
        list_4904.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4906 = writer.prefix("InstanceCount");
    if let Some(var_4907) = &input.instance_count {
        scope_4906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4908 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_4909) = &input.reserved_instances_offering_id {
        scope_4908.string(var_4909);
    }
    #[allow(unused_mut)]
    let mut scope_4910 = writer.prefix("DryRun");
    if let Some(var_4911) = &input.dry_run {
        scope_4910.boolean(*var_4911);
    }
    #[allow(unused_mut)]
    let mut scope_4912 = writer.prefix("LimitPrice");
    if let Some(var_4913) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_4912, var_4913,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4914 = writer.prefix("PurchaseTime");
    if let Some(var_4915) = &input.purchase_time {
        scope_4914.date_time(var_4915, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4916 = writer.prefix("ClientToken");
    if let Some(var_4917) = &input.client_token {
        scope_4916.string(var_4917);
    }
    #[allow(unused_mut)]
    let mut scope_4918 = writer.prefix("DryRun");
    if let Some(var_4919) = &input.dry_run {
        scope_4918.boolean(*var_4919);
    }
    #[allow(unused_mut)]
    let mut scope_4920 = writer.prefix("PurchaseRequest");
    if let Some(var_4921) = &input.purchase_requests {
        let mut list_4923 = scope_4920.start_list(true, Some("PurchaseRequest"));
        for item_4922 in var_4921 {
            #[allow(unused_mut)]
            let mut entry_4924 = list_4923.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_4924, item_4922,
            )?;
        }
        list_4923.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("InstanceId");
    if let Some(var_4926) = &input.instance_ids {
        let mut list_4928 = scope_4925.start_list(true, Some("InstanceId"));
        for item_4927 in var_4926 {
            #[allow(unused_mut)]
            let mut entry_4929 = list_4928.entry();
            entry_4929.string(item_4927);
        }
        list_4928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4930 = writer.prefix("DryRun");
    if let Some(var_4931) = &input.dry_run {
        scope_4930.boolean(*var_4931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4932 = writer.prefix("ImageLocation");
    if let Some(var_4933) = &input.image_location {
        scope_4932.string(var_4933);
    }
    #[allow(unused_mut)]
    let mut scope_4934 = writer.prefix("Architecture");
    if let Some(var_4935) = &input.architecture {
        scope_4934.string(var_4935.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4936 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4937) = &input.block_device_mappings {
        let mut list_4939 = scope_4936.start_list(true, Some("BlockDeviceMapping"));
        for item_4938 in var_4937 {
            #[allow(unused_mut)]
            let mut entry_4940 = list_4939.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_4940, item_4938,
            )?;
        }
        list_4939.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4941 = writer.prefix("Description");
    if let Some(var_4942) = &input.description {
        scope_4941.string(var_4942);
    }
    #[allow(unused_mut)]
    let mut scope_4943 = writer.prefix("DryRun");
    if let Some(var_4944) = &input.dry_run {
        scope_4943.boolean(*var_4944);
    }
    #[allow(unused_mut)]
    let mut scope_4945 = writer.prefix("EnaSupport");
    if let Some(var_4946) = &input.ena_support {
        scope_4945.boolean(*var_4946);
    }
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("KernelId");
    if let Some(var_4948) = &input.kernel_id {
        scope_4947.string(var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("Name");
    if let Some(var_4950) = &input.name {
        scope_4949.string(var_4950);
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("BillingProduct");
    if let Some(var_4952) = &input.billing_products {
        let mut list_4954 = scope_4951.start_list(true, Some("item"));
        for item_4953 in var_4952 {
            #[allow(unused_mut)]
            let mut entry_4955 = list_4954.entry();
            entry_4955.string(item_4953);
        }
        list_4954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("RamdiskId");
    if let Some(var_4957) = &input.ramdisk_id {
        scope_4956.string(var_4957);
    }
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("RootDeviceName");
    if let Some(var_4959) = &input.root_device_name {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]
    let mut scope_4960 = writer.prefix("SriovNetSupport");
    if let Some(var_4961) = &input.sriov_net_support {
        scope_4960.string(var_4961);
    }
    #[allow(unused_mut)]
    let mut scope_4962 = writer.prefix("VirtualizationType");
    if let Some(var_4963) = &input.virtualization_type {
        scope_4962.string(var_4963);
    }
    #[allow(unused_mut)]
    let mut scope_4964 = writer.prefix("BootMode");
    if let Some(var_4965) = &input.boot_mode {
        scope_4964.string(var_4965.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4966 = writer.prefix("DryRun");
    if let Some(var_4967) = &input.dry_run {
        scope_4966.boolean(*var_4967);
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("InstanceTagAttribute");
    if let Some(var_4969) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_4968, var_4969,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4971) = &input.transit_gateway_multicast_domain_id {
        scope_4970.string(var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("GroupIpAddress");
    if let Some(var_4973) = &input.group_ip_address {
        scope_4972.string(var_4973);
    }
    #[allow(unused_mut)]
    let mut scope_4974 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4975) = &input.network_interface_ids {
        let mut list_4977 = scope_4974.start_list(true, Some("item"));
        for item_4976 in var_4975 {
            #[allow(unused_mut)]
            let mut entry_4978 = list_4977.entry();
            entry_4978.string(item_4976);
        }
        list_4977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("DryRun");
    if let Some(var_4980) = &input.dry_run {
        scope_4979.boolean(*var_4980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4982) = &input.transit_gateway_multicast_domain_id {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("GroupIpAddress");
    if let Some(var_4984) = &input.group_ip_address {
        scope_4983.string(var_4984);
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_4986) = &input.network_interface_ids {
        let mut list_4988 = scope_4985.start_list(true, Some("item"));
        for item_4987 in var_4986 {
            #[allow(unused_mut)]
            let mut entry_4989 = list_4988.entry();
            entry_4989.string(item_4987);
        }
        list_4988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("DryRun");
    if let Some(var_4991) = &input.dry_run {
        scope_4990.boolean(*var_4991);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4993) = &input.transit_gateway_multicast_domain_id {
        scope_4992.string(var_4993);
    }
    #[allow(unused_mut)]
    let mut scope_4994 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4995) = &input.transit_gateway_attachment_id {
        scope_4994.string(var_4995);
    }
    #[allow(unused_mut)]
    let mut scope_4996 = writer.prefix("SubnetIds");
    if let Some(var_4997) = &input.subnet_ids {
        let mut list_4999 = scope_4996.start_list(true, Some("item"));
        for item_4998 in var_4997 {
            #[allow(unused_mut)]
            let mut entry_5000 = list_4999.entry();
            entry_5000.string(item_4998);
        }
        list_4999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("DryRun");
    if let Some(var_5002) = &input.dry_run {
        scope_5001.boolean(*var_5002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5004) = &input.transit_gateway_attachment_id {
        scope_5003.string(var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("DryRun");
    if let Some(var_5006) = &input.dry_run {
        scope_5005.boolean(*var_5006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5008) = &input.transit_gateway_attachment_id {
        scope_5007.string(var_5008);
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("DryRun");
    if let Some(var_5010) = &input.dry_run {
        scope_5009.boolean(*var_5010);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("DryRun");
    if let Some(var_5012) = &input.dry_run {
        scope_5011.boolean(*var_5012);
    }
    #[allow(unused_mut)]
    let mut scope_5013 = writer.prefix("ServiceId");
    if let Some(var_5014) = &input.service_id {
        scope_5013.string(var_5014);
    }
    #[allow(unused_mut)]
    let mut scope_5015 = writer.prefix("VpcEndpointId");
    if let Some(var_5016) = &input.vpc_endpoint_ids {
        let mut list_5018 = scope_5015.start_list(true, Some("item"));
        for item_5017 in var_5016 {
            #[allow(unused_mut)]
            let mut entry_5019 = list_5018.entry();
            entry_5019.string(item_5017);
        }
        list_5018.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("DryRun");
    if let Some(var_5021) = &input.dry_run {
        scope_5020.boolean(*var_5021);
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5023) = &input.vpc_peering_connection_id {
        scope_5022.string(var_5023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("AllocationId");
    if let Some(var_5025) = &input.allocation_id {
        scope_5024.string(var_5025);
    }
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("PublicIp");
    if let Some(var_5027) = &input.public_ip {
        scope_5026.string(var_5027);
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5029) = &input.network_border_group {
        scope_5028.string(var_5029);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("DryRun");
    if let Some(var_5031) = &input.dry_run {
        scope_5030.boolean(*var_5031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("HostId");
    if let Some(var_5033) = &input.host_ids {
        let mut list_5035 = scope_5032.start_list(true, Some("item"));
        for item_5034 in var_5033 {
            #[allow(unused_mut)]
            let mut entry_5036 = list_5035.entry();
            entry_5036.string(item_5034);
        }
        list_5035.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5037 = writer.prefix("IamInstanceProfile");
    if let Some(var_5038) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5037, var_5038,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5039 = writer.prefix("AssociationId");
    if let Some(var_5040) = &input.association_id {
        scope_5039.string(var_5040);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5041 = writer.prefix("AssociationId");
    if let Some(var_5042) = &input.association_id {
        scope_5041.string(var_5042);
    }
    #[allow(unused_mut)]
    let mut scope_5043 = writer.prefix("DryRun");
    if let Some(var_5044) = &input.dry_run {
        scope_5043.boolean(*var_5044);
    }
    #[allow(unused_mut)]
    let mut scope_5045 = writer.prefix("NetworkAclId");
    if let Some(var_5046) = &input.network_acl_id {
        scope_5045.string(var_5046);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5047 = writer.prefix("CidrBlock");
    if let Some(var_5048) = &input.cidr_block {
        scope_5047.string(var_5048);
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("DryRun");
    if let Some(var_5050) = &input.dry_run {
        scope_5049.boolean(*var_5050);
    }
    #[allow(unused_mut)]
    let mut scope_5051 = writer.prefix("Egress");
    if let Some(var_5052) = &input.egress {
        scope_5051.boolean(*var_5052);
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("Icmp");
    if let Some(var_5054) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5053, var_5054)?;
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5056) = &input.ipv6_cidr_block {
        scope_5055.string(var_5056);
    }
    #[allow(unused_mut)]
    let mut scope_5057 = writer.prefix("NetworkAclId");
    if let Some(var_5058) = &input.network_acl_id {
        scope_5057.string(var_5058);
    }
    #[allow(unused_mut)]
    let mut scope_5059 = writer.prefix("PortRange");
    if let Some(var_5060) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5059, var_5060)?;
    }
    #[allow(unused_mut)]
    let mut scope_5061 = writer.prefix("Protocol");
    if let Some(var_5062) = &input.protocol {
        scope_5061.string(var_5062);
    }
    #[allow(unused_mut)]
    let mut scope_5063 = writer.prefix("RuleAction");
    if let Some(var_5064) = &input.rule_action {
        scope_5063.string(var_5064.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5065 = writer.prefix("RuleNumber");
    if let Some(var_5066) = &input.rule_number {
        scope_5065.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5066).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5068) = &input.destination_cidr_block {
        scope_5067.string(var_5068);
    }
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5070) = &input.destination_ipv6_cidr_block {
        scope_5069.string(var_5070);
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5072) = &input.destination_prefix_list_id {
        scope_5071.string(var_5072);
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("DryRun");
    if let Some(var_5074) = &input.dry_run {
        scope_5073.boolean(*var_5074);
    }
    #[allow(unused_mut)]
    let mut scope_5075 = writer.prefix("VpcEndpointId");
    if let Some(var_5076) = &input.vpc_endpoint_id {
        scope_5075.string(var_5076);
    }
    #[allow(unused_mut)]
    let mut scope_5077 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5078) = &input.egress_only_internet_gateway_id {
        scope_5077.string(var_5078);
    }
    #[allow(unused_mut)]
    let mut scope_5079 = writer.prefix("GatewayId");
    if let Some(var_5080) = &input.gateway_id {
        scope_5079.string(var_5080);
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("InstanceId");
    if let Some(var_5082) = &input.instance_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("LocalTarget");
    if let Some(var_5084) = &input.local_target {
        scope_5083.boolean(*var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("NatGatewayId");
    if let Some(var_5086) = &input.nat_gateway_id {
        scope_5085.string(var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("TransitGatewayId");
    if let Some(var_5088) = &input.transit_gateway_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("LocalGatewayId");
    if let Some(var_5090) = &input.local_gateway_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("CarrierGatewayId");
    if let Some(var_5092) = &input.carrier_gateway_id {
        scope_5091.string(var_5092);
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5094) = &input.network_interface_id {
        scope_5093.string(var_5094);
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("RouteTableId");
    if let Some(var_5096) = &input.route_table_id {
        scope_5095.string(var_5096);
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5098) = &input.vpc_peering_connection_id {
        scope_5097.string(var_5098);
    }
    #[allow(unused_mut)]
    let mut scope_5099 = writer.prefix("CoreNetworkArn");
    if let Some(var_5100) = &input.core_network_arn {
        scope_5099.string(var_5100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5101 = writer.prefix("AssociationId");
    if let Some(var_5102) = &input.association_id {
        scope_5101.string(var_5102);
    }
    #[allow(unused_mut)]
    let mut scope_5103 = writer.prefix("DryRun");
    if let Some(var_5104) = &input.dry_run {
        scope_5103.boolean(*var_5104);
    }
    #[allow(unused_mut)]
    let mut scope_5105 = writer.prefix("RouteTableId");
    if let Some(var_5106) = &input.route_table_id {
        scope_5105.string(var_5106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5107 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5108) = &input.destination_cidr_block {
        scope_5107.string(var_5108);
    }
    #[allow(unused_mut)]
    let mut scope_5109 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5110) = &input.transit_gateway_route_table_id {
        scope_5109.string(var_5110);
    }
    #[allow(unused_mut)]
    let mut scope_5111 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5112) = &input.transit_gateway_attachment_id {
        scope_5111.string(var_5112);
    }
    #[allow(unused_mut)]
    let mut scope_5113 = writer.prefix("Blackhole");
    if let Some(var_5114) = &input.blackhole {
        scope_5113.boolean(*var_5114);
    }
    #[allow(unused_mut)]
    let mut scope_5115 = writer.prefix("DryRun");
    if let Some(var_5116) = &input.dry_run {
        scope_5115.boolean(*var_5116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5117 = writer.prefix("Description");
    if let Some(var_5118) = &input.description {
        scope_5117.string(var_5118);
    }
    #[allow(unused_mut)]
    let mut scope_5119 = writer.prefix("DryRun");
    if let Some(var_5120) = &input.dry_run {
        scope_5119.boolean(*var_5120);
    }
    #[allow(unused_mut)]
    let mut scope_5121 = writer.prefix("EndTime");
    if let Some(var_5122) = &input.end_time {
        scope_5121.date_time(var_5122, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5123 = writer.prefix("InstanceId");
    if let Some(var_5124) = &input.instances {
        let mut list_5126 = scope_5123.start_list(true, Some("InstanceId"));
        for item_5125 in var_5124 {
            #[allow(unused_mut)]
            let mut entry_5127 = list_5126.entry();
            entry_5127.string(item_5125);
        }
        list_5126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("ReasonCode");
    if let Some(var_5129) = &input.reason_codes {
        let mut list_5131 = scope_5128.start_list(true, Some("item"));
        for item_5130 in var_5129 {
            #[allow(unused_mut)]
            let mut entry_5132 = list_5131.entry();
            entry_5132.string(item_5130.as_str());
        }
        list_5131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5133 = writer.prefix("StartTime");
    if let Some(var_5134) = &input.start_time {
        scope_5133.date_time(var_5134, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5135 = writer.prefix("Status");
    if let Some(var_5136) = &input.status {
        scope_5135.string(var_5136.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5137 = writer.prefix("DryRun");
    if let Some(var_5138) = &input.dry_run {
        scope_5137.boolean(*var_5138);
    }
    #[allow(unused_mut)]
    let mut scope_5139 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5140) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5139, var_5140,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5141 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5142) = &input.availability_zone_group {
        scope_5141.string(var_5142);
    }
    #[allow(unused_mut)]
    let mut scope_5143 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5144) = &input.block_duration_minutes {
        scope_5143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5145 = writer.prefix("ClientToken");
    if let Some(var_5146) = &input.client_token {
        scope_5145.string(var_5146);
    }
    #[allow(unused_mut)]
    let mut scope_5147 = writer.prefix("DryRun");
    if let Some(var_5148) = &input.dry_run {
        scope_5147.boolean(*var_5148);
    }
    #[allow(unused_mut)]
    let mut scope_5149 = writer.prefix("InstanceCount");
    if let Some(var_5150) = &input.instance_count {
        scope_5149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5151 = writer.prefix("LaunchGroup");
    if let Some(var_5152) = &input.launch_group {
        scope_5151.string(var_5152);
    }
    #[allow(unused_mut)]
    let mut scope_5153 = writer.prefix("LaunchSpecification");
    if let Some(var_5154) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5153, var_5154,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5155 = writer.prefix("SpotPrice");
    if let Some(var_5156) = &input.spot_price {
        scope_5155.string(var_5156);
    }
    #[allow(unused_mut)]
    let mut scope_5157 = writer.prefix("Type");
    if let Some(var_5158) = &input.r#type {
        scope_5157.string(var_5158.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5159 = writer.prefix("ValidFrom");
    if let Some(var_5160) = &input.valid_from {
        scope_5159.date_time(var_5160, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5161 = writer.prefix("ValidUntil");
    if let Some(var_5162) = &input.valid_until {
        scope_5161.date_time(var_5162, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5163 = writer.prefix("TagSpecification");
    if let Some(var_5164) = &input.tag_specifications {
        let mut list_5166 = scope_5163.start_list(true, Some("item"));
        for item_5165 in var_5164 {
            #[allow(unused_mut)]
            let mut entry_5167 = list_5166.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5167, item_5165,
            )?;
        }
        list_5166.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5169) = &input.instance_interruption_behavior {
        scope_5168.string(var_5169.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5170 = writer.prefix("AllocationId");
    if let Some(var_5171) = &input.allocation_id {
        scope_5170.string(var_5171);
    }
    #[allow(unused_mut)]
    let mut scope_5172 = writer.prefix("Attribute");
    if let Some(var_5173) = &input.attribute {
        scope_5172.string(var_5173.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5174 = writer.prefix("DryRun");
    if let Some(var_5175) = &input.dry_run {
        scope_5174.boolean(*var_5175);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5176 = writer.prefix("DryRun");
    if let Some(var_5177) = &input.dry_run {
        scope_5176.boolean(*var_5177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5178 = writer.prefix("DryRun");
    if let Some(var_5179) = &input.dry_run {
        scope_5178.boolean(*var_5179);
    }
    #[allow(unused_mut)]
    let mut scope_5180 = writer.prefix("FpgaImageId");
    if let Some(var_5181) = &input.fpga_image_id {
        scope_5180.string(var_5181);
    }
    #[allow(unused_mut)]
    let mut scope_5182 = writer.prefix("Attribute");
    if let Some(var_5183) = &input.attribute {
        scope_5182.string(var_5183.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5184 = writer.prefix("Attribute");
    if let Some(var_5185) = &input.attribute {
        scope_5184.string(var_5185.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5186 = writer.prefix("ImageId");
    if let Some(var_5187) = &input.image_id {
        scope_5186.string(var_5187);
    }
    #[allow(unused_mut)]
    let mut scope_5188 = writer.prefix("DryRun");
    if let Some(var_5189) = &input.dry_run {
        scope_5188.boolean(*var_5189);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5190 = writer.prefix("Attribute");
    if let Some(var_5191) = &input.attribute {
        scope_5190.string(var_5191.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("DryRun");
    if let Some(var_5193) = &input.dry_run {
        scope_5192.boolean(*var_5193);
    }
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("InstanceId");
    if let Some(var_5195) = &input.instance_id {
        scope_5194.string(var_5195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("DryRun");
    if let Some(var_5197) = &input.dry_run {
        scope_5196.boolean(*var_5197);
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5199) = &input.network_interface_id {
        scope_5198.string(var_5199);
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("SourceDestCheck");
    if let Some(var_5201) = &input.source_dest_check {
        scope_5200.string(var_5201);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("Attribute");
    if let Some(var_5203) = &input.attribute {
        scope_5202.string(var_5203.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("SnapshotId");
    if let Some(var_5205) = &input.snapshot_id {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("DryRun");
    if let Some(var_5207) = &input.dry_run {
        scope_5206.boolean(*var_5207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("DryRun");
    if let Some(var_5209) = &input.dry_run {
        scope_5208.boolean(*var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("PublicIp");
    if let Some(var_5211) = &input.public_ip {
        scope_5210.string(var_5211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("DryRun");
    if let Some(var_5213) = &input.dry_run {
        scope_5212.boolean(*var_5213);
    }
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("PrefixListId");
    if let Some(var_5215) = &input.prefix_list_id {
        scope_5214.string(var_5215);
    }
    #[allow(unused_mut)]
    let mut scope_5216 = writer.prefix("PreviousVersion");
    if let Some(var_5217) = &input.previous_version {
        scope_5216.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5218 = writer.prefix("CurrentVersion");
    if let Some(var_5219) = &input.current_version {
        scope_5218.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5219).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5220 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5221) = &input.client_vpn_endpoint_id {
        scope_5220.string(var_5221);
    }
    #[allow(unused_mut)]
    let mut scope_5222 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5223) = &input.target_network_cidr {
        scope_5222.string(var_5223);
    }
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("AccessGroupId");
    if let Some(var_5225) = &input.access_group_id {
        scope_5224.string(var_5225);
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("RevokeAllGroups");
    if let Some(var_5227) = &input.revoke_all_groups {
        scope_5226.boolean(*var_5227);
    }
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("DryRun");
    if let Some(var_5229) = &input.dry_run {
        scope_5228.boolean(*var_5229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("DryRun");
    if let Some(var_5231) = &input.dry_run {
        scope_5230.boolean(*var_5231);
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("GroupId");
    if let Some(var_5233) = &input.group_id {
        scope_5232.string(var_5233);
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("IpPermissions");
    if let Some(var_5235) = &input.ip_permissions {
        let mut list_5237 = scope_5234.start_list(true, Some("item"));
        for item_5236 in var_5235 {
            #[allow(unused_mut)]
            let mut entry_5238 = list_5237.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5238, item_5236)?;
        }
        list_5237.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5239 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5240) = &input.security_group_rule_ids {
        let mut list_5242 = scope_5239.start_list(true, Some("item"));
        for item_5241 in var_5240 {
            #[allow(unused_mut)]
            let mut entry_5243 = list_5242.entry();
            entry_5243.string(item_5241);
        }
        list_5242.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("CidrIp");
    if let Some(var_5245) = &input.cidr_ip {
        scope_5244.string(var_5245);
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("FromPort");
    if let Some(var_5247) = &input.from_port {
        scope_5246.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("IpProtocol");
    if let Some(var_5249) = &input.ip_protocol {
        scope_5248.string(var_5249);
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("ToPort");
    if let Some(var_5251) = &input.to_port {
        scope_5250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5253) = &input.source_security_group_name {
        scope_5252.string(var_5253);
    }
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5255) = &input.source_security_group_owner_id {
        scope_5254.string(var_5255);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("CidrIp");
    if let Some(var_5257) = &input.cidr_ip {
        scope_5256.string(var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("FromPort");
    if let Some(var_5259) = &input.from_port {
        scope_5258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("GroupId");
    if let Some(var_5261) = &input.group_id {
        scope_5260.string(var_5261);
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("GroupName");
    if let Some(var_5263) = &input.group_name {
        scope_5262.string(var_5263);
    }
    #[allow(unused_mut)]
    let mut scope_5264 = writer.prefix("IpPermissions");
    if let Some(var_5265) = &input.ip_permissions {
        let mut list_5267 = scope_5264.start_list(true, Some("item"));
        for item_5266 in var_5265 {
            #[allow(unused_mut)]
            let mut entry_5268 = list_5267.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5268, item_5266)?;
        }
        list_5267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("IpProtocol");
    if let Some(var_5270) = &input.ip_protocol {
        scope_5269.string(var_5270);
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5272) = &input.source_security_group_name {
        scope_5271.string(var_5272);
    }
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5274) = &input.source_security_group_owner_id {
        scope_5273.string(var_5274);
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("ToPort");
    if let Some(var_5276) = &input.to_port {
        scope_5275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5276).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("DryRun");
    if let Some(var_5278) = &input.dry_run {
        scope_5277.boolean(*var_5278);
    }
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5280) = &input.security_group_rule_ids {
        let mut list_5282 = scope_5279.start_list(true, Some("item"));
        for item_5281 in var_5280 {
            #[allow(unused_mut)]
            let mut entry_5283 = list_5282.entry();
            entry_5283.string(item_5281);
        }
        list_5282.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5284 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5285) = &input.block_device_mappings {
        let mut list_5287 = scope_5284.start_list(true, Some("BlockDeviceMapping"));
        for item_5286 in var_5285 {
            #[allow(unused_mut)]
            let mut entry_5288 = list_5287.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5288, item_5286,
            )?;
        }
        list_5287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("ImageId");
    if let Some(var_5290) = &input.image_id {
        scope_5289.string(var_5290);
    }
    #[allow(unused_mut)]
    let mut scope_5291 = writer.prefix("InstanceType");
    if let Some(var_5292) = &input.instance_type {
        scope_5291.string(var_5292.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5293 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5294) = &input.ipv6_address_count {
        scope_5293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5295 = writer.prefix("Ipv6Address");
    if let Some(var_5296) = &input.ipv6_addresses {
        let mut list_5298 = scope_5295.start_list(true, Some("item"));
        for item_5297 in var_5296 {
            #[allow(unused_mut)]
            let mut entry_5299 = list_5298.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5299, item_5297,
            )?;
        }
        list_5298.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("KernelId");
    if let Some(var_5301) = &input.kernel_id {
        scope_5300.string(var_5301);
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("KeyName");
    if let Some(var_5303) = &input.key_name {
        scope_5302.string(var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("MaxCount");
    if let Some(var_5305) = &input.max_count {
        scope_5304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5305).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5306 = writer.prefix("MinCount");
    if let Some(var_5307) = &input.min_count {
        scope_5306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5307).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5308 = writer.prefix("Monitoring");
    if let Some(var_5309) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5308, var_5309,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5310 = writer.prefix("Placement");
    if let Some(var_5311) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5310, var_5311)?;
    }
    #[allow(unused_mut)]
    let mut scope_5312 = writer.prefix("RamdiskId");
    if let Some(var_5313) = &input.ramdisk_id {
        scope_5312.string(var_5313);
    }
    #[allow(unused_mut)]
    let mut scope_5314 = writer.prefix("SecurityGroupId");
    if let Some(var_5315) = &input.security_group_ids {
        let mut list_5317 = scope_5314.start_list(true, Some("SecurityGroupId"));
        for item_5316 in var_5315 {
            #[allow(unused_mut)]
            let mut entry_5318 = list_5317.entry();
            entry_5318.string(item_5316);
        }
        list_5317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("SecurityGroup");
    if let Some(var_5320) = &input.security_groups {
        let mut list_5322 = scope_5319.start_list(true, Some("SecurityGroup"));
        for item_5321 in var_5320 {
            #[allow(unused_mut)]
            let mut entry_5323 = list_5322.entry();
            entry_5323.string(item_5321);
        }
        list_5322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("SubnetId");
    if let Some(var_5325) = &input.subnet_id {
        scope_5324.string(var_5325);
    }
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("UserData");
    if let Some(var_5327) = &input.user_data {
        scope_5326.string(var_5327);
    }
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("AdditionalInfo");
    if let Some(var_5329) = &input.additional_info {
        scope_5328.string(var_5329);
    }
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("ClientToken");
    if let Some(var_5331) = &input.client_token {
        scope_5330.string(var_5331);
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("DisableApiTermination");
    if let Some(var_5333) = &input.disable_api_termination {
        scope_5332.boolean(*var_5333);
    }
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("DryRun");
    if let Some(var_5335) = &input.dry_run {
        scope_5334.boolean(*var_5335);
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("EbsOptimized");
    if let Some(var_5337) = &input.ebs_optimized {
        scope_5336.boolean(*var_5337);
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("IamInstanceProfile");
    if let Some(var_5339) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5338, var_5339,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5341) = &input.instance_initiated_shutdown_behavior {
        scope_5340.string(var_5341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("NetworkInterface");
    if let Some(var_5343) = &input.network_interfaces {
        let mut list_5345 = scope_5342.start_list(true, Some("item"));
        for item_5344 in var_5343 {
            #[allow(unused_mut)]
            let mut entry_5346 = list_5345.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5346, item_5344)?;
        }
        list_5345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5347 = writer.prefix("PrivateIpAddress");
    if let Some(var_5348) = &input.private_ip_address {
        scope_5347.string(var_5348);
    }
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5350) = &input.elastic_gpu_specification {
        let mut list_5352 = scope_5349.start_list(true, Some("item"));
        for item_5351 in var_5350 {
            #[allow(unused_mut)]
            let mut entry_5353 = list_5352.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5353, item_5351,
            )?;
        }
        list_5352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5354 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5355) = &input.elastic_inference_accelerators {
        let mut list_5357 = scope_5354.start_list(true, Some("item"));
        for item_5356 in var_5355 {
            #[allow(unused_mut)]
            let mut entry_5358 = list_5357.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5358, item_5356,
            )?;
        }
        list_5357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5359 = writer.prefix("TagSpecification");
    if let Some(var_5360) = &input.tag_specifications {
        let mut list_5362 = scope_5359.start_list(true, Some("item"));
        for item_5361 in var_5360 {
            #[allow(unused_mut)]
            let mut entry_5363 = list_5362.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5363, item_5361,
            )?;
        }
        list_5362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("LaunchTemplate");
    if let Some(var_5365) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5364, var_5365,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5366 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5367) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5366, var_5367,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5368 = writer.prefix("CreditSpecification");
    if let Some(var_5369) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5368, var_5369,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5370 = writer.prefix("CpuOptions");
    if let Some(var_5371) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5370, var_5371,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5372 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5373) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5372, var_5373,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5374 = writer.prefix("HibernationOptions");
    if let Some(var_5375) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5374, var_5375,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5376 = writer.prefix("LicenseSpecification");
    if let Some(var_5377) = &input.license_specifications {
        let mut list_5379 = scope_5376.start_list(true, Some("item"));
        for item_5378 in var_5377 {
            #[allow(unused_mut)]
            let mut entry_5380 = list_5379.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5380, item_5378,
            )?;
        }
        list_5379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("MetadataOptions");
    if let Some(var_5382) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5381, var_5382,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("EnclaveOptions");
    if let Some(var_5384) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5383, var_5384,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("ClientToken");
    if let Some(var_5386) = &input.client_token {
        scope_5385.string(var_5386);
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("DryRun");
    if let Some(var_5388) = &input.dry_run {
        scope_5387.boolean(*var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("InstanceCount");
    if let Some(var_5390) = &input.instance_count {
        scope_5389.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5390).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("LaunchSpecification");
    if let Some(var_5392) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5391, var_5392,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5394) = &input.scheduled_instance_id {
        scope_5393.string(var_5394);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5396) = &input.local_gateway_route_table_id {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("Filter");
    if let Some(var_5398) = &input.filters {
        let mut list_5400 = scope_5397.start_list(true, Some("Filter"));
        for item_5399 in var_5398 {
            #[allow(unused_mut)]
            let mut entry_5401 = list_5400.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5401, item_5399)?;
        }
        list_5400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5402 = writer.prefix("MaxResults");
    if let Some(var_5403) = &input.max_results {
        scope_5402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5404 = writer.prefix("NextToken");
    if let Some(var_5405) = &input.next_token {
        scope_5404.string(var_5405);
    }
    #[allow(unused_mut)]
    let mut scope_5406 = writer.prefix("DryRun");
    if let Some(var_5407) = &input.dry_run {
        scope_5406.boolean(*var_5407);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5408 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5409) = &input.transit_gateway_multicast_domain_id {
        scope_5408.string(var_5409);
    }
    #[allow(unused_mut)]
    let mut scope_5410 = writer.prefix("Filter");
    if let Some(var_5411) = &input.filters {
        let mut list_5413 = scope_5410.start_list(true, Some("Filter"));
        for item_5412 in var_5411 {
            #[allow(unused_mut)]
            let mut entry_5414 = list_5413.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5414, item_5412)?;
        }
        list_5413.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("MaxResults");
    if let Some(var_5416) = &input.max_results {
        scope_5415.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5416).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("NextToken");
    if let Some(var_5418) = &input.next_token {
        scope_5417.string(var_5418);
    }
    #[allow(unused_mut)]
    let mut scope_5419 = writer.prefix("DryRun");
    if let Some(var_5420) = &input.dry_run {
        scope_5419.boolean(*var_5420);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5421 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5422) = &input.transit_gateway_route_table_id {
        scope_5421.string(var_5422);
    }
    #[allow(unused_mut)]
    let mut scope_5423 = writer.prefix("Filter");
    if let Some(var_5424) = &input.filters {
        let mut list_5426 = scope_5423.start_list(true, Some("Filter"));
        for item_5425 in var_5424 {
            #[allow(unused_mut)]
            let mut entry_5427 = list_5426.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5427, item_5425)?;
        }
        list_5426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("MaxResults");
    if let Some(var_5429) = &input.max_results {
        scope_5428.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5429).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("DryRun");
    if let Some(var_5431) = &input.dry_run {
        scope_5430.boolean(*var_5431);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("InstanceId");
    if let Some(var_5433) = &input.instance_id {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("DryRun");
    if let Some(var_5435) = &input.dry_run {
        scope_5434.boolean(*var_5435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("InstanceId");
    if let Some(var_5437) = &input.instance_ids {
        let mut list_5439 = scope_5436.start_list(true, Some("InstanceId"));
        for item_5438 in var_5437 {
            #[allow(unused_mut)]
            let mut entry_5440 = list_5439.entry();
            entry_5440.string(item_5438);
        }
        list_5439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("AdditionalInfo");
    if let Some(var_5442) = &input.additional_info {
        scope_5441.string(var_5442);
    }
    #[allow(unused_mut)]
    let mut scope_5443 = writer.prefix("DryRun");
    if let Some(var_5444) = &input.dry_run {
        scope_5443.boolean(*var_5444);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5445 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5446) = &input.network_insights_path_id {
        scope_5445.string(var_5446);
    }
    #[allow(unused_mut)]
    let mut scope_5447 = writer.prefix("FilterInArn");
    if let Some(var_5448) = &input.filter_in_arns {
        let mut list_5450 = scope_5447.start_list(true, Some("item"));
        for item_5449 in var_5448 {
            #[allow(unused_mut)]
            let mut entry_5451 = list_5450.entry();
            entry_5451.string(item_5449);
        }
        list_5450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5452 = writer.prefix("DryRun");
    if let Some(var_5453) = &input.dry_run {
        scope_5452.boolean(*var_5453);
    }
    #[allow(unused_mut)]
    let mut scope_5454 = writer.prefix("TagSpecification");
    if let Some(var_5455) = &input.tag_specifications {
        let mut list_5457 = scope_5454.start_list(true, Some("item"));
        for item_5456 in var_5455 {
            #[allow(unused_mut)]
            let mut entry_5458 = list_5457.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5458, item_5456,
            )?;
        }
        list_5457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("ClientToken");
    if let Some(var_5460) = &input.client_token {
        scope_5459.string(var_5460);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("DryRun");
    if let Some(var_5462) = &input.dry_run {
        scope_5461.boolean(*var_5462);
    }
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("ServiceId");
    if let Some(var_5464) = &input.service_id {
        scope_5463.string(var_5464);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("InstanceId");
    if let Some(var_5466) = &input.instance_ids {
        let mut list_5468 = scope_5465.start_list(true, Some("InstanceId"));
        for item_5467 in var_5466 {
            #[allow(unused_mut)]
            let mut entry_5469 = list_5468.entry();
            entry_5469.string(item_5467);
        }
        list_5468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5470 = writer.prefix("Hibernate");
    if let Some(var_5471) = &input.hibernate {
        scope_5470.boolean(*var_5471);
    }
    #[allow(unused_mut)]
    let mut scope_5472 = writer.prefix("DryRun");
    if let Some(var_5473) = &input.dry_run {
        scope_5472.boolean(*var_5473);
    }
    #[allow(unused_mut)]
    let mut scope_5474 = writer.prefix("Force");
    if let Some(var_5475) = &input.force {
        scope_5474.boolean(*var_5475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5476 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5477) = &input.client_vpn_endpoint_id {
        scope_5476.string(var_5477);
    }
    #[allow(unused_mut)]
    let mut scope_5478 = writer.prefix("ConnectionId");
    if let Some(var_5479) = &input.connection_id {
        scope_5478.string(var_5479);
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("Username");
    if let Some(var_5481) = &input.username {
        scope_5480.string(var_5481);
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("DryRun");
    if let Some(var_5483) = &input.dry_run {
        scope_5482.boolean(*var_5483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5484 = writer.prefix("InstanceId");
    if let Some(var_5485) = &input.instance_ids {
        let mut list_5487 = scope_5484.start_list(true, Some("InstanceId"));
        for item_5486 in var_5485 {
            #[allow(unused_mut)]
            let mut entry_5488 = list_5487.entry();
            entry_5488.string(item_5486);
        }
        list_5487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("DryRun");
    if let Some(var_5490) = &input.dry_run {
        scope_5489.boolean(*var_5490);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("Ipv6Addresses");
    if let Some(var_5492) = &input.ipv6_addresses {
        let mut list_5494 = scope_5491.start_list(true, Some("item"));
        for item_5493 in var_5492 {
            #[allow(unused_mut)]
            let mut entry_5495 = list_5494.entry();
            entry_5495.string(item_5493);
        }
        list_5494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5496 = writer.prefix("Ipv6Prefix");
    if let Some(var_5497) = &input.ipv6_prefixes {
        let mut list_5499 = scope_5496.start_list(true, Some("item"));
        for item_5498 in var_5497 {
            #[allow(unused_mut)]
            let mut entry_5500 = list_5499.entry();
            entry_5500.string(item_5498);
        }
        list_5499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5502) = &input.network_interface_id {
        scope_5501.string(var_5502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5503 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5504) = &input.network_interface_id {
        scope_5503.string(var_5504);
    }
    #[allow(unused_mut)]
    let mut scope_5505 = writer.prefix("PrivateIpAddress");
    if let Some(var_5506) = &input.private_ip_addresses {
        let mut list_5508 = scope_5505.start_list(true, Some("PrivateIpAddress"));
        for item_5507 in var_5506 {
            #[allow(unused_mut)]
            let mut entry_5509 = list_5508.entry();
            entry_5509.string(item_5507);
        }
        list_5508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5510 = writer.prefix("Ipv4Prefix");
    if let Some(var_5511) = &input.ipv4_prefixes {
        let mut list_5513 = scope_5510.start_list(true, Some("item"));
        for item_5512 in var_5511 {
            #[allow(unused_mut)]
            let mut entry_5514 = list_5513.entry();
            entry_5514.string(item_5512);
        }
        list_5513.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("InstanceId");
    if let Some(var_5516) = &input.instance_ids {
        let mut list_5518 = scope_5515.start_list(true, Some("InstanceId"));
        for item_5517 in var_5516 {
            #[allow(unused_mut)]
            let mut entry_5519 = list_5518.entry();
            entry_5519.string(item_5517);
        }
        list_5518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5520 = writer.prefix("DryRun");
    if let Some(var_5521) = &input.dry_run {
        scope_5520.boolean(*var_5521);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("DryRun");
    if let Some(var_5523) = &input.dry_run {
        scope_5522.boolean(*var_5523);
    }
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("GroupId");
    if let Some(var_5525) = &input.group_id {
        scope_5524.string(var_5525);
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("GroupName");
    if let Some(var_5527) = &input.group_name {
        scope_5526.string(var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("IpPermissions");
    if let Some(var_5529) = &input.ip_permissions {
        let mut list_5531 = scope_5528.start_list(true, Some("item"));
        for item_5530 in var_5529 {
            #[allow(unused_mut)]
            let mut entry_5532 = list_5531.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5532, item_5530)?;
        }
        list_5531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5533 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5534) = &input.security_group_rule_descriptions {
        let mut list_5536 = scope_5533.start_list(true, Some("item"));
        for item_5535 in var_5534 {
            #[allow(unused_mut)]
            let mut entry_5537 = list_5536.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5537, item_5535,
            )?;
        }
        list_5536.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("DryRun");
    if let Some(var_5539) = &input.dry_run {
        scope_5538.boolean(*var_5539);
    }
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("GroupId");
    if let Some(var_5541) = &input.group_id {
        scope_5540.string(var_5541);
    }
    #[allow(unused_mut)]
    let mut scope_5542 = writer.prefix("GroupName");
    if let Some(var_5543) = &input.group_name {
        scope_5542.string(var_5543);
    }
    #[allow(unused_mut)]
    let mut scope_5544 = writer.prefix("IpPermissions");
    if let Some(var_5545) = &input.ip_permissions {
        let mut list_5547 = scope_5544.start_list(true, Some("item"));
        for item_5546 in var_5545 {
            #[allow(unused_mut)]
            let mut entry_5548 = list_5547.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5548, item_5546)?;
        }
        list_5547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_5550) = &input.security_group_rule_descriptions {
        let mut list_5552 = scope_5549.start_list(true, Some("item"));
        for item_5551 in var_5550 {
            #[allow(unused_mut)]
            let mut entry_5553 = list_5552.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_5553, item_5551,
            )?;
        }
        list_5552.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5554 = writer.prefix("Cidr");
    if let Some(var_5555) = &input.cidr {
        scope_5554.string(var_5555);
    }
    #[allow(unused_mut)]
    let mut scope_5556 = writer.prefix("DryRun");
    if let Some(var_5557) = &input.dry_run {
        scope_5556.boolean(*var_5557);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
