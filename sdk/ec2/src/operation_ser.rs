// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("DryRun");
    if let Some(var_86) = &input.dry_run {
        scope_85.boolean(*var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("IpamPoolId");
    if let Some(var_88) = &input.ipam_pool_id {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Cidr");
    if let Some(var_90) = &input.cidr {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("NetmaskLength");
    if let Some(var_92) = &input.netmask_length {
        scope_91.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("ClientToken");
    if let Some(var_94) = &input.client_token {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Description");
    if let Some(var_96) = &input.description {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("PreviewNextCidr");
    if let Some(var_98) = &input.preview_next_cidr {
        scope_97.boolean(*var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("DisallowedCidr");
    if let Some(var_100) = &input.disallowed_cidrs {
        let mut list_102 = scope_99.start_list(true, Some("item"));
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            entry_103.string(item_101);
        }
        list_102.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_105) = &input.client_vpn_endpoint_id {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("VpcId");
    if let Some(var_107) = &input.vpc_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SecurityGroupId");
    if let Some(var_109) = &input.security_group_ids {
        let mut list_111 = scope_108.start_list(true, Some("item"));
        for item_110 in var_109 {
            #[allow(unused_mut)]
            let mut entry_112 = list_111.entry();
            entry_112.string(item_110);
        }
        list_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("DryRun");
    if let Some(var_114) = &input.dry_run {
        scope_113.boolean(*var_114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("Ipv6AddressCount");
    if let Some(var_116) = &input.ipv6_address_count {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6Addresses");
    if let Some(var_118) = &input.ipv6_addresses {
        let mut list_120 = scope_117.start_list(true, Some("item"));
        for item_119 in var_118 {
            #[allow(unused_mut)]
            let mut entry_121 = list_120.entry();
            entry_121.string(item_119);
        }
        list_120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_123) = &input.ipv6_prefix_count {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6Prefix");
    if let Some(var_125) = &input.ipv6_prefixes {
        let mut list_127 = scope_124.start_list(true, Some("item"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            entry_128.string(item_126);
        }
        list_127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_130) = &input.network_interface_id {
        scope_129.string(var_130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("AllowReassignment");
    if let Some(var_132) = &input.allow_reassignment {
        scope_131.boolean(*var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("NetworkInterfaceId");
    if let Some(var_134) = &input.network_interface_id {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PrivateIpAddress");
    if let Some(var_136) = &input.private_ip_addresses {
        let mut list_138 = scope_135.start_list(true, Some("PrivateIpAddress"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_141) = &input.secondary_private_ip_address_count {
        scope_140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Ipv4Prefix");
    if let Some(var_143) = &input.ipv4_prefixes {
        let mut list_145 = scope_142.start_list(true, Some("item"));
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            entry_146.string(item_144);
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_148) = &input.ipv4_prefix_count {
        scope_147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AllocationId");
    if let Some(var_150) = &input.allocation_id {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("InstanceId");
    if let Some(var_152) = &input.instance_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("PublicIp");
    if let Some(var_154) = &input.public_ip {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AllowReassociation");
    if let Some(var_156) = &input.allow_reassociation {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DryRun");
    if let Some(var_158) = &input.dry_run {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NetworkInterfaceId");
    if let Some(var_160) = &input.network_interface_id {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("PrivateIpAddress");
    if let Some(var_162) = &input.private_ip_address {
        scope_161.string(var_162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_164) = &input.client_vpn_endpoint_id {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("SubnetId");
    if let Some(var_166) = &input.subnet_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("ClientToken");
    if let Some(var_168) = &input.client_token {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("DryRun");
    if let Some(var_170) = &input.dry_run {
        scope_169.boolean(*var_170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DhcpOptionsId");
    if let Some(var_172) = &input.dhcp_options_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("VpcId");
    if let Some(var_174) = &input.vpc_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DryRun");
    if let Some(var_176) = &input.dry_run {
        scope_175.boolean(*var_176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("CertificateArn");
    if let Some(var_178) = &input.certificate_arn {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("RoleArn");
    if let Some(var_180) = &input.role_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("DryRun");
    if let Some(var_182) = &input.dry_run {
        scope_181.boolean(*var_182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("IamInstanceProfile");
    if let Some(var_184) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_183, var_184,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("InstanceId");
    if let Some(var_186) = &input.instance_id {
        scope_185.string(var_186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("DryRun");
    if let Some(var_188) = &input.dry_run {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("InstanceEventWindowId");
    if let Some(var_190) = &input.instance_event_window_id {
        scope_189.string(var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("AssociationTarget");
    if let Some(var_192) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_191, var_192)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("DryRun");
    if let Some(var_194) = &input.dry_run {
        scope_193.boolean(*var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("RouteTableId");
    if let Some(var_196) = &input.route_table_id {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SubnetId");
    if let Some(var_198) = &input.subnet_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("GatewayId");
    if let Some(var_200) = &input.gateway_id {
        scope_199.string(var_200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_202) = &input.ipv6_cidr_block {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("SubnetId");
    if let Some(var_204) = &input.subnet_id {
        scope_203.string(var_204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_206) = &input.transit_gateway_multicast_domain_id {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_208) = &input.transit_gateway_attachment_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SubnetIds");
    if let Some(var_210) = &input.subnet_ids {
        let mut list_212 = scope_209.start_list(true, Some("item"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DryRun");
    if let Some(var_215) = &input.dry_run {
        scope_214.boolean(*var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_217) = &input.transit_gateway_route_table_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("DryRun");
    if let Some(var_221) = &input.dry_run {
        scope_220.boolean(*var_221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("BranchInterfaceId");
    if let Some(var_223) = &input.branch_interface_id {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("TrunkInterfaceId");
    if let Some(var_225) = &input.trunk_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("VlanId");
    if let Some(var_227) = &input.vlan_id {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("GreKey");
    if let Some(var_229) = &input.gre_key {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("ClientToken");
    if let Some(var_231) = &input.client_token {
        scope_230.string(var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("DryRun");
    if let Some(var_233) = &input.dry_run {
        scope_232.boolean(*var_233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_235) = &input.amazon_provided_ipv6_cidr_block {
        scope_234.boolean(*var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("CidrBlock");
    if let Some(var_237) = &input.cidr_block {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("VpcId");
    if let Some(var_239) = &input.vpc_id {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_241) = &input.ipv6_cidr_block_network_border_group {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6Pool");
    if let Some(var_243) = &input.ipv6_pool {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_245) = &input.ipv6_cidr_block {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_247) = &input.ipv4_ipam_pool_id {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_249) = &input.ipv4_netmask_length {
        scope_248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_251) = &input.ipv6_ipam_pool_id {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_253) = &input.ipv6_netmask_length {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("DryRun");
    if let Some(var_255) = &input.dry_run {
        scope_254.boolean(*var_255);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("SecurityGroupId");
    if let Some(var_257) = &input.groups {
        let mut list_259 = scope_256.start_list(true, Some("groupId"));
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            entry_260.string(item_258);
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceId");
    if let Some(var_262) = &input.instance_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("VpcId");
    if let Some(var_264) = &input.vpc_id {
        scope_263.string(var_264);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("DryRun");
    if let Some(var_266) = &input.dry_run {
        scope_265.boolean(*var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("InternetGatewayId");
    if let Some(var_268) = &input.internet_gateway_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("VpcId");
    if let Some(var_270) = &input.vpc_id {
        scope_269.string(var_270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DeviceIndex");
    if let Some(var_272) = &input.device_index {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DryRun");
    if let Some(var_274) = &input.dry_run {
        scope_273.boolean(*var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("InstanceId");
    if let Some(var_276) = &input.instance_id {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("NetworkInterfaceId");
    if let Some(var_278) = &input.network_interface_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkCardIndex");
    if let Some(var_280) = &input.network_card_index {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Device");
    if let Some(var_282) = &input.device {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("InstanceId");
    if let Some(var_284) = &input.instance_id {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("VolumeId");
    if let Some(var_286) = &input.volume_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DryRun");
    if let Some(var_288) = &input.dry_run {
        scope_287.boolean(*var_288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("VpcId");
    if let Some(var_290) = &input.vpc_id {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpnGatewayId");
    if let Some(var_292) = &input.vpn_gateway_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DryRun");
    if let Some(var_294) = &input.dry_run {
        scope_293.boolean(*var_294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_296) = &input.client_vpn_endpoint_id {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("TargetNetworkCidr");
    if let Some(var_298) = &input.target_network_cidr {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("AccessGroupId");
    if let Some(var_300) = &input.access_group_id {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_302) = &input.authorize_all_groups {
        scope_301.boolean(*var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Description");
    if let Some(var_304) = &input.description {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("ClientToken");
    if let Some(var_306) = &input.client_token {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("DryRun");
    if let Some(var_308) = &input.dry_run {
        scope_307.boolean(*var_308);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("GroupId");
    if let Some(var_312) = &input.group_id {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("IpPermissions");
    if let Some(var_314) = &input.ip_permissions {
        let mut list_316 = scope_313.start_list(true, Some("item"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_317, item_315)?;
        }
        list_316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("TagSpecification");
    if let Some(var_319) = &input.tag_specifications {
        let mut list_321 = scope_318.start_list(true, Some("item"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_322, item_320,
            )?;
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("CidrIp");
    if let Some(var_324) = &input.cidr_ip {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("FromPort");
    if let Some(var_326) = &input.from_port {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("IpProtocol");
    if let Some(var_328) = &input.ip_protocol {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ToPort");
    if let Some(var_330) = &input.to_port {
        scope_329.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_332) = &input.source_security_group_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_334) = &input.source_security_group_owner_id {
        scope_333.string(var_334);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CidrIp");
    if let Some(var_336) = &input.cidr_ip {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("FromPort");
    if let Some(var_338) = &input.from_port {
        scope_337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("GroupId");
    if let Some(var_340) = &input.group_id {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupName");
    if let Some(var_342) = &input.group_name {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("IpPermissions");
    if let Some(var_344) = &input.ip_permissions {
        let mut list_346 = scope_343.start_list(true, Some("item"));
        for item_345 in var_344 {
            #[allow(unused_mut)]
            let mut entry_347 = list_346.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_347, item_345)?;
        }
        list_346.finish();
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("IpProtocol");
    if let Some(var_349) = &input.ip_protocol {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_351) = &input.source_security_group_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_353) = &input.source_security_group_owner_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("ToPort");
    if let Some(var_355) = &input.to_port {
        scope_354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("DryRun");
    if let Some(var_357) = &input.dry_run {
        scope_356.boolean(*var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("TagSpecification");
    if let Some(var_359) = &input.tag_specifications {
        let mut list_361 = scope_358.start_list(true, Some("item"));
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_362, item_360,
            )?;
        }
        list_361.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("InstanceId");
    if let Some(var_364) = &input.instance_id {
        scope_363.string(var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("Storage");
    if let Some(var_366) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_365, var_366)?;
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("DryRun");
    if let Some(var_368) = &input.dry_run {
        scope_367.boolean(*var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("BundleId");
    if let Some(var_370) = &input.bundle_id {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("DryRun");
    if let Some(var_372) = &input.dry_run {
        scope_371.boolean(*var_372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("CapacityReservationId");
    if let Some(var_374) = &input.capacity_reservation_id {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("DryRun");
    if let Some(var_376) = &input.dry_run {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_380) = &input.capacity_reservation_fleet_ids {
        let mut list_382 = scope_379.start_list(true, Some("item"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            entry_383.string(item_381);
        }
        list_382.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("ConversionTaskId");
    if let Some(var_385) = &input.conversion_task_id {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("DryRun");
    if let Some(var_387) = &input.dry_run {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("ReasonMessage");
    if let Some(var_389) = &input.reason_message {
        scope_388.string(var_389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ExportTaskId");
    if let Some(var_391) = &input.export_task_id {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("CancelReason");
    if let Some(var_393) = &input.cancel_reason {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("ImportTaskId");
    if let Some(var_397) = &input.import_task_id {
        scope_396.string(var_397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_399) = &input.reserved_instances_listing_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DryRun");
    if let Some(var_401) = &input.dry_run {
        scope_400.boolean(*var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SpotFleetRequestId");
    if let Some(var_403) = &input.spot_fleet_request_ids {
        let mut list_405 = scope_402.start_list(true, Some("item"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("TerminateInstances");
    if let Some(var_408) = &input.terminate_instances {
        scope_407.boolean(*var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("DryRun");
    if let Some(var_410) = &input.dry_run {
        scope_409.boolean(*var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_412) = &input.spot_instance_request_ids {
        let mut list_414 = scope_411.start_list(true, Some("SpotInstanceRequestId"));
        for item_413 in var_412 {
            #[allow(unused_mut)]
            let mut entry_415 = list_414.entry();
            entry_415.string(item_413);
        }
        list_414.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("InstanceId");
    if let Some(var_417) = &input.instance_id {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("ProductCode");
    if let Some(var_419) = &input.product_code {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("DryRun");
    if let Some(var_421) = &input.dry_run {
        scope_420.boolean(*var_421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("SourceFpgaImageId");
    if let Some(var_425) = &input.source_fpga_image_id {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("Description");
    if let Some(var_427) = &input.description {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Name");
    if let Some(var_429) = &input.name {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("SourceRegion");
    if let Some(var_431) = &input.source_region {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("ClientToken");
    if let Some(var_433) = &input.client_token {
        scope_432.string(var_433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Description");
    if let Some(var_437) = &input.description {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Encrypted");
    if let Some(var_439) = &input.encrypted {
        scope_438.boolean(*var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("KmsKeyId");
    if let Some(var_441) = &input.kms_key_id {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("Name");
    if let Some(var_443) = &input.name {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("SourceImageId");
    if let Some(var_445) = &input.source_image_id {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceRegion");
    if let Some(var_447) = &input.source_region {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("DestinationOutpostArn");
    if let Some(var_449) = &input.destination_outpost_arn {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DryRun");
    if let Some(var_451) = &input.dry_run {
        scope_450.boolean(*var_451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Description");
    if let Some(var_453) = &input.description {
        scope_452.string(var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("DestinationOutpostArn");
    if let Some(var_455) = &input.destination_outpost_arn {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationRegion");
    if let Some(var_457) = &input.destination_region {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("Encrypted");
    if let Some(var_459) = &input.encrypted {
        scope_458.boolean(*var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("KmsKeyId");
    if let Some(var_461) = &input.kms_key_id {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("PresignedUrl");
    if let Some(var_463) = &input.presigned_url {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("SourceRegion");
    if let Some(var_465) = &input.source_region {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceSnapshotId");
    if let Some(var_467) = &input.source_snapshot_id {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("TagSpecification");
    if let Some(var_469) = &input.tag_specifications {
        let mut list_471 = scope_468.start_list(true, Some("item"));
        for item_470 in var_469 {
            #[allow(unused_mut)]
            let mut entry_472 = list_471.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_472, item_470,
            )?;
        }
        list_471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("DryRun");
    if let Some(var_474) = &input.dry_run {
        scope_473.boolean(*var_474);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ClientToken");
    if let Some(var_476) = &input.client_token {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("InstanceType");
    if let Some(var_478) = &input.instance_type {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstancePlatform");
    if let Some(var_480) = &input.instance_platform {
        scope_479.string(var_480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AvailabilityZone");
    if let Some(var_482) = &input.availability_zone {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZoneId");
    if let Some(var_484) = &input.availability_zone_id {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Tenancy");
    if let Some(var_486) = &input.tenancy {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstanceCount");
    if let Some(var_488) = &input.instance_count {
        scope_487.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("EbsOptimized");
    if let Some(var_490) = &input.ebs_optimized {
        scope_489.boolean(*var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EphemeralStorage");
    if let Some(var_492) = &input.ephemeral_storage {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EndDate");
    if let Some(var_494) = &input.end_date {
        scope_493.date_time(var_494, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDateType");
    if let Some(var_496) = &input.end_date_type {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_498) = &input.instance_match_criteria {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("TagSpecifications");
    if let Some(var_500) = &input.tag_specifications {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_503, item_501,
            )?;
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("DryRun");
    if let Some(var_505) = &input.dry_run {
        scope_504.boolean(*var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("OutpostArn");
    if let Some(var_507) = &input.outpost_arn {
        scope_506.string(var_507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("AllocationStrategy");
    if let Some(var_509) = &input.allocation_strategy {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("ClientToken");
    if let Some(var_511) = &input.client_token {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_513) = &input.instance_type_specifications {
        let mut list_515 = scope_512.start_list(true, None);
        for item_514 in var_513 {
            #[allow(unused_mut)]
            let mut entry_516 = list_515.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_516, item_514)?;
        }
        list_515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("Tenancy");
    if let Some(var_518) = &input.tenancy {
        scope_517.string(var_518.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("TotalTargetCapacity");
    if let Some(var_520) = &input.total_target_capacity {
        scope_519.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("EndDate");
    if let Some(var_522) = &input.end_date {
        scope_521.date_time(var_522, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_524) = &input.instance_match_criteria {
        scope_523.string(var_524.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("TagSpecification");
    if let Some(var_526) = &input.tag_specifications {
        let mut list_528 = scope_525.start_list(true, Some("item"));
        for item_527 in var_526 {
            #[allow(unused_mut)]
            let mut entry_529 = list_528.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_529, item_527,
            )?;
        }
        list_528.finish();
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("DryRun");
    if let Some(var_531) = &input.dry_run {
        scope_530.boolean(*var_531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("VpcId");
    if let Some(var_533) = &input.vpc_id {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("TagSpecification");
    if let Some(var_535) = &input.tag_specifications {
        let mut list_537 = scope_534.start_list(true, Some("item"));
        for item_536 in var_535 {
            #[allow(unused_mut)]
            let mut entry_538 = list_537.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_538, item_536,
            )?;
        }
        list_537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("DryRun");
    if let Some(var_540) = &input.dry_run {
        scope_539.boolean(*var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("ClientToken");
    if let Some(var_542) = &input.client_token {
        scope_541.string(var_542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("ClientCidrBlock");
    if let Some(var_544) = &input.client_cidr_block {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ServerCertificateArn");
    if let Some(var_546) = &input.server_certificate_arn {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Authentication");
    if let Some(var_548) = &input.authentication_options {
        let mut list_550 = scope_547.start_list(true, None);
        for item_549 in var_548 {
            #[allow(unused_mut)]
            let mut entry_551 = list_550.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_551, item_549,
            )?;
        }
        list_550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("ConnectionLogOptions");
    if let Some(var_553) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_552, var_553,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("DnsServers");
    if let Some(var_555) = &input.dns_servers {
        let mut list_557 = scope_554.start_list(true, Some("item"));
        for item_556 in var_555 {
            #[allow(unused_mut)]
            let mut entry_558 = list_557.entry();
            entry_558.string(item_556);
        }
        list_557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("TransportProtocol");
    if let Some(var_560) = &input.transport_protocol {
        scope_559.string(var_560.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("VpnPort");
    if let Some(var_562) = &input.vpn_port {
        scope_561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("Description");
    if let Some(var_564) = &input.description {
        scope_563.string(var_564);
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("SplitTunnel");
    if let Some(var_566) = &input.split_tunnel {
        scope_565.boolean(*var_566);
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("DryRun");
    if let Some(var_568) = &input.dry_run {
        scope_567.boolean(*var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("ClientToken");
    if let Some(var_570) = &input.client_token {
        scope_569.string(var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("TagSpecification");
    if let Some(var_572) = &input.tag_specifications {
        let mut list_574 = scope_571.start_list(true, Some("item"));
        for item_573 in var_572 {
            #[allow(unused_mut)]
            let mut entry_575 = list_574.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_575, item_573,
            )?;
        }
        list_574.finish();
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("SecurityGroupId");
    if let Some(var_577) = &input.security_group_ids {
        let mut list_579 = scope_576.start_list(true, Some("item"));
        for item_578 in var_577 {
            #[allow(unused_mut)]
            let mut entry_580 = list_579.entry();
            entry_580.string(item_578);
        }
        list_579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("VpcId");
    if let Some(var_582) = &input.vpc_id {
        scope_581.string(var_582);
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("SelfServicePortal");
    if let Some(var_584) = &input.self_service_portal {
        scope_583.string(var_584.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("ClientConnectOptions");
    if let Some(var_586) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_585, var_586,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_588) = &input.client_vpn_endpoint_id {
        scope_587.string(var_588);
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("DestinationCidrBlock");
    if let Some(var_590) = &input.destination_cidr_block {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_592) = &input.target_vpc_subnet_id {
        scope_591.string(var_592);
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("Description");
    if let Some(var_594) = &input.description {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientToken");
    if let Some(var_596) = &input.client_token {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DryRun");
    if let Some(var_598) = &input.dry_run {
        scope_597.boolean(*var_598);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("BgpAsn");
    if let Some(var_600) = &input.bgp_asn {
        scope_599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("IpAddress");
    if let Some(var_602) = &input.public_ip {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("CertificateArn");
    if let Some(var_604) = &input.certificate_arn {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("Type");
    if let Some(var_606) = &input.r#type {
        scope_605.string(var_606.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("TagSpecification");
    if let Some(var_608) = &input.tag_specifications {
        let mut list_610 = scope_607.start_list(true, Some("item"));
        for item_609 in var_608 {
            #[allow(unused_mut)]
            let mut entry_611 = list_610.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_611, item_609,
            )?;
        }
        list_610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("DeviceName");
    if let Some(var_613) = &input.device_name {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("DryRun");
    if let Some(var_615) = &input.dry_run {
        scope_614.boolean(*var_615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("AvailabilityZone");
    if let Some(var_617) = &input.availability_zone {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("DryRun");
    if let Some(var_619) = &input.dry_run {
        scope_618.boolean(*var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("Ipv6Native");
    if let Some(var_621) = &input.ipv6_native {
        scope_620.boolean(*var_621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("DryRun");
    if let Some(var_623) = &input.dry_run {
        scope_622.boolean(*var_623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DhcpConfiguration");
    if let Some(var_625) = &input.dhcp_configurations {
        let mut list_627 = scope_624.start_list(true, Some("item"));
        for item_626 in var_625 {
            #[allow(unused_mut)]
            let mut entry_628 = list_627.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_628, item_626,
            )?;
        }
        list_627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("TagSpecification");
    if let Some(var_630) = &input.tag_specifications {
        let mut list_632 = scope_629.start_list(true, Some("item"));
        for item_631 in var_630 {
            #[allow(unused_mut)]
            let mut entry_633 = list_632.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_633, item_631,
            )?;
        }
        list_632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("DryRun");
    if let Some(var_635) = &input.dry_run {
        scope_634.boolean(*var_635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_636 = writer.prefix("ClientToken");
    if let Some(var_637) = &input.client_token {
        scope_636.string(var_637);
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("DryRun");
    if let Some(var_639) = &input.dry_run {
        scope_638.boolean(*var_639);
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("VpcId");
    if let Some(var_641) = &input.vpc_id {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("TagSpecification");
    if let Some(var_643) = &input.tag_specifications {
        let mut list_645 = scope_642.start_list(true, Some("item"));
        for item_644 in var_643 {
            #[allow(unused_mut)]
            let mut entry_646 = list_645.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_646, item_644,
            )?;
        }
        list_645.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("DryRun");
    if let Some(var_648) = &input.dry_run {
        scope_647.boolean(*var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("ClientToken");
    if let Some(var_650) = &input.client_token {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("SpotOptions");
    if let Some(var_652) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_651, var_652)?;
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("OnDemandOptions");
    if let Some(var_654) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_653, var_654,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_656) = &input.excess_capacity_termination_policy {
        scope_655.string(var_656.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_658) = &input.launch_template_configs {
        let mut list_660 = scope_657.start_list(true, Some("item"));
        for item_659 in var_658 {
            #[allow(unused_mut)]
            let mut entry_661 = list_660.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_661, item_659,
            )?;
        }
        list_660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_663) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_662, var_663,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_665) = &input.terminate_instances_with_expiration {
        scope_664.boolean(*var_665);
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("Type");
    if let Some(var_667) = &input.r#type {
        scope_666.string(var_667.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("ValidFrom");
    if let Some(var_669) = &input.valid_from {
        scope_668.date_time(var_669, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("ValidUntil");
    if let Some(var_671) = &input.valid_until {
        scope_670.date_time(var_671, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_673) = &input.replace_unhealthy_instances {
        scope_672.boolean(*var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("TagSpecification");
    if let Some(var_675) = &input.tag_specifications {
        let mut list_677 = scope_674.start_list(true, Some("item"));
        for item_676 in var_675 {
            #[allow(unused_mut)]
            let mut entry_678 = list_677.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_678, item_676,
            )?;
        }
        list_677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("Context");
    if let Some(var_680) = &input.context {
        scope_679.string(var_680);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("DryRun");
    if let Some(var_682) = &input.dry_run {
        scope_681.boolean(*var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("ClientToken");
    if let Some(var_684) = &input.client_token {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_686) = &input.deliver_logs_permission_arn {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("LogGroupName");
    if let Some(var_688) = &input.log_group_name {
        scope_687.string(var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("ResourceId");
    if let Some(var_690) = &input.resource_ids {
        let mut list_692 = scope_689.start_list(true, Some("item"));
        for item_691 in var_690 {
            #[allow(unused_mut)]
            let mut entry_693 = list_692.entry();
            entry_693.string(item_691);
        }
        list_692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("ResourceType");
    if let Some(var_695) = &input.resource_type {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("TrafficType");
    if let Some(var_697) = &input.traffic_type {
        scope_696.string(var_697.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("LogDestinationType");
    if let Some(var_699) = &input.log_destination_type {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("LogDestination");
    if let Some(var_701) = &input.log_destination {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("LogFormat");
    if let Some(var_703) = &input.log_format {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("TagSpecification");
    if let Some(var_705) = &input.tag_specifications {
        let mut list_707 = scope_704.start_list(true, Some("item"));
        for item_706 in var_705 {
            #[allow(unused_mut)]
            let mut entry_708 = list_707.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_708, item_706,
            )?;
        }
        list_707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_709 = writer.prefix("MaxAggregationInterval");
    if let Some(var_710) = &input.max_aggregation_interval {
        scope_709.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_710).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("DestinationOptions");
    if let Some(var_712) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_711, var_712,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("DryRun");
    if let Some(var_714) = &input.dry_run {
        scope_713.boolean(*var_714);
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("InputStorageLocation");
    if let Some(var_716) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_715, var_716)?;
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("LogsStorageLocation");
    if let Some(var_718) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_717, var_718)?;
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("Description");
    if let Some(var_720) = &input.description {
        scope_719.string(var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("Name");
    if let Some(var_722) = &input.name {
        scope_721.string(var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("ClientToken");
    if let Some(var_724) = &input.client_token {
        scope_723.string(var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("TagSpecification");
    if let Some(var_726) = &input.tag_specifications {
        let mut list_728 = scope_725.start_list(true, Some("item"));
        for item_727 in var_726 {
            #[allow(unused_mut)]
            let mut entry_729 = list_728.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_729, item_727,
            )?;
        }
        list_728.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("BlockDeviceMapping");
    if let Some(var_731) = &input.block_device_mappings {
        let mut list_733 = scope_730.start_list(true, Some("BlockDeviceMapping"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_734, item_732,
            )?;
        }
        list_733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("Description");
    if let Some(var_736) = &input.description {
        scope_735.string(var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("DryRun");
    if let Some(var_738) = &input.dry_run {
        scope_737.boolean(*var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("InstanceId");
    if let Some(var_740) = &input.instance_id {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Name");
    if let Some(var_742) = &input.name {
        scope_741.string(var_742);
    }
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("NoReboot");
    if let Some(var_744) = &input.no_reboot {
        scope_743.boolean(*var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("TagSpecification");
    if let Some(var_746) = &input.tag_specifications {
        let mut list_748 = scope_745.start_list(true, Some("item"));
        for item_747 in var_746 {
            #[allow(unused_mut)]
            let mut entry_749 = list_748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_749, item_747,
            )?;
        }
        list_748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("DryRun");
    if let Some(var_751) = &input.dry_run {
        scope_750.boolean(*var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("Name");
    if let Some(var_753) = &input.name {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("TimeRange");
    if let Some(var_755) = &input.time_ranges {
        let mut list_757 = scope_754.start_list(true, None);
        for item_756 in var_755 {
            #[allow(unused_mut)]
            let mut entry_758 = list_757.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_758, item_756)?;
        }
        list_757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("CronExpression");
    if let Some(var_760) = &input.cron_expression {
        scope_759.string(var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("TagSpecification");
    if let Some(var_762) = &input.tag_specifications {
        let mut list_764 = scope_761.start_list(true, Some("item"));
        for item_763 in var_762 {
            #[allow(unused_mut)]
            let mut entry_765 = list_764.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_765, item_763,
            )?;
        }
        list_764.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("Description");
    if let Some(var_767) = &input.description {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("ExportToS3");
    if let Some(var_769) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_768, var_769,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("InstanceId");
    if let Some(var_771) = &input.instance_id {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("TargetEnvironment");
    if let Some(var_773) = &input.target_environment {
        scope_772.string(var_773.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("TagSpecification");
    if let Some(var_775) = &input.tag_specifications {
        let mut list_777 = scope_774.start_list(true, Some("item"));
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_778, item_776,
            )?;
        }
        list_777.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("TagSpecification");
    if let Some(var_780) = &input.tag_specifications {
        let mut list_782 = scope_779.start_list(true, Some("item"));
        for item_781 in var_780 {
            #[allow(unused_mut)]
            let mut entry_783 = list_782.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_783, item_781,
            )?;
        }
        list_782.finish();
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("DryRun");
    if let Some(var_785) = &input.dry_run {
        scope_784.boolean(*var_785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("DryRun");
    if let Some(var_787) = &input.dry_run {
        scope_786.boolean(*var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("Description");
    if let Some(var_789) = &input.description {
        scope_788.string(var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("OperatingRegion");
    if let Some(var_791) = &input.operating_regions {
        let mut list_793 = scope_790.start_list(true, None);
        for item_792 in var_791 {
            #[allow(unused_mut)]
            let mut entry_794 = list_793.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_794, item_792,
            )?;
        }
        list_793.finish();
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("TagSpecification");
    if let Some(var_796) = &input.tag_specifications {
        let mut list_798 = scope_795.start_list(true, Some("item"));
        for item_797 in var_796 {
            #[allow(unused_mut)]
            let mut entry_799 = list_798.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_799, item_797,
            )?;
        }
        list_798.finish();
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("ClientToken");
    if let Some(var_801) = &input.client_token {
        scope_800.string(var_801);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("DryRun");
    if let Some(var_803) = &input.dry_run {
        scope_802.boolean(*var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("IpamScopeId");
    if let Some(var_805) = &input.ipam_scope_id {
        scope_804.string(var_805);
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("Locale");
    if let Some(var_807) = &input.locale {
        scope_806.string(var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("SourceIpamPoolId");
    if let Some(var_809) = &input.source_ipam_pool_id {
        scope_808.string(var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("Description");
    if let Some(var_811) = &input.description {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("AddressFamily");
    if let Some(var_813) = &input.address_family {
        scope_812.string(var_813.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("AutoImport");
    if let Some(var_815) = &input.auto_import {
        scope_814.boolean(*var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_817) = &input.publicly_advertisable {
        scope_816.boolean(*var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_819) = &input.allocation_min_netmask_length {
        scope_818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_821) = &input.allocation_max_netmask_length {
        scope_820.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_821).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_823) = &input.allocation_default_netmask_length {
        scope_822.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_823).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AllocationResourceTag");
    if let Some(var_825) = &input.allocation_resource_tags {
        let mut list_827 = scope_824.start_list(true, Some("item"));
        for item_826 in var_825 {
            #[allow(unused_mut)]
            let mut entry_828 = list_827.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_828, item_826,
            )?;
        }
        list_827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("TagSpecification");
    if let Some(var_830) = &input.tag_specifications {
        let mut list_832 = scope_829.start_list(true, Some("item"));
        for item_831 in var_830 {
            #[allow(unused_mut)]
            let mut entry_833 = list_832.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_833, item_831,
            )?;
        }
        list_832.finish();
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ClientToken");
    if let Some(var_835) = &input.client_token {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("AwsService");
    if let Some(var_837) = &input.aws_service {
        scope_836.string(var_837.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("DryRun");
    if let Some(var_839) = &input.dry_run {
        scope_838.boolean(*var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("IpamId");
    if let Some(var_841) = &input.ipam_id {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Description");
    if let Some(var_843) = &input.description {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("TagSpecification");
    if let Some(var_845) = &input.tag_specifications {
        let mut list_847 = scope_844.start_list(true, Some("item"));
        for item_846 in var_845 {
            #[allow(unused_mut)]
            let mut entry_848 = list_847.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_848, item_846,
            )?;
        }
        list_847.finish();
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("ClientToken");
    if let Some(var_850) = &input.client_token {
        scope_849.string(var_850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("KeyName");
    if let Some(var_852) = &input.key_name {
        scope_851.string(var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("DryRun");
    if let Some(var_854) = &input.dry_run {
        scope_853.boolean(*var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("KeyType");
    if let Some(var_856) = &input.key_type {
        scope_855.string(var_856.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("TagSpecification");
    if let Some(var_858) = &input.tag_specifications {
        let mut list_860 = scope_857.start_list(true, Some("item"));
        for item_859 in var_858 {
            #[allow(unused_mut)]
            let mut entry_861 = list_860.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_861, item_859,
            )?;
        }
        list_860.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("DryRun");
    if let Some(var_863) = &input.dry_run {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("ClientToken");
    if let Some(var_865) = &input.client_token {
        scope_864.string(var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("LaunchTemplateName");
    if let Some(var_867) = &input.launch_template_name {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("VersionDescription");
    if let Some(var_869) = &input.version_description {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("LaunchTemplateData");
    if let Some(var_871) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_870, var_871,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("TagSpecification");
    if let Some(var_873) = &input.tag_specifications {
        let mut list_875 = scope_872.start_list(true, Some("item"));
        for item_874 in var_873 {
            #[allow(unused_mut)]
            let mut entry_876 = list_875.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_876, item_874,
            )?;
        }
        list_875.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("DryRun");
    if let Some(var_878) = &input.dry_run {
        scope_877.boolean(*var_878);
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("ClientToken");
    if let Some(var_880) = &input.client_token {
        scope_879.string(var_880);
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("LaunchTemplateId");
    if let Some(var_882) = &input.launch_template_id {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("LaunchTemplateName");
    if let Some(var_884) = &input.launch_template_name {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("SourceVersion");
    if let Some(var_886) = &input.source_version {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("VersionDescription");
    if let Some(var_888) = &input.version_description {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("LaunchTemplateData");
    if let Some(var_890) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_889, var_890,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("DestinationCidrBlock");
    if let Some(var_892) = &input.destination_cidr_block {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_894) = &input.local_gateway_route_table_id {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_896) = &input.local_gateway_virtual_interface_group_id {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("DryRun");
    if let Some(var_898) = &input.dry_run {
        scope_897.boolean(*var_898);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_900) = &input.local_gateway_route_table_id {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("VpcId");
    if let Some(var_902) = &input.vpc_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("TagSpecification");
    if let Some(var_904) = &input.tag_specifications {
        let mut list_906 = scope_903.start_list(true, Some("item"));
        for item_905 in var_904 {
            #[allow(unused_mut)]
            let mut entry_907 = list_906.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_907, item_905,
            )?;
        }
        list_906.finish();
    }
    #[allow(unused_mut)]
    let mut scope_908 = writer.prefix("DryRun");
    if let Some(var_909) = &input.dry_run {
        scope_908.boolean(*var_909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_910 = writer.prefix("DryRun");
    if let Some(var_911) = &input.dry_run {
        scope_910.boolean(*var_911);
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("PrefixListName");
    if let Some(var_913) = &input.prefix_list_name {
        scope_912.string(var_913);
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("Entry");
    if let Some(var_915) = &input.entries {
        let mut list_917 = scope_914.start_list(true, None);
        for item_916 in var_915 {
            #[allow(unused_mut)]
            let mut entry_918 = list_917.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_918, item_916,
            )?;
        }
        list_917.finish();
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("MaxEntries");
    if let Some(var_920) = &input.max_entries {
        scope_919.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_920).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("TagSpecification");
    if let Some(var_922) = &input.tag_specifications {
        let mut list_924 = scope_921.start_list(true, Some("item"));
        for item_923 in var_922 {
            #[allow(unused_mut)]
            let mut entry_925 = list_924.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_925, item_923,
            )?;
        }
        list_924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("AddressFamily");
    if let Some(var_927) = &input.address_family {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("ClientToken");
    if let Some(var_929) = &input.client_token {
        scope_928.string(var_929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("AllocationId");
    if let Some(var_931) = &input.allocation_id {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("ClientToken");
    if let Some(var_933) = &input.client_token {
        scope_932.string(var_933);
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("DryRun");
    if let Some(var_935) = &input.dry_run {
        scope_934.boolean(*var_935);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("SubnetId");
    if let Some(var_937) = &input.subnet_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("TagSpecification");
    if let Some(var_939) = &input.tag_specifications {
        let mut list_941 = scope_938.start_list(true, Some("item"));
        for item_940 in var_939 {
            #[allow(unused_mut)]
            let mut entry_942 = list_941.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_942, item_940,
            )?;
        }
        list_941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("ConnectivityType");
    if let Some(var_944) = &input.connectivity_type {
        scope_943.string(var_944.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("DryRun");
    if let Some(var_946) = &input.dry_run {
        scope_945.boolean(*var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("VpcId");
    if let Some(var_948) = &input.vpc_id {
        scope_947.string(var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("TagSpecification");
    if let Some(var_950) = &input.tag_specifications {
        let mut list_952 = scope_949.start_list(true, Some("item"));
        for item_951 in var_950 {
            #[allow(unused_mut)]
            let mut entry_953 = list_952.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_953, item_951,
            )?;
        }
        list_952.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("CidrBlock");
    if let Some(var_955) = &input.cidr_block {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("DryRun");
    if let Some(var_957) = &input.dry_run {
        scope_956.boolean(*var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("Egress");
    if let Some(var_959) = &input.egress {
        scope_958.boolean(*var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("Icmp");
    if let Some(var_961) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_960, var_961)?;
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_963) = &input.ipv6_cidr_block {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("NetworkAclId");
    if let Some(var_965) = &input.network_acl_id {
        scope_964.string(var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("PortRange");
    if let Some(var_967) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_966, var_967)?;
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Protocol");
    if let Some(var_969) = &input.protocol {
        scope_968.string(var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("RuleAction");
    if let Some(var_971) = &input.rule_action {
        scope_970.string(var_971.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("RuleNumber");
    if let Some(var_973) = &input.rule_number {
        scope_972.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_973).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("MatchPath");
    if let Some(var_975) = &input.match_paths {
        let mut list_977 = scope_974.start_list(true, Some("item"));
        for item_976 in var_975 {
            #[allow(unused_mut)]
            let mut entry_978 = list_977.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_978, item_976,
            )?;
        }
        list_977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_979 = writer.prefix("ExcludePath");
    if let Some(var_980) = &input.exclude_paths {
        let mut list_982 = scope_979.start_list(true, Some("item"));
        for item_981 in var_980 {
            #[allow(unused_mut)]
            let mut entry_983 = list_982.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_983, item_981,
            )?;
        }
        list_982.finish();
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("ClientToken");
    if let Some(var_985) = &input.client_token {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("TagSpecification");
    if let Some(var_987) = &input.tag_specifications {
        let mut list_989 = scope_986.start_list(true, Some("item"));
        for item_988 in var_987 {
            #[allow(unused_mut)]
            let mut entry_990 = list_989.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_990, item_988,
            )?;
        }
        list_989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("DryRun");
    if let Some(var_992) = &input.dry_run {
        scope_991.boolean(*var_992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_993 = writer.prefix("SourceIp");
    if let Some(var_994) = &input.source_ip {
        scope_993.string(var_994);
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("DestinationIp");
    if let Some(var_996) = &input.destination_ip {
        scope_995.string(var_996);
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("Source");
    if let Some(var_998) = &input.source {
        scope_997.string(var_998);
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("Destination");
    if let Some(var_1000) = &input.destination {
        scope_999.string(var_1000);
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("Protocol");
    if let Some(var_1002) = &input.protocol {
        scope_1001.string(var_1002.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("DestinationPort");
    if let Some(var_1004) = &input.destination_port {
        scope_1003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1004).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("TagSpecification");
    if let Some(var_1006) = &input.tag_specifications {
        let mut list_1008 = scope_1005.start_list(true, Some("item"));
        for item_1007 in var_1006 {
            #[allow(unused_mut)]
            let mut entry_1009 = list_1008.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1009, item_1007,
            )?;
        }
        list_1008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("DryRun");
    if let Some(var_1011) = &input.dry_run {
        scope_1010.boolean(*var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("ClientToken");
    if let Some(var_1013) = &input.client_token {
        scope_1012.string(var_1013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("Description");
    if let Some(var_1015) = &input.description {
        scope_1014.string(var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("DryRun");
    if let Some(var_1017) = &input.dry_run {
        scope_1016.boolean(*var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("SecurityGroupId");
    if let Some(var_1019) = &input.groups {
        let mut list_1021 = scope_1018.start_list(true, Some("SecurityGroupId"));
        for item_1020 in var_1019 {
            #[allow(unused_mut)]
            let mut entry_1022 = list_1021.entry();
            entry_1022.string(item_1020);
        }
        list_1021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1024) = &input.ipv6_address_count {
        scope_1023.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1024).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("Ipv6Addresses");
    if let Some(var_1026) = &input.ipv6_addresses {
        let mut list_1028 = scope_1025.start_list(true, Some("item"));
        for item_1027 in var_1026 {
            #[allow(unused_mut)]
            let mut entry_1029 = list_1028.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1029, item_1027,
            )?;
        }
        list_1028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("PrivateIpAddress");
    if let Some(var_1031) = &input.private_ip_address {
        scope_1030.string(var_1031);
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1033) = &input.private_ip_addresses {
        let mut list_1035 = scope_1032.start_list(true, Some("item"));
        for item_1034 in var_1033 {
            #[allow(unused_mut)]
            let mut entry_1036 = list_1035.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1036, item_1034,
            )?;
        }
        list_1035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1038) = &input.secondary_private_ip_address_count {
        scope_1037.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1038).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("Ipv4Prefix");
    if let Some(var_1040) = &input.ipv4_prefixes {
        let mut list_1042 = scope_1039.start_list(true, Some("item"));
        for item_1041 in var_1040 {
            #[allow(unused_mut)]
            let mut entry_1043 = list_1042.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1043, item_1041,
            )?;
        }
        list_1042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1045) = &input.ipv4_prefix_count {
        scope_1044.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1045).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("Ipv6Prefix");
    if let Some(var_1047) = &input.ipv6_prefixes {
        let mut list_1049 = scope_1046.start_list(true, Some("item"));
        for item_1048 in var_1047 {
            #[allow(unused_mut)]
            let mut entry_1050 = list_1049.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1050, item_1048,
            )?;
        }
        list_1049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1052) = &input.ipv6_prefix_count {
        scope_1051.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1052).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("InterfaceType");
    if let Some(var_1054) = &input.interface_type {
        scope_1053.string(var_1054.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("SubnetId");
    if let Some(var_1056) = &input.subnet_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("TagSpecification");
    if let Some(var_1058) = &input.tag_specifications {
        let mut list_1060 = scope_1057.start_list(true, Some("item"));
        for item_1059 in var_1058 {
            #[allow(unused_mut)]
            let mut entry_1061 = list_1060.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1061, item_1059,
            )?;
        }
        list_1060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("ClientToken");
    if let Some(var_1063) = &input.client_token {
        scope_1062.string(var_1063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1065) = &input.network_interface_id {
        scope_1064.string(var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("AwsAccountId");
    if let Some(var_1067) = &input.aws_account_id {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("AwsService");
    if let Some(var_1069) = &input.aws_service {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("Permission");
    if let Some(var_1071) = &input.permission {
        scope_1070.string(var_1071.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("DryRun");
    if let Some(var_1073) = &input.dry_run {
        scope_1072.boolean(*var_1073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("DryRun");
    if let Some(var_1075) = &input.dry_run {
        scope_1074.boolean(*var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("GroupName");
    if let Some(var_1077) = &input.group_name {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Strategy");
    if let Some(var_1079) = &input.strategy {
        scope_1078.string(var_1079.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("PartitionCount");
    if let Some(var_1081) = &input.partition_count {
        scope_1080.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1081).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("TagSpecification");
    if let Some(var_1083) = &input.tag_specifications {
        let mut list_1085 = scope_1082.start_list(true, Some("item"));
        for item_1084 in var_1083 {
            #[allow(unused_mut)]
            let mut entry_1086 = list_1085.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1086, item_1084,
            )?;
        }
        list_1085.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("DryRun");
    if let Some(var_1088) = &input.dry_run {
        scope_1087.boolean(*var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("TagSpecification");
    if let Some(var_1090) = &input.tag_specifications {
        let mut list_1092 = scope_1089.start_list(true, Some("item"));
        for item_1091 in var_1090 {
            #[allow(unused_mut)]
            let mut entry_1093 = list_1092.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1093, item_1091,
            )?;
        }
        list_1092.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("InstanceId");
    if let Some(var_1095) = &input.instance_id {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("SnapshotId");
    if let Some(var_1097) = &input.snapshot_id {
        scope_1096.string(var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("ClientToken");
    if let Some(var_1099) = &input.client_token {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("DryRun");
    if let Some(var_1101) = &input.dry_run {
        scope_1100.boolean(*var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("TagSpecification");
    if let Some(var_1103) = &input.tag_specifications {
        let mut list_1105 = scope_1102.start_list(true, Some("item"));
        for item_1104 in var_1103 {
            #[allow(unused_mut)]
            let mut entry_1106 = list_1105.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1106, item_1104,
            )?;
        }
        list_1105.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("ClientToken");
    if let Some(var_1108) = &input.client_token {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("InstanceCount");
    if let Some(var_1110) = &input.instance_count {
        scope_1109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("PriceSchedules");
    if let Some(var_1112) = &input.price_schedules {
        let mut list_1114 = scope_1111.start_list(true, Some("item"));
        for item_1113 in var_1112 {
            #[allow(unused_mut)]
            let mut entry_1115 = list_1114.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1115, item_1113,
            )?;
        }
        list_1114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("ReservedInstancesId");
    if let Some(var_1117) = &input.reserved_instances_id {
        scope_1116.string(var_1117);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("Bucket");
    if let Some(var_1119) = &input.bucket {
        scope_1118.string(var_1119);
    }
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("ObjectKey");
    if let Some(var_1121) = &input.object_key {
        scope_1120.string(var_1121);
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("Name");
    if let Some(var_1123) = &input.name {
        scope_1122.string(var_1123);
    }
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("TagSpecification");
    if let Some(var_1125) = &input.tag_specifications {
        let mut list_1127 = scope_1124.start_list(true, Some("item"));
        for item_1126 in var_1125 {
            #[allow(unused_mut)]
            let mut entry_1128 = list_1127.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1128, item_1126,
            )?;
        }
        list_1127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("DryRun");
    if let Some(var_1130) = &input.dry_run {
        scope_1129.boolean(*var_1130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1132) = &input.destination_cidr_block {
        scope_1131.string(var_1132);
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1134) = &input.destination_ipv6_cidr_block {
        scope_1133.string(var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1136) = &input.destination_prefix_list_id {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("DryRun");
    if let Some(var_1138) = &input.dry_run {
        scope_1137.boolean(*var_1138);
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("VpcEndpointId");
    if let Some(var_1140) = &input.vpc_endpoint_id {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1142) = &input.egress_only_internet_gateway_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("GatewayId");
    if let Some(var_1144) = &input.gateway_id {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("InstanceId");
    if let Some(var_1146) = &input.instance_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("NatGatewayId");
    if let Some(var_1148) = &input.nat_gateway_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("TransitGatewayId");
    if let Some(var_1150) = &input.transit_gateway_id {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("LocalGatewayId");
    if let Some(var_1152) = &input.local_gateway_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("CarrierGatewayId");
    if let Some(var_1154) = &input.carrier_gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1156) = &input.network_interface_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("RouteTableId");
    if let Some(var_1158) = &input.route_table_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1160) = &input.vpc_peering_connection_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("CoreNetworkArn");
    if let Some(var_1162) = &input.core_network_arn {
        scope_1161.string(var_1162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("DryRun");
    if let Some(var_1164) = &input.dry_run {
        scope_1163.boolean(*var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("VpcId");
    if let Some(var_1166) = &input.vpc_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("TagSpecification");
    if let Some(var_1168) = &input.tag_specifications {
        let mut list_1170 = scope_1167.start_list(true, Some("item"));
        for item_1169 in var_1168 {
            #[allow(unused_mut)]
            let mut entry_1171 = list_1170.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1171, item_1169,
            )?;
        }
        list_1170.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("GroupDescription");
    if let Some(var_1173) = &input.description {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("GroupName");
    if let Some(var_1175) = &input.group_name {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("VpcId");
    if let Some(var_1177) = &input.vpc_id {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("TagSpecification");
    if let Some(var_1179) = &input.tag_specifications {
        let mut list_1181 = scope_1178.start_list(true, Some("item"));
        for item_1180 in var_1179 {
            #[allow(unused_mut)]
            let mut entry_1182 = list_1181.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1182, item_1180,
            )?;
        }
        list_1181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("DryRun");
    if let Some(var_1184) = &input.dry_run {
        scope_1183.boolean(*var_1184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("Description");
    if let Some(var_1186) = &input.description {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("OutpostArn");
    if let Some(var_1188) = &input.outpost_arn {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("VolumeId");
    if let Some(var_1190) = &input.volume_id {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("TagSpecification");
    if let Some(var_1192) = &input.tag_specifications {
        let mut list_1194 = scope_1191.start_list(true, Some("item"));
        for item_1193 in var_1192 {
            #[allow(unused_mut)]
            let mut entry_1195 = list_1194.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1195, item_1193,
            )?;
        }
        list_1194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("DryRun");
    if let Some(var_1197) = &input.dry_run {
        scope_1196.boolean(*var_1197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("Description");
    if let Some(var_1199) = &input.description {
        scope_1198.string(var_1199);
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("InstanceSpecification");
    if let Some(var_1201) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1200, var_1201,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("OutpostArn");
    if let Some(var_1203) = &input.outpost_arn {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("TagSpecification");
    if let Some(var_1205) = &input.tag_specifications {
        let mut list_1207 = scope_1204.start_list(true, Some("item"));
        for item_1206 in var_1205 {
            #[allow(unused_mut)]
            let mut entry_1208 = list_1207.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1208, item_1206,
            )?;
        }
        list_1207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1209 = writer.prefix("DryRun");
    if let Some(var_1210) = &input.dry_run {
        scope_1209.boolean(*var_1210);
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1212) = &input.copy_tags_from_source {
        scope_1211.string(var_1212.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1213 = writer.prefix("Bucket");
    if let Some(var_1214) = &input.bucket {
        scope_1213.string(var_1214);
    }
    #[allow(unused_mut)]
    let mut scope_1215 = writer.prefix("DryRun");
    if let Some(var_1216) = &input.dry_run {
        scope_1215.boolean(*var_1216);
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("Prefix");
    if let Some(var_1218) = &input.prefix {
        scope_1217.string(var_1218);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("ImageId");
    if let Some(var_1220) = &input.image_id {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("Bucket");
    if let Some(var_1222) = &input.bucket {
        scope_1221.string(var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("S3ObjectTag");
    if let Some(var_1224) = &input.s3_object_tags {
        let mut list_1226 = scope_1223.start_list(true, Some("item"));
        for item_1225 in var_1224 {
            #[allow(unused_mut)]
            let mut entry_1227 = list_1226.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1227, item_1225)?;
        }
        list_1226.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("DryRun");
    if let Some(var_1229) = &input.dry_run {
        scope_1228.boolean(*var_1229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("TagSpecification");
    if let Some(var_1231) = &input.tag_specifications {
        let mut list_1233 = scope_1230.start_list(true, Some("item"));
        for item_1232 in var_1231 {
            #[allow(unused_mut)]
            let mut entry_1234 = list_1233.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1234, item_1232,
            )?;
        }
        list_1233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("AvailabilityZone");
    if let Some(var_1236) = &input.availability_zone {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1238) = &input.availability_zone_id {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("CidrBlock");
    if let Some(var_1240) = &input.cidr_block {
        scope_1239.string(var_1240);
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1242) = &input.ipv6_cidr_block {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("OutpostArn");
    if let Some(var_1244) = &input.outpost_arn {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("VpcId");
    if let Some(var_1246) = &input.vpc_id {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("DryRun");
    if let Some(var_1248) = &input.dry_run {
        scope_1247.boolean(*var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("Ipv6Native");
    if let Some(var_1250) = &input.ipv6_native {
        scope_1249.boolean(*var_1250);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("TagSpecification");
    if let Some(var_1252) = &input.tag_specifications {
        let mut list_1254 = scope_1251.start_list(true, Some("item"));
        for item_1253 in var_1252 {
            #[allow(unused_mut)]
            let mut entry_1255 = list_1254.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1255, item_1253,
            )?;
        }
        list_1254.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1256 = writer.prefix("SubnetId");
    if let Some(var_1257) = &input.subnet_id {
        scope_1256.string(var_1257);
    }
    #[allow(unused_mut)]
    let mut scope_1258 = writer.prefix("Cidr");
    if let Some(var_1259) = &input.cidr {
        scope_1258.string(var_1259);
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("ReservationType");
    if let Some(var_1261) = &input.reservation_type {
        scope_1260.string(var_1261.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("Description");
    if let Some(var_1263) = &input.description {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("DryRun");
    if let Some(var_1265) = &input.dry_run {
        scope_1264.boolean(*var_1265);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("DryRun");
    if let Some(var_1267) = &input.dry_run {
        scope_1266.boolean(*var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("ResourceId");
    if let Some(var_1269) = &input.resources {
        let mut list_1271 = scope_1268.start_list(true, None);
        for item_1270 in var_1269 {
            #[allow(unused_mut)]
            let mut entry_1272 = list_1271.entry();
            entry_1272.string(item_1270);
        }
        list_1271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("Tag");
    if let Some(var_1274) = &input.tags {
        let mut list_1276 = scope_1273.start_list(true, Some("item"));
        for item_1275 in var_1274 {
            #[allow(unused_mut)]
            let mut entry_1277 = list_1276.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1277, item_1275)?;
        }
        list_1276.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("Description");
    if let Some(var_1279) = &input.description {
        scope_1278.string(var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("TagSpecification");
    if let Some(var_1281) = &input.tag_specifications {
        let mut list_1283 = scope_1280.start_list(true, Some("item"));
        for item_1282 in var_1281 {
            #[allow(unused_mut)]
            let mut entry_1284 = list_1283.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1284, item_1282,
            )?;
        }
        list_1283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("DryRun");
    if let Some(var_1286) = &input.dry_run {
        scope_1285.boolean(*var_1286);
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("ClientToken");
    if let Some(var_1288) = &input.client_token {
        scope_1287.string(var_1288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1290) = &input.traffic_mirror_filter_id {
        scope_1289.string(var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("TrafficDirection");
    if let Some(var_1292) = &input.traffic_direction {
        scope_1291.string(var_1292.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("RuleNumber");
    if let Some(var_1294) = &input.rule_number {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("RuleAction");
    if let Some(var_1296) = &input.rule_action {
        scope_1295.string(var_1296.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("DestinationPortRange");
    if let Some(var_1298) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1297, var_1298,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("SourcePortRange");
    if let Some(var_1300) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1299, var_1300,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("Protocol");
    if let Some(var_1302) = &input.protocol {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1304) = &input.destination_cidr_block {
        scope_1303.string(var_1304);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("SourceCidrBlock");
    if let Some(var_1306) = &input.source_cidr_block {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Description");
    if let Some(var_1308) = &input.description {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DryRun");
    if let Some(var_1310) = &input.dry_run {
        scope_1309.boolean(*var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("ClientToken");
    if let Some(var_1312) = &input.client_token {
        scope_1311.string(var_1312);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1314) = &input.network_interface_id {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1316) = &input.traffic_mirror_target_id {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1318) = &input.traffic_mirror_filter_id {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("PacketLength");
    if let Some(var_1320) = &input.packet_length {
        scope_1319.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1320).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("SessionNumber");
    if let Some(var_1322) = &input.session_number {
        scope_1321.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1322).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("VirtualNetworkId");
    if let Some(var_1324) = &input.virtual_network_id {
        scope_1323.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1324).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("Description");
    if let Some(var_1326) = &input.description {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TagSpecification");
    if let Some(var_1328) = &input.tag_specifications {
        let mut list_1330 = scope_1327.start_list(true, Some("item"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]
            let mut entry_1331 = list_1330.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1331, item_1329,
            )?;
        }
        list_1330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("DryRun");
    if let Some(var_1333) = &input.dry_run {
        scope_1332.boolean(*var_1333);
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("ClientToken");
    if let Some(var_1335) = &input.client_token {
        scope_1334.string(var_1335);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1337) = &input.network_interface_id {
        scope_1336.string(var_1337);
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1339) = &input.network_load_balancer_arn {
        scope_1338.string(var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("Description");
    if let Some(var_1341) = &input.description {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("TagSpecification");
    if let Some(var_1343) = &input.tag_specifications {
        let mut list_1345 = scope_1342.start_list(true, Some("item"));
        for item_1344 in var_1343 {
            #[allow(unused_mut)]
            let mut entry_1346 = list_1345.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1346, item_1344,
            )?;
        }
        list_1345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("DryRun");
    if let Some(var_1348) = &input.dry_run {
        scope_1347.boolean(*var_1348);
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("ClientToken");
    if let Some(var_1350) = &input.client_token {
        scope_1349.string(var_1350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("Description");
    if let Some(var_1352) = &input.description {
        scope_1351.string(var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("Options");
    if let Some(var_1354) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1353, var_1354,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("TagSpecification");
    if let Some(var_1356) = &input.tag_specifications {
        let mut list_1358 = scope_1355.start_list(true, Some("item"));
        for item_1357 in var_1356 {
            #[allow(unused_mut)]
            let mut entry_1359 = list_1358.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1359, item_1357,
            )?;
        }
        list_1358.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("DryRun");
    if let Some(var_1361) = &input.dry_run {
        scope_1360.boolean(*var_1361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1363) = &input.transport_transit_gateway_attachment_id {
        scope_1362.string(var_1363);
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Options");
    if let Some(var_1365) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1364, var_1365)?;
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("TagSpecification");
    if let Some(var_1367) = &input.tag_specifications {
        let mut list_1369 = scope_1366.start_list(true, Some("item"));
        for item_1368 in var_1367 {
            #[allow(unused_mut)]
            let mut entry_1370 = list_1369.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1370, item_1368,
            )?;
        }
        list_1369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("DryRun");
    if let Some(var_1372) = &input.dry_run {
        scope_1371.boolean(*var_1372);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1374) = &input.transit_gateway_attachment_id {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1376) = &input.transit_gateway_address {
        scope_1375.string(var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("PeerAddress");
    if let Some(var_1378) = &input.peer_address {
        scope_1377.string(var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("BgpOptions");
    if let Some(var_1380) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1379, var_1380)?;
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1382) = &input.inside_cidr_blocks {
        let mut list_1384 = scope_1381.start_list(true, Some("item"));
        for item_1383 in var_1382 {
            #[allow(unused_mut)]
            let mut entry_1385 = list_1384.entry();
            entry_1385.string(item_1383);
        }
        list_1384.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("TagSpecification");
    if let Some(var_1387) = &input.tag_specifications {
        let mut list_1389 = scope_1386.start_list(true, Some("item"));
        for item_1388 in var_1387 {
            #[allow(unused_mut)]
            let mut entry_1390 = list_1389.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1390, item_1388,
            )?;
        }
        list_1389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("DryRun");
    if let Some(var_1392) = &input.dry_run {
        scope_1391.boolean(*var_1392);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("TransitGatewayId");
    if let Some(var_1394) = &input.transit_gateway_id {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("Options");
    if let Some(var_1396) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1395, var_1396)?;
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("TagSpecification");
    if let Some(var_1398) = &input.tag_specifications {
        let mut list_1400 = scope_1397.start_list(true, Some("item"));
        for item_1399 in var_1398 {
            #[allow(unused_mut)]
            let mut entry_1401 = list_1400.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1401, item_1399,
            )?;
        }
        list_1400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("DryRun");
    if let Some(var_1403) = &input.dry_run {
        scope_1402.boolean(*var_1403);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("TransitGatewayId");
    if let Some(var_1405) = &input.transit_gateway_id {
        scope_1404.string(var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1407) = &input.peer_transit_gateway_id {
        scope_1406.string(var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("PeerAccountId");
    if let Some(var_1409) = &input.peer_account_id {
        scope_1408.string(var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("PeerRegion");
    if let Some(var_1411) = &input.peer_region {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("TagSpecification");
    if let Some(var_1413) = &input.tag_specifications {
        let mut list_1415 = scope_1412.start_list(true, Some("item"));
        for item_1414 in var_1413 {
            #[allow(unused_mut)]
            let mut entry_1416 = list_1415.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1416, item_1414,
            )?;
        }
        list_1415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("DryRun");
    if let Some(var_1418) = &input.dry_run {
        scope_1417.boolean(*var_1418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1420) = &input.transit_gateway_route_table_id {
        scope_1419.string(var_1420);
    }
    #[allow(unused_mut)]
    let mut scope_1421 = writer.prefix("PrefixListId");
    if let Some(var_1422) = &input.prefix_list_id {
        scope_1421.string(var_1422);
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1424) = &input.transit_gateway_attachment_id {
        scope_1423.string(var_1424);
    }
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("Blackhole");
    if let Some(var_1426) = &input.blackhole {
        scope_1425.boolean(*var_1426);
    }
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("DryRun");
    if let Some(var_1428) = &input.dry_run {
        scope_1427.boolean(*var_1428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1429 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1430) = &input.destination_cidr_block {
        scope_1429.string(var_1430);
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1432) = &input.transit_gateway_route_table_id {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1434) = &input.transit_gateway_attachment_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("Blackhole");
    if let Some(var_1436) = &input.blackhole {
        scope_1435.boolean(*var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("DryRun");
    if let Some(var_1438) = &input.dry_run {
        scope_1437.boolean(*var_1438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("TransitGatewayId");
    if let Some(var_1440) = &input.transit_gateway_id {
        scope_1439.string(var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("TagSpecifications");
    if let Some(var_1442) = &input.tag_specifications {
        let mut list_1444 = scope_1441.start_list(true, Some("item"));
        for item_1443 in var_1442 {
            #[allow(unused_mut)]
            let mut entry_1445 = list_1444.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1445, item_1443,
            )?;
        }
        list_1444.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("DryRun");
    if let Some(var_1447) = &input.dry_run {
        scope_1446.boolean(*var_1447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("TransitGatewayId");
    if let Some(var_1449) = &input.transit_gateway_id {
        scope_1448.string(var_1449);
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("VpcId");
    if let Some(var_1451) = &input.vpc_id {
        scope_1450.string(var_1451);
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("SubnetIds");
    if let Some(var_1453) = &input.subnet_ids {
        let mut list_1455 = scope_1452.start_list(true, Some("item"));
        for item_1454 in var_1453 {
            #[allow(unused_mut)]
            let mut entry_1456 = list_1455.entry();
            entry_1456.string(item_1454);
        }
        list_1455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1457 = writer.prefix("Options");
    if let Some(var_1458) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1457, var_1458)?;
    }
    #[allow(unused_mut)]
    let mut scope_1459 = writer.prefix("TagSpecifications");
    if let Some(var_1460) = &input.tag_specifications {
        let mut list_1462 = scope_1459.start_list(true, Some("item"));
        for item_1461 in var_1460 {
            #[allow(unused_mut)]
            let mut entry_1463 = list_1462.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1463, item_1461,
            )?;
        }
        list_1462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("DryRun");
    if let Some(var_1465) = &input.dry_run {
        scope_1464.boolean(*var_1465);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("AvailabilityZone");
    if let Some(var_1467) = &input.availability_zone {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("Encrypted");
    if let Some(var_1469) = &input.encrypted {
        scope_1468.boolean(*var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("Iops");
    if let Some(var_1471) = &input.iops {
        scope_1470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("KmsKeyId");
    if let Some(var_1473) = &input.kms_key_id {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("OutpostArn");
    if let Some(var_1475) = &input.outpost_arn {
        scope_1474.string(var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("Size");
    if let Some(var_1477) = &input.size {
        scope_1476.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1477).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("SnapshotId");
    if let Some(var_1479) = &input.snapshot_id {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("VolumeType");
    if let Some(var_1481) = &input.volume_type {
        scope_1480.string(var_1481.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("DryRun");
    if let Some(var_1483) = &input.dry_run {
        scope_1482.boolean(*var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("TagSpecification");
    if let Some(var_1485) = &input.tag_specifications {
        let mut list_1487 = scope_1484.start_list(true, Some("item"));
        for item_1486 in var_1485 {
            #[allow(unused_mut)]
            let mut entry_1488 = list_1487.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1488, item_1486,
            )?;
        }
        list_1487.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1490) = &input.multi_attach_enabled {
        scope_1489.boolean(*var_1490);
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("Throughput");
    if let Some(var_1492) = &input.throughput {
        scope_1491.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1492).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1493 = writer.prefix("ClientToken");
    if let Some(var_1494) = &input.client_token {
        scope_1493.string(var_1494);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("CidrBlock");
    if let Some(var_1496) = &input.cidr_block {
        scope_1495.string(var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1498) = &input.amazon_provided_ipv6_cidr_block {
        scope_1497.boolean(*var_1498);
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("Ipv6Pool");
    if let Some(var_1500) = &input.ipv6_pool {
        scope_1499.string(var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1502) = &input.ipv6_cidr_block {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1504) = &input.ipv4_ipam_pool_id {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1506) = &input.ipv4_netmask_length {
        scope_1505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1508) = &input.ipv6_ipam_pool_id {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1510) = &input.ipv6_netmask_length {
        scope_1509.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("DryRun");
    if let Some(var_1512) = &input.dry_run {
        scope_1511.boolean(*var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("InstanceTenancy");
    if let Some(var_1514) = &input.instance_tenancy {
        scope_1513.string(var_1514.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1516) = &input.ipv6_cidr_block_network_border_group {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("TagSpecification");
    if let Some(var_1518) = &input.tag_specifications {
        let mut list_1520 = scope_1517.start_list(true, Some("item"));
        for item_1519 in var_1518 {
            #[allow(unused_mut)]
            let mut entry_1521 = list_1520.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1521, item_1519,
            )?;
        }
        list_1520.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("DryRun");
    if let Some(var_1523) = &input.dry_run {
        scope_1522.boolean(*var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("VpcEndpointType");
    if let Some(var_1525) = &input.vpc_endpoint_type {
        scope_1524.string(var_1525.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("VpcId");
    if let Some(var_1527) = &input.vpc_id {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("ServiceName");
    if let Some(var_1529) = &input.service_name {
        scope_1528.string(var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("PolicyDocument");
    if let Some(var_1531) = &input.policy_document {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("RouteTableId");
    if let Some(var_1533) = &input.route_table_ids {
        let mut list_1535 = scope_1532.start_list(true, Some("item"));
        for item_1534 in var_1533 {
            #[allow(unused_mut)]
            let mut entry_1536 = list_1535.entry();
            entry_1536.string(item_1534);
        }
        list_1535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("SubnetId");
    if let Some(var_1538) = &input.subnet_ids {
        let mut list_1540 = scope_1537.start_list(true, Some("item"));
        for item_1539 in var_1538 {
            #[allow(unused_mut)]
            let mut entry_1541 = list_1540.entry();
            entry_1541.string(item_1539);
        }
        list_1540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("SecurityGroupId");
    if let Some(var_1543) = &input.security_group_ids {
        let mut list_1545 = scope_1542.start_list(true, Some("item"));
        for item_1544 in var_1543 {
            #[allow(unused_mut)]
            let mut entry_1546 = list_1545.entry();
            entry_1546.string(item_1544);
        }
        list_1545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("ClientToken");
    if let Some(var_1548) = &input.client_token {
        scope_1547.string(var_1548);
    }
    #[allow(unused_mut)]
    let mut scope_1549 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1550) = &input.private_dns_enabled {
        scope_1549.boolean(*var_1550);
    }
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("TagSpecification");
    if let Some(var_1552) = &input.tag_specifications {
        let mut list_1554 = scope_1551.start_list(true, Some("item"));
        for item_1553 in var_1552 {
            #[allow(unused_mut)]
            let mut entry_1555 = list_1554.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1555, item_1553,
            )?;
        }
        list_1554.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("DryRun");
    if let Some(var_1557) = &input.dry_run {
        scope_1556.boolean(*var_1557);
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("ServiceId");
    if let Some(var_1559) = &input.service_id {
        scope_1558.string(var_1559);
    }
    #[allow(unused_mut)]
    let mut scope_1560 = writer.prefix("VpcEndpointId");
    if let Some(var_1561) = &input.vpc_endpoint_id {
        scope_1560.string(var_1561);
    }
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1563) = &input.connection_notification_arn {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("ConnectionEvents");
    if let Some(var_1565) = &input.connection_events {
        let mut list_1567 = scope_1564.start_list(true, Some("item"));
        for item_1566 in var_1565 {
            #[allow(unused_mut)]
            let mut entry_1568 = list_1567.entry();
            entry_1568.string(item_1566);
        }
        list_1567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("ClientToken");
    if let Some(var_1570) = &input.client_token {
        scope_1569.string(var_1570);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("DryRun");
    if let Some(var_1572) = &input.dry_run {
        scope_1571.boolean(*var_1572);
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("AcceptanceRequired");
    if let Some(var_1574) = &input.acceptance_required {
        scope_1573.boolean(*var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("PrivateDnsName");
    if let Some(var_1576) = &input.private_dns_name {
        scope_1575.string(var_1576);
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1578) = &input.network_load_balancer_arns {
        let mut list_1580 = scope_1577.start_list(true, Some("item"));
        for item_1579 in var_1578 {
            #[allow(unused_mut)]
            let mut entry_1581 = list_1580.entry();
            entry_1581.string(item_1579);
        }
        list_1580.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1583) = &input.gateway_load_balancer_arns {
        let mut list_1585 = scope_1582.start_list(true, Some("item"));
        for item_1584 in var_1583 {
            #[allow(unused_mut)]
            let mut entry_1586 = list_1585.entry();
            entry_1586.string(item_1584);
        }
        list_1585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("ClientToken");
    if let Some(var_1588) = &input.client_token {
        scope_1587.string(var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("TagSpecification");
    if let Some(var_1590) = &input.tag_specifications {
        let mut list_1592 = scope_1589.start_list(true, Some("item"));
        for item_1591 in var_1590 {
            #[allow(unused_mut)]
            let mut entry_1593 = list_1592.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1593, item_1591,
            )?;
        }
        list_1592.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("DryRun");
    if let Some(var_1595) = &input.dry_run {
        scope_1594.boolean(*var_1595);
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("PeerOwnerId");
    if let Some(var_1597) = &input.peer_owner_id {
        scope_1596.string(var_1597);
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("PeerVpcId");
    if let Some(var_1599) = &input.peer_vpc_id {
        scope_1598.string(var_1599);
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("VpcId");
    if let Some(var_1601) = &input.vpc_id {
        scope_1600.string(var_1601);
    }
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("PeerRegion");
    if let Some(var_1603) = &input.peer_region {
        scope_1602.string(var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("TagSpecification");
    if let Some(var_1605) = &input.tag_specifications {
        let mut list_1607 = scope_1604.start_list(true, Some("item"));
        for item_1606 in var_1605 {
            #[allow(unused_mut)]
            let mut entry_1608 = list_1607.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1608, item_1606,
            )?;
        }
        list_1607.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("CustomerGatewayId");
    if let Some(var_1610) = &input.customer_gateway_id {
        scope_1609.string(var_1610);
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("Type");
    if let Some(var_1612) = &input.r#type {
        scope_1611.string(var_1612);
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("VpnGatewayId");
    if let Some(var_1614) = &input.vpn_gateway_id {
        scope_1613.string(var_1614);
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("TransitGatewayId");
    if let Some(var_1616) = &input.transit_gateway_id {
        scope_1615.string(var_1616);
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("DryRun");
    if let Some(var_1618) = &input.dry_run {
        scope_1617.boolean(*var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("Options");
    if let Some(var_1620) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1619, var_1620,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("TagSpecification");
    if let Some(var_1622) = &input.tag_specifications {
        let mut list_1624 = scope_1621.start_list(true, Some("item"));
        for item_1623 in var_1622 {
            #[allow(unused_mut)]
            let mut entry_1625 = list_1624.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1625, item_1623,
            )?;
        }
        list_1624.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1626 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1627) = &input.destination_cidr_block {
        scope_1626.string(var_1627);
    }
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("VpnConnectionId");
    if let Some(var_1629) = &input.vpn_connection_id {
        scope_1628.string(var_1629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("AvailabilityZone");
    if let Some(var_1631) = &input.availability_zone {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("Type");
    if let Some(var_1633) = &input.r#type {
        scope_1632.string(var_1633.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("TagSpecification");
    if let Some(var_1635) = &input.tag_specifications {
        let mut list_1637 = scope_1634.start_list(true, Some("item"));
        for item_1636 in var_1635 {
            #[allow(unused_mut)]
            let mut entry_1638 = list_1637.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1638, item_1636,
            )?;
        }
        list_1637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1639 = writer.prefix("AmazonSideAsn");
    if let Some(var_1640) = &input.amazon_side_asn {
        scope_1639.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1640).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1641 = writer.prefix("DryRun");
    if let Some(var_1642) = &input.dry_run {
        scope_1641.boolean(*var_1642);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1643 = writer.prefix("CarrierGatewayId");
    if let Some(var_1644) = &input.carrier_gateway_id {
        scope_1643.string(var_1644);
    }
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("DryRun");
    if let Some(var_1646) = &input.dry_run {
        scope_1645.boolean(*var_1646);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1648) = &input.client_vpn_endpoint_id {
        scope_1647.string(var_1648);
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("DryRun");
    if let Some(var_1650) = &input.dry_run {
        scope_1649.boolean(*var_1650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1652) = &input.client_vpn_endpoint_id {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1654) = &input.target_vpc_subnet_id {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1656) = &input.destination_cidr_block {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("DryRun");
    if let Some(var_1658) = &input.dry_run {
        scope_1657.boolean(*var_1658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("CustomerGatewayId");
    if let Some(var_1660) = &input.customer_gateway_id {
        scope_1659.string(var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("DryRun");
    if let Some(var_1662) = &input.dry_run {
        scope_1661.boolean(*var_1662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("DhcpOptionsId");
    if let Some(var_1664) = &input.dhcp_options_id {
        scope_1663.string(var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("DryRun");
    if let Some(var_1666) = &input.dry_run {
        scope_1665.boolean(*var_1666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("DryRun");
    if let Some(var_1668) = &input.dry_run {
        scope_1667.boolean(*var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1670) = &input.egress_only_internet_gateway_id {
        scope_1669.string(var_1670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DryRun");
    if let Some(var_1672) = &input.dry_run {
        scope_1671.boolean(*var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("FleetId");
    if let Some(var_1674) = &input.fleet_ids {
        let mut list_1676 = scope_1673.start_list(true, None);
        for item_1675 in var_1674 {
            #[allow(unused_mut)]
            let mut entry_1677 = list_1676.entry();
            entry_1677.string(item_1675);
        }
        list_1676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("TerminateInstances");
    if let Some(var_1679) = &input.terminate_instances {
        scope_1678.boolean(*var_1679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DryRun");
    if let Some(var_1681) = &input.dry_run {
        scope_1680.boolean(*var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("FlowLogId");
    if let Some(var_1683) = &input.flow_log_ids {
        let mut list_1685 = scope_1682.start_list(true, Some("item"));
        for item_1684 in var_1683 {
            #[allow(unused_mut)]
            let mut entry_1686 = list_1685.entry();
            entry_1686.string(item_1684);
        }
        list_1685.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("DryRun");
    if let Some(var_1688) = &input.dry_run {
        scope_1687.boolean(*var_1688);
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("FpgaImageId");
    if let Some(var_1690) = &input.fpga_image_id {
        scope_1689.string(var_1690);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1691 = writer.prefix("DryRun");
    if let Some(var_1692) = &input.dry_run {
        scope_1691.boolean(*var_1692);
    }
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("ForceDelete");
    if let Some(var_1694) = &input.force_delete {
        scope_1693.boolean(*var_1694);
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1696) = &input.instance_event_window_id {
        scope_1695.string(var_1696);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("DryRun");
    if let Some(var_1698) = &input.dry_run {
        scope_1697.boolean(*var_1698);
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("InternetGatewayId");
    if let Some(var_1700) = &input.internet_gateway_id {
        scope_1699.string(var_1700);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DryRun");
    if let Some(var_1702) = &input.dry_run {
        scope_1701.boolean(*var_1702);
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("IpamId");
    if let Some(var_1704) = &input.ipam_id {
        scope_1703.string(var_1704);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("IpamPoolId");
    if let Some(var_1708) = &input.ipam_pool_id {
        scope_1707.string(var_1708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("DryRun");
    if let Some(var_1710) = &input.dry_run {
        scope_1709.boolean(*var_1710);
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("IpamScopeId");
    if let Some(var_1712) = &input.ipam_scope_id {
        scope_1711.string(var_1712);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("KeyName");
    if let Some(var_1714) = &input.key_name {
        scope_1713.string(var_1714);
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("KeyPairId");
    if let Some(var_1716) = &input.key_pair_id {
        scope_1715.string(var_1716);
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("DryRun");
    if let Some(var_1718) = &input.dry_run {
        scope_1717.boolean(*var_1718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("DryRun");
    if let Some(var_1720) = &input.dry_run {
        scope_1719.boolean(*var_1720);
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("LaunchTemplateId");
    if let Some(var_1722) = &input.launch_template_id {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("LaunchTemplateName");
    if let Some(var_1724) = &input.launch_template_name {
        scope_1723.string(var_1724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("DryRun");
    if let Some(var_1726) = &input.dry_run {
        scope_1725.boolean(*var_1726);
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("LaunchTemplateId");
    if let Some(var_1728) = &input.launch_template_id {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("LaunchTemplateName");
    if let Some(var_1730) = &input.launch_template_name {
        scope_1729.string(var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1732) = &input.versions {
        let mut list_1734 = scope_1731.start_list(true, Some("item"));
        for item_1733 in var_1732 {
            #[allow(unused_mut)]
            let mut entry_1735 = list_1734.entry();
            entry_1735.string(item_1733);
        }
        list_1734.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1737) = &input.destination_cidr_block {
        scope_1736.string(var_1737);
    }
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1739) = &input.local_gateway_route_table_id {
        scope_1738.string(var_1739);
    }
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("DryRun");
    if let Some(var_1741) = &input.dry_run {
        scope_1740.boolean(*var_1741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1743) = &input.local_gateway_route_table_vpc_association_id {
        scope_1742.string(var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DryRun");
    if let Some(var_1745) = &input.dry_run {
        scope_1744.boolean(*var_1745);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("DryRun");
    if let Some(var_1747) = &input.dry_run {
        scope_1746.boolean(*var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("PrefixListId");
    if let Some(var_1749) = &input.prefix_list_id {
        scope_1748.string(var_1749);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DryRun");
    if let Some(var_1751) = &input.dry_run {
        scope_1750.boolean(*var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("NatGatewayId");
    if let Some(var_1753) = &input.nat_gateway_id {
        scope_1752.string(var_1753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("DryRun");
    if let Some(var_1755) = &input.dry_run {
        scope_1754.boolean(*var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("NetworkAclId");
    if let Some(var_1757) = &input.network_acl_id {
        scope_1756.string(var_1757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("DryRun");
    if let Some(var_1759) = &input.dry_run {
        scope_1758.boolean(*var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("Egress");
    if let Some(var_1761) = &input.egress {
        scope_1760.boolean(*var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("NetworkAclId");
    if let Some(var_1763) = &input.network_acl_id {
        scope_1762.string(var_1763);
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("RuleNumber");
    if let Some(var_1765) = &input.rule_number {
        scope_1764.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1765).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("DryRun");
    if let Some(var_1767) = &input.dry_run {
        scope_1766.boolean(*var_1767);
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1769) = &input.network_insights_access_scope_id {
        scope_1768.string(var_1769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1771) = &input.network_insights_access_scope_analysis_id {
        scope_1770.string(var_1771);
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("DryRun");
    if let Some(var_1773) = &input.dry_run {
        scope_1772.boolean(*var_1773);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("DryRun");
    if let Some(var_1775) = &input.dry_run {
        scope_1774.boolean(*var_1775);
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1777) = &input.network_insights_analysis_id {
        scope_1776.string(var_1777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("DryRun");
    if let Some(var_1779) = &input.dry_run {
        scope_1778.boolean(*var_1779);
    }
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1781) = &input.network_insights_path_id {
        scope_1780.string(var_1781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("DryRun");
    if let Some(var_1783) = &input.dry_run {
        scope_1782.boolean(*var_1783);
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1785) = &input.network_interface_id {
        scope_1784.string(var_1785);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1787) = &input.network_interface_permission_id {
        scope_1786.string(var_1787);
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Force");
    if let Some(var_1789) = &input.force {
        scope_1788.boolean(*var_1789);
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("DryRun");
    if let Some(var_1791) = &input.dry_run {
        scope_1790.boolean(*var_1791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("DryRun");
    if let Some(var_1793) = &input.dry_run {
        scope_1792.boolean(*var_1793);
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("GroupName");
    if let Some(var_1795) = &input.group_name {
        scope_1794.string(var_1795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("DryRun");
    if let Some(var_1797) = &input.dry_run {
        scope_1796.boolean(*var_1797);
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("PoolId");
    if let Some(var_1799) = &input.pool_id {
        scope_1798.string(var_1799);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("DryRun");
    if let Some(var_1801) = &input.dry_run {
        scope_1800.boolean(*var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("ReservedInstancesId");
    if let Some(var_1803) = &input.reserved_instances_ids {
        let mut list_1805 = scope_1802.start_list(true, Some("item"));
        for item_1804 in var_1803 {
            #[allow(unused_mut)]
            let mut entry_1806 = list_1805.entry();
            entry_1806.string(item_1804);
        }
        list_1805.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1808) = &input.destination_cidr_block {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1810) = &input.destination_ipv6_cidr_block {
        scope_1809.string(var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1812) = &input.destination_prefix_list_id {
        scope_1811.string(var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("DryRun");
    if let Some(var_1814) = &input.dry_run {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("RouteTableId");
    if let Some(var_1816) = &input.route_table_id {
        scope_1815.string(var_1816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DryRun");
    if let Some(var_1818) = &input.dry_run {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("RouteTableId");
    if let Some(var_1820) = &input.route_table_id {
        scope_1819.string(var_1820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("GroupId");
    if let Some(var_1822) = &input.group_id {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("GroupName");
    if let Some(var_1824) = &input.group_name {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("DryRun");
    if let Some(var_1826) = &input.dry_run {
        scope_1825.boolean(*var_1826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("SnapshotId");
    if let Some(var_1828) = &input.snapshot_id {
        scope_1827.string(var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("DryRun");
    if let Some(var_1830) = &input.dry_run {
        scope_1829.boolean(*var_1830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("DryRun");
    if let Some(var_1832) = &input.dry_run {
        scope_1831.boolean(*var_1832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("SubnetId");
    if let Some(var_1834) = &input.subnet_id {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("DryRun");
    if let Some(var_1836) = &input.dry_run {
        scope_1835.boolean(*var_1836);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1838) = &input.subnet_cidr_reservation_id {
        scope_1837.string(var_1838);
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("DryRun");
    if let Some(var_1840) = &input.dry_run {
        scope_1839.boolean(*var_1840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("DryRun");
    if let Some(var_1842) = &input.dry_run {
        scope_1841.boolean(*var_1842);
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("ResourceId");
    if let Some(var_1844) = &input.resources {
        let mut list_1846 = scope_1843.start_list(true, None);
        for item_1845 in var_1844 {
            #[allow(unused_mut)]
            let mut entry_1847 = list_1846.entry();
            entry_1847.string(item_1845);
        }
        list_1846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("Tag");
    if let Some(var_1849) = &input.tags {
        let mut list_1851 = scope_1848.start_list(true, Some("item"));
        for item_1850 in var_1849 {
            #[allow(unused_mut)]
            let mut entry_1852 = list_1851.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1852, item_1850)?;
        }
        list_1851.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1854) = &input.traffic_mirror_filter_id {
        scope_1853.string(var_1854);
    }
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("DryRun");
    if let Some(var_1856) = &input.dry_run {
        scope_1855.boolean(*var_1856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1858) = &input.traffic_mirror_filter_rule_id {
        scope_1857.string(var_1858);
    }
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("DryRun");
    if let Some(var_1860) = &input.dry_run {
        scope_1859.boolean(*var_1860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1861 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1862) = &input.traffic_mirror_session_id {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]
    let mut scope_1863 = writer.prefix("DryRun");
    if let Some(var_1864) = &input.dry_run {
        scope_1863.boolean(*var_1864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1865 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1866) = &input.traffic_mirror_target_id {
        scope_1865.string(var_1866);
    }
    #[allow(unused_mut)]
    let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("TransitGatewayId");
    if let Some(var_1870) = &input.transit_gateway_id {
        scope_1869.string(var_1870);
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DryRun");
    if let Some(var_1872) = &input.dry_run {
        scope_1871.boolean(*var_1872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1874) = &input.transit_gateway_attachment_id {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("DryRun");
    if let Some(var_1876) = &input.dry_run {
        scope_1875.boolean(*var_1876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1878) = &input.transit_gateway_connect_peer_id {
        scope_1877.string(var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("DryRun");
    if let Some(var_1880) = &input.dry_run {
        scope_1879.boolean(*var_1880);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1882) = &input.transit_gateway_multicast_domain_id {
        scope_1881.string(var_1882);
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("DryRun");
    if let Some(var_1884) = &input.dry_run {
        scope_1883.boolean(*var_1884);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1886) = &input.transit_gateway_attachment_id {
        scope_1885.string(var_1886);
    }
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("DryRun");
    if let Some(var_1888) = &input.dry_run {
        scope_1887.boolean(*var_1888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1890) = &input.transit_gateway_route_table_id {
        scope_1889.string(var_1890);
    }
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("PrefixListId");
    if let Some(var_1892) = &input.prefix_list_id {
        scope_1891.string(var_1892);
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("DryRun");
    if let Some(var_1894) = &input.dry_run {
        scope_1893.boolean(*var_1894);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1896) = &input.transit_gateway_route_table_id {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1898) = &input.destination_cidr_block {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("DryRun");
    if let Some(var_1900) = &input.dry_run {
        scope_1899.boolean(*var_1900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1902) = &input.transit_gateway_route_table_id {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("DryRun");
    if let Some(var_1904) = &input.dry_run {
        scope_1903.boolean(*var_1904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1906) = &input.transit_gateway_attachment_id {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("DryRun");
    if let Some(var_1908) = &input.dry_run {
        scope_1907.boolean(*var_1908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("VolumeId");
    if let Some(var_1910) = &input.volume_id {
        scope_1909.string(var_1910);
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("DryRun");
    if let Some(var_1912) = &input.dry_run {
        scope_1911.boolean(*var_1912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("VpcId");
    if let Some(var_1914) = &input.vpc_id {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("DryRun");
    if let Some(var_1916) = &input.dry_run {
        scope_1915.boolean(*var_1916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("DryRun");
    if let Some(var_1918) = &input.dry_run {
        scope_1917.boolean(*var_1918);
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1920) = &input.connection_notification_ids {
        let mut list_1922 = scope_1919.start_list(true, Some("item"));
        for item_1921 in var_1920 {
            #[allow(unused_mut)]
            let mut entry_1923 = list_1922.entry();
            entry_1923.string(item_1921);
        }
        list_1922.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("DryRun");
    if let Some(var_1925) = &input.dry_run {
        scope_1924.boolean(*var_1925);
    }
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("VpcEndpointId");
    if let Some(var_1927) = &input.vpc_endpoint_ids {
        let mut list_1929 = scope_1926.start_list(true, Some("item"));
        for item_1928 in var_1927 {
            #[allow(unused_mut)]
            let mut entry_1930 = list_1929.entry();
            entry_1930.string(item_1928);
        }
        list_1929.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("DryRun");
    if let Some(var_1932) = &input.dry_run {
        scope_1931.boolean(*var_1932);
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("ServiceId");
    if let Some(var_1934) = &input.service_ids {
        let mut list_1936 = scope_1933.start_list(true, Some("item"));
        for item_1935 in var_1934 {
            #[allow(unused_mut)]
            let mut entry_1937 = list_1936.entry();
            entry_1937.string(item_1935);
        }
        list_1936.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("DryRun");
    if let Some(var_1939) = &input.dry_run {
        scope_1938.boolean(*var_1939);
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1941) = &input.vpc_peering_connection_id {
        scope_1940.string(var_1941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("VpnConnectionId");
    if let Some(var_1943) = &input.vpn_connection_id {
        scope_1942.string(var_1943);
    }
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("DryRun");
    if let Some(var_1945) = &input.dry_run {
        scope_1944.boolean(*var_1945);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1947) = &input.destination_cidr_block {
        scope_1946.string(var_1947);
    }
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("VpnConnectionId");
    if let Some(var_1949) = &input.vpn_connection_id {
        scope_1948.string(var_1949);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("VpnGatewayId");
    if let Some(var_1951) = &input.vpn_gateway_id {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("DryRun");
    if let Some(var_1953) = &input.dry_run {
        scope_1952.boolean(*var_1953);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("Cidr");
    if let Some(var_1955) = &input.cidr {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DryRun");
    if let Some(var_1957) = &input.dry_run {
        scope_1956.boolean(*var_1957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("DryRun");
    if let Some(var_1959) = &input.dry_run {
        scope_1958.boolean(*var_1959);
    }
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("IpamPoolId");
    if let Some(var_1961) = &input.ipam_pool_id {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("Cidr");
    if let Some(var_1963) = &input.cidr {
        scope_1962.string(var_1963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("DryRun");
    if let Some(var_1965) = &input.dry_run {
        scope_1964.boolean(*var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("PoolId");
    if let Some(var_1967) = &input.pool_id {
        scope_1966.string(var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("Cidr");
    if let Some(var_1969) = &input.cidr {
        scope_1968.string(var_1969);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("ImageId");
    if let Some(var_1971) = &input.image_id {
        scope_1970.string(var_1971);
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("DryRun");
    if let Some(var_1973) = &input.dry_run {
        scope_1972.boolean(*var_1973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("DryRun");
    if let Some(var_1975) = &input.dry_run {
        scope_1974.boolean(*var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("InstanceTagAttribute");
    if let Some(var_1977) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_1976, var_1977)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1979) = &input.transit_gateway_multicast_domain_id {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("GroupIpAddress");
    if let Some(var_1981) = &input.group_ip_address {
        scope_1980.string(var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1983) = &input.network_interface_ids {
        let mut list_1985 = scope_1982.start_list(true, Some("item"));
        for item_1984 in var_1983 {
            #[allow(unused_mut)]
            let mut entry_1986 = list_1985.entry();
            entry_1986.string(item_1984);
        }
        list_1985.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("DryRun");
    if let Some(var_1988) = &input.dry_run {
        scope_1987.boolean(*var_1988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1990) = &input.transit_gateway_multicast_domain_id {
        scope_1989.string(var_1990);
    }
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("GroupIpAddress");
    if let Some(var_1992) = &input.group_ip_address {
        scope_1991.string(var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_1994) = &input.network_interface_ids {
        let mut list_1996 = scope_1993.start_list(true, Some("item"));
        for item_1995 in var_1994 {
            #[allow(unused_mut)]
            let mut entry_1997 = list_1996.entry();
            entry_1997.string(item_1995);
        }
        list_1996.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1998 = writer.prefix("DryRun");
    if let Some(var_1999) = &input.dry_run {
        scope_1998.boolean(*var_1999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2000 = writer.prefix("AttributeName");
    if let Some(var_2001) = &input.attribute_names {
        let mut list_2003 = scope_2000.start_list(true, Some("attributeName"));
        for item_2002 in var_2001 {
            #[allow(unused_mut)]
            let mut entry_2004 = list_2003.entry();
            entry_2004.string(item_2002.as_str());
        }
        list_2003.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("DryRun");
    if let Some(var_2006) = &input.dry_run {
        scope_2005.boolean(*var_2006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("Filter");
    if let Some(var_2008) = &input.filters {
        let mut list_2010 = scope_2007.start_list(true, Some("Filter"));
        for item_2009 in var_2008 {
            #[allow(unused_mut)]
            let mut entry_2011 = list_2010.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2011, item_2009)?;
        }
        list_2010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("PublicIp");
    if let Some(var_2013) = &input.public_ips {
        let mut list_2015 = scope_2012.start_list(true, Some("PublicIp"));
        for item_2014 in var_2013 {
            #[allow(unused_mut)]
            let mut entry_2016 = list_2015.entry();
            entry_2016.string(item_2014);
        }
        list_2015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("AllocationId");
    if let Some(var_2018) = &input.allocation_ids {
        let mut list_2020 = scope_2017.start_list(true, Some("AllocationId"));
        for item_2019 in var_2018 {
            #[allow(unused_mut)]
            let mut entry_2021 = list_2020.entry();
            entry_2021.string(item_2019);
        }
        list_2020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2022 = writer.prefix("DryRun");
    if let Some(var_2023) = &input.dry_run {
        scope_2022.boolean(*var_2023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2024 = writer.prefix("AllocationId");
    if let Some(var_2025) = &input.allocation_ids {
        let mut list_2027 = scope_2024.start_list(true, Some("item"));
        for item_2026 in var_2025 {
            #[allow(unused_mut)]
            let mut entry_2028 = list_2027.entry();
            entry_2028.string(item_2026);
        }
        list_2027.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("Attribute");
    if let Some(var_2030) = &input.attribute {
        scope_2029.string(var_2030.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("NextToken");
    if let Some(var_2032) = &input.next_token {
        scope_2031.string(var_2032);
    }
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("MaxResults");
    if let Some(var_2034) = &input.max_results {
        scope_2033.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2034).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("DryRun");
    if let Some(var_2036) = &input.dry_run {
        scope_2035.boolean(*var_2036);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("DryRun");
    if let Some(var_2038) = &input.dry_run {
        scope_2037.boolean(*var_2038);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("Filter");
    if let Some(var_2040) = &input.filters {
        let mut list_2042 = scope_2039.start_list(true, Some("Filter"));
        for item_2041 in var_2040 {
            #[allow(unused_mut)]
            let mut entry_2043 = list_2042.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2043, item_2041)?;
        }
        list_2042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2044 = writer.prefix("ZoneName");
    if let Some(var_2045) = &input.zone_names {
        let mut list_2047 = scope_2044.start_list(true, Some("ZoneName"));
        for item_2046 in var_2045 {
            #[allow(unused_mut)]
            let mut entry_2048 = list_2047.entry();
            entry_2048.string(item_2046);
        }
        list_2047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("ZoneId");
    if let Some(var_2050) = &input.zone_ids {
        let mut list_2052 = scope_2049.start_list(true, Some("ZoneId"));
        for item_2051 in var_2050 {
            #[allow(unused_mut)]
            let mut entry_2053 = list_2052.entry();
            entry_2053.string(item_2051);
        }
        list_2052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2055) = &input.all_availability_zones {
        scope_2054.boolean(*var_2055);
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("DryRun");
    if let Some(var_2057) = &input.dry_run {
        scope_2056.boolean(*var_2057);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("BundleId");
    if let Some(var_2059) = &input.bundle_ids {
        let mut list_2061 = scope_2058.start_list(true, Some("BundleId"));
        for item_2060 in var_2059 {
            #[allow(unused_mut)]
            let mut entry_2062 = list_2061.entry();
            entry_2062.string(item_2060);
        }
        list_2061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("Filter");
    if let Some(var_2064) = &input.filters {
        let mut list_2066 = scope_2063.start_list(true, Some("Filter"));
        for item_2065 in var_2064 {
            #[allow(unused_mut)]
            let mut entry_2067 = list_2066.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2067, item_2065)?;
        }
        list_2066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("DryRun");
    if let Some(var_2069) = &input.dry_run {
        scope_2068.boolean(*var_2069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2070 = writer.prefix("DryRun");
    if let Some(var_2071) = &input.dry_run {
        scope_2070.boolean(*var_2071);
    }
    #[allow(unused_mut)]
    let mut scope_2072 = writer.prefix("MaxResults");
    if let Some(var_2073) = &input.max_results {
        scope_2072.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2073).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2074 = writer.prefix("NextToken");
    if let Some(var_2075) = &input.next_token {
        scope_2074.string(var_2075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2076 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2077) = &input.capacity_reservation_fleet_ids {
        let mut list_2079 = scope_2076.start_list(true, Some("item"));
        for item_2078 in var_2077 {
            #[allow(unused_mut)]
            let mut entry_2080 = list_2079.entry();
            entry_2080.string(item_2078);
        }
        list_2079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("NextToken");
    if let Some(var_2082) = &input.next_token {
        scope_2081.string(var_2082);
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("MaxResults");
    if let Some(var_2084) = &input.max_results {
        scope_2083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("Filter");
    if let Some(var_2086) = &input.filters {
        let mut list_2088 = scope_2085.start_list(true, Some("Filter"));
        for item_2087 in var_2086 {
            #[allow(unused_mut)]
            let mut entry_2089 = list_2088.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2089, item_2087)?;
        }
        list_2088.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2090 = writer.prefix("DryRun");
    if let Some(var_2091) = &input.dry_run {
        scope_2090.boolean(*var_2091);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2092 = writer.prefix("CapacityReservationId");
    if let Some(var_2093) = &input.capacity_reservation_ids {
        let mut list_2095 = scope_2092.start_list(true, Some("item"));
        for item_2094 in var_2093 {
            #[allow(unused_mut)]
            let mut entry_2096 = list_2095.entry();
            entry_2096.string(item_2094);
        }
        list_2095.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("NextToken");
    if let Some(var_2098) = &input.next_token {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("MaxResults");
    if let Some(var_2100) = &input.max_results {
        scope_2099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("Filter");
    if let Some(var_2102) = &input.filters {
        let mut list_2104 = scope_2101.start_list(true, Some("Filter"));
        for item_2103 in var_2102 {
            #[allow(unused_mut)]
            let mut entry_2105 = list_2104.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2105, item_2103)?;
        }
        list_2104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("DryRun");
    if let Some(var_2107) = &input.dry_run {
        scope_2106.boolean(*var_2107);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("CarrierGatewayId");
    if let Some(var_2109) = &input.carrier_gateway_ids {
        let mut list_2111 = scope_2108.start_list(true, None);
        for item_2110 in var_2109 {
            #[allow(unused_mut)]
            let mut entry_2112 = list_2111.entry();
            entry_2112.string(item_2110);
        }
        list_2111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("Filter");
    if let Some(var_2114) = &input.filters {
        let mut list_2116 = scope_2113.start_list(true, Some("Filter"));
        for item_2115 in var_2114 {
            #[allow(unused_mut)]
            let mut entry_2117 = list_2116.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2117, item_2115)?;
        }
        list_2116.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2118 = writer.prefix("MaxResults");
    if let Some(var_2119) = &input.max_results {
        scope_2118.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2119).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2120 = writer.prefix("NextToken");
    if let Some(var_2121) = &input.next_token {
        scope_2120.string(var_2121);
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("DryRun");
    if let Some(var_2123) = &input.dry_run {
        scope_2122.boolean(*var_2123);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("Filter");
    if let Some(var_2125) = &input.filters {
        let mut list_2127 = scope_2124.start_list(true, Some("Filter"));
        for item_2126 in var_2125 {
            #[allow(unused_mut)]
            let mut entry_2128 = list_2127.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2128, item_2126)?;
        }
        list_2127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("DryRun");
    if let Some(var_2130) = &input.dry_run {
        scope_2129.boolean(*var_2130);
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("InstanceId");
    if let Some(var_2132) = &input.instance_ids {
        let mut list_2134 = scope_2131.start_list(true, Some("InstanceId"));
        for item_2133 in var_2132 {
            #[allow(unused_mut)]
            let mut entry_2135 = list_2134.entry();
            entry_2135.string(item_2133);
        }
        list_2134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2136 = writer.prefix("MaxResults");
    if let Some(var_2137) = &input.max_results {
        scope_2136.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2137).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2138 = writer.prefix("NextToken");
    if let Some(var_2139) = &input.next_token {
        scope_2138.string(var_2139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2141) = &input.client_vpn_endpoint_id {
        scope_2140.string(var_2141);
    }
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("DryRun");
    if let Some(var_2143) = &input.dry_run {
        scope_2142.boolean(*var_2143);
    }
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("NextToken");
    if let Some(var_2145) = &input.next_token {
        scope_2144.string(var_2145);
    }
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("Filter");
    if let Some(var_2147) = &input.filters {
        let mut list_2149 = scope_2146.start_list(true, Some("Filter"));
        for item_2148 in var_2147 {
            #[allow(unused_mut)]
            let mut entry_2150 = list_2149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2150, item_2148)?;
        }
        list_2149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2151 = writer.prefix("MaxResults");
    if let Some(var_2152) = &input.max_results {
        scope_2151.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2152).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2153 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2154) = &input.client_vpn_endpoint_id {
        scope_2153.string(var_2154);
    }
    #[allow(unused_mut)]
    let mut scope_2155 = writer.prefix("Filter");
    if let Some(var_2156) = &input.filters {
        let mut list_2158 = scope_2155.start_list(true, Some("Filter"));
        for item_2157 in var_2156 {
            #[allow(unused_mut)]
            let mut entry_2159 = list_2158.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2159, item_2157)?;
        }
        list_2158.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2160 = writer.prefix("NextToken");
    if let Some(var_2161) = &input.next_token {
        scope_2160.string(var_2161);
    }
    #[allow(unused_mut)]
    let mut scope_2162 = writer.prefix("MaxResults");
    if let Some(var_2163) = &input.max_results {
        scope_2162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2164 = writer.prefix("DryRun");
    if let Some(var_2165) = &input.dry_run {
        scope_2164.boolean(*var_2165);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2166 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2167) = &input.client_vpn_endpoint_ids {
        let mut list_2169 = scope_2166.start_list(true, Some("item"));
        for item_2168 in var_2167 {
            #[allow(unused_mut)]
            let mut entry_2170 = list_2169.entry();
            entry_2170.string(item_2168);
        }
        list_2169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("MaxResults");
    if let Some(var_2172) = &input.max_results {
        scope_2171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2172).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2173 = writer.prefix("NextToken");
    if let Some(var_2174) = &input.next_token {
        scope_2173.string(var_2174);
    }
    #[allow(unused_mut)]
    let mut scope_2175 = writer.prefix("Filter");
    if let Some(var_2176) = &input.filters {
        let mut list_2178 = scope_2175.start_list(true, Some("Filter"));
        for item_2177 in var_2176 {
            #[allow(unused_mut)]
            let mut entry_2179 = list_2178.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2179, item_2177)?;
        }
        list_2178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2180 = writer.prefix("DryRun");
    if let Some(var_2181) = &input.dry_run {
        scope_2180.boolean(*var_2181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2182 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2183) = &input.client_vpn_endpoint_id {
        scope_2182.string(var_2183);
    }
    #[allow(unused_mut)]
    let mut scope_2184 = writer.prefix("Filter");
    if let Some(var_2185) = &input.filters {
        let mut list_2187 = scope_2184.start_list(true, Some("Filter"));
        for item_2186 in var_2185 {
            #[allow(unused_mut)]
            let mut entry_2188 = list_2187.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2188, item_2186)?;
        }
        list_2187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2189 = writer.prefix("MaxResults");
    if let Some(var_2190) = &input.max_results {
        scope_2189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2191 = writer.prefix("NextToken");
    if let Some(var_2192) = &input.next_token {
        scope_2191.string(var_2192);
    }
    #[allow(unused_mut)]
    let mut scope_2193 = writer.prefix("DryRun");
    if let Some(var_2194) = &input.dry_run {
        scope_2193.boolean(*var_2194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2195 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2196) = &input.client_vpn_endpoint_id {
        scope_2195.string(var_2196);
    }
    #[allow(unused_mut)]
    let mut scope_2197 = writer.prefix("AssociationIds");
    if let Some(var_2198) = &input.association_ids {
        let mut list_2200 = scope_2197.start_list(true, Some("item"));
        for item_2199 in var_2198 {
            #[allow(unused_mut)]
            let mut entry_2201 = list_2200.entry();
            entry_2201.string(item_2199);
        }
        list_2200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2202 = writer.prefix("MaxResults");
    if let Some(var_2203) = &input.max_results {
        scope_2202.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2203).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2204 = writer.prefix("NextToken");
    if let Some(var_2205) = &input.next_token {
        scope_2204.string(var_2205);
    }
    #[allow(unused_mut)]
    let mut scope_2206 = writer.prefix("Filter");
    if let Some(var_2207) = &input.filters {
        let mut list_2209 = scope_2206.start_list(true, Some("Filter"));
        for item_2208 in var_2207 {
            #[allow(unused_mut)]
            let mut entry_2210 = list_2209.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2210, item_2208)?;
        }
        list_2209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2211 = writer.prefix("DryRun");
    if let Some(var_2212) = &input.dry_run {
        scope_2211.boolean(*var_2212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2213 = writer.prefix("PoolId");
    if let Some(var_2214) = &input.pool_ids {
        let mut list_2216 = scope_2213.start_list(true, Some("item"));
        for item_2215 in var_2214 {
            #[allow(unused_mut)]
            let mut entry_2217 = list_2216.entry();
            entry_2217.string(item_2215);
        }
        list_2216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("Filter");
    if let Some(var_2219) = &input.filters {
        let mut list_2221 = scope_2218.start_list(true, Some("Filter"));
        for item_2220 in var_2219 {
            #[allow(unused_mut)]
            let mut entry_2222 = list_2221.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2222, item_2220)?;
        }
        list_2221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2223 = writer.prefix("MaxResults");
    if let Some(var_2224) = &input.max_results {
        scope_2223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2225 = writer.prefix("NextToken");
    if let Some(var_2226) = &input.next_token {
        scope_2225.string(var_2226);
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("DryRun");
    if let Some(var_2228) = &input.dry_run {
        scope_2227.boolean(*var_2228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("ConversionTaskId");
    if let Some(var_2230) = &input.conversion_task_ids {
        let mut list_2232 = scope_2229.start_list(true, Some("item"));
        for item_2231 in var_2230 {
            #[allow(unused_mut)]
            let mut entry_2233 = list_2232.entry();
            entry_2233.string(item_2231);
        }
        list_2232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2234 = writer.prefix("DryRun");
    if let Some(var_2235) = &input.dry_run {
        scope_2234.boolean(*var_2235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2236 = writer.prefix("CustomerGatewayId");
    if let Some(var_2237) = &input.customer_gateway_ids {
        let mut list_2239 = scope_2236.start_list(true, Some("CustomerGatewayId"));
        for item_2238 in var_2237 {
            #[allow(unused_mut)]
            let mut entry_2240 = list_2239.entry();
            entry_2240.string(item_2238);
        }
        list_2239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2241 = writer.prefix("Filter");
    if let Some(var_2242) = &input.filters {
        let mut list_2244 = scope_2241.start_list(true, Some("Filter"));
        for item_2243 in var_2242 {
            #[allow(unused_mut)]
            let mut entry_2245 = list_2244.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2245, item_2243)?;
        }
        list_2244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2246 = writer.prefix("DryRun");
    if let Some(var_2247) = &input.dry_run {
        scope_2246.boolean(*var_2247);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2248 = writer.prefix("DhcpOptionsId");
    if let Some(var_2249) = &input.dhcp_options_ids {
        let mut list_2251 = scope_2248.start_list(true, Some("DhcpOptionsId"));
        for item_2250 in var_2249 {
            #[allow(unused_mut)]
            let mut entry_2252 = list_2251.entry();
            entry_2252.string(item_2250);
        }
        list_2251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2253 = writer.prefix("Filter");
    if let Some(var_2254) = &input.filters {
        let mut list_2256 = scope_2253.start_list(true, Some("Filter"));
        for item_2255 in var_2254 {
            #[allow(unused_mut)]
            let mut entry_2257 = list_2256.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2257, item_2255)?;
        }
        list_2256.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2258 = writer.prefix("DryRun");
    if let Some(var_2259) = &input.dry_run {
        scope_2258.boolean(*var_2259);
    }
    #[allow(unused_mut)]
    let mut scope_2260 = writer.prefix("NextToken");
    if let Some(var_2261) = &input.next_token {
        scope_2260.string(var_2261);
    }
    #[allow(unused_mut)]
    let mut scope_2262 = writer.prefix("MaxResults");
    if let Some(var_2263) = &input.max_results {
        scope_2262.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2263).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2264 = writer.prefix("DryRun");
    if let Some(var_2265) = &input.dry_run {
        scope_2264.boolean(*var_2265);
    }
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2267) = &input.egress_only_internet_gateway_ids {
        let mut list_2269 = scope_2266.start_list(true, Some("item"));
        for item_2268 in var_2267 {
            #[allow(unused_mut)]
            let mut entry_2270 = list_2269.entry();
            entry_2270.string(item_2268);
        }
        list_2269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2271 = writer.prefix("MaxResults");
    if let Some(var_2272) = &input.max_results {
        scope_2271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2273 = writer.prefix("NextToken");
    if let Some(var_2274) = &input.next_token {
        scope_2273.string(var_2274);
    }
    #[allow(unused_mut)]
    let mut scope_2275 = writer.prefix("Filter");
    if let Some(var_2276) = &input.filters {
        let mut list_2278 = scope_2275.start_list(true, Some("Filter"));
        for item_2277 in var_2276 {
            #[allow(unused_mut)]
            let mut entry_2279 = list_2278.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2279, item_2277)?;
        }
        list_2278.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2280 = writer.prefix("ElasticGpuId");
    if let Some(var_2281) = &input.elastic_gpu_ids {
        let mut list_2283 = scope_2280.start_list(true, Some("item"));
        for item_2282 in var_2281 {
            #[allow(unused_mut)]
            let mut entry_2284 = list_2283.entry();
            entry_2284.string(item_2282);
        }
        list_2283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("DryRun");
    if let Some(var_2286) = &input.dry_run {
        scope_2285.boolean(*var_2286);
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("Filter");
    if let Some(var_2288) = &input.filters {
        let mut list_2290 = scope_2287.start_list(true, Some("Filter"));
        for item_2289 in var_2288 {
            #[allow(unused_mut)]
            let mut entry_2291 = list_2290.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2291, item_2289)?;
        }
        list_2290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2292 = writer.prefix("MaxResults");
    if let Some(var_2293) = &input.max_results {
        scope_2292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2294 = writer.prefix("NextToken");
    if let Some(var_2295) = &input.next_token {
        scope_2294.string(var_2295);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2296 = writer.prefix("DryRun");
    if let Some(var_2297) = &input.dry_run {
        scope_2296.boolean(*var_2297);
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("Filter");
    if let Some(var_2299) = &input.filters {
        let mut list_2301 = scope_2298.start_list(true, Some("Filter"));
        for item_2300 in var_2299 {
            #[allow(unused_mut)]
            let mut entry_2302 = list_2301.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2302, item_2300)?;
        }
        list_2301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2303 = writer.prefix("ExportImageTaskId");
    if let Some(var_2304) = &input.export_image_task_ids {
        let mut list_2306 = scope_2303.start_list(true, Some("ExportImageTaskId"));
        for item_2305 in var_2304 {
            #[allow(unused_mut)]
            let mut entry_2307 = list_2306.entry();
            entry_2307.string(item_2305);
        }
        list_2306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2308 = writer.prefix("MaxResults");
    if let Some(var_2309) = &input.max_results {
        scope_2308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2309).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("NextToken");
    if let Some(var_2311) = &input.next_token {
        scope_2310.string(var_2311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("ExportTaskId");
    if let Some(var_2313) = &input.export_task_ids {
        let mut list_2315 = scope_2312.start_list(true, Some("ExportTaskId"));
        for item_2314 in var_2313 {
            #[allow(unused_mut)]
            let mut entry_2316 = list_2315.entry();
            entry_2316.string(item_2314);
        }
        list_2315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2317 = writer.prefix("Filter");
    if let Some(var_2318) = &input.filters {
        let mut list_2320 = scope_2317.start_list(true, Some("Filter"));
        for item_2319 in var_2318 {
            #[allow(unused_mut)]
            let mut entry_2321 = list_2320.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2321, item_2319)?;
        }
        list_2320.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2322 = writer.prefix("Filter");
    if let Some(var_2323) = &input.filters {
        let mut list_2325 = scope_2322.start_list(true, Some("Filter"));
        for item_2324 in var_2323 {
            #[allow(unused_mut)]
            let mut entry_2326 = list_2325.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2326, item_2324)?;
        }
        list_2325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2327 = writer.prefix("MaxResults");
    if let Some(var_2328) = &input.max_results {
        scope_2327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2329 = writer.prefix("NextToken");
    if let Some(var_2330) = &input.next_token {
        scope_2329.string(var_2330);
    }
    #[allow(unused_mut)]
    let mut scope_2331 = writer.prefix("DryRun");
    if let Some(var_2332) = &input.dry_run {
        scope_2331.boolean(*var_2332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("DryRun");
    if let Some(var_2334) = &input.dry_run {
        scope_2333.boolean(*var_2334);
    }
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("EventType");
    if let Some(var_2336) = &input.event_type {
        scope_2335.string(var_2336.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2337 = writer.prefix("MaxResults");
    if let Some(var_2338) = &input.max_results {
        scope_2337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2338).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2339 = writer.prefix("NextToken");
    if let Some(var_2340) = &input.next_token {
        scope_2339.string(var_2340);
    }
    #[allow(unused_mut)]
    let mut scope_2341 = writer.prefix("FleetId");
    if let Some(var_2342) = &input.fleet_id {
        scope_2341.string(var_2342);
    }
    #[allow(unused_mut)]
    let mut scope_2343 = writer.prefix("StartTime");
    if let Some(var_2344) = &input.start_time {
        scope_2343.date_time(var_2344, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2345 = writer.prefix("DryRun");
    if let Some(var_2346) = &input.dry_run {
        scope_2345.boolean(*var_2346);
    }
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("MaxResults");
    if let Some(var_2348) = &input.max_results {
        scope_2347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2349 = writer.prefix("NextToken");
    if let Some(var_2350) = &input.next_token {
        scope_2349.string(var_2350);
    }
    #[allow(unused_mut)]
    let mut scope_2351 = writer.prefix("FleetId");
    if let Some(var_2352) = &input.fleet_id {
        scope_2351.string(var_2352);
    }
    #[allow(unused_mut)]
    let mut scope_2353 = writer.prefix("Filter");
    if let Some(var_2354) = &input.filters {
        let mut list_2356 = scope_2353.start_list(true, Some("Filter"));
        for item_2355 in var_2354 {
            #[allow(unused_mut)]
            let mut entry_2357 = list_2356.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2357, item_2355)?;
        }
        list_2356.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2358 = writer.prefix("DryRun");
    if let Some(var_2359) = &input.dry_run {
        scope_2358.boolean(*var_2359);
    }
    #[allow(unused_mut)]
    let mut scope_2360 = writer.prefix("MaxResults");
    if let Some(var_2361) = &input.max_results {
        scope_2360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2362 = writer.prefix("NextToken");
    if let Some(var_2363) = &input.next_token {
        scope_2362.string(var_2363);
    }
    #[allow(unused_mut)]
    let mut scope_2364 = writer.prefix("FleetId");
    if let Some(var_2365) = &input.fleet_ids {
        let mut list_2367 = scope_2364.start_list(true, None);
        for item_2366 in var_2365 {
            #[allow(unused_mut)]
            let mut entry_2368 = list_2367.entry();
            entry_2368.string(item_2366);
        }
        list_2367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2369 = writer.prefix("Filter");
    if let Some(var_2370) = &input.filters {
        let mut list_2372 = scope_2369.start_list(true, Some("Filter"));
        for item_2371 in var_2370 {
            #[allow(unused_mut)]
            let mut entry_2373 = list_2372.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2373, item_2371)?;
        }
        list_2372.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("DryRun");
    if let Some(var_2375) = &input.dry_run {
        scope_2374.boolean(*var_2375);
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("Filter");
    if let Some(var_2377) = &input.filter {
        let mut list_2379 = scope_2376.start_list(true, Some("Filter"));
        for item_2378 in var_2377 {
            #[allow(unused_mut)]
            let mut entry_2380 = list_2379.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2380, item_2378)?;
        }
        list_2379.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2381 = writer.prefix("FlowLogId");
    if let Some(var_2382) = &input.flow_log_ids {
        let mut list_2384 = scope_2381.start_list(true, Some("item"));
        for item_2383 in var_2382 {
            #[allow(unused_mut)]
            let mut entry_2385 = list_2384.entry();
            entry_2385.string(item_2383);
        }
        list_2384.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("MaxResults");
    if let Some(var_2387) = &input.max_results {
        scope_2386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("NextToken");
    if let Some(var_2389) = &input.next_token {
        scope_2388.string(var_2389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("DryRun");
    if let Some(var_2391) = &input.dry_run {
        scope_2390.boolean(*var_2391);
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("FpgaImageId");
    if let Some(var_2393) = &input.fpga_image_id {
        scope_2392.string(var_2393);
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("Attribute");
    if let Some(var_2395) = &input.attribute {
        scope_2394.string(var_2395.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2396 = writer.prefix("DryRun");
    if let Some(var_2397) = &input.dry_run {
        scope_2396.boolean(*var_2397);
    }
    #[allow(unused_mut)]
    let mut scope_2398 = writer.prefix("FpgaImageId");
    if let Some(var_2399) = &input.fpga_image_ids {
        let mut list_2401 = scope_2398.start_list(true, Some("item"));
        for item_2400 in var_2399 {
            #[allow(unused_mut)]
            let mut entry_2402 = list_2401.entry();
            entry_2402.string(item_2400);
        }
        list_2401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("Owner");
    if let Some(var_2404) = &input.owners {
        let mut list_2406 = scope_2403.start_list(true, Some("Owner"));
        for item_2405 in var_2404 {
            #[allow(unused_mut)]
            let mut entry_2407 = list_2406.entry();
            entry_2407.string(item_2405);
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2408 = writer.prefix("Filter");
    if let Some(var_2409) = &input.filters {
        let mut list_2411 = scope_2408.start_list(true, Some("Filter"));
        for item_2410 in var_2409 {
            #[allow(unused_mut)]
            let mut entry_2412 = list_2411.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2412, item_2410)?;
        }
        list_2411.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2413 = writer.prefix("NextToken");
    if let Some(var_2414) = &input.next_token {
        scope_2413.string(var_2414);
    }
    #[allow(unused_mut)]
    let mut scope_2415 = writer.prefix("MaxResults");
    if let Some(var_2416) = &input.max_results {
        scope_2415.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2416).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("Filter");
    if let Some(var_2418) = &input.filter {
        let mut list_2420 = scope_2417.start_list(true, Some("Filter"));
        for item_2419 in var_2418 {
            #[allow(unused_mut)]
            let mut entry_2421 = list_2420.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2421, item_2419)?;
        }
        list_2420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("MaxDuration");
    if let Some(var_2423) = &input.max_duration {
        scope_2422.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2423).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2424 = writer.prefix("MaxResults");
    if let Some(var_2425) = &input.max_results {
        scope_2424.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2425).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2426 = writer.prefix("MinDuration");
    if let Some(var_2427) = &input.min_duration {
        scope_2426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2428 = writer.prefix("NextToken");
    if let Some(var_2429) = &input.next_token {
        scope_2428.string(var_2429);
    }
    #[allow(unused_mut)]
    let mut scope_2430 = writer.prefix("OfferingId");
    if let Some(var_2431) = &input.offering_id {
        scope_2430.string(var_2431);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2432 = writer.prefix("Filter");
    if let Some(var_2433) = &input.filter {
        let mut list_2435 = scope_2432.start_list(true, Some("Filter"));
        for item_2434 in var_2433 {
            #[allow(unused_mut)]
            let mut entry_2436 = list_2435.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2436, item_2434)?;
        }
        list_2435.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("HostReservationIdSet");
    if let Some(var_2438) = &input.host_reservation_id_set {
        let mut list_2440 = scope_2437.start_list(true, Some("item"));
        for item_2439 in var_2438 {
            #[allow(unused_mut)]
            let mut entry_2441 = list_2440.entry();
            entry_2441.string(item_2439);
        }
        list_2440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2442 = writer.prefix("MaxResults");
    if let Some(var_2443) = &input.max_results {
        scope_2442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("NextToken");
    if let Some(var_2445) = &input.next_token {
        scope_2444.string(var_2445);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2446 = writer.prefix("Filter");
    if let Some(var_2447) = &input.filter {
        let mut list_2449 = scope_2446.start_list(true, Some("Filter"));
        for item_2448 in var_2447 {
            #[allow(unused_mut)]
            let mut entry_2450 = list_2449.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2450, item_2448)?;
        }
        list_2449.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2451 = writer.prefix("HostId");
    if let Some(var_2452) = &input.host_ids {
        let mut list_2454 = scope_2451.start_list(true, Some("item"));
        for item_2453 in var_2452 {
            #[allow(unused_mut)]
            let mut entry_2455 = list_2454.entry();
            entry_2455.string(item_2453);
        }
        list_2454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("MaxResults");
    if let Some(var_2457) = &input.max_results {
        scope_2456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2457).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("NextToken");
    if let Some(var_2459) = &input.next_token {
        scope_2458.string(var_2459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2460 = writer.prefix("AssociationId");
    if let Some(var_2461) = &input.association_ids {
        let mut list_2463 = scope_2460.start_list(true, Some("AssociationId"));
        for item_2462 in var_2461 {
            #[allow(unused_mut)]
            let mut entry_2464 = list_2463.entry();
            entry_2464.string(item_2462);
        }
        list_2463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("Filter");
    if let Some(var_2466) = &input.filters {
        let mut list_2468 = scope_2465.start_list(true, Some("Filter"));
        for item_2467 in var_2466 {
            #[allow(unused_mut)]
            let mut entry_2469 = list_2468.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2469, item_2467)?;
        }
        list_2468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2470 = writer.prefix("MaxResults");
    if let Some(var_2471) = &input.max_results {
        scope_2470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2472 = writer.prefix("NextToken");
    if let Some(var_2473) = &input.next_token {
        scope_2472.string(var_2473);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2474 = writer.prefix("PrincipalArn");
    if let Some(var_2475) = &input.principal_arn {
        scope_2474.string(var_2475);
    }
    #[allow(unused_mut)]
    let mut scope_2476 = writer.prefix("Resource");
    if let Some(var_2477) = &input.resource {
        scope_2476.string(var_2477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2478 = writer.prefix("Resource");
    if let Some(var_2479) = &input.resource {
        scope_2478.string(var_2479);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2480 = writer.prefix("Attribute");
    if let Some(var_2481) = &input.attribute {
        scope_2480.string(var_2481.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2482 = writer.prefix("ImageId");
    if let Some(var_2483) = &input.image_id {
        scope_2482.string(var_2483);
    }
    #[allow(unused_mut)]
    let mut scope_2484 = writer.prefix("DryRun");
    if let Some(var_2485) = &input.dry_run {
        scope_2484.boolean(*var_2485);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2486 = writer.prefix("ExecutableBy");
    if let Some(var_2487) = &input.executable_users {
        let mut list_2489 = scope_2486.start_list(true, Some("ExecutableBy"));
        for item_2488 in var_2487 {
            #[allow(unused_mut)]
            let mut entry_2490 = list_2489.entry();
            entry_2490.string(item_2488);
        }
        list_2489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2491 = writer.prefix("Filter");
    if let Some(var_2492) = &input.filters {
        let mut list_2494 = scope_2491.start_list(true, Some("Filter"));
        for item_2493 in var_2492 {
            #[allow(unused_mut)]
            let mut entry_2495 = list_2494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2495, item_2493)?;
        }
        list_2494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2496 = writer.prefix("ImageId");
    if let Some(var_2497) = &input.image_ids {
        let mut list_2499 = scope_2496.start_list(true, Some("ImageId"));
        for item_2498 in var_2497 {
            #[allow(unused_mut)]
            let mut entry_2500 = list_2499.entry();
            entry_2500.string(item_2498);
        }
        list_2499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2501 = writer.prefix("Owner");
    if let Some(var_2502) = &input.owners {
        let mut list_2504 = scope_2501.start_list(true, Some("Owner"));
        for item_2503 in var_2502 {
            #[allow(unused_mut)]
            let mut entry_2505 = list_2504.entry();
            entry_2505.string(item_2503);
        }
        list_2504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("IncludeDeprecated");
    if let Some(var_2507) = &input.include_deprecated {
        scope_2506.boolean(*var_2507);
    }
    #[allow(unused_mut)]
    let mut scope_2508 = writer.prefix("DryRun");
    if let Some(var_2509) = &input.dry_run {
        scope_2508.boolean(*var_2509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2510 = writer.prefix("DryRun");
    if let Some(var_2511) = &input.dry_run {
        scope_2510.boolean(*var_2511);
    }
    #[allow(unused_mut)]
    let mut scope_2512 = writer.prefix("Filters");
    if let Some(var_2513) = &input.filters {
        let mut list_2515 = scope_2512.start_list(true, Some("Filter"));
        for item_2514 in var_2513 {
            #[allow(unused_mut)]
            let mut entry_2516 = list_2515.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2516, item_2514)?;
        }
        list_2515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("ImportTaskId");
    if let Some(var_2518) = &input.import_task_ids {
        let mut list_2520 = scope_2517.start_list(true, Some("ImportTaskId"));
        for item_2519 in var_2518 {
            #[allow(unused_mut)]
            let mut entry_2521 = list_2520.entry();
            entry_2521.string(item_2519);
        }
        list_2520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2522 = writer.prefix("MaxResults");
    if let Some(var_2523) = &input.max_results {
        scope_2522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2523).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2524 = writer.prefix("NextToken");
    if let Some(var_2525) = &input.next_token {
        scope_2524.string(var_2525);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2526 = writer.prefix("DryRun");
    if let Some(var_2527) = &input.dry_run {
        scope_2526.boolean(*var_2527);
    }
    #[allow(unused_mut)]
    let mut scope_2528 = writer.prefix("Filters");
    if let Some(var_2529) = &input.filters {
        let mut list_2531 = scope_2528.start_list(true, Some("Filter"));
        for item_2530 in var_2529 {
            #[allow(unused_mut)]
            let mut entry_2532 = list_2531.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2532, item_2530)?;
        }
        list_2531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2533 = writer.prefix("ImportTaskId");
    if let Some(var_2534) = &input.import_task_ids {
        let mut list_2536 = scope_2533.start_list(true, Some("ImportTaskId"));
        for item_2535 in var_2534 {
            #[allow(unused_mut)]
            let mut entry_2537 = list_2536.entry();
            entry_2537.string(item_2535);
        }
        list_2536.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2538 = writer.prefix("MaxResults");
    if let Some(var_2539) = &input.max_results {
        scope_2538.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2539).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2540 = writer.prefix("NextToken");
    if let Some(var_2541) = &input.next_token {
        scope_2540.string(var_2541);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2542 = writer.prefix("Attribute");
    if let Some(var_2543) = &input.attribute {
        scope_2542.string(var_2543.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2544 = writer.prefix("DryRun");
    if let Some(var_2545) = &input.dry_run {
        scope_2544.boolean(*var_2545);
    }
    #[allow(unused_mut)]
    let mut scope_2546 = writer.prefix("InstanceId");
    if let Some(var_2547) = &input.instance_id {
        scope_2546.string(var_2547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2548 = writer.prefix("DryRun");
    if let Some(var_2549) = &input.dry_run {
        scope_2548.boolean(*var_2549);
    }
    #[allow(unused_mut)]
    let mut scope_2550 = writer.prefix("Filter");
    if let Some(var_2551) = &input.filters {
        let mut list_2553 = scope_2550.start_list(true, Some("Filter"));
        for item_2552 in var_2551 {
            #[allow(unused_mut)]
            let mut entry_2554 = list_2553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2554, item_2552)?;
        }
        list_2553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2555 = writer.prefix("InstanceId");
    if let Some(var_2556) = &input.instance_ids {
        let mut list_2558 = scope_2555.start_list(true, Some("InstanceId"));
        for item_2557 in var_2556 {
            #[allow(unused_mut)]
            let mut entry_2559 = list_2558.entry();
            entry_2559.string(item_2557);
        }
        list_2558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2560 = writer.prefix("MaxResults");
    if let Some(var_2561) = &input.max_results {
        scope_2560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2562 = writer.prefix("NextToken");
    if let Some(var_2563) = &input.next_token {
        scope_2562.string(var_2563);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2564 = writer.prefix("DryRun");
    if let Some(var_2565) = &input.dry_run {
        scope_2564.boolean(*var_2565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2566 = writer.prefix("DryRun");
    if let Some(var_2567) = &input.dry_run {
        scope_2566.boolean(*var_2567);
    }
    #[allow(unused_mut)]
    let mut scope_2568 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2569) = &input.instance_event_window_ids {
        let mut list_2571 = scope_2568.start_list(true, Some("InstanceEventWindowId"));
        for item_2570 in var_2569 {
            #[allow(unused_mut)]
            let mut entry_2572 = list_2571.entry();
            entry_2572.string(item_2570);
        }
        list_2571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2573 = writer.prefix("Filter");
    if let Some(var_2574) = &input.filters {
        let mut list_2576 = scope_2573.start_list(true, Some("Filter"));
        for item_2575 in var_2574 {
            #[allow(unused_mut)]
            let mut entry_2577 = list_2576.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2577, item_2575)?;
        }
        list_2576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2578 = writer.prefix("MaxResults");
    if let Some(var_2579) = &input.max_results {
        scope_2578.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2579).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2580 = writer.prefix("NextToken");
    if let Some(var_2581) = &input.next_token {
        scope_2580.string(var_2581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2582 = writer.prefix("Filter");
    if let Some(var_2583) = &input.filters {
        let mut list_2585 = scope_2582.start_list(true, Some("Filter"));
        for item_2584 in var_2583 {
            #[allow(unused_mut)]
            let mut entry_2586 = list_2585.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2586, item_2584)?;
        }
        list_2585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("InstanceId");
    if let Some(var_2588) = &input.instance_ids {
        let mut list_2590 = scope_2587.start_list(true, Some("InstanceId"));
        for item_2589 in var_2588 {
            #[allow(unused_mut)]
            let mut entry_2591 = list_2590.entry();
            entry_2591.string(item_2589);
        }
        list_2590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2592 = writer.prefix("DryRun");
    if let Some(var_2593) = &input.dry_run {
        scope_2592.boolean(*var_2593);
    }
    #[allow(unused_mut)]
    let mut scope_2594 = writer.prefix("MaxResults");
    if let Some(var_2595) = &input.max_results {
        scope_2594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("NextToken");
    if let Some(var_2597) = &input.next_token {
        scope_2596.string(var_2597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2598 = writer.prefix("Filter");
    if let Some(var_2599) = &input.filters {
        let mut list_2601 = scope_2598.start_list(true, Some("Filter"));
        for item_2600 in var_2599 {
            #[allow(unused_mut)]
            let mut entry_2602 = list_2601.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2602, item_2600)?;
        }
        list_2601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("InstanceId");
    if let Some(var_2604) = &input.instance_ids {
        let mut list_2606 = scope_2603.start_list(true, Some("InstanceId"));
        for item_2605 in var_2604 {
            #[allow(unused_mut)]
            let mut entry_2607 = list_2606.entry();
            entry_2607.string(item_2605);
        }
        list_2606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2608 = writer.prefix("MaxResults");
    if let Some(var_2609) = &input.max_results {
        scope_2608.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2609).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2610 = writer.prefix("NextToken");
    if let Some(var_2611) = &input.next_token {
        scope_2610.string(var_2611);
    }
    #[allow(unused_mut)]
    let mut scope_2612 = writer.prefix("DryRun");
    if let Some(var_2613) = &input.dry_run {
        scope_2612.boolean(*var_2613);
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("IncludeAllInstances");
    if let Some(var_2615) = &input.include_all_instances {
        scope_2614.boolean(*var_2615);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2616 = writer.prefix("DryRun");
    if let Some(var_2617) = &input.dry_run {
        scope_2616.boolean(*var_2617);
    }
    #[allow(unused_mut)]
    let mut scope_2618 = writer.prefix("LocationType");
    if let Some(var_2619) = &input.location_type {
        scope_2618.string(var_2619.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2620 = writer.prefix("Filter");
    if let Some(var_2621) = &input.filters {
        let mut list_2623 = scope_2620.start_list(true, Some("Filter"));
        for item_2622 in var_2621 {
            #[allow(unused_mut)]
            let mut entry_2624 = list_2623.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2624, item_2622)?;
        }
        list_2623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2625 = writer.prefix("MaxResults");
    if let Some(var_2626) = &input.max_results {
        scope_2625.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2627 = writer.prefix("NextToken");
    if let Some(var_2628) = &input.next_token {
        scope_2627.string(var_2628);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2629 = writer.prefix("DryRun");
    if let Some(var_2630) = &input.dry_run {
        scope_2629.boolean(*var_2630);
    }
    #[allow(unused_mut)]
    let mut scope_2631 = writer.prefix("InstanceType");
    if let Some(var_2632) = &input.instance_types {
        let mut list_2634 = scope_2631.start_list(true, None);
        for item_2633 in var_2632 {
            #[allow(unused_mut)]
            let mut entry_2635 = list_2634.entry();
            entry_2635.string(item_2633.as_str());
        }
        list_2634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2636 = writer.prefix("Filter");
    if let Some(var_2637) = &input.filters {
        let mut list_2639 = scope_2636.start_list(true, Some("Filter"));
        for item_2638 in var_2637 {
            #[allow(unused_mut)]
            let mut entry_2640 = list_2639.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2640, item_2638)?;
        }
        list_2639.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2641 = writer.prefix("MaxResults");
    if let Some(var_2642) = &input.max_results {
        scope_2641.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2642).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2643 = writer.prefix("NextToken");
    if let Some(var_2644) = &input.next_token {
        scope_2643.string(var_2644);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2645 = writer.prefix("Filter");
    if let Some(var_2646) = &input.filters {
        let mut list_2648 = scope_2645.start_list(true, Some("Filter"));
        for item_2647 in var_2646 {
            #[allow(unused_mut)]
            let mut entry_2649 = list_2648.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2649, item_2647)?;
        }
        list_2648.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2650 = writer.prefix("DryRun");
    if let Some(var_2651) = &input.dry_run {
        scope_2650.boolean(*var_2651);
    }
    #[allow(unused_mut)]
    let mut scope_2652 = writer.prefix("InternetGatewayId");
    if let Some(var_2653) = &input.internet_gateway_ids {
        let mut list_2655 = scope_2652.start_list(true, Some("item"));
        for item_2654 in var_2653 {
            #[allow(unused_mut)]
            let mut entry_2656 = list_2655.entry();
            entry_2656.string(item_2654);
        }
        list_2655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("NextToken");
    if let Some(var_2658) = &input.next_token {
        scope_2657.string(var_2658);
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("MaxResults");
    if let Some(var_2660) = &input.max_results {
        scope_2659.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2660).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("DryRun");
    if let Some(var_2662) = &input.dry_run {
        scope_2661.boolean(*var_2662);
    }
    #[allow(unused_mut)]
    let mut scope_2663 = writer.prefix("Filter");
    if let Some(var_2664) = &input.filters {
        let mut list_2666 = scope_2663.start_list(true, Some("Filter"));
        for item_2665 in var_2664 {
            #[allow(unused_mut)]
            let mut entry_2667 = list_2666.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2667, item_2665)?;
        }
        list_2666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("MaxResults");
    if let Some(var_2669) = &input.max_results {
        scope_2668.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2669).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2670 = writer.prefix("NextToken");
    if let Some(var_2671) = &input.next_token {
        scope_2670.string(var_2671);
    }
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("IpamPoolId");
    if let Some(var_2673) = &input.ipam_pool_ids {
        let mut list_2675 = scope_2672.start_list(true, Some("item"));
        for item_2674 in var_2673 {
            #[allow(unused_mut)]
            let mut entry_2676 = list_2675.entry();
            entry_2676.string(item_2674);
        }
        list_2675.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2677 = writer.prefix("DryRun");
    if let Some(var_2678) = &input.dry_run {
        scope_2677.boolean(*var_2678);
    }
    #[allow(unused_mut)]
    let mut scope_2679 = writer.prefix("Filter");
    if let Some(var_2680) = &input.filters {
        let mut list_2682 = scope_2679.start_list(true, Some("Filter"));
        for item_2681 in var_2680 {
            #[allow(unused_mut)]
            let mut entry_2683 = list_2682.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2683, item_2681)?;
        }
        list_2682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("MaxResults");
    if let Some(var_2685) = &input.max_results {
        scope_2684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("NextToken");
    if let Some(var_2687) = &input.next_token {
        scope_2686.string(var_2687);
    }
    #[allow(unused_mut)]
    let mut scope_2688 = writer.prefix("IpamId");
    if let Some(var_2689) = &input.ipam_ids {
        let mut list_2691 = scope_2688.start_list(true, Some("item"));
        for item_2690 in var_2689 {
            #[allow(unused_mut)]
            let mut entry_2692 = list_2691.entry();
            entry_2692.string(item_2690);
        }
        list_2691.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("DryRun");
    if let Some(var_2694) = &input.dry_run {
        scope_2693.boolean(*var_2694);
    }
    #[allow(unused_mut)]
    let mut scope_2695 = writer.prefix("Filter");
    if let Some(var_2696) = &input.filters {
        let mut list_2698 = scope_2695.start_list(true, Some("Filter"));
        for item_2697 in var_2696 {
            #[allow(unused_mut)]
            let mut entry_2699 = list_2698.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2699, item_2697)?;
        }
        list_2698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("MaxResults");
    if let Some(var_2701) = &input.max_results {
        scope_2700.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2701).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("NextToken");
    if let Some(var_2703) = &input.next_token {
        scope_2702.string(var_2703);
    }
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("IpamScopeId");
    if let Some(var_2705) = &input.ipam_scope_ids {
        let mut list_2707 = scope_2704.start_list(true, Some("item"));
        for item_2706 in var_2705 {
            #[allow(unused_mut)]
            let mut entry_2708 = list_2707.entry();
            entry_2708.string(item_2706);
        }
        list_2707.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2709 = writer.prefix("PoolId");
    if let Some(var_2710) = &input.pool_ids {
        let mut list_2712 = scope_2709.start_list(true, Some("item"));
        for item_2711 in var_2710 {
            #[allow(unused_mut)]
            let mut entry_2713 = list_2712.entry();
            entry_2713.string(item_2711);
        }
        list_2712.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2714 = writer.prefix("NextToken");
    if let Some(var_2715) = &input.next_token {
        scope_2714.string(var_2715);
    }
    #[allow(unused_mut)]
    let mut scope_2716 = writer.prefix("MaxResults");
    if let Some(var_2717) = &input.max_results {
        scope_2716.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2717).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("DryRun");
    if let Some(var_2719) = &input.dry_run {
        scope_2718.boolean(*var_2719);
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("Filter");
    if let Some(var_2721) = &input.filters {
        let mut list_2723 = scope_2720.start_list(true, Some("Filter"));
        for item_2722 in var_2721 {
            #[allow(unused_mut)]
            let mut entry_2724 = list_2723.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2724, item_2722)?;
        }
        list_2723.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("Filter");
    if let Some(var_2726) = &input.filters {
        let mut list_2728 = scope_2725.start_list(true, Some("Filter"));
        for item_2727 in var_2726 {
            #[allow(unused_mut)]
            let mut entry_2729 = list_2728.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2729, item_2727)?;
        }
        list_2728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2730 = writer.prefix("KeyName");
    if let Some(var_2731) = &input.key_names {
        let mut list_2733 = scope_2730.start_list(true, Some("KeyName"));
        for item_2732 in var_2731 {
            #[allow(unused_mut)]
            let mut entry_2734 = list_2733.entry();
            entry_2734.string(item_2732);
        }
        list_2733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2735 = writer.prefix("KeyPairId");
    if let Some(var_2736) = &input.key_pair_ids {
        let mut list_2738 = scope_2735.start_list(true, Some("KeyPairId"));
        for item_2737 in var_2736 {
            #[allow(unused_mut)]
            let mut entry_2739 = list_2738.entry();
            entry_2739.string(item_2737);
        }
        list_2738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2740 = writer.prefix("DryRun");
    if let Some(var_2741) = &input.dry_run {
        scope_2740.boolean(*var_2741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2742 = writer.prefix("DryRun");
    if let Some(var_2743) = &input.dry_run {
        scope_2742.boolean(*var_2743);
    }
    #[allow(unused_mut)]
    let mut scope_2744 = writer.prefix("LaunchTemplateId");
    if let Some(var_2745) = &input.launch_template_ids {
        let mut list_2747 = scope_2744.start_list(true, Some("item"));
        for item_2746 in var_2745 {
            #[allow(unused_mut)]
            let mut entry_2748 = list_2747.entry();
            entry_2748.string(item_2746);
        }
        list_2747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2749 = writer.prefix("LaunchTemplateName");
    if let Some(var_2750) = &input.launch_template_names {
        let mut list_2752 = scope_2749.start_list(true, Some("item"));
        for item_2751 in var_2750 {
            #[allow(unused_mut)]
            let mut entry_2753 = list_2752.entry();
            entry_2753.string(item_2751);
        }
        list_2752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2754 = writer.prefix("Filter");
    if let Some(var_2755) = &input.filters {
        let mut list_2757 = scope_2754.start_list(true, Some("Filter"));
        for item_2756 in var_2755 {
            #[allow(unused_mut)]
            let mut entry_2758 = list_2757.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2758, item_2756)?;
        }
        list_2757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("NextToken");
    if let Some(var_2760) = &input.next_token {
        scope_2759.string(var_2760);
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("MaxResults");
    if let Some(var_2762) = &input.max_results {
        scope_2761.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2762).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2763 = writer.prefix("DryRun");
    if let Some(var_2764) = &input.dry_run {
        scope_2763.boolean(*var_2764);
    }
    #[allow(unused_mut)]
    let mut scope_2765 = writer.prefix("LaunchTemplateId");
    if let Some(var_2766) = &input.launch_template_id {
        scope_2765.string(var_2766);
    }
    #[allow(unused_mut)]
    let mut scope_2767 = writer.prefix("LaunchTemplateName");
    if let Some(var_2768) = &input.launch_template_name {
        scope_2767.string(var_2768);
    }
    #[allow(unused_mut)]
    let mut scope_2769 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2770) = &input.versions {
        let mut list_2772 = scope_2769.start_list(true, Some("item"));
        for item_2771 in var_2770 {
            #[allow(unused_mut)]
            let mut entry_2773 = list_2772.entry();
            entry_2773.string(item_2771);
        }
        list_2772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2774 = writer.prefix("MinVersion");
    if let Some(var_2775) = &input.min_version {
        scope_2774.string(var_2775);
    }
    #[allow(unused_mut)]
    let mut scope_2776 = writer.prefix("MaxVersion");
    if let Some(var_2777) = &input.max_version {
        scope_2776.string(var_2777);
    }
    #[allow(unused_mut)]
    let mut scope_2778 = writer.prefix("NextToken");
    if let Some(var_2779) = &input.next_token {
        scope_2778.string(var_2779);
    }
    #[allow(unused_mut)]
    let mut scope_2780 = writer.prefix("MaxResults");
    if let Some(var_2781) = &input.max_results {
        scope_2780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2782 = writer.prefix("Filter");
    if let Some(var_2783) = &input.filters {
        let mut list_2785 = scope_2782.start_list(true, Some("Filter"));
        for item_2784 in var_2783 {
            #[allow(unused_mut)]
            let mut entry_2786 = list_2785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2786, item_2784)?;
        }
        list_2785.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2788) = &input.local_gateway_route_table_ids {
        let mut list_2790 = scope_2787.start_list(true, Some("item"));
        for item_2789 in var_2788 {
            #[allow(unused_mut)]
            let mut entry_2791 = list_2790.entry();
            entry_2791.string(item_2789);
        }
        list_2790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2792 = writer.prefix("Filter");
    if let Some(var_2793) = &input.filters {
        let mut list_2795 = scope_2792.start_list(true, Some("Filter"));
        for item_2794 in var_2793 {
            #[allow(unused_mut)]
            let mut entry_2796 = list_2795.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2796, item_2794)?;
        }
        list_2795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2797 = writer.prefix("MaxResults");
    if let Some(var_2798) = &input.max_results {
        scope_2797.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2798).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2799 = writer.prefix("NextToken");
    if let Some(var_2800) = &input.next_token {
        scope_2799.string(var_2800);
    }
    #[allow(unused_mut)]
    let mut scope_2801 = writer.prefix("DryRun");
    if let Some(var_2802) = &input.dry_run {
        scope_2801.boolean(*var_2802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2803 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2804) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2806 = scope_2803.start_list(true, Some("item"));
        for item_2805 in var_2804 {
            #[allow(unused_mut)]
            let mut entry_2807 = list_2806.entry();
            entry_2807.string(item_2805);
        }
        list_2806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("Filter");
    if let Some(var_2809) = &input.filters {
        let mut list_2811 = scope_2808.start_list(true, Some("Filter"));
        for item_2810 in var_2809 {
            #[allow(unused_mut)]
            let mut entry_2812 = list_2811.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2812, item_2810)?;
        }
        list_2811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2813 = writer.prefix("MaxResults");
    if let Some(var_2814) = &input.max_results {
        scope_2813.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2814).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2815 = writer.prefix("NextToken");
    if let Some(var_2816) = &input.next_token {
        scope_2815.string(var_2816);
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("DryRun");
    if let Some(var_2818) = &input.dry_run {
        scope_2817.boolean(*var_2818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2820) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2822 = scope_2819.start_list(true, Some("item"));
        for item_2821 in var_2820 {
            #[allow(unused_mut)]
            let mut entry_2823 = list_2822.entry();
            entry_2823.string(item_2821);
        }
        list_2822.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2824 = writer.prefix("Filter");
    if let Some(var_2825) = &input.filters {
        let mut list_2827 = scope_2824.start_list(true, Some("Filter"));
        for item_2826 in var_2825 {
            #[allow(unused_mut)]
            let mut entry_2828 = list_2827.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2828, item_2826)?;
        }
        list_2827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2829 = writer.prefix("MaxResults");
    if let Some(var_2830) = &input.max_results {
        scope_2829.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2830).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2831 = writer.prefix("NextToken");
    if let Some(var_2832) = &input.next_token {
        scope_2831.string(var_2832);
    }
    #[allow(unused_mut)]
    let mut scope_2833 = writer.prefix("DryRun");
    if let Some(var_2834) = &input.dry_run {
        scope_2833.boolean(*var_2834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("LocalGatewayId");
    if let Some(var_2836) = &input.local_gateway_ids {
        let mut list_2838 = scope_2835.start_list(true, Some("item"));
        for item_2837 in var_2836 {
            #[allow(unused_mut)]
            let mut entry_2839 = list_2838.entry();
            entry_2839.string(item_2837);
        }
        list_2838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("Filter");
    if let Some(var_2841) = &input.filters {
        let mut list_2843 = scope_2840.start_list(true, Some("Filter"));
        for item_2842 in var_2841 {
            #[allow(unused_mut)]
            let mut entry_2844 = list_2843.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2844, item_2842)?;
        }
        list_2843.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2845 = writer.prefix("MaxResults");
    if let Some(var_2846) = &input.max_results {
        scope_2845.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2846).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2847 = writer.prefix("NextToken");
    if let Some(var_2848) = &input.next_token {
        scope_2847.string(var_2848);
    }
    #[allow(unused_mut)]
    let mut scope_2849 = writer.prefix("DryRun");
    if let Some(var_2850) = &input.dry_run {
        scope_2849.boolean(*var_2850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2852) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2854 = scope_2851.start_list(true, Some("item"));
        for item_2853 in var_2852 {
            #[allow(unused_mut)]
            let mut entry_2855 = list_2854.entry();
            entry_2855.string(item_2853);
        }
        list_2854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("Filter");
    if let Some(var_2857) = &input.filters {
        let mut list_2859 = scope_2856.start_list(true, Some("Filter"));
        for item_2858 in var_2857 {
            #[allow(unused_mut)]
            let mut entry_2860 = list_2859.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2860, item_2858)?;
        }
        list_2859.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2861 = writer.prefix("MaxResults");
    if let Some(var_2862) = &input.max_results {
        scope_2861.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2863 = writer.prefix("NextToken");
    if let Some(var_2864) = &input.next_token {
        scope_2863.string(var_2864);
    }
    #[allow(unused_mut)]
    let mut scope_2865 = writer.prefix("DryRun");
    if let Some(var_2866) = &input.dry_run {
        scope_2865.boolean(*var_2866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2867 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2868) = &input.local_gateway_virtual_interface_ids {
        let mut list_2870 = scope_2867.start_list(true, Some("item"));
        for item_2869 in var_2868 {
            #[allow(unused_mut)]
            let mut entry_2871 = list_2870.entry();
            entry_2871.string(item_2869);
        }
        list_2870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2872 = writer.prefix("Filter");
    if let Some(var_2873) = &input.filters {
        let mut list_2875 = scope_2872.start_list(true, Some("Filter"));
        for item_2874 in var_2873 {
            #[allow(unused_mut)]
            let mut entry_2876 = list_2875.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2876, item_2874)?;
        }
        list_2875.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2877 = writer.prefix("MaxResults");
    if let Some(var_2878) = &input.max_results {
        scope_2877.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2878).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2879 = writer.prefix("NextToken");
    if let Some(var_2880) = &input.next_token {
        scope_2879.string(var_2880);
    }
    #[allow(unused_mut)]
    let mut scope_2881 = writer.prefix("DryRun");
    if let Some(var_2882) = &input.dry_run {
        scope_2881.boolean(*var_2882);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2883 = writer.prefix("DryRun");
    if let Some(var_2884) = &input.dry_run {
        scope_2883.boolean(*var_2884);
    }
    #[allow(unused_mut)]
    let mut scope_2885 = writer.prefix("Filter");
    if let Some(var_2886) = &input.filters {
        let mut list_2888 = scope_2885.start_list(true, Some("Filter"));
        for item_2887 in var_2886 {
            #[allow(unused_mut)]
            let mut entry_2889 = list_2888.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2889, item_2887)?;
        }
        list_2888.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("MaxResults");
    if let Some(var_2891) = &input.max_results {
        scope_2890.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("NextToken");
    if let Some(var_2893) = &input.next_token {
        scope_2892.string(var_2893);
    }
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("PrefixListId");
    if let Some(var_2895) = &input.prefix_list_ids {
        let mut list_2897 = scope_2894.start_list(true, Some("item"));
        for item_2896 in var_2895 {
            #[allow(unused_mut)]
            let mut entry_2898 = list_2897.entry();
            entry_2898.string(item_2896);
        }
        list_2897.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2899 = writer.prefix("Filter");
    if let Some(var_2900) = &input.filters {
        let mut list_2902 = scope_2899.start_list(true, Some("Filter"));
        for item_2901 in var_2900 {
            #[allow(unused_mut)]
            let mut entry_2903 = list_2902.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2903, item_2901)?;
        }
        list_2902.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2904 = writer.prefix("DryRun");
    if let Some(var_2905) = &input.dry_run {
        scope_2904.boolean(*var_2905);
    }
    #[allow(unused_mut)]
    let mut scope_2906 = writer.prefix("MaxResults");
    if let Some(var_2907) = &input.max_results {
        scope_2906.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2907).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2908 = writer.prefix("NextToken");
    if let Some(var_2909) = &input.next_token {
        scope_2908.string(var_2909);
    }
    #[allow(unused_mut)]
    let mut scope_2910 = writer.prefix("PublicIp");
    if let Some(var_2911) = &input.public_ips {
        let mut list_2913 = scope_2910.start_list(true, Some("item"));
        for item_2912 in var_2911 {
            #[allow(unused_mut)]
            let mut entry_2914 = list_2913.entry();
            entry_2914.string(item_2912);
        }
        list_2913.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2915 = writer.prefix("DryRun");
    if let Some(var_2916) = &input.dry_run {
        scope_2915.boolean(*var_2916);
    }
    #[allow(unused_mut)]
    let mut scope_2917 = writer.prefix("Filter");
    if let Some(var_2918) = &input.filter {
        let mut list_2920 = scope_2917.start_list(true, Some("Filter"));
        for item_2919 in var_2918 {
            #[allow(unused_mut)]
            let mut entry_2921 = list_2920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2921, item_2919)?;
        }
        list_2920.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("MaxResults");
    if let Some(var_2923) = &input.max_results {
        scope_2922.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2923).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("NatGatewayId");
    if let Some(var_2925) = &input.nat_gateway_ids {
        let mut list_2927 = scope_2924.start_list(true, Some("item"));
        for item_2926 in var_2925 {
            #[allow(unused_mut)]
            let mut entry_2928 = list_2927.entry();
            entry_2928.string(item_2926);
        }
        list_2927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2929 = writer.prefix("NextToken");
    if let Some(var_2930) = &input.next_token {
        scope_2929.string(var_2930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2931 = writer.prefix("Filter");
    if let Some(var_2932) = &input.filters {
        let mut list_2934 = scope_2931.start_list(true, Some("Filter"));
        for item_2933 in var_2932 {
            #[allow(unused_mut)]
            let mut entry_2935 = list_2934.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2935, item_2933)?;
        }
        list_2934.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2936 = writer.prefix("DryRun");
    if let Some(var_2937) = &input.dry_run {
        scope_2936.boolean(*var_2937);
    }
    #[allow(unused_mut)]
    let mut scope_2938 = writer.prefix("NetworkAclId");
    if let Some(var_2939) = &input.network_acl_ids {
        let mut list_2941 = scope_2938.start_list(true, Some("item"));
        for item_2940 in var_2939 {
            #[allow(unused_mut)]
            let mut entry_2942 = list_2941.entry();
            entry_2942.string(item_2940);
        }
        list_2941.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2943 = writer.prefix("NextToken");
    if let Some(var_2944) = &input.next_token {
        scope_2943.string(var_2944);
    }
    #[allow(unused_mut)]
    let mut scope_2945 = writer.prefix("MaxResults");
    if let Some(var_2946) = &input.max_results {
        scope_2945.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2946).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2948) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2950 = scope_2947.start_list(true, Some("item"));
        for item_2949 in var_2948 {
            #[allow(unused_mut)]
            let mut entry_2951 = list_2950.entry();
            entry_2951.string(item_2949);
        }
        list_2950.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2952 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2953) = &input.network_insights_access_scope_id {
        scope_2952.string(var_2953);
    }
    #[allow(unused_mut)]
    let mut scope_2954 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2955) = &input.analysis_start_time_begin {
        scope_2954.date_time(var_2955, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2956 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_2957) = &input.analysis_start_time_end {
        scope_2956.date_time(var_2957, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("Filter");
    if let Some(var_2959) = &input.filters {
        let mut list_2961 = scope_2958.start_list(true, Some("Filter"));
        for item_2960 in var_2959 {
            #[allow(unused_mut)]
            let mut entry_2962 = list_2961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2962, item_2960)?;
        }
        list_2961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2963 = writer.prefix("MaxResults");
    if let Some(var_2964) = &input.max_results {
        scope_2963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("DryRun");
    if let Some(var_2966) = &input.dry_run {
        scope_2965.boolean(*var_2966);
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("NextToken");
    if let Some(var_2968) = &input.next_token {
        scope_2967.string(var_2968);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2969 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2970) = &input.network_insights_access_scope_ids {
        let mut list_2972 = scope_2969.start_list(true, Some("item"));
        for item_2971 in var_2970 {
            #[allow(unused_mut)]
            let mut entry_2973 = list_2972.entry();
            entry_2973.string(item_2971);
        }
        list_2972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("Filter");
    if let Some(var_2975) = &input.filters {
        let mut list_2977 = scope_2974.start_list(true, Some("Filter"));
        for item_2976 in var_2975 {
            #[allow(unused_mut)]
            let mut entry_2978 = list_2977.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2978, item_2976)?;
        }
        list_2977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2979 = writer.prefix("MaxResults");
    if let Some(var_2980) = &input.max_results {
        scope_2979.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2980).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2981 = writer.prefix("DryRun");
    if let Some(var_2982) = &input.dry_run {
        scope_2981.boolean(*var_2982);
    }
    #[allow(unused_mut)]
    let mut scope_2983 = writer.prefix("NextToken");
    if let Some(var_2984) = &input.next_token {
        scope_2983.string(var_2984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2985 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_2986) = &input.network_insights_analysis_ids {
        let mut list_2988 = scope_2985.start_list(true, Some("item"));
        for item_2987 in var_2986 {
            #[allow(unused_mut)]
            let mut entry_2989 = list_2988.entry();
            entry_2989.string(item_2987);
        }
        list_2988.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2990 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_2991) = &input.network_insights_path_id {
        scope_2990.string(var_2991);
    }
    #[allow(unused_mut)]
    let mut scope_2992 = writer.prefix("AnalysisStartTime");
    if let Some(var_2993) = &input.analysis_start_time {
        scope_2992.date_time(var_2993, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2994 = writer.prefix("AnalysisEndTime");
    if let Some(var_2995) = &input.analysis_end_time {
        scope_2994.date_time(var_2995, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2996 = writer.prefix("Filter");
    if let Some(var_2997) = &input.filters {
        let mut list_2999 = scope_2996.start_list(true, Some("Filter"));
        for item_2998 in var_2997 {
            #[allow(unused_mut)]
            let mut entry_3000 = list_2999.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3000, item_2998)?;
        }
        list_2999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("MaxResults");
    if let Some(var_3002) = &input.max_results {
        scope_3001.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3002).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3003 = writer.prefix("DryRun");
    if let Some(var_3004) = &input.dry_run {
        scope_3003.boolean(*var_3004);
    }
    #[allow(unused_mut)]
    let mut scope_3005 = writer.prefix("NextToken");
    if let Some(var_3006) = &input.next_token {
        scope_3005.string(var_3006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3007 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3008) = &input.network_insights_path_ids {
        let mut list_3010 = scope_3007.start_list(true, Some("item"));
        for item_3009 in var_3008 {
            #[allow(unused_mut)]
            let mut entry_3011 = list_3010.entry();
            entry_3011.string(item_3009);
        }
        list_3010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("Filter");
    if let Some(var_3013) = &input.filters {
        let mut list_3015 = scope_3012.start_list(true, Some("Filter"));
        for item_3014 in var_3013 {
            #[allow(unused_mut)]
            let mut entry_3016 = list_3015.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3016, item_3014)?;
        }
        list_3015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("MaxResults");
    if let Some(var_3018) = &input.max_results {
        scope_3017.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3019 = writer.prefix("DryRun");
    if let Some(var_3020) = &input.dry_run {
        scope_3019.boolean(*var_3020);
    }
    #[allow(unused_mut)]
    let mut scope_3021 = writer.prefix("NextToken");
    if let Some(var_3022) = &input.next_token {
        scope_3021.string(var_3022);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3023 = writer.prefix("Attribute");
    if let Some(var_3024) = &input.attribute {
        scope_3023.string(var_3024.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3025 = writer.prefix("DryRun");
    if let Some(var_3026) = &input.dry_run {
        scope_3025.boolean(*var_3026);
    }
    #[allow(unused_mut)]
    let mut scope_3027 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3028) = &input.network_interface_id {
        scope_3027.string(var_3028);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3029 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3030) = &input.network_interface_permission_ids {
        let mut list_3032 = scope_3029.start_list(true, None);
        for item_3031 in var_3030 {
            #[allow(unused_mut)]
            let mut entry_3033 = list_3032.entry();
            entry_3033.string(item_3031);
        }
        list_3032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3034 = writer.prefix("Filter");
    if let Some(var_3035) = &input.filters {
        let mut list_3037 = scope_3034.start_list(true, Some("Filter"));
        for item_3036 in var_3035 {
            #[allow(unused_mut)]
            let mut entry_3038 = list_3037.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3038, item_3036)?;
        }
        list_3037.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("NextToken");
    if let Some(var_3040) = &input.next_token {
        scope_3039.string(var_3040);
    }
    #[allow(unused_mut)]
    let mut scope_3041 = writer.prefix("MaxResults");
    if let Some(var_3042) = &input.max_results {
        scope_3041.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3042).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3043 = writer.prefix("Filter");
    if let Some(var_3044) = &input.filters {
        let mut list_3046 = scope_3043.start_list(true, Some("Filter"));
        for item_3045 in var_3044 {
            #[allow(unused_mut)]
            let mut entry_3047 = list_3046.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3047, item_3045)?;
        }
        list_3046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("DryRun");
    if let Some(var_3049) = &input.dry_run {
        scope_3048.boolean(*var_3049);
    }
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3051) = &input.network_interface_ids {
        let mut list_3053 = scope_3050.start_list(true, Some("item"));
        for item_3052 in var_3051 {
            #[allow(unused_mut)]
            let mut entry_3054 = list_3053.entry();
            entry_3054.string(item_3052);
        }
        list_3053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("NextToken");
    if let Some(var_3056) = &input.next_token {
        scope_3055.string(var_3056);
    }
    #[allow(unused_mut)]
    let mut scope_3057 = writer.prefix("MaxResults");
    if let Some(var_3058) = &input.max_results {
        scope_3057.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3058).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3059 = writer.prefix("Filter");
    if let Some(var_3060) = &input.filters {
        let mut list_3062 = scope_3059.start_list(true, Some("Filter"));
        for item_3061 in var_3060 {
            #[allow(unused_mut)]
            let mut entry_3063 = list_3062.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3063, item_3061)?;
        }
        list_3062.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("DryRun");
    if let Some(var_3065) = &input.dry_run {
        scope_3064.boolean(*var_3065);
    }
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("GroupName");
    if let Some(var_3067) = &input.group_names {
        let mut list_3069 = scope_3066.start_list(true, None);
        for item_3068 in var_3067 {
            #[allow(unused_mut)]
            let mut entry_3070 = list_3069.entry();
            entry_3070.string(item_3068);
        }
        list_3069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3071 = writer.prefix("GroupId");
    if let Some(var_3072) = &input.group_ids {
        let mut list_3074 = scope_3071.start_list(true, Some("GroupId"));
        for item_3073 in var_3072 {
            #[allow(unused_mut)]
            let mut entry_3075 = list_3074.entry();
            entry_3075.string(item_3073);
        }
        list_3074.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3076 = writer.prefix("DryRun");
    if let Some(var_3077) = &input.dry_run {
        scope_3076.boolean(*var_3077);
    }
    #[allow(unused_mut)]
    let mut scope_3078 = writer.prefix("Filter");
    if let Some(var_3079) = &input.filters {
        let mut list_3081 = scope_3078.start_list(true, Some("Filter"));
        for item_3080 in var_3079 {
            #[allow(unused_mut)]
            let mut entry_3082 = list_3081.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3082, item_3080)?;
        }
        list_3081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3083 = writer.prefix("MaxResults");
    if let Some(var_3084) = &input.max_results {
        scope_3083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3085 = writer.prefix("NextToken");
    if let Some(var_3086) = &input.next_token {
        scope_3085.string(var_3086);
    }
    #[allow(unused_mut)]
    let mut scope_3087 = writer.prefix("PrefixListId");
    if let Some(var_3088) = &input.prefix_list_ids {
        let mut list_3090 = scope_3087.start_list(true, Some("item"));
        for item_3089 in var_3088 {
            #[allow(unused_mut)]
            let mut entry_3091 = list_3090.entry();
            entry_3091.string(item_3089);
        }
        list_3090.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3092 = writer.prefix("DryRun");
    if let Some(var_3093) = &input.dry_run {
        scope_3092.boolean(*var_3093);
    }
    #[allow(unused_mut)]
    let mut scope_3094 = writer.prefix("Resource");
    if let Some(var_3095) = &input.resources {
        let mut list_3097 = scope_3094.start_list(true, Some("item"));
        for item_3096 in var_3095 {
            #[allow(unused_mut)]
            let mut entry_3098 = list_3097.entry();
            entry_3098.string(item_3096);
        }
        list_3097.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3099 = writer.prefix("MaxResults");
    if let Some(var_3100) = &input.max_results {
        scope_3099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3101 = writer.prefix("NextToken");
    if let Some(var_3102) = &input.next_token {
        scope_3101.string(var_3102);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3103 = writer.prefix("PoolId");
    if let Some(var_3104) = &input.pool_ids {
        let mut list_3106 = scope_3103.start_list(true, Some("item"));
        for item_3105 in var_3104 {
            #[allow(unused_mut)]
            let mut entry_3107 = list_3106.entry();
            entry_3107.string(item_3105);
        }
        list_3106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3108 = writer.prefix("NextToken");
    if let Some(var_3109) = &input.next_token {
        scope_3108.string(var_3109);
    }
    #[allow(unused_mut)]
    let mut scope_3110 = writer.prefix("MaxResults");
    if let Some(var_3111) = &input.max_results {
        scope_3110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3112 = writer.prefix("Filter");
    if let Some(var_3113) = &input.filters {
        let mut list_3115 = scope_3112.start_list(true, Some("Filter"));
        for item_3114 in var_3113 {
            #[allow(unused_mut)]
            let mut entry_3116 = list_3115.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3116, item_3114)?;
        }
        list_3115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3117 = writer.prefix("Filter");
    if let Some(var_3118) = &input.filters {
        let mut list_3120 = scope_3117.start_list(true, Some("Filter"));
        for item_3119 in var_3118 {
            #[allow(unused_mut)]
            let mut entry_3121 = list_3120.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3121, item_3119)?;
        }
        list_3120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3122 = writer.prefix("RegionName");
    if let Some(var_3123) = &input.region_names {
        let mut list_3125 = scope_3122.start_list(true, Some("RegionName"));
        for item_3124 in var_3123 {
            #[allow(unused_mut)]
            let mut entry_3126 = list_3125.entry();
            entry_3126.string(item_3124);
        }
        list_3125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3127 = writer.prefix("DryRun");
    if let Some(var_3128) = &input.dry_run {
        scope_3127.boolean(*var_3128);
    }
    #[allow(unused_mut)]
    let mut scope_3129 = writer.prefix("AllRegions");
    if let Some(var_3130) = &input.all_regions {
        scope_3129.boolean(*var_3130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3131 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3132) = &input.replace_root_volume_task_ids {
        let mut list_3134 = scope_3131.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3133 in var_3132 {
            #[allow(unused_mut)]
            let mut entry_3135 = list_3134.entry();
            entry_3135.string(item_3133);
        }
        list_3134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3136 = writer.prefix("Filter");
    if let Some(var_3137) = &input.filters {
        let mut list_3139 = scope_3136.start_list(true, Some("Filter"));
        for item_3138 in var_3137 {
            #[allow(unused_mut)]
            let mut entry_3140 = list_3139.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3140, item_3138)?;
        }
        list_3139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3141 = writer.prefix("MaxResults");
    if let Some(var_3142) = &input.max_results {
        scope_3141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3143 = writer.prefix("NextToken");
    if let Some(var_3144) = &input.next_token {
        scope_3143.string(var_3144);
    }
    #[allow(unused_mut)]
    let mut scope_3145 = writer.prefix("DryRun");
    if let Some(var_3146) = &input.dry_run {
        scope_3145.boolean(*var_3146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3147 = writer.prefix("Filter");
    if let Some(var_3148) = &input.filters {
        let mut list_3150 = scope_3147.start_list(true, Some("Filter"));
        for item_3149 in var_3148 {
            #[allow(unused_mut)]
            let mut entry_3151 = list_3150.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3151, item_3149)?;
        }
        list_3150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3152 = writer.prefix("OfferingClass");
    if let Some(var_3153) = &input.offering_class {
        scope_3152.string(var_3153.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3154 = writer.prefix("ReservedInstancesId");
    if let Some(var_3155) = &input.reserved_instances_ids {
        let mut list_3157 = scope_3154.start_list(true, Some("ReservedInstancesId"));
        for item_3156 in var_3155 {
            #[allow(unused_mut)]
            let mut entry_3158 = list_3157.entry();
            entry_3158.string(item_3156);
        }
        list_3157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3159 = writer.prefix("DryRun");
    if let Some(var_3160) = &input.dry_run {
        scope_3159.boolean(*var_3160);
    }
    #[allow(unused_mut)]
    let mut scope_3161 = writer.prefix("OfferingType");
    if let Some(var_3162) = &input.offering_type {
        scope_3161.string(var_3162.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3163 = writer.prefix("Filter");
    if let Some(var_3164) = &input.filters {
        let mut list_3166 = scope_3163.start_list(true, Some("Filter"));
        for item_3165 in var_3164 {
            #[allow(unused_mut)]
            let mut entry_3167 = list_3166.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3167, item_3165)?;
        }
        list_3166.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3168 = writer.prefix("ReservedInstancesId");
    if let Some(var_3169) = &input.reserved_instances_id {
        scope_3168.string(var_3169);
    }
    #[allow(unused_mut)]
    let mut scope_3170 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3171) = &input.reserved_instances_listing_id {
        scope_3170.string(var_3171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3172 = writer.prefix("Filter");
    if let Some(var_3173) = &input.filters {
        let mut list_3175 = scope_3172.start_list(true, Some("Filter"));
        for item_3174 in var_3173 {
            #[allow(unused_mut)]
            let mut entry_3176 = list_3175.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3176, item_3174)?;
        }
        list_3175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3177 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3178) = &input.reserved_instances_modification_ids {
        let mut list_3180 = scope_3177.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3179 in var_3178 {
            #[allow(unused_mut)]
            let mut entry_3181 = list_3180.entry();
            entry_3181.string(item_3179);
        }
        list_3180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3182 = writer.prefix("NextToken");
    if let Some(var_3183) = &input.next_token {
        scope_3182.string(var_3183);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("AvailabilityZone");
    if let Some(var_3185) = &input.availability_zone {
        scope_3184.string(var_3185);
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("Filter");
    if let Some(var_3187) = &input.filters {
        let mut list_3189 = scope_3186.start_list(true, Some("Filter"));
        for item_3188 in var_3187 {
            #[allow(unused_mut)]
            let mut entry_3190 = list_3189.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3190, item_3188)?;
        }
        list_3189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3191 = writer.prefix("IncludeMarketplace");
    if let Some(var_3192) = &input.include_marketplace {
        scope_3191.boolean(*var_3192);
    }
    #[allow(unused_mut)]
    let mut scope_3193 = writer.prefix("InstanceType");
    if let Some(var_3194) = &input.instance_type {
        scope_3193.string(var_3194.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("MaxDuration");
    if let Some(var_3196) = &input.max_duration {
        scope_3195.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3196).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3197 = writer.prefix("MaxInstanceCount");
    if let Some(var_3198) = &input.max_instance_count {
        scope_3197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3199 = writer.prefix("MinDuration");
    if let Some(var_3200) = &input.min_duration {
        scope_3199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3201 = writer.prefix("OfferingClass");
    if let Some(var_3202) = &input.offering_class {
        scope_3201.string(var_3202.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3203 = writer.prefix("ProductDescription");
    if let Some(var_3204) = &input.product_description {
        scope_3203.string(var_3204.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3205 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3206) = &input.reserved_instances_offering_ids {
        let mut list_3208 = scope_3205.start_list(true, None);
        for item_3207 in var_3206 {
            #[allow(unused_mut)]
            let mut entry_3209 = list_3208.entry();
            entry_3209.string(item_3207);
        }
        list_3208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3210 = writer.prefix("DryRun");
    if let Some(var_3211) = &input.dry_run {
        scope_3210.boolean(*var_3211);
    }
    #[allow(unused_mut)]
    let mut scope_3212 = writer.prefix("InstanceTenancy");
    if let Some(var_3213) = &input.instance_tenancy {
        scope_3212.string(var_3213.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3214 = writer.prefix("MaxResults");
    if let Some(var_3215) = &input.max_results {
        scope_3214.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3215).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3216 = writer.prefix("NextToken");
    if let Some(var_3217) = &input.next_token {
        scope_3216.string(var_3217);
    }
    #[allow(unused_mut)]
    let mut scope_3218 = writer.prefix("OfferingType");
    if let Some(var_3219) = &input.offering_type {
        scope_3218.string(var_3219.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3220 = writer.prefix("Filter");
    if let Some(var_3221) = &input.filters {
        let mut list_3223 = scope_3220.start_list(true, Some("Filter"));
        for item_3222 in var_3221 {
            #[allow(unused_mut)]
            let mut entry_3224 = list_3223.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3224, item_3222)?;
        }
        list_3223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("DryRun");
    if let Some(var_3226) = &input.dry_run {
        scope_3225.boolean(*var_3226);
    }
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("RouteTableId");
    if let Some(var_3228) = &input.route_table_ids {
        let mut list_3230 = scope_3227.start_list(true, Some("item"));
        for item_3229 in var_3228 {
            #[allow(unused_mut)]
            let mut entry_3231 = list_3230.entry();
            entry_3231.string(item_3229);
        }
        list_3230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3232 = writer.prefix("NextToken");
    if let Some(var_3233) = &input.next_token {
        scope_3232.string(var_3233);
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("MaxResults");
    if let Some(var_3235) = &input.max_results {
        scope_3234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3235).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("DryRun");
    if let Some(var_3237) = &input.dry_run {
        scope_3236.boolean(*var_3237);
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("Filter");
    if let Some(var_3239) = &input.filters {
        let mut list_3241 = scope_3238.start_list(true, Some("Filter"));
        for item_3240 in var_3239 {
            #[allow(unused_mut)]
            let mut entry_3242 = list_3241.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3242, item_3240)?;
        }
        list_3241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3243 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3244) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3243, var_3244,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3245 = writer.prefix("MaxResults");
    if let Some(var_3246) = &input.max_results {
        scope_3245.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3247 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3248) = &input.max_slot_duration_in_hours {
        scope_3247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3248).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3249 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3250) = &input.min_slot_duration_in_hours {
        scope_3249.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3250).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3251 = writer.prefix("NextToken");
    if let Some(var_3252) = &input.next_token {
        scope_3251.string(var_3252);
    }
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("Recurrence");
    if let Some(var_3254) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3253, var_3254,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("DryRun");
    if let Some(var_3256) = &input.dry_run {
        scope_3255.boolean(*var_3256);
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("Filter");
    if let Some(var_3258) = &input.filters {
        let mut list_3260 = scope_3257.start_list(true, Some("Filter"));
        for item_3259 in var_3258 {
            #[allow(unused_mut)]
            let mut entry_3261 = list_3260.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3261, item_3259)?;
        }
        list_3260.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3262 = writer.prefix("MaxResults");
    if let Some(var_3263) = &input.max_results {
        scope_3262.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3263).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3264 = writer.prefix("NextToken");
    if let Some(var_3265) = &input.next_token {
        scope_3264.string(var_3265);
    }
    #[allow(unused_mut)]
    let mut scope_3266 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3267) = &input.scheduled_instance_ids {
        let mut list_3269 = scope_3266.start_list(true, Some("ScheduledInstanceId"));
        for item_3268 in var_3267 {
            #[allow(unused_mut)]
            let mut entry_3270 = list_3269.entry();
            entry_3270.string(item_3268);
        }
        list_3269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3271 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3272) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3271, var_3272,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3273 = writer.prefix("DryRun");
    if let Some(var_3274) = &input.dry_run {
        scope_3273.boolean(*var_3274);
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("GroupId");
    if let Some(var_3276) = &input.group_id {
        let mut list_3278 = scope_3275.start_list(true, Some("item"));
        for item_3277 in var_3276 {
            #[allow(unused_mut)]
            let mut entry_3279 = list_3278.entry();
            entry_3279.string(item_3277);
        }
        list_3278.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3280 = writer.prefix("Filter");
    if let Some(var_3281) = &input.filters {
        let mut list_3283 = scope_3280.start_list(true, Some("Filter"));
        for item_3282 in var_3281 {
            #[allow(unused_mut)]
            let mut entry_3284 = list_3283.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3284, item_3282)?;
        }
        list_3283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3285 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3286) = &input.security_group_rule_ids {
        let mut list_3288 = scope_3285.start_list(true, Some("item"));
        for item_3287 in var_3286 {
            #[allow(unused_mut)]
            let mut entry_3289 = list_3288.entry();
            entry_3289.string(item_3287);
        }
        list_3288.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("DryRun");
    if let Some(var_3291) = &input.dry_run {
        scope_3290.boolean(*var_3291);
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("NextToken");
    if let Some(var_3293) = &input.next_token {
        scope_3292.string(var_3293);
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("MaxResults");
    if let Some(var_3295) = &input.max_results {
        scope_3294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3295).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("Filter");
    if let Some(var_3297) = &input.filters {
        let mut list_3299 = scope_3296.start_list(true, Some("Filter"));
        for item_3298 in var_3297 {
            #[allow(unused_mut)]
            let mut entry_3300 = list_3299.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3300, item_3298)?;
        }
        list_3299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3301 = writer.prefix("GroupId");
    if let Some(var_3302) = &input.group_ids {
        let mut list_3304 = scope_3301.start_list(true, Some("groupId"));
        for item_3303 in var_3302 {
            #[allow(unused_mut)]
            let mut entry_3305 = list_3304.entry();
            entry_3305.string(item_3303);
        }
        list_3304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3306 = writer.prefix("GroupName");
    if let Some(var_3307) = &input.group_names {
        let mut list_3309 = scope_3306.start_list(true, Some("GroupName"));
        for item_3308 in var_3307 {
            #[allow(unused_mut)]
            let mut entry_3310 = list_3309.entry();
            entry_3310.string(item_3308);
        }
        list_3309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3311 = writer.prefix("DryRun");
    if let Some(var_3312) = &input.dry_run {
        scope_3311.boolean(*var_3312);
    }
    #[allow(unused_mut)]
    let mut scope_3313 = writer.prefix("NextToken");
    if let Some(var_3314) = &input.next_token {
        scope_3313.string(var_3314);
    }
    #[allow(unused_mut)]
    let mut scope_3315 = writer.prefix("MaxResults");
    if let Some(var_3316) = &input.max_results {
        scope_3315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3316).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3317 = writer.prefix("Attribute");
    if let Some(var_3318) = &input.attribute {
        scope_3317.string(var_3318.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3319 = writer.prefix("SnapshotId");
    if let Some(var_3320) = &input.snapshot_id {
        scope_3319.string(var_3320);
    }
    #[allow(unused_mut)]
    let mut scope_3321 = writer.prefix("DryRun");
    if let Some(var_3322) = &input.dry_run {
        scope_3321.boolean(*var_3322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3323 = writer.prefix("Filter");
    if let Some(var_3324) = &input.filters {
        let mut list_3326 = scope_3323.start_list(true, Some("Filter"));
        for item_3325 in var_3324 {
            #[allow(unused_mut)]
            let mut entry_3327 = list_3326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3327, item_3325)?;
        }
        list_3326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("MaxResults");
    if let Some(var_3329) = &input.max_results {
        scope_3328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3329).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3330 = writer.prefix("NextToken");
    if let Some(var_3331) = &input.next_token {
        scope_3330.string(var_3331);
    }
    #[allow(unused_mut)]
    let mut scope_3332 = writer.prefix("Owner");
    if let Some(var_3333) = &input.owner_ids {
        let mut list_3335 = scope_3332.start_list(true, Some("Owner"));
        for item_3334 in var_3333 {
            #[allow(unused_mut)]
            let mut entry_3336 = list_3335.entry();
            entry_3336.string(item_3334);
        }
        list_3335.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("RestorableBy");
    if let Some(var_3338) = &input.restorable_by_user_ids {
        let mut list_3340 = scope_3337.start_list(true, None);
        for item_3339 in var_3338 {
            #[allow(unused_mut)]
            let mut entry_3341 = list_3340.entry();
            entry_3341.string(item_3339);
        }
        list_3340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3342 = writer.prefix("SnapshotId");
    if let Some(var_3343) = &input.snapshot_ids {
        let mut list_3345 = scope_3342.start_list(true, Some("SnapshotId"));
        for item_3344 in var_3343 {
            #[allow(unused_mut)]
            let mut entry_3346 = list_3345.entry();
            entry_3346.string(item_3344);
        }
        list_3345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3347 = writer.prefix("DryRun");
    if let Some(var_3348) = &input.dry_run {
        scope_3347.boolean(*var_3348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3349 = writer.prefix("Filter");
    if let Some(var_3350) = &input.filters {
        let mut list_3352 = scope_3349.start_list(true, Some("Filter"));
        for item_3351 in var_3350 {
            #[allow(unused_mut)]
            let mut entry_3353 = list_3352.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3353, item_3351)?;
        }
        list_3352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("DryRun");
    if let Some(var_3355) = &input.dry_run {
        scope_3354.boolean(*var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("NextToken");
    if let Some(var_3357) = &input.next_token {
        scope_3356.string(var_3357);
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("MaxResults");
    if let Some(var_3359) = &input.max_results {
        scope_3358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3359).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("DryRun");
    if let Some(var_3361) = &input.dry_run {
        scope_3360.boolean(*var_3361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("DryRun");
    if let Some(var_3363) = &input.dry_run {
        scope_3362.boolean(*var_3363);
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("MaxResults");
    if let Some(var_3365) = &input.max_results {
        scope_3364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("NextToken");
    if let Some(var_3367) = &input.next_token {
        scope_3366.string(var_3367);
    }
    #[allow(unused_mut)]
    let mut scope_3368 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3369) = &input.spot_fleet_request_id {
        scope_3368.string(var_3369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3370 = writer.prefix("DryRun");
    if let Some(var_3371) = &input.dry_run {
        scope_3370.boolean(*var_3371);
    }
    #[allow(unused_mut)]
    let mut scope_3372 = writer.prefix("EventType");
    if let Some(var_3373) = &input.event_type {
        scope_3372.string(var_3373.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3374 = writer.prefix("MaxResults");
    if let Some(var_3375) = &input.max_results {
        scope_3374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3375).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3376 = writer.prefix("NextToken");
    if let Some(var_3377) = &input.next_token {
        scope_3376.string(var_3377);
    }
    #[allow(unused_mut)]
    let mut scope_3378 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3379) = &input.spot_fleet_request_id {
        scope_3378.string(var_3379);
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("StartTime");
    if let Some(var_3381) = &input.start_time {
        scope_3380.date_time(var_3381, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3382 = writer.prefix("DryRun");
    if let Some(var_3383) = &input.dry_run {
        scope_3382.boolean(*var_3383);
    }
    #[allow(unused_mut)]
    let mut scope_3384 = writer.prefix("MaxResults");
    if let Some(var_3385) = &input.max_results {
        scope_3384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3386 = writer.prefix("NextToken");
    if let Some(var_3387) = &input.next_token {
        scope_3386.string(var_3387);
    }
    #[allow(unused_mut)]
    let mut scope_3388 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3389) = &input.spot_fleet_request_ids {
        let mut list_3391 = scope_3388.start_list(true, Some("item"));
        for item_3390 in var_3389 {
            #[allow(unused_mut)]
            let mut entry_3392 = list_3391.entry();
            entry_3392.string(item_3390);
        }
        list_3391.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3393 = writer.prefix("Filter");
    if let Some(var_3394) = &input.filters {
        let mut list_3396 = scope_3393.start_list(true, Some("Filter"));
        for item_3395 in var_3394 {
            #[allow(unused_mut)]
            let mut entry_3397 = list_3396.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3397, item_3395)?;
        }
        list_3396.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3398 = writer.prefix("DryRun");
    if let Some(var_3399) = &input.dry_run {
        scope_3398.boolean(*var_3399);
    }
    #[allow(unused_mut)]
    let mut scope_3400 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3401) = &input.spot_instance_request_ids {
        let mut list_3403 = scope_3400.start_list(true, Some("SpotInstanceRequestId"));
        for item_3402 in var_3401 {
            #[allow(unused_mut)]
            let mut entry_3404 = list_3403.entry();
            entry_3404.string(item_3402);
        }
        list_3403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("NextToken");
    if let Some(var_3406) = &input.next_token {
        scope_3405.string(var_3406);
    }
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("MaxResults");
    if let Some(var_3408) = &input.max_results {
        scope_3407.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3408).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("Filter");
    if let Some(var_3410) = &input.filters {
        let mut list_3412 = scope_3409.start_list(true, Some("Filter"));
        for item_3411 in var_3410 {
            #[allow(unused_mut)]
            let mut entry_3413 = list_3412.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3413, item_3411)?;
        }
        list_3412.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3414 = writer.prefix("AvailabilityZone");
    if let Some(var_3415) = &input.availability_zone {
        scope_3414.string(var_3415);
    }
    #[allow(unused_mut)]
    let mut scope_3416 = writer.prefix("DryRun");
    if let Some(var_3417) = &input.dry_run {
        scope_3416.boolean(*var_3417);
    }
    #[allow(unused_mut)]
    let mut scope_3418 = writer.prefix("EndTime");
    if let Some(var_3419) = &input.end_time {
        scope_3418.date_time(var_3419, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3420 = writer.prefix("InstanceType");
    if let Some(var_3421) = &input.instance_types {
        let mut list_3423 = scope_3420.start_list(true, None);
        for item_3422 in var_3421 {
            #[allow(unused_mut)]
            let mut entry_3424 = list_3423.entry();
            entry_3424.string(item_3422.as_str());
        }
        list_3423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("MaxResults");
    if let Some(var_3426) = &input.max_results {
        scope_3425.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("NextToken");
    if let Some(var_3428) = &input.next_token {
        scope_3427.string(var_3428);
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("ProductDescription");
    if let Some(var_3430) = &input.product_descriptions {
        let mut list_3432 = scope_3429.start_list(true, None);
        for item_3431 in var_3430 {
            #[allow(unused_mut)]
            let mut entry_3433 = list_3432.entry();
            entry_3433.string(item_3431);
        }
        list_3432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3434 = writer.prefix("StartTime");
    if let Some(var_3435) = &input.start_time {
        scope_3434.date_time(var_3435, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("DryRun");
    if let Some(var_3437) = &input.dry_run {
        scope_3436.boolean(*var_3437);
    }
    #[allow(unused_mut)]
    let mut scope_3438 = writer.prefix("MaxResults");
    if let Some(var_3439) = &input.max_results {
        scope_3438.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3440 = writer.prefix("NextToken");
    if let Some(var_3441) = &input.next_token {
        scope_3440.string(var_3441);
    }
    #[allow(unused_mut)]
    let mut scope_3442 = writer.prefix("VpcId");
    if let Some(var_3443) = &input.vpc_id {
        scope_3442.string(var_3443);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3444 = writer.prefix("ImageId");
    if let Some(var_3445) = &input.image_ids {
        let mut list_3447 = scope_3444.start_list(true, Some("item"));
        for item_3446 in var_3445 {
            #[allow(unused_mut)]
            let mut entry_3448 = list_3447.entry();
            entry_3448.string(item_3446);
        }
        list_3447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3449 = writer.prefix("DryRun");
    if let Some(var_3450) = &input.dry_run {
        scope_3449.boolean(*var_3450);
    }
    #[allow(unused_mut)]
    let mut scope_3451 = writer.prefix("Filter");
    if let Some(var_3452) = &input.filters {
        let mut list_3454 = scope_3451.start_list(true, Some("Filter"));
        for item_3453 in var_3452 {
            #[allow(unused_mut)]
            let mut entry_3455 = list_3454.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3455, item_3453)?;
        }
        list_3454.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3456 = writer.prefix("NextToken");
    if let Some(var_3457) = &input.next_token {
        scope_3456.string(var_3457);
    }
    #[allow(unused_mut)]
    let mut scope_3458 = writer.prefix("MaxResults");
    if let Some(var_3459) = &input.max_results {
        scope_3458.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3459).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3460 = writer.prefix("Filter");
    if let Some(var_3461) = &input.filters {
        let mut list_3463 = scope_3460.start_list(true, Some("Filter"));
        for item_3462 in var_3461 {
            #[allow(unused_mut)]
            let mut entry_3464 = list_3463.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3464, item_3462)?;
        }
        list_3463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3465 = writer.prefix("SubnetId");
    if let Some(var_3466) = &input.subnet_ids {
        let mut list_3468 = scope_3465.start_list(true, Some("SubnetId"));
        for item_3467 in var_3466 {
            #[allow(unused_mut)]
            let mut entry_3469 = list_3468.entry();
            entry_3469.string(item_3467);
        }
        list_3468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("DryRun");
    if let Some(var_3471) = &input.dry_run {
        scope_3470.boolean(*var_3471);
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("NextToken");
    if let Some(var_3473) = &input.next_token {
        scope_3472.string(var_3473);
    }
    #[allow(unused_mut)]
    let mut scope_3474 = writer.prefix("MaxResults");
    if let Some(var_3475) = &input.max_results {
        scope_3474.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3475).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3476 = writer.prefix("DryRun");
    if let Some(var_3477) = &input.dry_run {
        scope_3476.boolean(*var_3477);
    }
    #[allow(unused_mut)]
    let mut scope_3478 = writer.prefix("Filter");
    if let Some(var_3479) = &input.filters {
        let mut list_3481 = scope_3478.start_list(true, Some("Filter"));
        for item_3480 in var_3479 {
            #[allow(unused_mut)]
            let mut entry_3482 = list_3481.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3482, item_3480)?;
        }
        list_3481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("MaxResults");
    if let Some(var_3484) = &input.max_results {
        scope_3483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3485 = writer.prefix("NextToken");
    if let Some(var_3486) = &input.next_token {
        scope_3485.string(var_3486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3487 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3488) = &input.traffic_mirror_filter_ids {
        let mut list_3490 = scope_3487.start_list(true, Some("item"));
        for item_3489 in var_3488 {
            #[allow(unused_mut)]
            let mut entry_3491 = list_3490.entry();
            entry_3491.string(item_3489);
        }
        list_3490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("DryRun");
    if let Some(var_3493) = &input.dry_run {
        scope_3492.boolean(*var_3493);
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("Filter");
    if let Some(var_3495) = &input.filters {
        let mut list_3497 = scope_3494.start_list(true, Some("Filter"));
        for item_3496 in var_3495 {
            #[allow(unused_mut)]
            let mut entry_3498 = list_3497.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3498, item_3496)?;
        }
        list_3497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("MaxResults");
    if let Some(var_3500) = &input.max_results {
        scope_3499.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3500).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("NextToken");
    if let Some(var_3502) = &input.next_token {
        scope_3501.string(var_3502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3503 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3504) = &input.traffic_mirror_session_ids {
        let mut list_3506 = scope_3503.start_list(true, Some("item"));
        for item_3505 in var_3504 {
            #[allow(unused_mut)]
            let mut entry_3507 = list_3506.entry();
            entry_3507.string(item_3505);
        }
        list_3506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("DryRun");
    if let Some(var_3509) = &input.dry_run {
        scope_3508.boolean(*var_3509);
    }
    #[allow(unused_mut)]
    let mut scope_3510 = writer.prefix("Filter");
    if let Some(var_3511) = &input.filters {
        let mut list_3513 = scope_3510.start_list(true, Some("Filter"));
        for item_3512 in var_3511 {
            #[allow(unused_mut)]
            let mut entry_3514 = list_3513.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3514, item_3512)?;
        }
        list_3513.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("MaxResults");
    if let Some(var_3516) = &input.max_results {
        scope_3515.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3516).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("NextToken");
    if let Some(var_3518) = &input.next_token {
        scope_3517.string(var_3518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3520) = &input.traffic_mirror_target_ids {
        let mut list_3522 = scope_3519.start_list(true, Some("item"));
        for item_3521 in var_3520 {
            #[allow(unused_mut)]
            let mut entry_3523 = list_3522.entry();
            entry_3523.string(item_3521);
        }
        list_3522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3524 = writer.prefix("DryRun");
    if let Some(var_3525) = &input.dry_run {
        scope_3524.boolean(*var_3525);
    }
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("Filter");
    if let Some(var_3527) = &input.filters {
        let mut list_3529 = scope_3526.start_list(true, Some("Filter"));
        for item_3528 in var_3527 {
            #[allow(unused_mut)]
            let mut entry_3530 = list_3529.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3530, item_3528)?;
        }
        list_3529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3531 = writer.prefix("MaxResults");
    if let Some(var_3532) = &input.max_results {
        scope_3531.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3532).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3533 = writer.prefix("NextToken");
    if let Some(var_3534) = &input.next_token {
        scope_3533.string(var_3534);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3536) = &input.transit_gateway_attachment_ids {
        let mut list_3538 = scope_3535.start_list(true, None);
        for item_3537 in var_3536 {
            #[allow(unused_mut)]
            let mut entry_3539 = list_3538.entry();
            entry_3539.string(item_3537);
        }
        list_3538.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3540 = writer.prefix("Filter");
    if let Some(var_3541) = &input.filters {
        let mut list_3543 = scope_3540.start_list(true, Some("Filter"));
        for item_3542 in var_3541 {
            #[allow(unused_mut)]
            let mut entry_3544 = list_3543.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3544, item_3542)?;
        }
        list_3543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3545 = writer.prefix("MaxResults");
    if let Some(var_3546) = &input.max_results {
        scope_3545.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3546).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3547 = writer.prefix("NextToken");
    if let Some(var_3548) = &input.next_token {
        scope_3547.string(var_3548);
    }
    #[allow(unused_mut)]
    let mut scope_3549 = writer.prefix("DryRun");
    if let Some(var_3550) = &input.dry_run {
        scope_3549.boolean(*var_3550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3552) = &input.transit_gateway_connect_peer_ids {
        let mut list_3554 = scope_3551.start_list(true, Some("item"));
        for item_3553 in var_3552 {
            #[allow(unused_mut)]
            let mut entry_3555 = list_3554.entry();
            entry_3555.string(item_3553);
        }
        list_3554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3556 = writer.prefix("Filter");
    if let Some(var_3557) = &input.filters {
        let mut list_3559 = scope_3556.start_list(true, Some("Filter"));
        for item_3558 in var_3557 {
            #[allow(unused_mut)]
            let mut entry_3560 = list_3559.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3560, item_3558)?;
        }
        list_3559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3561 = writer.prefix("MaxResults");
    if let Some(var_3562) = &input.max_results {
        scope_3561.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3562).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3563 = writer.prefix("NextToken");
    if let Some(var_3564) = &input.next_token {
        scope_3563.string(var_3564);
    }
    #[allow(unused_mut)]
    let mut scope_3565 = writer.prefix("DryRun");
    if let Some(var_3566) = &input.dry_run {
        scope_3565.boolean(*var_3566);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3568) = &input.transit_gateway_attachment_ids {
        let mut list_3570 = scope_3567.start_list(true, None);
        for item_3569 in var_3568 {
            #[allow(unused_mut)]
            let mut entry_3571 = list_3570.entry();
            entry_3571.string(item_3569);
        }
        list_3570.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3572 = writer.prefix("Filter");
    if let Some(var_3573) = &input.filters {
        let mut list_3575 = scope_3572.start_list(true, Some("Filter"));
        for item_3574 in var_3573 {
            #[allow(unused_mut)]
            let mut entry_3576 = list_3575.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3576, item_3574)?;
        }
        list_3575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3577 = writer.prefix("MaxResults");
    if let Some(var_3578) = &input.max_results {
        scope_3577.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3579 = writer.prefix("NextToken");
    if let Some(var_3580) = &input.next_token {
        scope_3579.string(var_3580);
    }
    #[allow(unused_mut)]
    let mut scope_3581 = writer.prefix("DryRun");
    if let Some(var_3582) = &input.dry_run {
        scope_3581.boolean(*var_3582);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3584) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3586 = scope_3583.start_list(true, Some("item"));
        for item_3585 in var_3584 {
            #[allow(unused_mut)]
            let mut entry_3587 = list_3586.entry();
            entry_3587.string(item_3585);
        }
        list_3586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3588 = writer.prefix("Filter");
    if let Some(var_3589) = &input.filters {
        let mut list_3591 = scope_3588.start_list(true, Some("Filter"));
        for item_3590 in var_3589 {
            #[allow(unused_mut)]
            let mut entry_3592 = list_3591.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3592, item_3590)?;
        }
        list_3591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3593 = writer.prefix("MaxResults");
    if let Some(var_3594) = &input.max_results {
        scope_3593.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3594).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3595 = writer.prefix("NextToken");
    if let Some(var_3596) = &input.next_token {
        scope_3595.string(var_3596);
    }
    #[allow(unused_mut)]
    let mut scope_3597 = writer.prefix("DryRun");
    if let Some(var_3598) = &input.dry_run {
        scope_3597.boolean(*var_3598);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3600) = &input.transit_gateway_attachment_ids {
        let mut list_3602 = scope_3599.start_list(true, None);
        for item_3601 in var_3600 {
            #[allow(unused_mut)]
            let mut entry_3603 = list_3602.entry();
            entry_3603.string(item_3601);
        }
        list_3602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3604 = writer.prefix("Filter");
    if let Some(var_3605) = &input.filters {
        let mut list_3607 = scope_3604.start_list(true, Some("Filter"));
        for item_3606 in var_3605 {
            #[allow(unused_mut)]
            let mut entry_3608 = list_3607.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3608, item_3606)?;
        }
        list_3607.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3609 = writer.prefix("MaxResults");
    if let Some(var_3610) = &input.max_results {
        scope_3609.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3610).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3611 = writer.prefix("NextToken");
    if let Some(var_3612) = &input.next_token {
        scope_3611.string(var_3612);
    }
    #[allow(unused_mut)]
    let mut scope_3613 = writer.prefix("DryRun");
    if let Some(var_3614) = &input.dry_run {
        scope_3613.boolean(*var_3614);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3616) = &input.transit_gateway_route_table_ids {
        let mut list_3618 = scope_3615.start_list(true, Some("item"));
        for item_3617 in var_3616 {
            #[allow(unused_mut)]
            let mut entry_3619 = list_3618.entry();
            entry_3619.string(item_3617);
        }
        list_3618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3620 = writer.prefix("Filter");
    if let Some(var_3621) = &input.filters {
        let mut list_3623 = scope_3620.start_list(true, Some("Filter"));
        for item_3622 in var_3621 {
            #[allow(unused_mut)]
            let mut entry_3624 = list_3623.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3624, item_3622)?;
        }
        list_3623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3625 = writer.prefix("MaxResults");
    if let Some(var_3626) = &input.max_results {
        scope_3625.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3627 = writer.prefix("NextToken");
    if let Some(var_3628) = &input.next_token {
        scope_3627.string(var_3628);
    }
    #[allow(unused_mut)]
    let mut scope_3629 = writer.prefix("DryRun");
    if let Some(var_3630) = &input.dry_run {
        scope_3629.boolean(*var_3630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("TransitGatewayIds");
    if let Some(var_3632) = &input.transit_gateway_ids {
        let mut list_3634 = scope_3631.start_list(true, Some("item"));
        for item_3633 in var_3632 {
            #[allow(unused_mut)]
            let mut entry_3635 = list_3634.entry();
            entry_3635.string(item_3633);
        }
        list_3634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("Filter");
    if let Some(var_3637) = &input.filters {
        let mut list_3639 = scope_3636.start_list(true, Some("Filter"));
        for item_3638 in var_3637 {
            #[allow(unused_mut)]
            let mut entry_3640 = list_3639.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3640, item_3638)?;
        }
        list_3639.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3641 = writer.prefix("MaxResults");
    if let Some(var_3642) = &input.max_results {
        scope_3641.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3642).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3643 = writer.prefix("NextToken");
    if let Some(var_3644) = &input.next_token {
        scope_3643.string(var_3644);
    }
    #[allow(unused_mut)]
    let mut scope_3645 = writer.prefix("DryRun");
    if let Some(var_3646) = &input.dry_run {
        scope_3645.boolean(*var_3646);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3647 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3648) = &input.transit_gateway_attachment_ids {
        let mut list_3650 = scope_3647.start_list(true, None);
        for item_3649 in var_3648 {
            #[allow(unused_mut)]
            let mut entry_3651 = list_3650.entry();
            entry_3651.string(item_3649);
        }
        list_3650.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("Filter");
    if let Some(var_3653) = &input.filters {
        let mut list_3655 = scope_3652.start_list(true, Some("Filter"));
        for item_3654 in var_3653 {
            #[allow(unused_mut)]
            let mut entry_3656 = list_3655.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3656, item_3654)?;
        }
        list_3655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3657 = writer.prefix("MaxResults");
    if let Some(var_3658) = &input.max_results {
        scope_3657.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3658).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3659 = writer.prefix("NextToken");
    if let Some(var_3660) = &input.next_token {
        scope_3659.string(var_3660);
    }
    #[allow(unused_mut)]
    let mut scope_3661 = writer.prefix("DryRun");
    if let Some(var_3662) = &input.dry_run {
        scope_3661.boolean(*var_3662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3663 = writer.prefix("AssociationId");
    if let Some(var_3664) = &input.association_ids {
        let mut list_3666 = scope_3663.start_list(true, Some("item"));
        for item_3665 in var_3664 {
            #[allow(unused_mut)]
            let mut entry_3667 = list_3666.entry();
            entry_3667.string(item_3665);
        }
        list_3666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("DryRun");
    if let Some(var_3669) = &input.dry_run {
        scope_3668.boolean(*var_3669);
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("Filter");
    if let Some(var_3671) = &input.filters {
        let mut list_3673 = scope_3670.start_list(true, Some("Filter"));
        for item_3672 in var_3671 {
            #[allow(unused_mut)]
            let mut entry_3674 = list_3673.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3674, item_3672)?;
        }
        list_3673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3675 = writer.prefix("NextToken");
    if let Some(var_3676) = &input.next_token {
        scope_3675.string(var_3676);
    }
    #[allow(unused_mut)]
    let mut scope_3677 = writer.prefix("MaxResults");
    if let Some(var_3678) = &input.max_results {
        scope_3677.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3678).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("Attribute");
    if let Some(var_3680) = &input.attribute {
        scope_3679.string(var_3680.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3681 = writer.prefix("VolumeId");
    if let Some(var_3682) = &input.volume_id {
        scope_3681.string(var_3682);
    }
    #[allow(unused_mut)]
    let mut scope_3683 = writer.prefix("DryRun");
    if let Some(var_3684) = &input.dry_run {
        scope_3683.boolean(*var_3684);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3685 = writer.prefix("Filter");
    if let Some(var_3686) = &input.filters {
        let mut list_3688 = scope_3685.start_list(true, Some("Filter"));
        for item_3687 in var_3686 {
            #[allow(unused_mut)]
            let mut entry_3689 = list_3688.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3689, item_3687)?;
        }
        list_3688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("VolumeId");
    if let Some(var_3691) = &input.volume_ids {
        let mut list_3693 = scope_3690.start_list(true, Some("VolumeId"));
        for item_3692 in var_3691 {
            #[allow(unused_mut)]
            let mut entry_3694 = list_3693.entry();
            entry_3694.string(item_3692);
        }
        list_3693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3695 = writer.prefix("DryRun");
    if let Some(var_3696) = &input.dry_run {
        scope_3695.boolean(*var_3696);
    }
    #[allow(unused_mut)]
    let mut scope_3697 = writer.prefix("MaxResults");
    if let Some(var_3698) = &input.max_results {
        scope_3697.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3698).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3699 = writer.prefix("NextToken");
    if let Some(var_3700) = &input.next_token {
        scope_3699.string(var_3700);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3701 = writer.prefix("DryRun");
    if let Some(var_3702) = &input.dry_run {
        scope_3701.boolean(*var_3702);
    }
    #[allow(unused_mut)]
    let mut scope_3703 = writer.prefix("VolumeId");
    if let Some(var_3704) = &input.volume_ids {
        let mut list_3706 = scope_3703.start_list(true, Some("VolumeId"));
        for item_3705 in var_3704 {
            #[allow(unused_mut)]
            let mut entry_3707 = list_3706.entry();
            entry_3707.string(item_3705);
        }
        list_3706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3708 = writer.prefix("Filter");
    if let Some(var_3709) = &input.filters {
        let mut list_3711 = scope_3708.start_list(true, Some("Filter"));
        for item_3710 in var_3709 {
            #[allow(unused_mut)]
            let mut entry_3712 = list_3711.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3712, item_3710)?;
        }
        list_3711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("NextToken");
    if let Some(var_3714) = &input.next_token {
        scope_3713.string(var_3714);
    }
    #[allow(unused_mut)]
    let mut scope_3715 = writer.prefix("MaxResults");
    if let Some(var_3716) = &input.max_results {
        scope_3715.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3716).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3717 = writer.prefix("Filter");
    if let Some(var_3718) = &input.filters {
        let mut list_3720 = scope_3717.start_list(true, Some("Filter"));
        for item_3719 in var_3718 {
            #[allow(unused_mut)]
            let mut entry_3721 = list_3720.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3721, item_3719)?;
        }
        list_3720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("MaxResults");
    if let Some(var_3723) = &input.max_results {
        scope_3722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("NextToken");
    if let Some(var_3725) = &input.next_token {
        scope_3724.string(var_3725);
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("VolumeId");
    if let Some(var_3727) = &input.volume_ids {
        let mut list_3729 = scope_3726.start_list(true, Some("VolumeId"));
        for item_3728 in var_3727 {
            #[allow(unused_mut)]
            let mut entry_3730 = list_3729.entry();
            entry_3730.string(item_3728);
        }
        list_3729.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3731 = writer.prefix("DryRun");
    if let Some(var_3732) = &input.dry_run {
        scope_3731.boolean(*var_3732);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3733 = writer.prefix("Attribute");
    if let Some(var_3734) = &input.attribute {
        scope_3733.string(var_3734.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3735 = writer.prefix("VpcId");
    if let Some(var_3736) = &input.vpc_id {
        scope_3735.string(var_3736);
    }
    #[allow(unused_mut)]
    let mut scope_3737 = writer.prefix("DryRun");
    if let Some(var_3738) = &input.dry_run {
        scope_3737.boolean(*var_3738);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3739 = writer.prefix("Filter");
    if let Some(var_3740) = &input.filters {
        let mut list_3742 = scope_3739.start_list(true, Some("Filter"));
        for item_3741 in var_3740 {
            #[allow(unused_mut)]
            let mut entry_3743 = list_3742.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3743, item_3741)?;
        }
        list_3742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("DryRun");
    if let Some(var_3745) = &input.dry_run {
        scope_3744.boolean(*var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("VpcId");
    if let Some(var_3747) = &input.vpc_ids {
        let mut list_3749 = scope_3746.start_list(true, Some("VpcId"));
        for item_3748 in var_3747 {
            #[allow(unused_mut)]
            let mut entry_3750 = list_3749.entry();
            entry_3750.string(item_3748);
        }
        list_3749.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("MaxResults");
    if let Some(var_3752) = &input.max_results {
        scope_3751.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3752).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3753 = writer.prefix("NextToken");
    if let Some(var_3754) = &input.next_token {
        scope_3753.string(var_3754);
    }
    #[allow(unused_mut)]
    let mut scope_3755 = writer.prefix("VpcIds");
    if let Some(var_3756) = &input.vpc_ids {
        let mut list_3758 = scope_3755.start_list(true, Some("VpcId"));
        for item_3757 in var_3756 {
            #[allow(unused_mut)]
            let mut entry_3759 = list_3758.entry();
            entry_3759.string(item_3757);
        }
        list_3758.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("DryRun");
    if let Some(var_3761) = &input.dry_run {
        scope_3760.boolean(*var_3761);
    }
    #[allow(unused_mut)]
    let mut scope_3762 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3763) = &input.connection_notification_id {
        scope_3762.string(var_3763);
    }
    #[allow(unused_mut)]
    let mut scope_3764 = writer.prefix("Filter");
    if let Some(var_3765) = &input.filters {
        let mut list_3767 = scope_3764.start_list(true, Some("Filter"));
        for item_3766 in var_3765 {
            #[allow(unused_mut)]
            let mut entry_3768 = list_3767.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3768, item_3766)?;
        }
        list_3767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("MaxResults");
    if let Some(var_3770) = &input.max_results {
        scope_3769.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3770).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3771 = writer.prefix("NextToken");
    if let Some(var_3772) = &input.next_token {
        scope_3771.string(var_3772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3773 = writer.prefix("DryRun");
    if let Some(var_3774) = &input.dry_run {
        scope_3773.boolean(*var_3774);
    }
    #[allow(unused_mut)]
    let mut scope_3775 = writer.prefix("Filter");
    if let Some(var_3776) = &input.filters {
        let mut list_3778 = scope_3775.start_list(true, Some("Filter"));
        for item_3777 in var_3776 {
            #[allow(unused_mut)]
            let mut entry_3779 = list_3778.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3779, item_3777)?;
        }
        list_3778.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("MaxResults");
    if let Some(var_3781) = &input.max_results {
        scope_3780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("NextToken");
    if let Some(var_3783) = &input.next_token {
        scope_3782.string(var_3783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3784 = writer.prefix("DryRun");
    if let Some(var_3785) = &input.dry_run {
        scope_3784.boolean(*var_3785);
    }
    #[allow(unused_mut)]
    let mut scope_3786 = writer.prefix("VpcEndpointId");
    if let Some(var_3787) = &input.vpc_endpoint_ids {
        let mut list_3789 = scope_3786.start_list(true, Some("item"));
        for item_3788 in var_3787 {
            #[allow(unused_mut)]
            let mut entry_3790 = list_3789.entry();
            entry_3790.string(item_3788);
        }
        list_3789.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3791 = writer.prefix("Filter");
    if let Some(var_3792) = &input.filters {
        let mut list_3794 = scope_3791.start_list(true, Some("Filter"));
        for item_3793 in var_3792 {
            #[allow(unused_mut)]
            let mut entry_3795 = list_3794.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3795, item_3793)?;
        }
        list_3794.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("MaxResults");
    if let Some(var_3797) = &input.max_results {
        scope_3796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("NextToken");
    if let Some(var_3799) = &input.next_token {
        scope_3798.string(var_3799);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3800 = writer.prefix("DryRun");
    if let Some(var_3801) = &input.dry_run {
        scope_3800.boolean(*var_3801);
    }
    #[allow(unused_mut)]
    let mut scope_3802 = writer.prefix("ServiceId");
    if let Some(var_3803) = &input.service_ids {
        let mut list_3805 = scope_3802.start_list(true, Some("item"));
        for item_3804 in var_3803 {
            #[allow(unused_mut)]
            let mut entry_3806 = list_3805.entry();
            entry_3806.string(item_3804);
        }
        list_3805.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("Filter");
    if let Some(var_3808) = &input.filters {
        let mut list_3810 = scope_3807.start_list(true, Some("Filter"));
        for item_3809 in var_3808 {
            #[allow(unused_mut)]
            let mut entry_3811 = list_3810.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3811, item_3809)?;
        }
        list_3810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("MaxResults");
    if let Some(var_3813) = &input.max_results {
        scope_3812.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("NextToken");
    if let Some(var_3815) = &input.next_token {
        scope_3814.string(var_3815);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("DryRun");
    if let Some(var_3817) = &input.dry_run {
        scope_3816.boolean(*var_3817);
    }
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("ServiceId");
    if let Some(var_3819) = &input.service_id {
        scope_3818.string(var_3819);
    }
    #[allow(unused_mut)]
    let mut scope_3820 = writer.prefix("Filter");
    if let Some(var_3821) = &input.filters {
        let mut list_3823 = scope_3820.start_list(true, Some("Filter"));
        for item_3822 in var_3821 {
            #[allow(unused_mut)]
            let mut entry_3824 = list_3823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3824, item_3822)?;
        }
        list_3823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("MaxResults");
    if let Some(var_3826) = &input.max_results {
        scope_3825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("NextToken");
    if let Some(var_3828) = &input.next_token {
        scope_3827.string(var_3828);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("DryRun");
    if let Some(var_3830) = &input.dry_run {
        scope_3829.boolean(*var_3830);
    }
    #[allow(unused_mut)]
    let mut scope_3831 = writer.prefix("ServiceName");
    if let Some(var_3832) = &input.service_names {
        let mut list_3834 = scope_3831.start_list(true, Some("item"));
        for item_3833 in var_3832 {
            #[allow(unused_mut)]
            let mut entry_3835 = list_3834.entry();
            entry_3835.string(item_3833);
        }
        list_3834.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3836 = writer.prefix("Filter");
    if let Some(var_3837) = &input.filters {
        let mut list_3839 = scope_3836.start_list(true, Some("Filter"));
        for item_3838 in var_3837 {
            #[allow(unused_mut)]
            let mut entry_3840 = list_3839.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3840, item_3838)?;
        }
        list_3839.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("MaxResults");
    if let Some(var_3842) = &input.max_results {
        scope_3841.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3842).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("NextToken");
    if let Some(var_3844) = &input.next_token {
        scope_3843.string(var_3844);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("Filter");
    if let Some(var_3846) = &input.filters {
        let mut list_3848 = scope_3845.start_list(true, Some("Filter"));
        for item_3847 in var_3846 {
            #[allow(unused_mut)]
            let mut entry_3849 = list_3848.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3849, item_3847)?;
        }
        list_3848.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3850 = writer.prefix("DryRun");
    if let Some(var_3851) = &input.dry_run {
        scope_3850.boolean(*var_3851);
    }
    #[allow(unused_mut)]
    let mut scope_3852 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3853) = &input.vpc_peering_connection_ids {
        let mut list_3855 = scope_3852.start_list(true, Some("item"));
        for item_3854 in var_3853 {
            #[allow(unused_mut)]
            let mut entry_3856 = list_3855.entry();
            entry_3856.string(item_3854);
        }
        list_3855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("NextToken");
    if let Some(var_3858) = &input.next_token {
        scope_3857.string(var_3858);
    }
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("MaxResults");
    if let Some(var_3860) = &input.max_results {
        scope_3859.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3860).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("Filter");
    if let Some(var_3862) = &input.filters {
        let mut list_3864 = scope_3861.start_list(true, Some("Filter"));
        for item_3863 in var_3862 {
            #[allow(unused_mut)]
            let mut entry_3865 = list_3864.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3865, item_3863)?;
        }
        list_3864.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3866 = writer.prefix("VpcId");
    if let Some(var_3867) = &input.vpc_ids {
        let mut list_3869 = scope_3866.start_list(true, Some("VpcId"));
        for item_3868 in var_3867 {
            #[allow(unused_mut)]
            let mut entry_3870 = list_3869.entry();
            entry_3870.string(item_3868);
        }
        list_3869.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3871 = writer.prefix("DryRun");
    if let Some(var_3872) = &input.dry_run {
        scope_3871.boolean(*var_3872);
    }
    #[allow(unused_mut)]
    let mut scope_3873 = writer.prefix("NextToken");
    if let Some(var_3874) = &input.next_token {
        scope_3873.string(var_3874);
    }
    #[allow(unused_mut)]
    let mut scope_3875 = writer.prefix("MaxResults");
    if let Some(var_3876) = &input.max_results {
        scope_3875.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3876).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3877 = writer.prefix("Filter");
    if let Some(var_3878) = &input.filters {
        let mut list_3880 = scope_3877.start_list(true, Some("Filter"));
        for item_3879 in var_3878 {
            #[allow(unused_mut)]
            let mut entry_3881 = list_3880.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3881, item_3879)?;
        }
        list_3880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3882 = writer.prefix("VpnConnectionId");
    if let Some(var_3883) = &input.vpn_connection_ids {
        let mut list_3885 = scope_3882.start_list(true, Some("VpnConnectionId"));
        for item_3884 in var_3883 {
            #[allow(unused_mut)]
            let mut entry_3886 = list_3885.entry();
            entry_3886.string(item_3884);
        }
        list_3885.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3887 = writer.prefix("DryRun");
    if let Some(var_3888) = &input.dry_run {
        scope_3887.boolean(*var_3888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3889 = writer.prefix("Filter");
    if let Some(var_3890) = &input.filters {
        let mut list_3892 = scope_3889.start_list(true, Some("Filter"));
        for item_3891 in var_3890 {
            #[allow(unused_mut)]
            let mut entry_3893 = list_3892.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3893, item_3891)?;
        }
        list_3892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3894 = writer.prefix("VpnGatewayId");
    if let Some(var_3895) = &input.vpn_gateway_ids {
        let mut list_3897 = scope_3894.start_list(true, Some("VpnGatewayId"));
        for item_3896 in var_3895 {
            #[allow(unused_mut)]
            let mut entry_3898 = list_3897.entry();
            entry_3898.string(item_3896);
        }
        list_3897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3899 = writer.prefix("DryRun");
    if let Some(var_3900) = &input.dry_run {
        scope_3899.boolean(*var_3900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3901 = writer.prefix("DryRun");
    if let Some(var_3902) = &input.dry_run {
        scope_3901.boolean(*var_3902);
    }
    #[allow(unused_mut)]
    let mut scope_3903 = writer.prefix("InstanceId");
    if let Some(var_3904) = &input.instance_id {
        scope_3903.string(var_3904);
    }
    #[allow(unused_mut)]
    let mut scope_3905 = writer.prefix("VpcId");
    if let Some(var_3906) = &input.vpc_id {
        scope_3905.string(var_3906);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3907 = writer.prefix("DryRun");
    if let Some(var_3908) = &input.dry_run {
        scope_3907.boolean(*var_3908);
    }
    #[allow(unused_mut)]
    let mut scope_3909 = writer.prefix("InternetGatewayId");
    if let Some(var_3910) = &input.internet_gateway_id {
        scope_3909.string(var_3910);
    }
    #[allow(unused_mut)]
    let mut scope_3911 = writer.prefix("VpcId");
    if let Some(var_3912) = &input.vpc_id {
        scope_3911.string(var_3912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3913 = writer.prefix("AttachmentId");
    if let Some(var_3914) = &input.attachment_id {
        scope_3913.string(var_3914);
    }
    #[allow(unused_mut)]
    let mut scope_3915 = writer.prefix("DryRun");
    if let Some(var_3916) = &input.dry_run {
        scope_3915.boolean(*var_3916);
    }
    #[allow(unused_mut)]
    let mut scope_3917 = writer.prefix("Force");
    if let Some(var_3918) = &input.force {
        scope_3917.boolean(*var_3918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3919 = writer.prefix("Device");
    if let Some(var_3920) = &input.device {
        scope_3919.string(var_3920);
    }
    #[allow(unused_mut)]
    let mut scope_3921 = writer.prefix("Force");
    if let Some(var_3922) = &input.force {
        scope_3921.boolean(*var_3922);
    }
    #[allow(unused_mut)]
    let mut scope_3923 = writer.prefix("InstanceId");
    if let Some(var_3924) = &input.instance_id {
        scope_3923.string(var_3924);
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("VolumeId");
    if let Some(var_3926) = &input.volume_id {
        scope_3925.string(var_3926);
    }
    #[allow(unused_mut)]
    let mut scope_3927 = writer.prefix("DryRun");
    if let Some(var_3928) = &input.dry_run {
        scope_3927.boolean(*var_3928);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3929 = writer.prefix("VpcId");
    if let Some(var_3930) = &input.vpc_id {
        scope_3929.string(var_3930);
    }
    #[allow(unused_mut)]
    let mut scope_3931 = writer.prefix("VpnGatewayId");
    if let Some(var_3932) = &input.vpn_gateway_id {
        scope_3931.string(var_3932);
    }
    #[allow(unused_mut)]
    let mut scope_3933 = writer.prefix("DryRun");
    if let Some(var_3934) = &input.dry_run {
        scope_3933.boolean(*var_3934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3935 = writer.prefix("DryRun");
    if let Some(var_3936) = &input.dry_run {
        scope_3935.boolean(*var_3936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("AvailabilityZone");
    if let Some(var_3938) = &input.availability_zones {
        let mut list_3940 = scope_3937.start_list(true, Some("AvailabilityZone"));
        for item_3939 in var_3938 {
            #[allow(unused_mut)]
            let mut entry_3941 = list_3940.entry();
            entry_3941.string(item_3939);
        }
        list_3940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("SourceSnapshotId");
    if let Some(var_3943) = &input.source_snapshot_ids {
        let mut list_3945 = scope_3942.start_list(true, Some("SnapshotId"));
        for item_3944 in var_3943 {
            #[allow(unused_mut)]
            let mut entry_3946 = list_3945.entry();
            entry_3946.string(item_3944);
        }
        list_3945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3947 = writer.prefix("DryRun");
    if let Some(var_3948) = &input.dry_run {
        scope_3947.boolean(*var_3948);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3949 = writer.prefix("ImageId");
    if let Some(var_3950) = &input.image_id {
        scope_3949.string(var_3950);
    }
    #[allow(unused_mut)]
    let mut scope_3951 = writer.prefix("DryRun");
    if let Some(var_3952) = &input.dry_run {
        scope_3951.boolean(*var_3952);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3953 = writer.prefix("DryRun");
    if let Some(var_3954) = &input.dry_run {
        scope_3953.boolean(*var_3954);
    }
    #[allow(unused_mut)]
    let mut scope_3955 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_3956) = &input.delegated_admin_account_id {
        scope_3955.string(var_3956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3957 = writer.prefix("DryRun");
    if let Some(var_3958) = &input.dry_run {
        scope_3957.boolean(*var_3958);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3959 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_3960) = &input.transit_gateway_route_table_id {
        scope_3959.string(var_3960);
    }
    #[allow(unused_mut)]
    let mut scope_3961 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_3962) = &input.transit_gateway_attachment_id {
        scope_3961.string(var_3962);
    }
    #[allow(unused_mut)]
    let mut scope_3963 = writer.prefix("DryRun");
    if let Some(var_3964) = &input.dry_run {
        scope_3963.boolean(*var_3964);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3965 = writer.prefix("GatewayId");
    if let Some(var_3966) = &input.gateway_id {
        scope_3965.string(var_3966);
    }
    #[allow(unused_mut)]
    let mut scope_3967 = writer.prefix("RouteTableId");
    if let Some(var_3968) = &input.route_table_id {
        scope_3967.string(var_3968);
    }
    #[allow(unused_mut)]
    let mut scope_3969 = writer.prefix("DryRun");
    if let Some(var_3970) = &input.dry_run {
        scope_3969.boolean(*var_3970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3971 = writer.prefix("DryRun");
    if let Some(var_3972) = &input.dry_run {
        scope_3971.boolean(*var_3972);
    }
    #[allow(unused_mut)]
    let mut scope_3973 = writer.prefix("VpcId");
    if let Some(var_3974) = &input.vpc_id {
        scope_3973.string(var_3974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3975 = writer.prefix("VpcId");
    if let Some(var_3976) = &input.vpc_id {
        scope_3975.string(var_3976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3977 = writer.prefix("AssociationId");
    if let Some(var_3978) = &input.association_id {
        scope_3977.string(var_3978);
    }
    #[allow(unused_mut)]
    let mut scope_3979 = writer.prefix("PublicIp");
    if let Some(var_3980) = &input.public_ip {
        scope_3979.string(var_3980);
    }
    #[allow(unused_mut)]
    let mut scope_3981 = writer.prefix("DryRun");
    if let Some(var_3982) = &input.dry_run {
        scope_3981.boolean(*var_3982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3983 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_3984) = &input.client_vpn_endpoint_id {
        scope_3983.string(var_3984);
    }
    #[allow(unused_mut)]
    let mut scope_3985 = writer.prefix("AssociationId");
    if let Some(var_3986) = &input.association_id {
        scope_3985.string(var_3986);
    }
    #[allow(unused_mut)]
    let mut scope_3987 = writer.prefix("DryRun");
    if let Some(var_3988) = &input.dry_run {
        scope_3987.boolean(*var_3988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3989 = writer.prefix("CertificateArn");
    if let Some(var_3990) = &input.certificate_arn {
        scope_3989.string(var_3990);
    }
    #[allow(unused_mut)]
    let mut scope_3991 = writer.prefix("RoleArn");
    if let Some(var_3992) = &input.role_arn {
        scope_3991.string(var_3992);
    }
    #[allow(unused_mut)]
    let mut scope_3993 = writer.prefix("DryRun");
    if let Some(var_3994) = &input.dry_run {
        scope_3993.boolean(*var_3994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3995 = writer.prefix("AssociationId");
    if let Some(var_3996) = &input.association_id {
        scope_3995.string(var_3996);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3997 = writer.prefix("DryRun");
    if let Some(var_3998) = &input.dry_run {
        scope_3997.boolean(*var_3998);
    }
    #[allow(unused_mut)]
    let mut scope_3999 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4000) = &input.instance_event_window_id {
        scope_3999.string(var_4000);
    }
    #[allow(unused_mut)]
    let mut scope_4001 = writer.prefix("AssociationTarget");
    if let Some(var_4002) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4001, var_4002)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4003 = writer.prefix("AssociationId");
    if let Some(var_4004) = &input.association_id {
        scope_4003.string(var_4004);
    }
    #[allow(unused_mut)]
    let mut scope_4005 = writer.prefix("DryRun");
    if let Some(var_4006) = &input.dry_run {
        scope_4005.boolean(*var_4006);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4007 = writer.prefix("AssociationId");
    if let Some(var_4008) = &input.association_id {
        scope_4007.string(var_4008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4009 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4010) = &input.transit_gateway_multicast_domain_id {
        scope_4009.string(var_4010);
    }
    #[allow(unused_mut)]
    let mut scope_4011 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4012) = &input.transit_gateway_attachment_id {
        scope_4011.string(var_4012);
    }
    #[allow(unused_mut)]
    let mut scope_4013 = writer.prefix("SubnetIds");
    if let Some(var_4014) = &input.subnet_ids {
        let mut list_4016 = scope_4013.start_list(true, Some("item"));
        for item_4015 in var_4014 {
            #[allow(unused_mut)]
            let mut entry_4017 = list_4016.entry();
            entry_4017.string(item_4015);
        }
        list_4016.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("DryRun");
    if let Some(var_4019) = &input.dry_run {
        scope_4018.boolean(*var_4019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4021) = &input.transit_gateway_route_table_id {
        scope_4020.string(var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4023) = &input.transit_gateway_attachment_id {
        scope_4022.string(var_4023);
    }
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("DryRun");
    if let Some(var_4025) = &input.dry_run {
        scope_4024.boolean(*var_4025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("AssociationId");
    if let Some(var_4027) = &input.association_id {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("ClientToken");
    if let Some(var_4029) = &input.client_token {
        scope_4028.string(var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("DryRun");
    if let Some(var_4031) = &input.dry_run {
        scope_4030.boolean(*var_4031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("AssociationId");
    if let Some(var_4033) = &input.association_id {
        scope_4032.string(var_4033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("DryRun");
    if let Some(var_4035) = &input.dry_run {
        scope_4034.boolean(*var_4035);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("AvailabilityZone");
    if let Some(var_4037) = &input.availability_zones {
        let mut list_4039 = scope_4036.start_list(true, Some("AvailabilityZone"));
        for item_4038 in var_4037 {
            #[allow(unused_mut)]
            let mut entry_4040 = list_4039.entry();
            entry_4040.string(item_4038);
        }
        list_4039.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4041 = writer.prefix("SourceSnapshotId");
    if let Some(var_4042) = &input.source_snapshot_ids {
        let mut list_4044 = scope_4041.start_list(true, Some("SnapshotId"));
        for item_4043 in var_4042 {
            #[allow(unused_mut)]
            let mut entry_4045 = list_4044.entry();
            entry_4045.string(item_4043);
        }
        list_4044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("ImageId");
    if let Some(var_4049) = &input.image_id {
        scope_4048.string(var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("DeprecateAt");
    if let Some(var_4051) = &input.deprecate_at {
        scope_4050.date_time(var_4051, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("DryRun");
    if let Some(var_4053) = &input.dry_run {
        scope_4052.boolean(*var_4053);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("DryRun");
    if let Some(var_4055) = &input.dry_run {
        scope_4054.boolean(*var_4055);
    }
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4057) = &input.delegated_admin_account_id {
        scope_4056.string(var_4057);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("DryRun");
    if let Some(var_4059) = &input.dry_run {
        scope_4058.boolean(*var_4059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4061) = &input.transit_gateway_route_table_id {
        scope_4060.string(var_4061);
    }
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4063) = &input.transit_gateway_attachment_id {
        scope_4062.string(var_4063);
    }
    #[allow(unused_mut)]
    let mut scope_4064 = writer.prefix("DryRun");
    if let Some(var_4065) = &input.dry_run {
        scope_4064.boolean(*var_4065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4066 = writer.prefix("GatewayId");
    if let Some(var_4067) = &input.gateway_id {
        scope_4066.string(var_4067);
    }
    #[allow(unused_mut)]
    let mut scope_4068 = writer.prefix("RouteTableId");
    if let Some(var_4069) = &input.route_table_id {
        scope_4068.string(var_4069);
    }
    #[allow(unused_mut)]
    let mut scope_4070 = writer.prefix("DryRun");
    if let Some(var_4071) = &input.dry_run {
        scope_4070.boolean(*var_4071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4072 = writer.prefix("DryRun");
    if let Some(var_4073) = &input.dry_run {
        scope_4072.boolean(*var_4073);
    }
    #[allow(unused_mut)]
    let mut scope_4074 = writer.prefix("VolumeId");
    if let Some(var_4075) = &input.volume_id {
        scope_4074.string(var_4075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4076 = writer.prefix("DryRun");
    if let Some(var_4077) = &input.dry_run {
        scope_4076.boolean(*var_4077);
    }
    #[allow(unused_mut)]
    let mut scope_4078 = writer.prefix("VpcId");
    if let Some(var_4079) = &input.vpc_id {
        scope_4078.string(var_4079);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4080 = writer.prefix("VpcId");
    if let Some(var_4081) = &input.vpc_id {
        scope_4080.string(var_4081);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4082 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4083) = &input.client_vpn_endpoint_id {
        scope_4082.string(var_4083);
    }
    #[allow(unused_mut)]
    let mut scope_4084 = writer.prefix("DryRun");
    if let Some(var_4085) = &input.dry_run {
        scope_4084.boolean(*var_4085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4086 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4087) = &input.client_vpn_endpoint_id {
        scope_4086.string(var_4087);
    }
    #[allow(unused_mut)]
    let mut scope_4088 = writer.prefix("DryRun");
    if let Some(var_4089) = &input.dry_run {
        scope_4088.boolean(*var_4089);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4090 = writer.prefix("ClientToken");
    if let Some(var_4091) = &input.client_token {
        scope_4090.string(var_4091);
    }
    #[allow(unused_mut)]
    let mut scope_4092 = writer.prefix("Description");
    if let Some(var_4093) = &input.description {
        scope_4092.string(var_4093);
    }
    #[allow(unused_mut)]
    let mut scope_4094 = writer.prefix("DiskImageFormat");
    if let Some(var_4095) = &input.disk_image_format {
        scope_4094.string(var_4095.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4096 = writer.prefix("DryRun");
    if let Some(var_4097) = &input.dry_run {
        scope_4096.boolean(*var_4097);
    }
    #[allow(unused_mut)]
    let mut scope_4098 = writer.prefix("ImageId");
    if let Some(var_4099) = &input.image_id {
        scope_4098.string(var_4099);
    }
    #[allow(unused_mut)]
    let mut scope_4100 = writer.prefix("S3ExportLocation");
    if let Some(var_4101) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4100, var_4101,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("RoleName");
    if let Some(var_4103) = &input.role_name {
        scope_4102.string(var_4103);
    }
    #[allow(unused_mut)]
    let mut scope_4104 = writer.prefix("TagSpecification");
    if let Some(var_4105) = &input.tag_specifications {
        let mut list_4107 = scope_4104.start_list(true, Some("item"));
        for item_4106 in var_4105 {
            #[allow(unused_mut)]
            let mut entry_4108 = list_4107.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4108, item_4106,
            )?;
        }
        list_4107.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4110) = &input.transit_gateway_route_table_id {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("Filter");
    if let Some(var_4112) = &input.filters {
        let mut list_4114 = scope_4111.start_list(true, Some("Filter"));
        for item_4113 in var_4112 {
            #[allow(unused_mut)]
            let mut entry_4115 = list_4114.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4115, item_4113)?;
        }
        list_4114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4116 = writer.prefix("S3Bucket");
    if let Some(var_4117) = &input.s3_bucket {
        scope_4116.string(var_4117);
    }
    #[allow(unused_mut)]
    let mut scope_4118 = writer.prefix("DryRun");
    if let Some(var_4119) = &input.dry_run {
        scope_4118.boolean(*var_4119);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4120 = writer.prefix("CertificateArn");
    if let Some(var_4121) = &input.certificate_arn {
        scope_4120.string(var_4121);
    }
    #[allow(unused_mut)]
    let mut scope_4122 = writer.prefix("DryRun");
    if let Some(var_4123) = &input.dry_run {
        scope_4122.boolean(*var_4123);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4124 = writer.prefix("PoolId");
    if let Some(var_4125) = &input.pool_id {
        scope_4124.string(var_4125);
    }
    #[allow(unused_mut)]
    let mut scope_4126 = writer.prefix("NextToken");
    if let Some(var_4127) = &input.next_token {
        scope_4126.string(var_4127);
    }
    #[allow(unused_mut)]
    let mut scope_4128 = writer.prefix("MaxResults");
    if let Some(var_4129) = &input.max_results {
        scope_4128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4129).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4130 = writer.prefix("DryRun");
    if let Some(var_4131) = &input.dry_run {
        scope_4130.boolean(*var_4131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4132 = writer.prefix("CapacityReservationId");
    if let Some(var_4133) = &input.capacity_reservation_id {
        scope_4132.string(var_4133);
    }
    #[allow(unused_mut)]
    let mut scope_4134 = writer.prefix("NextToken");
    if let Some(var_4135) = &input.next_token {
        scope_4134.string(var_4135);
    }
    #[allow(unused_mut)]
    let mut scope_4136 = writer.prefix("MaxResults");
    if let Some(var_4137) = &input.max_results {
        scope_4136.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4137).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4138 = writer.prefix("DryRun");
    if let Some(var_4139) = &input.dry_run {
        scope_4138.boolean(*var_4139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4140 = writer.prefix("PoolId");
    if let Some(var_4141) = &input.pool_id {
        scope_4140.string(var_4141);
    }
    #[allow(unused_mut)]
    let mut scope_4142 = writer.prefix("Filter");
    if let Some(var_4143) = &input.filters {
        let mut list_4145 = scope_4142.start_list(true, Some("Filter"));
        for item_4144 in var_4143 {
            #[allow(unused_mut)]
            let mut entry_4146 = list_4145.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4146, item_4144)?;
        }
        list_4145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("MaxResults");
    if let Some(var_4148) = &input.max_results {
        scope_4147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4148).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("NextToken");
    if let Some(var_4150) = &input.next_token {
        scope_4149.string(var_4150);
    }
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("DryRun");
    if let Some(var_4152) = &input.dry_run {
        scope_4151.boolean(*var_4152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("InstanceId");
    if let Some(var_4154) = &input.instance_id {
        scope_4153.string(var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("DryRun");
    if let Some(var_4156) = &input.dry_run {
        scope_4155.boolean(*var_4156);
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("Latest");
    if let Some(var_4158) = &input.latest {
        scope_4157.boolean(*var_4158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("DryRun");
    if let Some(var_4160) = &input.dry_run {
        scope_4159.boolean(*var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("InstanceId");
    if let Some(var_4162) = &input.instance_id {
        scope_4161.string(var_4162);
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("WakeUp");
    if let Some(var_4164) = &input.wake_up {
        scope_4163.boolean(*var_4164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("DryRun");
    if let Some(var_4166) = &input.dry_run {
        scope_4165.boolean(*var_4166);
    }
    #[allow(unused_mut)]
    let mut scope_4167 = writer.prefix("InstanceFamily");
    if let Some(var_4168) = &input.instance_family {
        scope_4167.string(var_4168.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4169 = writer.prefix("DryRun");
    if let Some(var_4170) = &input.dry_run {
        scope_4169.boolean(*var_4170);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4171 = writer.prefix("DryRun");
    if let Some(var_4172) = &input.dry_run {
        scope_4171.boolean(*var_4172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4173 = writer.prefix("DryRun");
    if let Some(var_4174) = &input.dry_run {
        scope_4173.boolean(*var_4174);
    }
    #[allow(unused_mut)]
    let mut scope_4175 = writer.prefix("FlowLogId");
    if let Some(var_4176) = &input.flow_log_id {
        scope_4175.string(var_4176);
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4178) = &input.config_delivery_s3_destination_arn {
        scope_4177.string(var_4178);
    }
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("IntegrateService");
    if let Some(var_4180) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4179, var_4180)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("CapacityReservationId");
    if let Some(var_4182) = &input.capacity_reservation_id {
        scope_4181.string(var_4182);
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("NextToken");
    if let Some(var_4184) = &input.next_token {
        scope_4183.string(var_4184);
    }
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("MaxResults");
    if let Some(var_4186) = &input.max_results {
        scope_4185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("DryRun");
    if let Some(var_4188) = &input.dry_run {
        scope_4187.boolean(*var_4188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("HostIdSet");
    if let Some(var_4190) = &input.host_id_set {
        let mut list_4192 = scope_4189.start_list(true, Some("item"));
        for item_4191 in var_4190 {
            #[allow(unused_mut)]
            let mut entry_4193 = list_4192.entry();
            entry_4193.string(item_4191);
        }
        list_4192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4194 = writer.prefix("OfferingId");
    if let Some(var_4195) = &input.offering_id {
        scope_4194.string(var_4195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4196 = writer.prefix("DryRun");
    if let Some(var_4197) = &input.dry_run {
        scope_4196.boolean(*var_4197);
    }
    #[allow(unused_mut)]
    let mut scope_4198 = writer.prefix("ArchitectureType");
    if let Some(var_4199) = &input.architecture_types {
        let mut list_4201 = scope_4198.start_list(true, Some("item"));
        for item_4200 in var_4199 {
            #[allow(unused_mut)]
            let mut entry_4202 = list_4201.entry();
            entry_4202.string(item_4200.as_str());
        }
        list_4201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("VirtualizationType");
    if let Some(var_4204) = &input.virtualization_types {
        let mut list_4206 = scope_4203.start_list(true, Some("item"));
        for item_4205 in var_4204 {
            #[allow(unused_mut)]
            let mut entry_4207 = list_4206.entry();
            entry_4207.string(item_4205.as_str());
        }
        list_4206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("InstanceRequirements");
    if let Some(var_4209) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4208, var_4209,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("MaxResults");
    if let Some(var_4211) = &input.max_results {
        scope_4210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4211).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("NextToken");
    if let Some(var_4213) = &input.next_token {
        scope_4212.string(var_4213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("DryRun");
    if let Some(var_4215) = &input.dry_run {
        scope_4214.boolean(*var_4215);
    }
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("Cidr");
    if let Some(var_4217) = &input.cidr {
        scope_4216.string(var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("IpamScopeId");
    if let Some(var_4219) = &input.ipam_scope_id {
        scope_4218.string(var_4219);
    }
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("VpcId");
    if let Some(var_4221) = &input.vpc_id {
        scope_4220.string(var_4221);
    }
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("StartTime");
    if let Some(var_4223) = &input.start_time {
        scope_4222.date_time(var_4223, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("EndTime");
    if let Some(var_4225) = &input.end_time {
        scope_4224.date_time(var_4225, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("MaxResults");
    if let Some(var_4227) = &input.max_results {
        scope_4226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("NextToken");
    if let Some(var_4229) = &input.next_token {
        scope_4228.string(var_4229);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("DryRun");
    if let Some(var_4231) = &input.dry_run {
        scope_4230.boolean(*var_4231);
    }
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("IpamPoolId");
    if let Some(var_4233) = &input.ipam_pool_id {
        scope_4232.string(var_4233);
    }
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4235) = &input.ipam_pool_allocation_id {
        scope_4234.string(var_4235);
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("Filter");
    if let Some(var_4237) = &input.filters {
        let mut list_4239 = scope_4236.start_list(true, Some("Filter"));
        for item_4238 in var_4237 {
            #[allow(unused_mut)]
            let mut entry_4240 = list_4239.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4240, item_4238)?;
        }
        list_4239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4241 = writer.prefix("MaxResults");
    if let Some(var_4242) = &input.max_results {
        scope_4241.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4242).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4243 = writer.prefix("NextToken");
    if let Some(var_4244) = &input.next_token {
        scope_4243.string(var_4244);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4245 = writer.prefix("DryRun");
    if let Some(var_4246) = &input.dry_run {
        scope_4245.boolean(*var_4246);
    }
    #[allow(unused_mut)]
    let mut scope_4247 = writer.prefix("IpamPoolId");
    if let Some(var_4248) = &input.ipam_pool_id {
        scope_4247.string(var_4248);
    }
    #[allow(unused_mut)]
    let mut scope_4249 = writer.prefix("Filter");
    if let Some(var_4250) = &input.filters {
        let mut list_4252 = scope_4249.start_list(true, Some("Filter"));
        for item_4251 in var_4250 {
            #[allow(unused_mut)]
            let mut entry_4253 = list_4252.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4253, item_4251)?;
        }
        list_4252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4254 = writer.prefix("MaxResults");
    if let Some(var_4255) = &input.max_results {
        scope_4254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4255).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4256 = writer.prefix("NextToken");
    if let Some(var_4257) = &input.next_token {
        scope_4256.string(var_4257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4258 = writer.prefix("DryRun");
    if let Some(var_4259) = &input.dry_run {
        scope_4258.boolean(*var_4259);
    }
    #[allow(unused_mut)]
    let mut scope_4260 = writer.prefix("Filter");
    if let Some(var_4261) = &input.filters {
        let mut list_4263 = scope_4260.start_list(true, Some("Filter"));
        for item_4262 in var_4261 {
            #[allow(unused_mut)]
            let mut entry_4264 = list_4263.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4264, item_4262)?;
        }
        list_4263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4265 = writer.prefix("MaxResults");
    if let Some(var_4266) = &input.max_results {
        scope_4265.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4266).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4267 = writer.prefix("NextToken");
    if let Some(var_4268) = &input.next_token {
        scope_4267.string(var_4268);
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("IpamScopeId");
    if let Some(var_4270) = &input.ipam_scope_id {
        scope_4269.string(var_4270);
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("IpamPoolId");
    if let Some(var_4272) = &input.ipam_pool_id {
        scope_4271.string(var_4272);
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("ResourceId");
    if let Some(var_4274) = &input.resource_id {
        scope_4273.string(var_4274);
    }
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("ResourceType");
    if let Some(var_4276) = &input.resource_type {
        scope_4275.string(var_4276.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("ResourceTag");
    if let Some(var_4278) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4277, var_4278,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("ResourceOwner");
    if let Some(var_4280) = &input.resource_owner {
        scope_4279.string(var_4280);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("DryRun");
    if let Some(var_4282) = &input.dry_run {
        scope_4281.boolean(*var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("InstanceId");
    if let Some(var_4284) = &input.instance_id {
        scope_4283.string(var_4284);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("DryRun");
    if let Some(var_4286) = &input.dry_run {
        scope_4285.boolean(*var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("PrefixListId");
    if let Some(var_4288) = &input.prefix_list_id {
        scope_4287.string(var_4288);
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("MaxResults");
    if let Some(var_4290) = &input.max_results {
        scope_4289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("NextToken");
    if let Some(var_4292) = &input.next_token {
        scope_4291.string(var_4292);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("DryRun");
    if let Some(var_4294) = &input.dry_run {
        scope_4293.boolean(*var_4294);
    }
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("PrefixListId");
    if let Some(var_4296) = &input.prefix_list_id {
        scope_4295.string(var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("TargetVersion");
    if let Some(var_4298) = &input.target_version {
        scope_4297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("MaxResults");
    if let Some(var_4300) = &input.max_results {
        scope_4299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4301 = writer.prefix("NextToken");
    if let Some(var_4302) = &input.next_token {
        scope_4301.string(var_4302);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4303 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4304) = &input.network_insights_access_scope_analysis_id {
        scope_4303.string(var_4304);
    }
    #[allow(unused_mut)]
    let mut scope_4305 = writer.prefix("MaxResults");
    if let Some(var_4306) = &input.max_results {
        scope_4305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4307 = writer.prefix("NextToken");
    if let Some(var_4308) = &input.next_token {
        scope_4307.string(var_4308);
    }
    #[allow(unused_mut)]
    let mut scope_4309 = writer.prefix("DryRun");
    if let Some(var_4310) = &input.dry_run {
        scope_4309.boolean(*var_4310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4311 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4312) = &input.network_insights_access_scope_id {
        scope_4311.string(var_4312);
    }
    #[allow(unused_mut)]
    let mut scope_4313 = writer.prefix("DryRun");
    if let Some(var_4314) = &input.dry_run {
        scope_4313.boolean(*var_4314);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4315 = writer.prefix("InstanceId");
    if let Some(var_4316) = &input.instance_id {
        scope_4315.string(var_4316);
    }
    #[allow(unused_mut)]
    let mut scope_4317 = writer.prefix("DryRun");
    if let Some(var_4318) = &input.dry_run {
        scope_4317.boolean(*var_4318);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("DryRun");
    if let Some(var_4320) = &input.dry_run {
        scope_4319.boolean(*var_4320);
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("ReservedInstanceId");
    if let Some(var_4322) = &input.reserved_instance_ids {
        let mut list_4324 = scope_4321.start_list(true, Some("ReservedInstanceId"));
        for item_4323 in var_4322 {
            #[allow(unused_mut)]
            let mut entry_4325 = list_4324.entry();
            entry_4325.string(item_4323);
        }
        list_4324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4326 = writer.prefix("TargetConfiguration");
    if let Some(var_4327) = &input.target_configurations {
        let mut list_4329 = scope_4326.start_list(true, Some("TargetConfigurationRequest"));
        for item_4328 in var_4327 {
            #[allow(unused_mut)]
            let mut entry_4330 = list_4329.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4330, item_4328,
            )?;
        }
        list_4329.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4331 = writer.prefix("DryRun");
    if let Some(var_4332) = &input.dry_run {
        scope_4331.boolean(*var_4332);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4333 = writer.prefix("InstanceType");
    if let Some(var_4334) = &input.instance_types {
        let mut list_4336 = scope_4333.start_list(true, None);
        for item_4335 in var_4334 {
            #[allow(unused_mut)]
            let mut entry_4337 = list_4336.entry();
            entry_4337.string(item_4335);
        }
        list_4336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("TargetCapacity");
    if let Some(var_4339) = &input.target_capacity {
        scope_4338.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4339).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4341) = &input.target_capacity_unit_type {
        scope_4340.string(var_4341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4343) = &input.single_availability_zone {
        scope_4342.boolean(*var_4343);
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("RegionName");
    if let Some(var_4345) = &input.region_names {
        let mut list_4347 = scope_4344.start_list(true, None);
        for item_4346 in var_4345 {
            #[allow(unused_mut)]
            let mut entry_4348 = list_4347.entry();
            entry_4348.string(item_4346);
        }
        list_4347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4349 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4350) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4349, var_4350)?;
    }
    #[allow(unused_mut)]
    let mut scope_4351 = writer.prefix("DryRun");
    if let Some(var_4352) = &input.dry_run {
        scope_4351.boolean(*var_4352);
    }
    #[allow(unused_mut)]
    let mut scope_4353 = writer.prefix("MaxResults");
    if let Some(var_4354) = &input.max_results {
        scope_4353.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4354).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4355 = writer.prefix("NextToken");
    if let Some(var_4356) = &input.next_token {
        scope_4355.string(var_4356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4357 = writer.prefix("Filter");
    if let Some(var_4358) = &input.filters {
        let mut list_4360 = scope_4357.start_list(true, Some("Filter"));
        for item_4359 in var_4358 {
            #[allow(unused_mut)]
            let mut entry_4361 = list_4360.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4361, item_4359)?;
        }
        list_4360.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("SubnetId");
    if let Some(var_4363) = &input.subnet_id {
        scope_4362.string(var_4363);
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("DryRun");
    if let Some(var_4365) = &input.dry_run {
        scope_4364.boolean(*var_4365);
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("NextToken");
    if let Some(var_4367) = &input.next_token {
        scope_4366.string(var_4367);
    }
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("MaxResults");
    if let Some(var_4369) = &input.max_results {
        scope_4368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4369).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4371) = &input.transit_gateway_attachment_id {
        scope_4370.string(var_4371);
    }
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("Filter");
    if let Some(var_4373) = &input.filters {
        let mut list_4375 = scope_4372.start_list(true, Some("Filter"));
        for item_4374 in var_4373 {
            #[allow(unused_mut)]
            let mut entry_4376 = list_4375.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4376, item_4374)?;
        }
        list_4375.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4377 = writer.prefix("MaxResults");
    if let Some(var_4378) = &input.max_results {
        scope_4377.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4378).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4379 = writer.prefix("NextToken");
    if let Some(var_4380) = &input.next_token {
        scope_4379.string(var_4380);
    }
    #[allow(unused_mut)]
    let mut scope_4381 = writer.prefix("DryRun");
    if let Some(var_4382) = &input.dry_run {
        scope_4381.boolean(*var_4382);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4383 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4384) = &input.transit_gateway_multicast_domain_id {
        scope_4383.string(var_4384);
    }
    #[allow(unused_mut)]
    let mut scope_4385 = writer.prefix("Filter");
    if let Some(var_4386) = &input.filters {
        let mut list_4388 = scope_4385.start_list(true, Some("Filter"));
        for item_4387 in var_4386 {
            #[allow(unused_mut)]
            let mut entry_4389 = list_4388.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4389, item_4387)?;
        }
        list_4388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4390 = writer.prefix("MaxResults");
    if let Some(var_4391) = &input.max_results {
        scope_4390.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4391).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4392 = writer.prefix("NextToken");
    if let Some(var_4393) = &input.next_token {
        scope_4392.string(var_4393);
    }
    #[allow(unused_mut)]
    let mut scope_4394 = writer.prefix("DryRun");
    if let Some(var_4395) = &input.dry_run {
        scope_4394.boolean(*var_4395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4397) = &input.transit_gateway_route_table_id {
        scope_4396.string(var_4397);
    }
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("Filter");
    if let Some(var_4399) = &input.filters {
        let mut list_4401 = scope_4398.start_list(true, Some("Filter"));
        for item_4400 in var_4399 {
            #[allow(unused_mut)]
            let mut entry_4402 = list_4401.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4402, item_4400)?;
        }
        list_4401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("MaxResults");
    if let Some(var_4404) = &input.max_results {
        scope_4403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4404).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("NextToken");
    if let Some(var_4406) = &input.next_token {
        scope_4405.string(var_4406);
    }
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("DryRun");
    if let Some(var_4408) = &input.dry_run {
        scope_4407.boolean(*var_4408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4409 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4410) = &input.transit_gateway_route_table_id {
        scope_4409.string(var_4410);
    }
    #[allow(unused_mut)]
    let mut scope_4411 = writer.prefix("Filter");
    if let Some(var_4412) = &input.filters {
        let mut list_4414 = scope_4411.start_list(true, Some("Filter"));
        for item_4413 in var_4412 {
            #[allow(unused_mut)]
            let mut entry_4415 = list_4414.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4415, item_4413)?;
        }
        list_4414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("MaxResults");
    if let Some(var_4417) = &input.max_results {
        scope_4416.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4417).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("NextToken");
    if let Some(var_4419) = &input.next_token {
        scope_4418.string(var_4419);
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("DryRun");
    if let Some(var_4421) = &input.dry_run {
        scope_4420.boolean(*var_4421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4423) = &input.transit_gateway_route_table_id {
        scope_4422.string(var_4423);
    }
    #[allow(unused_mut)]
    let mut scope_4424 = writer.prefix("Filter");
    if let Some(var_4425) = &input.filters {
        let mut list_4427 = scope_4424.start_list(true, Some("Filter"));
        for item_4426 in var_4425 {
            #[allow(unused_mut)]
            let mut entry_4428 = list_4427.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4428, item_4426)?;
        }
        list_4427.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("MaxResults");
    if let Some(var_4430) = &input.max_results {
        scope_4429.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4430).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("NextToken");
    if let Some(var_4432) = &input.next_token {
        scope_4431.string(var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("DryRun");
    if let Some(var_4434) = &input.dry_run {
        scope_4433.boolean(*var_4434);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("VpnConnectionId");
    if let Some(var_4436) = &input.vpn_connection_id {
        scope_4435.string(var_4436);
    }
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4438) = &input.vpn_connection_device_type_id {
        scope_4437.string(var_4438);
    }
    #[allow(unused_mut)]
    let mut scope_4439 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4440) = &input.internet_key_exchange_version {
        scope_4439.string(var_4440);
    }
    #[allow(unused_mut)]
    let mut scope_4441 = writer.prefix("DryRun");
    if let Some(var_4442) = &input.dry_run {
        scope_4441.boolean(*var_4442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4443 = writer.prefix("MaxResults");
    if let Some(var_4444) = &input.max_results {
        scope_4443.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4444).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4445 = writer.prefix("NextToken");
    if let Some(var_4446) = &input.next_token {
        scope_4445.string(var_4446);
    }
    #[allow(unused_mut)]
    let mut scope_4447 = writer.prefix("DryRun");
    if let Some(var_4448) = &input.dry_run {
        scope_4447.boolean(*var_4448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4449 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4450) = &input.client_vpn_endpoint_id {
        scope_4449.string(var_4450);
    }
    #[allow(unused_mut)]
    let mut scope_4451 = writer.prefix("CertificateRevocationList");
    if let Some(var_4452) = &input.certificate_revocation_list {
        scope_4451.string(var_4452);
    }
    #[allow(unused_mut)]
    let mut scope_4453 = writer.prefix("DryRun");
    if let Some(var_4454) = &input.dry_run {
        scope_4453.boolean(*var_4454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("Architecture");
    if let Some(var_4456) = &input.architecture {
        scope_4455.string(var_4456);
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("ClientData");
    if let Some(var_4458) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4457, var_4458)?;
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("ClientToken");
    if let Some(var_4460) = &input.client_token {
        scope_4459.string(var_4460);
    }
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("Description");
    if let Some(var_4462) = &input.description {
        scope_4461.string(var_4462);
    }
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("DiskContainer");
    if let Some(var_4464) = &input.disk_containers {
        let mut list_4466 = scope_4463.start_list(true, Some("item"));
        for item_4465 in var_4464 {
            #[allow(unused_mut)]
            let mut entry_4467 = list_4466.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4467, item_4465,
            )?;
        }
        list_4466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("DryRun");
    if let Some(var_4469) = &input.dry_run {
        scope_4468.boolean(*var_4469);
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("Encrypted");
    if let Some(var_4471) = &input.encrypted {
        scope_4470.boolean(*var_4471);
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("Hypervisor");
    if let Some(var_4473) = &input.hypervisor {
        scope_4472.string(var_4473);
    }
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("KmsKeyId");
    if let Some(var_4475) = &input.kms_key_id {
        scope_4474.string(var_4475);
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("LicenseType");
    if let Some(var_4477) = &input.license_type {
        scope_4476.string(var_4477);
    }
    #[allow(unused_mut)]
    let mut scope_4478 = writer.prefix("Platform");
    if let Some(var_4479) = &input.platform {
        scope_4478.string(var_4479);
    }
    #[allow(unused_mut)]
    let mut scope_4480 = writer.prefix("RoleName");
    if let Some(var_4481) = &input.role_name {
        scope_4480.string(var_4481);
    }
    #[allow(unused_mut)]
    let mut scope_4482 = writer.prefix("LicenseSpecifications");
    if let Some(var_4483) = &input.license_specifications {
        let mut list_4485 = scope_4482.start_list(true, Some("item"));
        for item_4484 in var_4483 {
            #[allow(unused_mut)]
            let mut entry_4486 = list_4485.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4486, item_4484)?;
        }
        list_4485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("TagSpecification");
    if let Some(var_4488) = &input.tag_specifications {
        let mut list_4490 = scope_4487.start_list(true, Some("item"));
        for item_4489 in var_4488 {
            #[allow(unused_mut)]
            let mut entry_4491 = list_4490.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4491, item_4489,
            )?;
        }
        list_4490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4492 = writer.prefix("UsageOperation");
    if let Some(var_4493) = &input.usage_operation {
        scope_4492.string(var_4493);
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("BootMode");
    if let Some(var_4495) = &input.boot_mode {
        scope_4494.string(var_4495.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("Description");
    if let Some(var_4497) = &input.description {
        scope_4496.string(var_4497);
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("DiskImage");
    if let Some(var_4499) = &input.disk_images {
        let mut list_4501 = scope_4498.start_list(true, None);
        for item_4500 in var_4499 {
            #[allow(unused_mut)]
            let mut entry_4502 = list_4501.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4502, item_4500)?;
        }
        list_4501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4503 = writer.prefix("DryRun");
    if let Some(var_4504) = &input.dry_run {
        scope_4503.boolean(*var_4504);
    }
    #[allow(unused_mut)]
    let mut scope_4505 = writer.prefix("LaunchSpecification");
    if let Some(var_4506) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4505, var_4506,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4507 = writer.prefix("Platform");
    if let Some(var_4508) = &input.platform {
        scope_4507.string(var_4508.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4509 = writer.prefix("DryRun");
    if let Some(var_4510) = &input.dry_run {
        scope_4509.boolean(*var_4510);
    }
    #[allow(unused_mut)]
    let mut scope_4511 = writer.prefix("KeyName");
    if let Some(var_4512) = &input.key_name {
        scope_4511.string(var_4512);
    }
    #[allow(unused_mut)]
    let mut scope_4513 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4514) = &input.public_key_material {
        scope_4513.string(&aws_smithy_types::base64::encode(var_4514));
    }
    #[allow(unused_mut)]
    let mut scope_4515 = writer.prefix("TagSpecification");
    if let Some(var_4516) = &input.tag_specifications {
        let mut list_4518 = scope_4515.start_list(true, Some("item"));
        for item_4517 in var_4516 {
            #[allow(unused_mut)]
            let mut entry_4519 = list_4518.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4519, item_4517,
            )?;
        }
        list_4518.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("ClientData");
    if let Some(var_4521) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4520, var_4521)?;
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("ClientToken");
    if let Some(var_4523) = &input.client_token {
        scope_4522.string(var_4523);
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("Description");
    if let Some(var_4525) = &input.description {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("DiskContainer");
    if let Some(var_4527) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4526, var_4527,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("DryRun");
    if let Some(var_4529) = &input.dry_run {
        scope_4528.boolean(*var_4529);
    }
    #[allow(unused_mut)]
    let mut scope_4530 = writer.prefix("Encrypted");
    if let Some(var_4531) = &input.encrypted {
        scope_4530.boolean(*var_4531);
    }
    #[allow(unused_mut)]
    let mut scope_4532 = writer.prefix("KmsKeyId");
    if let Some(var_4533) = &input.kms_key_id {
        scope_4532.string(var_4533);
    }
    #[allow(unused_mut)]
    let mut scope_4534 = writer.prefix("RoleName");
    if let Some(var_4535) = &input.role_name {
        scope_4534.string(var_4535);
    }
    #[allow(unused_mut)]
    let mut scope_4536 = writer.prefix("TagSpecification");
    if let Some(var_4537) = &input.tag_specifications {
        let mut list_4539 = scope_4536.start_list(true, Some("item"));
        for item_4538 in var_4537 {
            #[allow(unused_mut)]
            let mut entry_4540 = list_4539.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4540, item_4538,
            )?;
        }
        list_4539.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("AvailabilityZone");
    if let Some(var_4542) = &input.availability_zone {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("Description");
    if let Some(var_4544) = &input.description {
        scope_4543.string(var_4544);
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("DryRun");
    if let Some(var_4546) = &input.dry_run {
        scope_4545.boolean(*var_4546);
    }
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("Image");
    if let Some(var_4548) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4547, var_4548)?;
    }
    #[allow(unused_mut)]
    let mut scope_4549 = writer.prefix("Volume");
    if let Some(var_4550) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4549, var_4550)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4551 = writer.prefix("MaxResults");
    if let Some(var_4552) = &input.max_results {
        scope_4551.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4552).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4553 = writer.prefix("NextToken");
    if let Some(var_4554) = &input.next_token {
        scope_4553.string(var_4554);
    }
    #[allow(unused_mut)]
    let mut scope_4555 = writer.prefix("SnapshotId");
    if let Some(var_4556) = &input.snapshot_ids {
        let mut list_4558 = scope_4555.start_list(true, Some("SnapshotId"));
        for item_4557 in var_4556 {
            #[allow(unused_mut)]
            let mut entry_4559 = list_4558.entry();
            entry_4559.string(item_4557);
        }
        list_4558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4560 = writer.prefix("DryRun");
    if let Some(var_4561) = &input.dry_run {
        scope_4560.boolean(*var_4561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4562 = writer.prefix("AllocationId");
    if let Some(var_4563) = &input.allocation_id {
        scope_4562.string(var_4563);
    }
    #[allow(unused_mut)]
    let mut scope_4564 = writer.prefix("DomainName");
    if let Some(var_4565) = &input.domain_name {
        scope_4564.string(var_4565);
    }
    #[allow(unused_mut)]
    let mut scope_4566 = writer.prefix("DryRun");
    if let Some(var_4567) = &input.dry_run {
        scope_4566.boolean(*var_4567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("GroupName");
    if let Some(var_4569) = &input.group_name {
        scope_4568.string(var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("OptInStatus");
    if let Some(var_4571) = &input.opt_in_status {
        scope_4570.string(var_4571.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("DryRun");
    if let Some(var_4573) = &input.dry_run {
        scope_4572.boolean(*var_4573);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("CapacityReservationId");
    if let Some(var_4575) = &input.capacity_reservation_id {
        scope_4574.string(var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("InstanceCount");
    if let Some(var_4577) = &input.instance_count {
        scope_4576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4577).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("EndDate");
    if let Some(var_4579) = &input.end_date {
        scope_4578.date_time(var_4579, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("EndDateType");
    if let Some(var_4581) = &input.end_date_type {
        scope_4580.string(var_4581.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4582 = writer.prefix("Accept");
    if let Some(var_4583) = &input.accept {
        scope_4582.boolean(*var_4583);
    }
    #[allow(unused_mut)]
    let mut scope_4584 = writer.prefix("DryRun");
    if let Some(var_4585) = &input.dry_run {
        scope_4584.boolean(*var_4585);
    }
    #[allow(unused_mut)]
    let mut scope_4586 = writer.prefix("AdditionalInfo");
    if let Some(var_4587) = &input.additional_info {
        scope_4586.string(var_4587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4588 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4589) = &input.capacity_reservation_fleet_id {
        scope_4588.string(var_4589);
    }
    #[allow(unused_mut)]
    let mut scope_4590 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4591) = &input.total_target_capacity {
        scope_4590.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4591).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4592 = writer.prefix("EndDate");
    if let Some(var_4593) = &input.end_date {
        scope_4592.date_time(var_4593, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4594 = writer.prefix("DryRun");
    if let Some(var_4595) = &input.dry_run {
        scope_4594.boolean(*var_4595);
    }
    #[allow(unused_mut)]
    let mut scope_4596 = writer.prefix("RemoveEndDate");
    if let Some(var_4597) = &input.remove_end_date {
        scope_4596.boolean(*var_4597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4598 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4599) = &input.client_vpn_endpoint_id {
        scope_4598.string(var_4599);
    }
    #[allow(unused_mut)]
    let mut scope_4600 = writer.prefix("ServerCertificateArn");
    if let Some(var_4601) = &input.server_certificate_arn {
        scope_4600.string(var_4601);
    }
    #[allow(unused_mut)]
    let mut scope_4602 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4603) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4602, var_4603,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4604 = writer.prefix("DnsServers");
    if let Some(var_4605) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4604, var_4605,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("VpnPort");
    if let Some(var_4607) = &input.vpn_port {
        scope_4606.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4607).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("Description");
    if let Some(var_4609) = &input.description {
        scope_4608.string(var_4609);
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("SplitTunnel");
    if let Some(var_4611) = &input.split_tunnel {
        scope_4610.boolean(*var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("DryRun");
    if let Some(var_4613) = &input.dry_run {
        scope_4612.boolean(*var_4613);
    }
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("SecurityGroupId");
    if let Some(var_4615) = &input.security_group_ids {
        let mut list_4617 = scope_4614.start_list(true, Some("item"));
        for item_4616 in var_4615 {
            #[allow(unused_mut)]
            let mut entry_4618 = list_4617.entry();
            entry_4618.string(item_4616);
        }
        list_4617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4619 = writer.prefix("VpcId");
    if let Some(var_4620) = &input.vpc_id {
        scope_4619.string(var_4620);
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("SelfServicePortal");
    if let Some(var_4622) = &input.self_service_portal {
        scope_4621.string(var_4622.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("ClientConnectOptions");
    if let Some(var_4624) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4623, var_4624,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("DryRun");
    if let Some(var_4626) = &input.dry_run {
        scope_4625.boolean(*var_4626);
    }
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("InstanceFamily");
    if let Some(var_4628) = &input.instance_family {
        scope_4627.string(var_4628.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("CpuCredits");
    if let Some(var_4630) = &input.cpu_credits {
        scope_4629.string(var_4630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("KmsKeyId");
    if let Some(var_4632) = &input.kms_key_id {
        scope_4631.string(var_4632);
    }
    #[allow(unused_mut)]
    let mut scope_4633 = writer.prefix("DryRun");
    if let Some(var_4634) = &input.dry_run {
        scope_4633.boolean(*var_4634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4635 = writer.prefix("DryRun");
    if let Some(var_4636) = &input.dry_run {
        scope_4635.boolean(*var_4636);
    }
    #[allow(unused_mut)]
    let mut scope_4637 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4638) = &input.excess_capacity_termination_policy {
        scope_4637.string(var_4638.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4639 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4640) = &input.launch_template_configs {
        let mut list_4642 = scope_4639.start_list(true, Some("item"));
        for item_4641 in var_4640 {
            #[allow(unused_mut)]
            let mut entry_4643 = list_4642.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4643, item_4641,
            )?;
        }
        list_4642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("FleetId");
    if let Some(var_4645) = &input.fleet_id {
        scope_4644.string(var_4645);
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4647) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4646, var_4647,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("Context");
    if let Some(var_4649) = &input.context {
        scope_4648.string(var_4649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("DryRun");
    if let Some(var_4651) = &input.dry_run {
        scope_4650.boolean(*var_4651);
    }
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("FpgaImageId");
    if let Some(var_4653) = &input.fpga_image_id {
        scope_4652.string(var_4653);
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("Attribute");
    if let Some(var_4655) = &input.attribute {
        scope_4654.string(var_4655.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("OperationType");
    if let Some(var_4657) = &input.operation_type {
        scope_4656.string(var_4657.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("UserId");
    if let Some(var_4659) = &input.user_ids {
        let mut list_4661 = scope_4658.start_list(true, Some("UserId"));
        for item_4660 in var_4659 {
            #[allow(unused_mut)]
            let mut entry_4662 = list_4661.entry();
            entry_4662.string(item_4660);
        }
        list_4661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4663 = writer.prefix("UserGroup");
    if let Some(var_4664) = &input.user_groups {
        let mut list_4666 = scope_4663.start_list(true, Some("UserGroup"));
        for item_4665 in var_4664 {
            #[allow(unused_mut)]
            let mut entry_4667 = list_4666.entry();
            entry_4667.string(item_4665);
        }
        list_4666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("ProductCode");
    if let Some(var_4669) = &input.product_codes {
        let mut list_4671 = scope_4668.start_list(true, Some("ProductCode"));
        for item_4670 in var_4669 {
            #[allow(unused_mut)]
            let mut entry_4672 = list_4671.entry();
            entry_4672.string(item_4670);
        }
        list_4671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4673 = writer.prefix("LoadPermission");
    if let Some(var_4674) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4673, var_4674,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4675 = writer.prefix("Description");
    if let Some(var_4676) = &input.description {
        scope_4675.string(var_4676);
    }
    #[allow(unused_mut)]
    let mut scope_4677 = writer.prefix("Name");
    if let Some(var_4678) = &input.name {
        scope_4677.string(var_4678);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4679 = writer.prefix("AutoPlacement");
    if let Some(var_4680) = &input.auto_placement {
        scope_4679.string(var_4680.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4681 = writer.prefix("HostId");
    if let Some(var_4682) = &input.host_ids {
        let mut list_4684 = scope_4681.start_list(true, Some("item"));
        for item_4683 in var_4682 {
            #[allow(unused_mut)]
            let mut entry_4685 = list_4684.entry();
            entry_4685.string(item_4683);
        }
        list_4684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("HostRecovery");
    if let Some(var_4687) = &input.host_recovery {
        scope_4686.string(var_4687.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("InstanceType");
    if let Some(var_4689) = &input.instance_type {
        scope_4688.string(var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("InstanceFamily");
    if let Some(var_4691) = &input.instance_family {
        scope_4690.string(var_4691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4692 = writer.prefix("PrincipalArn");
    if let Some(var_4693) = &input.principal_arn {
        scope_4692.string(var_4693);
    }
    #[allow(unused_mut)]
    let mut scope_4694 = writer.prefix("Resource");
    if let Some(var_4695) = &input.resource {
        scope_4694.string(var_4695);
    }
    #[allow(unused_mut)]
    let mut scope_4696 = writer.prefix("UseLongIds");
    if let Some(var_4697) = &input.use_long_ids {
        scope_4696.boolean(*var_4697);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4698 = writer.prefix("Resource");
    if let Some(var_4699) = &input.resource {
        scope_4698.string(var_4699);
    }
    #[allow(unused_mut)]
    let mut scope_4700 = writer.prefix("UseLongIds");
    if let Some(var_4701) = &input.use_long_ids {
        scope_4700.boolean(*var_4701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4702 = writer.prefix("Attribute");
    if let Some(var_4703) = &input.attribute {
        scope_4702.string(var_4703);
    }
    #[allow(unused_mut)]
    let mut scope_4704 = writer.prefix("Description");
    if let Some(var_4705) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4704, var_4705)?;
    }
    #[allow(unused_mut)]
    let mut scope_4706 = writer.prefix("ImageId");
    if let Some(var_4707) = &input.image_id {
        scope_4706.string(var_4707);
    }
    #[allow(unused_mut)]
    let mut scope_4708 = writer.prefix("LaunchPermission");
    if let Some(var_4709) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4708, var_4709,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4710 = writer.prefix("OperationType");
    if let Some(var_4711) = &input.operation_type {
        scope_4710.string(var_4711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4712 = writer.prefix("ProductCode");
    if let Some(var_4713) = &input.product_codes {
        let mut list_4715 = scope_4712.start_list(true, Some("ProductCode"));
        for item_4714 in var_4713 {
            #[allow(unused_mut)]
            let mut entry_4716 = list_4715.entry();
            entry_4716.string(item_4714);
        }
        list_4715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("UserGroup");
    if let Some(var_4718) = &input.user_groups {
        let mut list_4720 = scope_4717.start_list(true, Some("UserGroup"));
        for item_4719 in var_4718 {
            #[allow(unused_mut)]
            let mut entry_4721 = list_4720.entry();
            entry_4721.string(item_4719);
        }
        list_4720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4722 = writer.prefix("UserId");
    if let Some(var_4723) = &input.user_ids {
        let mut list_4725 = scope_4722.start_list(true, Some("UserId"));
        for item_4724 in var_4723 {
            #[allow(unused_mut)]
            let mut entry_4726 = list_4725.entry();
            entry_4726.string(item_4724);
        }
        list_4725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4727 = writer.prefix("Value");
    if let Some(var_4728) = &input.value {
        scope_4727.string(var_4728);
    }
    #[allow(unused_mut)]
    let mut scope_4729 = writer.prefix("DryRun");
    if let Some(var_4730) = &input.dry_run {
        scope_4729.boolean(*var_4730);
    }
    #[allow(unused_mut)]
    let mut scope_4731 = writer.prefix("OrganizationArn");
    if let Some(var_4732) = &input.organization_arns {
        let mut list_4734 = scope_4731.start_list(true, Some("OrganizationArn"));
        for item_4733 in var_4732 {
            #[allow(unused_mut)]
            let mut entry_4735 = list_4734.entry();
            entry_4735.string(item_4733);
        }
        list_4734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4737) = &input.organizational_unit_arns {
        let mut list_4739 = scope_4736.start_list(true, Some("OrganizationalUnitArn"));
        for item_4738 in var_4737 {
            #[allow(unused_mut)]
            let mut entry_4740 = list_4739.entry();
            entry_4740.string(item_4738);
        }
        list_4739.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4741 = writer.prefix("SourceDestCheck");
    if let Some(var_4742) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4741, var_4742,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("Attribute");
    if let Some(var_4744) = &input.attribute {
        scope_4743.string(var_4744.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4745 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4746) = &input.block_device_mappings {
        let mut list_4748 = scope_4745.start_list(true, Some("item"));
        for item_4747 in var_4746 {
            #[allow(unused_mut)]
            let mut entry_4749 = list_4748.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4749, item_4747)?;
        }
        list_4748.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4750 = writer.prefix("DisableApiTermination");
    if let Some(var_4751) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4750, var_4751,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4752 = writer.prefix("DryRun");
    if let Some(var_4753) = &input.dry_run {
        scope_4752.boolean(*var_4753);
    }
    #[allow(unused_mut)]
    let mut scope_4754 = writer.prefix("EbsOptimized");
    if let Some(var_4755) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4754, var_4755,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4756 = writer.prefix("EnaSupport");
    if let Some(var_4757) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4756, var_4757,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4758 = writer.prefix("GroupId");
    if let Some(var_4759) = &input.groups {
        let mut list_4761 = scope_4758.start_list(true, Some("groupId"));
        for item_4760 in var_4759 {
            #[allow(unused_mut)]
            let mut entry_4762 = list_4761.entry();
            entry_4762.string(item_4760);
        }
        list_4761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4763 = writer.prefix("InstanceId");
    if let Some(var_4764) = &input.instance_id {
        scope_4763.string(var_4764);
    }
    #[allow(unused_mut)]
    let mut scope_4765 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4766) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4765, var_4766)?;
    }
    #[allow(unused_mut)]
    let mut scope_4767 = writer.prefix("InstanceType");
    if let Some(var_4768) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4767, var_4768)?;
    }
    #[allow(unused_mut)]
    let mut scope_4769 = writer.prefix("Kernel");
    if let Some(var_4770) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4769, var_4770)?;
    }
    #[allow(unused_mut)]
    let mut scope_4771 = writer.prefix("Ramdisk");
    if let Some(var_4772) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4771, var_4772)?;
    }
    #[allow(unused_mut)]
    let mut scope_4773 = writer.prefix("SriovNetSupport");
    if let Some(var_4774) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4773, var_4774)?;
    }
    #[allow(unused_mut)]
    let mut scope_4775 = writer.prefix("UserData");
    if let Some(var_4776) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4775, var_4776,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4777 = writer.prefix("Value");
    if let Some(var_4778) = &input.value {
        scope_4777.string(var_4778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4779 = writer.prefix("InstanceId");
    if let Some(var_4780) = &input.instance_id {
        scope_4779.string(var_4780);
    }
    #[allow(unused_mut)]
    let mut scope_4781 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4782) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4781, var_4782,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4783 = writer.prefix("DryRun");
    if let Some(var_4784) = &input.dry_run {
        scope_4783.boolean(*var_4784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4785 = writer.prefix("DryRun");
    if let Some(var_4786) = &input.dry_run {
        scope_4785.boolean(*var_4786);
    }
    #[allow(unused_mut)]
    let mut scope_4787 = writer.prefix("ClientToken");
    if let Some(var_4788) = &input.client_token {
        scope_4787.string(var_4788);
    }
    #[allow(unused_mut)]
    let mut scope_4789 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4790) = &input.instance_credit_specifications {
        let mut list_4792 = scope_4789.start_list(true, Some("item"));
        for item_4791 in var_4790 {
            #[allow(unused_mut)]
            let mut entry_4793 = list_4792.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4793, item_4791)?;
        }
        list_4792.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4794 = writer.prefix("DryRun");
    if let Some(var_4795) = &input.dry_run {
        scope_4794.boolean(*var_4795);
    }
    #[allow(unused_mut)]
    let mut scope_4796 = writer.prefix("InstanceId");
    if let Some(var_4797) = &input.instance_id {
        scope_4796.string(var_4797);
    }
    #[allow(unused_mut)]
    let mut scope_4798 = writer.prefix("InstanceEventId");
    if let Some(var_4799) = &input.instance_event_id {
        scope_4798.string(var_4799);
    }
    #[allow(unused_mut)]
    let mut scope_4800 = writer.prefix("NotBefore");
    if let Some(var_4801) = &input.not_before {
        scope_4800.date_time(var_4801, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("DryRun");
    if let Some(var_4803) = &input.dry_run {
        scope_4802.boolean(*var_4803);
    }
    #[allow(unused_mut)]
    let mut scope_4804 = writer.prefix("Name");
    if let Some(var_4805) = &input.name {
        scope_4804.string(var_4805);
    }
    #[allow(unused_mut)]
    let mut scope_4806 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4807) = &input.instance_event_window_id {
        scope_4806.string(var_4807);
    }
    #[allow(unused_mut)]
    let mut scope_4808 = writer.prefix("TimeRange");
    if let Some(var_4809) = &input.time_ranges {
        let mut list_4811 = scope_4808.start_list(true, None);
        for item_4810 in var_4809 {
            #[allow(unused_mut)]
            let mut entry_4812 = list_4811.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4812, item_4810)?;
        }
        list_4811.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4813 = writer.prefix("CronExpression");
    if let Some(var_4814) = &input.cron_expression {
        scope_4813.string(var_4814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4815 = writer.prefix("InstanceId");
    if let Some(var_4816) = &input.instance_id {
        scope_4815.string(var_4816);
    }
    #[allow(unused_mut)]
    let mut scope_4817 = writer.prefix("HttpTokens");
    if let Some(var_4818) = &input.http_tokens {
        scope_4817.string(var_4818.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4819 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4820) = &input.http_put_response_hop_limit {
        scope_4819.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4820).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("HttpEndpoint");
    if let Some(var_4822) = &input.http_endpoint {
        scope_4821.string(var_4822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("DryRun");
    if let Some(var_4824) = &input.dry_run {
        scope_4823.boolean(*var_4824);
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4826) = &input.http_protocol_ipv6 {
        scope_4825.string(var_4826.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4827 = writer.prefix("Affinity");
    if let Some(var_4828) = &input.affinity {
        scope_4827.string(var_4828.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4829 = writer.prefix("GroupName");
    if let Some(var_4830) = &input.group_name {
        scope_4829.string(var_4830);
    }
    #[allow(unused_mut)]
    let mut scope_4831 = writer.prefix("HostId");
    if let Some(var_4832) = &input.host_id {
        scope_4831.string(var_4832);
    }
    #[allow(unused_mut)]
    let mut scope_4833 = writer.prefix("InstanceId");
    if let Some(var_4834) = &input.instance_id {
        scope_4833.string(var_4834);
    }
    #[allow(unused_mut)]
    let mut scope_4835 = writer.prefix("Tenancy");
    if let Some(var_4836) = &input.tenancy {
        scope_4835.string(var_4836.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4837 = writer.prefix("PartitionNumber");
    if let Some(var_4838) = &input.partition_number {
        scope_4837.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4838).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4839 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4840) = &input.host_resource_group_arn {
        scope_4839.string(var_4840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4841 = writer.prefix("DryRun");
    if let Some(var_4842) = &input.dry_run {
        scope_4841.boolean(*var_4842);
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("IpamId");
    if let Some(var_4844) = &input.ipam_id {
        scope_4843.string(var_4844);
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("Description");
    if let Some(var_4846) = &input.description {
        scope_4845.string(var_4846);
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("AddOperatingRegion");
    if let Some(var_4848) = &input.add_operating_regions {
        let mut list_4850 = scope_4847.start_list(true, None);
        for item_4849 in var_4848 {
            #[allow(unused_mut)]
            let mut entry_4851 = list_4850.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4851, item_4849,
            )?;
        }
        list_4850.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4852 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4853) = &input.remove_operating_regions {
        let mut list_4855 = scope_4852.start_list(true, None);
        for item_4854 in var_4853 {
            #[allow(unused_mut)]
            let mut entry_4856 = list_4855.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4856, item_4854,
            )?;
        }
        list_4855.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("DryRun");
    if let Some(var_4858) = &input.dry_run {
        scope_4857.boolean(*var_4858);
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("IpamPoolId");
    if let Some(var_4860) = &input.ipam_pool_id {
        scope_4859.string(var_4860);
    }
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("Description");
    if let Some(var_4862) = &input.description {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("AutoImport");
    if let Some(var_4864) = &input.auto_import {
        scope_4863.boolean(*var_4864);
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4866) = &input.allocation_min_netmask_length {
        scope_4865.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4866).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4868) = &input.allocation_max_netmask_length {
        scope_4867.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4868).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4870) = &input.allocation_default_netmask_length {
        scope_4869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4872) = &input.clear_allocation_default_netmask_length {
        scope_4871.boolean(*var_4872);
    }
    #[allow(unused_mut)]
    let mut scope_4873 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4874) = &input.add_allocation_resource_tags {
        let mut list_4876 = scope_4873.start_list(true, Some("item"));
        for item_4875 in var_4874 {
            #[allow(unused_mut)]
            let mut entry_4877 = list_4876.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4877, item_4875,
            )?;
        }
        list_4876.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4879) = &input.remove_allocation_resource_tags {
        let mut list_4881 = scope_4878.start_list(true, Some("item"));
        for item_4880 in var_4879 {
            #[allow(unused_mut)]
            let mut entry_4882 = list_4881.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4882, item_4880,
            )?;
        }
        list_4881.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4883 = writer.prefix("DryRun");
    if let Some(var_4884) = &input.dry_run {
        scope_4883.boolean(*var_4884);
    }
    #[allow(unused_mut)]
    let mut scope_4885 = writer.prefix("ResourceId");
    if let Some(var_4886) = &input.resource_id {
        scope_4885.string(var_4886);
    }
    #[allow(unused_mut)]
    let mut scope_4887 = writer.prefix("ResourceCidr");
    if let Some(var_4888) = &input.resource_cidr {
        scope_4887.string(var_4888);
    }
    #[allow(unused_mut)]
    let mut scope_4889 = writer.prefix("ResourceRegion");
    if let Some(var_4890) = &input.resource_region {
        scope_4889.string(var_4890);
    }
    #[allow(unused_mut)]
    let mut scope_4891 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4892) = &input.current_ipam_scope_id {
        scope_4891.string(var_4892);
    }
    #[allow(unused_mut)]
    let mut scope_4893 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4894) = &input.destination_ipam_scope_id {
        scope_4893.string(var_4894);
    }
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("Monitored");
    if let Some(var_4896) = &input.monitored {
        scope_4895.boolean(*var_4896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("DryRun");
    if let Some(var_4898) = &input.dry_run {
        scope_4897.boolean(*var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("IpamScopeId");
    if let Some(var_4900) = &input.ipam_scope_id {
        scope_4899.string(var_4900);
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("Description");
    if let Some(var_4902) = &input.description {
        scope_4901.string(var_4902);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("DryRun");
    if let Some(var_4904) = &input.dry_run {
        scope_4903.boolean(*var_4904);
    }
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("ClientToken");
    if let Some(var_4906) = &input.client_token {
        scope_4905.string(var_4906);
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("LaunchTemplateId");
    if let Some(var_4908) = &input.launch_template_id {
        scope_4907.string(var_4908);
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("LaunchTemplateName");
    if let Some(var_4910) = &input.launch_template_name {
        scope_4909.string(var_4910);
    }
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("SetDefaultVersion");
    if let Some(var_4912) = &input.default_version {
        scope_4911.string(var_4912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("DryRun");
    if let Some(var_4914) = &input.dry_run {
        scope_4913.boolean(*var_4914);
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("PrefixListId");
    if let Some(var_4916) = &input.prefix_list_id {
        scope_4915.string(var_4916);
    }
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("CurrentVersion");
    if let Some(var_4918) = &input.current_version {
        scope_4917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("PrefixListName");
    if let Some(var_4920) = &input.prefix_list_name {
        scope_4919.string(var_4920);
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("AddEntry");
    if let Some(var_4922) = &input.add_entries {
        let mut list_4924 = scope_4921.start_list(true, None);
        for item_4923 in var_4922 {
            #[allow(unused_mut)]
            let mut entry_4925 = list_4924.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_4925, item_4923,
            )?;
        }
        list_4924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4926 = writer.prefix("RemoveEntry");
    if let Some(var_4927) = &input.remove_entries {
        let mut list_4929 = scope_4926.start_list(true, None);
        for item_4928 in var_4927 {
            #[allow(unused_mut)]
            let mut entry_4930 = list_4929.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_4930, item_4928,
            )?;
        }
        list_4929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("MaxEntries");
    if let Some(var_4932) = &input.max_entries {
        scope_4931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4932).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("Attachment");
    if let Some(var_4934) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_4933, var_4934,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("Description");
    if let Some(var_4936) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4935, var_4936)?;
    }
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("DryRun");
    if let Some(var_4938) = &input.dry_run {
        scope_4937.boolean(*var_4938);
    }
    #[allow(unused_mut)]
    let mut scope_4939 = writer.prefix("SecurityGroupId");
    if let Some(var_4940) = &input.groups {
        let mut list_4942 = scope_4939.start_list(true, Some("SecurityGroupId"));
        for item_4941 in var_4940 {
            #[allow(unused_mut)]
            let mut entry_4943 = list_4942.entry();
            entry_4943.string(item_4941);
        }
        list_4942.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4944 = writer.prefix("NetworkInterfaceId");
    if let Some(var_4945) = &input.network_interface_id {
        scope_4944.string(var_4945);
    }
    #[allow(unused_mut)]
    let mut scope_4946 = writer.prefix("SourceDestCheck");
    if let Some(var_4947) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4946, var_4947,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4948 = writer.prefix("DryRun");
    if let Some(var_4949) = &input.dry_run {
        scope_4948.boolean(*var_4949);
    }
    #[allow(unused_mut)]
    let mut scope_4950 = writer.prefix("InstanceId");
    if let Some(var_4951) = &input.instance_id {
        scope_4950.string(var_4951);
    }
    #[allow(unused_mut)]
    let mut scope_4952 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_4953) = &input.private_dns_hostname_type {
        scope_4952.string(var_4953.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4954 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_4955) = &input.enable_resource_name_dns_a_record {
        scope_4954.boolean(*var_4955);
    }
    #[allow(unused_mut)]
    let mut scope_4956 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_4957) = &input.enable_resource_name_dns_aaaa_record {
        scope_4956.boolean(*var_4957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4958 = writer.prefix("ReservedInstancesId");
    if let Some(var_4959) = &input.reserved_instances_ids {
        let mut list_4961 = scope_4958.start_list(true, Some("ReservedInstancesId"));
        for item_4960 in var_4959 {
            #[allow(unused_mut)]
            let mut entry_4962 = list_4961.entry();
            entry_4962.string(item_4960);
        }
        list_4961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4963 = writer.prefix("ClientToken");
    if let Some(var_4964) = &input.client_token {
        scope_4963.string(var_4964);
    }
    #[allow(unused_mut)]
    let mut scope_4965 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_4966) = &input.target_configurations {
        let mut list_4968 = scope_4965.start_list(true, Some("item"));
        for item_4967 in var_4966 {
            #[allow(unused_mut)]
            let mut entry_4969 = list_4968.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_4969, item_4967,
            )?;
        }
        list_4968.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4970 = writer.prefix("GroupId");
    if let Some(var_4971) = &input.group_id {
        scope_4970.string(var_4971);
    }
    #[allow(unused_mut)]
    let mut scope_4972 = writer.prefix("SecurityGroupRule");
    if let Some(var_4973) = &input.security_group_rules {
        let mut list_4975 = scope_4972.start_list(true, Some("item"));
        for item_4974 in var_4973 {
            #[allow(unused_mut)]
            let mut entry_4976 = list_4975.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_4976, item_4974,
            )?;
        }
        list_4975.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("DryRun");
    if let Some(var_4978) = &input.dry_run {
        scope_4977.boolean(*var_4978);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("Attribute");
    if let Some(var_4980) = &input.attribute {
        scope_4979.string(var_4980.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("CreateVolumePermission");
    if let Some(var_4982) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_4981, var_4982,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("UserGroup");
    if let Some(var_4984) = &input.group_names {
        let mut list_4986 = scope_4983.start_list(true, Some("GroupName"));
        for item_4985 in var_4984 {
            #[allow(unused_mut)]
            let mut entry_4987 = list_4986.entry();
            entry_4987.string(item_4985);
        }
        list_4986.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4988 = writer.prefix("OperationType");
    if let Some(var_4989) = &input.operation_type {
        scope_4988.string(var_4989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4990 = writer.prefix("SnapshotId");
    if let Some(var_4991) = &input.snapshot_id {
        scope_4990.string(var_4991);
    }
    #[allow(unused_mut)]
    let mut scope_4992 = writer.prefix("UserId");
    if let Some(var_4993) = &input.user_ids {
        let mut list_4995 = scope_4992.start_list(true, Some("UserId"));
        for item_4994 in var_4993 {
            #[allow(unused_mut)]
            let mut entry_4996 = list_4995.entry();
            entry_4996.string(item_4994);
        }
        list_4995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("DryRun");
    if let Some(var_4998) = &input.dry_run {
        scope_4997.boolean(*var_4998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("SnapshotId");
    if let Some(var_5000) = &input.snapshot_id {
        scope_4999.string(var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("StorageTier");
    if let Some(var_5002) = &input.storage_tier {
        scope_5001.string(var_5002.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("DryRun");
    if let Some(var_5004) = &input.dry_run {
        scope_5003.boolean(*var_5004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5006) = &input.excess_capacity_termination_policy {
        scope_5005.string(var_5006.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5008) = &input.launch_template_configs {
        let mut list_5010 = scope_5007.start_list(true, Some("item"));
        for item_5009 in var_5008 {
            #[allow(unused_mut)]
            let mut entry_5011 = list_5010.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5011, item_5009,
            )?;
        }
        list_5010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5012 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5013) = &input.spot_fleet_request_id {
        scope_5012.string(var_5013);
    }
    #[allow(unused_mut)]
    let mut scope_5014 = writer.prefix("TargetCapacity");
    if let Some(var_5015) = &input.target_capacity {
        scope_5014.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5015).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5017) = &input.on_demand_target_capacity {
        scope_5016.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5017).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5018 = writer.prefix("Context");
    if let Some(var_5019) = &input.context {
        scope_5018.string(var_5019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5020 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5021) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5020, var_5021,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5022 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5023) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5022, var_5023,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5024 = writer.prefix("SubnetId");
    if let Some(var_5025) = &input.subnet_id {
        scope_5024.string(var_5025);
    }
    #[allow(unused_mut)]
    let mut scope_5026 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5027) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5026, var_5027,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5028 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5029) = &input.customer_owned_ipv4_pool {
        scope_5028.string(var_5029);
    }
    #[allow(unused_mut)]
    let mut scope_5030 = writer.prefix("EnableDns64");
    if let Some(var_5031) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5030, var_5031,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5032 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5033) = &input.private_dns_hostname_type_on_launch {
        scope_5032.string(var_5033.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5035) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5034, var_5035,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5037) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5036, var_5037,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5039) = &input.enable_lni_at_device_index {
        scope_5038.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5039).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5041) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5040, var_5041,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5043) = &input.traffic_mirror_filter_id {
        scope_5042.string(var_5043);
    }
    #[allow(unused_mut)]
    let mut scope_5044 = writer.prefix("AddNetworkService");
    if let Some(var_5045) = &input.add_network_services {
        let mut list_5047 = scope_5044.start_list(true, Some("item"));
        for item_5046 in var_5045 {
            #[allow(unused_mut)]
            let mut entry_5048 = list_5047.entry();
            entry_5048.string(item_5046.as_str());
        }
        list_5047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5049 = writer.prefix("RemoveNetworkService");
    if let Some(var_5050) = &input.remove_network_services {
        let mut list_5052 = scope_5049.start_list(true, Some("item"));
        for item_5051 in var_5050 {
            #[allow(unused_mut)]
            let mut entry_5053 = list_5052.entry();
            entry_5053.string(item_5051.as_str());
        }
        list_5052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5054 = writer.prefix("DryRun");
    if let Some(var_5055) = &input.dry_run {
        scope_5054.boolean(*var_5055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5056 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5057) = &input.traffic_mirror_filter_rule_id {
        scope_5056.string(var_5057);
    }
    #[allow(unused_mut)]
    let mut scope_5058 = writer.prefix("TrafficDirection");
    if let Some(var_5059) = &input.traffic_direction {
        scope_5058.string(var_5059.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5060 = writer.prefix("RuleNumber");
    if let Some(var_5061) = &input.rule_number {
        scope_5060.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("RuleAction");
    if let Some(var_5063) = &input.rule_action {
        scope_5062.string(var_5063.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5064 = writer.prefix("DestinationPortRange");
    if let Some(var_5065) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5064, var_5065,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5066 = writer.prefix("SourcePortRange");
    if let Some(var_5067) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5066, var_5067,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5068 = writer.prefix("Protocol");
    if let Some(var_5069) = &input.protocol {
        scope_5068.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5069).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5070 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5071) = &input.destination_cidr_block {
        scope_5070.string(var_5071);
    }
    #[allow(unused_mut)]
    let mut scope_5072 = writer.prefix("SourceCidrBlock");
    if let Some(var_5073) = &input.source_cidr_block {
        scope_5072.string(var_5073);
    }
    #[allow(unused_mut)]
    let mut scope_5074 = writer.prefix("Description");
    if let Some(var_5075) = &input.description {
        scope_5074.string(var_5075);
    }
    #[allow(unused_mut)]
    let mut scope_5076 = writer.prefix("RemoveField");
    if let Some(var_5077) = &input.remove_fields {
        let mut list_5079 = scope_5076.start_list(true, None);
        for item_5078 in var_5077 {
            #[allow(unused_mut)]
            let mut entry_5080 = list_5079.entry();
            entry_5080.string(item_5078.as_str());
        }
        list_5079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5081 = writer.prefix("DryRun");
    if let Some(var_5082) = &input.dry_run {
        scope_5081.boolean(*var_5082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5083 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5084) = &input.traffic_mirror_session_id {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]
    let mut scope_5085 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5086) = &input.traffic_mirror_target_id {
        scope_5085.string(var_5086);
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5088) = &input.traffic_mirror_filter_id {
        scope_5087.string(var_5088);
    }
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("PacketLength");
    if let Some(var_5090) = &input.packet_length {
        scope_5089.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5090).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("SessionNumber");
    if let Some(var_5092) = &input.session_number {
        scope_5091.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5092).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("VirtualNetworkId");
    if let Some(var_5094) = &input.virtual_network_id {
        scope_5093.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5094).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("Description");
    if let Some(var_5096) = &input.description {
        scope_5095.string(var_5096);
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("RemoveField");
    if let Some(var_5098) = &input.remove_fields {
        let mut list_5100 = scope_5097.start_list(true, None);
        for item_5099 in var_5098 {
            #[allow(unused_mut)]
            let mut entry_5101 = list_5100.entry();
            entry_5101.string(item_5099.as_str());
        }
        list_5100.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5102 = writer.prefix("DryRun");
    if let Some(var_5103) = &input.dry_run {
        scope_5102.boolean(*var_5103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5104 = writer.prefix("TransitGatewayId");
    if let Some(var_5105) = &input.transit_gateway_id {
        scope_5104.string(var_5105);
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("Description");
    if let Some(var_5107) = &input.description {
        scope_5106.string(var_5107);
    }
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("Options");
    if let Some(var_5109) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5108, var_5109,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("DryRun");
    if let Some(var_5111) = &input.dry_run {
        scope_5110.boolean(*var_5111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5113) = &input.transit_gateway_route_table_id {
        scope_5112.string(var_5113);
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("PrefixListId");
    if let Some(var_5115) = &input.prefix_list_id {
        scope_5114.string(var_5115);
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5117) = &input.transit_gateway_attachment_id {
        scope_5116.string(var_5117);
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("Blackhole");
    if let Some(var_5119) = &input.blackhole {
        scope_5118.boolean(*var_5119);
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("DryRun");
    if let Some(var_5121) = &input.dry_run {
        scope_5120.boolean(*var_5121);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5123) = &input.transit_gateway_attachment_id {
        scope_5122.string(var_5123);
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("AddSubnetIds");
    if let Some(var_5125) = &input.add_subnet_ids {
        let mut list_5127 = scope_5124.start_list(true, Some("item"));
        for item_5126 in var_5125 {
            #[allow(unused_mut)]
            let mut entry_5128 = list_5127.entry();
            entry_5128.string(item_5126);
        }
        list_5127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5129 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5130) = &input.remove_subnet_ids {
        let mut list_5132 = scope_5129.start_list(true, Some("item"));
        for item_5131 in var_5130 {
            #[allow(unused_mut)]
            let mut entry_5133 = list_5132.entry();
            entry_5133.string(item_5131);
        }
        list_5132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("Options");
    if let Some(var_5135) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5134, var_5135)?;
    }
    #[allow(unused_mut)]
    let mut scope_5136 = writer.prefix("DryRun");
    if let Some(var_5137) = &input.dry_run {
        scope_5136.boolean(*var_5137);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5138 = writer.prefix("DryRun");
    if let Some(var_5139) = &input.dry_run {
        scope_5138.boolean(*var_5139);
    }
    #[allow(unused_mut)]
    let mut scope_5140 = writer.prefix("VolumeId");
    if let Some(var_5141) = &input.volume_id {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]
    let mut scope_5142 = writer.prefix("Size");
    if let Some(var_5143) = &input.size {
        scope_5142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("VolumeType");
    if let Some(var_5145) = &input.volume_type {
        scope_5144.string(var_5145.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("Iops");
    if let Some(var_5147) = &input.iops {
        scope_5146.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5147).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("Throughput");
    if let Some(var_5149) = &input.throughput {
        scope_5148.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5149).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5151) = &input.multi_attach_enabled {
        scope_5150.boolean(*var_5151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("AutoEnableIO");
    if let Some(var_5153) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5152, var_5153,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("VolumeId");
    if let Some(var_5155) = &input.volume_id {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("DryRun");
    if let Some(var_5157) = &input.dry_run {
        scope_5156.boolean(*var_5157);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5159) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5158, var_5159,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("EnableDnsSupport");
    if let Some(var_5161) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5160, var_5161,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("VpcId");
    if let Some(var_5163) = &input.vpc_id {
        scope_5162.string(var_5163);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("DryRun");
    if let Some(var_5165) = &input.dry_run {
        scope_5164.boolean(*var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("VpcEndpointId");
    if let Some(var_5167) = &input.vpc_endpoint_id {
        scope_5166.string(var_5167);
    }
    #[allow(unused_mut)]
    let mut scope_5168 = writer.prefix("ResetPolicy");
    if let Some(var_5169) = &input.reset_policy {
        scope_5168.boolean(*var_5169);
    }
    #[allow(unused_mut)]
    let mut scope_5170 = writer.prefix("PolicyDocument");
    if let Some(var_5171) = &input.policy_document {
        scope_5170.string(var_5171);
    }
    #[allow(unused_mut)]
    let mut scope_5172 = writer.prefix("AddRouteTableId");
    if let Some(var_5173) = &input.add_route_table_ids {
        let mut list_5175 = scope_5172.start_list(true, Some("item"));
        for item_5174 in var_5173 {
            #[allow(unused_mut)]
            let mut entry_5176 = list_5175.entry();
            entry_5176.string(item_5174);
        }
        list_5175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5178) = &input.remove_route_table_ids {
        let mut list_5180 = scope_5177.start_list(true, Some("item"));
        for item_5179 in var_5178 {
            #[allow(unused_mut)]
            let mut entry_5181 = list_5180.entry();
            entry_5181.string(item_5179);
        }
        list_5180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5182 = writer.prefix("AddSubnetId");
    if let Some(var_5183) = &input.add_subnet_ids {
        let mut list_5185 = scope_5182.start_list(true, Some("item"));
        for item_5184 in var_5183 {
            #[allow(unused_mut)]
            let mut entry_5186 = list_5185.entry();
            entry_5186.string(item_5184);
        }
        list_5185.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("RemoveSubnetId");
    if let Some(var_5188) = &input.remove_subnet_ids {
        let mut list_5190 = scope_5187.start_list(true, Some("item"));
        for item_5189 in var_5188 {
            #[allow(unused_mut)]
            let mut entry_5191 = list_5190.entry();
            entry_5191.string(item_5189);
        }
        list_5190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5193) = &input.add_security_group_ids {
        let mut list_5195 = scope_5192.start_list(true, Some("item"));
        for item_5194 in var_5193 {
            #[allow(unused_mut)]
            let mut entry_5196 = list_5195.entry();
            entry_5196.string(item_5194);
        }
        list_5195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5197 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5198) = &input.remove_security_group_ids {
        let mut list_5200 = scope_5197.start_list(true, Some("item"));
        for item_5199 in var_5198 {
            #[allow(unused_mut)]
            let mut entry_5201 = list_5200.entry();
            entry_5201.string(item_5199);
        }
        list_5200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5203) = &input.private_dns_enabled {
        scope_5202.boolean(*var_5203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("DryRun");
    if let Some(var_5205) = &input.dry_run {
        scope_5204.boolean(*var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5207) = &input.connection_notification_id {
        scope_5206.string(var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5209) = &input.connection_notification_arn {
        scope_5208.string(var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("ConnectionEvents");
    if let Some(var_5211) = &input.connection_events {
        let mut list_5213 = scope_5210.start_list(true, Some("item"));
        for item_5212 in var_5211 {
            #[allow(unused_mut)]
            let mut entry_5214 = list_5213.entry();
            entry_5214.string(item_5212);
        }
        list_5213.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5215 = writer.prefix("DryRun");
    if let Some(var_5216) = &input.dry_run {
        scope_5215.boolean(*var_5216);
    }
    #[allow(unused_mut)]
    let mut scope_5217 = writer.prefix("ServiceId");
    if let Some(var_5218) = &input.service_id {
        scope_5217.string(var_5218);
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("PrivateDnsName");
    if let Some(var_5220) = &input.private_dns_name {
        scope_5219.string(var_5220);
    }
    #[allow(unused_mut)]
    let mut scope_5221 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5222) = &input.remove_private_dns_name {
        scope_5221.boolean(*var_5222);
    }
    #[allow(unused_mut)]
    let mut scope_5223 = writer.prefix("AcceptanceRequired");
    if let Some(var_5224) = &input.acceptance_required {
        scope_5223.boolean(*var_5224);
    }
    #[allow(unused_mut)]
    let mut scope_5225 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5226) = &input.add_network_load_balancer_arns {
        let mut list_5228 = scope_5225.start_list(true, Some("item"));
        for item_5227 in var_5226 {
            #[allow(unused_mut)]
            let mut entry_5229 = list_5228.entry();
            entry_5229.string(item_5227);
        }
        list_5228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5231) = &input.remove_network_load_balancer_arns {
        let mut list_5233 = scope_5230.start_list(true, Some("item"));
        for item_5232 in var_5231 {
            #[allow(unused_mut)]
            let mut entry_5234 = list_5233.entry();
            entry_5234.string(item_5232);
        }
        list_5233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5235 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5236) = &input.add_gateway_load_balancer_arns {
        let mut list_5238 = scope_5235.start_list(true, Some("item"));
        for item_5237 in var_5236 {
            #[allow(unused_mut)]
            let mut entry_5239 = list_5238.entry();
            entry_5239.string(item_5237);
        }
        list_5238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5241) = &input.remove_gateway_load_balancer_arns {
        let mut list_5243 = scope_5240.start_list(true, Some("item"));
        for item_5242 in var_5241 {
            #[allow(unused_mut)]
            let mut entry_5244 = list_5243.entry();
            entry_5244.string(item_5242);
        }
        list_5243.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5245 = writer.prefix("DryRun");
    if let Some(var_5246) = &input.dry_run {
        scope_5245.boolean(*var_5246);
    }
    #[allow(unused_mut)]
    let mut scope_5247 = writer.prefix("ServiceId");
    if let Some(var_5248) = &input.service_id {
        scope_5247.string(var_5248);
    }
    #[allow(unused_mut)]
    let mut scope_5249 = writer.prefix("PayerResponsibility");
    if let Some(var_5250) = &input.payer_responsibility {
        scope_5249.string(var_5250.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5251 = writer.prefix("DryRun");
    if let Some(var_5252) = &input.dry_run {
        scope_5251.boolean(*var_5252);
    }
    #[allow(unused_mut)]
    let mut scope_5253 = writer.prefix("ServiceId");
    if let Some(var_5254) = &input.service_id {
        scope_5253.string(var_5254);
    }
    #[allow(unused_mut)]
    let mut scope_5255 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5256) = &input.add_allowed_principals {
        let mut list_5258 = scope_5255.start_list(true, Some("item"));
        for item_5257 in var_5256 {
            #[allow(unused_mut)]
            let mut entry_5259 = list_5258.entry();
            entry_5259.string(item_5257);
        }
        list_5258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5261) = &input.remove_allowed_principals {
        let mut list_5263 = scope_5260.start_list(true, Some("item"));
        for item_5262 in var_5261 {
            #[allow(unused_mut)]
            let mut entry_5264 = list_5263.entry();
            entry_5264.string(item_5262);
        }
        list_5263.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5265 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5266) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5265, var_5266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("DryRun");
    if let Some(var_5268) = &input.dry_run {
        scope_5267.boolean(*var_5268);
    }
    #[allow(unused_mut)]
    let mut scope_5269 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5270) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5269, var_5270,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5271 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5272) = &input.vpc_peering_connection_id {
        scope_5271.string(var_5272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5273 = writer.prefix("VpcId");
    if let Some(var_5274) = &input.vpc_id {
        scope_5273.string(var_5274);
    }
    #[allow(unused_mut)]
    let mut scope_5275 = writer.prefix("InstanceTenancy");
    if let Some(var_5276) = &input.instance_tenancy {
        scope_5275.string(var_5276.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("DryRun");
    if let Some(var_5278) = &input.dry_run {
        scope_5277.boolean(*var_5278);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5279 = writer.prefix("VpnConnectionId");
    if let Some(var_5280) = &input.vpn_connection_id {
        scope_5279.string(var_5280);
    }
    #[allow(unused_mut)]
    let mut scope_5281 = writer.prefix("TransitGatewayId");
    if let Some(var_5282) = &input.transit_gateway_id {
        scope_5281.string(var_5282);
    }
    #[allow(unused_mut)]
    let mut scope_5283 = writer.prefix("CustomerGatewayId");
    if let Some(var_5284) = &input.customer_gateway_id {
        scope_5283.string(var_5284);
    }
    #[allow(unused_mut)]
    let mut scope_5285 = writer.prefix("VpnGatewayId");
    if let Some(var_5286) = &input.vpn_gateway_id {
        scope_5285.string(var_5286);
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("DryRun");
    if let Some(var_5288) = &input.dry_run {
        scope_5287.boolean(*var_5288);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5289 = writer.prefix("VpnConnectionId");
    if let Some(var_5290) = &input.vpn_connection_id {
        scope_5289.string(var_5290);
    }
    #[allow(unused_mut)]
    let mut scope_5291 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5292) = &input.local_ipv4_network_cidr {
        scope_5291.string(var_5292);
    }
    #[allow(unused_mut)]
    let mut scope_5293 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5294) = &input.remote_ipv4_network_cidr {
        scope_5293.string(var_5294);
    }
    #[allow(unused_mut)]
    let mut scope_5295 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5296) = &input.local_ipv6_network_cidr {
        scope_5295.string(var_5296);
    }
    #[allow(unused_mut)]
    let mut scope_5297 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5298) = &input.remote_ipv6_network_cidr {
        scope_5297.string(var_5298);
    }
    #[allow(unused_mut)]
    let mut scope_5299 = writer.prefix("DryRun");
    if let Some(var_5300) = &input.dry_run {
        scope_5299.boolean(*var_5300);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5301 = writer.prefix("VpnConnectionId");
    if let Some(var_5302) = &input.vpn_connection_id {
        scope_5301.string(var_5302);
    }
    #[allow(unused_mut)]
    let mut scope_5303 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5304) = &input.vpn_tunnel_outside_ip_address {
        scope_5303.string(var_5304);
    }
    #[allow(unused_mut)]
    let mut scope_5305 = writer.prefix("DryRun");
    if let Some(var_5306) = &input.dry_run {
        scope_5305.boolean(*var_5306);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5307 = writer.prefix("VpnConnectionId");
    if let Some(var_5308) = &input.vpn_connection_id {
        scope_5307.string(var_5308);
    }
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5310) = &input.vpn_tunnel_outside_ip_address {
        scope_5309.string(var_5310);
    }
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("TunnelOptions");
    if let Some(var_5312) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5311, var_5312,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("DryRun");
    if let Some(var_5314) = &input.dry_run {
        scope_5313.boolean(*var_5314);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5315 = writer.prefix("InstanceId");
    if let Some(var_5316) = &input.instance_ids {
        let mut list_5318 = scope_5315.start_list(true, Some("InstanceId"));
        for item_5317 in var_5316 {
            #[allow(unused_mut)]
            let mut entry_5319 = list_5318.entry();
            entry_5319.string(item_5317);
        }
        list_5318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5320 = writer.prefix("DryRun");
    if let Some(var_5321) = &input.dry_run {
        scope_5320.boolean(*var_5321);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5322 = writer.prefix("DryRun");
    if let Some(var_5323) = &input.dry_run {
        scope_5322.boolean(*var_5323);
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("PublicIp");
    if let Some(var_5325) = &input.public_ip {
        scope_5324.string(var_5325);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5326 = writer.prefix("DryRun");
    if let Some(var_5327) = &input.dry_run {
        scope_5326.boolean(*var_5327);
    }
    #[allow(unused_mut)]
    let mut scope_5328 = writer.prefix("Cidr");
    if let Some(var_5329) = &input.cidr {
        scope_5328.string(var_5329);
    }
    #[allow(unused_mut)]
    let mut scope_5330 = writer.prefix("IpamPoolId");
    if let Some(var_5331) = &input.ipam_pool_id {
        scope_5330.string(var_5331);
    }
    #[allow(unused_mut)]
    let mut scope_5332 = writer.prefix("IpamPoolOwner");
    if let Some(var_5333) = &input.ipam_pool_owner {
        scope_5332.string(var_5333);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("Cidr");
    if let Some(var_5335) = &input.cidr {
        scope_5334.string(var_5335);
    }
    #[allow(unused_mut)]
    let mut scope_5336 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5337) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5336, var_5337,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5338 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5339) = &input.publicly_advertisable {
        scope_5338.boolean(*var_5339);
    }
    #[allow(unused_mut)]
    let mut scope_5340 = writer.prefix("Description");
    if let Some(var_5341) = &input.description {
        scope_5340.string(var_5341);
    }
    #[allow(unused_mut)]
    let mut scope_5342 = writer.prefix("DryRun");
    if let Some(var_5343) = &input.dry_run {
        scope_5342.boolean(*var_5343);
    }
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("PoolTagSpecification");
    if let Some(var_5345) = &input.pool_tag_specifications {
        let mut list_5347 = scope_5344.start_list(true, Some("item"));
        for item_5346 in var_5345 {
            #[allow(unused_mut)]
            let mut entry_5348 = list_5347.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5348, item_5346,
            )?;
        }
        list_5347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("MultiRegion");
    if let Some(var_5350) = &input.multi_region {
        scope_5349.boolean(*var_5350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("DryRun");
    if let Some(var_5352) = &input.dry_run {
        scope_5351.boolean(*var_5352);
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("IpamPoolId");
    if let Some(var_5354) = &input.ipam_pool_id {
        scope_5353.string(var_5354);
    }
    #[allow(unused_mut)]
    let mut scope_5355 = writer.prefix("Cidr");
    if let Some(var_5356) = &input.cidr {
        scope_5355.string(var_5356);
    }
    #[allow(unused_mut)]
    let mut scope_5357 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5358) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5357, var_5358,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5359 = writer.prefix("DryRun");
    if let Some(var_5360) = &input.dry_run {
        scope_5359.boolean(*var_5360);
    }
    #[allow(unused_mut)]
    let mut scope_5361 = writer.prefix("IpamPoolId");
    if let Some(var_5362) = &input.ipam_pool_id {
        scope_5361.string(var_5362);
    }
    #[allow(unused_mut)]
    let mut scope_5363 = writer.prefix("PoolId");
    if let Some(var_5364) = &input.pool_id {
        scope_5363.string(var_5364);
    }
    #[allow(unused_mut)]
    let mut scope_5365 = writer.prefix("NetmaskLength");
    if let Some(var_5366) = &input.netmask_length {
        scope_5365.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5366).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5367 = writer.prefix("ClientToken");
    if let Some(var_5368) = &input.client_token {
        scope_5367.string(var_5368);
    }
    #[allow(unused_mut)]
    let mut scope_5369 = writer.prefix("CurrencyCode");
    if let Some(var_5370) = &input.currency_code {
        scope_5369.string(var_5370.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("HostIdSet");
    if let Some(var_5372) = &input.host_id_set {
        let mut list_5374 = scope_5371.start_list(true, Some("item"));
        for item_5373 in var_5372 {
            #[allow(unused_mut)]
            let mut entry_5375 = list_5374.entry();
            entry_5375.string(item_5373);
        }
        list_5374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5376 = writer.prefix("LimitPrice");
    if let Some(var_5377) = &input.limit_price {
        scope_5376.string(var_5377);
    }
    #[allow(unused_mut)]
    let mut scope_5378 = writer.prefix("OfferingId");
    if let Some(var_5379) = &input.offering_id {
        scope_5378.string(var_5379);
    }
    #[allow(unused_mut)]
    let mut scope_5380 = writer.prefix("TagSpecification");
    if let Some(var_5381) = &input.tag_specifications {
        let mut list_5383 = scope_5380.start_list(true, Some("item"));
        for item_5382 in var_5381 {
            #[allow(unused_mut)]
            let mut entry_5384 = list_5383.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5384, item_5382,
            )?;
        }
        list_5383.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("InstanceCount");
    if let Some(var_5386) = &input.instance_count {
        scope_5385.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5386).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5388) = &input.reserved_instances_offering_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("DryRun");
    if let Some(var_5390) = &input.dry_run {
        scope_5389.boolean(*var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("LimitPrice");
    if let Some(var_5392) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5391, var_5392,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("PurchaseTime");
    if let Some(var_5394) = &input.purchase_time {
        scope_5393.date_time(var_5394, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("ClientToken");
    if let Some(var_5396) = &input.client_token {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("DryRun");
    if let Some(var_5398) = &input.dry_run {
        scope_5397.boolean(*var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("PurchaseRequest");
    if let Some(var_5400) = &input.purchase_requests {
        let mut list_5402 = scope_5399.start_list(true, Some("PurchaseRequest"));
        for item_5401 in var_5400 {
            #[allow(unused_mut)]
            let mut entry_5403 = list_5402.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5403, item_5401,
            )?;
        }
        list_5402.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5404 = writer.prefix("InstanceId");
    if let Some(var_5405) = &input.instance_ids {
        let mut list_5407 = scope_5404.start_list(true, Some("InstanceId"));
        for item_5406 in var_5405 {
            #[allow(unused_mut)]
            let mut entry_5408 = list_5407.entry();
            entry_5408.string(item_5406);
        }
        list_5407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("DryRun");
    if let Some(var_5410) = &input.dry_run {
        scope_5409.boolean(*var_5410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("ImageLocation");
    if let Some(var_5412) = &input.image_location {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("Architecture");
    if let Some(var_5414) = &input.architecture {
        scope_5413.string(var_5414.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5416) = &input.block_device_mappings {
        let mut list_5418 = scope_5415.start_list(true, Some("BlockDeviceMapping"));
        for item_5417 in var_5416 {
            #[allow(unused_mut)]
            let mut entry_5419 = list_5418.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5419, item_5417,
            )?;
        }
        list_5418.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5420 = writer.prefix("Description");
    if let Some(var_5421) = &input.description {
        scope_5420.string(var_5421);
    }
    #[allow(unused_mut)]
    let mut scope_5422 = writer.prefix("DryRun");
    if let Some(var_5423) = &input.dry_run {
        scope_5422.boolean(*var_5423);
    }
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("EnaSupport");
    if let Some(var_5425) = &input.ena_support {
        scope_5424.boolean(*var_5425);
    }
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("KernelId");
    if let Some(var_5427) = &input.kernel_id {
        scope_5426.string(var_5427);
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("Name");
    if let Some(var_5429) = &input.name {
        scope_5428.string(var_5429);
    }
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("BillingProduct");
    if let Some(var_5431) = &input.billing_products {
        let mut list_5433 = scope_5430.start_list(true, Some("item"));
        for item_5432 in var_5431 {
            #[allow(unused_mut)]
            let mut entry_5434 = list_5433.entry();
            entry_5434.string(item_5432);
        }
        list_5433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5435 = writer.prefix("RamdiskId");
    if let Some(var_5436) = &input.ramdisk_id {
        scope_5435.string(var_5436);
    }
    #[allow(unused_mut)]
    let mut scope_5437 = writer.prefix("RootDeviceName");
    if let Some(var_5438) = &input.root_device_name {
        scope_5437.string(var_5438);
    }
    #[allow(unused_mut)]
    let mut scope_5439 = writer.prefix("SriovNetSupport");
    if let Some(var_5440) = &input.sriov_net_support {
        scope_5439.string(var_5440);
    }
    #[allow(unused_mut)]
    let mut scope_5441 = writer.prefix("VirtualizationType");
    if let Some(var_5442) = &input.virtualization_type {
        scope_5441.string(var_5442);
    }
    #[allow(unused_mut)]
    let mut scope_5443 = writer.prefix("BootMode");
    if let Some(var_5444) = &input.boot_mode {
        scope_5443.string(var_5444.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5445 = writer.prefix("DryRun");
    if let Some(var_5446) = &input.dry_run {
        scope_5445.boolean(*var_5446);
    }
    #[allow(unused_mut)]
    let mut scope_5447 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5448) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5447, var_5448,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5449 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5450) = &input.transit_gateway_multicast_domain_id {
        scope_5449.string(var_5450);
    }
    #[allow(unused_mut)]
    let mut scope_5451 = writer.prefix("GroupIpAddress");
    if let Some(var_5452) = &input.group_ip_address {
        scope_5451.string(var_5452);
    }
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5454) = &input.network_interface_ids {
        let mut list_5456 = scope_5453.start_list(true, Some("item"));
        for item_5455 in var_5454 {
            #[allow(unused_mut)]
            let mut entry_5457 = list_5456.entry();
            entry_5457.string(item_5455);
        }
        list_5456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5458 = writer.prefix("DryRun");
    if let Some(var_5459) = &input.dry_run {
        scope_5458.boolean(*var_5459);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5460 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5461) = &input.transit_gateway_multicast_domain_id {
        scope_5460.string(var_5461);
    }
    #[allow(unused_mut)]
    let mut scope_5462 = writer.prefix("GroupIpAddress");
    if let Some(var_5463) = &input.group_ip_address {
        scope_5462.string(var_5463);
    }
    #[allow(unused_mut)]
    let mut scope_5464 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5465) = &input.network_interface_ids {
        let mut list_5467 = scope_5464.start_list(true, Some("item"));
        for item_5466 in var_5465 {
            #[allow(unused_mut)]
            let mut entry_5468 = list_5467.entry();
            entry_5468.string(item_5466);
        }
        list_5467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("DryRun");
    if let Some(var_5470) = &input.dry_run {
        scope_5469.boolean(*var_5470);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5472) = &input.transit_gateway_multicast_domain_id {
        scope_5471.string(var_5472);
    }
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5474) = &input.transit_gateway_attachment_id {
        scope_5473.string(var_5474);
    }
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("SubnetIds");
    if let Some(var_5476) = &input.subnet_ids {
        let mut list_5478 = scope_5475.start_list(true, Some("item"));
        for item_5477 in var_5476 {
            #[allow(unused_mut)]
            let mut entry_5479 = list_5478.entry();
            entry_5479.string(item_5477);
        }
        list_5478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("DryRun");
    if let Some(var_5481) = &input.dry_run {
        scope_5480.boolean(*var_5481);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5483) = &input.transit_gateway_attachment_id {
        scope_5482.string(var_5483);
    }
    #[allow(unused_mut)]
    let mut scope_5484 = writer.prefix("DryRun");
    if let Some(var_5485) = &input.dry_run {
        scope_5484.boolean(*var_5485);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5486 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5487) = &input.transit_gateway_attachment_id {
        scope_5486.string(var_5487);
    }
    #[allow(unused_mut)]
    let mut scope_5488 = writer.prefix("DryRun");
    if let Some(var_5489) = &input.dry_run {
        scope_5488.boolean(*var_5489);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5490 = writer.prefix("DryRun");
    if let Some(var_5491) = &input.dry_run {
        scope_5490.boolean(*var_5491);
    }
    #[allow(unused_mut)]
    let mut scope_5492 = writer.prefix("ServiceId");
    if let Some(var_5493) = &input.service_id {
        scope_5492.string(var_5493);
    }
    #[allow(unused_mut)]
    let mut scope_5494 = writer.prefix("VpcEndpointId");
    if let Some(var_5495) = &input.vpc_endpoint_ids {
        let mut list_5497 = scope_5494.start_list(true, Some("item"));
        for item_5496 in var_5495 {
            #[allow(unused_mut)]
            let mut entry_5498 = list_5497.entry();
            entry_5498.string(item_5496);
        }
        list_5497.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("DryRun");
    if let Some(var_5500) = &input.dry_run {
        scope_5499.boolean(*var_5500);
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5502) = &input.vpc_peering_connection_id {
        scope_5501.string(var_5502);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5503 = writer.prefix("AllocationId");
    if let Some(var_5504) = &input.allocation_id {
        scope_5503.string(var_5504);
    }
    #[allow(unused_mut)]
    let mut scope_5505 = writer.prefix("PublicIp");
    if let Some(var_5506) = &input.public_ip {
        scope_5505.string(var_5506);
    }
    #[allow(unused_mut)]
    let mut scope_5507 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5508) = &input.network_border_group {
        scope_5507.string(var_5508);
    }
    #[allow(unused_mut)]
    let mut scope_5509 = writer.prefix("DryRun");
    if let Some(var_5510) = &input.dry_run {
        scope_5509.boolean(*var_5510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5511 = writer.prefix("HostId");
    if let Some(var_5512) = &input.host_ids {
        let mut list_5514 = scope_5511.start_list(true, Some("item"));
        for item_5513 in var_5512 {
            #[allow(unused_mut)]
            let mut entry_5515 = list_5514.entry();
            entry_5515.string(item_5513);
        }
        list_5514.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5516 = writer.prefix("DryRun");
    if let Some(var_5517) = &input.dry_run {
        scope_5516.boolean(*var_5517);
    }
    #[allow(unused_mut)]
    let mut scope_5518 = writer.prefix("IpamPoolId");
    if let Some(var_5519) = &input.ipam_pool_id {
        scope_5518.string(var_5519);
    }
    #[allow(unused_mut)]
    let mut scope_5520 = writer.prefix("Cidr");
    if let Some(var_5521) = &input.cidr {
        scope_5520.string(var_5521);
    }
    #[allow(unused_mut)]
    let mut scope_5522 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5523) = &input.ipam_pool_allocation_id {
        scope_5522.string(var_5523);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("IamInstanceProfile");
    if let Some(var_5525) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5524, var_5525,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("AssociationId");
    if let Some(var_5527) = &input.association_id {
        scope_5526.string(var_5527);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("AssociationId");
    if let Some(var_5529) = &input.association_id {
        scope_5528.string(var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("DryRun");
    if let Some(var_5531) = &input.dry_run {
        scope_5530.boolean(*var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("NetworkAclId");
    if let Some(var_5533) = &input.network_acl_id {
        scope_5532.string(var_5533);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("CidrBlock");
    if let Some(var_5535) = &input.cidr_block {
        scope_5534.string(var_5535);
    }
    #[allow(unused_mut)]
    let mut scope_5536 = writer.prefix("DryRun");
    if let Some(var_5537) = &input.dry_run {
        scope_5536.boolean(*var_5537);
    }
    #[allow(unused_mut)]
    let mut scope_5538 = writer.prefix("Egress");
    if let Some(var_5539) = &input.egress {
        scope_5538.boolean(*var_5539);
    }
    #[allow(unused_mut)]
    let mut scope_5540 = writer.prefix("Icmp");
    if let Some(var_5541) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5540, var_5541)?;
    }
    #[allow(unused_mut)]
    let mut scope_5542 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5543) = &input.ipv6_cidr_block {
        scope_5542.string(var_5543);
    }
    #[allow(unused_mut)]
    let mut scope_5544 = writer.prefix("NetworkAclId");
    if let Some(var_5545) = &input.network_acl_id {
        scope_5544.string(var_5545);
    }
    #[allow(unused_mut)]
    let mut scope_5546 = writer.prefix("PortRange");
    if let Some(var_5547) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5546, var_5547)?;
    }
    #[allow(unused_mut)]
    let mut scope_5548 = writer.prefix("Protocol");
    if let Some(var_5549) = &input.protocol {
        scope_5548.string(var_5549);
    }
    #[allow(unused_mut)]
    let mut scope_5550 = writer.prefix("RuleAction");
    if let Some(var_5551) = &input.rule_action {
        scope_5550.string(var_5551.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5552 = writer.prefix("RuleNumber");
    if let Some(var_5553) = &input.rule_number {
        scope_5552.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5553).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5554 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5555) = &input.destination_cidr_block {
        scope_5554.string(var_5555);
    }
    #[allow(unused_mut)]
    let mut scope_5556 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5557) = &input.destination_ipv6_cidr_block {
        scope_5556.string(var_5557);
    }
    #[allow(unused_mut)]
    let mut scope_5558 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5559) = &input.destination_prefix_list_id {
        scope_5558.string(var_5559);
    }
    #[allow(unused_mut)]
    let mut scope_5560 = writer.prefix("DryRun");
    if let Some(var_5561) = &input.dry_run {
        scope_5560.boolean(*var_5561);
    }
    #[allow(unused_mut)]
    let mut scope_5562 = writer.prefix("VpcEndpointId");
    if let Some(var_5563) = &input.vpc_endpoint_id {
        scope_5562.string(var_5563);
    }
    #[allow(unused_mut)]
    let mut scope_5564 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5565) = &input.egress_only_internet_gateway_id {
        scope_5564.string(var_5565);
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("GatewayId");
    if let Some(var_5567) = &input.gateway_id {
        scope_5566.string(var_5567);
    }
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("InstanceId");
    if let Some(var_5569) = &input.instance_id {
        scope_5568.string(var_5569);
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("LocalTarget");
    if let Some(var_5571) = &input.local_target {
        scope_5570.boolean(*var_5571);
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("NatGatewayId");
    if let Some(var_5573) = &input.nat_gateway_id {
        scope_5572.string(var_5573);
    }
    #[allow(unused_mut)]
    let mut scope_5574 = writer.prefix("TransitGatewayId");
    if let Some(var_5575) = &input.transit_gateway_id {
        scope_5574.string(var_5575);
    }
    #[allow(unused_mut)]
    let mut scope_5576 = writer.prefix("LocalGatewayId");
    if let Some(var_5577) = &input.local_gateway_id {
        scope_5576.string(var_5577);
    }
    #[allow(unused_mut)]
    let mut scope_5578 = writer.prefix("CarrierGatewayId");
    if let Some(var_5579) = &input.carrier_gateway_id {
        scope_5578.string(var_5579);
    }
    #[allow(unused_mut)]
    let mut scope_5580 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5581) = &input.network_interface_id {
        scope_5580.string(var_5581);
    }
    #[allow(unused_mut)]
    let mut scope_5582 = writer.prefix("RouteTableId");
    if let Some(var_5583) = &input.route_table_id {
        scope_5582.string(var_5583);
    }
    #[allow(unused_mut)]
    let mut scope_5584 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5585) = &input.vpc_peering_connection_id {
        scope_5584.string(var_5585);
    }
    #[allow(unused_mut)]
    let mut scope_5586 = writer.prefix("CoreNetworkArn");
    if let Some(var_5587) = &input.core_network_arn {
        scope_5586.string(var_5587);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("AssociationId");
    if let Some(var_5589) = &input.association_id {
        scope_5588.string(var_5589);
    }
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("DryRun");
    if let Some(var_5591) = &input.dry_run {
        scope_5590.boolean(*var_5591);
    }
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("RouteTableId");
    if let Some(var_5593) = &input.route_table_id {
        scope_5592.string(var_5593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5595) = &input.destination_cidr_block {
        scope_5594.string(var_5595);
    }
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5597) = &input.transit_gateway_route_table_id {
        scope_5596.string(var_5597);
    }
    #[allow(unused_mut)]
    let mut scope_5598 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5599) = &input.transit_gateway_attachment_id {
        scope_5598.string(var_5599);
    }
    #[allow(unused_mut)]
    let mut scope_5600 = writer.prefix("Blackhole");
    if let Some(var_5601) = &input.blackhole {
        scope_5600.boolean(*var_5601);
    }
    #[allow(unused_mut)]
    let mut scope_5602 = writer.prefix("DryRun");
    if let Some(var_5603) = &input.dry_run {
        scope_5602.boolean(*var_5603);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5604 = writer.prefix("Description");
    if let Some(var_5605) = &input.description {
        scope_5604.string(var_5605);
    }
    #[allow(unused_mut)]
    let mut scope_5606 = writer.prefix("DryRun");
    if let Some(var_5607) = &input.dry_run {
        scope_5606.boolean(*var_5607);
    }
    #[allow(unused_mut)]
    let mut scope_5608 = writer.prefix("EndTime");
    if let Some(var_5609) = &input.end_time {
        scope_5608.date_time(var_5609, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5610 = writer.prefix("InstanceId");
    if let Some(var_5611) = &input.instances {
        let mut list_5613 = scope_5610.start_list(true, Some("InstanceId"));
        for item_5612 in var_5611 {
            #[allow(unused_mut)]
            let mut entry_5614 = list_5613.entry();
            entry_5614.string(item_5612);
        }
        list_5613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("ReasonCode");
    if let Some(var_5616) = &input.reason_codes {
        let mut list_5618 = scope_5615.start_list(true, Some("item"));
        for item_5617 in var_5616 {
            #[allow(unused_mut)]
            let mut entry_5619 = list_5618.entry();
            entry_5619.string(item_5617.as_str());
        }
        list_5618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5620 = writer.prefix("StartTime");
    if let Some(var_5621) = &input.start_time {
        scope_5620.date_time(var_5621, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5622 = writer.prefix("Status");
    if let Some(var_5623) = &input.status {
        scope_5622.string(var_5623.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5624 = writer.prefix("DryRun");
    if let Some(var_5625) = &input.dry_run {
        scope_5624.boolean(*var_5625);
    }
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5627) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5626, var_5627,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5628 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5629) = &input.availability_zone_group {
        scope_5628.string(var_5629);
    }
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5631) = &input.block_duration_minutes {
        scope_5630.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5631).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("ClientToken");
    if let Some(var_5633) = &input.client_token {
        scope_5632.string(var_5633);
    }
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("DryRun");
    if let Some(var_5635) = &input.dry_run {
        scope_5634.boolean(*var_5635);
    }
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("InstanceCount");
    if let Some(var_5637) = &input.instance_count {
        scope_5636.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5637).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("LaunchGroup");
    if let Some(var_5639) = &input.launch_group {
        scope_5638.string(var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("LaunchSpecification");
    if let Some(var_5641) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5640, var_5641,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("SpotPrice");
    if let Some(var_5643) = &input.spot_price {
        scope_5642.string(var_5643);
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("Type");
    if let Some(var_5645) = &input.r#type {
        scope_5644.string(var_5645.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("ValidFrom");
    if let Some(var_5647) = &input.valid_from {
        scope_5646.date_time(var_5647, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("ValidUntil");
    if let Some(var_5649) = &input.valid_until {
        scope_5648.date_time(var_5649, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("TagSpecification");
    if let Some(var_5651) = &input.tag_specifications {
        let mut list_5653 = scope_5650.start_list(true, Some("item"));
        for item_5652 in var_5651 {
            #[allow(unused_mut)]
            let mut entry_5654 = list_5653.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5654, item_5652,
            )?;
        }
        list_5653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5655 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5656) = &input.instance_interruption_behavior {
        scope_5655.string(var_5656.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5657 = writer.prefix("AllocationId");
    if let Some(var_5658) = &input.allocation_id {
        scope_5657.string(var_5658);
    }
    #[allow(unused_mut)]
    let mut scope_5659 = writer.prefix("Attribute");
    if let Some(var_5660) = &input.attribute {
        scope_5659.string(var_5660.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5661 = writer.prefix("DryRun");
    if let Some(var_5662) = &input.dry_run {
        scope_5661.boolean(*var_5662);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5663 = writer.prefix("DryRun");
    if let Some(var_5664) = &input.dry_run {
        scope_5663.boolean(*var_5664);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5665 = writer.prefix("DryRun");
    if let Some(var_5666) = &input.dry_run {
        scope_5665.boolean(*var_5666);
    }
    #[allow(unused_mut)]
    let mut scope_5667 = writer.prefix("FpgaImageId");
    if let Some(var_5668) = &input.fpga_image_id {
        scope_5667.string(var_5668);
    }
    #[allow(unused_mut)]
    let mut scope_5669 = writer.prefix("Attribute");
    if let Some(var_5670) = &input.attribute {
        scope_5669.string(var_5670.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5671 = writer.prefix("Attribute");
    if let Some(var_5672) = &input.attribute {
        scope_5671.string(var_5672.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5673 = writer.prefix("ImageId");
    if let Some(var_5674) = &input.image_id {
        scope_5673.string(var_5674);
    }
    #[allow(unused_mut)]
    let mut scope_5675 = writer.prefix("DryRun");
    if let Some(var_5676) = &input.dry_run {
        scope_5675.boolean(*var_5676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5677 = writer.prefix("Attribute");
    if let Some(var_5678) = &input.attribute {
        scope_5677.string(var_5678.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5679 = writer.prefix("DryRun");
    if let Some(var_5680) = &input.dry_run {
        scope_5679.boolean(*var_5680);
    }
    #[allow(unused_mut)]
    let mut scope_5681 = writer.prefix("InstanceId");
    if let Some(var_5682) = &input.instance_id {
        scope_5681.string(var_5682);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5683 = writer.prefix("DryRun");
    if let Some(var_5684) = &input.dry_run {
        scope_5683.boolean(*var_5684);
    }
    #[allow(unused_mut)]
    let mut scope_5685 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5686) = &input.network_interface_id {
        scope_5685.string(var_5686);
    }
    #[allow(unused_mut)]
    let mut scope_5687 = writer.prefix("SourceDestCheck");
    if let Some(var_5688) = &input.source_dest_check {
        scope_5687.string(var_5688);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5689 = writer.prefix("Attribute");
    if let Some(var_5690) = &input.attribute {
        scope_5689.string(var_5690.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5691 = writer.prefix("SnapshotId");
    if let Some(var_5692) = &input.snapshot_id {
        scope_5691.string(var_5692);
    }
    #[allow(unused_mut)]
    let mut scope_5693 = writer.prefix("DryRun");
    if let Some(var_5694) = &input.dry_run {
        scope_5693.boolean(*var_5694);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5695 = writer.prefix("DryRun");
    if let Some(var_5696) = &input.dry_run {
        scope_5695.boolean(*var_5696);
    }
    #[allow(unused_mut)]
    let mut scope_5697 = writer.prefix("PublicIp");
    if let Some(var_5698) = &input.public_ip {
        scope_5697.string(var_5698);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5699 = writer.prefix("DryRun");
    if let Some(var_5700) = &input.dry_run {
        scope_5699.boolean(*var_5700);
    }
    #[allow(unused_mut)]
    let mut scope_5701 = writer.prefix("PrefixListId");
    if let Some(var_5702) = &input.prefix_list_id {
        scope_5701.string(var_5702);
    }
    #[allow(unused_mut)]
    let mut scope_5703 = writer.prefix("PreviousVersion");
    if let Some(var_5704) = &input.previous_version {
        scope_5703.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5704).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5705 = writer.prefix("CurrentVersion");
    if let Some(var_5706) = &input.current_version {
        scope_5705.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5706).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5707 = writer.prefix("SnapshotId");
    if let Some(var_5708) = &input.snapshot_id {
        scope_5707.string(var_5708);
    }
    #[allow(unused_mut)]
    let mut scope_5709 = writer.prefix("DryRun");
    if let Some(var_5710) = &input.dry_run {
        scope_5709.boolean(*var_5710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5711 = writer.prefix("SnapshotId");
    if let Some(var_5712) = &input.snapshot_id {
        scope_5711.string(var_5712);
    }
    #[allow(unused_mut)]
    let mut scope_5713 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5714) = &input.temporary_restore_days {
        scope_5713.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5714).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5715 = writer.prefix("PermanentRestore");
    if let Some(var_5716) = &input.permanent_restore {
        scope_5715.boolean(*var_5716);
    }
    #[allow(unused_mut)]
    let mut scope_5717 = writer.prefix("DryRun");
    if let Some(var_5718) = &input.dry_run {
        scope_5717.boolean(*var_5718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5719 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5720) = &input.client_vpn_endpoint_id {
        scope_5719.string(var_5720);
    }
    #[allow(unused_mut)]
    let mut scope_5721 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5722) = &input.target_network_cidr {
        scope_5721.string(var_5722);
    }
    #[allow(unused_mut)]
    let mut scope_5723 = writer.prefix("AccessGroupId");
    if let Some(var_5724) = &input.access_group_id {
        scope_5723.string(var_5724);
    }
    #[allow(unused_mut)]
    let mut scope_5725 = writer.prefix("RevokeAllGroups");
    if let Some(var_5726) = &input.revoke_all_groups {
        scope_5725.boolean(*var_5726);
    }
    #[allow(unused_mut)]
    let mut scope_5727 = writer.prefix("DryRun");
    if let Some(var_5728) = &input.dry_run {
        scope_5727.boolean(*var_5728);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5729 = writer.prefix("DryRun");
    if let Some(var_5730) = &input.dry_run {
        scope_5729.boolean(*var_5730);
    }
    #[allow(unused_mut)]
    let mut scope_5731 = writer.prefix("GroupId");
    if let Some(var_5732) = &input.group_id {
        scope_5731.string(var_5732);
    }
    #[allow(unused_mut)]
    let mut scope_5733 = writer.prefix("IpPermissions");
    if let Some(var_5734) = &input.ip_permissions {
        let mut list_5736 = scope_5733.start_list(true, Some("item"));
        for item_5735 in var_5734 {
            #[allow(unused_mut)]
            let mut entry_5737 = list_5736.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5737, item_5735)?;
        }
        list_5736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5739) = &input.security_group_rule_ids {
        let mut list_5741 = scope_5738.start_list(true, Some("item"));
        for item_5740 in var_5739 {
            #[allow(unused_mut)]
            let mut entry_5742 = list_5741.entry();
            entry_5742.string(item_5740);
        }
        list_5741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5743 = writer.prefix("CidrIp");
    if let Some(var_5744) = &input.cidr_ip {
        scope_5743.string(var_5744);
    }
    #[allow(unused_mut)]
    let mut scope_5745 = writer.prefix("FromPort");
    if let Some(var_5746) = &input.from_port {
        scope_5745.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5746).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5747 = writer.prefix("IpProtocol");
    if let Some(var_5748) = &input.ip_protocol {
        scope_5747.string(var_5748);
    }
    #[allow(unused_mut)]
    let mut scope_5749 = writer.prefix("ToPort");
    if let Some(var_5750) = &input.to_port {
        scope_5749.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5750).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5751 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5752) = &input.source_security_group_name {
        scope_5751.string(var_5752);
    }
    #[allow(unused_mut)]
    let mut scope_5753 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5754) = &input.source_security_group_owner_id {
        scope_5753.string(var_5754);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5755 = writer.prefix("CidrIp");
    if let Some(var_5756) = &input.cidr_ip {
        scope_5755.string(var_5756);
    }
    #[allow(unused_mut)]
    let mut scope_5757 = writer.prefix("FromPort");
    if let Some(var_5758) = &input.from_port {
        scope_5757.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5758).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5759 = writer.prefix("GroupId");
    if let Some(var_5760) = &input.group_id {
        scope_5759.string(var_5760);
    }
    #[allow(unused_mut)]
    let mut scope_5761 = writer.prefix("GroupName");
    if let Some(var_5762) = &input.group_name {
        scope_5761.string(var_5762);
    }
    #[allow(unused_mut)]
    let mut scope_5763 = writer.prefix("IpPermissions");
    if let Some(var_5764) = &input.ip_permissions {
        let mut list_5766 = scope_5763.start_list(true, Some("item"));
        for item_5765 in var_5764 {
            #[allow(unused_mut)]
            let mut entry_5767 = list_5766.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5767, item_5765)?;
        }
        list_5766.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5768 = writer.prefix("IpProtocol");
    if let Some(var_5769) = &input.ip_protocol {
        scope_5768.string(var_5769);
    }
    #[allow(unused_mut)]
    let mut scope_5770 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5771) = &input.source_security_group_name {
        scope_5770.string(var_5771);
    }
    #[allow(unused_mut)]
    let mut scope_5772 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5773) = &input.source_security_group_owner_id {
        scope_5772.string(var_5773);
    }
    #[allow(unused_mut)]
    let mut scope_5774 = writer.prefix("ToPort");
    if let Some(var_5775) = &input.to_port {
        scope_5774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5775).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5776 = writer.prefix("DryRun");
    if let Some(var_5777) = &input.dry_run {
        scope_5776.boolean(*var_5777);
    }
    #[allow(unused_mut)]
    let mut scope_5778 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5779) = &input.security_group_rule_ids {
        let mut list_5781 = scope_5778.start_list(true, Some("item"));
        for item_5780 in var_5779 {
            #[allow(unused_mut)]
            let mut entry_5782 = list_5781.entry();
            entry_5782.string(item_5780);
        }
        list_5781.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5783 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5784) = &input.block_device_mappings {
        let mut list_5786 = scope_5783.start_list(true, Some("BlockDeviceMapping"));
        for item_5785 in var_5784 {
            #[allow(unused_mut)]
            let mut entry_5787 = list_5786.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5787, item_5785,
            )?;
        }
        list_5786.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5788 = writer.prefix("ImageId");
    if let Some(var_5789) = &input.image_id {
        scope_5788.string(var_5789);
    }
    #[allow(unused_mut)]
    let mut scope_5790 = writer.prefix("InstanceType");
    if let Some(var_5791) = &input.instance_type {
        scope_5790.string(var_5791.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5792 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5793) = &input.ipv6_address_count {
        scope_5792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5794 = writer.prefix("Ipv6Address");
    if let Some(var_5795) = &input.ipv6_addresses {
        let mut list_5797 = scope_5794.start_list(true, Some("item"));
        for item_5796 in var_5795 {
            #[allow(unused_mut)]
            let mut entry_5798 = list_5797.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5798, item_5796,
            )?;
        }
        list_5797.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("KernelId");
    if let Some(var_5800) = &input.kernel_id {
        scope_5799.string(var_5800);
    }
    #[allow(unused_mut)]
    let mut scope_5801 = writer.prefix("KeyName");
    if let Some(var_5802) = &input.key_name {
        scope_5801.string(var_5802);
    }
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("MaxCount");
    if let Some(var_5804) = &input.max_count {
        scope_5803.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5804).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("MinCount");
    if let Some(var_5806) = &input.min_count {
        scope_5805.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5806).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("Monitoring");
    if let Some(var_5808) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5807, var_5808,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("Placement");
    if let Some(var_5810) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5809, var_5810)?;
    }
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("RamdiskId");
    if let Some(var_5812) = &input.ramdisk_id {
        scope_5811.string(var_5812);
    }
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("SecurityGroupId");
    if let Some(var_5814) = &input.security_group_ids {
        let mut list_5816 = scope_5813.start_list(true, Some("SecurityGroupId"));
        for item_5815 in var_5814 {
            #[allow(unused_mut)]
            let mut entry_5817 = list_5816.entry();
            entry_5817.string(item_5815);
        }
        list_5816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5818 = writer.prefix("SecurityGroup");
    if let Some(var_5819) = &input.security_groups {
        let mut list_5821 = scope_5818.start_list(true, Some("SecurityGroup"));
        for item_5820 in var_5819 {
            #[allow(unused_mut)]
            let mut entry_5822 = list_5821.entry();
            entry_5822.string(item_5820);
        }
        list_5821.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("SubnetId");
    if let Some(var_5824) = &input.subnet_id {
        scope_5823.string(var_5824);
    }
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("UserData");
    if let Some(var_5826) = &input.user_data {
        scope_5825.string(var_5826);
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("AdditionalInfo");
    if let Some(var_5828) = &input.additional_info {
        scope_5827.string(var_5828);
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("ClientToken");
    if let Some(var_5830) = &input.client_token {
        scope_5829.string(var_5830);
    }
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("DisableApiTermination");
    if let Some(var_5832) = &input.disable_api_termination {
        scope_5831.boolean(*var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("DryRun");
    if let Some(var_5834) = &input.dry_run {
        scope_5833.boolean(*var_5834);
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("EbsOptimized");
    if let Some(var_5836) = &input.ebs_optimized {
        scope_5835.boolean(*var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("IamInstanceProfile");
    if let Some(var_5838) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5837, var_5838,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5840) = &input.instance_initiated_shutdown_behavior {
        scope_5839.string(var_5840.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("NetworkInterface");
    if let Some(var_5842) = &input.network_interfaces {
        let mut list_5844 = scope_5841.start_list(true, Some("item"));
        for item_5843 in var_5842 {
            #[allow(unused_mut)]
            let mut entry_5845 = list_5844.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5845, item_5843)?;
        }
        list_5844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5846 = writer.prefix("PrivateIpAddress");
    if let Some(var_5847) = &input.private_ip_address {
        scope_5846.string(var_5847);
    }
    #[allow(unused_mut)]
    let mut scope_5848 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5849) = &input.elastic_gpu_specification {
        let mut list_5851 = scope_5848.start_list(true, Some("item"));
        for item_5850 in var_5849 {
            #[allow(unused_mut)]
            let mut entry_5852 = list_5851.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5852, item_5850,
            )?;
        }
        list_5851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5853 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5854) = &input.elastic_inference_accelerators {
        let mut list_5856 = scope_5853.start_list(true, Some("item"));
        for item_5855 in var_5854 {
            #[allow(unused_mut)]
            let mut entry_5857 = list_5856.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5857, item_5855,
            )?;
        }
        list_5856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5858 = writer.prefix("TagSpecification");
    if let Some(var_5859) = &input.tag_specifications {
        let mut list_5861 = scope_5858.start_list(true, Some("item"));
        for item_5860 in var_5859 {
            #[allow(unused_mut)]
            let mut entry_5862 = list_5861.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5862, item_5860,
            )?;
        }
        list_5861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("LaunchTemplate");
    if let Some(var_5864) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5863, var_5864,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5866) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5865, var_5866,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("CreditSpecification");
    if let Some(var_5868) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5867, var_5868,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("CpuOptions");
    if let Some(var_5870) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5869, var_5870,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5872) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5871, var_5872,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("HibernationOptions");
    if let Some(var_5874) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5873, var_5874,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("LicenseSpecification");
    if let Some(var_5876) = &input.license_specifications {
        let mut list_5878 = scope_5875.start_list(true, Some("item"));
        for item_5877 in var_5876 {
            #[allow(unused_mut)]
            let mut entry_5879 = list_5878.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5879, item_5877,
            )?;
        }
        list_5878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("MetadataOptions");
    if let Some(var_5881) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5880, var_5881,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("EnclaveOptions");
    if let Some(var_5883) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5882, var_5883,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5885) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5884, var_5885,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("ClientToken");
    if let Some(var_5887) = &input.client_token {
        scope_5886.string(var_5887);
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("DryRun");
    if let Some(var_5889) = &input.dry_run {
        scope_5888.boolean(*var_5889);
    }
    #[allow(unused_mut)]
    let mut scope_5890 = writer.prefix("InstanceCount");
    if let Some(var_5891) = &input.instance_count {
        scope_5890.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5891).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5892 = writer.prefix("LaunchSpecification");
    if let Some(var_5893) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_5892, var_5893,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5894 = writer.prefix("ScheduledInstanceId");
    if let Some(var_5895) = &input.scheduled_instance_id {
        scope_5894.string(var_5895);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5896 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5897) = &input.local_gateway_route_table_id {
        scope_5896.string(var_5897);
    }
    #[allow(unused_mut)]
    let mut scope_5898 = writer.prefix("Filter");
    if let Some(var_5899) = &input.filters {
        let mut list_5901 = scope_5898.start_list(true, Some("Filter"));
        for item_5900 in var_5899 {
            #[allow(unused_mut)]
            let mut entry_5902 = list_5901.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5902, item_5900)?;
        }
        list_5901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5903 = writer.prefix("MaxResults");
    if let Some(var_5904) = &input.max_results {
        scope_5903.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5904).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5905 = writer.prefix("NextToken");
    if let Some(var_5906) = &input.next_token {
        scope_5905.string(var_5906);
    }
    #[allow(unused_mut)]
    let mut scope_5907 = writer.prefix("DryRun");
    if let Some(var_5908) = &input.dry_run {
        scope_5907.boolean(*var_5908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5909 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5910) = &input.transit_gateway_multicast_domain_id {
        scope_5909.string(var_5910);
    }
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("Filter");
    if let Some(var_5912) = &input.filters {
        let mut list_5914 = scope_5911.start_list(true, Some("Filter"));
        for item_5913 in var_5912 {
            #[allow(unused_mut)]
            let mut entry_5915 = list_5914.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5915, item_5913)?;
        }
        list_5914.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5916 = writer.prefix("MaxResults");
    if let Some(var_5917) = &input.max_results {
        scope_5916.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5917).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5918 = writer.prefix("NextToken");
    if let Some(var_5919) = &input.next_token {
        scope_5918.string(var_5919);
    }
    #[allow(unused_mut)]
    let mut scope_5920 = writer.prefix("DryRun");
    if let Some(var_5921) = &input.dry_run {
        scope_5920.boolean(*var_5921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5922 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5923) = &input.transit_gateway_route_table_id {
        scope_5922.string(var_5923);
    }
    #[allow(unused_mut)]
    let mut scope_5924 = writer.prefix("Filter");
    if let Some(var_5925) = &input.filters {
        let mut list_5927 = scope_5924.start_list(true, Some("Filter"));
        for item_5926 in var_5925 {
            #[allow(unused_mut)]
            let mut entry_5928 = list_5927.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_5928, item_5926)?;
        }
        list_5927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5929 = writer.prefix("MaxResults");
    if let Some(var_5930) = &input.max_results {
        scope_5929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5931 = writer.prefix("DryRun");
    if let Some(var_5932) = &input.dry_run {
        scope_5931.boolean(*var_5932);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5933 = writer.prefix("InstanceId");
    if let Some(var_5934) = &input.instance_id {
        scope_5933.string(var_5934);
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("DryRun");
    if let Some(var_5936) = &input.dry_run {
        scope_5935.boolean(*var_5936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("InstanceId");
    if let Some(var_5938) = &input.instance_ids {
        let mut list_5940 = scope_5937.start_list(true, Some("InstanceId"));
        for item_5939 in var_5938 {
            #[allow(unused_mut)]
            let mut entry_5941 = list_5940.entry();
            entry_5941.string(item_5939);
        }
        list_5940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5942 = writer.prefix("AdditionalInfo");
    if let Some(var_5943) = &input.additional_info {
        scope_5942.string(var_5943);
    }
    #[allow(unused_mut)]
    let mut scope_5944 = writer.prefix("DryRun");
    if let Some(var_5945) = &input.dry_run {
        scope_5944.boolean(*var_5945);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5946 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_5947) = &input.network_insights_access_scope_id {
        scope_5946.string(var_5947);
    }
    #[allow(unused_mut)]
    let mut scope_5948 = writer.prefix("DryRun");
    if let Some(var_5949) = &input.dry_run {
        scope_5948.boolean(*var_5949);
    }
    #[allow(unused_mut)]
    let mut scope_5950 = writer.prefix("TagSpecification");
    if let Some(var_5951) = &input.tag_specifications {
        let mut list_5953 = scope_5950.start_list(true, Some("item"));
        for item_5952 in var_5951 {
            #[allow(unused_mut)]
            let mut entry_5954 = list_5953.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5954, item_5952,
            )?;
        }
        list_5953.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5955 = writer.prefix("ClientToken");
    if let Some(var_5956) = &input.client_token {
        scope_5955.string(var_5956);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5957 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_5958) = &input.network_insights_path_id {
        scope_5957.string(var_5958);
    }
    #[allow(unused_mut)]
    let mut scope_5959 = writer.prefix("FilterInArn");
    if let Some(var_5960) = &input.filter_in_arns {
        let mut list_5962 = scope_5959.start_list(true, Some("item"));
        for item_5961 in var_5960 {
            #[allow(unused_mut)]
            let mut entry_5963 = list_5962.entry();
            entry_5963.string(item_5961);
        }
        list_5962.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5964 = writer.prefix("DryRun");
    if let Some(var_5965) = &input.dry_run {
        scope_5964.boolean(*var_5965);
    }
    #[allow(unused_mut)]
    let mut scope_5966 = writer.prefix("TagSpecification");
    if let Some(var_5967) = &input.tag_specifications {
        let mut list_5969 = scope_5966.start_list(true, Some("item"));
        for item_5968 in var_5967 {
            #[allow(unused_mut)]
            let mut entry_5970 = list_5969.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5970, item_5968,
            )?;
        }
        list_5969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5971 = writer.prefix("ClientToken");
    if let Some(var_5972) = &input.client_token {
        scope_5971.string(var_5972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5973 = writer.prefix("DryRun");
    if let Some(var_5974) = &input.dry_run {
        scope_5973.boolean(*var_5974);
    }
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("ServiceId");
    if let Some(var_5976) = &input.service_id {
        scope_5975.string(var_5976);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("InstanceId");
    if let Some(var_5978) = &input.instance_ids {
        let mut list_5980 = scope_5977.start_list(true, Some("InstanceId"));
        for item_5979 in var_5978 {
            #[allow(unused_mut)]
            let mut entry_5981 = list_5980.entry();
            entry_5981.string(item_5979);
        }
        list_5980.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5982 = writer.prefix("Hibernate");
    if let Some(var_5983) = &input.hibernate {
        scope_5982.boolean(*var_5983);
    }
    #[allow(unused_mut)]
    let mut scope_5984 = writer.prefix("DryRun");
    if let Some(var_5985) = &input.dry_run {
        scope_5984.boolean(*var_5985);
    }
    #[allow(unused_mut)]
    let mut scope_5986 = writer.prefix("Force");
    if let Some(var_5987) = &input.force {
        scope_5986.boolean(*var_5987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5988 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5989) = &input.client_vpn_endpoint_id {
        scope_5988.string(var_5989);
    }
    #[allow(unused_mut)]
    let mut scope_5990 = writer.prefix("ConnectionId");
    if let Some(var_5991) = &input.connection_id {
        scope_5990.string(var_5991);
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("Username");
    if let Some(var_5993) = &input.username {
        scope_5992.string(var_5993);
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("DryRun");
    if let Some(var_5995) = &input.dry_run {
        scope_5994.boolean(*var_5995);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("InstanceId");
    if let Some(var_5997) = &input.instance_ids {
        let mut list_5999 = scope_5996.start_list(true, Some("InstanceId"));
        for item_5998 in var_5997 {
            #[allow(unused_mut)]
            let mut entry_6000 = list_5999.entry();
            entry_6000.string(item_5998);
        }
        list_5999.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6001 = writer.prefix("DryRun");
    if let Some(var_6002) = &input.dry_run {
        scope_6001.boolean(*var_6002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6003 = writer.prefix("Ipv6Addresses");
    if let Some(var_6004) = &input.ipv6_addresses {
        let mut list_6006 = scope_6003.start_list(true, Some("item"));
        for item_6005 in var_6004 {
            #[allow(unused_mut)]
            let mut entry_6007 = list_6006.entry();
            entry_6007.string(item_6005);
        }
        list_6006.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("Ipv6Prefix");
    if let Some(var_6009) = &input.ipv6_prefixes {
        let mut list_6011 = scope_6008.start_list(true, Some("item"));
        for item_6010 in var_6009 {
            #[allow(unused_mut)]
            let mut entry_6012 = list_6011.entry();
            entry_6012.string(item_6010);
        }
        list_6011.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6013 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6014) = &input.network_interface_id {
        scope_6013.string(var_6014);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6015 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6016) = &input.network_interface_id {
        scope_6015.string(var_6016);
    }
    #[allow(unused_mut)]
    let mut scope_6017 = writer.prefix("PrivateIpAddress");
    if let Some(var_6018) = &input.private_ip_addresses {
        let mut list_6020 = scope_6017.start_list(true, Some("PrivateIpAddress"));
        for item_6019 in var_6018 {
            #[allow(unused_mut)]
            let mut entry_6021 = list_6020.entry();
            entry_6021.string(item_6019);
        }
        list_6020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6022 = writer.prefix("Ipv4Prefix");
    if let Some(var_6023) = &input.ipv4_prefixes {
        let mut list_6025 = scope_6022.start_list(true, Some("item"));
        for item_6024 in var_6023 {
            #[allow(unused_mut)]
            let mut entry_6026 = list_6025.entry();
            entry_6026.string(item_6024);
        }
        list_6025.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("InstanceId");
    if let Some(var_6028) = &input.instance_ids {
        let mut list_6030 = scope_6027.start_list(true, Some("InstanceId"));
        for item_6029 in var_6028 {
            #[allow(unused_mut)]
            let mut entry_6031 = list_6030.entry();
            entry_6031.string(item_6029);
        }
        list_6030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("DryRun");
    if let Some(var_6033) = &input.dry_run {
        scope_6032.boolean(*var_6033);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("DryRun");
    if let Some(var_6035) = &input.dry_run {
        scope_6034.boolean(*var_6035);
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("GroupId");
    if let Some(var_6037) = &input.group_id {
        scope_6036.string(var_6037);
    }
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("GroupName");
    if let Some(var_6039) = &input.group_name {
        scope_6038.string(var_6039);
    }
    #[allow(unused_mut)]
    let mut scope_6040 = writer.prefix("IpPermissions");
    if let Some(var_6041) = &input.ip_permissions {
        let mut list_6043 = scope_6040.start_list(true, Some("item"));
        for item_6042 in var_6041 {
            #[allow(unused_mut)]
            let mut entry_6044 = list_6043.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6044, item_6042)?;
        }
        list_6043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6046) = &input.security_group_rule_descriptions {
        let mut list_6048 = scope_6045.start_list(true, Some("item"));
        for item_6047 in var_6046 {
            #[allow(unused_mut)]
            let mut entry_6049 = list_6048.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6049, item_6047,
            )?;
        }
        list_6048.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6050 = writer.prefix("DryRun");
    if let Some(var_6051) = &input.dry_run {
        scope_6050.boolean(*var_6051);
    }
    #[allow(unused_mut)]
    let mut scope_6052 = writer.prefix("GroupId");
    if let Some(var_6053) = &input.group_id {
        scope_6052.string(var_6053);
    }
    #[allow(unused_mut)]
    let mut scope_6054 = writer.prefix("GroupName");
    if let Some(var_6055) = &input.group_name {
        scope_6054.string(var_6055);
    }
    #[allow(unused_mut)]
    let mut scope_6056 = writer.prefix("IpPermissions");
    if let Some(var_6057) = &input.ip_permissions {
        let mut list_6059 = scope_6056.start_list(true, Some("item"));
        for item_6058 in var_6057 {
            #[allow(unused_mut)]
            let mut entry_6060 = list_6059.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6060, item_6058)?;
        }
        list_6059.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6061 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6062) = &input.security_group_rule_descriptions {
        let mut list_6064 = scope_6061.start_list(true, Some("item"));
        for item_6063 in var_6062 {
            #[allow(unused_mut)]
            let mut entry_6065 = list_6064.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6065, item_6063,
            )?;
        }
        list_6064.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6066 = writer.prefix("Cidr");
    if let Some(var_6067) = &input.cidr {
        scope_6066.string(var_6067);
    }
    #[allow(unused_mut)]
    let mut scope_6068 = writer.prefix("DryRun");
    if let Some(var_6069) = &input.dry_run {
        scope_6068.boolean(*var_6069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
