// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterInstanceEventNotificationAttributes`](crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`instance_tag_attribute(DeregisterInstanceTagAttributeRequest)`](crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes::instance_tag_attribute) / [`set_instance_tag_attribute(Option<DeregisterInstanceTagAttributeRequest>)`](crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes::set_instance_tag_attribute): <p>Information about the tag keys to deregister.</p>
    /// - On success, responds with [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput) with field(s):
    ///   - [`instance_tag_attribute(Option<InstanceTagNotificationAttribute>)`](crate::output::DeregisterInstanceEventNotificationAttributesOutput::instance_tag_attribute): <p>The resulting set of tag keys.</p>
    /// - On failure, responds with [`SdkError<DeregisterInstanceEventNotificationAttributesError>`](crate::error::DeregisterInstanceEventNotificationAttributesError)
    pub fn deregister_instance_event_notification_attributes(
        &self,
    ) -> crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes {
        crate::client::fluent_builders::DeregisterInstanceEventNotificationAttributes::new(
            self.handle.clone(),
        )
    }
}
