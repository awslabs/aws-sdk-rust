// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EnableImageDeprecation`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_id(impl Into<String>)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::image_id) / [`set_image_id(Option<String>)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::set_image_id): <p>The ID of the AMI.</p>
    ///   - [`deprecate_at(DateTime)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::deprecate_at) / [`set_deprecate_at(Option<DateTime>)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::set_deprecate_at): <p>The date and time to deprecate the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z. If you specify a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.</p>  <p>You canâ€™t specify a date in the past. The upper limit for <code>DeprecateAt</code> is 10 years from now, except for public AMIs, where the upper limit is 2 years from the creation date.</p>
    ///   - [`dry_run(bool)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`EnableImageDeprecationOutput`](crate::operation::enable_image_deprecation::EnableImageDeprecationOutput) with field(s):
    ///   - [`r#return(Option<bool>)`](crate::operation::enable_image_deprecation::EnableImageDeprecationOutput::return): <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    /// - On failure, responds with [`SdkError<EnableImageDeprecationError>`](crate::operation::enable_image_deprecation::EnableImageDeprecationError)
    pub fn enable_image_deprecation(
        &self,
    ) -> crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder
    {
        crate::operation::enable_image_deprecation::builders::EnableImageDeprecationFluentBuilder::new(self.handle.clone())
    }
}
