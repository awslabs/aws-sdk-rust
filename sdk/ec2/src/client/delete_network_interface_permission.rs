// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteNetworkInterfacePermission`](crate::client::fluent_builders::DeleteNetworkInterfacePermission) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_interface_permission_id(impl Into<String>)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::network_interface_permission_id) / [`set_network_interface_permission_id(Option<String>)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::set_network_interface_permission_id): <p>The ID of the network interface permission.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::set_force): <p>Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::DeleteNetworkInterfacePermission::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput) with field(s):
    ///   - [`r#return(Option<bool>)`](crate::output::DeleteNetworkInterfacePermissionOutput::return): <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
    /// - On failure, responds with [`SdkError<DeleteNetworkInterfacePermissionError>`](crate::error::DeleteNetworkInterfacePermissionError)
    pub fn delete_network_interface_permission(
        &self,
    ) -> crate::client::fluent_builders::DeleteNetworkInterfacePermission {
        crate::client::fluent_builders::DeleteNetworkInterfacePermission::new(self.handle.clone())
    }
}
