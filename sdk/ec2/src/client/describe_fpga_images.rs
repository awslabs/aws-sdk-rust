// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeFpgaImages`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`dry_run(bool)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    ///   - [`fpga_image_ids(impl Into<String>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::fpga_image_ids) / [`set_fpga_image_ids(Option<Vec::<String>>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_fpga_image_ids):<br>required: **false**<br><p>The AFI IDs.</p><br>
    ///   - [`owners(impl Into<String>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::owners) / [`set_owners(Option<Vec::<String>>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_owners):<br>required: **false**<br><p>Filters the AFI by owner. Specify an Amazon Web Services account ID, <code>self</code> (owner is the sender of the request), or an Amazon Web Services owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).</p><br>
    ///   - [`filters(Filter)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_filters):<br>required: **false**<br><p>The filters.</p>  <ul>   <li> <p> <code>create-time</code> - The creation time of the AFI.</p> </li>   <li> <p> <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p> </li>   <li> <p> <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p> </li>   <li> <p> <code>name</code> - The name of the AFI.</p> </li>   <li> <p> <code>owner-id</code> - The Amazon Web Services account ID of the AFI owner.</p> </li>   <li> <p> <code>product-code</code> - The product code.</p> </li>   <li> <p> <code>shell-version</code> - The version of the Amazon Web Services Shell that was used to create the bitstream.</p> </li>   <li> <p> <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p> </li>   <li> <p> <code>tag</code>:<key>      - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key      <code>Owner</code> and the value      <code>TeamA</code>, specify      <code>tag:Owner</code> for the filter name and      <code>TeamA</code> for the filter value.    </key></p> </li>   <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>   <li> <p> <code>update-time</code> - The time of the most recent update.</p> </li>  </ul><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to retrieve the next page of results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return in a single call.</p><br>
    /// - On success, responds with [`DescribeFpgaImagesOutput`](crate::operation::describe_fpga_images::DescribeFpgaImagesOutput) with field(s):
    ///   - [`fpga_images(Option<Vec::<FpgaImage>>)`](crate::operation::describe_fpga_images::DescribeFpgaImagesOutput::fpga_images): <p>Information about the FPGA images.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_fpga_images::DescribeFpgaImagesOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeFpgaImagesError>`](crate::operation::describe_fpga_images::DescribeFpgaImagesError)
    pub fn describe_fpga_images(&self) -> crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder {
        crate::operation::describe_fpga_images::builders::DescribeFpgaImagesFluentBuilder::new(self.handle.clone())
    }
}
