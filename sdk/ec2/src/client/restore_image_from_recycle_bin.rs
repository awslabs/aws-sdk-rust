// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RestoreImageFromRecycleBin`](crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_id(impl Into<String>)`](crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder::image_id) / [`set_image_id(Option<String>)`](crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder::set_image_id): <p>The ID of the AMI to restore.</p>
    ///   - [`dry_run(bool)`](crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`RestoreImageFromRecycleBinOutput`](crate::operation::restore_image_from_recycle_bin::RestoreImageFromRecycleBinOutput) with field(s):
    ///   - [`r#return(Option<bool>)`](crate::operation::restore_image_from_recycle_bin::RestoreImageFromRecycleBinOutput::return): <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    /// - On failure, responds with [`SdkError<RestoreImageFromRecycleBinError>`](crate::operation::restore_image_from_recycle_bin::RestoreImageFromRecycleBinError)
    pub fn restore_image_from_recycle_bin(&self) -> crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder{
        crate::operation::restore_image_from_recycle_bin::builders::RestoreImageFromRecycleBinFluentBuilder::new(self.handle.clone())
    }
}
