// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CancelBundleTask`](crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bundle_id(impl Into<String>)`](crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder::bundle_id) / [`set_bundle_id(Option<String>)`](crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder::set_bundle_id): <p>The ID of the bundle task.</p>
    ///   - [`dry_run(bool)`](crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`CancelBundleTaskOutput`](crate::operation::cancel_bundle_task::CancelBundleTaskOutput) with field(s):
    ///   - [`bundle_task(Option<BundleTask>)`](crate::operation::cancel_bundle_task::CancelBundleTaskOutput::bundle_task): <p>Information about the bundle task.</p>
    /// - On failure, responds with [`SdkError<CancelBundleTaskError>`](crate::operation::cancel_bundle_task::CancelBundleTaskError)
    pub fn cancel_bundle_task(
        &self,
    ) -> crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder {
        crate::operation::cancel_bundle_task::builders::CancelBundleTaskFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
