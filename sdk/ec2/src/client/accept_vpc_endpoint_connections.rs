// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AcceptVpcEndpointConnections`](crate::client::fluent_builders::AcceptVpcEndpointConnections) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`service_id(impl Into<String>)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::service_id) / [`set_service_id(Option<String>)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::set_service_id): <p>The ID of the VPC endpoint service.</p>
    ///   - [`vpc_endpoint_ids(Vec<String>)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::vpc_endpoint_ids) / [`set_vpc_endpoint_ids(Option<Vec<String>>)`](crate::client::fluent_builders::AcceptVpcEndpointConnections::set_vpc_endpoint_ids): <p>The IDs of the interface VPC endpoints.</p>
    /// - On success, responds with [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput) with field(s):
    ///   - [`unsuccessful(Option<Vec<UnsuccessfulItem>>)`](crate::output::AcceptVpcEndpointConnectionsOutput::unsuccessful): <p>Information about the interface endpoints that were not accepted, if applicable.</p>
    /// - On failure, responds with [`SdkError<AcceptVpcEndpointConnectionsError>`](crate::error::AcceptVpcEndpointConnectionsError)
    pub fn accept_vpc_endpoint_connections(
        &self,
    ) -> crate::client::fluent_builders::AcceptVpcEndpointConnections {
        crate::client::fluent_builders::AcceptVpcEndpointConnections::new(self.handle.clone())
    }
}
