// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCapacityManagerMetricData`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`metric_names(Metric)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::metric_names) / [`set_metric_names(Option<Vec::<Metric>>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_metric_names):<br>required: **true**<br><p>The names of the metrics to retrieve. Maximum of 10 metrics per request.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_start_time):<br>required: **true**<br><p>The start time for the metric data query, in ISO 8601 format. The time range (end time - start time) must be a multiple of the specified period.</p><br>
    ///   - [`end_time(DateTime)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_end_time):<br>required: **true**<br><p>The end time for the metric data query, in ISO 8601 format. If the end time is beyond the latest ingested data, it will be automatically adjusted to the latest available data point.</p><br>
    ///   - [`period(i32)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::period) / [`set_period(Option<i32>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_period):<br>required: **true**<br><p>The granularity, in seconds, of the returned data points.</p><br>
    ///   - [`group_by(GroupBy)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::group_by) / [`set_group_by(Option<Vec::<GroupBy>>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_group_by):<br>required: **false**<br><p>The dimensions by which to group the metric data. This determines how the data is aggregated and returned.</p><br>
    ///   - [`filter_by(CapacityManagerCondition)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::filter_by) / [`set_filter_by(Option<Vec::<CapacityManagerCondition>>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_filter_by):<br>required: **false**<br><p>Conditions to filter the metric data. Each filter specifies a dimension, comparison operator ('equals', 'in'), and values to match against.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of data points to return. Valid range is 1 to 100,000. Use with NextToken for pagination of large result sets.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next page of results. Use this value in a subsequent call to retrieve additional data points.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`GetCapacityManagerMetricDataOutput`](crate::operation::get_capacity_manager_metric_data::GetCapacityManagerMetricDataOutput) with field(s):
    ///   - [`metric_data_results(Option<Vec::<MetricDataResult>>)`](crate::operation::get_capacity_manager_metric_data::GetCapacityManagerMetricDataOutput::metric_data_results): <p>The metric data points returned by the query. Each result contains dimension values, timestamp, and metric values with their associated statistics.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_capacity_manager_metric_data::GetCapacityManagerMetricDataOutput::next_token): <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<GetCapacityManagerMetricDataError>`](crate::operation::get_capacity_manager_metric_data::GetCapacityManagerMetricDataError)
    pub fn get_capacity_manager_metric_data(
        &self,
    ) -> crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder {
        crate::operation::get_capacity_manager_metric_data::builders::GetCapacityManagerMetricDataFluentBuilder::new(self.handle.clone())
    }
}
