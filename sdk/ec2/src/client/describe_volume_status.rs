// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeVolumeStatus`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<Filter>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::set_filters): <p>The filters.</p>  <ul>   <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li>   <li> <p> <code>action.description</code> - A description of the action.</p> </li>   <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li>   <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li>   <li> <p> <code>event.description</code> - A description of the event.</p> </li>   <li> <p> <code>event.event-id</code> - The event ID.</p> </li>   <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li>   <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li>   <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li>   <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li>   <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li>   <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li>  </ul>
    ///   - [`max_results(i32)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::set_max_results): <p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::set_next_token): <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    ///   - [`volume_ids(Vec<String>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::volume_ids) / [`set_volume_ids(Option<Vec<String>>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::set_volume_ids): <p>The IDs of the volumes.</p>  <p>Default: Describes all your volumes.</p>
    ///   - [`dry_run(bool)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`DescribeVolumeStatusOutput`](crate::operation::describe_volume_status::DescribeVolumeStatusOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::describe_volume_status::DescribeVolumeStatusOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    ///   - [`volume_statuses(Option<Vec<VolumeStatusItem>>)`](crate::operation::describe_volume_status::DescribeVolumeStatusOutput::volume_statuses): <p>Information about the status of the volumes.</p>
    /// - On failure, responds with [`SdkError<DescribeVolumeStatusError>`](crate::operation::describe_volume_status::DescribeVolumeStatusError)
    pub fn describe_volume_status(
        &self,
    ) -> crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder {
        crate::operation::describe_volume_status::builders::DescribeVolumeStatusFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
