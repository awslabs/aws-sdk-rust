// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ReplaceRouteTableAssociation`](crate::client::fluent_builders::ReplaceRouteTableAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`association_id(impl Into<String>)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::association_id) / [`set_association_id(Option<String>)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::set_association_id): <p>The association ID.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`route_table_id(impl Into<String>)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::route_table_id) / [`set_route_table_id(Option<String>)`](crate::client::fluent_builders::ReplaceRouteTableAssociation::set_route_table_id): <p>The ID of the new route table to associate with the subnet.</p>
    /// - On success, responds with [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput) with field(s):
    ///   - [`new_association_id(Option<String>)`](crate::output::ReplaceRouteTableAssociationOutput::new_association_id): <p>The ID of the new association.</p>
    ///   - [`association_state(Option<RouteTableAssociationState>)`](crate::output::ReplaceRouteTableAssociationOutput::association_state): <p>The state of the association.</p>
    /// - On failure, responds with [`SdkError<ReplaceRouteTableAssociationError>`](crate::error::ReplaceRouteTableAssociationError)
    pub fn replace_route_table_association(
        &self,
    ) -> crate::client::fluent_builders::ReplaceRouteTableAssociation {
        crate::client::fluent_builders::ReplaceRouteTableAssociation::new(self.handle.clone())
    }
}
