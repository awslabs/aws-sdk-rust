// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetachVolume`](crate::client::fluent_builders::DetachVolume) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device(impl Into<String>)`](crate::client::fluent_builders::DetachVolume::device) / [`set_device(Option<String>)`](crate::client::fluent_builders::DetachVolume::set_device): <p>The device name.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::DetachVolume::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::DetachVolume::set_force): <p>Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::client::fluent_builders::DetachVolume::instance_id) / [`set_instance_id(Option<String>)`](crate::client::fluent_builders::DetachVolume::set_instance_id): <p>The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.</p>
    ///   - [`volume_id(impl Into<String>)`](crate::client::fluent_builders::DetachVolume::volume_id) / [`set_volume_id(Option<String>)`](crate::client::fluent_builders::DetachVolume::set_volume_id): <p>The ID of the volume.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DetachVolume::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::DetachVolume::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`DetachVolumeOutput`](crate::output::DetachVolumeOutput) with field(s):
    ///   - [`attach_time(Option<DateTime>)`](crate::output::DetachVolumeOutput::attach_time): <p>The time stamp when the attachment initiated.</p>
    ///   - [`device(Option<String>)`](crate::output::DetachVolumeOutput::device): <p>The device name.</p>
    ///   - [`instance_id(Option<String>)`](crate::output::DetachVolumeOutput::instance_id): <p>The ID of the instance.</p>
    ///   - [`state(Option<VolumeAttachmentState>)`](crate::output::DetachVolumeOutput::state): <p>The attachment state of the volume.</p>
    ///   - [`volume_id(Option<String>)`](crate::output::DetachVolumeOutput::volume_id): <p>The ID of the volume.</p>
    ///   - [`delete_on_termination(Option<bool>)`](crate::output::DetachVolumeOutput::delete_on_termination): <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    /// - On failure, responds with [`SdkError<DetachVolumeError>`](crate::error::DetachVolumeError)
    pub fn detach_volume(&self) -> crate::client::fluent_builders::DetachVolume {
        crate::client::fluent_builders::DetachVolume::new(self.handle.clone())
    }
}
