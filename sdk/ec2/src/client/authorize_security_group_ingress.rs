// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AuthorizeSecurityGroupIngress`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cidr_ip(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::cidr_ip) / [`set_cidr_ip(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_cidr_ip): <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions.</p>  <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    ///   - [`from_port(i32)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::from_port) / [`set_from_port(Option<i32>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_from_port): <p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP, this is the type number. A value of -1 indicates all ICMP types. If you specify all ICMP types, you must specify all ICMP codes.</p>  <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    ///   - [`group_id(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::group_id) / [`set_group_id(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_group_id): <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    ///   - [`group_name(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::group_name) / [`set_group_name(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_group_name): <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    ///   - [`ip_permissions(Vec<IpPermission>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::ip_permissions) / [`set_ip_permissions(Option<Vec<IpPermission>>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_ip_permissions): <p>The sets of IP permissions.</p>
    ///   - [`ip_protocol(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::ip_protocol) / [`set_ip_protocol(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_ip_protocol): <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p>  <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed, regardless of any ports you specify.</p>  <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    ///   - [`source_security_group_name(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::source_security_group_name) / [`set_source_security_group_name(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_source_security_group_name): <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.</p>
    ///   - [`source_security_group_owner_id(impl Into<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::source_security_group_owner_id) / [`set_source_security_group_owner_id(Option<String>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_source_security_group_owner_id): <p>[nondefault VPC] The Amazon Web Services account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.</p>
    ///   - [`to_port(i32)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::to_port) / [`set_to_port(Option<i32>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_to_port): <p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP, this is the code. A value of -1 indicates all ICMP codes. If you specify all ICMP types, you must specify all ICMP codes.</p>  <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    ///   - [`dry_run(bool)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`tag_specifications(Vec<TagSpecification>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::tag_specifications) / [`set_tag_specifications(Option<Vec<TagSpecification>>)`](crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::set_tag_specifications): <p>[VPC Only] The tags applied to the security group rule.</p>
    /// - On success, responds with [`AuthorizeSecurityGroupIngressOutput`](crate::operation::authorize_security_group_ingress::AuthorizeSecurityGroupIngressOutput) with field(s):
    ///   - [`r#return(Option<bool>)`](crate::operation::authorize_security_group_ingress::AuthorizeSecurityGroupIngressOutput::return): <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    ///   - [`security_group_rules(Option<Vec<SecurityGroupRule>>)`](crate::operation::authorize_security_group_ingress::AuthorizeSecurityGroupIngressOutput::security_group_rules): <p>Information about the inbound (ingress) security group rules that were added.</p>
    /// - On failure, responds with [`SdkError<AuthorizeSecurityGroupIngressError>`](crate::operation::authorize_security_group_ingress::AuthorizeSecurityGroupIngressError)
    pub fn authorize_security_group_ingress(&self) -> crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder{
        crate::operation::authorize_security_group_ingress::builders::AuthorizeSecurityGroupIngressFluentBuilder::new(self.handle.clone())
    }
}
