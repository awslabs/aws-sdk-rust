// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ResetImageAttribute`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attribute(ResetImageAttributeName)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::attribute) / [`set_attribute(Option<ResetImageAttributeName>)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::set_attribute): <p>The attribute to reset (currently you can only reset the launch permission attribute).</p>
    ///   - [`image_id(impl Into<String>)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::image_id) / [`set_image_id(Option<String>)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::set_image_id): <p>The ID of the AMI.</p>
    ///   - [`dry_run(bool)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`ResetImageAttributeOutput`](crate::operation::reset_image_attribute::ResetImageAttributeOutput)
    /// - On failure, responds with [`SdkError<ResetImageAttributeError>`](crate::operation::reset_image_attribute::ResetImageAttributeError)
    pub fn reset_image_attribute(
        &self,
    ) -> crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder {
        crate::operation::reset_image_attribute::builders::ResetImageAttributeFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
