// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeStoreImageTasks`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_ids(Vec<String>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::image_ids) / [`set_image_ids(Option<Vec<String>>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::set_image_ids): <p>The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.</p>
    ///   - [`dry_run(bool)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::set_filters): <p>The filters.</p>  <ul>   <li> <p> <code>task-state</code> - Returns tasks in a certain state (<code>InProgress</code> | <code>Completed</code> | <code>Failed</code>)</p> </li>   <li> <p> <code>bucket</code> - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.</p> </li>  </ul>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::set_next_token): <p>The token for the next page of results.</p>
    ///   - [`max_results(i32)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::set_max_results): <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200. You cannot specify this parameter and the <code>ImageIDs</code> parameter in the same call.</p>
    /// - On success, responds with [`DescribeStoreImageTasksOutput`](crate::operation::describe_store_image_tasks::DescribeStoreImageTasksOutput) with field(s):
    ///   - [`store_image_task_results(Option<Vec<StoreImageTaskResult>>)`](crate::operation::describe_store_image_tasks::DescribeStoreImageTasksOutput::store_image_task_results): <p>The information about the AMI store tasks.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_store_image_tasks::DescribeStoreImageTasksOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeStoreImageTasksError>`](crate::operation::describe_store_image_tasks::DescribeStoreImageTasksError)
    pub fn describe_store_image_tasks(
        &self,
    ) -> crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder
    {
        crate::operation::describe_store_image_tasks::builders::DescribeStoreImageTasksFluentBuilder::new(self.handle.clone())
    }
}
