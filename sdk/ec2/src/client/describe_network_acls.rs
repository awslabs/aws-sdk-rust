// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeNetworkAcls`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Filter)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::set_filters):<br>required: **false**<br><p>The filters.</p>  <ul>   <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>   <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>   <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>   <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>   <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>   <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>   <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>   <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>   <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>   <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>   <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>   <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>   <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>   <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>   <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>   <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>   <li> <p> <code>tag</code>:<key>      - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key      <code>Owner</code> and the value      <code>TeamA</code>, specify      <code>tag:Owner</code> for the filter name and      <code>TeamA</code> for the filter value.    </key></p> </li>   <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>   <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>  </ul><br>
    ///   - [`dry_run(bool)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    ///   - [`network_acl_ids(impl Into<String>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::network_acl_ids) / [`set_network_acl_ids(Option<Vec::<String>>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::set_network_acl_ids):<br>required: **false**<br><p>The IDs of the network ACLs.</p>  <p>Default: Describes all your network ACLs.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p><br>
    ///   - [`max_results(i32)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p><br>
    /// - On success, responds with [`DescribeNetworkAclsOutput`](crate::operation::describe_network_acls::DescribeNetworkAclsOutput) with field(s):
    ///   - [`network_acls(Option<Vec::<NetworkAcl>>)`](crate::operation::describe_network_acls::DescribeNetworkAclsOutput::network_acls): <p>Information about one or more network ACLs.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_network_acls::DescribeNetworkAclsOutput::next_token): <p>The token to include in another request to get the next page of items. This value is <code>null</code> when there are no more items to return.</p>
    /// - On failure, responds with [`SdkError<DescribeNetworkAclsError>`](crate::operation::describe_network_acls::DescribeNetworkAclsError)
    pub fn describe_network_acls(&self) -> crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder {
        crate::operation::describe_network_acls::builders::DescribeNetworkAclsFluentBuilder::new(self.handle.clone())
    }
}
