// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTrafficMirrorFilterRule`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`traffic_mirror_filter_id(impl Into<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::traffic_mirror_filter_id) / [`set_traffic_mirror_filter_id(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_traffic_mirror_filter_id):<br>required: **true**<br><p>The ID of the filter that this rule is associated with.</p><br>
    ///   - [`traffic_direction(TrafficDirection)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::traffic_direction) / [`set_traffic_direction(Option<TrafficDirection>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_traffic_direction):<br>required: **true**<br><p>The type of traffic.</p><br>
    ///   - [`rule_number(i32)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::rule_number) / [`set_rule_number(Option<i32>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_rule_number):<br>required: **true**<br><p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.</p><br>
    ///   - [`rule_action(TrafficMirrorRuleAction)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::rule_action) / [`set_rule_action(Option<TrafficMirrorRuleAction>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_rule_action):<br>required: **true**<br><p>The action to take on the filtered traffic.</p><br>
    ///   - [`destination_port_range(TrafficMirrorPortRangeRequest)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::destination_port_range) / [`set_destination_port_range(Option<TrafficMirrorPortRangeRequest>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_destination_port_range):<br>required: **false**<br><p>The destination port range.</p><br>
    ///   - [`source_port_range(TrafficMirrorPortRangeRequest)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::source_port_range) / [`set_source_port_range(Option<TrafficMirrorPortRangeRequest>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_source_port_range):<br>required: **false**<br><p>The source port range.</p><br>
    ///   - [`protocol(i32)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::protocol) / [`set_protocol(Option<i32>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_protocol):<br>required: **false**<br><p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p>  <p>For information about the protocol value, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p><br>
    ///   - [`destination_cidr_block(impl Into<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::destination_cidr_block) / [`set_destination_cidr_block(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_destination_cidr_block):<br>required: **true**<br><p>The destination CIDR block to assign to the Traffic Mirror rule.</p><br>
    ///   - [`source_cidr_block(impl Into<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::source_cidr_block) / [`set_source_cidr_block(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_source_cidr_block):<br>required: **true**<br><p>The source CIDR block to assign to the Traffic Mirror rule.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_description):<br>required: **false**<br><p>The description of the Traffic Mirror rule.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::set_client_token):<br>required: **false**<br><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p><br>
    /// - On success, responds with [`CreateTrafficMirrorFilterRuleOutput`](crate::operation::create_traffic_mirror_filter_rule::CreateTrafficMirrorFilterRuleOutput) with field(s):
    ///   - [`traffic_mirror_filter_rule(Option<TrafficMirrorFilterRule>)`](crate::operation::create_traffic_mirror_filter_rule::CreateTrafficMirrorFilterRuleOutput::traffic_mirror_filter_rule): <p>The Traffic Mirror rule.</p>
    ///   - [`client_token(Option<String>)`](crate::operation::create_traffic_mirror_filter_rule::CreateTrafficMirrorFilterRuleOutput::client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    /// - On failure, responds with [`SdkError<CreateTrafficMirrorFilterRuleError>`](crate::operation::create_traffic_mirror_filter_rule::CreateTrafficMirrorFilterRuleError)
    pub fn create_traffic_mirror_filter_rule(
        &self,
    ) -> crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder {
        crate::operation::create_traffic_mirror_filter_rule::builders::CreateTrafficMirrorFilterRuleFluentBuilder::new(self.handle.clone())
    }
}
