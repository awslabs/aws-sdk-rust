// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SearchTransitGatewayRoutes`](crate::client::fluent_builders::SearchTransitGatewayRoutes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transit_gateway_route_table_id(impl Into<String>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::transit_gateway_route_table_id) / [`set_transit_gateway_route_table_id(Option<String>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::set_transit_gateway_route_table_id): <p>The ID of the transit gateway route table.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::set_filters): <p>One or more filters. The possible values are:</p>  <ul>   <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li>   <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li>   <li> <p> <code>attachment.resource-type</code> - The attachment resource type. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code> | <code>connect</code>.</p> </li>   <li> <p> <code>prefix-list-id</code> - The ID of the prefix list.</p> </li>   <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li>   <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li>   <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li>   <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li>   <li> <p> <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p> </li>   <li> <p> <code>type</code> - The type of route (<code>propagated</code> | <code>static</code>).</p> </li>  </ul>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::set_max_results): <p>The maximum number of routes to return.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::SearchTransitGatewayRoutes::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput) with field(s):
    ///   - [`routes(Option<Vec<TransitGatewayRoute>>)`](crate::output::SearchTransitGatewayRoutesOutput::routes): <p>Information about the routes.</p>
    ///   - [`additional_routes_available(Option<bool>)`](crate::output::SearchTransitGatewayRoutesOutput::additional_routes_available): <p>Indicates whether there are additional routes available.</p>
    /// - On failure, responds with [`SdkError<SearchTransitGatewayRoutesError>`](crate::error::SearchTransitGatewayRoutesError)
    pub fn search_transit_gateway_routes(
        &self,
    ) -> crate::client::fluent_builders::SearchTransitGatewayRoutes {
        crate::client::fluent_builders::SearchTransitGatewayRoutes::new(self.handle.clone())
    }
}
