// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TerminateInstances`](crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_ids(Vec<String>)`](crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder::instance_ids) / [`set_instance_ids(Option<Vec<String>>)`](crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder::set_instance_ids): <p>The IDs of the instances.</p>  <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
    ///   - [`dry_run(bool)`](crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`TerminateInstancesOutput`](crate::operation::terminate_instances::TerminateInstancesOutput) with field(s):
    ///   - [`terminating_instances(Option<Vec<InstanceStateChange>>)`](crate::operation::terminate_instances::TerminateInstancesOutput::terminating_instances): <p>Information about the terminated instances.</p>
    /// - On failure, responds with [`SdkError<TerminateInstancesError>`](crate::operation::terminate_instances::TerminateInstancesError)
    pub fn terminate_instances(
        &self,
    ) -> crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder {
        crate::operation::terminate_instances::builders::TerminateInstancesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
