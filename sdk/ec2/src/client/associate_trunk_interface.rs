// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateTrunkInterface`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`branch_interface_id(impl Into<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::branch_interface_id) / [`set_branch_interface_id(Option<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_branch_interface_id): <p>The ID of the branch network interface.</p>
    ///   - [`trunk_interface_id(impl Into<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::trunk_interface_id) / [`set_trunk_interface_id(Option<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_trunk_interface_id): <p>The ID of the trunk network interface.</p>
    ///   - [`vlan_id(i32)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::vlan_id) / [`set_vlan_id(Option<i32>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_vlan_id): <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    ///   - [`gre_key(i32)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::gre_key) / [`set_gre_key(Option<i32>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_gre_key): <p>The application key. This applies to the GRE protocol.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    ///   - [`dry_run(bool)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`AssociateTrunkInterfaceOutput`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceOutput) with field(s):
    ///   - [`interface_association(Option<TrunkInterfaceAssociation>)`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceOutput::interface_association): <p>Information about the association between the trunk network interface and branch network interface.</p>
    ///   - [`client_token(Option<String>)`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceOutput::client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    /// - On failure, responds with [`SdkError<AssociateTrunkInterfaceError>`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceError)
    pub fn associate_trunk_interface(
        &self,
    ) -> crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder
    {
        crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceFluentBuilder::new(self.handle.clone())
    }
}
