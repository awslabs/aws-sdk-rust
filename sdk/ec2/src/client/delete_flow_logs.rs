// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteFlowLogs`](crate::client::fluent_builders::DeleteFlowLogs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DeleteFlowLogs::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::DeleteFlowLogs::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    ///   - [`flow_log_ids(Vec<String>)`](crate::client::fluent_builders::DeleteFlowLogs::flow_log_ids) / [`set_flow_log_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DeleteFlowLogs::set_flow_log_ids): <p>One or more flow log IDs.</p>  <p>Constraint: Maximum of 1000 flow log IDs.</p>
    /// - On success, responds with [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput) with field(s):
    ///   - [`unsuccessful(Option<Vec<UnsuccessfulItem>>)`](crate::output::DeleteFlowLogsOutput::unsuccessful): <p>Information about the flow logs that could not be deleted successfully.</p>
    /// - On failure, responds with [`SdkError<DeleteFlowLogsError>`](crate::error::DeleteFlowLogsError)
    pub fn delete_flow_logs(&self) -> crate::client::fluent_builders::DeleteFlowLogs {
        crate::client::fluent_builders::DeleteFlowLogs::new(self.handle.clone())
    }
}
