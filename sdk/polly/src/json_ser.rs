// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_put_lexicon_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLexiconInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.content {
        object.key("Content").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_speech_synthesis_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSpeechSynthesisTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.engine {
        object.key("Engine").string(var_2.as_str());
    }
    if let Some(var_3) = &input.language_code {
        object.key("LanguageCode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.lexicon_names {
        let mut array_5 = object.key("LexiconNames").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.output_format {
        object.key("OutputFormat").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sample_rate {
        object.key("SampleRate").string(var_10.as_str());
    }
    if let Some(var_11) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.speech_mark_types {
        let mut array_13 = object.key("SpeechMarkTypes").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.text {
        object.key("Text").string(var_15.as_str());
    }
    if let Some(var_16) = &input.text_type {
        object.key("TextType").string(var_16.as_str());
    }
    if let Some(var_17) = &input.voice_id {
        object.key("VoiceId").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_synthesize_speech_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SynthesizeSpeechInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.engine {
        object.key("Engine").string(var_18.as_str());
    }
    if let Some(var_19) = &input.language_code {
        object.key("LanguageCode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.lexicon_names {
        let mut array_21 = object.key("LexiconNames").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.output_format {
        object.key("OutputFormat").string(var_23.as_str());
    }
    if let Some(var_24) = &input.sample_rate {
        object.key("SampleRate").string(var_24.as_str());
    }
    if let Some(var_25) = &input.speech_mark_types {
        let mut array_26 = object.key("SpeechMarkTypes").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.text {
        object.key("Text").string(var_28.as_str());
    }
    if let Some(var_29) = &input.text_type {
        object.key("TextType").string(var_29.as_str());
    }
    if let Some(var_30) = &input.voice_id {
        object.key("VoiceId").string(var_30.as_str());
    }
    Ok(())
}
