// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_speech_synthesis_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_speech_synthesis_task::StartSpeechSynthesisTaskInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.engine {
        object.key("Engine").string(var_1.as_str());
    }
    if let Some(var_2) = &input.language_code {
        object.key("LanguageCode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.lexicon_names {
        let mut array_4 = object.key("LexiconNames").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.output_format {
        object.key("OutputFormat").string(var_6.as_str());
    }
    if let Some(var_7) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_8.as_str());
    }
    if let Some(var_9) = &input.sample_rate {
        object.key("SampleRate").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.speech_mark_types {
        let mut array_12 = object.key("SpeechMarkTypes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.text {
        object.key("Text").string(var_14.as_str());
    }
    if let Some(var_15) = &input.text_type {
        object.key("TextType").string(var_15.as_str());
    }
    if let Some(var_16) = &input.voice_id {
        object.key("VoiceId").string(var_16.as_str());
    }
    Ok(())
}
