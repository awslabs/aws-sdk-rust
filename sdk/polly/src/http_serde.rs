// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_payload_synthesize_speech_audio_stream(
    body: &mut smithy_http::body::SdkBody,
) -> Result<smithy_http::byte_stream::ByteStream, crate::error::SynthesizeSpeechError> {
    // replace the body with an empty body
    let body = std::mem::replace(body, smithy_http::body::SdkBody::taken());
    Ok(smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_synthesize_speech_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_1: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_synthesize_speech_request_characters(
    header_map: &http::HeaderMap,
) -> Result<i32, smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-RequestCharacters").iter();
    let var_2: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        return Err(smithy_http::header::ParseError);
    }
    let mut var_2 = var_2;
    match var_2.pop() {
        None => Ok(Default::default()),
        Some(item) => Ok(item),
    }
}
