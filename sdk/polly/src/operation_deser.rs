// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_lexicon_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteLexiconOutput, crate::error::DeleteLexiconError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteLexiconError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteLexiconError::unhandled(generic)),
    };
    Err(match error_code {
        "LexiconNotFoundException" => crate::error::DeleteLexiconError {
            meta: generic,
            kind: crate::error::DeleteLexiconErrorKind::LexiconNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::lexicon_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::lexicon_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteLexiconError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::DeleteLexiconError {
            meta: generic,
            kind: crate::error::DeleteLexiconErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteLexiconError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteLexiconError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_lexicon_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteLexiconOutput, crate::error::DeleteLexiconError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_lexicon_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_voices_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeVoicesOutput, crate::error::DescribeVoicesError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeVoicesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeVoicesError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidNextTokenException" => crate::error::DescribeVoicesError {
            meta: generic,
            kind: crate::error::DescribeVoicesErrorKind::InvalidNextTokenError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_next_token_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_next_token_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeVoicesError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::DescribeVoicesError {
            meta: generic,
            kind: crate::error::DescribeVoicesErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DescribeVoicesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeVoicesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_voices_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeVoicesOutput, crate::error::DescribeVoicesError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_voices_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_voices_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeVoicesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_lexicon_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetLexiconOutput, crate::error::GetLexiconError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetLexiconError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetLexiconError::unhandled(generic)),
    };
    Err(match error_code {
        "LexiconNotFoundException" => crate::error::GetLexiconError {
            meta: generic,
            kind: crate::error::GetLexiconErrorKind::LexiconNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::lexicon_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::lexicon_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetLexiconError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::GetLexiconError {
            meta: generic,
            kind: crate::error::GetLexiconErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetLexiconError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetLexiconError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_lexicon_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetLexiconOutput, crate::error::GetLexiconError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_lexicon_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_lexicon_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::GetLexiconError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_speech_synthesis_task_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetSpeechSynthesisTaskOutput, crate::error::GetSpeechSynthesisTaskError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetSpeechSynthesisTaskError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidTaskIdException" => crate::error::GetSpeechSynthesisTaskError {
            meta: generic,
            kind: crate::error::GetSpeechSynthesisTaskErrorKind::InvalidTaskIdError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_task_id_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::invalid_task_id_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::GetSpeechSynthesisTaskError {
            meta: generic,
            kind: crate::error::GetSpeechSynthesisTaskErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?;
                output.build()
            }),
        },
        "SynthesisTaskNotFoundException" => crate::error::GetSpeechSynthesisTaskError {
            meta: generic,
            kind: crate::error::GetSpeechSynthesisTaskErrorKind::SynthesisTaskNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::synthesis_task_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::synthesis_task_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetSpeechSynthesisTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_speech_synthesis_task_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetSpeechSynthesisTaskOutput, crate::error::GetSpeechSynthesisTaskError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_speech_synthesis_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_speech_synthesis_task_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_lexicons_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListLexiconsOutput, crate::error::ListLexiconsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListLexiconsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListLexiconsError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidNextTokenException" => crate::error::ListLexiconsError {
            meta: generic,
            kind: crate::error::ListLexiconsErrorKind::InvalidNextTokenError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_next_token_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_next_token_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListLexiconsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::ListLexiconsError {
            meta: generic,
            kind: crate::error::ListLexiconsErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListLexiconsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListLexiconsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_lexicons_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListLexiconsOutput, crate::error::ListLexiconsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_lexicons_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_lexicons_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ListLexiconsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_speech_synthesis_tasks_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListSpeechSynthesisTasksOutput,
    crate::error::ListSpeechSynthesisTasksError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListSpeechSynthesisTasksError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidNextTokenException" => crate::error::ListSpeechSynthesisTasksError {
            meta: generic,
            kind: crate::error::ListSpeechSynthesisTasksErrorKind::InvalidNextTokenError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_next_token_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_next_token_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::ListSpeechSynthesisTasksError {
            meta: generic,
            kind: crate::error::ListSpeechSynthesisTasksErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListSpeechSynthesisTasksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_speech_synthesis_tasks_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListSpeechSynthesisTasksOutput,
    crate::error::ListSpeechSynthesisTasksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_speech_synthesis_tasks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_speech_synthesis_tasks_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_lexicon_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PutLexiconOutput, crate::error::PutLexiconError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::PutLexiconError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutLexiconError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidLexiconException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::InvalidLexiconError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_lexicon_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::invalid_lexicon_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "LexiconSizeExceededException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::LexiconSizeExceededError({
                #[allow(unused_mut)]
                let mut output = crate::error::lexicon_size_exceeded_error::Builder::default();
                let _ = response;
                output = crate::json_deser::lexicon_size_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "MaxLexemeLengthExceededException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::MaxLexemeLengthExceededError({
                #[allow(unused_mut)]
                let mut output = crate::error::max_lexeme_length_exceeded_error::Builder::default();
                let _ = response;
                output = crate::json_deser::max_lexeme_length_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "MaxLexiconsNumberExceededException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::MaxLexiconsNumberExceededError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::max_lexicons_number_exceeded_error::Builder::default();
                let _ = response;
                output = crate::json_deser::max_lexicons_number_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "UnsupportedPlsAlphabetException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::UnsupportedPlsAlphabetError({
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_pls_alphabet_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unsupported_pls_alphabet_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        "UnsupportedPlsLanguageException" => crate::error::PutLexiconError {
            meta: generic,
            kind: crate::error::PutLexiconErrorKind::UnsupportedPlsLanguageError({
                #[allow(unused_mut)]
                let mut output = crate::error::unsupported_pls_language_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unsupported_pls_language_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PutLexiconError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::PutLexiconError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_lexicon_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PutLexiconOutput, crate::error::PutLexiconError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_lexicon_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_speech_synthesis_task_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::StartSpeechSynthesisTaskOutput,
    crate::error::StartSpeechSynthesisTaskError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartSpeechSynthesisTaskError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "EngineNotSupportedException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::EngineNotSupportedError({
            #[allow(unused_mut)]let mut output = crate::error::engine_not_supported_error::Builder::default();
            let _ = response;
            output = crate::json_deser::engine_not_supported_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "InvalidS3BucketException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidS3BucketError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_s3_bucket_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_s3_bucket_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "InvalidS3KeyException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidS3KeyError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_s3_key_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_s3_key_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "InvalidSampleRateException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSampleRateError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_sample_rate_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_sample_rate_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "InvalidSnsTopicArnException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSnsTopicArnError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_sns_topic_arn_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_sns_topic_arn_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "InvalidSsmlException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSsmlError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_ssml_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_ssml_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "LanguageNotSupportedException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::LanguageNotSupportedError({
            #[allow(unused_mut)]let mut output = crate::error::language_not_supported_error::Builder::default();
            let _ = response;
            output = crate::json_deser::language_not_supported_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "LexiconNotFoundException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::LexiconNotFoundError({
            #[allow(unused_mut)]let mut output = crate::error::lexicon_not_found_error::Builder::default();
            let _ = response;
            output = crate::json_deser::lexicon_not_found_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "MarksNotSupportedForFormatException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::MarksNotSupportedForFormatError({
            #[allow(unused_mut)]let mut output = crate::error::marks_not_supported_for_format_error::Builder::default();
            let _ = response;
            output = crate::json_deser::marks_not_supported_for_format_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "ServiceFailureException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::ServiceFailureError({
            #[allow(unused_mut)]let mut output = crate::error::service_failure_error::Builder::default();
            let _ = response;
            output = crate::json_deser::service_failure_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "SsmlMarksNotSupportedForTextTypeException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::SsmlMarksNotSupportedForTextTypeError({
            #[allow(unused_mut)]let mut output = crate::error::ssml_marks_not_supported_for_text_type_error::Builder::default();
            let _ = response;
            output = crate::json_deser::ssml_marks_not_supported_for_text_type_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        "TextLengthExceededException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::TextLengthExceededError({
            #[allow(unused_mut)]let mut output = crate::error::text_length_exceeded_error::Builder::default();
            let _ = response;
            output = crate::json_deser::text_length_exceeded_exception(response.body().as_ref(), output).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
            output.build()
        })},
        _ => crate::error::StartSpeechSynthesisTaskError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_speech_synthesis_task_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::StartSpeechSynthesisTaskOutput,
    crate::error::StartSpeechSynthesisTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_speech_synthesis_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::start_speech_synthesis_task_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_synthesize_speech(
    response: &mut http::Response<smithy_http::body::SdkBody>,
) -> Result<crate::output::SynthesizeSpeechOutput, crate::error::SynthesizeSpeechError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::synthesize_speech_output::Builder::default();
        let _ = response;
        output = output.set_audio_stream(
            crate::http_serde::deser_payload_synthesize_speech_audio_stream(response.body_mut())?,
        );
        output = output.set_content_type(
            crate::http_serde::deser_header_synthesize_speech_content_type(response.headers())
                .map_err(|_| {
                    crate::error::SynthesizeSpeechError::unhandled(
                        "Failed to parse ContentType from header `Content-Type",
                    )
                })?,
        );
        output = output.set_request_characters(
            crate::http_serde::deser_header_synthesize_speech_request_characters(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::SynthesizeSpeechError::unhandled(
                    "Failed to parse RequestCharacters from header `x-amzn-RequestCharacters",
                )
            })?,
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_synthesize_speech_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SynthesizeSpeechOutput, crate::error::SynthesizeSpeechError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SynthesizeSpeechError::unhandled(generic)),
    };
    Err(match error_code {
        "EngineNotSupportedException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::EngineNotSupportedError({
                #[allow(unused_mut)]
                let mut output = crate::error::engine_not_supported_error::Builder::default();
                let _ = response;
                output = crate::json_deser::engine_not_supported_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSampleRateException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::InvalidSampleRateError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_sample_rate_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_sample_rate_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSsmlException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::InvalidSsmlError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_ssml_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::invalid_ssml_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "LanguageNotSupportedException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::LanguageNotSupportedError({
                #[allow(unused_mut)]
                let mut output = crate::error::language_not_supported_error::Builder::default();
                let _ = response;
                output = crate::json_deser::language_not_supported_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "LexiconNotFoundException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::LexiconNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::lexicon_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::lexicon_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "MarksNotSupportedForFormatException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::MarksNotSupportedForFormatError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::marks_not_supported_for_format_error::Builder::default();
                let _ = response;
                output = crate::json_deser::marks_not_supported_for_format_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "ServiceFailureException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::ServiceFailureError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_failure_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::service_failure_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        "SsmlMarksNotSupportedForTextTypeException" => {
            crate::error::SynthesizeSpeechError {
                meta: generic,
                kind:
                    crate::error::SynthesizeSpeechErrorKind::SsmlMarksNotSupportedForTextTypeError(
                        {
                            #[allow(unused_mut)]let mut output = crate::error::ssml_marks_not_supported_for_text_type_error::Builder::default();
                            let _ = response;
                            output = crate::json_deser::ssml_marks_not_supported_for_text_type_exception(response.body().as_ref(), output).map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                            output.build()
                        },
                    ),
            }
        }
        "TextLengthExceededException" => crate::error::SynthesizeSpeechError {
            meta: generic,
            kind: crate::error::SynthesizeSpeechErrorKind::TextLengthExceededError({
                #[allow(unused_mut)]
                let mut output = crate::error::text_length_exceeded_error::Builder::default();
                let _ = response;
                output = crate::json_deser::text_length_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SynthesizeSpeechError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SynthesizeSpeechError::generic(generic),
    })
}
