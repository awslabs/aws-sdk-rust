// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_job_run_output_correct_errors(
    mut builder: crate::operation::cancel_job_run::builders::CancelJobRunOutputBuilder,
) -> crate::operation::cancel_job_run::builders::CancelJobRunOutputBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.job_run_id.is_none() {
        builder.job_run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_application_output_correct_errors(
    mut builder: crate::operation::create_application::builders::CreateApplicationOutputBuilder,
) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_output_correct_errors(
    mut builder: crate::operation::get_application::builders::GetApplicationOutputBuilder,
) -> crate::operation::get_application::builders::GetApplicationOutputBuilder {
    if builder.application.is_none() {
        builder.application = {
            let builder = crate::types::builders::ApplicationBuilder::default();
            crate::serde_util::application_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_job_run_output_correct_errors(
    mut builder: crate::operation::get_job_run::builders::GetJobRunOutputBuilder,
) -> crate::operation::get_job_run::builders::GetJobRunOutputBuilder {
    if builder.job_run.is_none() {
        builder.job_run = {
            let builder = crate::types::builders::JobRunBuilder::default();
            crate::serde_util::job_run_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_applications_output_correct_errors(
    mut builder: crate::operation::list_applications::builders::ListApplicationsOutputBuilder,
) -> crate::operation::list_applications::builders::ListApplicationsOutputBuilder {
    if builder.applications.is_none() {
        builder.applications = Some(Default::default())
    }
    builder
}

pub(crate) fn list_job_runs_output_correct_errors(
    mut builder: crate::operation::list_job_runs::builders::ListJobRunsOutputBuilder,
) -> crate::operation::list_job_runs::builders::ListJobRunsOutputBuilder {
    if builder.job_runs.is_none() {
        builder.job_runs = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn start_job_run_output_correct_errors(
    mut builder: crate::operation::start_job_run::builders::StartJobRunOutputBuilder,
) -> crate::operation::start_job_run::builders::StartJobRunOutputBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.job_run_id.is_none() {
        builder.job_run_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_application_output_correct_errors(
    mut builder: crate::operation::update_application::builders::UpdateApplicationOutputBuilder,
) -> crate::operation::update_application::builders::UpdateApplicationOutputBuilder {
    if builder.application.is_none() {
        builder.application = {
            let builder = crate::types::builders::ApplicationBuilder::default();
            crate::serde_util::application_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn application_correct_errors(mut builder: crate::types::builders::ApplicationBuilder) -> crate::types::builders::ApplicationBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.release_label.is_none() {
        builder.release_label = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ApplicationState>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn job_run_correct_errors(mut builder: crate::types::builders::JobRunBuilder) -> crate::types::builders::JobRunBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.job_run_id.is_none() {
        builder.job_run_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.execution_role.is_none() {
        builder.execution_role = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::JobRunState>().ok()
    }
    if builder.state_details.is_none() {
        builder.state_details = Some(Default::default())
    }
    if builder.release_label.is_none() {
        builder.release_label = Some(Default::default())
    }
    if builder.job_driver.is_none() {
        builder.job_driver = Some(crate::types::JobDriver::Unknown)
    }
    builder
}

pub(crate) fn application_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationSummaryBuilder,
) -> crate::types::builders::ApplicationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.release_label.is_none() {
        builder.release_label = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ApplicationState>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn image_configuration_correct_errors(
    mut builder: crate::types::builders::ImageConfigurationBuilder,
) -> crate::types::builders::ImageConfigurationBuilder {
    if builder.image_uri.is_none() {
        builder.image_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn job_run_summary_correct_errors(
    mut builder: crate::types::builders::JobRunSummaryBuilder,
) -> crate::types::builders::JobRunSummaryBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.execution_role.is_none() {
        builder.execution_role = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::JobRunState>().ok()
    }
    if builder.state_details.is_none() {
        builder.state_details = Some(Default::default())
    }
    if builder.release_label.is_none() {
        builder.release_label = Some(Default::default())
    }
    builder
}

pub(crate) fn maximum_allowed_resources_correct_errors(
    mut builder: crate::types::builders::MaximumAllowedResourcesBuilder,
) -> crate::types::builders::MaximumAllowedResourcesBuilder {
    if builder.cpu.is_none() {
        builder.cpu = Some(Default::default())
    }
    if builder.memory.is_none() {
        builder.memory = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_logging_configuration_correct_errors(
    mut builder: crate::types::builders::CloudWatchLoggingConfigurationBuilder,
) -> crate::types::builders::CloudWatchLoggingConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_correct_errors(
    mut builder: crate::types::builders::ConfigurationBuilder,
) -> crate::types::builders::ConfigurationBuilder {
    if builder.classification.is_none() {
        builder.classification = Some(Default::default())
    }
    builder
}

pub(crate) fn hive_correct_errors(mut builder: crate::types::builders::HiveBuilder) -> crate::types::builders::HiveBuilder {
    if builder.query.is_none() {
        builder.query = Some(Default::default())
    }
    builder
}

pub(crate) fn initial_capacity_config_correct_errors(
    mut builder: crate::types::builders::InitialCapacityConfigBuilder,
) -> crate::types::builders::InitialCapacityConfigBuilder {
    if builder.worker_count.is_none() {
        builder.worker_count = Some(Default::default())
    }
    builder
}

pub(crate) fn spark_submit_correct_errors(mut builder: crate::types::builders::SparkSubmitBuilder) -> crate::types::builders::SparkSubmitBuilder {
    if builder.entry_point.is_none() {
        builder.entry_point = Some(Default::default())
    }
    builder
}

pub(crate) fn worker_resource_config_correct_errors(
    mut builder: crate::types::builders::WorkerResourceConfigBuilder,
) -> crate::types::builders::WorkerResourceConfigBuilder {
    if builder.cpu.is_none() {
        builder.cpu = Some(Default::default())
    }
    if builder.memory.is_none() {
        builder.memory = Some(Default::default())
    }
    builder
}
