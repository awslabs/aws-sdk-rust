// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration setting for monitoring.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringConfiguration {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    #[doc(hidden)]
    pub s3_monitoring_configuration: std::option::Option<crate::types::S3MonitoringConfiguration>,
    /// <p>The managed log persistence configuration for a job run.</p>
    #[doc(hidden)]
    pub managed_persistence_monitoring_configuration:
        std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
}
impl MonitoringConfiguration {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn s3_monitoring_configuration(
        &self,
    ) -> std::option::Option<&crate::types::S3MonitoringConfiguration> {
        self.s3_monitoring_configuration.as_ref()
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn managed_persistence_monitoring_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ManagedPersistenceMonitoringConfiguration> {
        self.managed_persistence_monitoring_configuration.as_ref()
    }
}
impl MonitoringConfiguration {
    /// Creates a new builder-style object to manufacture [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
    pub fn builder() -> crate::types::builders::MonitoringConfigurationBuilder {
        crate::types::builders::MonitoringConfigurationBuilder::default()
    }
}

/// A builder for [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringConfigurationBuilder {
    pub(crate) s3_monitoring_configuration:
        std::option::Option<crate::types::S3MonitoringConfiguration>,
    pub(crate) managed_persistence_monitoring_configuration:
        std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
}
impl MonitoringConfigurationBuilder {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn s3_monitoring_configuration(
        mut self,
        input: crate::types::S3MonitoringConfiguration,
    ) -> Self {
        self.s3_monitoring_configuration = Some(input);
        self
    }
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn set_s3_monitoring_configuration(
        mut self,
        input: std::option::Option<crate::types::S3MonitoringConfiguration>,
    ) -> Self {
        self.s3_monitoring_configuration = input;
        self
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn managed_persistence_monitoring_configuration(
        mut self,
        input: crate::types::ManagedPersistenceMonitoringConfiguration,
    ) -> Self {
        self.managed_persistence_monitoring_configuration = Some(input);
        self
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn set_managed_persistence_monitoring_configuration(
        mut self,
        input: std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
    ) -> Self {
        self.managed_persistence_monitoring_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
    pub fn build(self) -> crate::types::MonitoringConfiguration {
        crate::types::MonitoringConfiguration {
            s3_monitoring_configuration: self.s3_monitoring_configuration,
            managed_persistence_monitoring_configuration: self
                .managed_persistence_monitoring_configuration,
        }
    }
}
