// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration setting for monitoring.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringConfiguration {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub s3_monitoring_configuration: ::std::option::Option<crate::types::S3MonitoringConfiguration>,
    /// <p>The managed log persistence configuration for a job run.</p>
    pub managed_persistence_monitoring_configuration: ::std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
    /// <p>The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.</p>
    pub cloud_watch_logging_configuration: ::std::option::Option<crate::types::CloudWatchLoggingConfiguration>,
    /// <p>The monitoring configuration object you can configure to send metrics to Amazon Managed Service for Prometheus for a job run.</p>
    pub prometheus_monitoring_configuration: ::std::option::Option<crate::types::PrometheusMonitoringConfiguration>,
}
impl MonitoringConfiguration {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn s3_monitoring_configuration(&self) -> ::std::option::Option<&crate::types::S3MonitoringConfiguration> {
        self.s3_monitoring_configuration.as_ref()
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn managed_persistence_monitoring_configuration(&self) -> ::std::option::Option<&crate::types::ManagedPersistenceMonitoringConfiguration> {
        self.managed_persistence_monitoring_configuration.as_ref()
    }
    /// <p>The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.</p>
    pub fn cloud_watch_logging_configuration(&self) -> ::std::option::Option<&crate::types::CloudWatchLoggingConfiguration> {
        self.cloud_watch_logging_configuration.as_ref()
    }
    /// <p>The monitoring configuration object you can configure to send metrics to Amazon Managed Service for Prometheus for a job run.</p>
    pub fn prometheus_monitoring_configuration(&self) -> ::std::option::Option<&crate::types::PrometheusMonitoringConfiguration> {
        self.prometheus_monitoring_configuration.as_ref()
    }
}
impl MonitoringConfiguration {
    /// Creates a new builder-style object to manufacture [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
    pub fn builder() -> crate::types::builders::MonitoringConfigurationBuilder {
        crate::types::builders::MonitoringConfigurationBuilder::default()
    }
}

/// A builder for [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitoringConfigurationBuilder {
    pub(crate) s3_monitoring_configuration: ::std::option::Option<crate::types::S3MonitoringConfiguration>,
    pub(crate) managed_persistence_monitoring_configuration: ::std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
    pub(crate) cloud_watch_logging_configuration: ::std::option::Option<crate::types::CloudWatchLoggingConfiguration>,
    pub(crate) prometheus_monitoring_configuration: ::std::option::Option<crate::types::PrometheusMonitoringConfiguration>,
}
impl MonitoringConfigurationBuilder {
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn s3_monitoring_configuration(mut self, input: crate::types::S3MonitoringConfiguration) -> Self {
        self.s3_monitoring_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn set_s3_monitoring_configuration(mut self, input: ::std::option::Option<crate::types::S3MonitoringConfiguration>) -> Self {
        self.s3_monitoring_configuration = input;
        self
    }
    /// <p>The Amazon S3 configuration for monitoring log publishing.</p>
    pub fn get_s3_monitoring_configuration(&self) -> &::std::option::Option<crate::types::S3MonitoringConfiguration> {
        &self.s3_monitoring_configuration
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn managed_persistence_monitoring_configuration(mut self, input: crate::types::ManagedPersistenceMonitoringConfiguration) -> Self {
        self.managed_persistence_monitoring_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn set_managed_persistence_monitoring_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration>,
    ) -> Self {
        self.managed_persistence_monitoring_configuration = input;
        self
    }
    /// <p>The managed log persistence configuration for a job run.</p>
    pub fn get_managed_persistence_monitoring_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::ManagedPersistenceMonitoringConfiguration> {
        &self.managed_persistence_monitoring_configuration
    }
    /// <p>The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.</p>
    pub fn cloud_watch_logging_configuration(mut self, input: crate::types::CloudWatchLoggingConfiguration) -> Self {
        self.cloud_watch_logging_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.</p>
    pub fn set_cloud_watch_logging_configuration(mut self, input: ::std::option::Option<crate::types::CloudWatchLoggingConfiguration>) -> Self {
        self.cloud_watch_logging_configuration = input;
        self
    }
    /// <p>The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.</p>
    pub fn get_cloud_watch_logging_configuration(&self) -> &::std::option::Option<crate::types::CloudWatchLoggingConfiguration> {
        &self.cloud_watch_logging_configuration
    }
    /// <p>The monitoring configuration object you can configure to send metrics to Amazon Managed Service for Prometheus for a job run.</p>
    pub fn prometheus_monitoring_configuration(mut self, input: crate::types::PrometheusMonitoringConfiguration) -> Self {
        self.prometheus_monitoring_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The monitoring configuration object you can configure to send metrics to Amazon Managed Service for Prometheus for a job run.</p>
    pub fn set_prometheus_monitoring_configuration(mut self, input: ::std::option::Option<crate::types::PrometheusMonitoringConfiguration>) -> Self {
        self.prometheus_monitoring_configuration = input;
        self
    }
    /// <p>The monitoring configuration object you can configure to send metrics to Amazon Managed Service for Prometheus for a job run.</p>
    pub fn get_prometheus_monitoring_configuration(&self) -> &::std::option::Option<crate::types::PrometheusMonitoringConfiguration> {
        &self.prometheus_monitoring_configuration
    }
    /// Consumes the builder and constructs a [`MonitoringConfiguration`](crate::types::MonitoringConfiguration).
    pub fn build(self) -> crate::types::MonitoringConfiguration {
        crate::types::MonitoringConfiguration {
            s3_monitoring_configuration: self.s3_monitoring_configuration,
            managed_persistence_monitoring_configuration: self.managed_persistence_monitoring_configuration,
            cloud_watch_logging_configuration: self.cloud_watch_logging_configuration,
            prometheus_monitoring_configuration: self.prometheus_monitoring_configuration,
        }
    }
}
