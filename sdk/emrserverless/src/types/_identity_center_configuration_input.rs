// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IAM Identity Center Configuration accepts the Identity Center instance parameter required to enable trusted identity propagation. This configuration allows identity propagation between integrated services and the Identity Center instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdentityCenterConfigurationInput {
    /// <p>The ARN of the IAM Identity Center instance.</p>
    pub identity_center_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>Enables user background sessions for this application so Livy sessions can continue running after users log out of their interactive notebook or their Identity Center sessions expire.</p>
    pub user_background_sessions_enabled: ::std::option::Option<bool>,
}
impl IdentityCenterConfigurationInput {
    /// <p>The ARN of the IAM Identity Center instance.</p>
    pub fn identity_center_instance_arn(&self) -> ::std::option::Option<&str> {
        self.identity_center_instance_arn.as_deref()
    }
    /// <p>Enables user background sessions for this application so Livy sessions can continue running after users log out of their interactive notebook or their Identity Center sessions expire.</p>
    pub fn user_background_sessions_enabled(&self) -> ::std::option::Option<bool> {
        self.user_background_sessions_enabled
    }
}
impl IdentityCenterConfigurationInput {
    /// Creates a new builder-style object to manufacture [`IdentityCenterConfigurationInput`](crate::types::IdentityCenterConfigurationInput).
    pub fn builder() -> crate::types::builders::IdentityCenterConfigurationInputBuilder {
        crate::types::builders::IdentityCenterConfigurationInputBuilder::default()
    }
}

/// A builder for [`IdentityCenterConfigurationInput`](crate::types::IdentityCenterConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdentityCenterConfigurationInputBuilder {
    pub(crate) identity_center_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_background_sessions_enabled: ::std::option::Option<bool>,
}
impl IdentityCenterConfigurationInputBuilder {
    /// <p>The ARN of the IAM Identity Center instance.</p>
    pub fn identity_center_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_center_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance.</p>
    pub fn set_identity_center_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_center_instance_arn = input;
        self
    }
    /// <p>The ARN of the IAM Identity Center instance.</p>
    pub fn get_identity_center_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_center_instance_arn
    }
    /// <p>Enables user background sessions for this application so Livy sessions can continue running after users log out of their interactive notebook or their Identity Center sessions expire.</p>
    pub fn user_background_sessions_enabled(mut self, input: bool) -> Self {
        self.user_background_sessions_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables user background sessions for this application so Livy sessions can continue running after users log out of their interactive notebook or their Identity Center sessions expire.</p>
    pub fn set_user_background_sessions_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_background_sessions_enabled = input;
        self
    }
    /// <p>Enables user background sessions for this application so Livy sessions can continue running after users log out of their interactive notebook or their Identity Center sessions expire.</p>
    pub fn get_user_background_sessions_enabled(&self) -> &::std::option::Option<bool> {
        &self.user_background_sessions_enabled
    }
    /// Consumes the builder and constructs a [`IdentityCenterConfigurationInput`](crate::types::IdentityCenterConfigurationInput).
    pub fn build(self) -> crate::types::IdentityCenterConfigurationInput {
        crate::types::IdentityCenterConfigurationInput {
            identity_center_instance_arn: self.identity_center_instance_arn,
            user_background_sessions_enabled: self.user_background_sessions_enabled,
        }
    }
}
