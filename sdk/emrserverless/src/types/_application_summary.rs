// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of attributes associated with an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>The ID of the application.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the application.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of the application.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The EMR release associated with the application.</p>
    #[doc(hidden)]
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The type of application, such as Spark or Hive.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The state of the application.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ApplicationState>,
    /// <p>The state details of the application.</p>
    #[doc(hidden)]
    pub state_details: std::option::Option<std::string::String>,
    /// <p>The date and time when the application was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the application was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The CPU architecture of an application.</p>
    #[doc(hidden)]
    pub architecture: std::option::Option<crate::types::Architecture>,
}
impl ApplicationSummary {
    /// <p>The ID of the application.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the application.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the application.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The EMR release associated with the application.</p>
    pub fn release_label(&self) -> std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The type of application, such as Spark or Hive.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The state of the application.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ApplicationState> {
        self.state.as_ref()
    }
    /// <p>The state details of the application.</p>
    pub fn state_details(&self) -> std::option::Option<&str> {
        self.state_details.as_deref()
    }
    /// <p>The date and time when the application was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time when the application was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The CPU architecture of an application.</p>
    pub fn architecture(&self) -> std::option::Option<&crate::types::Architecture> {
        self.architecture.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn builder() -> crate::types::builders::ApplicationSummaryBuilder {
        crate::types::builders::ApplicationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationSummary`](crate::types::ApplicationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) release_label: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ApplicationState>,
    pub(crate) state_details: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) architecture: std::option::Option<crate::types::Architecture>,
}
impl ApplicationSummaryBuilder {
    /// <p>The ID of the application.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The EMR release associated with the application.</p>
    pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_label = Some(input.into());
        self
    }
    /// <p>The EMR release associated with the application.</p>
    pub fn set_release_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The type of application, such as Spark or Hive.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of application, such as Spark or Hive.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The state of the application.</p>
    pub fn state(mut self, input: crate::types::ApplicationState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the application.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ApplicationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state details of the application.</p>
    pub fn state_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_details = Some(input.into());
        self
    }
    /// <p>The state details of the application.</p>
    pub fn set_state_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p>The date and time when the application was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time when the application was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the application was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date and time when the application was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The CPU architecture of an application.</p>
    pub fn architecture(mut self, input: crate::types::Architecture) -> Self {
        self.architecture = Some(input);
        self
    }
    /// <p>The CPU architecture of an application.</p>
    pub fn set_architecture(
        mut self,
        input: std::option::Option<crate::types::Architecture>,
    ) -> Self {
        self.architecture = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn build(self) -> crate::types::ApplicationSummary {
        crate::types::ApplicationSummary {
            id: self.id,
            name: self.name,
            arn: self.arn,
            release_label: self.release_label,
            r#type: self.r#type,
            state: self.state,
            state_details: self.state_details,
            created_at: self.created_at,
            updated_at: self.updated_at,
            architecture: self.architecture,
        }
    }
}
