// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a job run. A job run is a unit of work, such as a Spark JAR, Hive query, or SparkSQL query, that you submit to an EMR Serverless application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobRun {
    /// <p>The ID of the application the job is running on.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the job run.</p>
    #[doc(hidden)]
    pub job_run_id: std::option::Option<std::string::String>,
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The execution role ARN of the job run.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The user who created the job run.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<std::string::String>,
    /// <p>The date and time when the job run was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the job run was updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The execution role ARN of the job run.</p>
    #[doc(hidden)]
    pub execution_role: std::option::Option<std::string::String>,
    /// <p>The state of the job run.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::JobRunState>,
    /// <p>The state details of the job run.</p>
    #[doc(hidden)]
    pub state_details: std::option::Option<std::string::String>,
    /// <p>The EMR release associated with the application your job is running on.</p>
    #[doc(hidden)]
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The configuration settings that are used to override default configuration.</p>
    #[doc(hidden)]
    pub configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    /// <p>The job driver for the job run.</p>
    #[doc(hidden)]
    pub job_driver: std::option::Option<crate::types::JobDriver>,
    /// <p>The tags assigned to the job run.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.</p>
    #[doc(hidden)]
    pub total_resource_utilization: std::option::Option<crate::types::TotalResourceUtilization>,
    /// <p>The network configuration for customer VPC connectivity.</p>
    #[doc(hidden)]
    pub network_configuration: std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    #[doc(hidden)]
    pub total_execution_duration_seconds: std::option::Option<i32>,
}
impl JobRun {
    /// <p>The ID of the application the job is running on.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn job_run_id(&self) -> std::option::Option<&str> {
        self.job_run_id.as_deref()
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(&self) -> std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role(&self) -> std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The state of the job run.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::JobRunState> {
        self.state.as_ref()
    }
    /// <p>The state details of the job run.</p>
    pub fn state_details(&self) -> std::option::Option<&str> {
        self.state_details.as_deref()
    }
    /// <p>The EMR release associated with the application your job is running on.</p>
    pub fn release_label(&self) -> std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(
        &self,
    ) -> std::option::Option<&crate::types::ConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
    /// <p>The job driver for the job run.</p>
    pub fn job_driver(&self) -> std::option::Option<&crate::types::JobDriver> {
        self.job_driver.as_ref()
    }
    /// <p>The tags assigned to the job run.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.</p>
    pub fn total_resource_utilization(
        &self,
    ) -> std::option::Option<&crate::types::TotalResourceUtilization> {
        self.total_resource_utilization.as_ref()
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn network_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn total_execution_duration_seconds(&self) -> std::option::Option<i32> {
        self.total_execution_duration_seconds
    }
}
impl JobRun {
    /// Creates a new builder-style object to manufacture [`JobRun`](crate::types::JobRun).
    pub fn builder() -> crate::types::builders::JobRunBuilder {
        crate::types::builders::JobRunBuilder::default()
    }
}

/// A builder for [`JobRun`](crate::types::JobRun).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobRunBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) job_run_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_by: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) execution_role: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::JobRunState>,
    pub(crate) state_details: std::option::Option<std::string::String>,
    pub(crate) release_label: std::option::Option<std::string::String>,
    pub(crate) configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    pub(crate) job_driver: std::option::Option<crate::types::JobDriver>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) total_resource_utilization:
        std::option::Option<crate::types::TotalResourceUtilization>,
    pub(crate) network_configuration: std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) total_execution_duration_seconds: std::option::Option<i32>,
}
impl JobRunBuilder {
    /// <p>The ID of the application the job is running on.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The ID of the application the job is running on.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn job_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_run_id = Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_job_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_run_id = input;
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by = Some(input.into());
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn set_created_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role = Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_execution_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The state of the job run.</p>
    pub fn state(mut self, input: crate::types::JobRunState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the job run.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::JobRunState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn state_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_details = Some(input.into());
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn set_state_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p>The EMR release associated with the application your job is running on.</p>
    pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_label = Some(input.into());
        self
    }
    /// <p>The EMR release associated with the application your job is running on.</p>
    pub fn set_release_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(mut self, input: crate::types::ConfigurationOverrides) -> Self {
        self.configuration_overrides = Some(input);
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn set_configuration_overrides(
        mut self,
        input: std::option::Option<crate::types::ConfigurationOverrides>,
    ) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn job_driver(mut self, input: crate::types::JobDriver) -> Self {
        self.job_driver = Some(input);
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn set_job_driver(mut self, input: std::option::Option<crate::types::JobDriver>) -> Self {
        self.job_driver = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the job run.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to the job run.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.</p>
    pub fn total_resource_utilization(
        mut self,
        input: crate::types::TotalResourceUtilization,
    ) -> Self {
        self.total_resource_utilization = Some(input);
        self
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.</p>
    pub fn set_total_resource_utilization(
        mut self,
        input: std::option::Option<crate::types::TotalResourceUtilization>,
    ) -> Self {
        self.total_resource_utilization = input;
        self
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = Some(input);
        self
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn set_network_configuration(
        mut self,
        input: std::option::Option<crate::types::NetworkConfiguration>,
    ) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn total_execution_duration_seconds(mut self, input: i32) -> Self {
        self.total_execution_duration_seconds = Some(input);
        self
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn set_total_execution_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.total_execution_duration_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`JobRun`](crate::types::JobRun).
    pub fn build(self) -> crate::types::JobRun {
        crate::types::JobRun {
            application_id: self.application_id,
            job_run_id: self.job_run_id,
            name: self.name,
            arn: self.arn,
            created_by: self.created_by,
            created_at: self.created_at,
            updated_at: self.updated_at,
            execution_role: self.execution_role,
            state: self.state,
            state_details: self.state_details,
            release_label: self.release_label,
            configuration_overrides: self.configuration_overrides,
            job_driver: self.job_driver,
            tags: self.tags,
            total_resource_utilization: self.total_resource_utilization,
            network_configuration: self.network_configuration,
            total_execution_duration_seconds: self.total_execution_duration_seconds,
        }
    }
}
