// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a job run. A job run is a unit of work, such as a Spark JAR, Hive query, or SparkSQL query, that you submit to an Amazon EMR Serverless application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobRun {
    /// <p>The ID of the application the job is running on.</p>
    pub application_id: ::std::string::String,
    /// <p>The ID of the job run.</p>
    pub job_run_id: ::std::string::String,
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The execution role ARN of the job run.</p>
    pub arn: ::std::string::String,
    /// <p>The user who created the job run.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time when the job run was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the job run was updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The execution role ARN of the job run.</p>
    pub execution_role: ::std::string::String,
    /// <p>The state of the job run.</p>
    pub state: crate::types::JobRunState,
    /// <p>The state details of the job run.</p>
    pub state_details: ::std::string::String,
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub release_label: ::std::string::String,
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub configuration_overrides: ::std::option::Option<crate::types::ConfigurationOverrides>,
    /// <p>The job driver for the job run.</p>
    pub job_driver: ::std::option::Option<crate::types::JobDriver>,
    /// <p>The tags assigned to the job run.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>
    pub total_resource_utilization: ::std::option::Option<crate::types::TotalResourceUtilization>,
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub total_execution_duration_seconds: ::std::option::Option<i32>,
    /// <p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>
    pub execution_timeout_minutes: ::std::option::Option<i64>,
    /// <p>The aggregate vCPU, memory, and storage that Amazon Web Services has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>
    pub billed_resource_utilization: ::std::option::Option<crate::types::ResourceUtilization>,
}
impl JobRun {
    /// <p>The ID of the application the job is running on.</p>
    pub fn application_id(&self) -> &str {
        use std::ops::Deref;
        self.application_id.deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn job_run_id(&self) -> &str {
        use std::ops::Deref;
        self.job_run_id.deref()
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role(&self) -> &str {
        use std::ops::Deref;
        self.execution_role.deref()
    }
    /// <p>The state of the job run.</p>
    pub fn state(&self) -> &crate::types::JobRunState {
        &self.state
    }
    /// <p>The state details of the job run.</p>
    pub fn state_details(&self) -> &str {
        use std::ops::Deref;
        self.state_details.deref()
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn release_label(&self) -> &str {
        use std::ops::Deref;
        self.release_label.deref()
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(&self) -> ::std::option::Option<&crate::types::ConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
    /// <p>The job driver for the job run.</p>
    pub fn job_driver(&self) -> ::std::option::Option<&crate::types::JobDriver> {
        self.job_driver.as_ref()
    }
    /// <p>The tags assigned to the job run.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>
    pub fn total_resource_utilization(&self) -> ::std::option::Option<&crate::types::TotalResourceUtilization> {
        self.total_resource_utilization.as_ref()
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn total_execution_duration_seconds(&self) -> ::std::option::Option<i32> {
        self.total_execution_duration_seconds
    }
    /// <p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>
    pub fn execution_timeout_minutes(&self) -> ::std::option::Option<i64> {
        self.execution_timeout_minutes
    }
    /// <p>The aggregate vCPU, memory, and storage that Amazon Web Services has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>
    pub fn billed_resource_utilization(&self) -> ::std::option::Option<&crate::types::ResourceUtilization> {
        self.billed_resource_utilization.as_ref()
    }
}
impl JobRun {
    /// Creates a new builder-style object to manufacture [`JobRun`](crate::types::JobRun).
    pub fn builder() -> crate::types::builders::JobRunBuilder {
        crate::types::builders::JobRunBuilder::default()
    }
}

/// A builder for [`JobRun`](crate::types::JobRun).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobRunBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::JobRunState>,
    pub(crate) state_details: ::std::option::Option<::std::string::String>,
    pub(crate) release_label: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_overrides: ::std::option::Option<crate::types::ConfigurationOverrides>,
    pub(crate) job_driver: ::std::option::Option<crate::types::JobDriver>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) total_resource_utilization: ::std::option::Option<crate::types::TotalResourceUtilization>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) total_execution_duration_seconds: ::std::option::Option<i32>,
    pub(crate) execution_timeout_minutes: ::std::option::Option<i64>,
    pub(crate) billed_resource_utilization: ::std::option::Option<crate::types::ResourceUtilization>,
}
impl JobRunBuilder {
    /// <p>The ID of the application the job is running on.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application the job is running on.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application the job is running on.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The ID of the job run.</p>
    /// This field is required.
    pub fn job_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_job_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_run_id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_job_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_run_id
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The execution role ARN of the job run.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The user who created the job run.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time when the job run was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time when the job run was updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time when the job run was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The execution role ARN of the job run.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The state of the job run.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::JobRunState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the job run.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::JobRunState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the job run.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::JobRunState> {
        &self.state
    }
    /// <p>The state details of the job run.</p>
    /// This field is required.
    pub fn state_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn set_state_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn get_state_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_details
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    /// This field is required.
    pub fn release_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn set_release_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn get_release_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.release_label
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(mut self, input: crate::types::ConfigurationOverrides) -> Self {
        self.configuration_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn set_configuration_overrides(mut self, input: ::std::option::Option<crate::types::ConfigurationOverrides>) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn get_configuration_overrides(&self) -> &::std::option::Option<crate::types::ConfigurationOverrides> {
        &self.configuration_overrides
    }
    /// <p>The job driver for the job run.</p>
    /// This field is required.
    pub fn job_driver(mut self, input: crate::types::JobDriver) -> Self {
        self.job_driver = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn set_job_driver(mut self, input: ::std::option::Option<crate::types::JobDriver>) -> Self {
        self.job_driver = input;
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn get_job_driver(&self) -> &::std::option::Option<crate::types::JobDriver> {
        &self.job_driver
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the job run.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags assigned to the job run.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the job run.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>
    pub fn total_resource_utilization(mut self, input: crate::types::TotalResourceUtilization) -> Self {
        self.total_resource_utilization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>
    pub fn set_total_resource_utilization(mut self, input: ::std::option::Option<crate::types::TotalResourceUtilization>) -> Self {
        self.total_resource_utilization = input;
        self
    }
    /// <p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>
    pub fn get_total_resource_utilization(&self) -> &::std::option::Option<crate::types::TotalResourceUtilization> {
        &self.total_resource_utilization
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for customer VPC connectivity.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn total_execution_duration_seconds(mut self, input: i32) -> Self {
        self.total_execution_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn set_total_execution_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_execution_duration_seconds = input;
        self
    }
    /// <p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>
    pub fn get_total_execution_duration_seconds(&self) -> &::std::option::Option<i32> {
        &self.total_execution_duration_seconds
    }
    /// <p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>
    pub fn execution_timeout_minutes(mut self, input: i64) -> Self {
        self.execution_timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>
    pub fn set_execution_timeout_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_timeout_minutes = input;
        self
    }
    /// <p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>
    pub fn get_execution_timeout_minutes(&self) -> &::std::option::Option<i64> {
        &self.execution_timeout_minutes
    }
    /// <p>The aggregate vCPU, memory, and storage that Amazon Web Services has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>
    pub fn billed_resource_utilization(mut self, input: crate::types::ResourceUtilization) -> Self {
        self.billed_resource_utilization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregate vCPU, memory, and storage that Amazon Web Services has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>
    pub fn set_billed_resource_utilization(mut self, input: ::std::option::Option<crate::types::ResourceUtilization>) -> Self {
        self.billed_resource_utilization = input;
        self
    }
    /// <p>The aggregate vCPU, memory, and storage that Amazon Web Services has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>
    pub fn get_billed_resource_utilization(&self) -> &::std::option::Option<crate::types::ResourceUtilization> {
        &self.billed_resource_utilization
    }
    /// Consumes the builder and constructs a [`JobRun`](crate::types::JobRun).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_id`](crate::types::builders::JobRunBuilder::application_id)
    /// - [`job_run_id`](crate::types::builders::JobRunBuilder::job_run_id)
    /// - [`arn`](crate::types::builders::JobRunBuilder::arn)
    /// - [`created_by`](crate::types::builders::JobRunBuilder::created_by)
    /// - [`created_at`](crate::types::builders::JobRunBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::JobRunBuilder::updated_at)
    /// - [`execution_role`](crate::types::builders::JobRunBuilder::execution_role)
    /// - [`state`](crate::types::builders::JobRunBuilder::state)
    /// - [`state_details`](crate::types::builders::JobRunBuilder::state_details)
    /// - [`release_label`](crate::types::builders::JobRunBuilder::release_label)
    pub fn build(self) -> ::std::result::Result<crate::types::JobRun, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobRun {
            application_id: self.application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_id",
                    "application_id was not specified but it is required when building JobRun",
                )
            })?,
            job_run_id: self.job_run_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_run_id",
                    "job_run_id was not specified but it is required when building JobRun",
                )
            })?,
            name: self.name,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building JobRun",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building JobRun",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building JobRun",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building JobRun",
                )
            })?,
            execution_role: self.execution_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role",
                    "execution_role was not specified but it is required when building JobRun",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building JobRun",
                )
            })?,
            state_details: self.state_details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_details",
                    "state_details was not specified but it is required when building JobRun",
                )
            })?,
            release_label: self.release_label.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "release_label",
                    "release_label was not specified but it is required when building JobRun",
                )
            })?,
            configuration_overrides: self.configuration_overrides,
            job_driver: self.job_driver,
            tags: self.tags,
            total_resource_utilization: self.total_resource_utilization,
            network_configuration: self.network_configuration,
            total_execution_duration_seconds: self.total_execution_duration_seconds,
            execution_timeout_minutes: self.execution_timeout_minutes,
            billed_resource_utilization: self.billed_resource_utilization,
        })
    }
}
