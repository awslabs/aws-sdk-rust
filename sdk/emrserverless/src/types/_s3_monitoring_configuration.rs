// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 configuration for monitoring log publishing. You can configure your jobs to send log information to Amazon S3.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3MonitoringConfiguration {
    /// <p>The Amazon S3 destination URI for log publishing.</p>
    #[doc(hidden)]
    pub log_uri: std::option::Option<std::string::String>,
    /// <p>The KMS key ARN to encrypt the logs published to the given Amazon S3 destination.</p>
    #[doc(hidden)]
    pub encryption_key_arn: std::option::Option<std::string::String>,
}
impl S3MonitoringConfiguration {
    /// <p>The Amazon S3 destination URI for log publishing.</p>
    pub fn log_uri(&self) -> std::option::Option<&str> {
        self.log_uri.as_deref()
    }
    /// <p>The KMS key ARN to encrypt the logs published to the given Amazon S3 destination.</p>
    pub fn encryption_key_arn(&self) -> std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
}
impl S3MonitoringConfiguration {
    /// Creates a new builder-style object to manufacture [`S3MonitoringConfiguration`](crate::types::S3MonitoringConfiguration).
    pub fn builder() -> crate::types::builders::S3MonitoringConfigurationBuilder {
        crate::types::builders::S3MonitoringConfigurationBuilder::default()
    }
}

/// A builder for [`S3MonitoringConfiguration`](crate::types::S3MonitoringConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3MonitoringConfigurationBuilder {
    pub(crate) log_uri: std::option::Option<std::string::String>,
    pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
}
impl S3MonitoringConfigurationBuilder {
    /// <p>The Amazon S3 destination URI for log publishing.</p>
    pub fn log_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 destination URI for log publishing.</p>
    pub fn set_log_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_uri = input;
        self
    }
    /// <p>The KMS key ARN to encrypt the logs published to the given Amazon S3 destination.</p>
    pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key_arn = Some(input.into());
        self
    }
    /// <p>The KMS key ARN to encrypt the logs published to the given Amazon S3 destination.</p>
    pub fn set_encryption_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`S3MonitoringConfiguration`](crate::types::S3MonitoringConfiguration).
    pub fn build(self) -> crate::types::S3MonitoringConfiguration {
        crate::types::S3MonitoringConfiguration {
            log_uri: self.log_uri,
            encryption_key_arn: self.encryption_key_arn,
        }
    }
}
