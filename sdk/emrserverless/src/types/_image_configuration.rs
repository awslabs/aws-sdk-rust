// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The applied image configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageConfiguration {
    /// <p>The image URI.</p>
    #[doc(hidden)]
    pub image_uri: std::option::Option<std::string::String>,
    /// <p>The SHA256 digest of the image URI. This indicates which specific image the application is configured for. The image digest doesn't exist until an application has started.</p>
    #[doc(hidden)]
    pub resolved_image_digest: std::option::Option<std::string::String>,
}
impl ImageConfiguration {
    /// <p>The image URI.</p>
    pub fn image_uri(&self) -> std::option::Option<&str> {
        self.image_uri.as_deref()
    }
    /// <p>The SHA256 digest of the image URI. This indicates which specific image the application is configured for. The image digest doesn't exist until an application has started.</p>
    pub fn resolved_image_digest(&self) -> std::option::Option<&str> {
        self.resolved_image_digest.as_deref()
    }
}
impl ImageConfiguration {
    /// Creates a new builder-style object to manufacture [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn builder() -> crate::types::builders::ImageConfigurationBuilder {
        crate::types::builders::ImageConfigurationBuilder::default()
    }
}

/// A builder for [`ImageConfiguration`](crate::types::ImageConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageConfigurationBuilder {
    pub(crate) image_uri: std::option::Option<std::string::String>,
    pub(crate) resolved_image_digest: std::option::Option<std::string::String>,
}
impl ImageConfigurationBuilder {
    /// <p>The image URI.</p>
    pub fn image_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_uri = Some(input.into());
        self
    }
    /// <p>The image URI.</p>
    pub fn set_image_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_uri = input;
        self
    }
    /// <p>The SHA256 digest of the image URI. This indicates which specific image the application is configured for. The image digest doesn't exist until an application has started.</p>
    pub fn resolved_image_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolved_image_digest = Some(input.into());
        self
    }
    /// <p>The SHA256 digest of the image URI. This indicates which specific image the application is configured for. The image digest doesn't exist until an application has started.</p>
    pub fn set_resolved_image_digest(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resolved_image_digest = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn build(self) -> crate::types::ImageConfiguration {
        crate::types::ImageConfiguration {
            image_uri: self.image_uri,
            resolved_image_digest: self.resolved_image_digest,
        }
    }
}
