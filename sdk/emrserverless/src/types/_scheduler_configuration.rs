// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchedulerConfiguration {
    /// <p>The maximum duration in minutes for the job in QUEUED state. If scheduler configuration is enabled on your application, the default value is 360 minutes (6 hours). The valid range is from 15 to 720.</p>
    pub queue_timeout_minutes: ::std::option::Option<i32>,
    /// <p>The maximum concurrent job runs on this application. If scheduler configuration is enabled on your application, the default value is 15. The valid range is 1 to 1000.</p>
    pub max_concurrent_runs: ::std::option::Option<i32>,
}
impl SchedulerConfiguration {
    /// <p>The maximum duration in minutes for the job in QUEUED state. If scheduler configuration is enabled on your application, the default value is 360 minutes (6 hours). The valid range is from 15 to 720.</p>
    pub fn queue_timeout_minutes(&self) -> ::std::option::Option<i32> {
        self.queue_timeout_minutes
    }
    /// <p>The maximum concurrent job runs on this application. If scheduler configuration is enabled on your application, the default value is 15. The valid range is 1 to 1000.</p>
    pub fn max_concurrent_runs(&self) -> ::std::option::Option<i32> {
        self.max_concurrent_runs
    }
}
impl SchedulerConfiguration {
    /// Creates a new builder-style object to manufacture [`SchedulerConfiguration`](crate::types::SchedulerConfiguration).
    pub fn builder() -> crate::types::builders::SchedulerConfigurationBuilder {
        crate::types::builders::SchedulerConfigurationBuilder::default()
    }
}

/// A builder for [`SchedulerConfiguration`](crate::types::SchedulerConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SchedulerConfigurationBuilder {
    pub(crate) queue_timeout_minutes: ::std::option::Option<i32>,
    pub(crate) max_concurrent_runs: ::std::option::Option<i32>,
}
impl SchedulerConfigurationBuilder {
    /// <p>The maximum duration in minutes for the job in QUEUED state. If scheduler configuration is enabled on your application, the default value is 360 minutes (6 hours). The valid range is from 15 to 720.</p>
    pub fn queue_timeout_minutes(mut self, input: i32) -> Self {
        self.queue_timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum duration in minutes for the job in QUEUED state. If scheduler configuration is enabled on your application, the default value is 360 minutes (6 hours). The valid range is from 15 to 720.</p>
    pub fn set_queue_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.queue_timeout_minutes = input;
        self
    }
    /// <p>The maximum duration in minutes for the job in QUEUED state. If scheduler configuration is enabled on your application, the default value is 360 minutes (6 hours). The valid range is from 15 to 720.</p>
    pub fn get_queue_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.queue_timeout_minutes
    }
    /// <p>The maximum concurrent job runs on this application. If scheduler configuration is enabled on your application, the default value is 15. The valid range is 1 to 1000.</p>
    pub fn max_concurrent_runs(mut self, input: i32) -> Self {
        self.max_concurrent_runs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum concurrent job runs on this application. If scheduler configuration is enabled on your application, the default value is 15. The valid range is 1 to 1000.</p>
    pub fn set_max_concurrent_runs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrent_runs = input;
        self
    }
    /// <p>The maximum concurrent job runs on this application. If scheduler configuration is enabled on your application, the default value is 15. The valid range is 1 to 1000.</p>
    pub fn get_max_concurrent_runs(&self) -> &::std::option::Option<i32> {
        &self.max_concurrent_runs
    }
    /// Consumes the builder and constructs a [`SchedulerConfiguration`](crate::types::SchedulerConfiguration).
    pub fn build(self) -> crate::types::SchedulerConfiguration {
        crate::types::SchedulerConfiguration {
            queue_timeout_minutes: self.queue_timeout_minutes,
            max_concurrent_runs: self.max_concurrent_runs,
        }
    }
}
