// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of attributes associated with a job run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobRunSummary {
    /// <p>The ID of the application the job is running on.</p>
    pub application_id: ::std::string::String,
    /// <p>The ID of the job run.</p>
    pub id: ::std::string::String,
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the job run.</p>
    pub arn: ::std::string::String,
    /// <p>The user who created the job run.</p>
    pub created_by: ::std::string::String,
    /// <p>The date and time when the job run was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the job run was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The execution role ARN of the job run.</p>
    pub execution_role: ::std::string::String,
    /// <p>The state of the job run.</p>
    pub state: crate::types::JobRunState,
    /// <p>The state details of the job run.</p>
    pub state_details: ::std::string::String,
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub release_label: ::std::string::String,
    /// <p>The type of job run, such as Spark or Hive.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
}
impl JobRunSummary {
    /// <p>The ID of the application the job is running on.</p>
    pub fn application_id(&self) -> &str {
        use std::ops::Deref;
        self.application_id.deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the job run.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time when the job run was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role(&self) -> &str {
        use std::ops::Deref;
        self.execution_role.deref()
    }
    /// <p>The state of the job run.</p>
    pub fn state(&self) -> &crate::types::JobRunState {
        &self.state
    }
    /// <p>The state details of the job run.</p>
    pub fn state_details(&self) -> &str {
        use std::ops::Deref;
        self.state_details.deref()
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn release_label(&self) -> &str {
        use std::ops::Deref;
        self.release_label.deref()
    }
    /// <p>The type of job run, such as Spark or Hive.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl JobRunSummary {
    /// Creates a new builder-style object to manufacture [`JobRunSummary`](crate::types::JobRunSummary).
    pub fn builder() -> crate::types::builders::JobRunSummaryBuilder {
        crate::types::builders::JobRunSummaryBuilder::default()
    }
}

/// A builder for [`JobRunSummary`](crate::types::JobRunSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobRunSummaryBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::JobRunState>,
    pub(crate) state_details: ::std::option::Option<::std::string::String>,
    pub(crate) release_label: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl JobRunSummaryBuilder {
    /// <p>The ID of the application the job is running on.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application the job is running on.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application the job is running on.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The ID of the job run.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The optional job run name. This doesn't have to be unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the job run.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the job run.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the job run.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The user who created the job run.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time when the job run was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time when the job run was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time when the job run was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The execution role ARN of the job run.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The state of the job run.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::JobRunState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the job run.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::JobRunState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the job run.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::JobRunState> {
        &self.state
    }
    /// <p>The state details of the job run.</p>
    /// This field is required.
    pub fn state_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn set_state_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p>The state details of the job run.</p>
    pub fn get_state_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_details
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    /// This field is required.
    pub fn release_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn set_release_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The Amazon EMR release associated with the application your job is running on.</p>
    pub fn get_release_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.release_label
    }
    /// <p>The type of job run, such as Spark or Hive.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of job run, such as Spark or Hive.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of job run, such as Spark or Hive.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`JobRunSummary`](crate::types::JobRunSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_id`](crate::types::builders::JobRunSummaryBuilder::application_id)
    /// - [`id`](crate::types::builders::JobRunSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::JobRunSummaryBuilder::arn)
    /// - [`created_by`](crate::types::builders::JobRunSummaryBuilder::created_by)
    /// - [`created_at`](crate::types::builders::JobRunSummaryBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::JobRunSummaryBuilder::updated_at)
    /// - [`execution_role`](crate::types::builders::JobRunSummaryBuilder::execution_role)
    /// - [`state`](crate::types::builders::JobRunSummaryBuilder::state)
    /// - [`state_details`](crate::types::builders::JobRunSummaryBuilder::state_details)
    /// - [`release_label`](crate::types::builders::JobRunSummaryBuilder::release_label)
    pub fn build(self) -> ::std::result::Result<crate::types::JobRunSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobRunSummary {
            application_id: self.application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_id",
                    "application_id was not specified but it is required when building JobRunSummary",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building JobRunSummary",
                )
            })?,
            name: self.name,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building JobRunSummary",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building JobRunSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building JobRunSummary",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building JobRunSummary",
                )
            })?,
            execution_role: self.execution_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role",
                    "execution_role was not specified but it is required when building JobRunSummary",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building JobRunSummary",
                )
            })?,
            state_details: self.state_details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_details",
                    "state_details was not specified but it is required when building JobRunSummary",
                )
            })?,
            release_label: self.release_label.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "release_label",
                    "release_label was not specified but it is required when building JobRunSummary",
                )
            })?,
            r#type: self.r#type,
        })
    }
}
