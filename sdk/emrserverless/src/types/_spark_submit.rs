// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configurations for the Spark submit job driver.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SparkSubmit {
    /// <p>The entry point for the Spark submit job run.</p>
    #[doc(hidden)]
    pub entry_point: std::option::Option<std::string::String>,
    /// <p>The arguments for the Spark submit job run.</p>
    #[doc(hidden)]
    pub entry_point_arguments: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The parameters for the Spark submit job run.</p>
    #[doc(hidden)]
    pub spark_submit_parameters: std::option::Option<std::string::String>,
}
impl SparkSubmit {
    /// <p>The entry point for the Spark submit job run.</p>
    pub fn entry_point(&self) -> std::option::Option<&str> {
        self.entry_point.as_deref()
    }
    /// <p>The arguments for the Spark submit job run.</p>
    pub fn entry_point_arguments(&self) -> std::option::Option<&[std::string::String]> {
        self.entry_point_arguments.as_deref()
    }
    /// <p>The parameters for the Spark submit job run.</p>
    pub fn spark_submit_parameters(&self) -> std::option::Option<&str> {
        self.spark_submit_parameters.as_deref()
    }
}
impl std::fmt::Debug for SparkSubmit {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SparkSubmit");
        formatter.field("entry_point", &"*** Sensitive Data Redacted ***");
        formatter.field("entry_point_arguments", &self.entry_point_arguments);
        formatter.field(
            "spark_submit_parameters",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
impl SparkSubmit {
    /// Creates a new builder-style object to manufacture [`SparkSubmit`](crate::types::SparkSubmit).
    pub fn builder() -> crate::types::builders::SparkSubmitBuilder {
        crate::types::builders::SparkSubmitBuilder::default()
    }
}

/// A builder for [`SparkSubmit`](crate::types::SparkSubmit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SparkSubmitBuilder {
    pub(crate) entry_point: std::option::Option<std::string::String>,
    pub(crate) entry_point_arguments: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) spark_submit_parameters: std::option::Option<std::string::String>,
}
impl SparkSubmitBuilder {
    /// <p>The entry point for the Spark submit job run.</p>
    pub fn entry_point(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry_point = Some(input.into());
        self
    }
    /// <p>The entry point for the Spark submit job run.</p>
    pub fn set_entry_point(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry_point = input;
        self
    }
    /// Appends an item to `entry_point_arguments`.
    ///
    /// To override the contents of this collection use [`set_entry_point_arguments`](Self::set_entry_point_arguments).
    ///
    /// <p>The arguments for the Spark submit job run.</p>
    pub fn entry_point_arguments(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entry_point_arguments.unwrap_or_default();
        v.push(input.into());
        self.entry_point_arguments = Some(v);
        self
    }
    /// <p>The arguments for the Spark submit job run.</p>
    pub fn set_entry_point_arguments(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entry_point_arguments = input;
        self
    }
    /// <p>The parameters for the Spark submit job run.</p>
    pub fn spark_submit_parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.spark_submit_parameters = Some(input.into());
        self
    }
    /// <p>The parameters for the Spark submit job run.</p>
    pub fn set_spark_submit_parameters(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.spark_submit_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`SparkSubmit`](crate::types::SparkSubmit).
    pub fn build(self) -> crate::types::SparkSubmit {
        crate::types::SparkSubmit {
            entry_point: self.entry_point,
            entry_point_arguments: self.entry_point_arguments,
            spark_submit_parameters: self.spark_submit_parameters,
        }
    }
}
impl std::fmt::Debug for SparkSubmitBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SparkSubmitBuilder");
        formatter.field("entry_point", &"*** Sensitive Data Redacted ***");
        formatter.field("entry_point_arguments", &self.entry_point_arguments);
        formatter.field(
            "spark_submit_parameters",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
