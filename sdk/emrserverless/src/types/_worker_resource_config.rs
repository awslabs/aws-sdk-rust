// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cumulative configuration requirements for every worker instance of the worker type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkerResourceConfig {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub cpu: ::std::string::String,
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub memory: ::std::string::String,
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub disk: ::std::option::Option<::std::string::String>,
    /// <p>The disk type for every worker instance of the work type. Shuffle optimized disks have higher performance characteristics and are better for shuffle heavy workloads. Default is <code>STANDARD</code>.</p>
    pub disk_type: ::std::option::Option<::std::string::String>,
}
impl WorkerResourceConfig {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn cpu(&self) -> &str {
        use std::ops::Deref;
        self.cpu.deref()
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn memory(&self) -> &str {
        use std::ops::Deref;
        self.memory.deref()
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn disk(&self) -> ::std::option::Option<&str> {
        self.disk.as_deref()
    }
    /// <p>The disk type for every worker instance of the work type. Shuffle optimized disks have higher performance characteristics and are better for shuffle heavy workloads. Default is <code>STANDARD</code>.</p>
    pub fn disk_type(&self) -> ::std::option::Option<&str> {
        self.disk_type.as_deref()
    }
}
impl WorkerResourceConfig {
    /// Creates a new builder-style object to manufacture [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
    pub fn builder() -> crate::types::builders::WorkerResourceConfigBuilder {
        crate::types::builders::WorkerResourceConfigBuilder::default()
    }
}

/// A builder for [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkerResourceConfigBuilder {
    pub(crate) cpu: ::std::option::Option<::std::string::String>,
    pub(crate) memory: ::std::option::Option<::std::string::String>,
    pub(crate) disk: ::std::option::Option<::std::string::String>,
    pub(crate) disk_type: ::std::option::Option<::std::string::String>,
}
impl WorkerResourceConfigBuilder {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    /// This field is required.
    pub fn cpu(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cpu = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn set_cpu(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cpu = input;
        self
    }
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn get_cpu(&self) -> &::std::option::Option<::std::string::String> {
        &self.cpu
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    /// This field is required.
    pub fn memory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn set_memory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn get_memory(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn disk(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.disk = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn set_disk(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.disk = input;
        self
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn get_disk(&self) -> &::std::option::Option<::std::string::String> {
        &self.disk
    }
    /// <p>The disk type for every worker instance of the work type. Shuffle optimized disks have higher performance characteristics and are better for shuffle heavy workloads. Default is <code>STANDARD</code>.</p>
    pub fn disk_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.disk_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The disk type for every worker instance of the work type. Shuffle optimized disks have higher performance characteristics and are better for shuffle heavy workloads. Default is <code>STANDARD</code>.</p>
    pub fn set_disk_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.disk_type = input;
        self
    }
    /// <p>The disk type for every worker instance of the work type. Shuffle optimized disks have higher performance characteristics and are better for shuffle heavy workloads. Default is <code>STANDARD</code>.</p>
    pub fn get_disk_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.disk_type
    }
    /// Consumes the builder and constructs a [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`cpu`](crate::types::builders::WorkerResourceConfigBuilder::cpu)
    /// - [`memory`](crate::types::builders::WorkerResourceConfigBuilder::memory)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkerResourceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkerResourceConfig {
            cpu: self.cpu.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cpu",
                    "cpu was not specified but it is required when building WorkerResourceConfig",
                )
            })?,
            memory: self.memory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory",
                    "memory was not specified but it is required when building WorkerResourceConfig",
                )
            })?,
            disk: self.disk,
            disk_type: self.disk_type,
        })
    }
}
