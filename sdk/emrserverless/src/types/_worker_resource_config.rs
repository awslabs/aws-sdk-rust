// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cumulative configuration requirements for every worker instance of the worker type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkerResourceConfig {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    #[doc(hidden)]
    pub cpu: std::option::Option<std::string::String>,
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    #[doc(hidden)]
    pub memory: std::option::Option<std::string::String>,
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    #[doc(hidden)]
    pub disk: std::option::Option<std::string::String>,
}
impl WorkerResourceConfig {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn cpu(&self) -> std::option::Option<&str> {
        self.cpu.as_deref()
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn memory(&self) -> std::option::Option<&str> {
        self.memory.as_deref()
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn disk(&self) -> std::option::Option<&str> {
        self.disk.as_deref()
    }
}
impl WorkerResourceConfig {
    /// Creates a new builder-style object to manufacture [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
    pub fn builder() -> crate::types::builders::WorkerResourceConfigBuilder {
        crate::types::builders::WorkerResourceConfigBuilder::default()
    }
}

/// A builder for [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkerResourceConfigBuilder {
    pub(crate) cpu: std::option::Option<std::string::String>,
    pub(crate) memory: std::option::Option<std::string::String>,
    pub(crate) disk: std::option::Option<std::string::String>,
}
impl WorkerResourceConfigBuilder {
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn cpu(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpu = Some(input.into());
        self
    }
    /// <p>The CPU requirements for every worker instance of the worker type.</p>
    pub fn set_cpu(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpu = input;
        self
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn memory(mut self, input: impl Into<std::string::String>) -> Self {
        self.memory = Some(input.into());
        self
    }
    /// <p>The memory requirements for every worker instance of the worker type.</p>
    pub fn set_memory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn disk(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk = Some(input.into());
        self
    }
    /// <p>The disk requirements for every worker instance of the worker type.</p>
    pub fn set_disk(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.disk = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkerResourceConfig`](crate::types::WorkerResourceConfig).
    pub fn build(self) -> crate::types::WorkerResourceConfig {
        crate::types::WorkerResourceConfig {
            cpu: self.cpu,
            memory: self.memory,
            disk: self.disk,
        }
    }
}
