// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_application_id): <p>The ID of the application to update.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_client_token): <p>The client idempotency token of the application to update. Its value must be unique for each request.</p>
    ///   - [`initial_capacity(HashMap<String, InitialCapacityConfig>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::initial_capacity) / [`set_initial_capacity(Option<HashMap<String, InitialCapacityConfig>>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_initial_capacity): <p>The capacity to initialize when the application is updated.</p>
    ///   - [`maximum_capacity(MaximumAllowedResources)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::maximum_capacity) / [`set_maximum_capacity(Option<MaximumAllowedResources>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_maximum_capacity): <p>The maximum capacity to allocate when the application is updated. This is cumulative across all workers at any given point in time during the lifespan of the application. No new resources will be created once any one of the defined limits is hit.</p>
    ///   - [`auto_start_configuration(AutoStartConfig)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::auto_start_configuration) / [`set_auto_start_configuration(Option<AutoStartConfig>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_auto_start_configuration): <p>The configuration for an application to automatically start on job submission.</p>
    ///   - [`auto_stop_configuration(AutoStopConfig)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::auto_stop_configuration) / [`set_auto_stop_configuration(Option<AutoStopConfig>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_auto_stop_configuration): <p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_network_configuration): <p>The network configuration for customer VPC connectivity.</p>
    ///   - [`architecture(Architecture)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::architecture) / [`set_architecture(Option<Architecture>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_architecture): <p>The CPU architecture of an application.</p>
    ///   - [`image_configuration(ImageConfigurationInput)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::image_configuration) / [`set_image_configuration(Option<ImageConfigurationInput>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_image_configuration): <p>The image configuration to be used for all worker types. You can either set this parameter or <code>imageConfiguration</code> for each worker type in <code>WorkerTypeSpecificationInput</code>.</p>
    ///   - [`worker_type_specifications(HashMap<String, WorkerTypeSpecificationInput>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::worker_type_specifications) / [`set_worker_type_specifications(Option<HashMap<String, WorkerTypeSpecificationInput>>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_worker_type_specifications): <p>The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::operation::update_application::UpdateApplicationOutput) with field(s):
    ///   - [`application(Option<Application>)`](crate::operation::update_application::UpdateApplicationOutput::application): <p>Information about the updated application.</p>
    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::operation::update_application::UpdateApplicationError)
    pub fn update_application(
        &self,
    ) -> crate::operation::update_application::builders::UpdateApplicationFluentBuilder {
        crate::operation::update_application::builders::UpdateApplicationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
