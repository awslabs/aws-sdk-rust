// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for EMR Serverless
///
/// Client for invoking operations on EMR Serverless. Each operation on EMR Serverless is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_emrserverless::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_emrserverless::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_emrserverless::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CancelJobRun`](crate::client::fluent_builders::CancelJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::CancelJobRun::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::CancelJobRun::set_application_id): <p>The ID of the application on which the job run will be canceled.</p>
    ///   - [`job_run_id(impl Into<String>)`](crate::client::fluent_builders::CancelJobRun::job_run_id) / [`set_job_run_id(Option<String>)`](crate::client::fluent_builders::CancelJobRun::set_job_run_id): <p>The ID of the job run to cancel.</p>
    /// - On success, responds with [`CancelJobRunOutput`](crate::output::CancelJobRunOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::CancelJobRunOutput::application_id): <p>The output contains the application ID on which the job run is cancelled.</p>
    ///   - [`job_run_id(Option<String>)`](crate::output::CancelJobRunOutput::job_run_id): <p>The output contains the ID of the cancelled job run.</p>
    /// - On failure, responds with [`SdkError<CancelJobRunError>`](crate::error::CancelJobRunError)
    pub fn cancel_job_run(&self) -> crate::client::fluent_builders::CancelJobRun {
        crate::client::fluent_builders::CancelJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateApplication`](crate::client::fluent_builders::CreateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_name): <p>The name of the application.</p>
    ///   - [`release_label(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::release_label) / [`set_release_label(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_release_label): <p>The EMR release associated with the application.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_type): <p>The type of application you want to start, such as Spark or Hive.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_client_token): <p>The client idempotency token of the application to create. Its value must be unique for each request.</p>
    ///   - [`initial_capacity(HashMap<String, InitialCapacityConfig>)`](crate::client::fluent_builders::CreateApplication::initial_capacity) / [`set_initial_capacity(Option<HashMap<String, InitialCapacityConfig>>)`](crate::client::fluent_builders::CreateApplication::set_initial_capacity): <p>The capacity to initialize when the application is created.</p>
    ///   - [`maximum_capacity(MaximumAllowedResources)`](crate::client::fluent_builders::CreateApplication::maximum_capacity) / [`set_maximum_capacity(Option<MaximumAllowedResources>)`](crate::client::fluent_builders::CreateApplication::set_maximum_capacity): <p>The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateApplication::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateApplication::set_tags): <p>The tags assigned to the application.</p>
    ///   - [`auto_start_configuration(AutoStartConfig)`](crate::client::fluent_builders::CreateApplication::auto_start_configuration) / [`set_auto_start_configuration(Option<AutoStartConfig>)`](crate::client::fluent_builders::CreateApplication::set_auto_start_configuration): <p>The configuration for an application to automatically start on job submission.</p>
    ///   - [`auto_stop_configuration(AutoStopConfig)`](crate::client::fluent_builders::CreateApplication::auto_stop_configuration) / [`set_auto_stop_configuration(Option<AutoStopConfig>)`](crate::client::fluent_builders::CreateApplication::set_auto_stop_configuration): <p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::client::fluent_builders::CreateApplication::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::client::fluent_builders::CreateApplication::set_network_configuration): <p>The network configuration for customer VPC connectivity.</p>
    ///   - [`architecture(Architecture)`](crate::client::fluent_builders::CreateApplication::architecture) / [`set_architecture(Option<Architecture>)`](crate::client::fluent_builders::CreateApplication::set_architecture): <p>The CPU architecture of an application.</p>
    ///   - [`image_configuration(ImageConfigurationInput)`](crate::client::fluent_builders::CreateApplication::image_configuration) / [`set_image_configuration(Option<ImageConfigurationInput>)`](crate::client::fluent_builders::CreateApplication::set_image_configuration): <p>The image configuration for all worker types. You can either set this parameter or <code>imageConfiguration</code> for each worker type in <code>workerTypeSpecifications</code>.</p>
    ///   - [`worker_type_specifications(HashMap<String, WorkerTypeSpecificationInput>)`](crate::client::fluent_builders::CreateApplication::worker_type_specifications) / [`set_worker_type_specifications(Option<HashMap<String, WorkerTypeSpecificationInput>>)`](crate::client::fluent_builders::CreateApplication::set_worker_type_specifications): <p>The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::output::CreateApplicationOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::CreateApplicationOutput::application_id): <p>The output contains the application ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateApplicationOutput::name): <p>The output contains the name of the application.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateApplicationOutput::arn): <p>The output contains the ARN of the application.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::error::CreateApplicationError)
    pub fn create_application(&self) -> crate::client::fluent_builders::CreateApplication {
        crate::client::fluent_builders::CreateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplication`](crate::client::fluent_builders::DeleteApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DeleteApplication::set_application_id): <p>The ID of the application that will be deleted.</p>
    /// - On success, responds with [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationError>`](crate::error::DeleteApplicationError)
    pub fn delete_application(&self) -> crate::client::fluent_builders::DeleteApplication {
        crate::client::fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetApplication`](crate::client::fluent_builders::GetApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetApplication::set_application_id): <p>The ID of the application that will be described.</p>
    /// - On success, responds with [`GetApplicationOutput`](crate::output::GetApplicationOutput) with field(s):
    ///   - [`application(Option<Application>)`](crate::output::GetApplicationOutput::application): <p>The output displays information about the specified application.</p>
    /// - On failure, responds with [`SdkError<GetApplicationError>`](crate::error::GetApplicationError)
    pub fn get_application(&self) -> crate::client::fluent_builders::GetApplication {
        crate::client::fluent_builders::GetApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDashboardForJobRun`](crate::client::fluent_builders::GetDashboardForJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetDashboardForJobRun::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetDashboardForJobRun::set_application_id): <p>The ID of the application.</p>
    ///   - [`job_run_id(impl Into<String>)`](crate::client::fluent_builders::GetDashboardForJobRun::job_run_id) / [`set_job_run_id(Option<String>)`](crate::client::fluent_builders::GetDashboardForJobRun::set_job_run_id): <p>The ID of the job run.</p>
    /// - On success, responds with [`GetDashboardForJobRunOutput`](crate::output::GetDashboardForJobRunOutput) with field(s):
    ///   - [`url(Option<String>)`](crate::output::GetDashboardForJobRunOutput::url): <p>The URL to view job run's dashboard.</p>
    /// - On failure, responds with [`SdkError<GetDashboardForJobRunError>`](crate::error::GetDashboardForJobRunError)
    pub fn get_dashboard_for_job_run(
        &self,
    ) -> crate::client::fluent_builders::GetDashboardForJobRun {
        crate::client::fluent_builders::GetDashboardForJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetJobRun`](crate::client::fluent_builders::GetJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetJobRun::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetJobRun::set_application_id): <p>The ID of the application on which the job run is submitted.</p>
    ///   - [`job_run_id(impl Into<String>)`](crate::client::fluent_builders::GetJobRun::job_run_id) / [`set_job_run_id(Option<String>)`](crate::client::fluent_builders::GetJobRun::set_job_run_id): <p>The ID of the job run.</p>
    /// - On success, responds with [`GetJobRunOutput`](crate::output::GetJobRunOutput) with field(s):
    ///   - [`job_run(Option<JobRun>)`](crate::output::GetJobRunOutput::job_run): <p>The output displays information about the job run.</p>
    /// - On failure, responds with [`SdkError<GetJobRunError>`](crate::error::GetJobRunError)
    pub fn get_job_run(&self) -> crate::client::fluent_builders::GetJobRun {
        crate::client::fluent_builders::GetJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplications`](crate::client::fluent_builders::ListApplications) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApplications::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplications::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplications::set_next_token): <p>The token for the next set of application results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApplications::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApplications::set_max_results): <p>The maximum number of applications that can be listed.</p>
    ///   - [`states(Vec<ApplicationState>)`](crate::client::fluent_builders::ListApplications::states) / [`set_states(Option<Vec<ApplicationState>>)`](crate::client::fluent_builders::ListApplications::set_states): <p>An optional filter for application states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.</p>
    /// - On success, responds with [`ListApplicationsOutput`](crate::output::ListApplicationsOutput) with field(s):
    ///   - [`applications(Option<Vec<ApplicationSummary>>)`](crate::output::ListApplicationsOutput::applications): <p>The output lists the specified applications.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationsOutput::next_token): <p>The output displays the token for the next set of application results. This is required for pagination and is available as a response of the previous request.</p>
    /// - On failure, responds with [`SdkError<ListApplicationsError>`](crate::error::ListApplicationsError)
    pub fn list_applications(&self) -> crate::client::fluent_builders::ListApplications {
        crate::client::fluent_builders::ListApplications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListJobRuns`](crate::client::fluent_builders::ListJobRuns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListJobRuns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ListJobRuns::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ListJobRuns::set_application_id): <p>The ID of the application for which to list the job run.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListJobRuns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListJobRuns::set_next_token): <p>The token for the next set of job run results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListJobRuns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListJobRuns::set_max_results): <p>The maximum number of job runs that can be listed.</p>
    ///   - [`created_at_after(DateTime)`](crate::client::fluent_builders::ListJobRuns::created_at_after) / [`set_created_at_after(Option<DateTime>)`](crate::client::fluent_builders::ListJobRuns::set_created_at_after): <p>The lower bound of the option to filter by creation date and time.</p>
    ///   - [`created_at_before(DateTime)`](crate::client::fluent_builders::ListJobRuns::created_at_before) / [`set_created_at_before(Option<DateTime>)`](crate::client::fluent_builders::ListJobRuns::set_created_at_before): <p>The upper bound of the option to filter by creation date and time.</p>
    ///   - [`states(Vec<JobRunState>)`](crate::client::fluent_builders::ListJobRuns::states) / [`set_states(Option<Vec<JobRunState>>)`](crate::client::fluent_builders::ListJobRuns::set_states): <p>An optional filter for job run states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.</p>
    /// - On success, responds with [`ListJobRunsOutput`](crate::output::ListJobRunsOutput) with field(s):
    ///   - [`job_runs(Option<Vec<JobRunSummary>>)`](crate::output::ListJobRunsOutput::job_runs): <p>The output lists information about the specified job runs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListJobRunsOutput::next_token): <p>The output displays the token for the next set of job run results. This is required for pagination and is available as a response of the previous request.</p>
    /// - On failure, responds with [`SdkError<ListJobRunsError>`](crate::error::ListJobRunsError)
    pub fn list_job_runs(&self) -> crate::client::fluent_builders::ListJobRuns {
        crate::client::fluent_builders::ListJobRuns::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags for the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartApplication`](crate::client::fluent_builders::StartApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StartApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StartApplication::set_application_id): <p>The ID of the application to start.</p>
    /// - On success, responds with [`StartApplicationOutput`](crate::output::StartApplicationOutput)

    /// - On failure, responds with [`SdkError<StartApplicationError>`](crate::error::StartApplicationError)
    pub fn start_application(&self) -> crate::client::fluent_builders::StartApplication {
        crate::client::fluent_builders::StartApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartJobRun`](crate::client::fluent_builders::StartJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_application_id): <p>The ID of the application on which to run the job.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_client_token): <p>The client idempotency token of the job run to start. Its value must be unique for each request.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_execution_role_arn): <p>The execution role ARN for the job run.</p>
    ///   - [`job_driver(JobDriver)`](crate::client::fluent_builders::StartJobRun::job_driver) / [`set_job_driver(Option<JobDriver>)`](crate::client::fluent_builders::StartJobRun::set_job_driver): <p>The job driver for the job run.</p>
    ///   - [`configuration_overrides(ConfigurationOverrides)`](crate::client::fluent_builders::StartJobRun::configuration_overrides) / [`set_configuration_overrides(Option<ConfigurationOverrides>)`](crate::client::fluent_builders::StartJobRun::set_configuration_overrides): <p>The configuration overrides for the job run.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartJobRun::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartJobRun::set_tags): <p>The tags assigned to the job run.</p>
    ///   - [`execution_timeout_minutes(i64)`](crate::client::fluent_builders::StartJobRun::execution_timeout_minutes) / [`set_execution_timeout_minutes(Option<i64>)`](crate::client::fluent_builders::StartJobRun::set_execution_timeout_minutes): <p>The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_name): <p>The optional job run name. This doesn't have to be unique.</p>
    /// - On success, responds with [`StartJobRunOutput`](crate::output::StartJobRunOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::StartJobRunOutput::application_id): <p>This output displays the application ID on which the job run was submitted.</p>
    ///   - [`job_run_id(Option<String>)`](crate::output::StartJobRunOutput::job_run_id): <p>The output contains the ID of the started job run.</p>
    ///   - [`arn(Option<String>)`](crate::output::StartJobRunOutput::arn): <p>The output lists the execution role ARN of the job run.</p>
    /// - On failure, responds with [`SdkError<StartJobRunError>`](crate::error::StartJobRunError)
    pub fn start_job_run(&self) -> crate::client::fluent_builders::StartJobRun {
        crate::client::fluent_builders::StartJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopApplication`](crate::client::fluent_builders::StopApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StopApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StopApplication::set_application_id): <p>The ID of the application to stop.</p>
    /// - On success, responds with [`StopApplicationOutput`](crate::output::StopApplicationOutput)

    /// - On failure, responds with [`SdkError<StopApplicationError>`](crate::error::StopApplicationError)
    pub fn stop_application(&self) -> crate::client::fluent_builders::StopApplication {
        crate::client::fluent_builders::StopApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The keys of the tags to be removed.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::client::fluent_builders::UpdateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_application_id): <p>The ID of the application to update.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_client_token): <p>The client idempotency token of the application to update. Its value must be unique for each request.</p>
    ///   - [`initial_capacity(HashMap<String, InitialCapacityConfig>)`](crate::client::fluent_builders::UpdateApplication::initial_capacity) / [`set_initial_capacity(Option<HashMap<String, InitialCapacityConfig>>)`](crate::client::fluent_builders::UpdateApplication::set_initial_capacity): <p>The capacity to initialize when the application is updated.</p>
    ///   - [`maximum_capacity(MaximumAllowedResources)`](crate::client::fluent_builders::UpdateApplication::maximum_capacity) / [`set_maximum_capacity(Option<MaximumAllowedResources>)`](crate::client::fluent_builders::UpdateApplication::set_maximum_capacity): <p>The maximum capacity to allocate when the application is updated. This is cumulative across all workers at any given point in time during the lifespan of the application. No new resources will be created once any one of the defined limits is hit.</p>
    ///   - [`auto_start_configuration(AutoStartConfig)`](crate::client::fluent_builders::UpdateApplication::auto_start_configuration) / [`set_auto_start_configuration(Option<AutoStartConfig>)`](crate::client::fluent_builders::UpdateApplication::set_auto_start_configuration): <p>The configuration for an application to automatically start on job submission.</p>
    ///   - [`auto_stop_configuration(AutoStopConfig)`](crate::client::fluent_builders::UpdateApplication::auto_stop_configuration) / [`set_auto_stop_configuration(Option<AutoStopConfig>)`](crate::client::fluent_builders::UpdateApplication::set_auto_stop_configuration): <p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::client::fluent_builders::UpdateApplication::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::client::fluent_builders::UpdateApplication::set_network_configuration): <p>The network configuration for customer VPC connectivity.</p>
    ///   - [`architecture(Architecture)`](crate::client::fluent_builders::UpdateApplication::architecture) / [`set_architecture(Option<Architecture>)`](crate::client::fluent_builders::UpdateApplication::set_architecture): <p>The CPU architecture of an application.</p>
    ///   - [`image_configuration(ImageConfigurationInput)`](crate::client::fluent_builders::UpdateApplication::image_configuration) / [`set_image_configuration(Option<ImageConfigurationInput>)`](crate::client::fluent_builders::UpdateApplication::set_image_configuration): <p>The image configuration to be used for all worker types. You can either set this parameter or <code>imageConfiguration</code> for each worker type in <code>WorkerTypeSpecificationInput</code>.</p>
    ///   - [`worker_type_specifications(HashMap<String, WorkerTypeSpecificationInput>)`](crate::client::fluent_builders::UpdateApplication::worker_type_specifications) / [`set_worker_type_specifications(Option<HashMap<String, WorkerTypeSpecificationInput>>)`](crate::client::fluent_builders::UpdateApplication::set_worker_type_specifications): <p>The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput) with field(s):
    ///   - [`application(Option<Application>)`](crate::output::UpdateApplicationOutput::application): <p>Information about the updated application.</p>
    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::error::UpdateApplicationError)
    pub fn update_application(&self) -> crate::client::fluent_builders::UpdateApplication {
        crate::client::fluent_builders::UpdateApplication::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
