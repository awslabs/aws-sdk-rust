// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_cancel_job_run;

pub(crate) mod shape_create_application;

pub(crate) mod shape_delete_application;

pub(crate) mod shape_get_application;

pub(crate) mod shape_get_dashboard_for_job_run;

pub(crate) mod shape_get_job_run;

pub(crate) mod shape_list_applications;

pub(crate) mod shape_list_job_runs;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_start_application;

pub(crate) mod shape_start_job_run;

pub(crate) mod shape_stop_application;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_application;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_application_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_job_run_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_update_application_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_application;

pub(crate) mod shape_application_list;

pub(crate) mod shape_auto_start_config;

pub(crate) mod shape_auto_stop_config;

pub(crate) mod shape_configuration_overrides;

pub(crate) mod shape_image_configuration_input;

pub(crate) mod shape_initial_capacity_config;

pub(crate) mod shape_job_driver;

pub(crate) mod shape_job_run;

pub(crate) mod shape_job_runs;

pub(crate) mod shape_maximum_allowed_resources;

pub(crate) mod shape_network_configuration;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_worker_type_specification_input;

pub(crate) mod shape_application_summary;

pub(crate) mod shape_configuration;

pub(crate) mod shape_hive;

pub(crate) mod shape_image_configuration;

pub(crate) mod shape_initial_capacity_config_map;

pub(crate) mod shape_job_run_summary;

pub(crate) mod shape_monitoring_configuration;

pub(crate) mod shape_spark_submit;

pub(crate) mod shape_total_resource_utilization;

pub(crate) mod shape_worker_resource_config;

pub(crate) mod shape_worker_type_specification_map;

pub(crate) mod shape_configuration_list;

pub(crate) mod shape_managed_persistence_monitoring_configuration;

pub(crate) mod shape_s3_monitoring_configuration;

pub(crate) mod shape_security_group_ids;

pub(crate) mod shape_subnet_ids;

pub(crate) mod shape_worker_type_specification;

pub(crate) mod shape_entry_point_arguments;

pub(crate) mod shape_sensitive_properties_map;
