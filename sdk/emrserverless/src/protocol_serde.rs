// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_cancel_job_run;

pub(crate) mod shape_create_application;

pub(crate) mod shape_delete_application;

pub(crate) mod shape_get_application;

pub(crate) mod shape_get_dashboard_for_job_run;

pub(crate) mod shape_get_job_run;

pub(crate) mod shape_list_applications;

pub(crate) mod shape_list_job_runs;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_start_application;

pub(crate) mod shape_start_job_run;

pub(crate) mod shape_stop_application;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_application;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_application_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_job_run_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_update_application_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_application;

pub(crate) mod shape_application_list;

pub(crate) mod shape_auto_start_config;

pub(crate) mod shape_auto_stop_config;

pub(crate) mod shape_configuration;

pub(crate) mod shape_configuration_overrides;

pub(crate) mod shape_image_configuration_input;

pub(crate) mod shape_initial_capacity_config;

pub(crate) mod shape_job_driver;

pub(crate) mod shape_job_run;

pub(crate) mod shape_job_runs;

pub(crate) mod shape_maximum_allowed_resources;

pub(crate) mod shape_monitoring_configuration;

pub(crate) mod shape_network_configuration;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_worker_type_specification_input;

pub(crate) mod shape_application_summary;

pub(crate) mod shape_cloud_watch_logging_configuration;

pub(crate) mod shape_configuration_list;

pub(crate) mod shape_hive;

pub(crate) mod shape_image_configuration;

pub(crate) mod shape_initial_capacity_config_map;

pub(crate) mod shape_job_run_summary;

pub(crate) mod shape_managed_persistence_monitoring_configuration;

pub(crate) mod shape_prometheus_monitoring_configuration;

pub(crate) mod shape_resource_utilization;

pub(crate) mod shape_s3_monitoring_configuration;

pub(crate) mod shape_spark_submit;

pub(crate) mod shape_total_resource_utilization;

pub(crate) mod shape_worker_resource_config;

pub(crate) mod shape_worker_type_specification_map;

pub(crate) mod shape_security_group_ids;

pub(crate) mod shape_subnet_ids;

pub(crate) mod shape_worker_type_specification;

pub(crate) mod shape_entry_point_arguments;

pub(crate) mod shape_log_type_map;

pub(crate) mod shape_sensitive_properties_map;

pub(crate) mod shape_log_type_list;
