// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetObject`](crate::operation::get_object::builders::GetObjectFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`path(impl Into<String>)`](crate::operation::get_object::builders::GetObjectFluentBuilder::path) / [`set_path(Option<String>)`](crate::operation::get_object::builders::GetObjectFluentBuilder::set_path):<br>required: **true**<br><p>The path (including the file name) where the object is stored in the container. Format: <folder name>   /   <folder name>    /    <file name></file>   </folder>  </folder></p>  <p>For example, to upload the file <code>mlaw.avi</code> to the folder path <code>premium\canada</code> in the container <code>movies</code>, enter the path <code>premium/canada/mlaw.avi</code>.</p>  <p>Do not include the container name in this path.</p>  <p>If the path includes any folders that don't exist yet, the service creates them. For example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the <code>premium</code> folder. You then have two subfolders, <code>usa</code> and <code>canada</code>, in the <code>premium</code> folder. </p>  <p>There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.</p>  <p>For more information about folders and how they exist in a container, see the <a href="http://docs.aws.amazon.com/mediastore/latest/ug/">AWS Elemental MediaStore User Guide</a>.</p>  <p>The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. </p><br>
    ///   - [`range(impl Into<String>)`](crate::operation::get_object::builders::GetObjectFluentBuilder::range) / [`set_range(Option<String>)`](crate::operation::get_object::builders::GetObjectFluentBuilder::set_range):<br>required: **false**<br><p>The range bytes of an object to retrieve. For more information about the <code>Range</code> header, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>. AWS Elemental MediaStore ignores this header for partially uploaded objects that have streaming upload availability.</p><br>
    /// - On success, responds with [`GetObjectOutput`](crate::operation::get_object::GetObjectOutput) with field(s):
    ///   - [`body(ByteStream)`](crate::operation::get_object::GetObjectOutput::body): <p>The bytes of the object. </p>
    ///   - [`cache_control(Option<String>)`](crate::operation::get_object::GetObjectOutput::cache_control): <p>An optional <code>CacheControl</code> header that allows the caller to control the object's cache behavior. Headers can be passed in as specified in the HTTP spec at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>  <p>Headers with a custom user-defined value are also accepted.</p>
    ///   - [`content_range(Option<String>)`](crate::operation::get_object::GetObjectOutput::content_range): <p>The range of bytes to retrieve.</p>
    ///   - [`content_length(Option<i64>)`](crate::operation::get_object::GetObjectOutput::content_length): <p>The length of the object in bytes.</p>
    ///   - [`content_type(Option<String>)`](crate::operation::get_object::GetObjectOutput::content_type): <p>The content type of the object.</p>
    ///   - [`e_tag(Option<String>)`](crate::operation::get_object::GetObjectOutput::e_tag): <p>The ETag that represents a unique instance of the object.</p>
    ///   - [`last_modified(Option<DateTime>)`](crate::operation::get_object::GetObjectOutput::last_modified): <p>The date and time that the object was last modified.</p>
    ///   - [`status_code(i32)`](crate::operation::get_object::GetObjectOutput::status_code): <p>The HTML status code of the request. Status codes ranging from 200 to 299 indicate success. All other status codes indicate the type of error that occurred.</p>
    /// - On failure, responds with [`SdkError<GetObjectError>`](crate::operation::get_object::GetObjectError)
    pub fn get_object(&self) -> crate::operation::get_object::builders::GetObjectFluentBuilder {
        crate::operation::get_object::builders::GetObjectFluentBuilder::new(self.handle.clone())
    }
}
