// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A metadata entry for a folder or object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Item {
    /// <p>The name of the item.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The item type (folder or object).</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ItemType>,
    /// <p>The ETag that represents a unique instance of the item.</p>
    #[doc(hidden)]
    pub e_tag: std::option::Option<std::string::String>,
    /// <p>The date and time that the item was last modified.</p>
    #[doc(hidden)]
    pub last_modified: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The content type of the item.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The length of the item in bytes.</p>
    #[doc(hidden)]
    pub content_length: std::option::Option<i64>,
}
impl Item {
    /// <p>The name of the item.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The item type (folder or object).</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ItemType> {
        self.r#type.as_ref()
    }
    /// <p>The ETag that represents a unique instance of the item.</p>
    pub fn e_tag(&self) -> std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>The date and time that the item was last modified.</p>
    pub fn last_modified(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified.as_ref()
    }
    /// <p>The content type of the item.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The length of the item in bytes.</p>
    pub fn content_length(&self) -> std::option::Option<i64> {
        self.content_length
    }
}
impl Item {
    /// Creates a new builder-style object to manufacture [`Item`](crate::types::Item).
    pub fn builder() -> crate::types::builders::ItemBuilder {
        crate::types::builders::ItemBuilder::default()
    }
}

/// A builder for [`Item`](crate::types::Item).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ItemBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ItemType>,
    pub(crate) e_tag: std::option::Option<std::string::String>,
    pub(crate) last_modified: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) content_length: std::option::Option<i64>,
}
impl ItemBuilder {
    /// <p>The name of the item.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the item.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The item type (folder or object).</p>
    pub fn r#type(mut self, input: crate::types::ItemType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The item type (folder or object).</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ItemType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ETag that represents a unique instance of the item.</p>
    pub fn e_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.e_tag = Some(input.into());
        self
    }
    /// <p>The ETag that represents a unique instance of the item.</p>
    pub fn set_e_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The date and time that the item was last modified.</p>
    pub fn last_modified(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified = Some(input);
        self
    }
    /// <p>The date and time that the item was last modified.</p>
    pub fn set_last_modified(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified = input;
        self
    }
    /// <p>The content type of the item.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type of the item.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The length of the item in bytes.</p>
    pub fn content_length(mut self, input: i64) -> Self {
        self.content_length = Some(input);
        self
    }
    /// <p>The length of the item in bytes.</p>
    pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
        self.content_length = input;
        self
    }
    /// Consumes the builder and constructs a [`Item`](crate::types::Item).
    pub fn build(self) -> crate::types::Item {
        crate::types::Item {
            name: self.name,
            r#type: self.r#type,
            e_tag: self.e_tag,
            last_modified: self.last_modified,
            content_type: self.content_type,
            content_length: self.content_length,
        }
    }
}
