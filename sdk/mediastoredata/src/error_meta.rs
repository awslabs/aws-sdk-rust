// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The specified container was not found for the specified account.</p>
    ContainerNotFoundException(crate::types::error::ContainerNotFoundException),
    /// <p>The service is temporarily unavailable.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>Could not perform an operation on an object that does not exist.</p>
    ObjectNotFoundException(crate::types::error::ObjectNotFoundException),
    /// <p>The requested content range is not valid.</p>
    RequestedRangeNotSatisfiableException(crate::types::error::RequestedRangeNotSatisfiableException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ContainerNotFoundException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ObjectNotFoundException(inner) => inner.fmt(f),
            Error::RequestedRangeNotSatisfiableException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_object::DeleteObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_object::DeleteObjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_object::DeleteObjectError> for Error {
    fn from(err: crate::operation::delete_object::DeleteObjectError) -> Self {
        match err {
            crate::operation::delete_object::DeleteObjectError::ContainerNotFoundException(inner) => Error::ContainerNotFoundException(inner),
            crate::operation::delete_object::DeleteObjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_object::DeleteObjectError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::delete_object::DeleteObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_object::DescribeObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_object::DescribeObjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_object::DescribeObjectError> for Error {
    fn from(err: crate::operation::describe_object::DescribeObjectError) -> Self {
        match err {
            crate::operation::describe_object::DescribeObjectError::ContainerNotFoundException(inner) => Error::ContainerNotFoundException(inner),
            crate::operation::describe_object::DescribeObjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_object::DescribeObjectError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::describe_object::DescribeObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_object::GetObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_object::GetObjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_object::GetObjectError> for Error {
    fn from(err: crate::operation::get_object::GetObjectError) -> Self {
        match err {
            crate::operation::get_object::GetObjectError::ContainerNotFoundException(inner) => Error::ContainerNotFoundException(inner),
            crate::operation::get_object::GetObjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_object::GetObjectError::ObjectNotFoundException(inner) => Error::ObjectNotFoundException(inner),
            crate::operation::get_object::GetObjectError::RequestedRangeNotSatisfiableException(inner) => {
                Error::RequestedRangeNotSatisfiableException(inner)
            }
            crate::operation::get_object::GetObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_items::ListItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_items::ListItemsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_items::ListItemsError> for Error {
    fn from(err: crate::operation::list_items::ListItemsError) -> Self {
        match err {
            crate::operation::list_items::ListItemsError::ContainerNotFoundException(inner) => Error::ContainerNotFoundException(inner),
            crate::operation::list_items::ListItemsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_items::ListItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_object::PutObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_object::PutObjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_object::PutObjectError> for Error {
    fn from(err: crate::operation::put_object::PutObjectError) -> Self {
        match err {
            crate::operation::put_object::PutObjectError::ContainerNotFoundException(inner) => Error::ContainerNotFoundException(inner),
            crate::operation::put_object::PutObjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::put_object::PutObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ContainerNotFoundException(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::ObjectNotFoundException(inner) => inner.source(),
            Error::RequestedRangeNotSatisfiableException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ContainerNotFoundException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::ObjectNotFoundException(e) => e.request_id(),
            Self::RequestedRangeNotSatisfiableException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
