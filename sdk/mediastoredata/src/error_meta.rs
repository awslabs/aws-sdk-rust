// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified container was not found for the specified account.</p>
    ContainerNotFoundException(crate::error::ContainerNotFoundException),
    /// <p>The service is temporarily unavailable.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>Could not perform an operation on an object that does not exist.</p>
    ObjectNotFoundException(crate::error::ObjectNotFoundException),
    /// <p>The requested content range is not valid.</p>
    RequestedRangeNotSatisfiableException(crate::error::RequestedRangeNotSatisfiableException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ContainerNotFoundException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::ObjectNotFoundException(inner) => inner.fmt(f),
            Error::RequestedRangeNotSatisfiableException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteObjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteObjectError> for Error {
    fn from(err: crate::error::DeleteObjectError) -> Self {
        match err {
            crate::error::DeleteObjectError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DeleteObjectError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteObjectError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DeleteObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeObjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeObjectError> for Error {
    fn from(err: crate::error::DescribeObjectError) -> Self {
        match err {
            crate::error::DescribeObjectError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::DescribeObjectError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeObjectError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DescribeObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetObjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetObjectError> for Error {
    fn from(err: crate::error::GetObjectError) -> Self {
        match err {
            crate::error::GetObjectError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::GetObjectError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetObjectError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::GetObjectError::RequestedRangeNotSatisfiableException(inner) => {
                Error::RequestedRangeNotSatisfiableException(inner)
            }
            crate::error::GetObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListItemsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListItemsError> for Error {
    fn from(err: crate::error::ListItemsError) -> Self {
        match err {
            crate::error::ListItemsError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::ListItemsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutObjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutObjectError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutObjectError> for Error {
    fn from(err: crate::error::PutObjectError) -> Self {
        match err {
            crate::error::PutObjectError::ContainerNotFoundException(inner) => {
                Error::ContainerNotFoundException(inner)
            }
            crate::error::PutObjectError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutObjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ContainerNotFoundException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::ObjectNotFoundException(e) => e.request_id(),
            Self::RequestedRangeNotSatisfiableException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
