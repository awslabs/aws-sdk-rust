// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_set_source_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SetSourceRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.decryption {
        #[allow(unused_mut)]
        let mut object_2 = object.key("decryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.entitlement_arn {
        object.key("entitlementArn").string(var_4.as_str());
    }
    if input.ingest_port != 0 {
        object.key("ingestPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ingest_port).into()),
        );
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.max_latency != 0 {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_latency).into()),
        );
    }
    if input.max_sync_buffer != 0 {
        object.key("maxSyncBuffer").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_sync_buffer).into()),
        );
    }
    if let Some(var_5) = &input.media_stream_source_configurations {
        let mut array_6 = object.key("mediaStreamSourceConfigurations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_media_stream_source_configuration_request::ser_media_stream_source_configuration_request(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if input.min_latency != 0 {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_latency).into()),
        );
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.protocol {
        object.key("protocol").string(var_10.as_str());
    }
    if input.sender_control_port != 0 {
        object.key("senderControlPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sender_control_port).into()),
        );
    }
    if let Some(var_11) = &input.sender_ip_address {
        object.key("senderIpAddress").string(var_11.as_str());
    }
    if let Some(var_12) = &input.source_listener_address {
        object.key("sourceListenerAddress").string(var_12.as_str());
    }
    if input.source_listener_port != 0 {
        object.key("sourceListenerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.source_listener_port).into()),
        );
    }
    if let Some(var_13) = &input.stream_id {
        object.key("streamId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.vpc_interface_name {
        object.key("vpcInterfaceName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.whitelist_cidr {
        object.key("whitelistCidr").string(var_15.as_str());
    }
    Ok(())
}
