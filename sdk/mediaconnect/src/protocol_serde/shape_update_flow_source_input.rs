// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_flow_source_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_flow_source::UpdateFlowSourceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.decryption {
        #[allow(unused_mut)]
        let mut object_2 = object.key("decryption").start_object();
        crate::protocol_serde::shape_update_encryption::ser_update_encryption(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.entitlement_arn {
        object.key("entitlementArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.gateway_bridge_source {
        #[allow(unused_mut)]
        let mut object_6 = object.key("gatewayBridgeSource").start_object();
        crate::protocol_serde::shape_update_gateway_bridge_source_request::ser_update_gateway_bridge_source_request(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.ingest_port {
        object.key("ingestPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.max_bitrate {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.max_latency {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.max_sync_buffer {
        object.key("maxSyncBuffer").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.media_stream_source_configurations {
        let mut array_12 = object.key("mediaStreamSourceConfigurations").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_media_stream_source_configuration_request::ser_media_stream_source_configuration_request(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.min_latency {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.protocol {
        object.key("protocol").string(var_16.as_str());
    }
    if let Some(var_17) = &input.sender_control_port {
        object.key("senderControlPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.sender_ip_address {
        object.key("senderIpAddress").string(var_18.as_str());
    }
    if let Some(var_19) = &input.source_listener_address {
        object.key("sourceListenerAddress").string(var_19.as_str());
    }
    if let Some(var_20) = &input.source_listener_port {
        object.key("sourceListenerPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.stream_id {
        object.key("streamId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.vpc_interface_name {
        object.key("vpcInterfaceName").string(var_22.as_str());
    }
    if let Some(var_23) = &input.whitelist_cidr {
        object.key("whitelistCidr").string(var_23.as_str());
    }
    Ok(())
}
