// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_flow_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::stop_flow::StopFlowOutput, crate::operation::stop_flow::StopFlowError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::stop_flow::StopFlowError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::stop_flow::StopFlowError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bad_request_exception_correct_errors(output).build()
            };
            tmp
        }),
        "ForbiddenException" => crate::operation::stop_flow::StopFlowError::ForbiddenException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ForbiddenExceptionBuilder::default();
                output = crate::protocol_serde::shape_forbidden_exception::de_forbidden_exception_json_err(_response_body, output)
                    .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::forbidden_exception_correct_errors(output).build()
            };
            tmp
        }),
        "InternalServerErrorException" => crate::operation::stop_flow::StopFlowError::InternalServerErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_internal_server_error_exception::de_internal_server_error_exception_json_err(_response_body, output)
                        .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_error_exception_correct_errors(output).build()
            };
            tmp
        }),
        "NotFoundException" => crate::operation::stop_flow::StopFlowError::NotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_not_found_exception::de_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::not_found_exception_correct_errors(output).build()
            };
            tmp
        }),
        "ServiceUnavailableException" => crate::operation::stop_flow::StopFlowError::ServiceUnavailableException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceUnavailableExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_service_unavailable_exception::de_service_unavailable_exception_json_err(_response_body, output)
                        .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_unavailable_exception_correct_errors(output).build()
            };
            tmp
        }),
        "TooManyRequestsException" => crate::operation::stop_flow::StopFlowError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                    .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::too_many_requests_exception_correct_errors(output).build()
            };
            tmp
        }),
        _ => crate::operation::stop_flow::StopFlowError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_flow_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::stop_flow::StopFlowOutput, crate::operation::stop_flow::StopFlowError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::stop_flow::builders::StopFlowOutputBuilder::default();
        output = crate::protocol_serde::shape_stop_flow::de_stop_flow(_response_body, output)
            .map_err(crate::operation::stop_flow::StopFlowError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub(crate) fn de_stop_flow(
    value: &[u8],
    mut builder: crate::operation::stop_flow::builders::StopFlowOutputBuilder,
) -> Result<crate::operation::stop_flow::builders::StopFlowOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "flowArn" => {
                    builder = builder.set_flow_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "status" => {
                    builder = builder.set_status(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::Status::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
