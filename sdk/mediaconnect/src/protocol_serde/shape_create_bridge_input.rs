// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_bridge_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_bridge::CreateBridgeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.egress_gateway_bridge {
        #[allow(unused_mut)]
        let mut object_2 = object.key("egressGatewayBridge").start_object();
        crate::protocol_serde::shape_add_egress_gateway_bridge_request::ser_add_egress_gateway_bridge_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.ingress_gateway_bridge {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ingressGatewayBridge").start_object();
        crate::protocol_serde::shape_add_ingress_gateway_bridge_request::ser_add_ingress_gateway_bridge_request(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.outputs {
        let mut array_7 = object.key("outputs").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_add_bridge_output_request::ser_add_bridge_output_request(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.placement_arn {
        object.key("placementArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.source_failover_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("sourceFailoverConfig").start_object();
        crate::protocol_serde::shape_failover_config::ser_failover_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.sources {
        let mut array_14 = object.key("sources").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_add_bridge_source_request::ser_add_bridge_source_request(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}
