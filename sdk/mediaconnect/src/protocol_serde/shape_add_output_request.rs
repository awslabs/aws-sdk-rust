// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_add_output_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AddOutputRequest,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cidr_allow_list {
        let mut array_2 = object.key("cidrAllowList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.destination {
        object.key("destination").string(var_5.as_str());
    }
    if let Some(var_6) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_7 = object.key("encryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.max_latency {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.media_stream_output_configurations {
        let mut array_10 = object.key("mediaStreamOutputConfigurations").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_media_stream_output_configuration_request::ser_media_stream_output_configuration_request(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.min_latency {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.protocol {
        object.key("protocol").string(var_16.as_str());
    }
    if let Some(var_17) = &input.remote_id {
        object.key("remoteId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.sender_control_port {
        object.key("senderControlPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.smoothing_latency {
        object.key("smoothingLatency").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.stream_id {
        object.key("streamId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.vpc_interface_attachment {
        #[allow(unused_mut)]
        let mut object_22 = object.key("vpcInterfaceAttachment").start_object();
        crate::protocol_serde::shape_vpc_interface_attachment::ser_vpc_interface_attachment(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
