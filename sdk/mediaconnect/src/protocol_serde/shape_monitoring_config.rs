// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_monitoring_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MonitoringConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.thumbnail_state {
        object.key("thumbnailState").string(var_1.as_str());
    }
    if let Some(var_2) = &input.audio_monitoring_settings {
        let mut array_3 = object.key("audioMonitoringSettings").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_audio_monitoring_setting::ser_audio_monitoring_setting(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.content_quality_analysis_state {
        object.key("contentQualityAnalysisState").string(var_6.as_str());
    }
    if let Some(var_7) = &input.video_monitoring_settings {
        let mut array_8 = object.key("videoMonitoringSettings").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_video_monitoring_setting::ser_video_monitoring_setting(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub(crate) fn de_monitoring_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::MonitoringConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MonitoringConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "thumbnailState" => {
                            builder = builder.set_thumbnail_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ThumbnailState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "audioMonitoringSettings" => {
                            builder = builder.set_audio_monitoring_settings(
                                crate::protocol_serde::shape_list_of_audio_monitoring_setting::de_list_of_audio_monitoring_setting(tokens)?,
                            );
                        }
                        "contentQualityAnalysisState" => {
                            builder = builder.set_content_quality_analysis_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ContentQualityAnalysisState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "videoMonitoringSettings" => {
                            builder = builder.set_video_monitoring_settings(
                                crate::protocol_serde::shape_list_of_video_monitoring_setting::de_list_of_video_monitoring_setting(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
