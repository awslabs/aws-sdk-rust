// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    AddFlowOutputs420Exception(crate::types::error::AddFlowOutputs420Exception),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    BadRequestException(crate::types::error::BadRequestException),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    CreateFlow420Exception(crate::types::error::CreateFlow420Exception),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    ForbiddenException(crate::types::error::ForbiddenException),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    GrantFlowEntitlements420Exception(crate::types::error::GrantFlowEntitlements420Exception),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    NotFoundException(crate::types::error::NotFoundException),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AddFlowOutputs420Exception(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::CreateFlow420Exception(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::GrantFlowEntitlements420Exception(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_flow_media_streams::AddFlowMediaStreamsError> for Error {
    fn from(err: crate::operation::add_flow_media_streams::AddFlowMediaStreamsError) -> Self {
        match err {
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::add_flow_media_streams::AddFlowMediaStreamsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_flow_outputs::AddFlowOutputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_flow_outputs::AddFlowOutputsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_flow_outputs::AddFlowOutputsError> for Error {
    fn from(err: crate::operation::add_flow_outputs::AddFlowOutputsError) -> Self {
        match err {
            crate::operation::add_flow_outputs::AddFlowOutputsError::AddFlowOutputs420Exception(inner) => Error::AddFlowOutputs420Exception(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::add_flow_outputs::AddFlowOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_flow_sources::AddFlowSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_flow_sources::AddFlowSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_flow_sources::AddFlowSourcesError> for Error {
    fn from(err: crate::operation::add_flow_sources::AddFlowSourcesError) -> Self {
        match err {
            crate::operation::add_flow_sources::AddFlowSourcesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::add_flow_sources::AddFlowSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError> for Error {
    fn from(err: crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError) -> Self {
        match err {
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::add_flow_vpc_interfaces::AddFlowVpcInterfacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_flow::CreateFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_flow::CreateFlowError> for Error {
    fn from(err: crate::operation::create_flow::CreateFlowError) -> Self {
        match err {
            crate::operation::create_flow::CreateFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_flow::CreateFlowError::CreateFlow420Exception(inner) => {
                Error::CreateFlow420Exception(inner)
            }
            crate::operation::create_flow::CreateFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_flow::CreateFlowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_flow::CreateFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_flow::CreateFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_flow::CreateFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_flow::DeleteFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_flow::DeleteFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_flow::DeleteFlowError> for Error {
    fn from(err: crate::operation::delete_flow::DeleteFlowError) -> Self {
        match err {
            crate::operation::delete_flow::DeleteFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_flow::DeleteFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_flow::DescribeFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_flow::DescribeFlowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_flow::DescribeFlowError> for Error {
    fn from(err: crate::operation::describe_flow::DescribeFlowError) -> Self {
        match err {
            crate::operation::describe_flow::DescribeFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::describe_flow::DescribeFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::describe_flow::DescribeFlowError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::describe_flow::DescribeFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_flow::DescribeFlowError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_flow::DescribeFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_flow::DescribeFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_offering::DescribeOfferingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_offering::DescribeOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_offering::DescribeOfferingError> for Error {
    fn from(err: crate::operation::describe_offering::DescribeOfferingError) -> Self {
        match err {
            crate::operation::describe_offering::DescribeOfferingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_offering::DescribeOfferingError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_offering::DescribeOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_offering::DescribeOfferingError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_offering::DescribeOfferingError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_offering::DescribeOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_reservation::DescribeReservationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_reservation::DescribeReservationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_reservation::DescribeReservationError> for Error {
    fn from(err: crate::operation::describe_reservation::DescribeReservationError) -> Self {
        match err {
            crate::operation::describe_reservation::DescribeReservationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_reservation::DescribeReservationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_reservation::DescribeReservationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_reservation::DescribeReservationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_reservation::DescribeReservationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_reservation::DescribeReservationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError> for Error {
    fn from(err: crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError) -> Self {
        match err {
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::GrantFlowEntitlements420Exception(inner) => Error::GrantFlowEntitlements420Exception(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::grant_flow_entitlements::GrantFlowEntitlementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_entitlements::ListEntitlementsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_entitlements::ListEntitlementsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_entitlements::ListEntitlementsError> for Error {
    fn from(err: crate::operation::list_entitlements::ListEntitlementsError) -> Self {
        match err {
            crate::operation::list_entitlements::ListEntitlementsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_entitlements::ListEntitlementsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_entitlements::ListEntitlementsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_entitlements::ListEntitlementsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_entitlements::ListEntitlementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_flows::ListFlowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_flows::ListFlowsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_flows::ListFlowsError> for Error {
    fn from(err: crate::operation::list_flows::ListFlowsError) -> Self {
        match err {
            crate::operation::list_flows::ListFlowsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_flows::ListFlowsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_flows::ListFlowsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_flows::ListFlowsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_flows::ListFlowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_offerings::ListOfferingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_offerings::ListOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_offerings::ListOfferingsError> for Error {
    fn from(err: crate::operation::list_offerings::ListOfferingsError) -> Self {
        match err {
            crate::operation::list_offerings::ListOfferingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_offerings::ListOfferingsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::list_offerings::ListOfferingsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::list_offerings::ListOfferingsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::list_offerings::ListOfferingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_reservations::ListReservationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_reservations::ListReservationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_reservations::ListReservationsError> for Error {
    fn from(err: crate::operation::list_reservations::ListReservationsError) -> Self {
        match err {
            crate::operation::list_reservations::ListReservationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_reservations::ListReservationsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_reservations::ListReservationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_reservations::ListReservationsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_reservations::ListReservationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_offering::PurchaseOfferingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::purchase_offering::PurchaseOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::purchase_offering::PurchaseOfferingError> for Error {
    fn from(err: crate::operation::purchase_offering::PurchaseOfferingError) -> Self {
        match err {
            crate::operation::purchase_offering::PurchaseOfferingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::purchase_offering::PurchaseOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError> for Error {
    fn from(err: crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError) -> Self {
        match err {
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::remove_flow_media_stream::RemoveFlowMediaStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_output::RemoveFlowOutputError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_output::RemoveFlowOutputError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_flow_output::RemoveFlowOutputError> for Error {
    fn from(err: crate::operation::remove_flow_output::RemoveFlowOutputError) -> Self {
        match err {
            crate::operation::remove_flow_output::RemoveFlowOutputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::remove_flow_output::RemoveFlowOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_source::RemoveFlowSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_source::RemoveFlowSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_flow_source::RemoveFlowSourceError> for Error {
    fn from(err: crate::operation::remove_flow_source::RemoveFlowSourceError) -> Self {
        match err {
            crate::operation::remove_flow_source::RemoveFlowSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::remove_flow_source::RemoveFlowSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError> for Error {
    fn from(err: crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError) -> Self {
        match err {
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError> for Error {
    fn from(err: crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError) -> Self {
        match err {
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::revoke_flow_entitlement::RevokeFlowEntitlementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_flow::StartFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::start_flow::StartFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_flow::StartFlowError> for Error {
    fn from(err: crate::operation::start_flow::StartFlowError) -> Self {
        match err {
            crate::operation::start_flow::StartFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::start_flow::StartFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::start_flow::StartFlowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_flow::StartFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::start_flow::StartFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::start_flow::StartFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::start_flow::StartFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::stop_flow::StopFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::stop_flow::StopFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_flow::StopFlowError> for Error {
    fn from(err: crate::operation::stop_flow::StopFlowError) -> Self {
        match err {
            crate::operation::stop_flow::StopFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::stop_flow::StopFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::stop_flow::StopFlowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::stop_flow::StopFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::stop_flow::StopFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::stop_flow::StopFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::stop_flow::StopFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_flow::UpdateFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_flow::UpdateFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow::UpdateFlowError> for Error {
    fn from(err: crate::operation::update_flow::UpdateFlowError) -> Self {
        match err {
            crate::operation::update_flow::UpdateFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_flow::UpdateFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow_entitlement::UpdateFlowEntitlementError> for Error {
    fn from(err: crate::operation::update_flow_entitlement::UpdateFlowEntitlementError) -> Self {
        match err {
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_flow_entitlement::UpdateFlowEntitlementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError> for Error {
    fn from(err: crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError) -> Self {
        match err {
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_flow_output::UpdateFlowOutputError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_flow_output::UpdateFlowOutputError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow_output::UpdateFlowOutputError> for Error {
    fn from(err: crate::operation::update_flow_output::UpdateFlowOutputError) -> Self {
        match err {
            crate::operation::update_flow_output::UpdateFlowOutputError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_flow_output::UpdateFlowOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_flow_source::UpdateFlowSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_flow_source::UpdateFlowSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_flow_source::UpdateFlowSourceError> for Error {
    fn from(err: crate::operation::update_flow_source::UpdateFlowSourceError) -> Self {
        match err {
            crate::operation::update_flow_source::UpdateFlowSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_flow_source::UpdateFlowSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AddFlowOutputs420Exception(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::CreateFlow420Exception(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::GrantFlowEntitlements420Exception(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
