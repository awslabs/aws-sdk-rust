// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_entitlements_output_next_token(
    input: &crate::operation::list_entitlements::ListEntitlementsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_flows_output_next_token(
    input: &crate::operation::list_flows::ListFlowsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_offerings_output_next_token(
    input: &crate::operation::list_offerings::ListOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_reservations_output_next_token(
    input: &crate::operation::list_reservations::ListReservationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_entitlements_output_entitlements(
    input: crate::operation::list_entitlements::ListEntitlementsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListedEntitlement>> {
    let input = match input.entitlements {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_flows_output_flows(
    input: crate::operation::list_flows::ListFlowsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListedFlow>> {
    let input = match input.flows {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_offerings_output_offerings(
    input: crate::operation::list_offerings::ListOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Offering>> {
    let input = match input.offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_reservations_output_reservations(
    input: crate::operation::list_reservations::ListReservationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Reservation>> {
    let input = match input.reservations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
