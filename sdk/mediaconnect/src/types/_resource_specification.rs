// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A definition of what is being billed for, including the type and amount.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceSpecification {
    /// The amount of outbound bandwidth that is discounted in the offering.
    #[doc(hidden)]
    pub reserved_bitrate: i32,
    /// The type of resource and the unit that is being billed for.
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
}
impl ResourceSpecification {
    /// The amount of outbound bandwidth that is discounted in the offering.
    pub fn reserved_bitrate(&self) -> i32 {
        self.reserved_bitrate
    }
    /// The type of resource and the unit that is being billed for.
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
}
impl ResourceSpecification {
    /// Creates a new builder-style object to manufacture [`ResourceSpecification`](crate::types::ResourceSpecification).
    pub fn builder() -> crate::types::builders::ResourceSpecificationBuilder {
        crate::types::builders::ResourceSpecificationBuilder::default()
    }
}

/// A builder for [`ResourceSpecification`](crate::types::ResourceSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceSpecificationBuilder {
    pub(crate) reserved_bitrate: std::option::Option<i32>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
}
impl ResourceSpecificationBuilder {
    /// The amount of outbound bandwidth that is discounted in the offering.
    pub fn reserved_bitrate(mut self, input: i32) -> Self {
        self.reserved_bitrate = Some(input);
        self
    }
    /// The amount of outbound bandwidth that is discounted in the offering.
    pub fn set_reserved_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.reserved_bitrate = input;
        self
    }
    /// The type of resource and the unit that is being billed for.
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// The type of resource and the unit that is being billed for.
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceSpecification`](crate::types::ResourceSpecification).
    pub fn build(self) -> crate::types::ResourceSpecification {
        crate::types::ResourceSpecification {
            reserved_bitrate: self.reserved_bitrate.unwrap_or_default(),
            resource_type: self.resource_type,
        }
    }
}
