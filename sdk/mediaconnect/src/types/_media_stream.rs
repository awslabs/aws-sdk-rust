// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MediaStream {
    /// Attributes that are related to the media stream.
    #[doc(hidden)]
    pub attributes: std::option::Option<crate::types::MediaStreamAttributes>,
    /// The sample rate for the stream. This value is measured in Hz.
    #[doc(hidden)]
    pub clock_rate: i32,
    /// A description that can help you quickly identify what your media stream is used for.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
    #[doc(hidden)]
    pub fmt: i32,
    /// A unique identifier for the media stream.
    #[doc(hidden)]
    pub media_stream_id: i32,
    /// A name that helps you distinguish one media stream from another.
    #[doc(hidden)]
    pub media_stream_name: std::option::Option<std::string::String>,
    /// The type of media stream.
    #[doc(hidden)]
    pub media_stream_type: std::option::Option<crate::types::MediaStreamType>,
    /// The resolution of the video.
    #[doc(hidden)]
    pub video_format: std::option::Option<std::string::String>,
}
impl MediaStream {
    /// Attributes that are related to the media stream.
    pub fn attributes(&self) -> std::option::Option<&crate::types::MediaStreamAttributes> {
        self.attributes.as_ref()
    }
    /// The sample rate for the stream. This value is measured in Hz.
    pub fn clock_rate(&self) -> i32 {
        self.clock_rate
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
    pub fn fmt(&self) -> i32 {
        self.fmt
    }
    /// A unique identifier for the media stream.
    pub fn media_stream_id(&self) -> i32 {
        self.media_stream_id
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn media_stream_name(&self) -> std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
    /// The type of media stream.
    pub fn media_stream_type(&self) -> std::option::Option<&crate::types::MediaStreamType> {
        self.media_stream_type.as_ref()
    }
    /// The resolution of the video.
    pub fn video_format(&self) -> std::option::Option<&str> {
        self.video_format.as_deref()
    }
}
impl MediaStream {
    /// Creates a new builder-style object to manufacture [`MediaStream`](crate::types::MediaStream).
    pub fn builder() -> crate::types::builders::MediaStreamBuilder {
        crate::types::builders::MediaStreamBuilder::default()
    }
}

/// A builder for [`MediaStream`](crate::types::MediaStream).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MediaStreamBuilder {
    pub(crate) attributes: std::option::Option<crate::types::MediaStreamAttributes>,
    pub(crate) clock_rate: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) fmt: std::option::Option<i32>,
    pub(crate) media_stream_id: std::option::Option<i32>,
    pub(crate) media_stream_name: std::option::Option<std::string::String>,
    pub(crate) media_stream_type: std::option::Option<crate::types::MediaStreamType>,
    pub(crate) video_format: std::option::Option<std::string::String>,
}
impl MediaStreamBuilder {
    /// Attributes that are related to the media stream.
    pub fn attributes(mut self, input: crate::types::MediaStreamAttributes) -> Self {
        self.attributes = Some(input);
        self
    }
    /// Attributes that are related to the media stream.
    pub fn set_attributes(
        mut self,
        input: std::option::Option<crate::types::MediaStreamAttributes>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// The sample rate for the stream. This value is measured in Hz.
    pub fn clock_rate(mut self, input: i32) -> Self {
        self.clock_rate = Some(input);
        self
    }
    /// The sample rate for the stream. This value is measured in Hz.
    pub fn set_clock_rate(mut self, input: std::option::Option<i32>) -> Self {
        self.clock_rate = input;
        self
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
    pub fn fmt(mut self, input: i32) -> Self {
        self.fmt = Some(input);
        self
    }
    /// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
    pub fn set_fmt(mut self, input: std::option::Option<i32>) -> Self {
        self.fmt = input;
        self
    }
    /// A unique identifier for the media stream.
    pub fn media_stream_id(mut self, input: i32) -> Self {
        self.media_stream_id = Some(input);
        self
    }
    /// A unique identifier for the media stream.
    pub fn set_media_stream_id(mut self, input: std::option::Option<i32>) -> Self {
        self.media_stream_id = input;
        self
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn media_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_stream_name = Some(input.into());
        self
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn set_media_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.media_stream_name = input;
        self
    }
    /// The type of media stream.
    pub fn media_stream_type(mut self, input: crate::types::MediaStreamType) -> Self {
        self.media_stream_type = Some(input);
        self
    }
    /// The type of media stream.
    pub fn set_media_stream_type(
        mut self,
        input: std::option::Option<crate::types::MediaStreamType>,
    ) -> Self {
        self.media_stream_type = input;
        self
    }
    /// The resolution of the video.
    pub fn video_format(mut self, input: impl Into<std::string::String>) -> Self {
        self.video_format = Some(input.into());
        self
    }
    /// The resolution of the video.
    pub fn set_video_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.video_format = input;
        self
    }
    /// Consumes the builder and constructs a [`MediaStream`](crate::types::MediaStream).
    pub fn build(self) -> crate::types::MediaStream {
        crate::types::MediaStream {
            attributes: self.attributes,
            clock_rate: self.clock_rate.unwrap_or_default(),
            description: self.description,
            fmt: self.fmt.unwrap_or_default(),
            media_stream_id: self.media_stream_id.unwrap_or_default(),
            media_stream_name: self.media_stream_name,
            media_stream_type: self.media_stream_type,
            video_format: self.video_format,
        }
    }
}
