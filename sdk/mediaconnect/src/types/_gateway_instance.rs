// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for an instance in a gateway.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GatewayInstance {
    /// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
    pub bridge_placement: ::std::option::Option<crate::types::BridgePlacement>,
    /// The connection state of the instance.
    pub connection_status: ::std::option::Option<crate::types::ConnectionStatus>,
    /// The Amazon Resource Name (ARN) of the instance.
    pub gateway_arn: ::std::option::Option<::std::string::String>,
    /// The Amazon Resource Name (ARN) of the gateway.
    pub gateway_instance_arn: ::std::option::Option<::std::string::String>,
    /// The managed instance ID generated by the SSM install. This will begin with "mi-".
    pub instance_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub instance_messages: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>,
    /// The status of the instance.
    pub instance_state: ::std::option::Option<crate::types::InstanceState>,
    /// The running bridge count.
    pub running_bridge_count: ::std::option::Option<i32>,
}
impl GatewayInstance {
    /// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
    pub fn bridge_placement(&self) -> ::std::option::Option<&crate::types::BridgePlacement> {
        self.bridge_placement.as_ref()
    }
    /// The connection state of the instance.
    pub fn connection_status(&self) -> ::std::option::Option<&crate::types::ConnectionStatus> {
        self.connection_status.as_ref()
    }
    /// The Amazon Resource Name (ARN) of the instance.
    pub fn gateway_arn(&self) -> ::std::option::Option<&str> {
        self.gateway_arn.as_deref()
    }
    /// The Amazon Resource Name (ARN) of the gateway.
    pub fn gateway_instance_arn(&self) -> ::std::option::Option<&str> {
        self.gateway_instance_arn.as_deref()
    }
    /// The managed instance ID generated by the SSM install. This will begin with "mi-".
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_messages.is_none()`.
    pub fn instance_messages(&self) -> &[crate::types::MessageDetail] {
        self.instance_messages.as_deref().unwrap_or_default()
    }
    /// The status of the instance.
    pub fn instance_state(&self) -> ::std::option::Option<&crate::types::InstanceState> {
        self.instance_state.as_ref()
    }
    /// The running bridge count.
    pub fn running_bridge_count(&self) -> ::std::option::Option<i32> {
        self.running_bridge_count
    }
}
impl GatewayInstance {
    /// Creates a new builder-style object to manufacture [`GatewayInstance`](crate::types::GatewayInstance).
    pub fn builder() -> crate::types::builders::GatewayInstanceBuilder {
        crate::types::builders::GatewayInstanceBuilder::default()
    }
}

/// A builder for [`GatewayInstance`](crate::types::GatewayInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GatewayInstanceBuilder {
    pub(crate) bridge_placement: ::std::option::Option<crate::types::BridgePlacement>,
    pub(crate) connection_status: ::std::option::Option<crate::types::ConnectionStatus>,
    pub(crate) gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_messages: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>,
    pub(crate) instance_state: ::std::option::Option<crate::types::InstanceState>,
    pub(crate) running_bridge_count: ::std::option::Option<i32>,
}
impl GatewayInstanceBuilder {
    /// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
    /// This field is required.
    pub fn bridge_placement(mut self, input: crate::types::BridgePlacement) -> Self {
        self.bridge_placement = ::std::option::Option::Some(input);
        self
    }
    /// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
    pub fn set_bridge_placement(mut self, input: ::std::option::Option<crate::types::BridgePlacement>) -> Self {
        self.bridge_placement = input;
        self
    }
    /// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
    pub fn get_bridge_placement(&self) -> &::std::option::Option<crate::types::BridgePlacement> {
        &self.bridge_placement
    }
    /// The connection state of the instance.
    /// This field is required.
    pub fn connection_status(mut self, input: crate::types::ConnectionStatus) -> Self {
        self.connection_status = ::std::option::Option::Some(input);
        self
    }
    /// The connection state of the instance.
    pub fn set_connection_status(mut self, input: ::std::option::Option<crate::types::ConnectionStatus>) -> Self {
        self.connection_status = input;
        self
    }
    /// The connection state of the instance.
    pub fn get_connection_status(&self) -> &::std::option::Option<crate::types::ConnectionStatus> {
        &self.connection_status
    }
    /// The Amazon Resource Name (ARN) of the instance.
    /// This field is required.
    pub fn gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the instance.
    pub fn set_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of the instance.
    pub fn get_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_arn
    }
    /// The Amazon Resource Name (ARN) of the gateway.
    /// This field is required.
    pub fn gateway_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the gateway.
    pub fn set_gateway_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_instance_arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of the gateway.
    pub fn get_gateway_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_instance_arn
    }
    /// The managed instance ID generated by the SSM install. This will begin with "mi-".
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The managed instance ID generated by the SSM install. This will begin with "mi-".
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// The managed instance ID generated by the SSM install. This will begin with "mi-".
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// Appends an item to `instance_messages`.
    ///
    /// To override the contents of this collection use [`set_instance_messages`](Self::set_instance_messages).
    ///
    pub fn instance_messages(mut self, input: crate::types::MessageDetail) -> Self {
        let mut v = self.instance_messages.unwrap_or_default();
        v.push(input);
        self.instance_messages = ::std::option::Option::Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_instance_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>>) -> Self {
        self.instance_messages = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_instance_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageDetail>> {
        &self.instance_messages
    }
    /// The status of the instance.
    /// This field is required.
    pub fn instance_state(mut self, input: crate::types::InstanceState) -> Self {
        self.instance_state = ::std::option::Option::Some(input);
        self
    }
    /// The status of the instance.
    pub fn set_instance_state(mut self, input: ::std::option::Option<crate::types::InstanceState>) -> Self {
        self.instance_state = input;
        self
    }
    /// The status of the instance.
    pub fn get_instance_state(&self) -> &::std::option::Option<crate::types::InstanceState> {
        &self.instance_state
    }
    /// The running bridge count.
    /// This field is required.
    pub fn running_bridge_count(mut self, input: i32) -> Self {
        self.running_bridge_count = ::std::option::Option::Some(input);
        self
    }
    /// The running bridge count.
    pub fn set_running_bridge_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.running_bridge_count = input;
        self
    }
    /// The running bridge count.
    pub fn get_running_bridge_count(&self) -> &::std::option::Option<i32> {
        &self.running_bridge_count
    }
    /// Consumes the builder and constructs a [`GatewayInstance`](crate::types::GatewayInstance).
    pub fn build(self) -> crate::types::GatewayInstance {
        crate::types::GatewayInstance {
            bridge_placement: self.bridge_placement,
            connection_status: self.connection_status,
            gateway_arn: self.gateway_arn,
            gateway_instance_arn: self.gateway_instance_arn,
            instance_id: self.instance_id,
            instance_messages: self.instance_messages,
            instance_state: self.instance_state,
            running_bridge_count: self.running_bridge_count,
        }
    }
}
