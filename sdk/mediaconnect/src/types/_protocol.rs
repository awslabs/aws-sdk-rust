// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Protocol`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let protocol = unimplemented!();
/// match protocol {
///     Protocol::Cdi => { /* ... */ },
///     Protocol::FujitsuQos => { /* ... */ },
///     Protocol::Rist => { /* ... */ },
///     Protocol::Rtp => { /* ... */ },
///     Protocol::RtpFec => { /* ... */ },
///     Protocol::SrtCaller => { /* ... */ },
///     Protocol::SrtListener => { /* ... */ },
///     Protocol::St2110Jpegxs => { /* ... */ },
///     Protocol::ZixiPull => { /* ... */ },
///     Protocol::ZixiPush => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `protocol` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Protocol::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Protocol::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Protocol::NewFeature` is defined.
/// Specifically, when `protocol` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Protocol::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Protocol {
    #[allow(missing_docs)] // documentation missing in model
    Cdi,
    #[allow(missing_docs)] // documentation missing in model
    FujitsuQos,
    #[allow(missing_docs)] // documentation missing in model
    Rist,
    #[allow(missing_docs)] // documentation missing in model
    Rtp,
    #[allow(missing_docs)] // documentation missing in model
    RtpFec,
    #[allow(missing_docs)] // documentation missing in model
    SrtCaller,
    #[allow(missing_docs)] // documentation missing in model
    SrtListener,
    #[allow(missing_docs)] // documentation missing in model
    St2110Jpegxs,
    #[allow(missing_docs)] // documentation missing in model
    ZixiPull,
    #[allow(missing_docs)] // documentation missing in model
    ZixiPush,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Protocol {
    fn from(s: &str) -> Self {
        match s {
            "cdi" => Protocol::Cdi,
            "fujitsu-qos" => Protocol::FujitsuQos,
            "rist" => Protocol::Rist,
            "rtp" => Protocol::Rtp,
            "rtp-fec" => Protocol::RtpFec,
            "srt-caller" => Protocol::SrtCaller,
            "srt-listener" => Protocol::SrtListener,
            "st2110-jpegxs" => Protocol::St2110Jpegxs,
            "zixi-pull" => Protocol::ZixiPull,
            "zixi-push" => Protocol::ZixiPush,
            other => Protocol::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for Protocol {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Protocol::from(s))
    }
}
impl Protocol {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Protocol::Cdi => "cdi",
            Protocol::FujitsuQos => "fujitsu-qos",
            Protocol::Rist => "rist",
            Protocol::Rtp => "rtp",
            Protocol::RtpFec => "rtp-fec",
            Protocol::SrtCaller => "srt-caller",
            Protocol::SrtListener => "srt-listener",
            Protocol::St2110Jpegxs => "st2110-jpegxs",
            Protocol::ZixiPull => "zixi-pull",
            Protocol::ZixiPush => "zixi-push",
            Protocol::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "cdi",
            "fujitsu-qos",
            "rist",
            "rtp",
            "rtp-fec",
            "srt-caller",
            "srt-listener",
            "st2110-jpegxs",
            "zixi-pull",
            "zixi-push",
        ]
    }
}
impl AsRef<str> for Protocol {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
