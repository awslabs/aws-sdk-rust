// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Provides a summary of a flow, including its ARN, Availability Zone, and source type.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListedFlow {
    /// The Availability Zone that the flow was created in.
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// A description of the flow.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// The ARN of the flow.
    #[doc(hidden)]
    pub flow_arn: std::option::Option<std::string::String>,
    /// The name of the flow.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::SourceType>,
    /// The current status of the flow.
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// The maintenance setting of a flow
    #[doc(hidden)]
    pub maintenance: std::option::Option<crate::types::Maintenance>,
}
impl ListedFlow {
    /// The Availability Zone that the flow was created in.
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// A description of the flow.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// The ARN of the flow.
    pub fn flow_arn(&self) -> std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// The name of the flow.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
    pub fn source_type(&self) -> std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
    /// The current status of the flow.
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// The maintenance setting of a flow
    pub fn maintenance(&self) -> std::option::Option<&crate::types::Maintenance> {
        self.maintenance.as_ref()
    }
}
impl ListedFlow {
    /// Creates a new builder-style object to manufacture [`ListedFlow`](crate::types::ListedFlow).
    pub fn builder() -> crate::types::builders::ListedFlowBuilder {
        crate::types::builders::ListedFlowBuilder::default()
    }
}

/// A builder for [`ListedFlow`](crate::types::ListedFlow).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListedFlowBuilder {
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) flow_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) source_type: std::option::Option<crate::types::SourceType>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) maintenance: std::option::Option<crate::types::Maintenance>,
}
impl ListedFlowBuilder {
    /// The Availability Zone that the flow was created in.
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// The Availability Zone that the flow was created in.
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// A description of the flow.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// A description of the flow.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// The ARN of the flow.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.flow_arn = Some(input.into());
        self
    }
    /// The ARN of the flow.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// The name of the flow.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// The name of the flow.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
    pub fn set_source_type(mut self, input: std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// The current status of the flow.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// The current status of the flow.
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// The maintenance setting of a flow
    pub fn maintenance(mut self, input: crate::types::Maintenance) -> Self {
        self.maintenance = Some(input);
        self
    }
    /// The maintenance setting of a flow
    pub fn set_maintenance(
        mut self,
        input: std::option::Option<crate::types::Maintenance>,
    ) -> Self {
        self.maintenance = input;
        self
    }
    /// Consumes the builder and constructs a [`ListedFlow`](crate::types::ListedFlow).
    pub fn build(self) -> crate::types::ListedFlow {
        crate::types::ListedFlow {
            availability_zone: self.availability_zone,
            description: self.description,
            flow_arn: self.flow_arn,
            name: self.name,
            source_type: self.source_type,
            status: self.status,
            maintenance: self.maintenance,
        }
    }
}
