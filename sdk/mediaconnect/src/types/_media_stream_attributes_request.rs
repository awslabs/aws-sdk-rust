// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Attributes that are related to the media stream.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MediaStreamAttributesRequest {
    /// The settings that you want to use to define the media stream.
    #[doc(hidden)]
    pub fmtp: std::option::Option<crate::types::FmtpRequest>,
    /// The audio language, in a format that is recognized by the receiver.
    #[doc(hidden)]
    pub lang: std::option::Option<std::string::String>,
}
impl MediaStreamAttributesRequest {
    /// The settings that you want to use to define the media stream.
    pub fn fmtp(&self) -> std::option::Option<&crate::types::FmtpRequest> {
        self.fmtp.as_ref()
    }
    /// The audio language, in a format that is recognized by the receiver.
    pub fn lang(&self) -> std::option::Option<&str> {
        self.lang.as_deref()
    }
}
impl MediaStreamAttributesRequest {
    /// Creates a new builder-style object to manufacture [`MediaStreamAttributesRequest`](crate::types::MediaStreamAttributesRequest).
    pub fn builder() -> crate::types::builders::MediaStreamAttributesRequestBuilder {
        crate::types::builders::MediaStreamAttributesRequestBuilder::default()
    }
}

/// A builder for [`MediaStreamAttributesRequest`](crate::types::MediaStreamAttributesRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MediaStreamAttributesRequestBuilder {
    pub(crate) fmtp: std::option::Option<crate::types::FmtpRequest>,
    pub(crate) lang: std::option::Option<std::string::String>,
}
impl MediaStreamAttributesRequestBuilder {
    /// The settings that you want to use to define the media stream.
    pub fn fmtp(mut self, input: crate::types::FmtpRequest) -> Self {
        self.fmtp = Some(input);
        self
    }
    /// The settings that you want to use to define the media stream.
    pub fn set_fmtp(mut self, input: std::option::Option<crate::types::FmtpRequest>) -> Self {
        self.fmtp = input;
        self
    }
    /// The audio language, in a format that is recognized by the receiver.
    pub fn lang(mut self, input: impl Into<std::string::String>) -> Self {
        self.lang = Some(input.into());
        self
    }
    /// The audio language, in a format that is recognized by the receiver.
    pub fn set_lang(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lang = input;
        self
    }
    /// Consumes the builder and constructs a [`MediaStreamAttributesRequest`](crate::types::MediaStreamAttributesRequest).
    pub fn build(self) -> crate::types::MediaStreamAttributesRequest {
        crate::types::MediaStreamAttributesRequest {
            fmtp: self.fmtp,
            lang: self.lang,
        }
    }
}
