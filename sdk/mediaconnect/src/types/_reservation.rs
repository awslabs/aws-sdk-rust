// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A pricing agreement for a discounted rate for a specific outbound bandwidth that your MediaConnect account will use each month over a specific time period. The discounted rate in the reservation applies to outbound bandwidth for all flows from your account until your account reaches the amount of bandwidth in your reservation. If you use more outbound bandwidth than the agreed upon amount in a single month, the overage is charged at the on-demand rate.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Reservation {
    /// The type of currency that is used for billing. The currencyCode used for your reservation is US dollars.
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// The length of time that this reservation is active. MediaConnect defines this value in the offering.
    #[doc(hidden)]
    pub duration: i32,
    /// The unit of measurement for the duration of the reservation. MediaConnect defines this value in the offering.
    #[doc(hidden)]
    pub duration_units: std::option::Option<crate::types::DurationUnits>,
    /// The day and time that this reservation expires. This value is calculated based on the start date and time that you set and the offering's duration.
    #[doc(hidden)]
    pub end: std::option::Option<std::string::String>,
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
    #[doc(hidden)]
    pub offering_arn: std::option::Option<std::string::String>,
    /// A description of the offering. MediaConnect defines this value in the offering.
    #[doc(hidden)]
    pub offering_description: std::option::Option<std::string::String>,
    /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate. MediaConnect defines this value in the offering.
    #[doc(hidden)]
    pub price_per_unit: std::option::Option<std::string::String>,
    /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate. MediaConnect defines this value in the offering.
    #[doc(hidden)]
    pub price_units: std::option::Option<crate::types::PriceUnits>,
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the reservation when you purchase an offering.
    #[doc(hidden)]
    pub reservation_arn: std::option::Option<std::string::String>,
    /// The name that you assigned to the reservation when you purchased the offering.
    #[doc(hidden)]
    pub reservation_name: std::option::Option<std::string::String>,
    /// The status of your reservation.
    #[doc(hidden)]
    pub reservation_state: std::option::Option<crate::types::ReservationState>,
    /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering. MediaConnect defines the values that make up the resourceSpecification in the offering.
    #[doc(hidden)]
    pub resource_specification: std::option::Option<crate::types::ResourceSpecification>,
    /// The day and time that the reservation becomes active. You set this value when you purchase the offering.
    #[doc(hidden)]
    pub start: std::option::Option<std::string::String>,
}
impl Reservation {
    /// The type of currency that is used for billing. The currencyCode used for your reservation is US dollars.
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// The length of time that this reservation is active. MediaConnect defines this value in the offering.
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// The unit of measurement for the duration of the reservation. MediaConnect defines this value in the offering.
    pub fn duration_units(&self) -> std::option::Option<&crate::types::DurationUnits> {
        self.duration_units.as_ref()
    }
    /// The day and time that this reservation expires. This value is calculated based on the start date and time that you set and the offering's duration.
    pub fn end(&self) -> std::option::Option<&str> {
        self.end.as_deref()
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
    pub fn offering_arn(&self) -> std::option::Option<&str> {
        self.offering_arn.as_deref()
    }
    /// A description of the offering. MediaConnect defines this value in the offering.
    pub fn offering_description(&self) -> std::option::Option<&str> {
        self.offering_description.as_deref()
    }
    /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate. MediaConnect defines this value in the offering.
    pub fn price_per_unit(&self) -> std::option::Option<&str> {
        self.price_per_unit.as_deref()
    }
    /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate. MediaConnect defines this value in the offering.
    pub fn price_units(&self) -> std::option::Option<&crate::types::PriceUnits> {
        self.price_units.as_ref()
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the reservation when you purchase an offering.
    pub fn reservation_arn(&self) -> std::option::Option<&str> {
        self.reservation_arn.as_deref()
    }
    /// The name that you assigned to the reservation when you purchased the offering.
    pub fn reservation_name(&self) -> std::option::Option<&str> {
        self.reservation_name.as_deref()
    }
    /// The status of your reservation.
    pub fn reservation_state(&self) -> std::option::Option<&crate::types::ReservationState> {
        self.reservation_state.as_ref()
    }
    /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering. MediaConnect defines the values that make up the resourceSpecification in the offering.
    pub fn resource_specification(
        &self,
    ) -> std::option::Option<&crate::types::ResourceSpecification> {
        self.resource_specification.as_ref()
    }
    /// The day and time that the reservation becomes active. You set this value when you purchase the offering.
    pub fn start(&self) -> std::option::Option<&str> {
        self.start.as_deref()
    }
}
impl Reservation {
    /// Creates a new builder-style object to manufacture [`Reservation`](crate::types::Reservation).
    pub fn builder() -> crate::types::builders::ReservationBuilder {
        crate::types::builders::ReservationBuilder::default()
    }
}

/// A builder for [`Reservation`](crate::types::Reservation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservationBuilder {
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) duration_units: std::option::Option<crate::types::DurationUnits>,
    pub(crate) end: std::option::Option<std::string::String>,
    pub(crate) offering_arn: std::option::Option<std::string::String>,
    pub(crate) offering_description: std::option::Option<std::string::String>,
    pub(crate) price_per_unit: std::option::Option<std::string::String>,
    pub(crate) price_units: std::option::Option<crate::types::PriceUnits>,
    pub(crate) reservation_arn: std::option::Option<std::string::String>,
    pub(crate) reservation_name: std::option::Option<std::string::String>,
    pub(crate) reservation_state: std::option::Option<crate::types::ReservationState>,
    pub(crate) resource_specification: std::option::Option<crate::types::ResourceSpecification>,
    pub(crate) start: std::option::Option<std::string::String>,
}
impl ReservationBuilder {
    /// The type of currency that is used for billing. The currencyCode used for your reservation is US dollars.
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// The type of currency that is used for billing. The currencyCode used for your reservation is US dollars.
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// The length of time that this reservation is active. MediaConnect defines this value in the offering.
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// The length of time that this reservation is active. MediaConnect defines this value in the offering.
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// The unit of measurement for the duration of the reservation. MediaConnect defines this value in the offering.
    pub fn duration_units(mut self, input: crate::types::DurationUnits) -> Self {
        self.duration_units = Some(input);
        self
    }
    /// The unit of measurement for the duration of the reservation. MediaConnect defines this value in the offering.
    pub fn set_duration_units(
        mut self,
        input: std::option::Option<crate::types::DurationUnits>,
    ) -> Self {
        self.duration_units = input;
        self
    }
    /// The day and time that this reservation expires. This value is calculated based on the start date and time that you set and the offering's duration.
    pub fn end(mut self, input: impl Into<std::string::String>) -> Self {
        self.end = Some(input.into());
        self
    }
    /// The day and time that this reservation expires. This value is calculated based on the start date and time that you set and the offering's duration.
    pub fn set_end(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end = input;
        self
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
    pub fn offering_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_arn = Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
    pub fn set_offering_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_arn = input;
        self
    }
    /// A description of the offering. MediaConnect defines this value in the offering.
    pub fn offering_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_description = Some(input.into());
        self
    }
    /// A description of the offering. MediaConnect defines this value in the offering.
    pub fn set_offering_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.offering_description = input;
        self
    }
    /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate. MediaConnect defines this value in the offering.
    pub fn price_per_unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.price_per_unit = Some(input.into());
        self
    }
    /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate. MediaConnect defines this value in the offering.
    pub fn set_price_per_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.price_per_unit = input;
        self
    }
    /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate. MediaConnect defines this value in the offering.
    pub fn price_units(mut self, input: crate::types::PriceUnits) -> Self {
        self.price_units = Some(input);
        self
    }
    /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate. MediaConnect defines this value in the offering.
    pub fn set_price_units(mut self, input: std::option::Option<crate::types::PriceUnits>) -> Self {
        self.price_units = input;
        self
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the reservation when you purchase an offering.
    pub fn reservation_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.reservation_arn = Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) that MediaConnect assigns to the reservation when you purchase an offering.
    pub fn set_reservation_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reservation_arn = input;
        self
    }
    /// The name that you assigned to the reservation when you purchased the offering.
    pub fn reservation_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.reservation_name = Some(input.into());
        self
    }
    /// The name that you assigned to the reservation when you purchased the offering.
    pub fn set_reservation_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reservation_name = input;
        self
    }
    /// The status of your reservation.
    pub fn reservation_state(mut self, input: crate::types::ReservationState) -> Self {
        self.reservation_state = Some(input);
        self
    }
    /// The status of your reservation.
    pub fn set_reservation_state(
        mut self,
        input: std::option::Option<crate::types::ReservationState>,
    ) -> Self {
        self.reservation_state = input;
        self
    }
    /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering. MediaConnect defines the values that make up the resourceSpecification in the offering.
    pub fn resource_specification(mut self, input: crate::types::ResourceSpecification) -> Self {
        self.resource_specification = Some(input);
        self
    }
    /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering. MediaConnect defines the values that make up the resourceSpecification in the offering.
    pub fn set_resource_specification(
        mut self,
        input: std::option::Option<crate::types::ResourceSpecification>,
    ) -> Self {
        self.resource_specification = input;
        self
    }
    /// The day and time that the reservation becomes active. You set this value when you purchase the offering.
    pub fn start(mut self, input: impl Into<std::string::String>) -> Self {
        self.start = Some(input.into());
        self
    }
    /// The day and time that the reservation becomes active. You set this value when you purchase the offering.
    pub fn set_start(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start = input;
        self
    }
    /// Consumes the builder and constructs a [`Reservation`](crate::types::Reservation).
    pub fn build(self) -> crate::types::Reservation {
        crate::types::Reservation {
            currency_code: self.currency_code,
            duration: self.duration.unwrap_or_default(),
            duration_units: self.duration_units,
            end: self.end,
            offering_arn: self.offering_arn,
            offering_description: self.offering_description,
            price_per_unit: self.price_per_unit,
            price_units: self.price_units,
            reservation_arn: self.reservation_arn,
            reservation_name: self.reservation_name,
            reservation_state: self.reservation_state,
            resource_specification: self.resource_specification,
            start: self.start,
        }
    }
}
