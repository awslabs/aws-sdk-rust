// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for a VPC Source.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcInterface {
    /// Immutable and has to be a unique against other VpcInterfaces in this Flow.
    pub name: ::std::option::Option<::std::string::String>,
    /// IDs of the network interfaces created in customer's account by MediaConnect.
    pub network_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// The type of network interface.
    pub network_interface_type: ::std::option::Option<crate::types::NetworkInterfaceType>,
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// Security Group IDs to be used on ENI.
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// Subnet must be in the AZ of the Flow
    pub subnet_id: ::std::option::Option<::std::string::String>,
}
impl VpcInterface {
    /// Immutable and has to be a unique against other VpcInterfaces in this Flow.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// IDs of the network interfaces created in customer's account by MediaConnect.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interface_ids.is_none()`.
    pub fn network_interface_ids(&self) -> &[::std::string::String] {
        self.network_interface_ids.as_deref().unwrap_or_default()
    }
    /// The type of network interface.
    pub fn network_interface_type(&self) -> ::std::option::Option<&crate::types::NetworkInterfaceType> {
        self.network_interface_type.as_ref()
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// Security Group IDs to be used on ENI.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// Subnet must be in the AZ of the Flow
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
}
impl VpcInterface {
    /// Creates a new builder-style object to manufacture [`VpcInterface`](crate::types::VpcInterface).
    pub fn builder() -> crate::types::builders::VpcInterfaceBuilder {
        crate::types::builders::VpcInterfaceBuilder::default()
    }
}

/// A builder for [`VpcInterface`](crate::types::VpcInterface).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcInterfaceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) network_interface_type: ::std::option::Option<crate::types::NetworkInterfaceType>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
}
impl VpcInterfaceBuilder {
    /// Immutable and has to be a unique against other VpcInterfaces in this Flow.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Immutable and has to be a unique against other VpcInterfaces in this Flow.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Immutable and has to be a unique against other VpcInterfaces in this Flow.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `network_interface_ids`.
    ///
    /// To override the contents of this collection use [`set_network_interface_ids`](Self::set_network_interface_ids).
    ///
    /// IDs of the network interfaces created in customer's account by MediaConnect.
    pub fn network_interface_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_interface_ids.unwrap_or_default();
        v.push(input.into());
        self.network_interface_ids = ::std::option::Option::Some(v);
        self
    }
    /// IDs of the network interfaces created in customer's account by MediaConnect.
    pub fn set_network_interface_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_interface_ids = input;
        self
    }
    /// IDs of the network interfaces created in customer's account by MediaConnect.
    pub fn get_network_interface_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_interface_ids
    }
    /// The type of network interface.
    /// This field is required.
    pub fn network_interface_type(mut self, input: crate::types::NetworkInterfaceType) -> Self {
        self.network_interface_type = ::std::option::Option::Some(input);
        self
    }
    /// The type of network interface.
    pub fn set_network_interface_type(mut self, input: ::std::option::Option<crate::types::NetworkInterfaceType>) -> Self {
        self.network_interface_type = input;
        self
    }
    /// The type of network interface.
    pub fn get_network_interface_type(&self) -> &::std::option::Option<crate::types::NetworkInterfaceType> {
        &self.network_interface_type
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// Security Group IDs to be used on ENI.
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// Security Group IDs to be used on ENI.
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// Security Group IDs to be used on ENI.
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Subnet must be in the AZ of the Flow
    /// This field is required.
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Subnet must be in the AZ of the Flow
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// Subnet must be in the AZ of the Flow
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// Consumes the builder and constructs a [`VpcInterface`](crate::types::VpcInterface).
    pub fn build(self) -> crate::types::VpcInterface {
        crate::types::VpcInterface {
            name: self.name,
            network_interface_ids: self.network_interface_ids,
            network_interface_type: self.network_interface_type,
            role_arn: self.role_arn,
            security_group_ids: self.security_group_ids,
            subnet_id: self.subnet_id,
        }
    }
}
