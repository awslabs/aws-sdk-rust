// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings that you want to use to define the media stream.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FmtpRequest {
    /// The format of the audio channel.
    #[doc(hidden)]
    pub channel_order: std::option::Option<std::string::String>,
    /// The format that is used for the representation of color.
    #[doc(hidden)]
    pub colorimetry: std::option::Option<crate::types::Colorimetry>,
    /// The frame rate for the video stream, in frames/second. For example: 60000/1001. If you specify a whole number, MediaConnect uses a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1 as the exactFramerate.
    #[doc(hidden)]
    pub exact_framerate: std::option::Option<std::string::String>,
    /// The pixel aspect ratio (PAR) of the video.
    #[doc(hidden)]
    pub par: std::option::Option<std::string::String>,
    /// The encoding range of the video.
    #[doc(hidden)]
    pub range: std::option::Option<crate::types::Range>,
    /// The type of compression that was used to smooth the video’s appearance.
    #[doc(hidden)]
    pub scan_mode: std::option::Option<crate::types::ScanMode>,
    /// The transfer characteristic system (TCS) that is used in the video.
    #[doc(hidden)]
    pub tcs: std::option::Option<crate::types::Tcs>,
}
impl FmtpRequest {
    /// The format of the audio channel.
    pub fn channel_order(&self) -> std::option::Option<&str> {
        self.channel_order.as_deref()
    }
    /// The format that is used for the representation of color.
    pub fn colorimetry(&self) -> std::option::Option<&crate::types::Colorimetry> {
        self.colorimetry.as_ref()
    }
    /// The frame rate for the video stream, in frames/second. For example: 60000/1001. If you specify a whole number, MediaConnect uses a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1 as the exactFramerate.
    pub fn exact_framerate(&self) -> std::option::Option<&str> {
        self.exact_framerate.as_deref()
    }
    /// The pixel aspect ratio (PAR) of the video.
    pub fn par(&self) -> std::option::Option<&str> {
        self.par.as_deref()
    }
    /// The encoding range of the video.
    pub fn range(&self) -> std::option::Option<&crate::types::Range> {
        self.range.as_ref()
    }
    /// The type of compression that was used to smooth the video’s appearance.
    pub fn scan_mode(&self) -> std::option::Option<&crate::types::ScanMode> {
        self.scan_mode.as_ref()
    }
    /// The transfer characteristic system (TCS) that is used in the video.
    pub fn tcs(&self) -> std::option::Option<&crate::types::Tcs> {
        self.tcs.as_ref()
    }
}
impl FmtpRequest {
    /// Creates a new builder-style object to manufacture [`FmtpRequest`](crate::types::FmtpRequest).
    pub fn builder() -> crate::types::builders::FmtpRequestBuilder {
        crate::types::builders::FmtpRequestBuilder::default()
    }
}

/// A builder for [`FmtpRequest`](crate::types::FmtpRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FmtpRequestBuilder {
    pub(crate) channel_order: std::option::Option<std::string::String>,
    pub(crate) colorimetry: std::option::Option<crate::types::Colorimetry>,
    pub(crate) exact_framerate: std::option::Option<std::string::String>,
    pub(crate) par: std::option::Option<std::string::String>,
    pub(crate) range: std::option::Option<crate::types::Range>,
    pub(crate) scan_mode: std::option::Option<crate::types::ScanMode>,
    pub(crate) tcs: std::option::Option<crate::types::Tcs>,
}
impl FmtpRequestBuilder {
    /// The format of the audio channel.
    pub fn channel_order(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_order = Some(input.into());
        self
    }
    /// The format of the audio channel.
    pub fn set_channel_order(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_order = input;
        self
    }
    /// The format that is used for the representation of color.
    pub fn colorimetry(mut self, input: crate::types::Colorimetry) -> Self {
        self.colorimetry = Some(input);
        self
    }
    /// The format that is used for the representation of color.
    pub fn set_colorimetry(
        mut self,
        input: std::option::Option<crate::types::Colorimetry>,
    ) -> Self {
        self.colorimetry = input;
        self
    }
    /// The frame rate for the video stream, in frames/second. For example: 60000/1001. If you specify a whole number, MediaConnect uses a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1 as the exactFramerate.
    pub fn exact_framerate(mut self, input: impl Into<std::string::String>) -> Self {
        self.exact_framerate = Some(input.into());
        self
    }
    /// The frame rate for the video stream, in frames/second. For example: 60000/1001. If you specify a whole number, MediaConnect uses a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1 as the exactFramerate.
    pub fn set_exact_framerate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.exact_framerate = input;
        self
    }
    /// The pixel aspect ratio (PAR) of the video.
    pub fn par(mut self, input: impl Into<std::string::String>) -> Self {
        self.par = Some(input.into());
        self
    }
    /// The pixel aspect ratio (PAR) of the video.
    pub fn set_par(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.par = input;
        self
    }
    /// The encoding range of the video.
    pub fn range(mut self, input: crate::types::Range) -> Self {
        self.range = Some(input);
        self
    }
    /// The encoding range of the video.
    pub fn set_range(mut self, input: std::option::Option<crate::types::Range>) -> Self {
        self.range = input;
        self
    }
    /// The type of compression that was used to smooth the video’s appearance.
    pub fn scan_mode(mut self, input: crate::types::ScanMode) -> Self {
        self.scan_mode = Some(input);
        self
    }
    /// The type of compression that was used to smooth the video’s appearance.
    pub fn set_scan_mode(mut self, input: std::option::Option<crate::types::ScanMode>) -> Self {
        self.scan_mode = input;
        self
    }
    /// The transfer characteristic system (TCS) that is used in the video.
    pub fn tcs(mut self, input: crate::types::Tcs) -> Self {
        self.tcs = Some(input);
        self
    }
    /// The transfer characteristic system (TCS) that is used in the video.
    pub fn set_tcs(mut self, input: std::option::Option<crate::types::Tcs>) -> Self {
        self.tcs = input;
        self
    }
    /// Consumes the builder and constructs a [`FmtpRequest`](crate::types::FmtpRequest).
    pub fn build(self) -> crate::types::FmtpRequest {
        crate::types::FmtpRequest {
            channel_order: self.channel_order,
            colorimetry: self.colorimetry,
            exact_framerate: self.exact_framerate,
            par: self.par,
            range: self.range,
            scan_mode: self.scan_mode,
            tcs: self.tcs,
        }
    }
}
