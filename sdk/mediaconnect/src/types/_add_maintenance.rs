// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Create maintenance setting for a flow
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddMaintenance {
    /// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
    pub maintenance_day: ::std::option::Option<crate::types::MaintenanceDay>,
    /// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
    pub maintenance_start_hour: ::std::option::Option<::std::string::String>,
}
impl AddMaintenance {
    /// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
    pub fn maintenance_day(&self) -> ::std::option::Option<&crate::types::MaintenanceDay> {
        self.maintenance_day.as_ref()
    }
    /// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
    pub fn maintenance_start_hour(&self) -> ::std::option::Option<&str> {
        self.maintenance_start_hour.as_deref()
    }
}
impl AddMaintenance {
    /// Creates a new builder-style object to manufacture [`AddMaintenance`](crate::types::AddMaintenance).
    pub fn builder() -> crate::types::builders::AddMaintenanceBuilder {
        crate::types::builders::AddMaintenanceBuilder::default()
    }
}

/// A builder for [`AddMaintenance`](crate::types::AddMaintenance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddMaintenanceBuilder {
    pub(crate) maintenance_day: ::std::option::Option<crate::types::MaintenanceDay>,
    pub(crate) maintenance_start_hour: ::std::option::Option<::std::string::String>,
}
impl AddMaintenanceBuilder {
    /// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
    /// This field is required.
    pub fn maintenance_day(mut self, input: crate::types::MaintenanceDay) -> Self {
        self.maintenance_day = ::std::option::Option::Some(input);
        self
    }
    /// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
    pub fn set_maintenance_day(mut self, input: ::std::option::Option<crate::types::MaintenanceDay>) -> Self {
        self.maintenance_day = input;
        self
    }
    /// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
    pub fn get_maintenance_day(&self) -> &::std::option::Option<crate::types::MaintenanceDay> {
        &self.maintenance_day
    }
    /// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
    /// This field is required.
    pub fn maintenance_start_hour(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.maintenance_start_hour = ::std::option::Option::Some(input.into());
        self
    }
    /// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
    pub fn set_maintenance_start_hour(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.maintenance_start_hour = input;
        self
    }
    /// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
    pub fn get_maintenance_start_hour(&self) -> &::std::option::Option<::std::string::String> {
        &self.maintenance_start_hour
    }
    /// Consumes the builder and constructs a [`AddMaintenance`](crate::types::AddMaintenance).
    pub fn build(self) -> crate::types::AddMaintenance {
        crate::types::AddMaintenance {
            maintenance_day: self.maintenance_day,
            maintenance_start_hour: self.maintenance_start_hour,
        }
    }
}
