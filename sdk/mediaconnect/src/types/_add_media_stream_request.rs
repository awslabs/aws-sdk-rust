// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The media stream that you want to add to the flow.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddMediaStreamRequest {
    /// The attributes that you want to assign to the new media stream.
    #[doc(hidden)]
    pub attributes: std::option::Option<crate::types::MediaStreamAttributesRequest>,
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    #[doc(hidden)]
    pub clock_rate: i32,
    /// A description that can help you quickly identify what your media stream is used for.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// A unique identifier for the media stream.
    #[doc(hidden)]
    pub media_stream_id: i32,
    /// A name that helps you distinguish one media stream from another.
    #[doc(hidden)]
    pub media_stream_name: std::option::Option<std::string::String>,
    /// The type of media stream.
    #[doc(hidden)]
    pub media_stream_type: std::option::Option<crate::types::MediaStreamType>,
    /// The resolution of the video.
    #[doc(hidden)]
    pub video_format: std::option::Option<std::string::String>,
}
impl AddMediaStreamRequest {
    /// The attributes that you want to assign to the new media stream.
    pub fn attributes(&self) -> std::option::Option<&crate::types::MediaStreamAttributesRequest> {
        self.attributes.as_ref()
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn clock_rate(&self) -> i32 {
        self.clock_rate
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// A unique identifier for the media stream.
    pub fn media_stream_id(&self) -> i32 {
        self.media_stream_id
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn media_stream_name(&self) -> std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
    /// The type of media stream.
    pub fn media_stream_type(&self) -> std::option::Option<&crate::types::MediaStreamType> {
        self.media_stream_type.as_ref()
    }
    /// The resolution of the video.
    pub fn video_format(&self) -> std::option::Option<&str> {
        self.video_format.as_deref()
    }
}
impl AddMediaStreamRequest {
    /// Creates a new builder-style object to manufacture [`AddMediaStreamRequest`](crate::types::AddMediaStreamRequest).
    pub fn builder() -> crate::types::builders::AddMediaStreamRequestBuilder {
        crate::types::builders::AddMediaStreamRequestBuilder::default()
    }
}

/// A builder for [`AddMediaStreamRequest`](crate::types::AddMediaStreamRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddMediaStreamRequestBuilder {
    pub(crate) attributes: std::option::Option<crate::types::MediaStreamAttributesRequest>,
    pub(crate) clock_rate: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) media_stream_id: std::option::Option<i32>,
    pub(crate) media_stream_name: std::option::Option<std::string::String>,
    pub(crate) media_stream_type: std::option::Option<crate::types::MediaStreamType>,
    pub(crate) video_format: std::option::Option<std::string::String>,
}
impl AddMediaStreamRequestBuilder {
    /// The attributes that you want to assign to the new media stream.
    pub fn attributes(mut self, input: crate::types::MediaStreamAttributesRequest) -> Self {
        self.attributes = Some(input);
        self
    }
    /// The attributes that you want to assign to the new media stream.
    pub fn set_attributes(
        mut self,
        input: std::option::Option<crate::types::MediaStreamAttributesRequest>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn clock_rate(mut self, input: i32) -> Self {
        self.clock_rate = Some(input);
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn set_clock_rate(mut self, input: std::option::Option<i32>) -> Self {
        self.clock_rate = input;
        self
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// A description that can help you quickly identify what your media stream is used for.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A unique identifier for the media stream.
    pub fn media_stream_id(mut self, input: i32) -> Self {
        self.media_stream_id = Some(input);
        self
    }
    /// A unique identifier for the media stream.
    pub fn set_media_stream_id(mut self, input: std::option::Option<i32>) -> Self {
        self.media_stream_id = input;
        self
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn media_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_stream_name = Some(input.into());
        self
    }
    /// A name that helps you distinguish one media stream from another.
    pub fn set_media_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.media_stream_name = input;
        self
    }
    /// The type of media stream.
    pub fn media_stream_type(mut self, input: crate::types::MediaStreamType) -> Self {
        self.media_stream_type = Some(input);
        self
    }
    /// The type of media stream.
    pub fn set_media_stream_type(
        mut self,
        input: std::option::Option<crate::types::MediaStreamType>,
    ) -> Self {
        self.media_stream_type = input;
        self
    }
    /// The resolution of the video.
    pub fn video_format(mut self, input: impl Into<std::string::String>) -> Self {
        self.video_format = Some(input.into());
        self
    }
    /// The resolution of the video.
    pub fn set_video_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.video_format = input;
        self
    }
    /// Consumes the builder and constructs a [`AddMediaStreamRequest`](crate::types::AddMediaStreamRequest).
    pub fn build(self) -> crate::types::AddMediaStreamRequest {
        crate::types::AddMediaStreamRequest {
            attributes: self.attributes,
            clock_rate: self.clock_rate.unwrap_or_default(),
            description: self.description,
            media_stream_id: self.media_stream_id.unwrap_or_default(),
            media_stream_name: self.media_stream_name,
            media_stream_type: self.media_stream_type,
            video_format: self.video_format,
        }
    }
}
