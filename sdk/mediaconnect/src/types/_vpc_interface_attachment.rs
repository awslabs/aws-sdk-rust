// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for attaching a VPC interface to an output.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcInterfaceAttachment {
    /// The name of the VPC interface to use for this output.
    #[doc(hidden)]
    pub vpc_interface_name: std::option::Option<std::string::String>,
}
impl VpcInterfaceAttachment {
    /// The name of the VPC interface to use for this output.
    pub fn vpc_interface_name(&self) -> std::option::Option<&str> {
        self.vpc_interface_name.as_deref()
    }
}
impl VpcInterfaceAttachment {
    /// Creates a new builder-style object to manufacture [`VpcInterfaceAttachment`](crate::types::VpcInterfaceAttachment).
    pub fn builder() -> crate::types::builders::VpcInterfaceAttachmentBuilder {
        crate::types::builders::VpcInterfaceAttachmentBuilder::default()
    }
}

/// A builder for [`VpcInterfaceAttachment`](crate::types::VpcInterfaceAttachment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcInterfaceAttachmentBuilder {
    pub(crate) vpc_interface_name: std::option::Option<std::string::String>,
}
impl VpcInterfaceAttachmentBuilder {
    /// The name of the VPC interface to use for this output.
    pub fn vpc_interface_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_interface_name = Some(input.into());
        self
    }
    /// The name of the VPC interface to use for this output.
    pub fn set_vpc_interface_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_interface_name = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcInterfaceAttachment`](crate::types::VpcInterfaceAttachment).
    pub fn build(self) -> crate::types::VpcInterfaceAttachment {
        crate::types::VpcInterfaceAttachment {
            vpc_interface_name: self.vpc_interface_name,
        }
    }
}
