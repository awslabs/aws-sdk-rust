// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Tcs`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let tcs = unimplemented!();
/// match tcs {
///     Tcs::Bt2100Linhlg => { /* ... */ },
///     Tcs::Bt2100Linpq => { /* ... */ },
///     Tcs::Density => { /* ... */ },
///     Tcs::Hlg => { /* ... */ },
///     Tcs::Linear => { /* ... */ },
///     Tcs::Pq => { /* ... */ },
///     Tcs::Sdr => { /* ... */ },
///     Tcs::St20651 => { /* ... */ },
///     Tcs::St4281 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `tcs` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Tcs::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Tcs::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Tcs::NewFeature` is defined.
/// Specifically, when `tcs` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Tcs::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Tcs {
    #[allow(missing_docs)] // documentation missing in model
    Bt2100Linhlg,
    #[allow(missing_docs)] // documentation missing in model
    Bt2100Linpq,
    #[allow(missing_docs)] // documentation missing in model
    Density,
    #[allow(missing_docs)] // documentation missing in model
    Hlg,
    #[allow(missing_docs)] // documentation missing in model
    Linear,
    #[allow(missing_docs)] // documentation missing in model
    Pq,
    #[allow(missing_docs)] // documentation missing in model
    Sdr,
    #[allow(missing_docs)] // documentation missing in model
    St20651,
    #[allow(missing_docs)] // documentation missing in model
    St4281,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Tcs {
    fn from(s: &str) -> Self {
        match s {
            "BT2100LINHLG" => Tcs::Bt2100Linhlg,
            "BT2100LINPQ" => Tcs::Bt2100Linpq,
            "DENSITY" => Tcs::Density,
            "HLG" => Tcs::Hlg,
            "LINEAR" => Tcs::Linear,
            "PQ" => Tcs::Pq,
            "SDR" => Tcs::Sdr,
            "ST2065-1" => Tcs::St20651,
            "ST428-1" => Tcs::St4281,
            other => Tcs::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for Tcs {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Tcs::from(s))
    }
}
impl Tcs {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Tcs::Bt2100Linhlg => "BT2100LINHLG",
            Tcs::Bt2100Linpq => "BT2100LINPQ",
            Tcs::Density => "DENSITY",
            Tcs::Hlg => "HLG",
            Tcs::Linear => "LINEAR",
            Tcs::Pq => "PQ",
            Tcs::Sdr => "SDR",
            Tcs::St20651 => "ST2065-1",
            Tcs::St4281 => "ST428-1",
            Tcs::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BT2100LINHLG",
            "BT2100LINPQ",
            "DENSITY",
            "HLG",
            "LINEAR",
            "PQ",
            "SDR",
            "ST2065-1",
            "ST428-1",
        ]
    }
}
impl AsRef<str> for Tcs {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
