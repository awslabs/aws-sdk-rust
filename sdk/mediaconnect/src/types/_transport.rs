// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Attributes related to the transport stream that are used in a source or output.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Transport {
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    #[doc(hidden)]
    pub cidr_allow_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    #[doc(hidden)]
    pub max_bitrate: i32,
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    #[doc(hidden)]
    pub max_latency: i32,
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    #[doc(hidden)]
    pub max_sync_buffer: i32,
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    #[doc(hidden)]
    pub min_latency: i32,
    /// The protocol that is used by the source or output.
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::Protocol>,
    /// The remote ID for the Zixi-pull stream.
    #[doc(hidden)]
    pub remote_id: std::option::Option<std::string::String>,
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    #[doc(hidden)]
    pub sender_control_port: i32,
    /// The IP address that the flow communicates with to initiate connection with the sender.
    #[doc(hidden)]
    pub sender_ip_address: std::option::Option<std::string::String>,
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    #[doc(hidden)]
    pub smoothing_latency: i32,
    /// Source IP or domain name for SRT-caller protocol.
    #[doc(hidden)]
    pub source_listener_address: std::option::Option<std::string::String>,
    /// Source port for SRT-caller protocol.
    #[doc(hidden)]
    pub source_listener_port: i32,
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    #[doc(hidden)]
    pub stream_id: std::option::Option<std::string::String>,
}
impl Transport {
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn cidr_allow_list(&self) -> std::option::Option<&[std::string::String]> {
        self.cidr_allow_list.as_deref()
    }
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    pub fn max_bitrate(&self) -> i32 {
        self.max_bitrate
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn max_latency(&self) -> i32 {
        self.max_latency
    }
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    pub fn max_sync_buffer(&self) -> i32 {
        self.max_sync_buffer
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn min_latency(&self) -> i32 {
        self.min_latency
    }
    /// The protocol that is used by the source or output.
    pub fn protocol(&self) -> std::option::Option<&crate::types::Protocol> {
        self.protocol.as_ref()
    }
    /// The remote ID for the Zixi-pull stream.
    pub fn remote_id(&self) -> std::option::Option<&str> {
        self.remote_id.as_deref()
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn sender_control_port(&self) -> i32 {
        self.sender_control_port
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn sender_ip_address(&self) -> std::option::Option<&str> {
        self.sender_ip_address.as_deref()
    }
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    pub fn smoothing_latency(&self) -> i32 {
        self.smoothing_latency
    }
    /// Source IP or domain name for SRT-caller protocol.
    pub fn source_listener_address(&self) -> std::option::Option<&str> {
        self.source_listener_address.as_deref()
    }
    /// Source port for SRT-caller protocol.
    pub fn source_listener_port(&self) -> i32 {
        self.source_listener_port
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn stream_id(&self) -> std::option::Option<&str> {
        self.stream_id.as_deref()
    }
}
impl Transport {
    /// Creates a new builder-style object to manufacture [`Transport`](crate::types::Transport).
    pub fn builder() -> crate::types::builders::TransportBuilder {
        crate::types::builders::TransportBuilder::default()
    }
}

/// A builder for [`Transport`](crate::types::Transport).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransportBuilder {
    pub(crate) cidr_allow_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) max_bitrate: std::option::Option<i32>,
    pub(crate) max_latency: std::option::Option<i32>,
    pub(crate) max_sync_buffer: std::option::Option<i32>,
    pub(crate) min_latency: std::option::Option<i32>,
    pub(crate) protocol: std::option::Option<crate::types::Protocol>,
    pub(crate) remote_id: std::option::Option<std::string::String>,
    pub(crate) sender_control_port: std::option::Option<i32>,
    pub(crate) sender_ip_address: std::option::Option<std::string::String>,
    pub(crate) smoothing_latency: std::option::Option<i32>,
    pub(crate) source_listener_address: std::option::Option<std::string::String>,
    pub(crate) source_listener_port: std::option::Option<i32>,
    pub(crate) stream_id: std::option::Option<std::string::String>,
}
impl TransportBuilder {
    /// Appends an item to `cidr_allow_list`.
    ///
    /// To override the contents of this collection use [`set_cidr_allow_list`](Self::set_cidr_allow_list).
    ///
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn cidr_allow_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.cidr_allow_list.unwrap_or_default();
        v.push(input.into());
        self.cidr_allow_list = Some(v);
        self
    }
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn set_cidr_allow_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.cidr_allow_list = input;
        self
    }
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.max_bitrate = Some(input);
        self
    }
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    pub fn set_max_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.max_bitrate = input;
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn max_latency(mut self, input: i32) -> Self {
        self.max_latency = Some(input);
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn set_max_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.max_latency = input;
        self
    }
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    pub fn max_sync_buffer(mut self, input: i32) -> Self {
        self.max_sync_buffer = Some(input);
        self
    }
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    pub fn set_max_sync_buffer(mut self, input: std::option::Option<i32>) -> Self {
        self.max_sync_buffer = input;
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn min_latency(mut self, input: i32) -> Self {
        self.min_latency = Some(input);
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn set_min_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.min_latency = input;
        self
    }
    /// The protocol that is used by the source or output.
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// The protocol that is used by the source or output.
    pub fn set_protocol(mut self, input: std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// The remote ID for the Zixi-pull stream.
    pub fn remote_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.remote_id = Some(input.into());
        self
    }
    /// The remote ID for the Zixi-pull stream.
    pub fn set_remote_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.remote_id = input;
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn sender_control_port(mut self, input: i32) -> Self {
        self.sender_control_port = Some(input);
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn set_sender_control_port(mut self, input: std::option::Option<i32>) -> Self {
        self.sender_control_port = input;
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn sender_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.sender_ip_address = Some(input.into());
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn set_sender_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sender_ip_address = input;
        self
    }
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    pub fn smoothing_latency(mut self, input: i32) -> Self {
        self.smoothing_latency = Some(input);
        self
    }
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    pub fn set_smoothing_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.smoothing_latency = input;
        self
    }
    /// Source IP or domain name for SRT-caller protocol.
    pub fn source_listener_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_listener_address = Some(input.into());
        self
    }
    /// Source IP or domain name for SRT-caller protocol.
    pub fn set_source_listener_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_listener_address = input;
        self
    }
    /// Source port for SRT-caller protocol.
    pub fn source_listener_port(mut self, input: i32) -> Self {
        self.source_listener_port = Some(input);
        self
    }
    /// Source port for SRT-caller protocol.
    pub fn set_source_listener_port(mut self, input: std::option::Option<i32>) -> Self {
        self.source_listener_port = input;
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_id = Some(input.into());
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// Consumes the builder and constructs a [`Transport`](crate::types::Transport).
    pub fn build(self) -> crate::types::Transport {
        crate::types::Transport {
            cidr_allow_list: self.cidr_allow_list,
            max_bitrate: self.max_bitrate.unwrap_or_default(),
            max_latency: self.max_latency.unwrap_or_default(),
            max_sync_buffer: self.max_sync_buffer.unwrap_or_default(),
            min_latency: self.min_latency.unwrap_or_default(),
            protocol: self.protocol,
            remote_id: self.remote_id,
            sender_control_port: self.sender_control_port.unwrap_or_default(),
            sender_ip_address: self.sender_ip_address,
            smoothing_latency: self.smoothing_latency.unwrap_or_default(),
            source_listener_address: self.source_listener_address,
            source_listener_port: self.source_listener_port.unwrap_or_default(),
            stream_id: self.stream_id,
        }
    }
}
