// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for an output.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Output {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    /// A description of the output.
    pub description: ::std::option::Option<::std::string::String>,
    /// The address where you want to send the output.
    pub destination: ::std::option::Option<::std::string::String>,
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub encryption: ::std::option::Option<crate::types::Encryption>,
    /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
    pub entitlement_arn: ::std::option::Option<::std::string::String>,
    /// The IP address that the receiver requires in order to establish a connection with the flow. For public networking, the ListenerAddress is represented by the elastic IP address of the flow. For private networking, the ListenerAddress is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the Zixi pull or SRT listener protocol.
    pub listener_address: ::std::option::Option<::std::string::String>,
    /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
    pub media_live_input_arn: ::std::option::Option<::std::string::String>,
    /// The configuration for each media stream that is associated with the output.
    pub media_stream_output_configurations: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamOutputConfiguration>>,
    /// The name of the output. This value must be unique within the current flow.
    pub name: ::std::option::Option<::std::string::String>,
    /// The ARN of the output.
    pub output_arn: ::std::option::Option<::std::string::String>,
    /// The port to use when content is distributed to this output.
    pub port: ::std::option::Option<i32>,
    /// Attributes related to the transport stream that are used in the output.
    pub transport: ::std::option::Option<crate::types::Transport>,
    /// The name of the VPC interface attachment to use for this output.
    pub vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
    /// The ARN of the bridge that added this output.
    pub bridge_arn: ::std::option::Option<::std::string::String>,
    /// The bridge output ports currently in use.
    pub bridge_ports: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl Output {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn data_transfer_subscriber_fee_percent(&self) -> ::std::option::Option<i32> {
        self.data_transfer_subscriber_fee_percent
    }
    /// A description of the output.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// The address where you want to send the output.
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn encryption(&self) -> ::std::option::Option<&crate::types::Encryption> {
        self.encryption.as_ref()
    }
    /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
    pub fn entitlement_arn(&self) -> ::std::option::Option<&str> {
        self.entitlement_arn.as_deref()
    }
    /// The IP address that the receiver requires in order to establish a connection with the flow. For public networking, the ListenerAddress is represented by the elastic IP address of the flow. For private networking, the ListenerAddress is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the Zixi pull or SRT listener protocol.
    pub fn listener_address(&self) -> ::std::option::Option<&str> {
        self.listener_address.as_deref()
    }
    /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
    pub fn media_live_input_arn(&self) -> ::std::option::Option<&str> {
        self.media_live_input_arn.as_deref()
    }
    /// The configuration for each media stream that is associated with the output.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.media_stream_output_configurations.is_none()`.
    pub fn media_stream_output_configurations(&self) -> &[crate::types::MediaStreamOutputConfiguration] {
        self.media_stream_output_configurations.as_deref().unwrap_or_default()
    }
    /// The name of the output. This value must be unique within the current flow.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The ARN of the output.
    pub fn output_arn(&self) -> ::std::option::Option<&str> {
        self.output_arn.as_deref()
    }
    /// The port to use when content is distributed to this output.
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// Attributes related to the transport stream that are used in the output.
    pub fn transport(&self) -> ::std::option::Option<&crate::types::Transport> {
        self.transport.as_ref()
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn vpc_interface_attachment(&self) -> ::std::option::Option<&crate::types::VpcInterfaceAttachment> {
        self.vpc_interface_attachment.as_ref()
    }
    /// The ARN of the bridge that added this output.
    pub fn bridge_arn(&self) -> ::std::option::Option<&str> {
        self.bridge_arn.as_deref()
    }
    /// The bridge output ports currently in use.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bridge_ports.is_none()`.
    pub fn bridge_ports(&self) -> &[i32] {
        self.bridge_ports.as_deref().unwrap_or_default()
    }
}
impl Output {
    /// Creates a new builder-style object to manufacture [`Output`](crate::types::Output).
    pub fn builder() -> crate::types::builders::OutputBuilder {
        crate::types::builders::OutputBuilder::default()
    }
}

/// A builder for [`Output`](crate::types::Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputBuilder {
    pub(crate) data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) encryption: ::std::option::Option<crate::types::Encryption>,
    pub(crate) entitlement_arn: ::std::option::Option<::std::string::String>,
    pub(crate) listener_address: ::std::option::Option<::std::string::String>,
    pub(crate) media_live_input_arn: ::std::option::Option<::std::string::String>,
    pub(crate) media_stream_output_configurations: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamOutputConfiguration>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) output_arn: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) transport: ::std::option::Option<crate::types::Transport>,
    pub(crate) vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
    pub(crate) bridge_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bridge_ports: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl OutputBuilder {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn data_transfer_subscriber_fee_percent(mut self, input: i32) -> Self {
        self.data_transfer_subscriber_fee_percent = ::std::option::Option::Some(input);
        self
    }
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn set_data_transfer_subscriber_fee_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_transfer_subscriber_fee_percent = input;
        self
    }
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn get_data_transfer_subscriber_fee_percent(&self) -> &::std::option::Option<i32> {
        &self.data_transfer_subscriber_fee_percent
    }
    /// A description of the output.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A description of the output.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A description of the output.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// The address where you want to send the output.
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// The address where you want to send the output.
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// The address where you want to send the output.
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn encryption(mut self, input: crate::types::Encryption) -> Self {
        self.encryption = ::std::option::Option::Some(input);
        self
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn set_encryption(mut self, input: ::std::option::Option<crate::types::Encryption>) -> Self {
        self.encryption = input;
        self
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn get_encryption(&self) -> &::std::option::Option<crate::types::Encryption> {
        &self.encryption
    }
    /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
    pub fn entitlement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entitlement_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
    pub fn set_entitlement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entitlement_arn = input;
        self
    }
    /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
    pub fn get_entitlement_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.entitlement_arn
    }
    /// The IP address that the receiver requires in order to establish a connection with the flow. For public networking, the ListenerAddress is represented by the elastic IP address of the flow. For private networking, the ListenerAddress is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the Zixi pull or SRT listener protocol.
    pub fn listener_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listener_address = ::std::option::Option::Some(input.into());
        self
    }
    /// The IP address that the receiver requires in order to establish a connection with the flow. For public networking, the ListenerAddress is represented by the elastic IP address of the flow. For private networking, the ListenerAddress is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the Zixi pull or SRT listener protocol.
    pub fn set_listener_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listener_address = input;
        self
    }
    /// The IP address that the receiver requires in order to establish a connection with the flow. For public networking, the ListenerAddress is represented by the elastic IP address of the flow. For private networking, the ListenerAddress is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the Zixi pull or SRT listener protocol.
    pub fn get_listener_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.listener_address
    }
    /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
    pub fn media_live_input_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_live_input_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
    pub fn set_media_live_input_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_live_input_arn = input;
        self
    }
    /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
    pub fn get_media_live_input_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_live_input_arn
    }
    /// Appends an item to `media_stream_output_configurations`.
    ///
    /// To override the contents of this collection use [`set_media_stream_output_configurations`](Self::set_media_stream_output_configurations).
    ///
    /// The configuration for each media stream that is associated with the output.
    pub fn media_stream_output_configurations(mut self, input: crate::types::MediaStreamOutputConfiguration) -> Self {
        let mut v = self.media_stream_output_configurations.unwrap_or_default();
        v.push(input);
        self.media_stream_output_configurations = ::std::option::Option::Some(v);
        self
    }
    /// The configuration for each media stream that is associated with the output.
    pub fn set_media_stream_output_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamOutputConfiguration>>,
    ) -> Self {
        self.media_stream_output_configurations = input;
        self
    }
    /// The configuration for each media stream that is associated with the output.
    pub fn get_media_stream_output_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaStreamOutputConfiguration>> {
        &self.media_stream_output_configurations
    }
    /// The name of the output. This value must be unique within the current flow.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the output. This value must be unique within the current flow.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of the output. This value must be unique within the current flow.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// The ARN of the output.
    /// This field is required.
    pub fn output_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the output.
    pub fn set_output_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_arn = input;
        self
    }
    /// The ARN of the output.
    pub fn get_output_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_arn
    }
    /// The port to use when content is distributed to this output.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// The port to use when content is distributed to this output.
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// The port to use when content is distributed to this output.
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// Attributes related to the transport stream that are used in the output.
    pub fn transport(mut self, input: crate::types::Transport) -> Self {
        self.transport = ::std::option::Option::Some(input);
        self
    }
    /// Attributes related to the transport stream that are used in the output.
    pub fn set_transport(mut self, input: ::std::option::Option<crate::types::Transport>) -> Self {
        self.transport = input;
        self
    }
    /// Attributes related to the transport stream that are used in the output.
    pub fn get_transport(&self) -> &::std::option::Option<crate::types::Transport> {
        &self.transport
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn vpc_interface_attachment(mut self, input: crate::types::VpcInterfaceAttachment) -> Self {
        self.vpc_interface_attachment = ::std::option::Option::Some(input);
        self
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn set_vpc_interface_attachment(mut self, input: ::std::option::Option<crate::types::VpcInterfaceAttachment>) -> Self {
        self.vpc_interface_attachment = input;
        self
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn get_vpc_interface_attachment(&self) -> &::std::option::Option<crate::types::VpcInterfaceAttachment> {
        &self.vpc_interface_attachment
    }
    /// The ARN of the bridge that added this output.
    pub fn bridge_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the bridge that added this output.
    pub fn set_bridge_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_arn = input;
        self
    }
    /// The ARN of the bridge that added this output.
    pub fn get_bridge_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_arn
    }
    /// Appends an item to `bridge_ports`.
    ///
    /// To override the contents of this collection use [`set_bridge_ports`](Self::set_bridge_ports).
    ///
    /// The bridge output ports currently in use.
    pub fn bridge_ports(mut self, input: i32) -> Self {
        let mut v = self.bridge_ports.unwrap_or_default();
        v.push(input);
        self.bridge_ports = ::std::option::Option::Some(v);
        self
    }
    /// The bridge output ports currently in use.
    pub fn set_bridge_ports(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.bridge_ports = input;
        self
    }
    /// The bridge output ports currently in use.
    pub fn get_bridge_ports(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.bridge_ports
    }
    /// Consumes the builder and constructs a [`Output`](crate::types::Output).
    pub fn build(self) -> crate::types::Output {
        crate::types::Output {
            data_transfer_subscriber_fee_percent: self.data_transfer_subscriber_fee_percent,
            description: self.description,
            destination: self.destination,
            encryption: self.encryption,
            entitlement_arn: self.entitlement_arn,
            listener_address: self.listener_address,
            media_live_input_arn: self.media_live_input_arn,
            media_stream_output_configurations: self.media_stream_output_configurations,
            name: self.name,
            output_arn: self.output_arn,
            port: self.port,
            transport: self.transport,
            vpc_interface_attachment: self.vpc_interface_attachment,
            bridge_arn: self.bridge_arn,
            bridge_ports: self.bridge_ports,
        }
    }
}
