// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The entitlements that you want to grant on a flow.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GrantEntitlementRequest {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub description: ::std::option::Option<::std::string::String>,
    /// The type of encryption that will be used on the output that is associated with this entitlement. Allowable encryption types: static-key, speke.
    pub encryption: ::std::option::Option<crate::types::Encryption>,
    /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
    pub entitlement_status: ::std::option::Option<crate::types::EntitlementStatus>,
    /// The name of the entitlement. This value must be unique within the current flow.
    pub name: ::std::option::Option<::std::string::String>,
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
    pub subscribers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GrantEntitlementRequest {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn data_transfer_subscriber_fee_percent(&self) -> ::std::option::Option<i32> {
        self.data_transfer_subscriber_fee_percent
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// The type of encryption that will be used on the output that is associated with this entitlement. Allowable encryption types: static-key, speke.
    pub fn encryption(&self) -> ::std::option::Option<&crate::types::Encryption> {
        self.encryption.as_ref()
    }
    /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
    pub fn entitlement_status(&self) -> ::std::option::Option<&crate::types::EntitlementStatus> {
        self.entitlement_status.as_ref()
    }
    /// The name of the entitlement. This value must be unique within the current flow.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subscribers.is_none()`.
    pub fn subscribers(&self) -> &[::std::string::String] {
        self.subscribers.as_deref().unwrap_or_default()
    }
}
impl GrantEntitlementRequest {
    /// Creates a new builder-style object to manufacture [`GrantEntitlementRequest`](crate::types::GrantEntitlementRequest).
    pub fn builder() -> crate::types::builders::GrantEntitlementRequestBuilder {
        crate::types::builders::GrantEntitlementRequestBuilder::default()
    }
}

/// A builder for [`GrantEntitlementRequest`](crate::types::GrantEntitlementRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GrantEntitlementRequestBuilder {
    pub(crate) data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) encryption: ::std::option::Option<crate::types::Encryption>,
    pub(crate) entitlement_status: ::std::option::Option<crate::types::EntitlementStatus>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) subscribers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GrantEntitlementRequestBuilder {
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn data_transfer_subscriber_fee_percent(mut self, input: i32) -> Self {
        self.data_transfer_subscriber_fee_percent = ::std::option::Option::Some(input);
        self
    }
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn set_data_transfer_subscriber_fee_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_transfer_subscriber_fee_percent = input;
        self
    }
    /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
    pub fn get_data_transfer_subscriber_fee_percent(&self) -> &::std::option::Option<i32> {
        &self.data_transfer_subscriber_fee_percent
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// The type of encryption that will be used on the output that is associated with this entitlement. Allowable encryption types: static-key, speke.
    pub fn encryption(mut self, input: crate::types::Encryption) -> Self {
        self.encryption = ::std::option::Option::Some(input);
        self
    }
    /// The type of encryption that will be used on the output that is associated with this entitlement. Allowable encryption types: static-key, speke.
    pub fn set_encryption(mut self, input: ::std::option::Option<crate::types::Encryption>) -> Self {
        self.encryption = input;
        self
    }
    /// The type of encryption that will be used on the output that is associated with this entitlement. Allowable encryption types: static-key, speke.
    pub fn get_encryption(&self) -> &::std::option::Option<crate::types::Encryption> {
        &self.encryption
    }
    /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
    pub fn entitlement_status(mut self, input: crate::types::EntitlementStatus) -> Self {
        self.entitlement_status = ::std::option::Option::Some(input);
        self
    }
    /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
    pub fn set_entitlement_status(mut self, input: ::std::option::Option<crate::types::EntitlementStatus>) -> Self {
        self.entitlement_status = input;
        self
    }
    /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
    pub fn get_entitlement_status(&self) -> &::std::option::Option<crate::types::EntitlementStatus> {
        &self.entitlement_status
    }
    /// The name of the entitlement. This value must be unique within the current flow.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the entitlement. This value must be unique within the current flow.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of the entitlement. This value must be unique within the current flow.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
    pub fn subscribers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subscribers.unwrap_or_default();
        v.push(input.into());
        self.subscribers = ::std::option::Option::Some(v);
        self
    }
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
    pub fn set_subscribers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subscribers = input;
        self
    }
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
    pub fn get_subscribers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subscribers
    }
    /// Consumes the builder and constructs a [`GrantEntitlementRequest`](crate::types::GrantEntitlementRequest).
    pub fn build(self) -> crate::types::GrantEntitlementRequest {
        crate::types::GrantEntitlementRequest {
            data_transfer_subscriber_fee_percent: self.data_transfer_subscriber_fee_percent,
            description: self.description,
            encryption: self.encryption,
            entitlement_status: self.entitlement_status,
            name: self.name,
            subscribers: self.subscribers,
        }
    }
}
