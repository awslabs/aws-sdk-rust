// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Desired VPC Interface for a Flow
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcInterfaceRequest {
    /// The name of the VPC Interface. This value must be unique within the current flow.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// The type of network interface. If this value is not included in the request, MediaConnect uses ENA as the networkInterfaceType.
    #[doc(hidden)]
    pub network_interface_type: std::option::Option<crate::types::NetworkInterfaceType>,
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// Security Group IDs to be used on ENI.
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// Subnet must be in the AZ of the Flow
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
}
impl VpcInterfaceRequest {
    /// The name of the VPC Interface. This value must be unique within the current flow.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The type of network interface. If this value is not included in the request, MediaConnect uses ENA as the networkInterfaceType.
    pub fn network_interface_type(
        &self,
    ) -> std::option::Option<&crate::types::NetworkInterfaceType> {
        self.network_interface_type.as_ref()
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// Security Group IDs to be used on ENI.
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// Subnet must be in the AZ of the Flow
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
}
impl VpcInterfaceRequest {
    /// Creates a new builder-style object to manufacture [`VpcInterfaceRequest`](crate::types::VpcInterfaceRequest).
    pub fn builder() -> crate::types::builders::VpcInterfaceRequestBuilder {
        crate::types::builders::VpcInterfaceRequestBuilder::default()
    }
}

/// A builder for [`VpcInterfaceRequest`](crate::types::VpcInterfaceRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcInterfaceRequestBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) network_interface_type: std::option::Option<crate::types::NetworkInterfaceType>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
}
impl VpcInterfaceRequestBuilder {
    /// The name of the VPC Interface. This value must be unique within the current flow.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// The name of the VPC Interface. This value must be unique within the current flow.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The type of network interface. If this value is not included in the request, MediaConnect uses ENA as the networkInterfaceType.
    pub fn network_interface_type(mut self, input: crate::types::NetworkInterfaceType) -> Self {
        self.network_interface_type = Some(input);
        self
    }
    /// The type of network interface. If this value is not included in the request, MediaConnect uses ENA as the networkInterfaceType.
    pub fn set_network_interface_type(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceType>,
    ) -> Self {
        self.network_interface_type = input;
        self
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// Role Arn MediaConnect can assumes to create ENIs in customer's account
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// Security Group IDs to be used on ENI.
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// Security Group IDs to be used on ENI.
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// Subnet must be in the AZ of the Flow
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// Subnet must be in the AZ of the Flow
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcInterfaceRequest`](crate::types::VpcInterfaceRequest).
    pub fn build(self) -> crate::types::VpcInterfaceRequest {
        crate::types::VpcInterfaceRequest {
            name: self.name,
            network_interface_type: self.network_interface_type,
            role_arn: self.role_arn,
            security_group_ids: self.security_group_ids,
            subnet_id: self.subnet_id,
        }
    }
}
