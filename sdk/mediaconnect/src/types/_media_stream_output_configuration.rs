// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The media stream that is associated with the output, and the parameters for that association.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaStreamOutputConfiguration {
    /// The transport parameters that are associated with each outbound media stream.
    pub destination_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfiguration>>,
    /// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
    pub encoding_name: ::std::option::Option<crate::types::EncodingName>,
    /// Encoding parameters
    pub encoding_parameters: ::std::option::Option<crate::types::EncodingParameters>,
    /// The name of the media stream.
    pub media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamOutputConfiguration {
    /// The transport parameters that are associated with each outbound media stream.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_configurations.is_none()`.
    pub fn destination_configurations(&self) -> &[crate::types::DestinationConfiguration] {
        self.destination_configurations.as_deref().unwrap_or_default()
    }
    /// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
    pub fn encoding_name(&self) -> ::std::option::Option<&crate::types::EncodingName> {
        self.encoding_name.as_ref()
    }
    /// Encoding parameters
    pub fn encoding_parameters(&self) -> ::std::option::Option<&crate::types::EncodingParameters> {
        self.encoding_parameters.as_ref()
    }
    /// The name of the media stream.
    pub fn media_stream_name(&self) -> ::std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
}
impl MediaStreamOutputConfiguration {
    /// Creates a new builder-style object to manufacture [`MediaStreamOutputConfiguration`](crate::types::MediaStreamOutputConfiguration).
    pub fn builder() -> crate::types::builders::MediaStreamOutputConfigurationBuilder {
        crate::types::builders::MediaStreamOutputConfigurationBuilder::default()
    }
}

/// A builder for [`MediaStreamOutputConfiguration`](crate::types::MediaStreamOutputConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaStreamOutputConfigurationBuilder {
    pub(crate) destination_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfiguration>>,
    pub(crate) encoding_name: ::std::option::Option<crate::types::EncodingName>,
    pub(crate) encoding_parameters: ::std::option::Option<crate::types::EncodingParameters>,
    pub(crate) media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamOutputConfigurationBuilder {
    /// Appends an item to `destination_configurations`.
    ///
    /// To override the contents of this collection use [`set_destination_configurations`](Self::set_destination_configurations).
    ///
    /// The transport parameters that are associated with each outbound media stream.
    pub fn destination_configurations(mut self, input: crate::types::DestinationConfiguration) -> Self {
        let mut v = self.destination_configurations.unwrap_or_default();
        v.push(input);
        self.destination_configurations = ::std::option::Option::Some(v);
        self
    }
    /// The transport parameters that are associated with each outbound media stream.
    pub fn set_destination_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfiguration>>) -> Self {
        self.destination_configurations = input;
        self
    }
    /// The transport parameters that are associated with each outbound media stream.
    pub fn get_destination_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationConfiguration>> {
        &self.destination_configurations
    }
    /// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
    /// This field is required.
    pub fn encoding_name(mut self, input: crate::types::EncodingName) -> Self {
        self.encoding_name = ::std::option::Option::Some(input);
        self
    }
    /// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
    pub fn set_encoding_name(mut self, input: ::std::option::Option<crate::types::EncodingName>) -> Self {
        self.encoding_name = input;
        self
    }
    /// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
    pub fn get_encoding_name(&self) -> &::std::option::Option<crate::types::EncodingName> {
        &self.encoding_name
    }
    /// Encoding parameters
    pub fn encoding_parameters(mut self, input: crate::types::EncodingParameters) -> Self {
        self.encoding_parameters = ::std::option::Option::Some(input);
        self
    }
    /// Encoding parameters
    pub fn set_encoding_parameters(mut self, input: ::std::option::Option<crate::types::EncodingParameters>) -> Self {
        self.encoding_parameters = input;
        self
    }
    /// Encoding parameters
    pub fn get_encoding_parameters(&self) -> &::std::option::Option<crate::types::EncodingParameters> {
        &self.encoding_parameters
    }
    /// The name of the media stream.
    /// This field is required.
    pub fn media_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the media stream.
    pub fn set_media_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_stream_name = input;
        self
    }
    /// The name of the media stream.
    pub fn get_media_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_stream_name
    }
    /// Consumes the builder and constructs a [`MediaStreamOutputConfiguration`](crate::types::MediaStreamOutputConfiguration).
    pub fn build(self) -> crate::types::MediaStreamOutputConfiguration {
        crate::types::MediaStreamOutputConfiguration {
            destination_configurations: self.destination_configurations,
            encoding_name: self.encoding_name,
            encoding_parameters: self.encoding_parameters,
            media_stream_name: self.media_stream_name,
        }
    }
}
