// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_flow_media_streams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddFlowMediaStreamsInput,
) {
    if let Some(var_1) = &input.media_streams {
        let mut array_2 = object.key("mediaStreams").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_add_media_stream_request(
                    &mut object_4,
                    item_3,
                );
                object_4.finish();
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_add_flow_outputs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddFlowOutputsInput,
) {
    if let Some(var_5) = &input.outputs {
        let mut array_6 = object.key("outputs").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_add_output_request(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_add_flow_sources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddFlowSourcesInput,
) {
    if let Some(var_9) = &input.sources {
        let mut array_10 = object.key("sources").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_set_source_request(&mut object_12, item_11);
                object_12.finish();
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_add_flow_vpc_interfaces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddFlowVpcInterfacesInput,
) {
    if let Some(var_13) = &input.vpc_interfaces {
        let mut array_14 = object.key("vpcInterfaces").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_vpc_interface_request(&mut object_16, item_15);
                object_16.finish();
            }
        }
        array_14.finish();
    }
}

pub fn serialize_structure_create_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowInput,
) {
    if let Some(var_17) = &input.availability_zone {
        object.key("availabilityZone").string(var_17);
    }
    if let Some(var_18) = &input.entitlements {
        let mut array_19 = object.key("entitlements").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_grant_entitlement_request(
                    &mut object_21,
                    item_20,
                );
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.media_streams {
        let mut array_23 = object.key("mediaStreams").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_add_media_stream_request(
                    &mut object_25,
                    item_24,
                );
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.name {
        object.key("name").string(var_26);
    }
    if let Some(var_27) = &input.outputs {
        let mut array_28 = object.key("outputs").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_add_output_request(&mut object_30, item_29);
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.source {
        let mut object_32 = object.key("source").start_object();
        crate::json_ser::serialize_structure_set_source_request(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.source_failover_config {
        let mut object_34 = object.key("sourceFailoverConfig").start_object();
        crate::json_ser::serialize_structure_failover_config(&mut object_34, var_33);
        object_34.finish();
    }
    if let Some(var_35) = &input.sources {
        let mut array_36 = object.key("sources").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_set_source_request(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.vpc_interfaces {
        let mut array_40 = object.key("vpcInterfaces").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_vpc_interface_request(&mut object_42, item_41);
                object_42.finish();
            }
        }
        array_40.finish();
    }
}

pub fn serialize_structure_grant_flow_entitlements_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GrantFlowEntitlementsInput,
) {
    if let Some(var_43) = &input.entitlements {
        let mut array_44 = object.key("entitlements").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_grant_entitlement_request(
                    &mut object_46,
                    item_45,
                );
                object_46.finish();
            }
        }
        array_44.finish();
    }
}

pub fn serialize_structure_purchase_offering_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PurchaseOfferingInput,
) {
    if let Some(var_47) = &input.reservation_name {
        object.key("reservationName").string(var_47);
    }
    if let Some(var_48) = &input.start {
        object.key("start").string(var_48);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_49) = &input.tags {
        let mut object_50 = object.key("tags").start_object();
        for (key_51, value_52) in var_49 {
            {
                object_50.key(key_51).string(value_52);
            }
        }
        object_50.finish();
    }
}

pub fn serialize_structure_update_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFlowInput,
) {
    if let Some(var_53) = &input.source_failover_config {
        let mut object_54 = object.key("sourceFailoverConfig").start_object();
        crate::json_ser::serialize_structure_update_failover_config(&mut object_54, var_53);
        object_54.finish();
    }
}

pub fn serialize_structure_update_flow_entitlement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFlowEntitlementInput,
) {
    if let Some(var_55) = &input.description {
        object.key("description").string(var_55);
    }
    if let Some(var_56) = &input.encryption {
        let mut object_57 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_update_encryption(&mut object_57, var_56);
        object_57.finish();
    }
    if let Some(var_58) = &input.entitlement_status {
        object.key("entitlementStatus").string(var_58.as_str());
    }
    if let Some(var_59) = &input.subscribers {
        let mut array_60 = object.key("subscribers").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61);
            }
        }
        array_60.finish();
    }
}

pub fn serialize_structure_update_flow_media_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFlowMediaStreamInput,
) {
    if let Some(var_62) = &input.attributes {
        let mut object_63 = object.key("attributes").start_object();
        crate::json_ser::serialize_structure_media_stream_attributes_request(
            &mut object_63,
            var_62,
        );
        object_63.finish();
    }
    if input.clock_rate != 0 {
        object.key("clockRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.clock_rate).into()),
        );
    }
    if let Some(var_64) = &input.description {
        object.key("description").string(var_64);
    }
    if let Some(var_65) = &input.media_stream_type {
        object.key("mediaStreamType").string(var_65.as_str());
    }
    if let Some(var_66) = &input.video_format {
        object.key("videoFormat").string(var_66);
    }
}

pub fn serialize_structure_update_flow_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFlowSourceInput,
) {
    if let Some(var_67) = &input.decryption {
        let mut object_68 = object.key("decryption").start_object();
        crate::json_ser::serialize_structure_update_encryption(&mut object_68, var_67);
        object_68.finish();
    }
    if let Some(var_69) = &input.description {
        object.key("description").string(var_69);
    }
    if let Some(var_70) = &input.entitlement_arn {
        object.key("entitlementArn").string(var_70);
    }
    if input.ingest_port != 0 {
        object.key("ingestPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ingest_port).into()),
        );
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.max_latency != 0 {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_latency).into()),
        );
    }
    if input.max_sync_buffer != 0 {
        object.key("maxSyncBuffer").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_sync_buffer).into()),
        );
    }
    if let Some(var_71) = &input.media_stream_source_configurations {
        let mut array_72 = object.key("mediaStreamSourceConfigurations").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_media_stream_source_configuration_request(
                    &mut object_74,
                    item_73,
                );
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if input.min_latency != 0 {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_latency).into()),
        );
    }
    if let Some(var_75) = &input.protocol {
        object.key("protocol").string(var_75.as_str());
    }
    if let Some(var_76) = &input.stream_id {
        object.key("streamId").string(var_76);
    }
    if let Some(var_77) = &input.vpc_interface_name {
        object.key("vpcInterfaceName").string(var_77);
    }
    if let Some(var_78) = &input.whitelist_cidr {
        object.key("whitelistCidr").string(var_78);
    }
}

pub fn serialize_structure_add_media_stream_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddMediaStreamRequest,
) {
    if let Some(var_79) = &input.attributes {
        let mut object_80 = object.key("attributes").start_object();
        crate::json_ser::serialize_structure_media_stream_attributes_request(
            &mut object_80,
            var_79,
        );
        object_80.finish();
    }
    if input.clock_rate != 0 {
        object.key("clockRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.clock_rate).into()),
        );
    }
    if let Some(var_81) = &input.description {
        object.key("description").string(var_81);
    }
    {
        object.key("mediaStreamId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.media_stream_id).into()),
        );
    }
    if let Some(var_82) = &input.media_stream_name {
        object.key("mediaStreamName").string(var_82);
    }
    if let Some(var_83) = &input.media_stream_type {
        object.key("mediaStreamType").string(var_83.as_str());
    }
    if let Some(var_84) = &input.video_format {
        object.key("videoFormat").string(var_84);
    }
}

pub fn serialize_structure_add_output_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddOutputRequest,
) {
    if let Some(var_85) = &input.cidr_allow_list {
        let mut array_86 = object.key("cidrAllowList").start_array();
        for item_87 in var_85 {
            {
                array_86.value().string(item_87);
            }
        }
        array_86.finish();
    }
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88);
    }
    if let Some(var_89) = &input.destination {
        object.key("destination").string(var_89);
    }
    if let Some(var_90) = &input.encryption {
        let mut object_91 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_encryption(&mut object_91, var_90);
        object_91.finish();
    }
    if input.max_latency != 0 {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_latency).into()),
        );
    }
    if let Some(var_92) = &input.media_stream_output_configurations {
        let mut array_93 = object.key("mediaStreamOutputConfigurations").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_media_stream_output_configuration_request(
                    &mut object_95,
                    item_94,
                );
                object_95.finish();
            }
        }
        array_93.finish();
    }
    if input.min_latency != 0 {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_latency).into()),
        );
    }
    if let Some(var_96) = &input.name {
        object.key("name").string(var_96);
    }
    if input.port != 0 {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_97) = &input.protocol {
        object.key("protocol").string(var_97.as_str());
    }
    if let Some(var_98) = &input.remote_id {
        object.key("remoteId").string(var_98);
    }
    if input.smoothing_latency != 0 {
        object.key("smoothingLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.smoothing_latency).into()),
        );
    }
    if let Some(var_99) = &input.stream_id {
        object.key("streamId").string(var_99);
    }
    if let Some(var_100) = &input.vpc_interface_attachment {
        let mut object_101 = object.key("vpcInterfaceAttachment").start_object();
        crate::json_ser::serialize_structure_vpc_interface_attachment(&mut object_101, var_100);
        object_101.finish();
    }
}

pub fn serialize_structure_set_source_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SetSourceRequest,
) {
    if let Some(var_102) = &input.decryption {
        let mut object_103 = object.key("decryption").start_object();
        crate::json_ser::serialize_structure_encryption(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.description {
        object.key("description").string(var_104);
    }
    if let Some(var_105) = &input.entitlement_arn {
        object.key("entitlementArn").string(var_105);
    }
    if input.ingest_port != 0 {
        object.key("ingestPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ingest_port).into()),
        );
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.max_latency != 0 {
        object.key("maxLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_latency).into()),
        );
    }
    if input.max_sync_buffer != 0 {
        object.key("maxSyncBuffer").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_sync_buffer).into()),
        );
    }
    if let Some(var_106) = &input.media_stream_source_configurations {
        let mut array_107 = object.key("mediaStreamSourceConfigurations").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_media_stream_source_configuration_request(
                    &mut object_109,
                    item_108,
                );
                object_109.finish();
            }
        }
        array_107.finish();
    }
    if input.min_latency != 0 {
        object.key("minLatency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_latency).into()),
        );
    }
    if let Some(var_110) = &input.name {
        object.key("name").string(var_110);
    }
    if let Some(var_111) = &input.protocol {
        object.key("protocol").string(var_111.as_str());
    }
    if let Some(var_112) = &input.stream_id {
        object.key("streamId").string(var_112);
    }
    if let Some(var_113) = &input.vpc_interface_name {
        object.key("vpcInterfaceName").string(var_113);
    }
    if let Some(var_114) = &input.whitelist_cidr {
        object.key("whitelistCidr").string(var_114);
    }
}

pub fn serialize_structure_vpc_interface_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcInterfaceRequest,
) {
    if let Some(var_115) = &input.name {
        object.key("name").string(var_115);
    }
    if let Some(var_116) = &input.network_interface_type {
        object.key("networkInterfaceType").string(var_116.as_str());
    }
    if let Some(var_117) = &input.role_arn {
        object.key("roleArn").string(var_117);
    }
    if let Some(var_118) = &input.security_group_ids {
        let mut array_119 = object.key("securityGroupIds").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120);
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.subnet_id {
        object.key("subnetId").string(var_121);
    }
}

pub fn serialize_structure_grant_entitlement_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrantEntitlementRequest,
) {
    if input.data_transfer_subscriber_fee_percent != 0 {
        object.key("dataTransferSubscriberFeePercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.data_transfer_subscriber_fee_percent).into()),
        );
    }
    if let Some(var_122) = &input.description {
        object.key("description").string(var_122);
    }
    if let Some(var_123) = &input.encryption {
        let mut object_124 = object.key("encryption").start_object();
        crate::json_ser::serialize_structure_encryption(&mut object_124, var_123);
        object_124.finish();
    }
    if let Some(var_125) = &input.entitlement_status {
        object.key("entitlementStatus").string(var_125.as_str());
    }
    if let Some(var_126) = &input.name {
        object.key("name").string(var_126);
    }
    if let Some(var_127) = &input.subscribers {
        let mut array_128 = object.key("subscribers").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129);
            }
        }
        array_128.finish();
    }
}

pub fn serialize_structure_failover_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FailoverConfig,
) {
    if let Some(var_130) = &input.failover_mode {
        object.key("failoverMode").string(var_130.as_str());
    }
    if input.recovery_window != 0 {
        object.key("recoveryWindow").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.recovery_window).into()),
        );
    }
    if let Some(var_131) = &input.source_priority {
        let mut object_132 = object.key("sourcePriority").start_object();
        crate::json_ser::serialize_structure_source_priority(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.state {
        object.key("state").string(var_133.as_str());
    }
}

pub fn serialize_structure_update_failover_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateFailoverConfig,
) {
    if let Some(var_134) = &input.failover_mode {
        object.key("failoverMode").string(var_134.as_str());
    }
    if input.recovery_window != 0 {
        object.key("recoveryWindow").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.recovery_window).into()),
        );
    }
    if let Some(var_135) = &input.source_priority {
        let mut object_136 = object.key("sourcePriority").start_object();
        crate::json_ser::serialize_structure_source_priority(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.state {
        object.key("state").string(var_137.as_str());
    }
}

pub fn serialize_structure_update_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateEncryption,
) {
    if let Some(var_138) = &input.algorithm {
        object.key("algorithm").string(var_138.as_str());
    }
    if let Some(var_139) = &input.constant_initialization_vector {
        object.key("constantInitializationVector").string(var_139);
    }
    if let Some(var_140) = &input.device_id {
        object.key("deviceId").string(var_140);
    }
    if let Some(var_141) = &input.key_type {
        object.key("keyType").string(var_141.as_str());
    }
    if let Some(var_142) = &input.region {
        object.key("region").string(var_142);
    }
    if let Some(var_143) = &input.resource_id {
        object.key("resourceId").string(var_143);
    }
    if let Some(var_144) = &input.role_arn {
        object.key("roleArn").string(var_144);
    }
    if let Some(var_145) = &input.secret_arn {
        object.key("secretArn").string(var_145);
    }
    if let Some(var_146) = &input.url {
        object.key("url").string(var_146);
    }
}

pub fn serialize_structure_media_stream_attributes_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaStreamAttributesRequest,
) {
    if let Some(var_147) = &input.fmtp {
        let mut object_148 = object.key("fmtp").start_object();
        crate::json_ser::serialize_structure_fmtp_request(&mut object_148, var_147);
        object_148.finish();
    }
    if let Some(var_149) = &input.lang {
        object.key("lang").string(var_149);
    }
}

pub fn serialize_structure_media_stream_source_configuration_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaStreamSourceConfigurationRequest,
) {
    if let Some(var_150) = &input.encoding_name {
        object.key("encodingName").string(var_150.as_str());
    }
    if let Some(var_151) = &input.input_configurations {
        let mut array_152 = object.key("inputConfigurations").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_input_configuration_request(
                    &mut object_154,
                    item_153,
                );
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.media_stream_name {
        object.key("mediaStreamName").string(var_155);
    }
}

pub fn serialize_structure_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Encryption,
) {
    if let Some(var_156) = &input.algorithm {
        object.key("algorithm").string(var_156.as_str());
    }
    if let Some(var_157) = &input.constant_initialization_vector {
        object.key("constantInitializationVector").string(var_157);
    }
    if let Some(var_158) = &input.device_id {
        object.key("deviceId").string(var_158);
    }
    if let Some(var_159) = &input.key_type {
        object.key("keyType").string(var_159.as_str());
    }
    if let Some(var_160) = &input.region {
        object.key("region").string(var_160);
    }
    if let Some(var_161) = &input.resource_id {
        object.key("resourceId").string(var_161);
    }
    if let Some(var_162) = &input.role_arn {
        object.key("roleArn").string(var_162);
    }
    if let Some(var_163) = &input.secret_arn {
        object.key("secretArn").string(var_163);
    }
    if let Some(var_164) = &input.url {
        object.key("url").string(var_164);
    }
}

pub fn serialize_structure_media_stream_output_configuration_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaStreamOutputConfigurationRequest,
) {
    if let Some(var_165) = &input.destination_configurations {
        let mut array_166 = object.key("destinationConfigurations").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_destination_configuration_request(
                    &mut object_168,
                    item_167,
                );
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.encoding_name {
        object.key("encodingName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.encoding_parameters {
        let mut object_171 = object.key("encodingParameters").start_object();
        crate::json_ser::serialize_structure_encoding_parameters_request(&mut object_171, var_170);
        object_171.finish();
    }
    if let Some(var_172) = &input.media_stream_name {
        object.key("mediaStreamName").string(var_172);
    }
}

pub fn serialize_structure_vpc_interface_attachment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcInterfaceAttachment,
) {
    if let Some(var_173) = &input.vpc_interface_name {
        object.key("vpcInterfaceName").string(var_173);
    }
}

pub fn serialize_structure_source_priority(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourcePriority,
) {
    if let Some(var_174) = &input.primary_source {
        object.key("primarySource").string(var_174);
    }
}

pub fn serialize_structure_fmtp_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FmtpRequest,
) {
    if let Some(var_175) = &input.channel_order {
        object.key("channelOrder").string(var_175);
    }
    if let Some(var_176) = &input.colorimetry {
        object.key("colorimetry").string(var_176.as_str());
    }
    if let Some(var_177) = &input.exact_framerate {
        object.key("exactFramerate").string(var_177);
    }
    if let Some(var_178) = &input.par {
        object.key("par").string(var_178);
    }
    if let Some(var_179) = &input.range {
        object.key("range").string(var_179.as_str());
    }
    if let Some(var_180) = &input.scan_mode {
        object.key("scanMode").string(var_180.as_str());
    }
    if let Some(var_181) = &input.tcs {
        object.key("tcs").string(var_181.as_str());
    }
}

pub fn serialize_structure_input_configuration_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfigurationRequest,
) {
    {
        object.key("inputPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.input_port).into()),
        );
    }
    if let Some(var_182) = &input.interface {
        let mut object_183 = object.key("interface").start_object();
        crate::json_ser::serialize_structure_interface_request(&mut object_183, var_182);
        object_183.finish();
    }
}

pub fn serialize_structure_destination_configuration_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationConfigurationRequest,
) {
    if let Some(var_184) = &input.destination_ip {
        object.key("destinationIp").string(var_184);
    }
    {
        object.key("destinationPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_185) = &input.interface {
        let mut object_186 = object.key("interface").start_object();
        crate::json_ser::serialize_structure_interface_request(&mut object_186, var_185);
        object_186.finish();
    }
}

pub fn serialize_structure_encoding_parameters_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncodingParametersRequest,
) {
    {
        object.key("compressionFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.compression_factor).into()),
        );
    }
    if let Some(var_187) = &input.encoder_profile {
        object.key("encoderProfile").string(var_187.as_str());
    }
}

pub fn serialize_structure_interface_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InterfaceRequest,
) {
    if let Some(var_188) = &input.name {
        object.key("name").string(var_188);
    }
}
