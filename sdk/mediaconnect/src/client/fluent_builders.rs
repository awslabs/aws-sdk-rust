// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `AddFlowMediaStreams`.
///
/// Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddFlowMediaStreams {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_flow_media_streams_input::Builder,
}
impl AddFlowMediaStreams {
    /// Creates a new `AddFlowMediaStreams`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddFlowMediaStreams,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddFlowMediaStreamsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddFlowMediaStreamsOutput,
        aws_smithy_http::result::SdkError<crate::error::AddFlowMediaStreamsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// Appends an item to `MediaStreams`.
    ///
    /// To override the contents of this collection use [`set_media_streams`](Self::set_media_streams).
    ///
    /// The media streams that you want to add to the flow.
    pub fn media_streams(mut self, input: crate::model::AddMediaStreamRequest) -> Self {
        self.inner = self.inner.media_streams(input);
        self
    }
    /// The media streams that you want to add to the flow.
    pub fn set_media_streams(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AddMediaStreamRequest>>,
    ) -> Self {
        self.inner = self.inner.set_media_streams(input);
        self
    }
}

/// Fluent builder constructing a request to `AddFlowOutputs`.
///
/// Adds outputs to an existing flow. You can create up to 50 outputs per flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddFlowOutputs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_flow_outputs_input::Builder,
}
impl AddFlowOutputs {
    /// Creates a new `AddFlowOutputs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddFlowOutputs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddFlowOutputsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddFlowOutputsOutput,
        aws_smithy_http::result::SdkError<crate::error::AddFlowOutputsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to add outputs to.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to add outputs to.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// Appends an item to `Outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// A list of outputs that you want to add.
    pub fn outputs(mut self, input: crate::model::AddOutputRequest) -> Self {
        self.inner = self.inner.outputs(input);
        self
    }
    /// A list of outputs that you want to add.
    pub fn set_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AddOutputRequest>>,
    ) -> Self {
        self.inner = self.inner.set_outputs(input);
        self
    }
}

/// Fluent builder constructing a request to `AddFlowSources`.
///
/// Adds Sources to flow
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddFlowSources {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_flow_sources_input::Builder,
}
impl AddFlowSources {
    /// Creates a new `AddFlowSources`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddFlowSources,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddFlowSourcesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddFlowSourcesOutput,
        aws_smithy_http::result::SdkError<crate::error::AddFlowSourcesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to mutate.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to mutate.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// Appends an item to `Sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// A list of sources that you want to add.
    pub fn sources(mut self, input: crate::model::SetSourceRequest) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// A list of sources that you want to add.
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SetSourceRequest>>,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
}

/// Fluent builder constructing a request to `AddFlowVpcInterfaces`.
///
/// Adds VPC interfaces to flow
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AddFlowVpcInterfaces {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::add_flow_vpc_interfaces_input::Builder,
}
impl AddFlowVpcInterfaces {
    /// Creates a new `AddFlowVpcInterfaces`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AddFlowVpcInterfaces,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AddFlowVpcInterfacesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AddFlowVpcInterfacesOutput,
        aws_smithy_http::result::SdkError<crate::error::AddFlowVpcInterfacesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to mutate.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to mutate.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// Appends an item to `VpcInterfaces`.
    ///
    /// To override the contents of this collection use [`set_vpc_interfaces`](Self::set_vpc_interfaces).
    ///
    /// A list of VPC interfaces that you want to add.
    pub fn vpc_interfaces(mut self, input: crate::model::VpcInterfaceRequest) -> Self {
        self.inner = self.inner.vpc_interfaces(input);
        self
    }
    /// A list of VPC interfaces that you want to add.
    pub fn set_vpc_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VpcInterfaceRequest>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interfaces(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateFlow`.
///
/// Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_flow_input::Builder,
}
impl CreateFlow {
    /// Creates a new `CreateFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// Appends an item to `Entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// The entitlements that you want to grant on a flow.
    pub fn entitlements(mut self, input: crate::model::GrantEntitlementRequest) -> Self {
        self.inner = self.inner.entitlements(input);
        self
    }
    /// The entitlements that you want to grant on a flow.
    pub fn set_entitlements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::GrantEntitlementRequest>>,
    ) -> Self {
        self.inner = self.inner.set_entitlements(input);
        self
    }
    /// Appends an item to `MediaStreams`.
    ///
    /// To override the contents of this collection use [`set_media_streams`](Self::set_media_streams).
    ///
    /// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    pub fn media_streams(mut self, input: crate::model::AddMediaStreamRequest) -> Self {
        self.inner = self.inner.media_streams(input);
        self
    }
    /// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    pub fn set_media_streams(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AddMediaStreamRequest>>,
    ) -> Self {
        self.inner = self.inner.set_media_streams(input);
        self
    }
    /// The name of the flow.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// The name of the flow.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `Outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// The outputs that you want to add to this flow.
    pub fn outputs(mut self, input: crate::model::AddOutputRequest) -> Self {
        self.inner = self.inner.outputs(input);
        self
    }
    /// The outputs that you want to add to this flow.
    pub fn set_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AddOutputRequest>>,
    ) -> Self {
        self.inner = self.inner.set_outputs(input);
        self
    }
    /// The settings for the source of the flow.
    pub fn source(mut self, input: crate::model::SetSourceRequest) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// The settings for the source of the flow.
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::model::SetSourceRequest>,
    ) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// The settings for source failover.
    pub fn source_failover_config(mut self, input: crate::model::FailoverConfig) -> Self {
        self.inner = self.inner.source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn set_source_failover_config(
        mut self,
        input: std::option::Option<crate::model::FailoverConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_failover_config(input);
        self
    }
    /// Appends an item to `Sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn sources(mut self, input: crate::model::SetSourceRequest) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SetSourceRequest>>,
    ) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    /// Appends an item to `VpcInterfaces`.
    ///
    /// To override the contents of this collection use [`set_vpc_interfaces`](Self::set_vpc_interfaces).
    ///
    /// The VPC interfaces you want on the flow.
    pub fn vpc_interfaces(mut self, input: crate::model::VpcInterfaceRequest) -> Self {
        self.inner = self.inner.vpc_interfaces(input);
        self
    }
    /// The VPC interfaces you want on the flow.
    pub fn set_vpc_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::VpcInterfaceRequest>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interfaces(input);
        self
    }
    /// Create maintenance setting for a flow
    pub fn maintenance(mut self, input: crate::model::AddMaintenance) -> Self {
        self.inner = self.inner.maintenance(input);
        self
    }
    /// Create maintenance setting for a flow
    pub fn set_maintenance(
        mut self,
        input: std::option::Option<crate::model::AddMaintenance>,
    ) -> Self {
        self.inner = self.inner.set_maintenance(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteFlow`.
///
/// Deletes a flow. Before you can delete a flow, you must stop the flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_flow_input::Builder,
}
impl DeleteFlow {
    /// Creates a new `DeleteFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ARN of the flow that you want to delete.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The ARN of the flow that you want to delete.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFlow`.
///
/// Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_flow_input::Builder,
}
impl DescribeFlow {
    /// Creates a new `DescribeFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ARN of the flow that you want to describe.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The ARN of the flow that you want to describe.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeOffering`.
///
/// Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOffering {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_offering_input::Builder,
}
impl DescribeOffering {
    /// Creates a new `DescribeOffering`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeOffering,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeOfferingError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeOfferingOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeOfferingError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn offering_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.offering_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn set_offering_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_offering_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeReservation`.
///
/// Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_reservation_input::Builder,
}
impl DescribeReservation {
    /// Creates a new `DescribeReservation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeReservation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeReservationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeReservationOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeReservationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) of the reservation.
    pub fn reservation_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reservation_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the reservation.
    pub fn set_reservation_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reservation_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `GrantFlowEntitlements`.
///
/// Grants entitlements to an existing flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GrantFlowEntitlements {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::grant_flow_entitlements_input::Builder,
}
impl GrantFlowEntitlements {
    /// Creates a new `GrantFlowEntitlements`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GrantFlowEntitlements,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GrantFlowEntitlementsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GrantFlowEntitlementsOutput,
        aws_smithy_http::result::SdkError<crate::error::GrantFlowEntitlementsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `Entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// The list of entitlements that you want to grant.
    pub fn entitlements(mut self, input: crate::model::GrantEntitlementRequest) -> Self {
        self.inner = self.inner.entitlements(input);
        self
    }
    /// The list of entitlements that you want to grant.
    pub fn set_entitlements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::GrantEntitlementRequest>>,
    ) -> Self {
        self.inner = self.inner.set_entitlements(input);
        self
    }
    /// The flow that you want to grant entitlements on.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to grant entitlements on.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEntitlements`.
///
/// Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEntitlements {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_entitlements_input::Builder,
}
impl ListEntitlements {
    /// Creates a new `ListEntitlements`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEntitlements,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEntitlementsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEntitlementsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEntitlementsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEntitlementsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEntitlementsPaginator {
        crate::paginator::ListEntitlementsPaginator::new(self.handle, self.inner)
    }
    /// The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFlows`.
///
/// Displays a list of flows that are associated with this account. This request returns a paginated result.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFlows {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_flows_input::Builder,
}
impl ListFlows {
    /// Creates a new `ListFlows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFlows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFlowsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFlowsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFlowsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFlowsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFlowsPaginator {
        crate::paginator::ListFlowsPaginator::new(self.handle, self.inner)
    }
    /// The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListOfferings`.
///
/// Displays a list of all offerings that are available to this account in the current AWS Region. If you have an active reservation (which means you've purchased an offering that has already started and hasn't expired yet), your account isn't eligible for other offerings.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListOfferings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_offerings_input::Builder,
}
impl ListOfferings {
    /// Creates a new `ListOfferings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListOfferings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListOfferingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListOfferingsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListOfferingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListOfferingsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListOfferingsPaginator {
        crate::paginator::ListOfferingsPaginator::new(self.handle, self.inner)
    }
    /// The maximum number of results to return per API request. For example, you submit a ListOfferings request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The maximum number of results to return per API request. For example, you submit a ListOfferings request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListReservations`.
///
/// Displays a list of all reservations that have been purchased by this account in the current AWS Region. This list includes all reservations in all states (such as active and expired).
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReservations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_reservations_input::Builder,
}
impl ListReservations {
    /// Creates a new `ListReservations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListReservations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListReservationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListReservationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListReservationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListReservationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListReservationsPaginator {
        crate::paginator::ListReservationsPaginator::new(self.handle, self.inner)
    }
    /// The maximum number of results to return per API request. For example, you submit a ListReservations request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The maximum number of results to return per API request. For example, you submit a ListReservations request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// List all tags on an AWS Elemental MediaConnect resource
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `PurchaseOffering`.
///
/// Submits a request to purchase an offering. If you already have an active reservation, you can't purchase another offering.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseOffering {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::purchase_offering_input::Builder,
}
impl PurchaseOffering {
    /// Creates a new `PurchaseOffering`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PurchaseOffering,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PurchaseOfferingError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PurchaseOfferingOutput,
        aws_smithy_http::result::SdkError<crate::error::PurchaseOfferingError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn offering_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.offering_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn set_offering_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_offering_arn(input);
        self
    }
    /// The name that you want to use for the reservation.
    pub fn reservation_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reservation_name(input.into());
        self
    }
    /// The name that you want to use for the reservation.
    pub fn set_reservation_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reservation_name(input);
        self
    }
    /// The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
    pub fn start(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start(input.into());
        self
    }
    /// The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
    pub fn set_start(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_start(input);
        self
    }
}

/// Fluent builder constructing a request to `RemoveFlowMediaStream`.
///
/// Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFlowMediaStream {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::remove_flow_media_stream_input::Builder,
}
impl RemoveFlowMediaStream {
    /// Creates a new `RemoveFlowMediaStream`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RemoveFlowMediaStream,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowMediaStreamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RemoveFlowMediaStreamOutput,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowMediaStreamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The name of the media stream that you want to remove.
    pub fn media_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.media_stream_name(input.into());
        self
    }
    /// The name of the media stream that you want to remove.
    pub fn set_media_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_media_stream_name(input);
        self
    }
}

/// Fluent builder constructing a request to `RemoveFlowOutput`.
///
/// Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFlowOutput {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::remove_flow_output_input::Builder,
}
impl RemoveFlowOutput {
    /// Creates a new `RemoveFlowOutput`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RemoveFlowOutput,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowOutputError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RemoveFlowOutputOutput,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowOutputError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to remove an output from.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to remove an output from.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The ARN of the output that you want to remove.
    pub fn output_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_arn(input.into());
        self
    }
    /// The ARN of the output that you want to remove.
    pub fn set_output_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RemoveFlowSource`.
///
/// Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFlowSource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::remove_flow_source_input::Builder,
}
impl RemoveFlowSource {
    /// Creates a new `RemoveFlowSource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RemoveFlowSource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowSourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RemoveFlowSourceOutput,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowSourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to remove a source from.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to remove a source from.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The ARN of the source that you want to remove.
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// The ARN of the source that you want to remove.
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RemoveFlowVpcInterface`.
///
/// Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFlowVpcInterface {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::remove_flow_vpc_interface_input::Builder,
}
impl RemoveFlowVpcInterface {
    /// Creates a new `RemoveFlowVpcInterface`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RemoveFlowVpcInterface,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowVpcInterfaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RemoveFlowVpcInterfaceOutput,
        aws_smithy_http::result::SdkError<crate::error::RemoveFlowVpcInterfaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to remove a VPC interface from.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to remove a VPC interface from.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The name of the VPC interface that you want to remove.
    pub fn vpc_interface_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_interface_name(input.into());
        self
    }
    /// The name of the VPC interface that you want to remove.
    pub fn set_vpc_interface_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interface_name(input);
        self
    }
}

/// Fluent builder constructing a request to `RevokeFlowEntitlement`.
///
/// Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RevokeFlowEntitlement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::revoke_flow_entitlement_input::Builder,
}
impl RevokeFlowEntitlement {
    /// Creates a new `RevokeFlowEntitlement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RevokeFlowEntitlement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RevokeFlowEntitlementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RevokeFlowEntitlementOutput,
        aws_smithy_http::result::SdkError<crate::error::RevokeFlowEntitlementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ARN of the entitlement that you want to revoke.
    pub fn entitlement_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entitlement_arn(input.into());
        self
    }
    /// The ARN of the entitlement that you want to revoke.
    pub fn set_entitlement_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_entitlement_arn(input);
        self
    }
    /// The flow that you want to revoke an entitlement from.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to revoke an entitlement from.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `StartFlow`.
///
/// Starts a flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_flow_input::Builder,
}
impl StartFlow {
    /// Creates a new `StartFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::StartFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ARN of the flow that you want to start.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The ARN of the flow that you want to start.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `StopFlow`.
///
/// Stops a flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_flow_input::Builder,
}
impl StopFlow {
    /// Creates a new `StopFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::StopFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ARN of the flow that you want to stop.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The ARN of the flow that you want to stop.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// Deletes specified tags from a resource.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// The keys of the tags to be removed.
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// The keys of the tags to be removed.
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlow`.
///
/// Updates flow
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlow {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_input::Builder,
}
impl UpdateFlow {
    /// Creates a new `UpdateFlow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to update.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to update.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The settings for source failover.
    pub fn source_failover_config(mut self, input: crate::model::UpdateFailoverConfig) -> Self {
        self.inner = self.inner.source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn set_source_failover_config(
        mut self,
        input: std::option::Option<crate::model::UpdateFailoverConfig>,
    ) -> Self {
        self.inner = self.inner.set_source_failover_config(input);
        self
    }
    /// Update maintenance setting for a flow
    pub fn maintenance(mut self, input: crate::model::UpdateMaintenance) -> Self {
        self.inner = self.inner.maintenance(input);
        self
    }
    /// Update maintenance setting for a flow
    pub fn set_maintenance(
        mut self,
        input: std::option::Option<crate::model::UpdateMaintenance>,
    ) -> Self {
        self.inner = self.inner.set_maintenance(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlowEntitlement`.
///
/// You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlowEntitlement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_entitlement_input::Builder,
}
impl UpdateFlowEntitlement {
    /// Creates a new `UpdateFlowEntitlement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlowEntitlement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowEntitlementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowEntitlementOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowEntitlementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The type of encryption that will be used on the output associated with this entitlement.
    pub fn encryption(mut self, input: crate::model::UpdateEncryption) -> Self {
        self.inner = self.inner.encryption(input);
        self
    }
    /// The type of encryption that will be used on the output associated with this entitlement.
    pub fn set_encryption(
        mut self,
        input: std::option::Option<crate::model::UpdateEncryption>,
    ) -> Self {
        self.inner = self.inner.set_encryption(input);
        self
    }
    /// The ARN of the entitlement that you want to update.
    pub fn entitlement_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entitlement_arn(input.into());
        self
    }
    /// The ARN of the entitlement that you want to update.
    pub fn set_entitlement_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_entitlement_arn(input);
        self
    }
    /// An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
    pub fn entitlement_status(mut self, input: crate::model::EntitlementStatus) -> Self {
        self.inner = self.inner.entitlement_status(input);
        self
    }
    /// An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
    pub fn set_entitlement_status(
        mut self,
        input: std::option::Option<crate::model::EntitlementStatus>,
    ) -> Self {
        self.inner = self.inner.set_entitlement_status(input);
        self
    }
    /// The flow that is associated with the entitlement that you want to update.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that is associated with the entitlement that you want to update.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// Appends an item to `Subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
    pub fn subscribers(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subscribers(input.into());
        self
    }
    /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
    pub fn set_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_subscribers(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlowMediaStream`.
///
/// Updates an existing media stream.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlowMediaStream {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_media_stream_input::Builder,
}
impl UpdateFlowMediaStream {
    /// Creates a new `UpdateFlowMediaStream`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlowMediaStream,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowMediaStreamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowMediaStreamOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowMediaStreamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The attributes that you want to assign to the media stream.
    pub fn attributes(mut self, input: crate::model::MediaStreamAttributesRequest) -> Self {
        self.inner = self.inner.attributes(input);
        self
    }
    /// The attributes that you want to assign to the media stream.
    pub fn set_attributes(
        mut self,
        input: std::option::Option<crate::model::MediaStreamAttributesRequest>,
    ) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn clock_rate(mut self, input: i32) -> Self {
        self.inner = self.inner.clock_rate(input);
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn set_clock_rate(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_clock_rate(input);
        self
    }
    /// Description
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// Description
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The name of the media stream that you want to update.
    pub fn media_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.media_stream_name(input.into());
        self
    }
    /// The name of the media stream that you want to update.
    pub fn set_media_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_media_stream_name(input);
        self
    }
    /// The type of media stream.
    pub fn media_stream_type(mut self, input: crate::model::MediaStreamType) -> Self {
        self.inner = self.inner.media_stream_type(input);
        self
    }
    /// The type of media stream.
    pub fn set_media_stream_type(
        mut self,
        input: std::option::Option<crate::model::MediaStreamType>,
    ) -> Self {
        self.inner = self.inner.set_media_stream_type(input);
        self
    }
    /// The resolution of the video.
    pub fn video_format(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.video_format(input.into());
        self
    }
    /// The resolution of the video.
    pub fn set_video_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_video_format(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlowOutput`.
///
/// Updates an existing flow output.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlowOutput {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_output_input::Builder,
}
impl UpdateFlowOutput {
    /// Creates a new `UpdateFlowOutput`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlowOutput,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowOutputError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowOutputOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowOutputError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `CidrAllowList`.
    ///
    /// To override the contents of this collection use [`set_cidr_allow_list`](Self::set_cidr_allow_list).
    ///
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn cidr_allow_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cidr_allow_list(input.into());
        self
    }
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn set_cidr_allow_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_cidr_allow_list(input);
        self
    }
    /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The IP address where you want to send the output.
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination(input.into());
        self
    }
    /// The IP address where you want to send the output.
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn encryption(mut self, input: crate::model::UpdateEncryption) -> Self {
        self.inner = self.inner.encryption(input);
        self
    }
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    pub fn set_encryption(
        mut self,
        input: std::option::Option<crate::model::UpdateEncryption>,
    ) -> Self {
        self.inner = self.inner.set_encryption(input);
        self
    }
    /// The flow that is associated with the output that you want to update.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that is associated with the output that you want to update.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn max_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.max_latency(input);
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn set_max_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_latency(input);
        self
    }
    /// Appends an item to `MediaStreamOutputConfigurations`.
    ///
    /// To override the contents of this collection use [`set_media_stream_output_configurations`](Self::set_media_stream_output_configurations).
    ///
    /// The media streams that are associated with the output, and the parameters for those associations.
    pub fn media_stream_output_configurations(
        mut self,
        input: crate::model::MediaStreamOutputConfigurationRequest,
    ) -> Self {
        self.inner = self.inner.media_stream_output_configurations(input);
        self
    }
    /// The media streams that are associated with the output, and the parameters for those associations.
    pub fn set_media_stream_output_configurations(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::MediaStreamOutputConfigurationRequest>,
        >,
    ) -> Self {
        self.inner = self.inner.set_media_stream_output_configurations(input);
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn min_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.min_latency(input);
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn set_min_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_latency(input);
        self
    }
    /// The ARN of the output that you want to update.
    pub fn output_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_arn(input.into());
        self
    }
    /// The ARN of the output that you want to update.
    pub fn set_output_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_arn(input);
        self
    }
    /// The port to use when content is distributed to this output.
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// The port to use when content is distributed to this output.
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// The protocol to use for the output.
    pub fn protocol(mut self, input: crate::model::Protocol) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// The protocol to use for the output.
    pub fn set_protocol(mut self, input: std::option::Option<crate::model::Protocol>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// The remote ID for the Zixi-pull stream.
    pub fn remote_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.remote_id(input.into());
        self
    }
    /// The remote ID for the Zixi-pull stream.
    pub fn set_remote_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_remote_id(input);
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn sender_control_port(mut self, input: i32) -> Self {
        self.inner = self.inner.sender_control_port(input);
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn set_sender_control_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_sender_control_port(input);
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn sender_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sender_ip_address(input.into());
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn set_sender_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sender_ip_address(input);
        self
    }
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    pub fn smoothing_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.smoothing_latency(input);
        self
    }
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    pub fn set_smoothing_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_smoothing_latency(input);
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_id(input.into());
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_id(input);
        self
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn vpc_interface_attachment(mut self, input: crate::model::VpcInterfaceAttachment) -> Self {
        self.inner = self.inner.vpc_interface_attachment(input);
        self
    }
    /// The name of the VPC interface attachment to use for this output.
    pub fn set_vpc_interface_attachment(
        mut self,
        input: std::option::Option<crate::model::VpcInterfaceAttachment>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interface_attachment(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateFlowSource`.
///
/// Updates the source of a flow.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFlowSource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_flow_source_input::Builder,
}
impl UpdateFlowSource {
    /// Creates a new `UpdateFlowSource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateFlowSource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowSourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateFlowSourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateFlowSourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The type of encryption used on the content ingested from this source.
    pub fn decryption(mut self, input: crate::model::UpdateEncryption) -> Self {
        self.inner = self.inner.decryption(input);
        self
    }
    /// The type of encryption used on the content ingested from this source.
    pub fn set_decryption(
        mut self,
        input: std::option::Option<crate::model::UpdateEncryption>,
    ) -> Self {
        self.inner = self.inner.set_decryption(input);
        self
    }
    /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
    pub fn entitlement_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entitlement_arn(input.into());
        self
    }
    /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
    pub fn set_entitlement_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_entitlement_arn(input);
        self
    }
    /// The flow that is associated with the source that you want to update.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that is associated with the source that you want to update.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The port that the flow will be listening on for incoming content.
    pub fn ingest_port(mut self, input: i32) -> Self {
        self.inner = self.inner.ingest_port(input);
        self
    }
    /// The port that the flow will be listening on for incoming content.
    pub fn set_ingest_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_ingest_port(input);
        self
    }
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.inner = self.inner.max_bitrate(input);
        self
    }
    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    pub fn set_max_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_bitrate(input);
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn max_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.max_latency(input);
        self
    }
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    pub fn set_max_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_latency(input);
        self
    }
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    pub fn max_sync_buffer(mut self, input: i32) -> Self {
        self.inner = self.inner.max_sync_buffer(input);
        self
    }
    /// The size of the buffer (in milliseconds) to use to sync incoming source data.
    pub fn set_max_sync_buffer(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_sync_buffer(input);
        self
    }
    /// Appends an item to `MediaStreamSourceConfigurations`.
    ///
    /// To override the contents of this collection use [`set_media_stream_source_configurations`](Self::set_media_stream_source_configurations).
    ///
    /// The media streams that are associated with the source, and the parameters for those associations.
    pub fn media_stream_source_configurations(
        mut self,
        input: crate::model::MediaStreamSourceConfigurationRequest,
    ) -> Self {
        self.inner = self.inner.media_stream_source_configurations(input);
        self
    }
    /// The media streams that are associated with the source, and the parameters for those associations.
    pub fn set_media_stream_source_configurations(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::MediaStreamSourceConfigurationRequest>,
        >,
    ) -> Self {
        self.inner = self.inner.set_media_stream_source_configurations(input);
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn min_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.min_latency(input);
        self
    }
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    pub fn set_min_latency(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_latency(input);
        self
    }
    /// The protocol that is used by the source.
    pub fn protocol(mut self, input: crate::model::Protocol) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// The protocol that is used by the source.
    pub fn set_protocol(mut self, input: std::option::Option<crate::model::Protocol>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn sender_control_port(mut self, input: i32) -> Self {
        self.inner = self.inner.sender_control_port(input);
        self
    }
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    pub fn set_sender_control_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_sender_control_port(input);
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn sender_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sender_ip_address(input.into());
        self
    }
    /// The IP address that the flow communicates with to initiate connection with the sender.
    pub fn set_sender_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_sender_ip_address(input);
        self
    }
    /// The ARN of the source that you want to update.
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// The ARN of the source that you want to update.
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// Source IP or domain name for SRT-caller protocol.
    pub fn source_listener_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_listener_address(input.into());
        self
    }
    /// Source IP or domain name for SRT-caller protocol.
    pub fn set_source_listener_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_listener_address(input);
        self
    }
    /// Source port for SRT-caller protocol.
    pub fn source_listener_port(mut self, input: i32) -> Self {
        self.inner = self.inner.source_listener_port(input);
        self
    }
    /// Source port for SRT-caller protocol.
    pub fn set_source_listener_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_source_listener_port(input);
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stream_id(input.into());
        self
    }
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stream_id(input);
        self
    }
    /// The name of the VPC interface to use for this source.
    pub fn vpc_interface_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_interface_name(input.into());
        self
    }
    /// The name of the VPC interface to use for this source.
    pub fn set_vpc_interface_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interface_name(input);
        self
    }
    /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn whitelist_cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.whitelist_cidr(input.into());
        self
    }
    /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    pub fn set_whitelist_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_whitelist_cidr(input);
        self
    }
}
