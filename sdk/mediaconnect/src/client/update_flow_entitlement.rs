// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFlowEntitlement`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_description):<br>required: **false**<br>A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.<br>
    ///   - [`encryption(UpdateEncryption)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::encryption) / [`set_encryption(Option<UpdateEncryption>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_encryption):<br>required: **false**<br>The type of encryption that will be used on the output associated with this entitlement. Allowable encryption types: static-key, speke.<br>
    ///   - [`entitlement_arn(impl Into<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::entitlement_arn) / [`set_entitlement_arn(Option<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_entitlement_arn):<br>required: **true**<br>The ARN of the entitlement that you want to update.<br>
    ///   - [`entitlement_status(EntitlementStatus)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::entitlement_status) / [`set_entitlement_status(Option<EntitlementStatus>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_entitlement_status):<br>required: **false**<br>An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.<br>
    ///   - [`flow_arn(impl Into<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::flow_arn) / [`set_flow_arn(Option<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_flow_arn):<br>required: **true**<br>The flow that is associated with the entitlement that you want to update.<br>
    ///   - [`subscribers(impl Into<String>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::subscribers) / [`set_subscribers(Option<Vec::<String>>)`](crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::set_subscribers):<br>required: **false**<br>The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.<br>
    /// - On success, responds with [`UpdateFlowEntitlementOutput`](crate::operation::update_flow_entitlement::UpdateFlowEntitlementOutput) with field(s):
    ///   - [`entitlement(Option<Entitlement>)`](crate::operation::update_flow_entitlement::UpdateFlowEntitlementOutput::entitlement): The new configuration of the entitlement that you updated.
    ///   - [`flow_arn(Option<String>)`](crate::operation::update_flow_entitlement::UpdateFlowEntitlementOutput::flow_arn): The ARN of the flow that this entitlement was granted on.
    /// - On failure, responds with [`SdkError<UpdateFlowEntitlementError>`](crate::operation::update_flow_entitlement::UpdateFlowEntitlementError)
    pub fn update_flow_entitlement(&self) -> crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder {
        crate::operation::update_flow_entitlement::builders::UpdateFlowEntitlementFluentBuilder::new(self.handle.clone())
    }
}
