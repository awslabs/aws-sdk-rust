// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_reservation::_describe_reservation_output::DescribeReservationOutputBuilder;

pub use crate::operation::describe_reservation::_describe_reservation_input::DescribeReservationInputBuilder;

impl crate::operation::describe_reservation::builders::DescribeReservationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_reservation::DescribeReservationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_reservation::DescribeReservationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_reservation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeReservation`.
///
/// Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeReservationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_reservation::builders::DescribeReservationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_reservation::DescribeReservationOutput,
        crate::operation::describe_reservation::DescribeReservationError,
    > for DescribeReservationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_reservation::DescribeReservationOutput,
            crate::operation::describe_reservation::DescribeReservationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeReservationFluentBuilder {
    /// Creates a new `DescribeReservation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeReservation as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_reservation::builders::DescribeReservationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_reservation::DescribeReservationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_reservation::DescribeReservationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_reservation::DescribeReservation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_reservation::DescribeReservation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_reservation::DescribeReservationOutput,
        crate::operation::describe_reservation::DescribeReservationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// The Amazon Resource Name (ARN) of the reservation.
    pub fn reservation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.reservation_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the reservation.
    pub fn set_reservation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_reservation_arn(input);
        self
    }
    /// The Amazon Resource Name (ARN) of the reservation.
    pub fn get_reservation_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_reservation_arn()
    }
}
