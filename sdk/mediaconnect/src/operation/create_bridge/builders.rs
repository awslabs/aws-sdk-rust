// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_bridge::_create_bridge_output::CreateBridgeOutputBuilder;

pub use crate::operation::create_bridge::_create_bridge_input::CreateBridgeInputBuilder;

impl CreateBridgeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_bridge::CreateBridgeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_bridge::CreateBridgeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_bridge();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateBridge`.
///
/// Creates a new bridge. The request must include one source.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateBridgeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_bridge::builders::CreateBridgeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_bridge::CreateBridgeOutput,
        crate::operation::create_bridge::CreateBridgeError,
    > for CreateBridgeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_bridge::CreateBridgeOutput,
            crate::operation::create_bridge::CreateBridgeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateBridgeFluentBuilder {
    /// Creates a new `CreateBridge`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateBridge as a reference.
    pub fn as_input(&self) -> &crate::operation::create_bridge::builders::CreateBridgeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_bridge::CreateBridgeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_bridge::CreateBridgeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_bridge::CreateBridge::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_bridge::CreateBridge::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_bridge::CreateBridgeOutput,
        crate::operation::create_bridge::CreateBridgeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a bridge with the egress bridge type. An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
    pub fn egress_gateway_bridge(mut self, input: crate::types::AddEgressGatewayBridgeRequest) -> Self {
        self.inner = self.inner.egress_gateway_bridge(input);
        self
    }
    /// Create a bridge with the egress bridge type. An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
    pub fn set_egress_gateway_bridge(mut self, input: ::std::option::Option<crate::types::AddEgressGatewayBridgeRequest>) -> Self {
        self.inner = self.inner.set_egress_gateway_bridge(input);
        self
    }
    /// Create a bridge with the egress bridge type. An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
    pub fn get_egress_gateway_bridge(&self) -> &::std::option::Option<crate::types::AddEgressGatewayBridgeRequest> {
        self.inner.get_egress_gateway_bridge()
    }
    /// Create a bridge with the ingress bridge type. An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
    pub fn ingress_gateway_bridge(mut self, input: crate::types::AddIngressGatewayBridgeRequest) -> Self {
        self.inner = self.inner.ingress_gateway_bridge(input);
        self
    }
    /// Create a bridge with the ingress bridge type. An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
    pub fn set_ingress_gateway_bridge(mut self, input: ::std::option::Option<crate::types::AddIngressGatewayBridgeRequest>) -> Self {
        self.inner = self.inner.set_ingress_gateway_bridge(input);
        self
    }
    /// Create a bridge with the ingress bridge type. An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
    pub fn get_ingress_gateway_bridge(&self) -> &::std::option::Option<crate::types::AddIngressGatewayBridgeRequest> {
        self.inner.get_ingress_gateway_bridge()
    }
    /// The name of the bridge. This name can not be modified after the bridge is created.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// The name of the bridge. This name can not be modified after the bridge is created.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// The name of the bridge. This name can not be modified after the bridge is created.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// Appends an item to `Outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// The outputs that you want to add to this bridge.
    pub fn outputs(mut self, input: crate::types::AddBridgeOutputRequest) -> Self {
        self.inner = self.inner.outputs(input);
        self
    }
    /// The outputs that you want to add to this bridge.
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddBridgeOutputRequest>>) -> Self {
        self.inner = self.inner.set_outputs(input);
        self
    }
    /// The outputs that you want to add to this bridge.
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddBridgeOutputRequest>> {
        self.inner.get_outputs()
    }
    /// The bridge placement Amazon Resource Number (ARN).
    pub fn placement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.placement_arn(input.into());
        self
    }
    /// The bridge placement Amazon Resource Number (ARN).
    pub fn set_placement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_placement_arn(input);
        self
    }
    /// The bridge placement Amazon Resource Number (ARN).
    pub fn get_placement_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_placement_arn()
    }
    /// The settings for source failover.
    pub fn source_failover_config(mut self, input: crate::types::FailoverConfig) -> Self {
        self.inner = self.inner.source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn set_source_failover_config(mut self, input: ::std::option::Option<crate::types::FailoverConfig>) -> Self {
        self.inner = self.inner.set_source_failover_config(input);
        self
    }
    /// The settings for source failover.
    pub fn get_source_failover_config(&self) -> &::std::option::Option<crate::types::FailoverConfig> {
        self.inner.get_source_failover_config()
    }
    /// Appends an item to `Sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// The sources that you want to add to this bridge.
    pub fn sources(mut self, input: crate::types::AddBridgeSourceRequest) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// The sources that you want to add to this bridge.
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddBridgeSourceRequest>>) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    /// The sources that you want to add to this bridge.
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddBridgeSourceRequest>> {
        self.inner.get_sources()
    }
}
