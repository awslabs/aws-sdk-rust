// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeregisterGatewayInstanceInput {
    /// Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
    pub force: ::std::option::Option<bool>,
    /// The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
    pub gateway_instance_arn: ::std::option::Option<::std::string::String>,
}
impl DeregisterGatewayInstanceInput {
    /// Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
    pub fn force(&self) -> ::std::option::Option<bool> {
        self.force
    }
    /// The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
    pub fn gateway_instance_arn(&self) -> ::std::option::Option<&str> {
        self.gateway_instance_arn.as_deref()
    }
}
impl DeregisterGatewayInstanceInput {
    /// Creates a new builder-style object to manufacture [`DeregisterGatewayInstanceInput`](crate::operation::deregister_gateway_instance::DeregisterGatewayInstanceInput).
    pub fn builder() -> crate::operation::deregister_gateway_instance::builders::DeregisterGatewayInstanceInputBuilder {
        crate::operation::deregister_gateway_instance::builders::DeregisterGatewayInstanceInputBuilder::default()
    }
}

/// A builder for [`DeregisterGatewayInstanceInput`](crate::operation::deregister_gateway_instance::DeregisterGatewayInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeregisterGatewayInstanceInputBuilder {
    pub(crate) force: ::std::option::Option<bool>,
    pub(crate) gateway_instance_arn: ::std::option::Option<::std::string::String>,
}
impl DeregisterGatewayInstanceInputBuilder {
    /// Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
    pub fn force(mut self, input: bool) -> Self {
        self.force = ::std::option::Option::Some(input);
        self
    }
    /// Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
    pub fn set_force(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force = input;
        self
    }
    /// Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
    pub fn get_force(&self) -> &::std::option::Option<bool> {
        &self.force
    }
    /// The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
    /// This field is required.
    pub fn gateway_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
    pub fn set_gateway_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_instance_arn = input;
        self
    }
    /// The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
    pub fn get_gateway_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_instance_arn
    }
    /// Consumes the builder and constructs a [`DeregisterGatewayInstanceInput`](crate::operation::deregister_gateway_instance::DeregisterGatewayInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::deregister_gateway_instance::DeregisterGatewayInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::deregister_gateway_instance::DeregisterGatewayInstanceInput {
            force: self.force,
            gateway_instance_arn: self.gateway_instance_arn,
        })
    }
}
